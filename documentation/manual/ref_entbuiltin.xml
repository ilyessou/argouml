<?xml version="1.0" encoding="ISO-8859-1"?>

<!--

A description of the built in datatypes, classes, interfaces and stereotypes
within ArgoUML


Modifications
=============

11 Dec 2001:  Jeremy Bennett. Created as new chapter.

-->

<chapter id="ch.ref.entbuiltin">
  <title>&argouml; Built In DataTypes, Classes, Interfaces and
    Stereotypes</title>

  <sect1>
    <title>Introduction</title>

    <para>This chapter describes the datatypes, classes, interfaces and
      stereotypes, which by default, are built in to &argouml;.</para>

    <para>Datatypes, classes and interfaces are generally available for use
      anywhere a class may be selected in the properties tab. The most common
use is for return type and parameter types in method signatures.
</para>

    <sect2>
      <title>Package Structure</title>

      <para>&argouml; datatypes, classes and interfaces are effectively
        organized as a hierarchy beneath the overall model itself. They are in
        four packages, <literal>lang</literal>, <literal>math</literal>,
        <literal>net</literal> and <literal>util</literal>, themselves
        subpackages of <literal>java</literal>, which is a subpackage of the
        model itself. <xref linkend="fig.ref.entclasshier"/> shows this as a
        UML package diagram.</para>

      <!-- This diagram shows the package hierarchy. -->

      <figure id="fig.ref.entclasshier" float="1">
        <title>Hierarchy of datatypes, classes and interfaces within
          &argouml;</title>

        <screenshot><mediaobject>
          <imageobject>
            <imagedata format="GIF" align="center"
                       fileref="images/reference/entclasshier.gif"/>
          </imageobject>
        </mediaobject></screenshot>
      </figure>
    </sect2>
  </sect1>

  <!-- Built in datatypes. -->

  <sect1>
    <title>Built In Datatypes</title>

    <para>These are the built in atomic types. You can change them if you
      wish. However this is not good practice</para>

    <para>All these can be found in the <literal>java.lang</literal> subpackage
      of the main model.</para>

    <note><para>You will not find these exposed within the top level package by
      default. However if you select a datatype (say from within a class
      parameter property sheet), and navigate up, you can navigate up to the
      top package. Thereafter you will find that the package has appeared as a
      subpackage of the model, and you can navigate back down (but only to the
      type you came up from).</para></note>

    <caution><para>You should be aware that these are Java datatypes. They are
      not mandated by the UML standard.</para></caution>

    <para>These are the standard datatypes. For their definition refer to the
      Java standard.</para>

    <itemizedlist>
      <listitem><para><literal>boolean</literal></para></listitem>

      <listitem><para><literal>byte</literal></para></listitem>

      <listitem><para><literal>char</literal></para></listitem>

      <listitem><para><literal>double</literal></para></listitem>

      <listitem><para><literal>float</literal></para></listitem>

      <listitem><para><literal>int</literal></para></listitem>

      <listitem><para><literal>long</literal></para></listitem>

      <listitem><para><literal>short</literal></para></listitem>

      <listitem><para><literal>void</literal></para></listitem>
    </itemizedlist>

    <note><para><literal>void</literal> is not strictly speaking a type, but
      the absence of type. &argouml; knows about void and allows it as an
      option where a datatype may be selected.</para></note>
  </sect1>

  <!-- Built in classes -->

  <sect1>
    <title>Built In Classes</title>

    <para>These are the common classes, corresponding to classes defined within
      the standard Java environment. It is up to you if you wish to change
      them.</para>

    <para>These are found in all four subpackages of the
      <literal>java</literal> subpackage.</para>

    <note><para>As with datatypes, you will not find these exposed within the
      top level package by default. However if you select a datatype (say from
      within a class parameter property sheet), and navigate up, you can
      navigate up to the top package. Thereafter you will find that the package
      has appeared as a subpackage of the model, and you can navigate back down
      (but only to the type you came up from).</para></note>

    <para>For a definition of these classes see the Java language and library
      definitions.</para>

    <!-- Classes in java.lang -->

    <sect2>
      <title>Built In Classes From <literal>java.lang</literal></title>

      <para>These are the classes within the <literal>java.lang</literal>
        package.</para>

      <itemizedlist>
        <listitem><para><literal>Boolean</literal></para></listitem>

        <listitem><para><literal>Byte</literal></para></listitem>

        <listitem><para><literal>Char</literal></para></listitem>

        <listitem><para><literal>Double</literal></para></listitem>

        <listitem><para><literal>Float</literal></para></listitem>

        <listitem><para><literal>Integer</literal></para></listitem>

        <listitem><para><literal>Long</literal></para></listitem>

        <listitem><para><literal>Object</literal></para></listitem>

        <listitem><para><literal>Short</literal></para></listitem>

        <listitem><para><literal>String</literal></para></listitem>
      </itemizedlist>

    </sect2>

    <!-- Classes in java.math -->

    <sect2>
      <title>Built In Classes From <literal>java.math</literal></title>

      <para>These are the classes within the <literal>java.math</literal>
        package.</para>

      <itemizedlist>
        <listitem><para><literal>Big Decimal</literal></para></listitem>

        <listitem><para><literal>Big Integer</literal></para></listitem>
      </itemizedlist>

    </sect2>

    <!-- Classes in java.net -->

    <sect2>
      <title>Built In Classes From <literal>java.net</literal></title>

      <para>These are the classes within the <literal>java.net</literal>
        package.</para>

      <itemizedlist>
        <listitem><para><literal>URL</literal></para></listitem>
      </itemizedlist>

    </sect2>

    <!-- Classes in java.util -->

    <sect2>
      <title>Built In Classes From <literal>java.util</literal></title>

      <para>These are the classes within the <literal>java.util</literal>
        package.</para>

      <itemizedlist>
        <listitem><para><literal>Vector</literal></para></listitem>

        <listitem><para><literal>Date</literal></para></listitem>

        <listitem><para><literal>Time</literal></para></listitem>
      </itemizedlist>
    </sect2>
  </sect1>

  <!-- Built in interfaces. -->

  <sect1>
    <title>Built In Interfaces</title>

    <para>These are some useful interfaces, corresponding to classes defined
      within the standard Java environment. Interfaces have many of the
      properties of classes (like all types) and you can change them if you
      wish.</para>

    <para>All these can be found in the <literal>java.util</literal> subpackage
      of the main model.</para>

    <note><para>You will not find these exposed within the top level package by
      default. However if you select a datatype (say from within a class
      parameter property sheet), and navigate up, you can navigate up to the
      top package. Thereafter you will find that the package has appeared as a
      subpackage of the model, and you can navigate back down (but only to the
      type you came up from).</para></note>

    <para>These are the interfaces defined within the
      <literal>java.util</literal> package. For their definition consult the
      Java language and library references.</para>

    <itemizedlist>
      <listitem><para><literal>Collection</literal></para></listitem>

      <listitem><para><literal>Iterator</literal></para></listitem>

      <listitem><para><literal>List</literal></para></listitem>

      <listitem><para><literal>Set</literal></para></listitem>

      <listitem><para><literal>Sorted Set</literal></para></listitem>
    </itemizedlist>

  </sect1>

  <!-- Built in stereotypes. -->

  <sect1>
    <title>Built In Stereotypes</title>

    <para>UML 1.3 defines a large number of stereotypes which are (mostly)
      supported by &argouml;. In addition &argouml; defines three additional
      stereotypes that may be of use.</para>

    <itemizedlist>
      <listitem><para><literal>machine</literal>. Available to artifacts
        derived from the top level UML metaclass,
        <literal>Element</literal>.</para></listitem>

      <listitem><para><literal>person</literal>. Available to artifacts
        derived from the top level UML metaclass,
        <literal>Element</literal>.</para></listitem>

      <listitem><para><literal>organization</literal>. Available to artifacts
        derived from the UML metaclass
        <literal>ModelElement</literal>.</para></listitem>
    </itemizedlist>

    <caution><para>Not all stereotypes defined by UML&nbsp;1.3 appear in
      &argouml;, due to limitations in the current implementation of some
      artifacts.</para></caution>
  </sect1>

</chapter>

<!-- Local stuff for Emacs - please do not delete

Local Variables:
mode: xml
sgml-doctype: "argomanual.xml"
sgml-parent-document: ("argomanual.xml" "chapter" nil)
sgml-validate-command: "nsgmls -wxml -sv ../docbook-setup/xml.dcl \
  argomanual.xml"
End:

-->
