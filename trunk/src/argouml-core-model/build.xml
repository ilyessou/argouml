<?xml version="1.0" encoding="UTF-8"?>
<!-- $Id$

    Ant build file for the Model subsystem interfaces.

-->

<project default="compile" name="ArgoUML model subsystem">
  <!-- =================================================================== -->
  <!-- Initialization target                                               -->
  <!-- =================================================================== -->
  <target name="init" depends="pde-init">

    <!-- ============================================================= -->
    <!-- when executed using target "dist-release", the properties     -->
    <!-- "local.build.properties" and "user.build.properties"          -->
    <!-- are set to "build.properties" so that there can be no         -->
    <!-- possibility of overriding the default.                        -->
    <!-- ============================================================= -->
    <property name="local.build.properties" value="build.properties"/>
    <property name="user.build.properties"
              value="${user.home}/argouml.build.properties"/>

    <property file="${local.build.properties}"/>
    <property file="${user.build.properties}"/>

    <property name="build.dir" location="build"/>
    <property name="build.classes" value="${build.dir}/classes"/>

    <property name="name" value="argouml-model"/>

    <property name="debug" value="yes"/>
    <property name="deprecation" value="yes"/>
    <property name="optimize" value="yes"/>

    <!-- Things for tests -->
    <property name="tests.classes" value="${build.dir}/tests/classes"/>
    <property name="tests.reports" value="${build.dir}/tests/reports"/>

    <!-- Define a couple places we can find Junit -->
    <!-- Try to figure out where our tools directory is. Done after overrides
    are loaded so user can override, but before defaults -->
    <property name="tool.test.file" value="checkstyle/java.header"/>
    <available file="${argo.root.dir}/argouml-core-tools/${tool.test.file}"
        type="file" property="argo.tools.dir" value="${argo.root.dir}/argouml-core-tools"/>
    <available file="../../tools/${tool.test.file}"
        type="file" property="argo.tools.dir" value="../../tools"/>

    <path id="junit.classpath">
      <pathelement location="${junit.jar.path}"/>
      <pathelement location="${argo.tools.dir}/junit-3.8.2/junit.jar"/>
    </path>

    <path id="tests.compile.classpath">
      <pathelement location="${build.classes}"/>
      <path refid="junit.classpath"/>
    </path>

    <path id="tests.run.classpath">
      <path refid="tests.compile.classpath"/>
      <!-- The tests relies on that mdr is build before. -->
      <fileset dir="../argouml-core-model-mdr/build/">
        <include name="*.jar"/>
      </fileset>
    </path>
  </target>

  <!-- =================================================================== -->
  <!-- Compiles the source directory                                       -->
  <!-- =================================================================== -->
  <target name="compile"
          depends="init"
          description="Compile the sources.">
    <mkdir dir="${build.dir}"/>
    <mkdir dir="${build.classes}"/>

    <javac debug="${debug}"
           deprecation="${deprecation}"
           destdir="${build.classes}"
           includes="org/argouml/**/*.java"
           optimize="${optimize}"
           includeAntRuntime="no"
           bootclasspath="${bundleBootClasspath}"
           srcdir="src"
           source="1.5"
           target="1.5">
       <compilerarg compiler="javac1.5" line="-Xlint:unchecked"/>
       <compilerarg line="-log '${build.dir}/compile.log'" compiler="org.eclipse.jdt.core.JDTCompilerAdapter" />
    </javac>
  </target>

  <!-- =================================================================== -->
  <!-- Creates the jar file                                                -->
  <!-- =================================================================== -->
  <target name="jar" depends="compile"
          description="Build the ${name}.jar file.">
    <jar basedir="${build.classes}"
         excludes="*.txt,*.bat,*.xml,*.sh"
	 includes="org/argouml/**"
	 jarfile="${build.dir}/${name}.jar"/>
  </target>

  <!-- =================================================================== -->
  <!-- Clean targets                                                       -->
  <!-- =================================================================== -->
  <target name="clean" depends="init"
          description="Clean out all built files.">
    <delete dir="${build.dir}" quiet="true"/>
    <antcall target="pde-clean" />
  </target>


  <!-- =================================================================== -->
  <!-- Compiles the tests directory                                        -->
  <!-- =================================================================== -->
  <target name="compile-tests"
          depends="init,compile">
    <!-- create directories -->
    <mkdir dir="${tests.classes}"/>

    <javac srcdir="tests"
           destdir="${tests.classes}"
           includes="org/argouml/**/*.java"
           debug="${debug}"
           deprecation="${deprecation}"
           optimize="${optimize}"
           source="1.5"
           target="1.5"
       >
       <compilerarg compiler="javac1.5" line="-Xlint:unchecked"/>
       <classpath>
         <path refid="tests.compile.classpath"/>
       </classpath>
    </javac>
    <copy todir="${tests.classes}">
      <fileset dir="tests">
        <include name="**/*.lcf"/>
      </fileset>
      <fileset dir="tests">
        <include name="testmodels/**/*.xmi"/>
        <include name="testmodels/**/*.xml.zip"/>
        <include name="testmodels/**/*.xml"/>
      </fileset>
    </copy>
  </target>

  <!-- =================================================================== -->
  <!-- Runs the tests                                                      -->
  <!-- =================================================================== -->
  <target name="tests-xml"
          depends="init,compile,compile-tests">
    <!-- create directories -->
    <mkdir dir="${tests.reports}/junit/output"/>

    <junit errorproperty="junit.failure" fork="yes" haltonfailure="false"
           maxmemory="256M" printsummary="true">
        <sysproperty key="log4j.configuration"
                   value="org/argouml/resource/info_console.lcf"/>
        <sysproperty key="argouml.model.implementation"
                   value="org.argouml.model.mdr.MDRModelImplementation"/>
      <classpath>
        <pathelement location="${tests.classes}"/>
        <path refid="tests.run.classpath"/>
      </classpath>
      <formatter type="xml"/>
      <batchtest todir="${tests.reports}/junit/output">
        <fileset dir="tests">
          <include name="org/argouml/**/Test*.java"/>
        </fileset>
      </batchtest>
    </junit>
  </target>

  <target name="tests"
          depends="tests-xml"
          description="Run the automated tests (and supposed to create reports).">
    <echo message="Reports are currently not created for argouml-core-model."/>
  </target>

  <target name="guitests">
    <echo message="No guitests available in argouml-core-model."/>
  </target>

  <target name="alltests" depends="tests"/>


  <!-- =================================================================== -->
  <!-- Eclipse PDE targets from here to end of file                        -->
  <!-- =================================================================== -->
  <!--
    Required targets (called in this order) are:
      build.jars
      gather.bin.parts - must create and populate "${destination.temp.folder}/<Bundle-SymbolicName>_<Bundle-Version>
      gather.logs
    If p2.gathering = true in build.properties:
      publish.bin.parts target replaces gather.bin.parts
  -->
  
    <target name="pde-properties" if="eclipse.running">
      <property name="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter" />
    </target>
  
    <target name="pde-init" depends="pde-properties">

      <property name="bundleId" value="org.argouml.core.model" />

      <!-- This property is magic and will have its value substituted by PDE -->
      <property name="version.suffix" value="0.29.3.201001020415"/>
      <property name="bundleVersion" value="${version.suffix}" />

      <!-- Compiler settings. -->
      <condition property="dir_bootclasspath" value="${java.home}/../Classes">
        <os family="mac" />
      </condition>
      <property name="dir_bootclasspath" value="${java.home}/lib" />
      <path id="path_bootclasspath">
        <fileset dir="${dir_bootclasspath}">
          <include name="*.jar" />
        </fileset>
      </path>
      <property name="bootclasspath" refid="path_bootclasspath" />
      <property name="bundleBootClasspath" value="${bootclasspath}" />

      <condition property="pluginTemp" value="${buildTempFolder}/plugins">
        <isset property="buildTempFolder" />
      </condition>
      <property name="pluginTemp" value="${basedir}" />
      <condition property="build.result.folder" value="${pluginTemp}/${bundleId}_${bundleVersion}">
        <isset property="buildTempFolder" />
      </condition>
      <property name="build.result.folder" value="${basedir}" />
      <property name="plugin.destination" value="${basedir}" />
      <condition property="p2.publish.parts" value="true">
        <istrue value="${p2.gathering}"/>
      </condition>
    </target>

  <target name="pde-clean" depends="pde-init">
    <delete file="${plugin.destination}/${bundleId}_*.jar" />
    <delete file="${plugin.destination}/${bundleId}_*.zip" />
  </target>

  <target name="build.jars" depends="jar" description="Compile classes and build nested jars for the plug-in: ${bundleId}.">
    <mkdir dir="${build.result.folder}/@dot"/>
    <copy todir="${build.result.folder}/@dot" failonerror="true" overwrite="false">
      <fileset dir="${build.classes}" includes="org/argouml/**" excludes="*.txt,*.bat,*.xml,*.sh" />
    </copy>
  </target>

  <target name="gather.bin.parts" depends="init" if="destination.temp.folder">
    <mkdir dir="${destination.temp.folder}/${bundleId}_${bundleVersion}" />
    <copy todir="${destination.temp.folder}/${bundleId}_${bundleVersion}" failonerror="true" overwrite="false">
      <fileset dir="${build.result.folder}/@dot" includes="**"/>
    </copy>
    
    <copy todir="${destination.temp.folder}/${bundleId}_${bundleVersion}" failonerror="true" overwrite="false">
      <fileset dir="${basedir}">
        <include name="META-INF/"/>
        <include name="plugin.xml"/>
        <include name="plugin.properties"/>
      </fileset>
    </copy>

    <eclipse.versionReplacer path="${destination.temp.folder}/${bundleId}_${bundleVersion}" version="${bundleVersion}" />
  </target>

  <target name="publish.bin.parts" depends="init" if="p2.publish.parts">

    <!-- First call old target to gather binaries -->
    <antcall target="gather.bin.parts">
      <param name="destination.temp.folder" value="${build.result.folder}"/>
    </antcall>

    <eclipse.versionReplacer path="${build.result.folder}" version="${bundleVersion}" />

    <!-- Now use P2 publishing tools to publish to our build repository -->
    <eclipse.gatherBundle
      metadataRepository="${p2.build.repo}"
      artifactRepository="${p2.build.repo}"
      buildResultFolder="${build.result.folder}"
      baseDirectory="${basedir}"
    />
  </target>

  <target name="gather.logs" depends="init" if="destination.temp.folder">
    <mkdir dir="${destination.temp.folder}/${bundleId}_${bundleVersion}"/>
    <copy todir="${destination.temp.folder}/${bundleId}_${bundleVersion}" failonerror="false" overwrite="false">
      <fileset dir="${build.dir}">
        <include name="compile.log"/>  
      </fileset>
    </copy>
  </target>

</project>
