# $Id$
# Copyright (c) 2004 The Regents of the University of California. All
# Rights Reserved. Permission to use, copy, modify, and distribute this
# software and its documentation without fee, and without a written
# agreement is hereby granted, provided that the above copyright notice
# and this paragraph appear in all copies.  This software program and
# documentation are copyrighted by The Regents of the University of
# California. The software program and documentation are supplied "AS
# IS", without any accompanying services from The Regents. The Regents
# does not warrant that the operation of the program will be
# uninterrupted or error-free. The end-user understands that the program
# was developed for research purposes and is advised not to rely
# exclusively on the program for any reason.  IN NO EVENT SHALL THE
# UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR DIRECT, INDIRECT,
# SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING LOST PROFITS,
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE. THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATIONS TO PROVIDE MAINTENANCE, SUPPORT,
# UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
# 
# Keys in the same order as in org.argouml.uml.cognitive.critics.Init
#

checklist.class.naming = \u0418\u043C\u0435\u043D\u043E\u0432\u0430\u043D\u0438\u0435
checklist.class.naming.describe-clearly = \
	\u0422\u043E\u0447\u043D\u043E \u043B\u0438 \u043E\u043F\u0438\u0441\u044B\u0432\u0430\u0435\u0442 \u043A\u043B\u0430\u0441\u0441 \u0438\u043C\u044F '<ocl>self</ocl>'?
checklist.class.naming.is-noun = \
	\u042F\u0432\u043B\u044F\u0435\u0442\u0441\u044F \u043B\u0438 '<ocl>self</ocl>' \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0438\u0442\u0435\u043B\u044C\u043D\u044B\u043C \u0438\u043B\u0438 \u0433\u0440\u0443\u043F\u043F\u043E\u0439 \u0441\u043B\u043E\u0432\u043E\u0441\u043E\u0447\u0435\u0442\u0430\u043D\u0438\u0435\u043C?
checklist.class.naming.misinterpret = \
	\u041C\u043E\u0436\u043D\u043E \u043B\u0438 \u0438\u043C\u044F '<ocl>self</ocl>' \u0431\u044B\u0442\u044C \u0438\u0441\u0442\u043E\u043B\u043A\u043E\u0432\u0430\u043D\u043E \u0432 \u0434\u0440\u0443\u0433\u043E\u043C \u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0438?

checklist.class.encoding = \u041A\u043E\u0434\u0438\u0440\u043E\u0432\u0430\u043D\u0438\u0435
checklist.class.encoding.convert-to-attribute = \
	\u0411\u0443\u0434\u0435\u0442 \u043B\u0438 <ocl>self</ocl> \u0441\u0430\u043C\u043E\u0441\u0442\u043E\u044F\u0442\u0435\u043B\u044C\u043D\u044B\u043C \u043A\u043B\u0430\u0441\u0441\u043E\u043C \u0438\u043B\u0438 \u043F\u0440\u043E\u0441\u0442\u044B\u043C \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u043E\u043C \u0434\u0440\u0443\u0433\u043E\u0433\u043E \u043A\u043B\u0430\u0441\u0441\u0430?
checklist.class.encoding.do-just-one-thing = \
	\u0414\u0435\u043B\u0430\u0435\u0442 \u043B\u0438 <ocl>self</ocl> \u0442\u043E\u043B\u044C\u043A\u043E \u043E\u0434\u043D\u043E \u0434\u0435\u043B\u043E \u0438 \u0434\u0435\u043B\u0430\u0435\u0442 \u043B\u0438 \u0435\u0433\u043E \u0445\u043E\u0440\u043E\u0448\u043E?
checklist.class.encoding.break-into-parts = \
	\u041C\u043E\u0436\u043D\u043E \u043B\u0438 \u0440\u0430\u0437\u0431\u0438\u0442\u044C <ocl>self</ocl> \u043D\u0430 \u0434\u0432\u0430 \u0438\u043B\u0438 \u0431\u043E\u043B\u0435\u0435 \u043A\u043B\u0430\u0441\u0441\u0430?

checklist.class.value = \u0417\u043D\u0430\u0447\u0435\u043D\u0438\u0435
checklist.class.value.start-with-meaningful-values = \
	\u041D\u0430\u0447\u0438\u043D\u0430\u044E\u0442\u0441\u044F \u043B\u0438 \u0432\u0441\u0435 \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u044B <ocl>self</ocl> \u0441 \u0447\u0435\u0433\u043E-\u043D\u0438\u0431\u0443\u0434\u044C \u0437\u043D\u0430\u0447\u0438\u043C\u043E\u0433\u043E?
checklist.class.value.convert-to-invariant = \
	\u041C\u043E\u0433\u043B\u0438 \u0431\u044B \u0412\u044B \u043D\u0430\u043F\u0438\u0441\u0430\u0442\u044C \u0438\u043D\u0432\u0430\u0440\u0438\u0430\u043D\u0442 \u0434\u043B\u044F \u044D\u0442\u043E\u0433\u043E \u043A\u043B\u0430\u0441\u0441\u0430?
checklist.class.value.establish-invariant-in-constructors = \
	\u0423\u0441\u0442\u0430\u043D\u0430\u0432\u043B\u0438\u0432\u0430\u044E\u0442 \u043B\u0438 \u0432\u0441\u0435 \u043A\u043E\u043D\u0441\u0442\u0440\u0443\u043A\u0442\u043E\u0440\u044B \u0438\u043D\u0432\u0430\u0440\u0438\u0430\u043D\u0442 \u043A\u043B\u0430\u0441\u0441\u0430?
checklist.class.value.maintain-invariant = \
	\u041F\u043E\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u044E\u0442 \u043B\u0438 \u0432\u0441\u0435 \u043E\u043F\u0435\u0440\u0430\u0446\u0438\u0438 \u0438\u043D\u0432\u0430\u0440\u0438\u0430\u043D\u0442 \u043A\u043B\u0430\u0441\u0441\u0430?

checklist.class.location = \u041F\u043E\u043B\u043E\u0436\u0435\u043D\u0438\u0435
checklist.class.location.move-somewhere = \
	Could <ocl>self</ocl> be defined in a different location \
	in the class hierarchy?
checklist.class.location.planned-subclasses = \
 	Have you planned to have subclasses of <ocl>self</ocl>?
checklist.class.location.eliminate-from-model = \
	Could <ocl>self</ocl> be eliminated from the model?
checklist.class.location.eliminates-or-affects-something-else = \
	Is there another class in the model that should be revised \
	or eliminated because it serves the same purpose as <ocl>self</ocl>?

checklist.class.updates = \u041E\u0431\u043D\u043E\u0432\u043B\u0435\u043D\u0438\u044F
checklist.class.updates.reasons-for-update = \
	For what reasons will an instance of <ocl>self</ocl> be updated?
checklist.class.updates.affects-something-else = \
	Is there some other object that must be updated whenever \
	<ocl>self</ocl> is updated?


checklist.attribute.naming = \u0418\u043C\u0435\u043D\u043E\u0432\u0430\u043D\u0438\u0435
checklist.attribute.naming.describe-clearly = \
	Does the name '<ocl>self</ocl>' clearly describe the attribute?
checklist.attribute.naming.is-noun = \
	Is '<ocl>self</ocl>' a noun or noun phrase?
checklist.attribute.naming.misinterpret = \
	Could the name '<ocl>self</ocl>' be misinterpreted to mean \
	something else?

checklist.attribute.encoding = \u041A\u043E\u0434\u0438\u0440\u043E\u0432\u0430\u043D\u0438\u0435
checklist.attribute.encoding.is-too-restrictive = \
	Is the type <ocl>self.type</ocl> too restrictive to represent \
	all possible values of <ocl>self</ocl>?
checklist.attribute.encoding.allow-impossible-values = \
	Does the type <ocl>self.type</ocl> allow values for <ocl>self</ocl> \
	that could never be correct?
checklist.attribute.encoding.combine-with-other = \
	Could <ocl>self</ocl> be combined with some other \
	attribute of <ocl>self.owner</ocl> (e.g., {owner.structuralFeature})?
checklist.attribute.encoding.break-into-parts = \
	Could <ocl>self</ocl> be broken down into two or more parts \
	(e.g., a phonenumber can be broken down into \
	area code, prefix, and number)?
checklist.attribute.encoding.is-computable = \
	Could <ocl>self</ocl> be computed from other attributes \
	instead of stored?

checklist.attribute.value = \u0417\u043D\u0430\u0447\u0435\u043D\u0438\u0435
checklist.attribute.value.default-value = \
	Should <ocl>self</ocl> have an initial (or default) value?
checklist.attribute.value.correct-default-value = \
	Is the initial value <ocl>self.initialValue</ocl> correct?
checklist.attribute.value.is-correctness-checkable = \
	Could you write an expression to check if <ocl>self</ocl> is correct? \
	Plausible?

checklist.attribute.location = \u041F\u043E\u043B\u043E\u0436\u0435\u043D\u0438\u0435
checklist.attribute.location.move-somewhere = \
	Could <ocl>self</ocl> be defined in a different class \
	that is associated with <ocl>self.owner</ocl>?
checklist.attribute.location.move-up-hierarchy = \
	Could <ocl>self</ocl> be moved up the inheritance hierarchy \
	to apply to <ocl>owner.name</ocl> and to other classes?
checklist.attribute.location.include-all = \
	Does <ocl>self</ocl> apply to all instances of \
	class <ocl>self.owner</ocl> including instances of subclasses?
checklist.attribute.location.could-be-eliminated = \
	Could <ocl>self</ocl> be eliminated from the model?
checklist.attribute.location.eliminates-or-affects-something-else = \
	Is there another attribute in the model that should be revised or \
	eliminated because it serves the same purpose as <ocl>self</ocl>?

checklist.attribute.updates = \u041E\u0431\u043D\u043E\u0432\u043B\u0435\u043D\u0438\u044F
checklist.attribute.updates.reasons-for-update = \
	For what reasons will <ocl>self</ocl> be updated?
checklist.attribute.updates.affects-something-else = \
	Is there some other attribute that must be updated whenever \
	<ocl>self</ocl> is updated?
checklist.attribute.updates.exists-method-for-update = \
	Is there a method that should be called when \
	<ocl>self</ocl> is updated?
checklist.attribute.updates.exists-method-for-specific-value = \
	Is there a method that should be called when \
	<ocl>self</ocl> is given a certain kind of value?


checklist.operation.naming = Naming
checklist.operation.naming.describe-clearly = \
	Does the name '<ocl>self</ocl>' clearly describe the operation?
checklist.operation.naming.is-verb = \
	Is '<ocl>self</ocl>' a verb or verb phrase?
checklist.operation.naming.misinterpret = \
	Could the name '<ocl>self</ocl>' be misinterpreted \
	to mean something else?
checklist.operation.naming.do-just-one-thing = \
	Does <ocl>self</ocl> do one thing and do it well?

checklist.operation.encoding = Encoding
checklist.operation.encoding.is-returntype-too-restrictive = \
	Is the return type '<ocl>self.returnType</ocl>' too restrictive \
	to represent all possible values returned by <ocl>self</ocl>?
checklist.operation.encoding.does-returntype-allow-impossible-values = \
	Does '<ocl>self.returnType</ocl>' allow return values \
	that could never be correct?
checklist.operation.encoding.combine-with-other = \
	Could <ocl>self</ocl> be combined with \
	some other operation of <ocl>self.owner</ocl> \
	(e.g., <ocl sep=', '>self.owner.behavioralFeature</ocl>)?
checklist.operation.encoding.break-into-parts = \
	Could <ocl>self</ocl> be broken down into two or more parts \
	(e.g., pre-process, main processing, and post-processing)?
checklist.operation.encoding.break-into-series = \
	Could <ocl>self</ocl> be replaced by a series of client calls \
	to simpler operations?
checklist.operation.encoding.reduce-number-of-calls = \
	Could <ocl>self</ocl> be combined with other operations \
	to reduce the number of calls clients must make?

checklist.operation.value = Value
checklist.operation.value.handle-all-inputs = \
	Can <ocl>self</ocl> handle all possible inputs?
checklist.operation.value.are-special-cases = \
	Are there special case inputs that must be handled separately?
checklist.operation.value.is-correctness-checkable = \
	Could you write an expression to check if the arguments \
	to <ocl>self</ocl> are correct? Plausible?
checklist.operation.value.express-preconditions-possible = \
	Can you express the preconditions of <ocl>self</ocl>?
checklist.operation.value.express-postconditions-possible = \
	Can you express the postconditions of <ocl>self</ocl>?
checklist.operation.value.how-behave-preconditions-violated = \
	How will <ocl>self</ocl> behave if preconditions are violated?
checklist.operation.value.how-behave-postconditions-not-achieved = \
	How will <ocl>self</ocl> behave if postconditions cannot be achieved?

checklist.operation.location = Location
checklist.operation.location.move-somewhere = \
	Could <ocl>self</ocl> be defined in a different class \
	that is associated with <ocl>self.owner</ocl>?
checklist.operation.location.move-up-hierarchy = \
	Could <ocl>self</ocl> be moved up the inheritance hierarchy \
	to apply to <ocl>self.owner</ocl> and to other classes?
checklist.operation.location.include-all = \
	Does <ocl>self</ocl> apply to \
	all instances of class <ocl>self.owner</ocl> \
	including instances of subclasses?
checklist.operation.location.could-be-eliminated = \
	Could <ocl>self</ocl> be eliminated from the model?
checklist.operation.location.eliminates-or-affects-something-else = \
	Is there another operation in the model that should be revised \
	or eliminated because it serves the same purpose as <ocl>self</ocl>?


checklist.association.naming = Naming
checklist.association.naming.describe-clearly = \
	Does the name '<ocl>self</ocl>' clearly describe the class?
checklist.association.naming.is-noun = \
	Is '<ocl>self</ocl>' a noun or noun phrase?
checklist.association.naming.misinterpret = \
	Could the name '<ocl>self</ocl>' be misinterpreted to mean \
	something else?

checklist.association.encoding = Encoding
checklist.association.encoding.convert-to-attribute = \
	Should <ocl>self</ocl> be its own class or \
	a simple attribute of another class?
checklist.association.encoding.do-just-one-thing = \
	Does <ocl>self</ocl> do exactly one thing and do it well?
checklist.association.encoding.break-into-parts = \
	Could <ocl>self</ocl> be broken down into two or more classes?

checklist.association.value = Value
checklist.association.value.start-with-meaningful-values = \
	Do all attributes of <ocl>self</ocl> start with meaningful values?
checklist.association.value.convert-to-invariant = \
	Could you write an invariant for this class?
checklist.association.value.establish-invariant-in-constructors = \
	Do all constructors establish the class invariant?
checklist.association.value.maintain-invariant = \
	Do all operations maintain the class invariant?

checklist.association.location = Location
checklist.association.location.move-somewhere = \
	Could <ocl>self</ocl> be defined in a different location \
	in the class hierarchy?
checklist.association.location.planned-subclasses = \
	Have you planned to have subclasses of <ocl>self</ocl>?
checklist.association.location.eliminate-from-model = \
	Could <ocl>self</ocl> be eliminated from the model?
checklist.association.location.eliminates-or-affects-something-else = \
	Is there another class in the model that should be revised \
	or eliminated because it serves the same purpose as <ocl>self</ocl>?

checklist.association.updates = Updates
checklist.association.updates.reasons-for-update = \
	For what reasons will an instance of <ocl>self</ocl> be updated?
checklist.association.updates.affects-something-else = \
	Is there some other object that must be updated \
	whenever <ocl>self</ocl> is updated?


checklist.interface.naming = Naming
checklist.interface.naming.describe-clearly = \
	Does the name '<ocl>self</ocl>' clearly describe the class?
checklist.interface.naming.is-noun = \
	Is '<ocl>self</ocl>' a noun or noun phrase?
checklist.interface.naming.misinterpret = \
	Could the name '<ocl>self</ocl>' be misinterpreted to mean \
	something else?

checklist.interface.encoding = Encoding
checklist.interface.encoding.convert-to-attribute = \
	Should <ocl>self</ocl> be its own class \
	or a simple attribute of another class?
checklist.interface.encoding.do-just-one-thing = \
	Does <ocl>self</ocl> do exactly one thing and do it well?
checklist.interface.encoding.break-into-parts = \
	Could <ocl>self</ocl> be broken down into two or more classes?

checklist.interface.value = Value
checklist.interface.value.start-with-meaningful-values = \
	Do all attributes of <ocl>self</ocl> start with meaningful values?
checklist.interface.value.convert-to-invariant = \
	Could you write an invariant for this class?
checklist.interface.value.establish-invariant-in-constructors = \
	Do all constructors establish the class invariant?
checklist.interface.value.maintain-invariant = \
	Do all operations maintain the class invariant?

checklist.interface.location = Location
checklist.interface.location.move-somewhere = \
	Could <ocl>self</ocl> be defined in a different location \
	in the class hierarchy?
checklist.interface.location.planned-subclasses = \
	Have you planned to have subclasses of <ocl>self</ocl>?
checklist.interface.location.eliminate-from-model = \
	Could <ocl>self</ocl> be eliminated from the model?
checklist.interface.location.eliminates-or-affects-something-else = \
	Is there another class in the model that should be revised \
	or eliminated because it serves the same purpose as <ocl>self</ocl>?

checklist.interface.updates = Updates
checklist.interface.updates.reasons-for-update = \
	For what reasons will an instance of <ocl>self</ocl> be updated?
checklist.interface.updates.affects-something-else = \
	Is there some other object \
	that must be updated whenever <ocl>self</ocl> is updated?



checklist.instance.general = General
checklist.instance.general.describe-clearly = \
	Does this instance <ocl>self</ocl> clearly describe the instance?

checklist.instance.naming = Naming
checklist.instance.naming.describe-clearly = \
	Does the name '<ocl>self</ocl>' clearly describe the instance?
checklist.instance.naming.denotes-state = \
	Does '<ocl>self</ocl>' denote a state rather than an activity?
checklist.instance.naming.misinterpret = \
	Could the name '<ocl>self</ocl>' be misinterpreted \
	to mean something else?

checklist.instance.structure = Structure
checklist.instance.structure.merged-with-other = \
	Should <ocl>self</ocl> be its own state or \
	could it be merged with another state?
checklist.instance.structure.do-just-one-thing = \
	Does <ocl>self</ocl> do exactly one thing and do it well?
checklist.instance.structure.break-into-parts = \
	Could <ocl>self</ocl> be broken down into two or more states?
checklist.instance.structure.can-write-characteristic-equation = \
	Could you write a characteristic equation for <ocl>self</ocl>?
checklist.instance.structure.belong = \
	Does <ocl>self</ocl> belong in this state machine or another?
checklist.instance.structure.make-internal = \
	Should <ocl>self</ocl> be an initial state?
checklist.instance.structure.is-state-in-another-machine-exclusive = \
	Is some state in another machine exclusive with <ocl>self</ocl>?

checklist.instance.actions = Actions
checklist.instance.actions.list-entry-actions = \
	What action should be performed on entry into <ocl>self</ocl>?
checklist.instance.actions.update-attribute-on-entry = \
	Should some attribute be updated on entry into <ocl>self</ocl>?
checklist.instance.actions.list-exit-action = \
	What action should be performed on exit from <ocl>self</ocl>?
checklist.instance.actions.update-attribute-on-exit = \
	Should some attribute be updated on exit from <ocl>self</ocl>?
checklist.instance.actions.list-do-action = \
	What action should be performed while in <ocl>self</ocl>?
checklist.instance.actions.maintained-state = \
	Do state-actions maintain <ocl>self</ocl> as the current state?

checklist.instance.transitions = Transitions
checklist.instance.transitions.need-another-transition-into = \
	Should there be another transition into <ocl>self</ocl>?
checklist.instance.transitions.use-all-transitions-into = \
	Can all the transitions into <ocl>self</ocl> be used?
checklist.instance.transitions.combine-with-other-incoming = \
	Could some incoming transitions be combined?
checklist.instance.transitions.need-another-transition-out-of = \
	Should there be another transition out of <ocl>self</ocl>?
checklist.instance.transitions.use-all-transitions-out-of = \
	Can all the transitions out of <ocl>self</ocl> be used?
checklist.instance.transitions.are-transitions-out-of-exclusive = \
	Is each outgoing transition exclusive?
checklist.instance.transitions.combine-with-other-outgoing = \
	Could some outgoing transitions be combined?



checklist.link.naming = Naming
checklist.link.naming.describe-clearly = \
	Does the name '<ocl>self</ocl>' clearly describe the class?
checklist.link.naming.is-noun = \
	Is '<ocl>self</ocl>' a noun or noun phrase?
checklist.link.naming.misinterpret = \
	Could the name '<ocl>self</ocl>' be misinterpreted \
	to mean something else?

checklist.link.encoding = Encoding
checklist.link.encoding.convert-to-attribute = \
	Should <ocl>self</ocl> be its own class or \
	a simple attribute of another class?
checklist.link.encoding.do-just-one-thing = \
	Does <ocl>self</ocl> do exactly one thing and do it well?
checklist.link.encoding.break-into-parts = \
	Could <ocl>self</ocl> be broken down into two or more classes?

checklist.link.value = Value
checklist.link.value.start-with-meaningful-values = \
	Do all attributes of <ocl>self</ocl> start with meaningful values?
checklist.link.value.convert-to-invariant = \
	Could you write an invariant for this class?
checklist.link.value.establish-invariant-in-constructors = \
	Do all constructors establish the class invariant?
checklist.link.value.maintain-invariant = \
	Do all operations maintain the class invariant?

checklist.link.location = Location
checklist.link.location.move-somewhere = \
	Could <ocl>self</ocl> be defined in a different location \
	in the class hierarchy?
checklist.link.location.planned-subclasses = \
	Have you planned to have subclasses of <ocl>self</ocl>?
checklist.link.location.eliminate-from-model = \
	Could <ocl>self</ocl> be eliminated from the model?
checklist.link.location.eliminates-or-affects-something-else = \
	Is there another class in the model that should be revised or \
	eliminated because it serves the same purpose as <ocl>self</ocl>?

checklist.link.updates = Updates
checklist.link.updates.reasons-for-update = \
	For what reasons will an instance of <ocl>self</ocl> be updated?
checklist.link.updates.affects-something-else = \
	Is there some other object \
	that must be updated whenever <ocl>self</ocl> is updated?


checklist.state.naming = Naming
checklist.state.naming.describe-clearly = \
	Does the name '<ocl>self</ocl>' clearly describe the state?
checklist.state.naming.denotes-state = \
	Does '<ocl>self</ocl>' denote a state rather than an activity?
checklist.state.naming.misinterpret = \
	Could the name '<ocl>self</ocl>' be misinterpreted \
	to mean something else?

checklist.state.structure = Structure
checklist.state.structure.merged-with-other = \
	Should <ocl>self</ocl> be its own state or \
	could it be merged with another state?
checklist.state.structure.do-just-one-thing = \
	Does <ocl>self</ocl> do exactly one thing and do it well?
checklist.state.structure.break-into-parts = \
	Could <ocl>self</ocl> be broken down into two or more states?
checklist.state.structure.can-write-characteristic-equation = \
	Could you write a characteristic equation for <ocl>self</ocl>?
checklist.state.structure.belong = \
	Does <ocl>self</ocl> belong in this state machine or another?
checklist.state.structure.make-internal = \
	Should <ocl>self</ocl> be be an initial state?
checklist.state.structure.is-state-in-another-machine-exclusive = \
	Is some state in another machine exclusive with <ocl>self</ocl>?

checklist.state.actions = Actions
checklist.state.actions.list-entry-actions = \
	What action should be performed on entry into <ocl>self</ocl>?
checklist.state.actions.update-attribute-on-entry = \
	Should some attribute be updated on entry into <ocl>self</ocl>?
checklist.state.actions.list-exit-action = \
	What action should be performed on exit from <ocl>self</ocl>?
checklist.state.actions.update-attribute-on-exit = \
	Should some attribute be updated on exit from <ocl>self</ocl>?
checklist.state.actions.list-do-action = \
	What action should be performed while in <ocl>self</ocl>?
checklist.state.actions.maintained-state = \
	Do state-actions maintain <ocl>self</ocl> as the current state?

checklist.state.transitions = Transitions
checklist.state.transitions.need-another-transition-into = \
	Should there be another transition into <ocl>self</ocl>?
checklist.state.transitions.use-all-transitions-into = \
	Can all the transitions into <ocl>self</ocl> be used?
checklist.state.transitions.combine-with-other-incoming = \
	Could some incoming transitions be combined?
checklist.state.transitions.need-another-transition-out-of = \
	Should there be another transition out of <ocl>self</ocl>?
checklist.state.transitions.use-all-transitions-out-of = \
	Can all the transitions out of <ocl>self</ocl> be used?
checklist.state.transitions.are-transitions-out-of-exclusive = \
	Is each outgoing transition exclusive?
checklist.state.transitions.combine-with-other-outgoing = \
	Could some outgoing transitions be combined?


checklist.transition.structure = Structure
checklist.transition.structure.start-somewhere-else = \
	Should this transition start at a different source?
checklist.transition.structure.end-somewhere-else = \
	Should this transition end at a different destination?
checklist.transition.structure.need-another-like-this = \
	Should there be another transition \"like\" this one?
checklist.transition.structure.unneeded-because-of-this = \
	Is another transition unneeded because of this one?

checklist.transition.trigger = Trigger
checklist.transition.trigger.needed = \
	Does this transition need a trigger?
checklist.transition.trigger.happen-too-often = \
	Does the trigger happen too often?
checklist.transition.trigger.happen-too-rarely = \
	Does the trigger happen too rarely?

checklist.transition.guard = Guard
checklist.transition.guard.taken-too-often = \
	Could this transition be taken too often?
checklist.transition.guard.is-too-restrictive = \
	Is this transition's condition too restrictive?
checklist.transition.guard.break-into-parts = \
	Could it be broken down into two or more transitions?

checklist.transition.actions = Actions
checklist.transition.actions.should-have = \
	Should this transition have an action?
checklist.transition.actions.should-have-exit = \
	Should this transition's action be an exit action?
checklist.transition.actions.should-have-entry = \
	Should this transition's action be an entry action?
checklist.transition.actions.is-precondition-met = \
	Is the precondition of the action always met?
checklist.transition.actions.is-postcondition-consistant-with-destination = \
	Is the action's postcondition consistent with the destination?


checklist.usecase.naming = Naming
checklist.usecase.naming.describe-clearly = \
	Does the name '<ocl>self</ocl>' clearly describe the class?
checklist.usecase.naming.is-noun = \
	Is '<ocl>self</ocl>' a noun or noun phrase?
checklist.usecase.naming.misinterpret = \
	Could the name '<ocl>self</ocl>' be misinterpreted \
	to mean something else?

checklist.usecase.encoding = Encoding
checklist.usecase.encoding.convert-to-attribute = \
	Should <ocl>self</ocl> be its own class or \
	a simple attribute of another class?
checklist.usecase.encoding.do-just-one-thing = \
	Does <ocl>self</ocl> do exactly one thing and do it well?
checklist.usecase.encoding.break-into-parts = \
	Could <ocl>self</ocl> be broken down into two or more classes?

checklist.usecase.value = Value
checklist.usecase.value.start-with-meaningful-values = \
	Do all attributes of <ocl>self</ocl> start with meaningful values?
checklist.usecase.value.convert-to-invariant = \
	Could you write an invariant for this class?
checklist.usecase.value.establish-invariant-in-constructors = \
	Do all constructors establish the class invariant?
checklist.usecase.value.maintain-invariant = \
	Do all operations maintain the class invariant?

checklist.usecase.location = Location
checklist.usecase.location.move-somewhere = \
	Could <ocl>self</ocl> be defined \
	in a different location in the class hierarchy?
checklist.usecase.location.planned-subclasses = \
	Have you planned to have subclasses of <ocl>self</ocl>?
checklist.usecase.location.eliminate-from-model = \
	Could <ocl>self</ocl> be eliminated from the model?
checklist.usecase.location.eliminates-or-affects-something-else = \
	Is there another class in the model that should be revised or \
	eliminated because it serves the same purpose as <ocl>self</ocl>?

checklist.usecase.updates = Updates
checklist.usecase.updates.reasons-for-update = \
	For what reasons will an instance of <ocl>self</ocl> be updated?
checklist.usecase.updates.affects-something-else = \
	Is there some other object that must be \
	updated whenever <ocl>self</ocl> is updated?


checklist.actor.naming = Naming
checklist.actor.naming.describe-clearly = \
	Does the name '<ocl>self</ocl>' clearly describe the class?
checklist.actor.naming.is-noun = \
	Is '<ocl>self</ocl>' a noun or noun phrase?
checklist.actor.naming.misinterpret = \
	Could the name '<ocl>self</ocl>' be misinterpreted \
	to mean something else?

checklist.actor.encoding = Encoding
checklist.actor.encoding.convert-to-attribute = \
	Should <ocl>self</ocl> be its own class or \
	a simple attribute of another class?
checklist.actor.encoding.do-just-one-thing = \
	Does <ocl>self</ocl> do exactly one thing and do it well?
checklist.actor.encoding.break-into-parts = \
	Could <ocl>self</ocl> be broken down into two or more classes?

checklist.actor.value = Value
checklist.actor.value.start-with-meaningful-values = \
	Do all attributes of <ocl>self</ocl> start with meaningful values?
checklist.actor.value.convert-to-invariant = \
	Could you write an invariant for this class?
checklist.actor.value.establish-invariant-in-constructors = \
	Do all constructors establish the class invariant?
checklist.actor.value.maintain-invariant = \
	Do all operations maintain the class invariant?

checklist.actor.location = Location
checklist.actor.location.move-somewhere = \
	Could <ocl>self</ocl> be defined in a different location \
	in the class hierarchy?
checklist.actor.location.planned-subclasses = \
	Have you planned to have subclasses of <ocl>self</ocl>?
checklist.actor.location.eliminate-from-model = \
	Could <ocl>self</ocl> be eliminated from the model?
checklist.actor.location.eliminates-or-affects-something-else = \
	Is there another class in the model that should be revised or \
	eliminated because it serves the same purpose as <ocl>self</ocl>?

checklist.actor.updates = Updates
checklist.actor.updates.reasons-for-update = \
	For what reasons will an instance of <ocl>self</ocl> be updated?
checklist.actor.updates.affects-something-else = \
	Is there some other object that must \
	be updated whenever <ocl>self</ocl> is updated?
