<?xml version="1.0" encoding="UTF-8"?>
<!-- $Id$
This requires Apache Ant 1.6.2 and has been tested through Ant 1.7.

Introduction
============
ArgoUML is a free UML tool. It is written entirely in Java.
The homepage of ArgoUML is http://argouml.tigris.org

Building instructions
=====================
First, make sure your current working directory is where this very
file is located. Then just type
	build -p
if on a MS Windows system, or
	./build.sh -p
if on a *nix system, to get a list of available build targets
and the name of the default target which will be used if none
is specified (currently 'compile').

Executing build.bat/build.sh will use the version of Ant from
the ArgoUML CVS repository.  You can use 
        build -version
to find out what the current version is.

If your directories are organized as set up by the Eclipse project set
file, use the file build2.sh/build2.bat to build from the command line.
This uses an alternate properties file, eclipse-ant-build.properties,
which accommodates the different directory layout.

Property Settings
=================
The default property settings are in "default.properties".  To override
them, create a file called "build.properties" here or 
"argouml.build.properties" in your home directory.  Order of precedence
is the reverse of the order they are mentioned in above.

For example, to override the model subystem implementation used for
tests, put the following line your file:

test.model.implementation=org.argouml.model.euml.EUMLModelImplementation

Refer to the Ant documentation and this file for other settings.

Roles of the different build.xml files
======================================
There is a build.xml for each subsystem i.e. in each subdirectory. 
They each have the following targets:
    jar - to build everything and move all created and exported jars 
            to subdir/build
    clean - to remove subdir/build
    tests (optional) - to run all tests
    compile, compile-tests (optional) (local to build.xml and used by
            tests, and jar)
The jar and tests target rely on the contents of subdir/build for other 
subdirectories i.e. they depend on jars exported from other subsystems.
Circular dependencies is not allowed. This build.xml contains an ordered
list defining in what order they are built (using the jar target). This
order must be working with the dependencies set up in every
subdir/build.xml.

Paths are resolved by specifying every jar in subdir/build to avoid
maintaining name changes of jars throughout the build.xml-files.

This files is not used by the Eclipse setup. When building in Eclipse,
the project dependencies are used and Eclipse will take care of the
order. The subdir/build.xml files are used by the Eclipse setup.

  -->

<project basedir="." default="compile" name="argouml">

  <!-- =================================================================== -->
  <!-- Global initialization                                               -->
  <!-- =================================================================== -->


  <!-- =================================================================== -->
  <!-- Convenience target for locating property files.                     -->
  <!-- =================================================================== -->

  <!-- TODO: This target is not yet tested with the new structure. -->
  <target name="list-property-files" depends="init"
         description="List the property files read by the build.">

    <!-- ====================================================== -->
    <!-- System property path.separator is a simple way to tell -->
    <!-- what operating system we are running on                -->
    <!-- ====================================================== -->
    <pathconvert pathsep="${path.separator}" property="lbp.path">
      <path>
        <pathelement location="${local.build.properties}"/>
      </path>
    </pathconvert>

    <pathconvert pathsep="${path.separator}" property="ubp.path">
      <path>
        <pathelement location="${user.build.properties}"/>
      </path>
    </pathconvert>

    <pathconvert pathsep="${path.separator}" property="dp.path">
      <path>
        <pathelement location="default.properties"/>
      </path>
    </pathconvert>

    <!-- ====================================================== -->
    <!-- Ant does not replace property values once they are     -->
    <!-- set.  So only those which do not exist will get the    -->
    <!-- property values set to "not present".                  -->
    <!-- ====================================================== -->
    <available file="${lbp.path}" property="lbp.exists" value="present"/>
    <available file="${ubp.path}" property="ubp.exists" value="present"/>
    <available file="${dp.path}" property="dp.exists" value="present"/>

    <property name="lbp.exists" value="not present"/>
    <property name="ubp.exists" value="not present"/>
    <property name="dp.exists" value="not present"/>

    <echo>

Property files to be searched:

1.  ${lbp.path}
            File is ${lbp.exists}.

2.  ${ubp.path}
            File is ${ubp.exists}.

3.  ${dp.path}
            File is ${dp.exists}.

    </echo>

  </target>

  <!-- =================================================================== -->
  <!-- Initialization target                                               -->
  <!-- =================================================================== -->

  <target name="init">

    <tstamp>
      <format pattern="yyyy" property="year"/>
    </tstamp>

    <property name="local.build.properties" value="build.properties"/>
    <property name="user.build.properties" 
              value="${user.home}/argouml.build.properties"/>
    <property file="${local.build.properties}"/>
    <property file="${user.build.properties}"/>

    <!-- we really need an absolute path for argo.root.dir -->
    <!-- if it is set in a property file before now, it must be absolute -->
    <property name="argo.root.dir" value="${basedir}/.." />
    <property file="${override.build.properties}"/>
    <property file="default.properties"/>

    <property name="tests.reports" value="${argo.build.dir}/tests"/>

    <path id="java.tools.classpath">
      <pathelement path="${JAVA_HOME}/lib/tools.jar"/>
    </path>

    <path id="antlr.runtime.classpath">
      <pathelement location="${antlrall.jar.path}"/>
    </path>

    <path id="argo.compile.classpath">
      <pathelement location="${ocl-argo.jar.path}"/>
      <pathelement location="${gef.jar.path}"/>
      <pathelement location="${log4j.jar.path}"/>
      <pathelement location="${swidgets.jar.path}"/>
      <pathelement location="${toolbar.jar.path}"/>
      <pathelement location="${commons-logging.jar.path}"/>
      <path refid="antlr.runtime.classpath"/>
      <pathelement location="${argo.build.dir}/argouml-model.jar"/>
    </path>

    <path id="argo.mdr.runtime.classpath">
      <pathelement location="${argo.mdr.dir}/build/java-interfaces.jar"/>
      <pathelement location="${argo.mdr.dir}/build/argouml-mdr.jar"/>
      <pathelement location="${argo.mdr.dir}/lib/mof.jar"/>
      <pathelement location="${argo.mdr.dir}/lib/jmi.jar"/>
      <pathelement location="${argo.mdr.dir}/lib/mdrapi.jar"/>
      <pathelement location="${argo.mdr.dir}/lib/nbmdr.jar"/>
      <pathelement location="${argo.mdr.dir}/lib/jmiutils.jar"/>
      <pathelement location="${argo.mdr.dir}/lib/openide-util.jar"/>
    </path>

    <path id="argo.euml.runtime.classpath">
      <pathelement location="${argo.euml.dir}/build/argouml-euml.jar"/>
      <pathelement location="${argo.euml.dir}/lib/org.eclipse.emf.common_2.3.0.v200703080200.jar"/>
      <pathelement location="${argo.euml.dir}/lib/org.eclipse.emf.ecore.change_2.3.0.v200706262000.jar"/>
      <pathelement location="${argo.euml.dir}/lib/org.eclipse.emf.ecore.xmi_2.3.0.v200703080200.jar"/>
      <pathelement location="${argo.euml.dir}/lib/org.eclipse.emf.ecore_2.3.0.v200703080200.jar"/>
      <pathelement location="${argo.euml.dir}/lib/org.eclipse.emf.edit_2.3.0.v200706262000.jar"/>
      <pathelement location="${argo.euml.dir}/lib/org.eclipse.emf.mapping.ecore2xml_2.3.0.v200706262000.jar"/>
      <pathelement location="${argo.euml.dir}/lib/org.eclipse.uml2.common_1.3.0.v200703011358.jar"/>
      <pathelement location="${argo.euml.dir}/lib/org.eclipse.uml2.common.edit_1.3.0.v200706251652.jar"/>
      <pathelement location="${argo.euml.dir}/lib/org.eclipse.uml2.uml.resources_2.1.0.v200706251652.jar"/>
      <pathelement location="${argo.euml.dir}/lib/org.eclipse.uml2.uml_2.1.0.v200703011358.jar"/>
    </path>

    <!-- This runtime classpath is used for tests and other things started
         from this file.
      -->
    <path id="argo.runtime.classpath">
      <path refid="argo.compile.classpath"/>
      <!-- only one of the following will be used at a time -->
      <!-- we put them together because there's little risk of crosstalk -->
      <path refid="argo.mdr.runtime.classpath"/>
      <path refid="argo.euml.runtime.classpath"/>
    </path>

    <!-- In order to use ant optional tasks which use jars that are not -->
    <!-- copied into ANT_HOME/lib, we must declare the tasks ourselves. -->

    <property name="Name" value="ArgoUML"/>
    <property name="name" value="argouml"/>

    <property name="argo.build.version" value="${argo.core.version}"/>

    <property name="version.package" value="org/argouml/application"/>

    <!-- developer.lib.dir is the developer snapshot directory.           -->
    <!-- If it is not set, it defaults to build.dir, and "build install"  -->
    <!-- will not do anything.                                            -->
    <property name="developer.lib.dir" value="${argo.build.dir}"/>

    <!-- developer.bin.dir is the developer snapshot directory.           -->
    <!-- If it is not set, it defaults to argo.bin.dir, and               -->
    <!-- "build install"  will not do anything.                           -->
    <property name="developer.bin.dir" value="${argo.bin.dir}"/>

    <!-- Set of properties with fixed paths that we pass to subtasks -->
    <propertyset id="absolute-properties" dynamic="false">
      <propertyref name="argo.root.dir" />
      <propertyref name="argo.lib.dir" />
      <propertyref name="argo.tools.dir" />
      <propertyref name="argo.model.dir" />
      <propertyref name="argo.mdr.dir" />
      <propertyref name="argo.euml.dir" />
    </propertyset>

  </target>

  <!-- =================================================================== -->
  <!-- Initialization target for optional ant tasks                        -->
  <!-- =================================================================== -->
  <!-- TODO: This target is not yet tested with the new structure. -->
  <target name="ant.optional.init" depends="init">
    <path id="ant.optional.classpath">
      <pathelement location="${ant.home}/libopt/ant-junit.jar"/>
      <pathelement location="${junit.jar.path}"/>
      <pathelement location="${easymock.jar.path}"/>
      <pathelement location="${jdepend.jar.path}"/>
      <pathelement location="${bsf.jar.path}"/>
      <pathelement location="${javasrc.jar.path}"/>
    </path>

    <taskdef classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTask" name="junit">
      <classpath>
        <path refid="ant.optional.classpath"/>
      </classpath>
    </taskdef>

    <taskdef classname="org.apache.tools.ant.taskdefs.optional.junit.XMLResultAggregator" name="junitreport">
      <classpath>
        <path refid="ant.optional.classpath"/>
      </classpath>
    </taskdef>

    <taskdef resource="checkstyletask.properties"
             classpath="${checkstyle.jar.path}"/>
  </target>



  <!-- =================================================================== -->
  <!-- Copies the complete set of jar files to the build directory.        -->
  <!-- =================================================================== -->
  <target name="package" depends="init"
          description="Prepare all jar files, both built and just delivered.">

    <!-- Build the subdirs in order. -->
    <ant dir="infra" inheritAll="false"           target="jar"/>
    <ant dir="model" inheritAll="false"           target="jar"/>
    <ant dir="model-mdr" inheritAll="false"       target="jar"/>
<!--    <ant dir="model-euml" inheritAll="false"      target="jar"/> -->
    <ant dir="app" inheritAll="false"             target="jar"/>

    <!-- Copy everything to the build directory -->
    <mkdir dir="${argo.build.dir}"/>

    <copy todir="${argo.build.dir}">
      <fileset dir="infra/build">
        <include name="*"/>
      </fileset>
      <fileset dir="model/build">
        <include name="*"/>
      </fileset>
      <fileset dir="model-mdr/build">
        <include name="*"/>
      </fileset>
      <!-- model-euml Not currently included -->
      <fileset dir="app/build">
        <include name="*"/>
      </fileset>
    </copy>

    <!-- The argouml.jar is copied again and again since it is modified below -->
    <copy todir="${argo.build.dir}" overwrite="on">
      <fileset dir="app/build">
        <include name="argouml.jar"/>
      </fileset>
    </copy>

    <!-- Update the manifest file. -->
    <property name="manifest.update" value="mf.mf"/>
    <exec executable="sh">
      <arg value="-c"/>
      <arg value="( cd ../build; echo Class-Path: &#042;.jar ext/&#042;.jar > ${manifest.update} )"/>
    </exec>

    <!--
    <exec executable="sh">
      <arg value="-c"/>
      <arg value="( cd ../build; $JAVA_HOME/bin/jar ufm argouml.jar mf.mf )"/>
    </exec>
    -->

    <jar update="true"
         basedir="${argo.build.dir}"
         includes="no-files"
         manifest="${argo.build.dir}/${manifest.update}"
         jarfile="${argo.build.dir}/argouml.jar"/>

    <delete>
      <fileset dir="${argo.build.dir}">
        <include name="${manifest.update}"/>
      </fileset>
    </delete>
  </target>


  <!-- =================================================================== -->
  <!-- Run tests in all subdirectories.                                    -->
  <!-- Order is important.                                                 -->
  <!-- =================================================================== -->
  <target name="tests"
          description="Run tests.">

    <!-- Build the subdirs in order. -->
    <!-- infra doesn't have tests. -->
    <!-- model doesn't have tests. -->
    <ant dir="model-mdr" inheritAll="false"       target="tests"/>
<!--    <ant dir="model-euml" inheritAll="false"      target="tests"/> -->
    <ant dir="app" inheritAll="false"             target="tests"/>

    <ant target="tests-reports"/>
  </target>  

  <target name="tests-reports" depends="init">
    <delete dir="${tests.reports}"/>
    <mkdir dir="${tests.reports}"/>

    <junitreport todir="${tests.reports}">
      <fileset dir=".">
        <include name="*/build/tests/reports/**/TEST-*.xml"/>
      </fileset>
      <report format="frames" todir="${tests.reports}/html"/>
    </junitreport>
  </target>


  <!-- =================================================================== -->
  <!-- Clean all subdirectories.                                           -->
  <!-- =================================================================== -->
  <target name="clean" depends="init"
          description="Clean out all built files.">

    <!-- Delete the build directory -->
    <delete dir="${argo.build.dir}"/>

    <!-- Build the subdirs in opposite order. -->
    <ant dir="app" inheritAll="false"             target="clean"/>
    <ant dir="model-euml" inheritAll="false"      target="clean"/>
    <ant dir="model-mdr" inheritAll="false"       target="clean"/>
    <ant dir="model" inheritAll="false"           target="clean"/>
    <ant dir="infra" inheritAll="false"           target="clean"/>

  </target>



  <!-- =================================================================== -->
  <!-- Prepares the Javadoc                                                -->
  <!-- =================================================================== -->
  <!-- TODO: This target is not yet tested with the new structure. -->
  <target name="prepare-docs" depends="init, javadocs, javadocs-api"
          description="Build javadocs.">
  </target>

  <target name="javadocs" depends="init">
    <mkdir dir="${argo.javadocs.dir}"/>

    <javadoc author="${javadoc.author}" 
             bottom="&lt;table width=&apos;100%&apos;&gt;&lt;tr&gt;&lt;td width=&apos;25%&apos; align=&apos;left&apos;&gt;ArgoUML &amp;copy; 1996-2006&lt;/td&gt;&lt;td width=&apos;25%&apos; align=&apos;center&apos;&gt;&lt;a href=&apos;http://argouml.tigris.org/&apos; target=&apos;_blank&apos;&gt;ArgoUML Homepage&lt;/a&gt;&lt;/td&gt;&lt;td width=&apos;25%&apos; align=&apos;center&apos;&gt;&lt;a href=&apos;http://argouml.tigris.org/dev.html&apos; target=&apos;_blank&apos;&gt;ArgoUML Developers' page&lt;/a&gt;&lt;/td&gt;&lt;td width=&apos;25%&apos; align=&apos;right&apos;&gt;&lt;a href=&apos;http://argouml.tigris.org/documentation/defaulthtml/cookbook/&apos; target=&apos;_blank&apos;&gt;ArgoUML Cookbook&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;"
             destdir="${argo.javadocs.dir}"
             maxmemory="128M"
             overview="org/argouml/overview-argo.html"
             packagenames="org.argouml.*"
             source="1.5"
             splitindex="${javadoc.splitindex}"
             use="${javadoc.use}"
             windowtitle="ArgoUML Javadoc for internal use">
      <sourcepath>
        <pathelement location="${argo.src.dir}"/>
        <pathelement location="${argo.src.dir}/../src/model/src"/>
        <pathelement location="${argo.src.dir}/../src/model-mdr/src"/>
      </sourcepath>

      <classpath>
        <path refid="argo.compile.classpath"/>
      </classpath>

      <!-- Links allow reference to external classes from within
           Argo javadocs
        -->

      <link href="${gef.javadoc.link}" offline="true"
            packagelistLoc="${gef.javadoc.packagelist}"/>

      <link href="${jdk.javadoc.link}" offline="true"
            packagelistLoc="${jdk.javadoc.packagelist}"/>

      <link href="${log4j.javadoc.link}" offline="true"
            packagelistLoc="${log4j.javadoc.packagelist}"/>

      <link href="${jmi.javadoc.link}" offline="true"
            packagelistLoc="${jmi.javadoc.packagelist}"/>

      <!-- Rest of the packages -->

    </javadoc>

    <copy todir="${argo.javadocs.dir}/org/argouml/doc-files">
      <fileset dir="${argo.src.dir}/org/argouml/doc-files" excludes="CVS/**" includes="**/**"/>
    </copy>

  </target>


  <!-- TODO: This target is not yet tested with the new structure. -->
  <target name="javadocs-api" depends="init">
    <mkdir dir="${argo.api.dir}"/>

    <!-- The package name list shall be the list of all the main packages for
         all subsystems that are available for modules.
      -->
    <javadoc author="${javadoc.author}"
             bottom="&lt;table width=&apos;100%&apos;&gt;&lt;tr&gt;&lt;td width=&apos;33%&apos; align=&apos;left&apos;&gt;ArgoUML &amp;copy; 1996-2006&lt;/td&gt;&lt;td width=&apos;34%&apos; align=&apos;center&apos;&gt;&lt;a href=&apos;http://argouml.tigris.org/&apos; target=&apos;_blank&apos;&gt;ArgoUML Homepage&lt;/a&gt;&lt;/td&gt;&lt;td width=&apos;33%&apos; align=&apos;right&apos;&gt;&lt;a href=&apos;http://argouml.tigris.org/documentation/defaulthtml/cookbook/&apos; target=&apos;_blank&apos;&gt;ArgoUML Cookbook&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;"
             destdir="${argo.api.dir}"
             maxmemory="128M"
             overview="org/argouml/overview-api.html"
             packagenames="org.argouml.model,org.argouml.cognitive,org.argouml.uml.reveng,org.argouml.application,org.argouml.i18n,org.argouml.ui,org.argouml.ui.explorer,org.argouml.ocl,org.argouml.moduleloader"
             source="1.5"
             private="false"
             splitindex="${javadoc.splitindex}"
             use="${javadoc.use}"
             windowtitle="ArgoUML Javadoc for ArgoUML Module Developers">
      <sourcepath>
        <pathelement location="${argo.src.dir}"/>
        <pathelement location="${argo.src.dir}/../src/model/src"/>
      </sourcepath>

      <classpath>
        <path refid="argo.compile.classpath"/>
      </classpath>

      <!-- Links allow reference to external classes from within
           Argo javadocs
        -->

      <link href="${gef.javadoc.link}" offline="true"
            packagelistLoc="${gef.javadoc.packagelist}"/>

      <link href="${jdk.javadoc.link}" offline="true"
            packagelistLoc="${jdk.javadoc.packagelist}"/>

      <link href="${log4j.javadoc.link}" offline="true"
            packagelistLoc="${log4j.javadoc.packagelist}"/>

      <link href="${jmi.javadoc.link}" offline="true"
            packagelistLoc="${jmi.javadoc.packagelist}"/>

      <!-- Rest of the packages -->

    </javadoc>

    <copy todir="${argo.api.dir}/org/argouml/doc-files">
      <fileset dir="${argo.src.dir}/org/argouml/doc-files"
               excludes="CVS/**"
	       includes="**/**"/>
    </copy>

  </target>


  <!-- =================================================================== -->
  <!-- Run ArgoUML from compiled sources                                   -->
  <!-- =================================================================== -->
  <!-- TODO: This target is not yet tested with the new structure. -->
  <target name="run" depends="package"
          description="Run the newly compiled ArgoUML.">
    <java classname="org.argouml.application.Main"
          fork="yes"
          taskname="argouml"
    	  maxmemory="500M">
      <sysproperty key="log4j.configuration"
                   value="org/argouml/resource/error_console.lcf"/>
      <assertions>
        <enable/>
      </assertions>
      <classpath>
        <pathelement location="${argo.build.classes}"/>
        <path refid="argo.runtime.classpath"/>
      </classpath>
    </java>
  </target>

  <!-- TODO: This target is not yet tested with the new structure. -->
  <target name="debug" depends="package"
          description="Run ArgoUML with debug level logging.">
    <java classname="org.argouml.application.Main"
          fork="yes"
          taskname="argouml"
    	  maxmemory="500M">
      <sysproperty key="log4j.configuration"
                   value="org/argouml/resource/full_console.lcf"/>
      <assertions>
        <enable/>
      </assertions>
      <classpath>
        <pathelement location="${argo.build.classes}"/>
        <path refid="argo.runtime.classpath"/>
      </classpath>
    </java>
  </target>

  <!-- TODO: This target is not yet tested with the new structure. -->
  <target name="info" depends="package"
          description="Run ArgoUML with info level logging.">
    <java classname="org.argouml.application.Main"
          fork="yes"
          taskname="argouml"
    	  maxmemory="500M">
      <sysproperty key="log4j.configuration"
                   value="org/argouml/resource/info_console.lcf"/>
      <assertions>
        <enable/>
      </assertions>
      <classpath>
        <pathelement location="${argo.build.classes}"/>
        <path refid="argo.runtime.classpath"/>
      </classpath>
    </java>
  </target>

  <!-- ################################################################### -->
  <!-- Section with tests.                                                 -->
  <!-- ################################################################### -->


  <!-- =================================================================== -->
  <!-- Run the tests that test the command line stuff.                     -->
  <!-- These tests does not have error conditions to test against like the -->
  <!-- JUnit test cases. Instead, if they hang or exit with error they     -->
  <!-- have failed.                                                        -->
  <!-- =================================================================== -->
  <!-- TODO: This target is not yet tested with the new structure. -->
  <target name="clitests" depends="package" 
          description="Run tests that test the command line stuff.">

    <!-- Don't do anything. -->
    <java classname="org.argouml.application.Main" 
          fork="yes">
      <assertions>
        <enable/>
      </assertions>
      <classpath>
        <pathelement location="${argo.build.classes}"/>
        <path refid="argo.runtime.classpath"/>
      </classpath>
      <arg value="-batch"/>
    </java>

    <!-- Exit. -->
    <java classname="org.argouml.application.Main" 
          fork="yes">
      <assertions>
        <enable/>
      </assertions>
      <classpath>
        <pathelement location="${argo.build.classes}"/>
        <path refid="argo.runtime.classpath"/>
      </classpath>
      <arg value="-nosplash"/>
      <arg value="-batch"/>
      <arg value="-command"/>
      <arg value="org.argouml.uml.ui.ActionExit"/>
    </java>

  </target>

  <!-- =================================================================== -->
  <!-- Start ArgoUML with JUnit test cases from ../tests.                  -->
  <!-- =================================================================== -->
  <!-- TODO: This target is not yet tested with the new structure. 
          depends="compile,junit-setup"
-->
  <target name="run-with-test-panel" 
          description="Start the TestRunner with all test cases from ../tests loaded.">
    <java classname="junit.swingui.TestRunner" fork="yes" taskname="argouml">
      <assertions>
        <enable/>
      </assertions>
      <classpath>
        <pathelement location="${argo.build.dir}/argo_junit_tests.jar"/>
        <pathelement location="${argo.tests.classes}"/>
        <pathelement location="${argo.build.classes}"/>
        <pathelement location="${junit.jar.path}"/>
        <pathelement location="${easymock.jar.path}"/>
        <path refid="argo.runtime.classpath"/>
      </classpath>
    </java>
  </target>



  <!-- ################################################################### -->
  <!-- Section with static analysis things.                                -->
  <!-- ################################################################### -->

  <!-- =================================================================== -->
  <!-- Perform JDepend to find about the structure in ArgoUML.             -->
  <!-- =================================================================== -->
  <!-- TODO: This target is not yet tested with the new structure. -->
  <target name="jdepend" depends="init, ant.optional.init"
          description="Run jdepend to report static metrics.">
    <echo>
CC - Concrete Class Count 
AC - Abstract Class (and Interface) Count 
Ca - Afferent Couplings (Ca) 
Ce - Efferent Couplings (Ce) 
A - Abstractness (0-1) 
I - Instability (0-1) 
D - Distance from the Main Sequence (0-1) 
Cyclic - If the package contains a dependency cycle 

For details see http://www.clarkware.com/software/JDepend.html.
    </echo>
    <java classname="jdepend.swingui.JDepend" failonerror="true" fork="true">
      <arg value="."/>
      <classpath>
        <path refid="ant.optional.classpath"/>
      </classpath>
    </java>
  </target>


  <!-- =================================================================== -->
  <!-- Perform javasrc to find about the structure in ArgoUML.             -->
  <!-- =================================================================== -->
  <!-- TODO: This target is not yet tested with the new structure. -->
  <target name="javasrc" depends="init"
          description="Run javasrc on the source.">
    <java classname="javasrc.app.Pass1" failonerror="true" fork="true">
      <sysproperty key="recursive" value="yes"/>
      <sysproperty key="title" value="JavaSrc for ArgoUML"/>
      <sysproperty key="outdir" value="../build/javasrc"/>
      <sysproperty key="verbose" value="yes"/>
      <classpath>
        <pathelement location="${javasrc.jar.path}"/>
        <pathelement location="${antlrall.jar.path}"/>
      </classpath>
      <arg value="."/>
    </java>
    <java classname="javasrc.app.Pass2" failonerror="true" fork="true">
      <sysproperty key="recursive" value="yes"/>
      <sysproperty key="title" value="JavaSrc for ArgoUML"/>
      <sysproperty key="outdir" value="../build/javasrc"/>
      <sysproperty key="verbose" value="yes"/>
      <classpath>
        <pathelement location="${javasrc.jar.path}"/>
        <pathelement location="${antlrall.jar.path}"/>
      </classpath>
      <arg value="../build/javasrc"/>
    </java>
  </target>


  <!-- =================================================================== -->
  <!-- Runs checkstyle to find style problems in ArgoUML.                  -->
  <!-- =================================================================== -->
  <!-- TODO: This target is not yet tested with the new structure. -->
  <target name="checkstyle" 
    description="Run Checkstyle on all sources (xml report)" 
    depends="ant.optional.init">

    <echo>
	  Running checkstyle on ${source.dir}.
    </echo>

    <property name="checkstyle.reports.dir" value="${argo.tests.reports}/checkstyle"/>
    <mkdir dir="${checkstyle.reports.dir}" />
    <delete>
      <fileset dir="${checkstyle.reports.dir}">
        <include name="*.xml" />
      </fileset>
    </delete>

    <checkstyle config="${argo.tools.dir}/checkstyle/checkstyle_argouml.xml">
      <property key="checkstyle.header.file" 
        value="${argo.tools.dir}/checkstyle/java.header" />
      <formatter type="xml" toFile="${checkstyle.reports.dir}/checkstyle-report.xml" />
      <fileset dir="${argo.src.dir}/org" includes="**/*.java">
        <exclude name="**/JavaLexer.java" />
        <exclude name="**/JavaRecognizer.java" />
        <exclude name="**/JavaTokenTypes.java" />
      </fileset>
    </checkstyle>

    <!--
      <fileset dir="${argo.model.dir}/src" includes="**/*.java"/>
      <fileset dir="${argo.mdr.dir}/src" includes="**/*.java"/>
      <fileset dir="${argo.tests.dir}" includes="**/*.java"/>
      <fileset dir="../modules/classfile/src/org/argouml/uml/reveng/classfile">
        <exclude name="ClassfileParser.java" />
        <exclude name="ClassfileParserTokenTypes.java" />
        <exclude name="ClassfileTokenTypes.java" />
        <exclude name="ClassfileTreeParser.java" />
      </fileset>
      <fileset dir="../modules/cpp/src/org/argouml/language/cpp/reveng">
        <exclude name="CPPLexer.java" />
        <exclude name="CPPParser.java" />
        <exclude name="STDCTokenTypes.java" />
      </fileset>
      -->

  </target>


  <!-- TODO: This target is not yet tested with the new structure. -->
  <target name="pmd-init" depends="ant.optional.init">
    <taskdef name="pmd" classname="net.sourceforge.pmd.ant.PMDTask" classpath="${pmd.jar.path}"/>
    <taskdef name="cpd" classname="net.sourceforge.pmd.cpd.CPDTask" classpath="${pmd.jar.path}"/>
    <property name="pmd.reports.dir" value="${argo.tests.reports}/pmd"/>
    <mkdir dir="${pmd.reports.dir}"/>
  </target>

  <!-- TODO: This target is not yet tested with the new structure. -->
  <target name="pmd" depends="pmd-init">

    <delete>
      <fileset dir="${pmd.reports.dir}">
        <include name="*.xml, *.htm*"/>
      </fileset>
    </delete>

    <pmd shortFilenames="true">
      <ruleset>rulesets/favorites.xml</ruleset>
      <ruleset>basic</ruleset>
      <formatter type="html" toFile="${pmd.reports.dir}/pmd-report.html" 
        linkPrefix="http://pmd.sourceforge.net/xref/"/>
      <fileset dir="${argo.src.dir}/org" includes="**/*.java">
        <exclude name="**/JavaLexer.java"/>
        <exclude name="**/JavaRecognizer.java"/>
        <exclude name="**/JavaTokenTypes.java"/>
      </fileset>
    </pmd>
  </target>

  <!-- TODO: This target is not yet tested with the new structure. -->
  <target name="cpd" depends="pmd-init">
    <property name="cpd.report.file" value="${pmd.reports.dir}/cpd-report"/>
    
    <mkdir dir="${pmd.reports.dir}"/>
    <delete file="${cpd.report.file}.*"/>
    <cpd minimumTokenCount="100" outputFile="${cpd.report.file}.xml" 
      format="xml" encoding="UTF-8">
      <fileset dir="${argo.src.dir}">
        <include name="**/*.java"/>
        <exclude name="**/JavaLexer.java"/>
        <exclude name="**/JavaRecognizer.java"/>
        <exclude name="**/JavaTokenTypes.java"/>
      </fileset>
    </cpd>
    
    <xslt in="${cpd.report.file}.xml" style="${pmd.xslt.path}/cpdhtml.xslt" 
      out="${cpd.report.file}.html"/>

  </target>

  <!-- Internal target to aggregate tasks for CruiseControl -->
  <!-- TODO: This target is not yet tested with the new structure.  -->
  <target name="cruisecontrol" depends="tests,checkstyle" />

  <!-- ################################################################### -->
  <!-- Section with temporary targets and experiments.                     -->
  <!-- ################################################################### -->

  <!-- =================================================================== -->
  <!-- Finds undeclared tags in the code.                                  -->
  <!-- Unluckily Linus doesn't know how to write this in a                 -->
  <!-- platform-independant way (i.e. with just ant-calls) so it will only -->
  <!-- be working for unix/shell enabled platforms. If you know how to     -->
  <!-- solve this within ant, please go ahead.                             -->
  <!-- =================================================================== -->

  <!-- TODO: This target is not yet tested with the new structure. -->
  <target name="find-undeclared-tags"
          description="Scans through all source files and find all tags that are not in the corresponding properties files.">
    <exec executable="sh">
      <arg value="-c"/>
      <arg value="../tools/bin/i18n-find-undeclared-tags.sh"/>
    </exec>
  </target>

  <!-- =================================================================== -->
  <!-- Runs Classycle to find cyclic dependencies in ArgoUML.              -->
  <!-- =================================================================== -->
  <!-- TODO: This target is not yet tested with the new structure. 
  depends="compile"
  -->
  <target name="classycle" 
        description="Analyze sources for cyclic dependencies using Classcycle">
    <echo>
  Running classcyle on ${source.dir}.
  </echo>
    <property name="classycle.output" value="${argo.build.dir}/classycle"/>
    <property name="classycle.dir" value="${argo.tools.dir}/Classycle"/>
    <mkdir dir="${classycle.output}"/>
    <java jar="${classycle.dir}/classycle.jar" failonerror="false" 
          fork="true" maxmemory="32M">
      <arg value="-mergeInnerClasses"/>
      <arg value="-includingClasses=org.argouml.*"/>
      <arg value="-excludingClasses=java.*,javax.*"/>
      <arg value="-xmlFile=${classycle.output}/argouml-classcycles.xml"/>
      <arg value="-title=ArgoUML-${argo.build.version}"/>
      <arg value="${argo.build.classes}"/>
    </java>
    <copy todir="${classycle.output}">
      <fileset dir="${classycle.dir}">
        <include name="*.xsl"/>
        <include name="images/**"/>
      </fileset>
    </copy>
  </target>

</project>
<!-- End of file -->
