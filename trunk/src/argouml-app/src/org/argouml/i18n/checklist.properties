# $Id$
#******************************************************************************
# Copyright (c) 2009 Contributors - see below
# All rights reserved. This program and the accompanying materials
# are made available under the terms of the Eclipse Public License v1.0
# which accompanies this distribution, and is available at
# http://www.eclipse.org/legal/epl-v10.html
#
# Contributors:
#    mvw
#******************************************************************************
#
# Some portions of this file was previously release using the BSD License:
#
# Copyright (c) 2005-2007 The Regents of the University of California. All
# Rights Reserved. Permission to use, copy, modify, and distribute this
# software and its documentation without fee, and without a written
# agreement is hereby granted, provided that the above copyright notice
# and this paragraph appear in all copies.  This software program and
# documentation are copyrighted by The Regents of the University of
# California. The software program and documentation are supplied "AS
# IS", without any accompanying services from The Regents. The Regents
# does not warrant that the operation of the program will be
# uninterrupted or error-free. The end-user understands that the program
# was developed for research purposes and is advised not to rely
# exclusively on the program for any reason.  IN NO EVENT SHALL THE
# UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR DIRECT, INDIRECT,
# SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING LOST PROFITS,
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE. THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATIONS TO PROVIDE MAINTENANCE, SUPPORT,
# UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
#
# Keys in the same order as in org.argouml.uml.cognitive.critics.Init
# 
# NOTE TO TRANSLATORS: The string "<ocl>self</ocl>" will be replaced
# at runtime with the name of the model element.  This string should
# not be translated.
#
checklist.actor.encoding = Encoding
checklist.actor.encoding.break-into-parts = Could <ocl>self</ocl> be broken \
        down into two or more classes?
checklist.actor.encoding.convert-to-attribute = Should <ocl>self</ocl> be its \
        own class or a simple attribute of another class?
checklist.actor.encoding.do-just-one-thing = Does <ocl>self</ocl> do exactly \
        one thing and do it well?
checklist.actor.location = Location
checklist.actor.location.eliminate-from-model = Could <ocl>self</ocl> be \
        eliminated from the model?
checklist.actor.location.eliminates-or-affects-something-else = Is there \
        another class in the model that should be revised or eliminated \
        because it serves the same purpose as <ocl>self</ocl>?
checklist.actor.location.move-somewhere = Could <ocl>self</ocl> be defined in \
        a different location in the class hierarchy?
checklist.actor.location.planned-subclasses = Have you planned to have \
        subclasses of <ocl>self</ocl>?
checklist.actor.naming = Naming
checklist.actor.naming.describe-clearly = Does the name '<ocl>self</ocl>' \
        clearly describe the class?
checklist.actor.naming.is-noun = Is '<ocl>self</ocl>' a noun or noun phrase?
checklist.actor.naming.misinterpret = Could the name '<ocl>self</ocl>' be \
        misinterpreted to mean something else?
checklist.actor.updates = Updates
checklist.actor.updates.affects-something-else = Is there some other object \
        that must be updated whenever <ocl>self</ocl> is updated?
checklist.actor.updates.reasons-for-update = For what reasons will an instance \
        of <ocl>self</ocl> be updated?
checklist.actor.value = Value
checklist.actor.value.convert-to-invariant = Could you write an invariant for \
        this class?
checklist.actor.value.establish-invariant-in-constructors = Do all \
        constructors establish the class invariant?
checklist.actor.value.maintain-invariant = Do all operations maintain the \
        class invariant?
checklist.actor.value.start-with-meaningful-values = Do all attributes of \
        <ocl>self</ocl> start with meaningful values?
checklist.association.encoding = Encoding
checklist.association.encoding.break-into-parts = Could <ocl>self</ocl> be \
        broken down into two or more classes?
checklist.association.encoding.convert-to-attribute = Should <ocl>self</ocl> \
        be its own class or a simple attribute of another class?
checklist.association.encoding.do-just-one-thing = Does <ocl>self</ocl> do \
        exactly one thing and do it well?
checklist.association.location = Location
checklist.association.location.eliminate-from-model = Could <ocl>self</ocl> be \
        eliminated from the model?
checklist.association.location.eliminates-or-affects-something-else = Is there \
        another class in the model that should be revised or eliminated \
        because it serves the same purpose as <ocl>self</ocl>?
checklist.association.location.move-somewhere = Could <ocl>self</ocl> be \
        defined in a different location in the class hierarchy?
checklist.association.location.planned-subclasses = Have you planned to have \
        subclasses of <ocl>self</ocl>?
checklist.association.naming = Naming
checklist.association.naming.describe-clearly = Does the name \
        '<ocl>self</ocl>' clearly describe the class?
checklist.association.naming.is-noun = Is '<ocl>self</ocl>' a noun or noun \
        phrase?
checklist.association.naming.misinterpret = Could the name '<ocl>self</ocl>' \
        be misinterpreted to mean something else?
checklist.association.updates = Updates
checklist.association.updates.affects-something-else = Is there some other \
        object that must be updated whenever <ocl>self</ocl> is updated?
checklist.association.updates.reasons-for-update = For what reasons will an \
        instance of <ocl>self</ocl> be updated?
checklist.association.value = Value
checklist.association.value.convert-to-invariant = Could you write an \
        invariant for this class?
checklist.association.value.establish-invariant-in-constructors = Do all \
        constructors establish the class invariant?
checklist.association.value.maintain-invariant = Do all operations maintain \
        the class invariant?
checklist.association.value.start-with-meaningful-values = Do all attributes \
        of <ocl>self</ocl> start with meaningful values?
checklist.attribute.encoding = Encoding
checklist.attribute.encoding.allow-impossible-values = Does the type \
        <ocl>self.type</ocl> allow values for <ocl>self</ocl> that could never \
        be correct?
checklist.attribute.encoding.break-into-parts = Could <ocl>self</ocl> be \
        broken down into two or more parts (e.g., a phonenumber can be broken \
        down into area code, prefix, and number)?
checklist.attribute.encoding.combine-with-other = Could <ocl>self</ocl> be \
        combined with some other attribute of <ocl>self.owner</ocl> (e.g., \
        {owner.structuralFeature})?
checklist.attribute.encoding.is-computable = Could <ocl>self</ocl> be computed \
        from other attributes instead of stored?
checklist.attribute.encoding.is-too-restrictive = Is the type \
        <ocl>self.type</ocl> too restrictive to represent all possible values \
        of <ocl>self</ocl>?
checklist.attribute.location = Location
checklist.attribute.location.could-be-eliminated = Could <ocl>self</ocl> be \
        eliminated from the model?
checklist.attribute.location.eliminates-or-affects-something-else = Is there \
        another attribute in the model that should be revised or eliminated \
        because it serves the same purpose as <ocl>self</ocl>?
checklist.attribute.location.include-all = Does <ocl>self</ocl> apply to all \
        instances of class <ocl>self.owner</ocl> including instances of \
        subclasses?
checklist.attribute.location.move-somewhere = Could <ocl>self</ocl> be defined \
        in a different class that is associated with <ocl>self.owner</ocl>?
checklist.attribute.location.move-up-hierarchy = Could <ocl>self</ocl> be \
        moved up the inheritance hierarchy to apply to <ocl>owner.name</ocl> \
        and to other classes?
checklist.attribute.naming = Naming
checklist.attribute.naming.describe-clearly = Does the name '<ocl>self</ocl>' \
        clearly describe the attribute?
checklist.attribute.naming.is-noun = Is '<ocl>self</ocl>' a noun or noun \
        phrase?
checklist.attribute.naming.misinterpret = Could the name '<ocl>self</ocl>' be \
        misinterpreted to mean something else?
checklist.attribute.updates = Updates
checklist.attribute.updates.affects-something-else = Is there some other \
        attribute that must be updated whenever <ocl>self</ocl> is updated?
checklist.attribute.updates.exists-method-for-specific-value = Is there a \
        method that should be called when <ocl>self</ocl> is given a certain \
        kind of value?
checklist.attribute.updates.exists-method-for-update = Is there a method that \
        should be called when <ocl>self</ocl> is updated?
checklist.attribute.updates.reasons-for-update = For what reasons will \
        <ocl>self</ocl> be updated?
checklist.attribute.value = Value
checklist.attribute.value.correct-default-value = Is the initial value \
        <ocl>self.initialValue</ocl> correct?
checklist.attribute.value.default-value = Should <ocl>self</ocl> have an \
        initial (or default) value?
checklist.attribute.value.is-correctness-checkable = Could you write an \
        expression to check if <ocl>self</ocl> is correct? Plausible?
checklist.class.encoding = Encoding
checklist.class.encoding.break-into-parts = Could <ocl>self</ocl> be broken \
        down into two or more classes?
checklist.class.encoding.convert-to-attribute = Should <ocl>self</ocl> be its \
        own class or a simple attribute of another class?
checklist.class.encoding.do-just-one-thing = Does <ocl>self</ocl> do exactly \
        one thing and do it well?
checklist.class.location = Location
checklist.class.location.eliminate-from-model = Could <ocl>self</ocl> be \
        eliminated from the model?
checklist.class.location.eliminates-or-affects-something-else = Is there \
        another class in the model that should be revised or eliminated \
        because it serves the same purpose as <ocl>self</ocl>?
checklist.class.location.move-somewhere = Could <ocl>self</ocl> be defined in \
        a different location in the class hierarchy?
checklist.class.location.planned-subclasses = Have you planned to have \
        subclasses of <ocl>self</ocl>?
checklist.class.naming = Naming
checklist.class.naming.describe-clearly = Does the name '<ocl>self</ocl>' \
        clearly describe the class?
checklist.class.naming.is-noun = Is '<ocl>self</ocl>' a noun or noun phrase?
checklist.class.naming.misinterpret = Could the name '<ocl>self</ocl>' be \
        misinterpreted to mean something else?
checklist.class.updates = Updates
checklist.class.updates.affects-something-else = Is there some other object \
        that must be updated whenever <ocl>self</ocl> is updated?
checklist.class.updates.reasons-for-update = For what reasons will an instance \
        of <ocl>self</ocl> be updated?
checklist.class.value = Value
checklist.class.value.convert-to-invariant = Could you write an invariant for \
        this class?
checklist.class.value.establish-invariant-in-constructors = Do all \
        constructors establish the class invariant?
checklist.class.value.maintain-invariant = Do all operations maintain the \
        class invariant?
checklist.class.value.start-with-meaningful-values = Do all attributes of \
        <ocl>self</ocl> start with meaningful values?
checklist.instance.actions = Actions
checklist.instance.actions.list-do-action = What action should be performed \
        while in <ocl>self</ocl>?
checklist.instance.actions.list-entry-actions = What action should be \
        performed on entry into <ocl>self</ocl>?
checklist.instance.actions.list-exit-action = What action should be performed \
        on exit from <ocl>self</ocl>?
checklist.instance.actions.maintained-state = Do state-actions maintain \
        <ocl>self</ocl> as the current state?
checklist.instance.actions.update-attribute-on-entry = Should some attribute \
        be updated on entry into <ocl>self</ocl>?
checklist.instance.actions.update-attribute-on-exit = Should some attribute be \
        updated on exit from <ocl>self</ocl>?
checklist.instance.general = General
checklist.instance.general.describe-clearly = Does this instance \
        <ocl>self</ocl> clearly describe the instance?
checklist.instance.naming = Naming
checklist.instance.naming.denotes-state = Does '<ocl>self</ocl>' denote a \
        state rather than an activity?
checklist.instance.naming.describe-clearly = Does the name '<ocl>self</ocl>' \
        clearly describe the instance?
checklist.instance.naming.misinterpret = Could the name '<ocl>self</ocl>' be \
        misinterpreted to mean something else?
checklist.instance.structure = Structure
checklist.instance.structure.belong = Does <ocl>self</ocl> belong in this \
        state machine or another?
checklist.instance.structure.break-into-parts = Could <ocl>self</ocl> be \
        broken down into two or more states?
checklist.instance.structure.can-write-characteristic-equation = Could you \
        write a characteristic equation for <ocl>self</ocl>?
checklist.instance.structure.do-just-one-thing = Does <ocl>self</ocl> do \
        exactly one thing and do it well?
checklist.instance.structure.is-state-in-another-machine-exclusive = Is some \
        state in another machine exclusive with <ocl>self</ocl>?
checklist.instance.structure.make-internal = Should <ocl>self</ocl> be an \
        initial state?
checklist.instance.structure.merged-with-other = Should <ocl>self</ocl> be its \
        own state or could it be merged with another state?
checklist.instance.transitions = Transitions
checklist.instance.transitions.are-transitions-out-of-exclusive = Is each \
        outgoing transition exclusive?
checklist.instance.transitions.combine-with-other-incoming = Could some \
        incoming transitions be combined?
checklist.instance.transitions.combine-with-other-outgoing = Could some \
        outgoing transitions be combined?
checklist.instance.transitions.need-another-transition-into = Should there be \
        another transition into <ocl>self</ocl>?
checklist.instance.transitions.need-another-transition-out-of = Should there \
        be another transition out of <ocl>self</ocl>?
checklist.instance.transitions.use-all-transitions-into = Can all the \
        transitions into <ocl>self</ocl> be used?
checklist.instance.transitions.use-all-transitions-out-of = Can all the \
        transitions out of <ocl>self</ocl> be used?
checklist.interface.encoding = Encoding
checklist.interface.encoding.break-into-parts = Could <ocl>self</ocl> be \
        broken down into two or more classes?
checklist.interface.encoding.convert-to-attribute = Should <ocl>self</ocl> be \
        its own class or a simple attribute of another class?
checklist.interface.encoding.do-just-one-thing = Does <ocl>self</ocl> do \
        exactly one thing and do it well?
checklist.interface.location = Location
checklist.interface.location.eliminate-from-model = Could <ocl>self</ocl> be \
        eliminated from the model?
checklist.interface.location.eliminates-or-affects-something-else = Is there \
        another class in the model that should be revised or eliminated \
        because it serves the same purpose as <ocl>self</ocl>?
checklist.interface.location.move-somewhere = Could <ocl>self</ocl> be defined \
        in a different location in the class hierarchy?
checklist.interface.location.planned-subclasses = Have you planned to have \
        subclasses of <ocl>self</ocl>?
checklist.interface.naming = Naming
checklist.interface.naming.describe-clearly = Does the name '<ocl>self</ocl>' \
        clearly describe the class?
checklist.interface.naming.is-noun = Is '<ocl>self</ocl>' a noun or noun \
        phrase?
checklist.interface.naming.misinterpret = Could the name '<ocl>self</ocl>' be \
        misinterpreted to mean something else?
checklist.interface.updates = Updates
checklist.interface.updates.affects-something-else = Is there some other \
        object that must be updated whenever <ocl>self</ocl> is updated?
checklist.interface.updates.reasons-for-update = For what reasons will an \
        instance of <ocl>self</ocl> be updated?
checklist.interface.value = Value
checklist.interface.value.convert-to-invariant = Could you write an invariant \
        for this class?
checklist.interface.value.establish-invariant-in-constructors = Do all \
        constructors establish the class invariant?
checklist.interface.value.maintain-invariant = Do all operations maintain the \
        class invariant?
checklist.interface.value.start-with-meaningful-values = Do all attributes of \
        <ocl>self</ocl> start with meaningful values?
checklist.link.encoding = Encoding
checklist.link.encoding.break-into-parts = Could <ocl>self</ocl> be broken \
        down into two or more classes?
checklist.link.encoding.convert-to-attribute = Should <ocl>self</ocl> be its \
        own class or a simple attribute of another class?
checklist.link.encoding.do-just-one-thing = Does <ocl>self</ocl> do exactly \
        one thing and do it well?
checklist.link.location = Location
checklist.link.location.eliminate-from-model = Could <ocl>self</ocl> be \
        eliminated from the model?
checklist.link.location.eliminates-or-affects-something-else = Is there \
        another class in the model that should be revised or eliminated \
        because it serves the same purpose as <ocl>self</ocl>?
checklist.link.location.move-somewhere = Could <ocl>self</ocl> be defined in a \
        different location in the class hierarchy?
checklist.link.location.planned-subclasses = Have you planned to have \
        subclasses of <ocl>self</ocl>?
checklist.link.naming = Naming
checklist.link.naming.describe-clearly = Does the name '<ocl>self</ocl>' \
        clearly describe the class?
checklist.link.naming.is-noun = Is '<ocl>self</ocl>' a noun or noun phrase?
checklist.link.naming.misinterpret = Could the name '<ocl>self</ocl>' be \
        misinterpreted to mean something else?
checklist.link.updates = Updates
checklist.link.updates.affects-something-else = Is there some other object \
        that must be updated whenever <ocl>self</ocl> is updated?
checklist.link.updates.reasons-for-update = For what reasons will an instance \
        of <ocl>self</ocl> be updated?
checklist.link.value = Value
checklist.link.value.convert-to-invariant = Could you write an invariant for \
        this class?
checklist.link.value.establish-invariant-in-constructors = Do all constructors \
        establish the class invariant?
checklist.link.value.maintain-invariant = Do all operations maintain the class \
        invariant?
checklist.link.value.start-with-meaningful-values = Do all attributes of \
        <ocl>self</ocl> start with meaningful values?
checklist.operation.encoding = Encoding
checklist.operation.encoding.break-into-parts = Could <ocl>self</ocl> be \
        broken down into two or more parts (e.g., pre-process, main \
        processing, and post-processing)?
checklist.operation.encoding.break-into-series = Could <ocl>self</ocl> be \
        replaced by a series of client calls to simpler operations?
checklist.operation.encoding.combine-with-other = Could <ocl>self</ocl> be \
        combined with some other operation of <ocl>self.owner</ocl> (e.g., \
        <ocl sep=', '>self.owner.behavioralFeature</ocl>)?
checklist.operation.encoding.does-returntype-allow-impossible-values = Does \
        '<ocl>self.returnType</ocl>' allow return values that could never be \
        correct?
checklist.operation.encoding.is-returntype-too-restrictive = Is the return \
        type '<ocl>self.returnType</ocl>' too restrictive to represent all \
        possible values returned by <ocl>self</ocl>?
checklist.operation.encoding.reduce-number-of-calls = Could <ocl>self</ocl> be \
        combined with other operations to reduce the number of calls clients \
        must make?
checklist.operation.location = Location
checklist.operation.location.could-be-eliminated = Could <ocl>self</ocl> be \
        eliminated from the model?
checklist.operation.location.eliminates-or-affects-something-else = Is there \
        another operation in the model that should be revised or eliminated \
        because it serves the same purpose as <ocl>self</ocl>?
checklist.operation.location.include-all = Does <ocl>self</ocl> apply to all \
        instances of class <ocl>self.owner</ocl> including instances of \
        subclasses?
checklist.operation.location.move-somewhere = Could <ocl>self</ocl> be defined \
        in a different class that is associated with <ocl>self.owner</ocl>?
checklist.operation.location.move-up-hierarchy = Could <ocl>self</ocl> be \
        moved up the inheritance hierarchy to apply to <ocl>self.owner</ocl> \
        and to other classes?
checklist.operation.naming = Naming
checklist.operation.naming.describe-clearly = Does the name '<ocl>self</ocl>' \
        clearly describe the operation?
checklist.operation.naming.do-just-one-thing = Does <ocl>self</ocl> do one \
        thing and do it well?
checklist.operation.naming.is-verb = Is '<ocl>self</ocl>' a verb or verb \
        phrase?
checklist.operation.naming.misinterpret = Could the name '<ocl>self</ocl>' be \
        misinterpreted to mean something else?
checklist.operation.value = Value
checklist.operation.value.are-special-cases = Are there special case inputs \
        that must be handled separately?
checklist.operation.value.express-postconditions-possible = Can you express \
        the postconditions of <ocl>self</ocl>?
checklist.operation.value.express-preconditions-possible = Can you express the \
        preconditions of <ocl>self</ocl>?
checklist.operation.value.handle-all-inputs = Can <ocl>self</ocl> handle all \
        possible inputs?
checklist.operation.value.how-behave-postconditions-not-achieved = How will \
        <ocl>self</ocl> behave if postconditions cannot be achieved?
checklist.operation.value.how-behave-preconditions-violated = How will \
        <ocl>self</ocl> behave if preconditions are violated?
checklist.operation.value.is-correctness-checkable = Could you write an \
        expression to check if the arguments to <ocl>self</ocl> are correct? \
        Plausible?
checklist.state.actions = Actions
checklist.state.actions.list-do-action = What action should be performed while \
        in <ocl>self</ocl>?
checklist.state.actions.list-entry-actions = What action should be performed \
        on entry into <ocl>self</ocl>?
checklist.state.actions.list-exit-action = What action should be performed on \
        exit from <ocl>self</ocl>?
checklist.state.actions.maintained-state = Do state-actions maintain \
        <ocl>self</ocl> as the current state?
checklist.state.actions.update-attribute-on-entry = Should some attribute be \
        updated on entry into <ocl>self</ocl>?
checklist.state.actions.update-attribute-on-exit = Should some attribute be \
        updated on exit from <ocl>self</ocl>?
checklist.state.naming = Naming
checklist.state.naming.denotes-state = Does '<ocl>self</ocl>' denote a state \
        rather than an activity?
checklist.state.naming.describe-clearly = Does the name '<ocl>self</ocl>' \
        clearly describe the state?
checklist.state.naming.misinterpret = Could the name '<ocl>self</ocl>' be \
        misinterpreted to mean something else?
checklist.state.structure = Structure
checklist.state.structure.belong = Does <ocl>self</ocl> belong in this state \
        machine or another?
checklist.state.structure.break-into-parts = Could <ocl>self</ocl> be broken \
        down into two or more states?
checklist.state.structure.can-write-characteristic-equation = Could you write \
        a characteristic equation for <ocl>self</ocl>?
checklist.state.structure.do-just-one-thing = Does <ocl>self</ocl> do exactly \
        one thing and do it well?
checklist.state.structure.is-state-in-another-machine-exclusive = Is some \
        state in another machine exclusive with <ocl>self</ocl>?
checklist.state.structure.make-internal = Should <ocl>self</ocl> be be an \
        initial state?
checklist.state.structure.merged-with-other = Should <ocl>self</ocl> be its \
        own state or could it be merged with another state?
checklist.state.transitions = Transitions
checklist.state.transitions.are-transitions-out-of-exclusive = Is each \
        outgoing transition exclusive?
checklist.state.transitions.combine-with-other-incoming = Could some incoming \
        transitions be combined?
checklist.state.transitions.combine-with-other-outgoing = Could some outgoing \
        transitions be combined?
checklist.state.transitions.need-another-transition-into = Should there be \
        another transition into <ocl>self</ocl>?
checklist.state.transitions.need-another-transition-out-of = Should there be \
        another transition out of <ocl>self</ocl>?
checklist.state.transitions.use-all-transitions-into = Can all the transitions \
        into <ocl>self</ocl> be used?
checklist.state.transitions.use-all-transitions-out-of = Can all the \
        transitions out of <ocl>self</ocl> be used?
checklist.transition.actions = Actions
checklist.transition.actions.is-postcondition-consistant-with-destination = Is \
        the action's postcondition consistent with the destination?
checklist.transition.actions.is-precondition-met = Is the precondition of the \
        action always met?
checklist.transition.actions.should-have = Should this transition have an \
        action?
checklist.transition.actions.should-have-entry = Should this transition's \
        action be an entry action?
checklist.transition.actions.should-have-exit = Should this transition's \
        action be an exit action?
checklist.transition.guard = Guard
checklist.transition.guard.break-into-parts = Could it be broken down into two \
        or more transitions?
checklist.transition.guard.is-too-restrictive = Is this transition's condition \
        too restrictive?
checklist.transition.guard.taken-too-often = Could this transition be taken \
        too often?
checklist.transition.structure = Structure
checklist.transition.structure.end-somewhere-else = Should this transition end \
        at a different destination?
checklist.transition.structure.need-another-like-this = Should there be \
        another transition \"like\" this one?
checklist.transition.structure.start-somewhere-else = Should this transition \
        start at a different source?
checklist.transition.structure.unneeded-because-of-this = Is another \
        transition unneeded because of this one?
checklist.transition.trigger = Trigger
checklist.transition.trigger.happen-too-often = Does the trigger happen too \
        often?
checklist.transition.trigger.happen-too-rarely = Does the trigger happen too \
        rarely?
checklist.transition.trigger.needed = Does this transition need a trigger?
checklist.usecase.encoding = Encoding
checklist.usecase.encoding.break-into-parts = Could <ocl>self</ocl> be broken \
        down into two or more classes?
checklist.usecase.encoding.convert-to-attribute = Should <ocl>self</ocl> be \
        its own class or a simple attribute of another class?
checklist.usecase.encoding.do-just-one-thing = Does <ocl>self</ocl> do exactly \
        one thing and do it well?
checklist.usecase.location = Location
checklist.usecase.location.eliminate-from-model = Could <ocl>self</ocl> be \
        eliminated from the model?
checklist.usecase.location.eliminates-or-affects-something-else = Is there \
        another class in the model that should be revised or eliminated \
        because it serves the same purpose as <ocl>self</ocl>?
checklist.usecase.location.move-somewhere = Could <ocl>self</ocl> be defined \
        in a different location in the class hierarchy?
checklist.usecase.location.planned-subclasses = Have you planned to have \
        subclasses of <ocl>self</ocl>?
checklist.usecase.naming = Naming
checklist.usecase.naming.describe-clearly = Does the name '<ocl>self</ocl>' \
        clearly describe the class?
checklist.usecase.naming.is-noun = Is '<ocl>self</ocl>' a noun or noun phrase?
checklist.usecase.naming.misinterpret = Could the name '<ocl>self</ocl>' be \
        misinterpreted to mean something else?
checklist.usecase.updates = Updates
checklist.usecase.updates.affects-something-else = Is there some other object \
        that must be updated whenever <ocl>self</ocl> is updated?
checklist.usecase.updates.reasons-for-update = For what reasons will an \
        instance of <ocl>self</ocl> be updated?
checklist.usecase.value = Value
checklist.usecase.value.convert-to-invariant = Could you write an invariant \
        for this class?
checklist.usecase.value.establish-invariant-in-constructors = Do all \
        constructors establish the class invariant?
checklist.usecase.value.maintain-invariant = Do all operations maintain the \
        class invariant?
checklist.usecase.value.start-with-meaningful-values = Do all attributes of \
        <ocl>self</ocl> start with meaningful values?
