<?xml version="1.0" encoding="UTF-8"?>
<!-- $Id$

    Ant build file for App, all subsystems not yet split.

    This is designed to work:
    - in the subdirectory named app, as stored in the repository.
      Used when compiling, running tests from the command line.
    - When checked out from within Eclipse (subdirectory named argouml-app)
      Used for generating code.

Building this requires:
    infra
    model

  -->

<project basedir="." default="compile" name="argouml">

  <!-- =================================================================== -->
  <!-- Initialization target                                               -->
  <!-- =================================================================== -->

  <target name="init">

    <tstamp>
      <format pattern="yyyy" property="year"/>
    </tstamp>

    <property name="local.build.properties" value="build.properties"/>
    <property name="user.build.properties" 
              value="${user.home}/argouml.build.properties"/>
    <property file="${local.build.properties}"/>
    <property file="${user.build.properties}"/>

    <!-- we really need an absolute path for argo.root.dir -->
    <!-- if it is set in a property file before now, it must be absolute -->
    <property name="argo.root.dir" value="${basedir}/.." />
    <property file="${override.build.properties}"/>
    <property file="default.properties"/>
    <property file="${argo.root.dir}/argouml-build/default.properties"/>

    <property name="build.dir" value="build"/>
    <property name="build.classes" value="${build.dir}/classes"/>

    <property name="tests.classes" value="${build.dir}/tests/classes"/>
    <property name="tests.reports" value="${build.dir}/tests/reports"/>

    <path id="java.tools.classpath">
      <pathelement path="${JAVA_HOME}/lib/tools.jar"/>
    </path>

    <path id="antlr.run.classpath">
      <pathelement location="lib/antlr-2.7.7.jar"/>
    </path>

    <path id="src.compile.classpath">
      <fileset dir="lib">
        <include name="*.jar"/>
      </fileset>
      <fileset dir="../argouml-core-infra/build/">
        <include name="*.jar"/>
      </fileset>
      <fileset dir="../argouml-core-model/build/">
        <include name="*.jar"/>
      </fileset>
    </path>

    <!-- This runtime classpath is used for tests and other things started
         from this file.
      -->
    <path id="src.run.classpath">
      <path refid="src.compile.classpath"/>
      <!-- only one of the following will be used at a time -->
      <!-- we put them together because there's little risk of crosstalk -->
      <fileset dir="../argouml-core-model-mdr/build/">
        <include name="*.jar"/>
      </fileset>
      <fileset dir="../argouml-core-model-euml/build/">
        <include name="*.jar"/>
      </fileset>
    </path>

    <path id="tests.compile.classpath">
      <pathelement location="${build.classes}"/>
      <pathelement location="../../tools/junit-3.8.2/junit.jar"/>
      <pathelement location="../../tools/lib/easymock12.jar"/>
      <pathelement location="../../tools/jdepend-2.9/lib/jdepend-2.9.jar"/>
    <!-- Not sure if this will work for the single tree checkout, so we'll leave the old versions for now - tfm -->
      <pathelement location="${argo.tools.dir}/junit-3.8.2/junit.jar"/>
      <pathelement location="${argo.tools.dir}/lib/easymock12.jar"/>
      <pathelement location="${argo.tools.dir}/jdepend-2.9/lib/jdepend-2.9.jar"/>
      <path refid="src.compile.classpath"/>
    </path>

    <path id="tests.run.classpath">
      <path refid="tests.compile.classpath"/>
      <fileset dir="../argouml-core-model-mdr/build/">
        <include name="*.jar"/>
      </fileset>
    </path>

    <!-- In order to use ant optional tasks which use jars that are not -->
    <!-- copied into ANT_HOME/lib, we must declare the tasks ourselves. -->

    <property name="Name" value="ArgoUML"/>
    <property name="name" value="argouml"/>

    <property name="argo.build.version" value="${argo.core.version}"/>

    <property name="argo.timestamp.version" 
              value="${argo.build.version}-${DSTAMP}-${TSTAMP}"/>

    <property name="version.package" value="org/argouml/application"/>
  </target>

  <!-- =================================================================== -->
  <!-- Initialization target for optional ant tasks                        -->
  <!-- =================================================================== -->
  <target name="ant.optional.init" depends="init">
    <path id="ant.optional.classpath">
      <pathelement location="${ant.home}/libopt/ant-junit.jar"/>
      <pathelement location="${junit.jar.path}"/>
      <pathelement location="${easymock.jar.path}"/>
      <pathelement location="${jdepend.jar.path}"/>
      <pathelement location="${bsf.jar.path}"/>
      <pathelement location="${javasrc.jar.path}"/>
    </path>

    <taskdef classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTask" name="junit">
      <classpath>
        <path refid="ant.optional.classpath"/>
      </classpath>
    </taskdef>

    <taskdef classname="org.apache.tools.ant.taskdefs.optional.junit.XMLResultAggregator" name="junitreport">
      <classpath>
        <path refid="ant.optional.classpath"/>
      </classpath>
    </taskdef>

  </target>


  <!-- Note this file can only make Ant display values set in the
       file correctly, but external values in the environment or
       properties file will be operational.
   -->

  <!-- =================================================================== -->
  <!-- Prepares the build directory                                        -->
  <!-- =================================================================== -->

  <target name="prepare" depends="init,check-version">
    <!-- create directories -->
    <echo message="Preparing the build directories"/>
    <mkdir dir="${build.dir}"/>
    <mkdir dir="${build.classes}"/>

    <copy todir="${build.classes}/org/argouml/Images">
      <fileset dir="src/org/argouml/Images" includes="**/**"/>
    </copy>

    <copy todir="${build.classes}/org/argouml/i18n">
      <fileset dir="src/org/argouml/i18n" includes="*.properties"/>
    </copy>

    <copy todir="${build.classes}/org/argouml/resource">
      <fileset dir="src/org/argouml/resource" 
        includes="**/**"/>
    </copy>
    <!-- this should copy across all .tee files, dtds and xslt  for persistence mechanism -->
    <copy todir="${build.classes}/org/argouml/persistence">
      <fileset dir="src/org/argouml/persistence" 
        includes="**/**"/>
    </copy>

    <copy todir="${build.classes}/org/argouml/profile/profiles">
      <fileset dir="src/org/argouml/profile/profiles"
          includes="*.xmi,README.txt"/>
    </copy>

    <!-- The class that uses argo.ini was deprecated for 0.25.4.  It can be 
         removed when that class is removed after the release of 0.26 -->
    <copy todir="${build.classes}/org/argouml">
      <fileset dir="src/org/argouml"
          includes="*argo.ini"/>
    </copy>

    <!-- copy test files -->
    <copy todir="${tests.classes}/testmodels">
      <fileset dir="tests/testmodels" includes="**/**"/>
    </copy>
  </target>

  <!-- =================================================================== -->
  <!-- Generates the parsers from the grammars by using Antlr              -->
  <!-- =================================================================== -->

  <target name="generateparser" depends="init"
          description="Generate the antlr parsers.">
    <echo message="Generate parsers"/>

    <uptodate property="parser1.is.current"
              targetfile="src/org/argouml/uml/reveng/java/JavaTokenTypes.txt">
      <srcfiles dir="src/org/argouml/uml/reveng/java">
        <include name="java.g"/>
      </srcfiles>
    </uptodate>
    <antcall target="generateparser1"/>

    <uptodate property="parser2.is.current"
              targetfile="src/org/argouml/language/java/generator/JavaTokenTypes.txt">
      <srcfiles dir="src/org/argouml/language/java/generator">
        <include name="java.g"/>
      </srcfiles>
    </uptodate>
    <antcall target="generateparser2"/>

  </target>

  <target name="generateparser1" unless="parser1.is.current" depends="init">
    <delete>
      <fileset dir="src/org/argouml/uml/reveng/java">
        <include name="JavaTokenTypes.txt"/>
      </fileset>
    </delete>
    <java classname="antlr.Tool"
          fork="yes"
          maxmemory="32M">
      <classpath>
        <path refid="antlr.run.classpath"/>
      </classpath>
      <arg value="-o"/>
      <arg file="src/org/argouml/uml/reveng/java"/>
      <arg file="src/org/argouml/uml/reveng/java/java.g"/>
    </java>
  </target>

  <target name="generateparser2" unless="parser2.is.current" depends="init">
    <delete>
      <fileset dir="src/org/argouml/language/java/generator">
        <include name="JavaTokenTypes.txt"/>
      </fileset>
    </delete>
    <java classname="antlr.Tool" 
          fork="yes"
          maxmemory="32M">
      <classpath>
        <path refid="antlr.run.classpath"/>
      </classpath>
      <arg value="-o"/>
      <arg file="src/org/argouml/language/java/generator"/>
      <arg file="src/org/argouml/language/java/generator/java.g"/>
    </java>
  </target>

  <target name="cleanparser"
          description="Clean up the antlr parsers.">
    <delete>
      <fileset dir="src/org/argouml/uml/reveng/java">
        <include name="JavaLexer.java"/>
        <include name="JavaRecognizer.java"/>
        <include name="JavaTokenTypes.java"/>
        <include name="JavaTokenTypes.txt"/>
      </fileset>
      <fileset dir="src/org/argouml/language/java/generator">
        <include name="JavaLexer.java"/>
        <include name="JavaRecognizer.java"/>
        <include name="JavaTokenTypes.java"/>
        <include name="JavaTokenTypes.txt"/>
      </fileset>
    </delete>
  </target>

  <!-- =================================================================== -->
  <!-- Updates the version source file if necessary                        -->
  <!-- =================================================================== -->
  <target name="check-version" depends="init">
    <uptodate property="version.is.current"
              targetfile="src/${version.package}/ArgoVersion.java">
      <srcfiles dir="src/templates">
        <include name="ArgoVersion.template"/>
      </srcfiles>
      <srcfiles dir="src">
        <include name="default.properties"/>
        <include name="build.properties"/>
      </srcfiles>
    </uptodate>
  </target>

  <target name="update-version" depends="check-version"
          unless="version.is.current">
    <echo message="Creating ArgoVersion.java for version ${argo.build.version}"/>
    <filter token="ARGO_RELEASE_VERSION" value="${argo.build.version}"/>
    <copy file="src/templates/ArgoVersion.template"
          filtering="on" 
          overwrite="on"
          tofile="src/${version.package}/ArgoVersion.java"/>
  </target>

  <!-- =================================================================== -->
  <!-- Compiles the source directory                                       -->
  <!-- =================================================================== -->
  <target name="compile"
      depends="prepare,update-version,generateparser"
      description="Compile the sources.">

    <echo message="Compiling the sources"/>

    <javac debug="${debug}" 
    	   deprecation="${deprecation}"
    	   destdir="${build.classes}"
    	   includes="org/argouml/**/*.java"
           excludes="org/argouml/model/uml/**"
    	   optimize="${optimize}"
    	   srcdir="src"
    	   source="1.5"
    	   target="1.5">
      <compilerarg compiler="javac1.5" line="-Xlint:unchecked"/>
      <classpath>
        <path refid="src.compile.classpath"/>
      </classpath>
    </javac>
  </target>

  <!-- =================================================================== -->
  <!-- Copies the complete set of jar files to the build directory.        -->
  <!-- =================================================================== -->
  <target name="jar" depends="compile"
          description="Build the main jar file.">
    <filter token="version" value="${argo.build.version}"/>
    <copy file="src/templates/manifest.template" filtering="on" 
          overwrite="on"
          tofile="${build.classes}/manifest.mf"/>
    <jar basedir="${build.classes}"
         excludes="*.txt,*.bat,*.xml,*.sh" 
         includes="org/argouml/**"
         manifest="${build.classes}/manifest.mf"
	 jarfile="${build.dir}/${name}.jar" />

    <copy todir="${build.dir}">
      <fileset dir="lib" includes="*.jar"/>
    </copy>

    <copy file="src/README.txt" tofile="${build.dir}/README.txt"/>
    <copy file="src/bin/argouml.sh" todir="${build.dir}"/>
    <copy file="src/bin/argouml.bat" todir="${build.dir}"/>
    <copy file="src/bin/ArgoUML.ico" todir="${build.dir}"/>
    <copy file="src/bin/ArgoUMLdoc.ico" todir="${build.dir}"/>

  </target>


  <!-- =================================================================== -->
  <!-- Clean targets                                                       -->
  <!-- =================================================================== -->
  <target name="clean" depends="init"
          description="Clean out all built files.">

    <delete dir="${build.dir}"/>
    <delete file="src/${version.package}/ArgoVersion.java"/>

    <antcall target="cleanparser"/>
  </target>



  <!-- ################################################################### -->
  <!-- Section with tests.                                                 -->
  <!-- ################################################################### -->


  <!-- =================================================================== -->
  <!-- Compiles the tests                                                  -->
  <!-- =================================================================== -->

  <target name="compile-tests" depends="prepare">

    <!-- create directories -->
    <mkdir dir="${tests.classes}"/>

    <!-- There are classes/test that actually test deprecated methods. -->
    <!-- They are listed here. -->
    <!-- We want debug, optimize, deprecation to be non-modifiable here -->
    <javac debug="true" 
           deprecation="false"
           optimize="false"
           destdir="${tests.classes}" 
           includes="**/GUITestProjectBrowser.java,**/MockUMLUserInterfaceContainer,**/*Deprecated.java"
           excludes="org/argouml/model/uml/**"
           srcdir="tests"
    	   source="1.5"
           target="1.5">
      <compilerarg compiler="javac1.5" line="-Xlint:unchecked"/>
      <classpath>
        <path refid="tests.compile.classpath"/>
      </classpath>
    </javac>

    <!-- We want debug, optimize, deprecation to be non-modifiable here -->
    <javac debug="true" 
           deprecation="${deprecation}"
           optimize="false" 
           destdir="${tests.classes}"
           srcdir="tests"
	   includes="org/argouml/uml/reveng/TestJavaImportUnicode.java"
           excludes="org/argouml/model/uml/**"
	   encoding="iso8859-1"
    	   source="1.5"
           target="1.5">
      <compilerarg compiler="javac1.5" line="-Xlint:unchecked"/>
      <classpath>
        <path refid="tests.compile.classpath"/>
      </classpath>
    </javac>

    <!-- We want debug, optimize, deprecation to be non-modifiable here -->
    <javac debug="true" 
           deprecation="${deprecation}"
           optimize="false" 
           destdir="${tests.classes}"
           srcdir="tests"
           excludes="org/argouml/model/uml/**"
    	   source="1.5"
           target="1.5">
      <compilerarg compiler="javac1.5" line="-Xlint:unchecked"/>
      <classpath>
        <path refid="tests.compile.classpath"/>
      </classpath>
    </javac>
  </target>

  <!-- =================================================================== -->
  <!-- Prepare for the junit tests.                                        -->
  <!-- =================================================================== -->
  <target name="junit-setup" depends="compile-tests"/>

  <target name="junit-report-clean">
    <mkdir dir="${tests.reports}"/>
    <mkdir dir="${tests.reports}/html"/>
    <delete>
      <fileset dir="${tests.reports}">
        <include name="TEST-*.xml"/>
        <include name="TEST-*.txt"/>
      </fileset>
    </delete>
  </target>

  <target name="junit-report-create">
    <junitreport todir="${tests.reports}">
      <fileset dir="${tests.reports}">
        <include name="TEST-*.xml"/>
      </fileset>
      <report format="frames" todir="${tests.reports}/html"/>
    </junitreport>

  </target>

  <!-- =================================================================== -->
  <!-- Run the junit tests.                                                -->
  <!-- =================================================================== -->
  <target name="tests"
          description="Run all tests that don't require any GUI components in headleass mode."
          depends="compile,junit-setup,junit-report-clean,
                   ant.optional.init">

    <junit errorproperty="junit.failure" failureproperty="junit.failure" 
           fork="yes" dir="${basedir}" forkmode="perTest"
           haltonfailure="false"
           maxmemory="48M" printsummary="${junit.printsummary}">
      <sysproperty key="test.model.uml" 
            value="../argouml-core-model-mdr/src/org/argouml/model/mdr/mof/01-02-15.xml"/>
      <sysproperty key="argouml.model.implementation" 
            value="${test.model.implementation}"/>
      <sysproperty key="log4j.configuration" value="org/argouml/resource/default.lcf"/>
      <sysproperty key="java.awt.headless" value="true"/>
      <sysproperty key="argouml.tests.dir" value="tests"/>
      <assertions>
        <enable/>
      </assertions>
      <classpath>
        <pathelement location="${build.classes}"/>
        <pathelement location="${tests.classes}"/>
        <path refid="tests.run.classpath"/>
      </classpath>
      <formatter type="xml"/>
      <batchtest todir="${tests.reports}">
        <fileset dir="tests">
          <include name="org/argouml/**/Test*.java"/>
        </fileset>
      </batchtest>
    </junit>

    <antcall target="junit-report-create"/>
  </target>

  <target name="tests-and-fail" depends="tests"
          description="Run tests and fail if any test failed.">
    <fail message="JUnit tests failed." if="junit.failure"/>
  </target>


  <!-- =================================================================== -->
  <!-- Run the junit tests, the ones that include GUI stuff.               -->
  <!-- =================================================================== -->
  <target name="guitests"
          depends="compile,junit-setup,junit-report-clean,
                   ant.optional.init"
          description="Run all tests that require the GUI components.">

    <junit errorproperty="junit.failure" failureproperty="junit.failure" 
           fork="yes" dir="${basedir}" forkmode="perTest"
           haltonfailure="false"
           maxmemory="160M" printsummary="${junit.printsummary}">
      <sysproperty key="log4j.configuration" value="org/argouml/resource/default.lcf"/>
      <sysproperty key="argouml.tests.dir" value="tests"/>
      <assertions>
        <enable/>
      </assertions>
      <classpath>
        <pathelement location="${build.classes}"/>
        <pathelement location="${tests.classes}"/>
        <path refid="tests.run.classpath"/>
      </classpath>
      <formatter type="xml"/>
      <batchtest todir="${tests.reports}">
        <fileset dir="tests">
          <include name="org/argouml/**/GUITest*.java"/>
        </fileset>
      </batchtest>
    </junit>
    <antcall target="junit-report-create"/>
    <fail message="JUnit tests failed." if="junit.failure"/>
  </target>


  <!-- =================================================================== -->
  <!-- Run the tests that test the command line stuff.                     -->
  <!-- These tests does not have error conditions to test against like the -->
  <!-- JUnit test cases. Instead, if they hang or exit with error they     -->
  <!-- have failed.                                                        -->
  <!-- =================================================================== -->
  <target name="clitests" depends="compile" 
          description="Run tests that test the command line stuff.">

    <!-- Don't do anything. -->
    <java classname="org.argouml.application.Main" 
          fork="yes">
      <assertions>
        <enable/>
      </assertions>
      <classpath>
        <pathelement location="${build.classes}"/>
        <path refid="src.run.classpath"/>
      </classpath>
      <arg value="-batch"/>
    </java>

    <!-- Exit. -->
    <java classname="org.argouml.application.Main" 
          fork="yes">
      <assertions>
        <enable/>
      </assertions>
      <classpath>
        <pathelement location="${build.classes}"/>
        <path refid="src.run.classpath"/>
      </classpath>
      <arg value="-nosplash"/>
      <arg value="-batch"/>
      <arg value="-command"/>
      <arg value="org.argouml.uml.ui.ActionExit"/>
    </java>

  </target>

  <!-- =================================================================== -->
  <!-- Run the both kind of tests.                                         -->
  <!-- =================================================================== -->
  <target name="alltests" depends="compile,junit-setup,tests,guitests"
          description="Run all tests, both with and without GUI."/>

  <!-- =================================================================== -->
  <!-- Start ArgoUML with JUnit test cases from ../tests.                  -->
  <!-- =================================================================== -->
  <target name="run-with-test-panel" 
          depends="compile,junit-setup"
          description="Start the TestRunner with all test cases from ../tests loaded.">
    <java classname="junit.swingui.TestRunner" fork="yes" taskname="argouml">
      <assertions>
        <enable/>
      </assertions>
      <classpath>
        <pathelement location="${build.dir}/argo_junit_tests.jar"/>
        <pathelement location="${tests.classes}"/>
        <pathelement location="${build.classes}"/>
        <pathelement location="${junit.jar.path}"/>
        <pathelement location="${easymock.jar.path}"/>
        <path refid="src.run.classpath"/>
      </classpath>
    </java>
  </target>

</project>
<!-- End of file -->
