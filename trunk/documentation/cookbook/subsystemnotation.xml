<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- $Id$ -->
<!--
// Copyright (c) 2005-2007 The Regents of the University of California. All
// Rights Reserved. Permission to use, copy, modify, and distribute this
// software and its documentation without fee, and without a written
// agreement is hereby granted, provided that the above copyright notice
// and this paragraph appear in all copies.  This software program and
// documentation are copyrighted by The Regents of the University of
// California. The software program and documentation are supplied "AS
// IS", without any accompanying services from The Regents. The Regents
// does not warrant that the operation of the program will be
// uninterrupted or error-free. The end-user understands that the program
// was developed for research purposes and is advised not to rely
// exclusively on the program for any reason.  IN NO EVENT SHALL THE
// UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR DIRECT, INDIRECT,
// SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING LOST PROFITS,
// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
// SUCH DAMAGE. THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY
// WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
// PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
// CALIFORNIA HAS NO OBLIGATIONS TO PROVIDE MAINTENANCE, SUPPORT,
// UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
-->

<sect1 id="notation">
  <title>Notation</title>
  <indexterm>
    <primary>Notation</primary>
  </indexterm>

  <para>
    Purpose - To handle generating, updating and editing 
    in different languages 
    of a textual representation 
    which represents 
    one or more UML modelelements.
    Such a notation element gets e.g. attached to 
    a diagram figure 
    or an explorer entry. 
  </para>
  
  <para>
    The notation subsystem is located in
    <classname>org.argouml.notation</classname>
    and its sub-folders.
  </para>

  <figure id="fig.notation.1" float="1">
    <title>Notation subsystem part 1.</title>

    <screenshot><mediaobject>
        <imageobject>
          <imagedata format="PNG" align="center"
                   fileref="images/cookbook/notation1.png"/>
        </imageobject>
      </mediaobject></screenshot>
  </figure>

  <para>
    In the scope of issue 3140, 
    the following has been decided about the notation architecture:
  </para>
  <para>
    We decide that we support other languages than UML 
    to show in diagrams, but this
    shall be a user-choice with project scope - 
    and we will never refine the scope
    to something more detailed. 
    Hence we need not store the notationlanguage per Fig.
    
    So, this means that you can set 
    the notation lanuage in the project properties,
    and in the application-wide defaults.
  </para>

  <para>
    The interface NotationProvider is at the center of the subsystem. 
    There is an object implementing the NotationProvider interface 
    per string (i.e. textual model representation) 
    that is shown on the diagram: 
    e.g. TransitionNotation, StateBodyNotation, ModelElementNameNotation. 
    A state will show the latter 2.
  </para>
  <para>
    This notation object would keep track of 
    which UML objects it represents, 
    generate and parse and provide a help text.
  </para>

  <para>
    The Fig refreshes the text by calling 
    the toString() method of the Notationprovider, 
    at initialisation time and
    whenever the model changes. 
    This latter works as follows:
    The notation object defines the set of model change events that 
    the Fig listens at. 
    Putting this task into this Notation class 
    (instead of the Fig) 
    has the advantage that 
    the knowledge to which uml objects to listen 
    is centralised where it is needed, 
    and not in the Fig.
    The Fig then receives a PropertyChangeEvent when the model changes.
    This causes the Notationprovider to update the set of listeners, and 
    the Fig refreshes the rendering of its string.
  </para>

  <figure id="fig.notation.2" float="1">
    <title>Notation subsystem part 2.</title>

    <screenshot><mediaobject>
        <imageobject>
          <imagedata format="PNG" align="center"
                   fileref="images/cookbook/notation2.png"/>
        </imageobject>
      </mediaobject></screenshot>
  </figure>

  <para>
    The NotationProvider objects 
    TransitionNotation, StateBodyNotation, etc. 
    are abstract, 
    since they are specialised in classes that implement them 
    for a certain language, i.e. one per language. 
    So, we will have: TransitionNotationUML, TransitionNotationJava, ... etc. 
  </para>

  <para>
    The NotationProviderFactory2 is a singleton, 
    since it is the accesspoint for all Figs to create 
    the textual representation of modelobjects, 
    and since plugin modules can add extra languages.
    Once/if ArgoUML would support multiple projects, 
    then we would need one NotationProviderFactory2
    per project, since its language may differ per project.
</para>

  <para>
    The NotationProviderFactory2 creates 
    a notation object 
    on request for any Fig,
    based on the current notation language 
    selected by the user for the current project.
    Hence, when the user changes the language 
    (in the menu),
    then it is the Fig's responsibility
    to listen to the NotationEvent 
    (hence the Fig shall implement 
    ArgoNotationEventListener),
    and ask the NotationProviderFactory2
    to create a new NotationProvider child.
  </para>

  <figure id="fig.notation.3" float="1">
    <title>Notation subsystem part 3.</title>

    <screenshot><mediaobject>
        <imageobject>
          <imagedata format="PNG" align="center"
                   fileref="images/cookbook/notation3.png"/>
        </imageobject>
      </mediaobject></screenshot>
  </figure>

</sect1>


<!-- Local stuff for Emacs - please do not delete

Local Variables:
mode: xml
sgml-doctype: "cookbook.xml"
sgml-parent-document: ("cookbook.xml" "sect1" nil)
sgml-validate-command: "nsgmls -wxml -sv ../docbook-setup/xml.dcl \
  cookbook.xml"
indent-tabs-mode: nil
End:

-->
