<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- $Id$ -->
<!--
// Copyright (c) 1996-2006 The Regents of the University of California. All
// Rights Reserved. Permission to use, copy, modify, and distribute this
// software and its documentation without fee, and without a written
// agreement is hereby granted, provided that the above copyright notice
// and this paragraph appear in all copies.  This software program and
// documentation are copyrighted by The Regents of the University of
// California. The software program and documentation are supplied "AS
// IS", without any accompanying services from The Regents. The Regents
// does not warrant that the operation of the program will be
// uninterrupted or error-free. The end-user understands that the program
// was developed for research purposes and is advised not to rely
// exclusively on the program for any reason.  IN NO EVENT SHALL THE
// UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR DIRECT, INDIRECT,
// SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING LOST PROFITS,
// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
// SUCH DAMAGE. THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY
// WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
// PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
// CALIFORNIA HAS NO OBLIGATIONS TO PROVIDE MAINTENANCE, SUPPORT,
// UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
-->

<chapter id="standards">
  <title>Standards for coding in ArgoUML</title>
  <indexterm>
    <primary>Coding Standards</primary>
  </indexterm>
  <indexterm>
    <primary>Standards</primary>
    <secondary>Coding</secondary>
  </indexterm>
  <sect1>
    <title>When Writing Java Code</title>

    <para>
The coding style for ArgoUML is based on the 
<ulink url="http://java.sun.com/docs/codeconv/html/CodeConvTOC.doc.html">
Code Conventions for the Java Programming Language
</ulink>.
We have the following exceptions and comments:
</para>
    <itemizedlist>
      <listitem>
        <para>
Each file starts with some header info:
file, 
version info, 
copyright notice.
Like this:
<programlisting>
// &dollar;Id&dollar;
// Copyright (c) 2006 The Regents of the University of California. All
// Rights Reserved. Permission to use, copy, modify, and distribute this
// software and its documentation without fee, and without a written
// agreement is hereby granted, provided that the above copyright notice
// and this paragraph appear in all copies.  This software program and
// documentation are copyrighted by The Regents of the University of
// California. The software program and documentation are supplied "AS
// IS", without any accompanying services from The Regents. The Regents
// does not warrant that the operation of the program will be
// uninterrupted or error-free. The end-user understands that the program
// was developed for research purposes and is advised not to rely
// exclusively on the program for any reason.  IN NO EVENT SHALL THE
// UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR DIRECT, INDIRECT,
// SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING LOST PROFITS,
// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
// SUCH DAMAGE. THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY
// WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
// PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
// CALIFORNIA HAS NO OBLIGATIONS TO PROVIDE MAINTENANCE, SUPPORT,
// UPDATES, ENHANCEMENTS, OR MODIFICATIONS.

package <replaceable>whatever</replaceable>;
<replaceable>...</replaceable>
</programlisting>
</para>
        <para>
The file and version is maintained by CVS using keyword substitution.
The year in the copyright notice is maintained manually.
</para>
        <para>
This differs from the Sun Code Conventions that 
requires the initial comment to be a C-style comment.
</para>
        <para>
This is checked by Checkstyle.
</para>
      </listitem>
      <listitem>
        <para>
All instance variables are private.
</para>
        <para>
This is not required by the Sun Code Conventions but
an additional requirement for ArgoUML.
</para>
        <para>
This is checked by Checkstyle.
</para>
      </listitem>
      <listitem>
        <para>
Use Javadoc for each class, instance variable, and method. 
In general do not put comments in the body of a method. 
If you are doing something complex enough to need a comment, consider
breaking it out into its own private commented method.
</para>
        <para>
This is not required by the Sun Code Conventions but
an additional requirement for ArgoUML.
</para>
        <para>
This is partly checked by Checkstyle.
Checkstyle does currently only warn if a Javadoc comment is omitted for
a public, protected or default visibility variable or method.
</para>
      </listitem>
      <listitem>
        <para>
Indicate places of future modifications with 
<programlisting>
// TODO: reason and explanation
</programlisting>
or if within a Javadoc or c-style comment
<programlisting>
* TODO: reason and explanation
</programlisting>
</para>
        <para>
This differs from the Sun Code Conventions that 
uses either XXX or FIXME depending on if it works or not.
</para>
      </listitem>
      <listitem>
        <para>
Four spaces should be used as the unit of indentation.
Tabs must be set exactly every 8 spaces (not 4) and represent 2 indents.
</para>
        <para>
This is exactly as it is stated in the Sun Code Conventions.
It is here just for the emphasis.
</para>
        <para>
This is checked by Checkstyle.
</para>
      </listitem>
      <listitem>
        <para>
If possible use lines shorter than 80 characters wide.
</para>
        <para>
This is exactly as it is stated in the Sun Code Conventions.
It is here just for the emphasis.
</para>
        <para>
This is checked by Checkstyle.
Checkstyle ignores three kinds of lines in this check because of the
historical use of long class names and package names.
These are lines that contain
"//&nbsp;&dollar;Id:<replaceable>whatever</replaceable>&dollar;",
import statements, and
Javadoc comments with @see-tags.
</para>
      </listitem>
      <listitem>
        <para>
Open brace on same line (at end).
Both for if/while/for and for class and functions definitions.
</para>
        <para>
This is exactly as it is stated in the Sun Code Conventions.
It is here just for the emphasis.
</para>
      </listitem>

      <listitem>
        <para>
Use deprecation when removing public and protected
classes, 
methods and
attributes.
</para>
        <para>
Whenever you have a public or protected method or attribute in a class or
a public class 
that you want to 
remove,
change the signature in an incompatible way, or 
make change visibility for
you shall always deprecate it first.
After the next stable release you (or someone else) can remove it.
</para>
        <para>
In the future, when the subsystems are well defined and it is clear
what public or protected 
methods, attributes or classes 
that are part of a certain subsystem's
exported interface 
we can allow an exception to this rule for 
methods, attributes and classes 
that are not.
(See <xref linkend="subsystems_relationships"></xref>.)
</para>
        <para>
Write deprecation statements like this:
<programlisting>
     * @deprecated by <replaceable>your name</replaceable> in <replaceable>the upcoming release</replaceable>. Use {@link <replaceable>whatever</replaceable>}
     *             <replaceable>a complete explanation on what to do instead</replaceable>
</programlisting>
</para>
        <para>
This is not checked by Checkstyle.
</para>
        <para>
Rationale:
This is part of the "Do Simple Things"-development approach that we
use in ArgoUML.
ArgoUML is a big project with lots of legacy code that we do not know
exactly how it works.
Deprecation shows the intent between decision to remove a method and
the point where it is actually removed 
and this without breaking anything of the old code.
There are also modules or plug ins that we might know nothing about that
could be loaded by some user to run within ArgoUML to add functionality.
It is for the modules and plug ins that we always save 
deprecated methods to the next stable release.
It makes it possible for the module developers to do work during the 
unstable releases and release at the same time as ArgoUML releases its
stable release.
</para>
      </listitem>

      <listitem>
        <para>
Don't use deprecated methods or classes.
</para>
        <para>
Rationale:
Deprecation is an indication that a class is to be removed.
We always want to build ArgoUML in a way that allows for future updates
of everything.
Using things that are on the way out already when doing the implementation
is for this reason not allowed.
</para>
        <para>
Rationale 2:
If you feel like you really want to use a method that is deprecated instead
of the replacement you should first convince the person responsible
for doing the deprecation that he has made a mistake and upgrade ArgoUML
to a version of that library without that method or class deprecated.
If it is within ArgoUML discuss it with the person who actually did 
the deprecation or in the development team.
</para>
        <para>
Comment:
There is an ongoing work (probably perpetually) to change
the calls to deprecated methods and classes that
has been deprecated after used in ArgoUML.
This is a normal part of improving ArgoUML.
If this work is too slow it makes it impossible to upgrade to new
versions of different sub-tools. 
This problem is seen by "the person responsible for sourcing of the sub-tool"
when actually trying to upgrade the sub-tool.
(See <xref linkend="issues_dependencies"></xref>.)
</para>
      </listitem>

      <listitem>
        <para>
Don't use very long package and class names.
</para>
        <para>
To make the code readable,
keep class names shorter than 25 chars, and
have at most four levels of packages.
</para>
        <para>
Historically in the ArgoUML design,
a deep package structure has been used.
There are several places in the code where the package structure is
mimicking the UML hierarchy of objects resulting in impossibly long
package names like
<classname>org.argouml.model.uml.behavioralelements.collaborations.<replaceable>class name</replaceable></classname>, and
<classname>org.argouml.uml.ui.behavior.common_behavior.<replaceable>class name</replaceable></classname>.
</para>
        <para>
While establishing the subsystems we use a two-level approach much
like the rest of the Java world.
For the subsystem API we always use:
<classname>org.argouml.<replaceable>subsystem package name</replaceable></classname>
i.e. the classes are in the subsystem's directory and all subsystems have
package names that is a single level below <classname>org.argouml</classname>.
If a subsystem is really complex or will be complex
w.r.t. the amount of classes (meaning more than 50 files with classes),
we create new packages with internal classes on a single level below
the subsystem package.
</para>
        <para>
This is the plan for the subsystems and new classes.
Don't move old classes just yet!
That would create more confusion that it would help.
</para>
      </listitem>

      <listitem>
        <para>
For everything else follow
<ulink url="http://java.sun.com/docs/codeconv/html/CodeConvTOC.doc.html">
Code Conventions for the Java Programming Language
</ulink>
(called Sun Code Conventions)!
</para>
      </listitem>

    </itemizedlist>

    <para>
Some of these rules are marked with a comment that they are 
checked by a Checkstyle.
Checkstyle is a tool available with the ArgoUML development environment
preconfigured for these rules.
The current configuration can be found in
<filename>argouml/tools/checkstyle/checkstyle_argouml.xml</filename>.
</para>
    <para>
To run Checkstyle run the command
<command>build checkstyle</command> from the
<filename class="directory">argouml/src_new</filename>
directory.
This requires you to have checked out the directories
<filename class="directory">argouml/tools</filename>,
<filename class="directory">argouml/tests</filename>, and
<filename class="directory">argouml/src_new</filename>.
</para>
    <para>
The last couple of Checkstyle result are also available in 
the Xenofarm result.
</para>
    <para>
Checkstyle will also check some of the rules from the
Sun Code Conventions that are not stated here.
Furthermore Checkstyle nags about when the order of modifiers does
not conform to the suggestions in the
Java Language Specification, Section 8.1.1, 8.3.1, 8.4.3.
</para>
  </sect1>

  <sect1 id="groundrules">
    <title>When Committing to the Repository</title>
    <indexterm>
      <primary>CVS</primary>
      <secondary>standards</secondary>
    </indexterm>
    <indexterm>
      <primary>SVN</primary>
      <secondary>standards</secondary>
    </indexterm>
    <indexterm>
      <primary>Repository Committing</primary>
    </indexterm>
    <indexterm>
      <primary>Committing to the Repository</primary>
    </indexterm>
    <indexterm>
      <primary>Standards</primary>
      <secondary>CVS</secondary>
    </indexterm>
    <para>
The CVS repository is a shared resource in the project.
This means that once you commit your stuff it has the potential
of getting in the way of everybody else's work in the project.
For this reason special considerations are needed.
This chapter describes the how you should do to limit the risk
of causing someone else problems.
</para>

    <para>
When you have done all the work, and all the testing and
are about to commit something please do:
      <orderedlist>
        <listitem>
          <para>
Compile ArgoUML 
(<command>build run</command> or <command>build package</command>).
</para>
          <para>
This goes for all changes, even changes in comments.
</para>
        </listitem>

        <listitem>
          <para>
If your changes include removing files make a clean compile.
(<command>build clean</command> followed by
<command>build run</command> or <command>build package</command>).
</para>
        </listitem>

        <listitem>
          <para>
If your changes include removing public or protected operations and
attributes make a clean compile
(<command>build clean</command> followed by
<command>build run</command> or <command>build package</command>).
</para>
          <para>
The build mechanism does not yet have reliable 
dependency checker enabled so this is the best way to make sure.
</para>
        </listitem>

        <listitem>
          <para>
If your changes include adding abstract operations make a clean compile
(<command>build clean</command> followed by
<command>build run</command> or <command>build package</command>).
</para>
          <para>
The build mechanism does not yet have reliable 
dependency checker enabled so this is the best way to make sure.
</para>
        </listitem>

        <listitem>
          <para>
If you have changed anything that has the potential of affecting
something in a totally different part of the code like internal
data structure, handling of exceptions, 
run all JUnit test cases
and start the tool and do some more testing.
</para>
          <para>
If in doubt, run all JUnit test cases.
</para>
        </listitem>

        <listitem>
          <para>
Do a <command>cvs update</command> in src_new to make sure that 
you do not forget to commit any file and to make sure that no one 
else has committed anything in the mean time.
</para>
          <para>
Remember that if you do not commit all the files from src_new
that <command>cvs update</command> found (marked A, R, and M)
in the same commit then you would better remove those file
from the checked out copy, update to get the original version
from the repository and start over with the compilation.
</para>
          <para>
If someone else have updated a file 
(<command>cvs update </command> shown U, or no longer pertinent)
please compile again.
</para>
        </listitem>

        <listitem>
          <para>
Commit all files that are included in a change at the same time.
</para>
          <para>
This reduces the chance of anyone getting an inconsistent set of files
by updating in the middle of your commit.
</para>
        </listitem>

        <listitem>
          <para>
Commit often.
</para>
          <para>
Remember that the repository is also a backup copy of your work.
</para>
          <para>
If your change is so big and involves so many files that you would
like to commit it for backup reasons but it doesn't compile or
doesn't work or for some other reason should not confuse the main 
branch in CVS, create a branch to work in.
Then when your work is complete, you merge the branch into 
the main branch.
</para>
        </listitem>
      </orderedlist>
</para>
    <para>
<emphasis>Rationale:</emphasis>
These ground rules is for the purpose of not stopping or hindering
the work for anyone.
Remember that there might be several developers working with
different agendas and different efficiency (slower or faster)
and the commits is the melting point of this.
</para>
    <para>
<emphasis>Perspective:</emphasis>
If this will take you an extra two minutes before every commit
remember that if you commit something that will not work this
will take everyone else (guess 10 persons) the extra time of
looking at the compilation error or see the tool crash (1 minute),
wonder why (1 minute),
search for the error in his own changes (3 minutes),
search for the error somewhere else (1 minute),
glance at the mailing list to see if someone else has noticed this 
and send a mail (1 minute),
wait for some response (1 hour wait),
update (1 minute),
compile (1 minute).
This amounts to 10 hours wait and 1.5 hours extra work for
all developers in the project.
</para>

    <para>
There are some general CVS tips in
<xref linkend="cvs"></xref>.
</para>
  </sect1>

  <sect1>
    <title>When Using Branches</title>
    <para>
We use the following standards in ArgoUML:
    </para>
    <itemizedlist>
      <listitem>
        <para>
Released versions get the tag
<emphasis>VERSION_<replaceable>X_X_X</replaceable></emphasis>.
</para>
      </listitem>
      <listitem>
        <para>
Freezed versions (just before the release) get the tag
<emphasis>VERSION_<replaceable>X_X_X</replaceable>_F</emphasis>.
</para>
      </listitem>
      <listitem>
        <para>
Release branches get the tag
<emphasis>BRANCH_<replaceable>X_X</replaceable></emphasis>.
</para>
      </listitem>
      <listitem>
        <para>
Developers working on code, with an unspecified due date are requested
to put the code into a branch if it is deemed useful that the code can
be shared. Developer branches follow the scheme:
<emphasis>work_<replaceable>explanation</replaceable>_<replaceable>owner</replaceable></emphasis>, where
</para>
        <itemizedlist>
          <listitem>
            <para>
<replaceable>explanation</replaceable> is something like
javahelp,
propertypanel,
cppcodegeneration,
issue12345
</para>
          </listitem>
          <listitem>
            <para>
<replaceable>owner</replaceable> is the uid for the
developer that started the branch,
e.g. tlach (Thierry Lach) or mkl (Markus Klink).
</para>
          </listitem>
        </itemizedlist>
      </listitem>
    </itemizedlist>

    <para>
Merging branches together is complex.
Please use branches sparingly and announce your intentions on the mailing list.
</para>

    <para>
There are some tips on how to work with branches in CVS in
<xref linkend="howdoi_cvs"></xref>.
</para>
  </sect1>


  <sect1>
    <title>When Working with the Build Process</title>
    <para>
For the <filename>build.xml</filename> files we use the following rules.
    </para>
    <itemizedlist>
      <listitem>
        <para>
Be careful when downloading stuff.
        </para>
        <para>
ArgoUML is supposed to be a self-contains development environment.
Some times it is better to have things downloaded from the ant script
instead of from the CVS repository.
In that case separate the download-targets from the target that does
building so that it is easy for everyone to know when their 
development machine is working against the Internet and when it is not.     
        </para>
      </listitem>

      <listitem>
        <para>
Public targets shall have description.
Non-public targets shall not have description 
(write xml comments or echos instead).
        </para>
      </listitem>

      <listitem>
        <para>
Use ant-built-ins for everything.
        </para>
        <para>
ArgoUML is supposed to be a self-contains development environment.
If you feel tempted to use other tools (perl, sed, nsgmls), don't!
They are probably not present in all environments where we want to
run a development environment.
        </para>
      </listitem>
    </itemizedlist>
  </sect1>

  <sect1>
    <sect1info>
      <author>
        <firstname>Linus</firstname>
        <surname>Tolke</surname>
      </author>
    </sect1info>
    <title>When Considering Dependencies</title>

    <para>
In the ArgoUML project we use several third-party libraries
to solve parts of the problem for us.
These libraries (referred to as dependencies below)
are an important part of the ArgoUML tool and
must be handled in a good way if ArgoUML is going to be successful.
</para>

    <para>
Here is the list of things to check in the dependency
and to discuss with yourself and maybe with the rest of the
ArgoUML development team
before considering to use it in the ArgoUML project.
</para>
    <itemizedlist>
      <listitem>
        <para>
License
</para>
        <para>
We must be allowed to
develop against,
release with,
distribute, and
use
the dependency indefinitely
without monetary or other compensation.
</para>
        <para>
Rationale: 
We have no money in the ArgoUML project,
we don't want to have money in the ArgoUML project.
We have no organization that can enter agreements and live up to them.
We don't want to require our users to enter agreements to use ArgoUML.
</para>
      </listitem>
      <listitem>
        <para>
Java version
</para>
        <para>
The dependency must have a policy that matches the ArgoUML project policy
on Java version requirements.
</para>
        <para>
Rationale: 
The ambition for ArgoUML is to be a working tool for
as many people as possible.
Java is still under development and there are nice features available in
future releases.
In ArgoUML we have a plan for how to handle this. It is to always support
two major releases of Java (currently JDK 1.4 and 1.5).
We cannot have a dependency that restricts us in this aspect.
</para>
      </listitem>
      <listitem>
        <para>
Distribution
</para>
        <para>
We require the dependency to make it possible for us to take the distribution,
enter it in our repository and write rules to automate
the use of the dependency while developing, releasing and running ArgoUML.
This automated use must be able to run without relying on access to some
server and without user intervention.
</para>
        <para>
The API documentation of the dependency (assumed to be Javadoc)
we can use from some web site belonging to that dependency.
</para>
        <para>
Rationale: 
In the ArgoUML project we want to make it as easy as possible for our users
to install ArgoUML.
We also want to make it as easy as possible for our developers to get their
development environment working and for the release manager to prepare
the releases.
</para>
      </listitem>
      <listitem>
        <para>
Road map
</para>
        <para>
The project developing the dependency must have a plan that fits
the ArgoUML plan for the future.
</para>
        <para>
Rationale: 
If a dependency will soon go somewhere else
i.e. stop doing what we require or stop supporting what we require,
then we will soon have troubles with that dependency.
</para>
      </listitem>
      <listitem>
        <para>
Working project
</para>
        <para>
The project that develops the dependency should be a working project.
Check that there is some person responsible for it,
preferably with a team or organization backing him.
Check that there is a plan for upcoming releases.
Check that there is a way to report bugs and enhancement requests.
</para>
        <para>
Rationale:
We don't want to rely on a dependency where there is no chance of ever
getting a bug that we encounter fixed.
We are also part of an ever-evolving world.
Soon we want the tool to do more for us.
We should then be able to wish that and eventually get that included.
</para>
      </listitem>
    </itemizedlist>
    <para>
Notice that we should not and don't need to do this in a passive way.
We should explain to the dependency team what we want and why.
Especially for dependency that we have already in ArgoUML but also
for dependencies that we consider taking in.
This is to increase the likelihood that they will have us in mind when
planning and evolving.
</para>
    <para>
Here are the steps to go through and the recommended order
once the decision is taken to use the dependency in ArgoUML:
</para>
    <itemizedlist>
      <listitem>
        <para>
Documentation
</para>
        <para>
Describe in the Cookbook in the appropriate subsystem section
in <xref linkend="inside_subsystems"/>
what part of the problem that the dependency solves and
how it is used in ArgoUML.
</para>
      </listitem>
      <listitem>
        <para>
Javadoc
</para>
        <para>
Enter the package list file in a special directory under
<filename class="directory">argouml/lib/javadocs</filename>.
Update the list of links used when building the Javadoc.
One place in <filename>default.properties</filename>,
One or two places in <filename>build.xml</filename>
(targets javadocs and javadocs-api).
</para>
        <para>
Test by referencing some class from the dependency,
building the Javadoc, and
check that the link is working.
</para>
      </listitem>
      <listitem>
        <para>
Repository
</para>
        <para>
Assuming that the dependency is distributed in a set of jar files,
add the jar files to the <filename class="directory">lib</filename> directory
in a versioned way together with the license file.
Use filenames like:
<filename><replaceable>dependency</replaceable>-<replaceable>version</replaceable>.jar</filename>, and
<filename><replaceable>dependency</replaceable>.LICENSE.txt</filename>.
</para>
        <para>
The plan is to have each subsystem in their own directory.
If the dependency in question belongs to a subsystem that is moved to a
separate directory you should put it in
the <filename class="directory">lib</filename> directory for that subsystem.
See how the model-mdr dependencies are handled.
</para>
      </listitem>
      <listitem>
        <para>
Building
</para>
        <para>
Assuming that the dependency is distributed in a set of jar files,
add the jar files to the list of files that are to be included
when building ArgoUML.
One place in <filename>default.properties</filename>,
Four places in <filename>build.xml</filename>
(targets init (tree places),
prerequisites,
package (two places),
new target check.<replaceable>dependency</replaceable>), and
One possibly place in <filename>AboutBox.java</filename> (Constructor).
Notice especially that <filename>build.xml</filename> shall not contain
any version information.
Notice also that the text in <filename>AboutBox.java</filename>
shall not contain anything that needs to be localized but just
the dependency name, reference and possibly version.
</para>
        <para>
Check by having some class from the dependency loaded immediately
when starting ArgoUML and start using
<command>build run</command>.
</para>
      </listitem>

      <listitem>
        <para>
Distribution
</para>
        <para>
Assuming that the dependency is distributed in a set of jar files,
add the jar files to the list of files that are to be included
when releasing ArgoUML.
One place in <filename>manifest.template</filename> (Class-Path),
In the Java Web Start files (resources),
In the <filename>Info.plist</filename> (Class-Path).
</para>
        <para>
Check by having some class from the dependency loaded immediately
when starting ArgoUML and start with
<command>java -jar argouml.jar</command>,
using each of the Java Web Start files, and
from the Appbund (on a Mac).
</para>
      </listitem>
    </itemizedlist>

    <para>
See <xref linkend="issues_dependencies"></xref> for a discussion on 
how to handle bugs found in dependency and
updates of the version of a dependency.
</para>
  </sect1>

  <sect1>
    <sect1info>
      <author>
        <firstname>Linus</firstname>
        <surname>Tolke</surname>
      </author>
    </sect1info>
    <title>Settings for NetBeans</title>
    <para>
These style guides correspond to the following settings in NetBeans:
    </para>
    <itemizedlist>
      <listitem>
        <para>
In (Tools =>) Options => Editing => Editor Settings => Java Editor
        </para>
        <para>
Tab Size = 8
        </para>
      </listitem>
      <listitem>
        <para>
In (Tools =>) Options => Editing => 
Indentation Engines => Java Indentation Engine
        </para>
        <para>
Add Newline Before Brace: False,
Add Space Before Parenthesis: False,
Expand Tabs to Spaces: False,
Number of Spaces per Tab: 4 (Should probably be read as
Number of Spaces per indentation level).
        </para>
      </listitem>
    </itemizedlist>
  </sect1>

  <sect1>
    <sect1info>
      <author>
        <firstname>Linus</firstname>
        <surname>Tolke</surname>
      </author>
    </sect1info>
    <title>Settings for Emacs</title>
    <para>
These style guides correspond to the default Java settings in Emacs:
<programlisting>
 ("java"
  (c-basic-offset . 4)
  (c-comment-only-line-offset 0 . 0)
  (c-offsets-alist
   (inline-open . 0)
   (topmost-intro-cont . +)
   (statement-block-intro . +)
   (knr-argdecl-intro . 5)
   (substatement-open . +)
   (label . +)
   (statement-case-open . +)
   (statement-cont . +)
   (arglist-intro . c-lineup-arglist-intro-after-paren)
   (arglist-close . c-lineup-arglist)
   (access-label . 0)
   (inher-cont . c-lineup-java-inher)
   (func-decl-cont . c-lineup-java-throws)))
</programlisting>
    </para>
  </sect1>

  <sect1 id="eclipse3">
    <sect1info>
      <author>
        <firstname>Linus</firstname>
        <surname>Tolke</surname>
      </author>
    </sect1info>
    <title>Setting up Eclipse 3</title>
    <indexterm>
      <primary>Setting up Eclipse</primary>
    </indexterm>
    <indexterm>
      <primary>Eclipse</primary>
      <secondary>Setting up the development environment</secondary>
    </indexterm>

    <para>
If you are running Eclipse 3.1 or 3.2
we have a prepared and recommended setup
committed into our repository.
The prepared setup includes settings for Checkstyle within Eclipse that
will be enabled if you have the Checkclipse Eclipse plugin installed.
</para>
    <para>
You need to have Subclipse installed in your Eclipse to retrieve
the files from the repository.
See <ulink url="http://subclipse.tigris.org/install.html"/>.
</para>
    <para>
If any of these instructions don't work or could be improved in some way,
please help in making them better by contacting the editor of the Cookbook.
</para>

    <sect2 id="eclipse-checkout">
      <title>Checking out through Eclipse</title>
      <para>
This instruction is if you want to use Eclipse to download the source
and it takes you up to where you can start ArgoUML from the source.
</para>

      <para>
We have Team Project Set files prepared to make the set up automatic.
</para>

      <para>
Do the following.
</para>

      <orderedlist>
        <listitem>
          <para>
Change to the SVN Repository Explorer perspective and select 
Add SVN Repository.
Then enter the following url
<command>http://argouml.tigris.org/svn/argouml</command>.
</para>
        </listitem>

        <listitem>
          <para>
Download the initial Team Project Set file and save it somewhere.
</para>
          <para>
Suggested by browsing to
<filename>trunk/tools/eclipse</filename>
and checking it out as a project.
</para>
          <para>
This is only needed the first time and if you don't already 
happen to have an updated checked out copy of argouml laying around.
</para>
        </listitem>

        <listitem>
          <para>
Do File => Import and select Team Project Set and press Next.
</para>
        </listitem>

        <listitem>
          <para>
Browse to the file
<filename>argouml-core-projectset.psf</filename>
and press Finish.
</para>

          <para>
Now everything is automatic even though it takes a while. What happens is:
</para>
          <orderedlist>
            <listitem>
              <para>
Files are downloaded from the Tigris SVN server and put into Eclipse
projects.
</para>
              <para>
It is around 30Meg that is downloaded so beware if you are on a slow
connection.
</para>
            </listitem>
            <listitem>
              <para>
The projects are built.
First things that are special for ArgoUML, generated Java code,
are created by Eclipse calling ant,
then Eclipse kicks in and compiles the Java code.
</para>
            </listitem>
            <listitem>
              <para>
Eclipse finds the Configurations that are also checked out.
</para>
            </listitem>
          </orderedlist>
        </listitem>

        <listitem>
          <para>
Verify that you can start ArgoUML from the debugger within Eclipse. 
You can do this by clicking on the little down-arrow close to the
Debug icon in the tool bar,
selecting Debug...,
and finding ArgoUML in the list (under Java Application).
</para>
        </listitem>

      </orderedlist>
    </sect2>

    <sect2>
      <title>Eclipse to help with the ArgoUML coding style</title>
      <para>
This instruction is to set up Eclipse to work according to
the ArgoUML Coding standards.
If this is not done correctly you will most likely find that you will have to
do a lot of manual edits every time Eclipse has
touched the code.
You have your tool working against you instead of for you.
</para>
      <para>
The instructions here are for these settings to affect your Eclipse Workspace.
If you have other projects in
the same Eclipse Workspace you would probably want this for
only the ArgoUML projects and that is possible although not explained here.
We suggest you to consider having ArgoUML work in an
Eclipse Workspace separate from your other projects.
</para>

      <itemizedlist>
        <listitem>
          <para>
Code conventions.
</para>
          <orderedlist>
            <listitem>
              <para>
Select in the menu Window => Preferences. 
</para>
            </listitem>
            <listitem>
              <para>
Then select Java => Code Style => Formatter.
</para>
            </listitem>
            <listitem>
              <para>
For Eclipse 3.2 you do:
Select Java Conventions [built-in].
</para>
            </listitem>
            <listitem>
              <para>
For Eclipse 3.1 you do:
Select Import and give the file
<filename>eclipse/eclipse-argo-formatter.xml</filename>
located in the argouml-core-tools project that you just checked out.
</para>
              <para>
This takes care of the Eclipse-built-in bug
(<ulink url="https://bugs.eclipse.org/bugs/show_bug.cgi?id=104765"/>).
</para>
            </listitem>
            <listitem>
              <para>
Press OK.
</para>
            </listitem>
          </orderedlist>

          <para>
This will give you Code Conventions exactly like the Sun Coding Style
that we use in the ArgoUML project.
</para>
        </listitem>

        <listitem>
          <para>
New file templates.
</para>

          <orderedlist>
            <listitem>
              <para>
Select in the menu Window => Preferences. 
</para>
            </listitem>
            <listitem>
              <para>
Then select Java => Code Style => Code Templates.
</para>
            </listitem>
            <listitem>
              <para>
Select Import and give the file
<filename>eclipse/eclipse-argo-codetemplates.xml</filename>
located in the argouml-core-tools project that you just checked out.
</para>
            </listitem>
            <listitem>
              <para>
Press OK.
</para>
            </listitem>
          </orderedlist>

          <para>
This will set up templates to be used when using the Eclipse functions
for creating files, functions, types and javadoc...
</para>

        </listitem>
      </itemizedlist>
    </sect2>

    <sect2>
      <title>Eclipse to automatically find problems in the code</title>
      <para>
This instruction is to set up Eclipse to automatically find 
what, in the ArgoUML project, could be considered problems in the code.
</para>
      <para>
You can apply these individually depending on what level of help you need
in your coding.
I (Linus Tolke) recommend that you set them all on the Warning level.
This makes them visible for you.
You can then decide to fix them or not depending on how you feel about
the code you are working with.
</para>
      <para>
The instructions on where to find the different settings are for Eclipse 3.2.
If you use Eclipse 3.1 you might need to search through the tabs to find
where the setting is since they were reorganized for Eclipse 3.2.
</para>
      <itemizedlist>
        <listitem>
          <para>
Compiler compliance level.
</para>
          <para>
      See in the menu Window => Preferences.
      Then select
      Java => Compiler.
At the right hand side set
Compiler compliance level: 1.4.
</para>
          <para>
Uncheck Use default complicance settings and set
Generated .class file compatibility: 1.4,
Source compatibility: 1.4,
and Disallow identifiers called enum to Error.
</para>
          <para>
In the ArgoUML project we have decided to keep source compliance to JDK 1.4.
(See <xref linkend="REQ7"/>).
This setting enables Eclipse to tell you where some
JDK 1.5
features have crept in.
At the same time we don't want to introduce identifiers that are in conflict
with Java5.
</para>
        </listitem>

        <listitem>
          <para>
Find forgotten and incorrect Javadoc comments.
</para>
          <para>
In the menu select Window => Preferences.
Then select
Java => Compiler => Javadoc.
Suggested settings for these tabs
(Only things diverting from the Eclipse defaults are listed):
</para>
          <itemizedlist>
            <listitem>
              <para>
Javadoc => Malformed javadoc comments:
Warning,
Private,
Check all reports.
</para>
            </listitem>
            <listitem>
              <para>
Javadoc => Missing javadoc tags: Warning, Private,
check Check overriding and implementing methods.
</para>
            </listitem>
            <listitem>
              <para>
Javadoc => Missing javadoc comments: Warning, Protected,
Check overriding and implementing methods.
</para>
            </listitem>
          </itemizedlist>
          <para>
These problems are also found by Checkstyle so if you are
running Checkclipse (See <xref linkend="checkclipse"/>)
put this in Ignore instead.
</para>
        </listitem>

        <listitem>
          <para>
Code that hides other code.
</para>
          <para>
In the menu select Window => Preferences.
Then select
Java => Compiler => Error/Warnings.
Suggested settings for these tabs
(Only things diverting from the Eclipse defaults are listed):
</para>
          <itemizedlist>
            <listitem>
              <para>
Potential programming problems => Serializable class without serialVersionUID:
Ignore
</para>
              <para>
We don't use serialization in the ArgoUML project anyway.
</para>
            </listitem>
            <listitem>
              <para>
Potential programming problems =>
Possible accidental boolean assignment: Warning.
</para>
            </listitem>
            <listitem>
              <para>
Name shadowing and conflicts =>
Local variable declaration hides another field or variable: Warning,
check Include constructor or setter method parameters.
</para>
            </listitem>
            <listitem>
              <para>
Name shadowing and conflicts =>
Field declaration hides another field or variable: Warning.
</para>
            </listitem>
          </itemizedlist>
        </listitem>
        <listitem>
          <para>
Find Code that shall be removed.
</para>
          <para>
In the menu select Window => Preferences.
Then select
Java => Compiler => Error/Warnings.
Suggested settings for these tabs
(Only things diverting from the Eclipse defaults are listed):
</para>
          <itemizedlist>
            <listitem>
              <para>
Unnecessary code => Local variable is never read: Warning.
</para>
            </listitem>
            <listitem>
              <para>
Unnecessary code => Parameter is never read: Warning.
</para>
            </listitem>
            <listitem>
              <para>
Unnecessary code => Unused or unread private members: Warning.
</para>
            </listitem>
            <listitem>
              <para>
Unnecessary code => Unnecessary semicolon: Warning.
</para>
            </listitem>
            <listitem>
              <para>
Unnecessary code => Unnecessary cast or 'instanceof' operation: Warning.
</para>
            </listitem>
            <listitem>
              <para>
Unnecessary code =>
Unnecessary declaration of thrown checked exception: Warning.
</para>
            </listitem>
          </itemizedlist>
        </listitem>

      </itemizedlist>
    </sect2>

    <sect2 id="checkclipse">
      <title>Settings for Checkclipse</title>
      <para>
Checkclipse is a plug in for Eclipse which needs to be installed separately.
It enables style checking according the rules set for the ArgoUML project.
</para>
      <para>Get the latest Checkclipse kit from SourceForge at
              <ulink url="http://sourceforge.net/projects/checkclipse"/> 
      and install it by unzipping into your Eclipse plug-ins directory and
      restarting Eclipse.  (Checkstyle is bundled with Checkclipse so it's
      not necessary to install it separately, but the web site is 
              <ulink url="http://checkstyle.sourceforge.net/"/> 
     for reference.)
      </para>
      <para>
      In the Java perspective, select the project argouml, 
      i.e. the icon at the top of the Package Explorer.
      Then, in the menu, select Project => Properties,
select Checkclipse (appears only if Checkclipse is correctly installed)
and then fill the fields like this:
</para>
      <itemizedlist>
        <listitem>
          <para>Enable Checkstyle - 
Checked.
</para>
        </listitem>
        <listitem>
          <para>Checkstyle Configuration File: 
<filename>tools/checkstyle/checkstyle_argouml.xml</filename>
in the argouml-core-tools project.
</para>
        </listitem>
        <listitem>
          <para>Checkstyle Properties File: 
<filename>tools/checkstyle/checkstyle.properties</filename>
in the argouml-core-tools project.
</para>
        </listitem>
        <listitem>
          <para>File Filter Definition: 
<filename>tools/checkstyle/checkclipse.filefilters</filename>
in the argouml-core-tools project.
</para>
        </listitem>
      </itemizedlist>
      <para>
Leave the two other fields empty.
</para>
    </sect2>

    <sect2 id="eclipse-running-junit">
      <title>Running JUnit test cases from within Eclipse</title>
      <para>
Most of the JUnit test cases belong to the argouml-core-tests Eclipse project.
The argouml-core-tests Eclipse project has its compile time dependencies
set up to include the things needed to compile the test cases.
This means that it is possible to compile the test cases and
nobody will create tests that uses the insides of some subsystem that
is supposed to be hidden.
</para>
      <para>
The Model subsystem is separated in two parts:
        <itemizedlist>
          <listitem>
            <para>
The interfaces and some bootstrap code
in the argouml-core-model Eclipse project.
</para>
          </listitem>
          <listitem>
            <para>
The MDR implementation in the argouml-core-model-mdr Eclipse project.
</para>
          </listitem>
        </itemizedlist>
There is also for test purposes a partly implemented
Mock implementation of the model subsystem in the 
<classname>org.argouml.model.MockModelImplementation</classname>-class
for the purpose of testing the interfaces and the bootstrap code 
but it requires the test cases to be written especially for that.
</para>
      <para>
The tests are never to be compiled against the MDR-implementation but
against the interfaces.
This means that the MDR-implementation is not included in the project
dependencies.
</para>
      <para>
When it comes to running the tests,
most of the tests require the Model subsystem working to succeed.
To run the application with a working Model subsystem, a working
implementation is needed so the tests require the MDR-implementation.
</para>
      <para>
The simplest way to solve this is to:
        <orderedlist>
          <listitem>
            <para>
Create the test (by right-clicking on any of the test classes
and select Run as JUnit Test or Debug as JUnit Test).
</para>
            <para>
The test fails with a
<exceptionname>java.lang.ExceptionInInitializerError</exceptionname>
on the first reference to Model.
If it doesn't then the perhaps the test case doesn't use the Model.
</para>
          </listitem>

          <listitem>
            <para>
Select Debug... or Run... to get the configuration editing box.
It has remembered the test case and it is selected.
</para>
          </listitem>

          <listitem>
            <para>
Add the argouml-core-model-mdr to the classpath.
</para>

            <para>
Classpath tab,
Select User Entries,
Add Projects,
Check argouml-core-model-mdr,
make sure 
Add exported entries of selected projects
and
Add required projects of selected projects are checked,
Press OK,
Press Debug or Run.
Eclipse will remember these changes to that configuration
but you will have to do it all over again once for each new test case.
</para>
          </listitem>
        </orderedlist>
</para>

      <sect3 id="running-all-junit-from-within-eclipse">
        <title>Running all JUnit test cases from within Eclipse</title>
        <para>
The description so far describes how to do this for a single test case
at the time.
If you want to run all test cases in one go from within Eclipse
it is also possible.
We have not prepared that for three reasons:
          <itemizedlist>
            <listitem>
              <para>
Some of the tests fail when run in this way.
</para>
              <para>
The guess (Linus July 2006) is that this depends on the fact that
Eclipse doesn't start each test in its own JVM and some of the tests
relies on a fresh environment (empty models...).
Let's hope that an upcoming version of Eclipse includes a function
to allow us to specify that the tests are to be run each in its own JVM.
</para>

              <para>
Another cause might be that the tests relies on certain other files being
in specified places and that the Eclipse set up doesn't provide that.
</para>
            </listitem>

            <listitem>
              <para>
Maintaining the Configuration.
</para>
              <para>
Since we have an Eclipse setup with a mismatch between the 
compile time dependenies and the run time dependencies
this Configuration contains references to specific jar-files.
This means a maintenance problem whenever changing version of
a dependency.
</para>
            </listitem>

            <listitem>
              <para>
Selection of tests.
</para>
              <para>
In the project we keep all tests in the same tree, 
whether they are working or not.
We distinguish between test classes with names starting with "Test", "GUITest",
and neither of them.
The ones starting with "Test" or "GUITest" are official tests
that should be working.
All others are tests that are never run automatically.
They are perhaps used for other purposes.
In Eclipse, there is no way to specify this so the description below
will run all tests.
</para>
              <para>
Such a test is the DoAllTests-test suite that runs all tests so
tests risk to be run twice.
</para>
            </listitem>
          </itemizedlist>
</para>
        <para>
If you want to test this, this is what you do:
</para>

        <itemizedlist>
          <listitem>
            <para>
Right-click on the project argouml-core-tests.
</para>
          </listitem>

          <listitem>
            <para>
On the multilevel popup that opens, select
Run As... JUnit Test or
Debug As... JUnit Test.
</para>
          </listitem>
          <listitem>
            <para>
A Configuration is created on that project with the
Run all tests in the selected project, package or source folder:
checked
and the configuration is started/launched.
</para>
          </listitem>

          <listitem>
            <para>
Stop the running Configuration.
</para>
            <para>
The newly Configuration has the same problem as every single
test above with the model subsystem so it won't work.
</para>
          </listitem>

          <listitem>
            <para>
Press Debug... or Run... to open the Configuration editor.
</para>
            <para>
The newly created Configuration argouml-core-test is selected.
</para>
          </listitem>
          <listitem>
            <para>
Add the argouml-core-model-mdr project to the classpath.
</para>
            <para>
This is done by:
              <itemizedlist>
                <listitem>
                  <para>selecting the Classpath tab,</para>
                </listitem>

                <listitem>
                  <para>selecting argouml-core-tests under User Entries,</para>
                </listitem>

                <listitem>
                  <para>clicking Add projects, and</para>
                </listitem>

                <listitem>
                  <para>
selecting the argouml-core-model-mdr project and press OK.
</para>
                </listitem>
              </itemizedlist>
</para>
          </listitem>

          <listitem>
            <para>
Run all the tests by pressing Debug or Run.
</para>
          </listitem>
        </itemizedlist>
      </sect3>
    </sect2>
  </sect1>

</chapter>



<!-- Local stuff for Emacs - please do not delete

Local Variables:
mode: xml
sgml-doctype: "cookbook.xml"
sgml-parent-document: ("cookbook.xml" "chapter" nil)
sgml-validate-command: "nsgmls -wxml -sv ../docbook-setup/xml.dcl \
  cookbook.xml"
indent-tabs-mode: nil
End:

-->
