<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- $Id$ -->

<chapter id="standards">
  <title>Standards for coding in ArgoUML</title>
  <indexterm>
    <primary>Coding Standards</primary>
  </indexterm>
  <indexterm>
    <primary>Standards</primary>
    <secondary>Coding</secondary>
  </indexterm>
  <sect1>
    <title>Rules for writing Java code</title>

    <para>
The coding style for ArgoUML is the following
</para>
    <itemizedlist>
      <listitem>
        <para>
Each file starts with some header info: 
file, 
version info, 
copyright notice,
classes in this file (if more than one),
original author (if you want).
Like this:
<programlisting>
// &dollar;Id&dollar;
// Copyright (c) 2003 The Regents of the University of California. All
// ...

// Classes: blabla, blabla (all classes of interest in this file)
// Original Author: who ever
</programlisting>
        </para>
      </listitem>
      <listitem>
        <para>
All instance variables are private and their names begin with an underscore.
If the variable should be accessible then add public or protected
accessor methods with the same name as the variable without the
underscore with "get" or "set" prepended.
For example:
<varname>_lineWidth</varname>, 
<methodname>setLineWidth()</methodname>, and 
<methodname>getLineWidth()</methodname>.
</para>
      </listitem>
      <listitem>
        <para>
In general, write short code.
If a method will fit comfortably on one line, then put it on one line.
</para>
      </listitem>
      <listitem>
        <para>
Use javadoc for each class, instance variable, and method. 
In general do not put comments in the body of a method. 
If you are doing something complex enough to need a comment, consider
breaking it out into its own private commented method.
</para>
      </listitem>
      <listitem>
        <para>
Indicate places of future modifications with 
<programlisting>
// TODO: reason
</programlisting>
        </para>
      </listitem>
      <listitem>
        <para>
Name all classes with an initial uppercase letter, and all variables
and methods with a lowercase one. 
I use the <varname>allTogetherWithCaps</varname> naming style.
Name static variables with an underscore and an inital capital letter,
e.g., <varname>_PossibleLanguages</varname>.
Name constants with all upper case and underscores, e.g., 
<constant>GRIP_MARGIN</constant>.
</para>
      </listitem>
      <listitem>
        <para>
To emphasize clusters of classes we are using what we call the binomial
naming style (I am sure others have thought of this also): 
The root class of the cluster has a short name (e.g., Layer), 
other members of the cluster use that name as a prefix (e.g., LayerGrid).
This makes many of the class name longer than they might be normally (e.g., Grid would be shorter).
But this provides a lot of context without
having to look at a class inheritance diagram.
It is also very nice when you have to look at an alphabetical list
of classes. I try to name class clusters so that they are not lexigraphically close others (e.g., the Net cluster
used to be named Model, but that lexigraphically overlapped the Mode cluster).
</para>
      </listitem>
      <listitem>
        <para>
Four spaces should be used as the unit of indentation.
Tabs must be set exactly every 8 spaces (not 4) and represent 2 indents.
</para>
        <para>
This is exactly as it is stated in the Sun Code Conventions.
It is here just for the emphasis.
</para>
      </listitem>
      <listitem>
        <para>
If possible use lines shorter than 80 characters wide.
</para>
        <para>
This is exactly as it is stated in the Sun Code Conventions.
It is here just for the emphasis.
</para>
      </listitem>
      <listitem>
        <para>
Open brace on same line (at end).
Both for if/while/for and for class and functions definitions.
</para>
        <para>
This is exactly as it is stated in the Sun Code Conventions.
It is here just for the emphasis.
</para>
      </listitem>

      <listitem>
        <para>
Use deprecation when removing public methods.
</para>
        <para>
Whenever you have a public method in a class or a public class 
that you want to 
remove,
change the signature in an incompatible way, or 
make change visibility for
you shall always deprecate it first.
After the next stable release you (or someone else) can remove 
that method.
</para>
        <para>
In the future, when the components are well defined and it is clear
what public methods and classes that are part of a certain component's
exported interface 
we can allow an exception to this rule for public methods and classes 
that are not.
(See <xref linkend="components_relationships"></xref>.)
</para>
        <para>
Rationale:
This is part of the "Do Simple Things"-development approach that we
use in ArgoUML.
ArgoUML is a big project with lots of legacy code that we do not know
exactly how it works.
Deprecation shows the intent between decision to remove a method and
the point where it is actually removed 
and this without breaking anything of the old code.
There are also modules or plugins that we might know nothing about that
could be loaded by some user to run within ArgoUML to add functionality.
It is for the modules and plugins that we always save 
deprecated methods to the next stable release.
It makes it possible for the module developers to do work during the 
unstable releases and release at the same time as ArgoUML releases its
stable release.
</para>
      </listitem>

      <listitem>
        <para>
Don't use deprecated methods or classes.
</para>
        <para>
Rationale:
Deprecation is an indication that a class is to be removed.
We always want to build ArgoUML in a way that allows for future updates
of everything.
Using things that are on the way out already when doing the implementation
is for this reason not allowed.
</para>
        <para>
Rationale 2:
If you feel like you really want to use a method that is deprecated instead
of the replacement you should first convince the person responsible
for doing the deprecation that he has made a misstake and upgrade ArgoUML
to a version of that library without that method or class deprecated.
If it is within ArgoUML discuss it with the person who actually did 
the deprecation or in the development team.
</para>
        <para>
Comment:
There is an ongoing work (probably perpetually) to change
the calls to deprecated methods and classes that
has been deprecated after used in ArgoUML.
This is a normal part of improving ArgoUML.
If this work is too slow it makes it impossible to upgrade to new
versions of different subtools. 
This problem is seen by "the person responsible for sourceing of the subtool"
when actually trying to upgrade the subtool.
(See <xref linkend="issues_subproducts"></xref>.)
</para>
      </listitem>

      <listitem>
        <para>
For everything else follow
<ulink url="http://java.sun.com/docs/codeconv/html/CodeConvTOC.doc.html">
Code Conventions for the Java Programming Language
</ulink>!
</para>
      </listitem>

    </itemizedlist>
  </sect1>

  <sect1>
    <title>Rules for the building process</title>
    <para>
For the <filename>build.xml</filename> files we use the following rules.
    </para>
    <itemizedlist>
      <listitem>
        <para>
Be careful when downloading stuff.
        </para>
        <para>
ArgoUML is supposed to be a self-contains development environment.
Some times it is better to have things downloaded from the ant script
instead of from the cvs repository.
In that case separate the download-targets from the target that does
building so that it is easy for everyone to know when their 
development machine is working against the internet and when it is not.     
        </para>
      </listitem>

      <listitem>
        <para>
Public targets shall have description.
Non-public targets shall not have description 
(write xml comments or echos instead).
        </para>
      </listitem>

      <listitem>
        <para>
Use ant-builtins for everything.
        </para>
        <para>
ArgoUML is supposed to be a self-contains development environment.
If you feel tempted to use other tools (perl, sed, nsgmls), don't!
They are probably not present in all environments where we want to
run a development environment.
        </para>
      </listitem>
    </itemizedlist>
  </sect1>

  <sect1>
    <sect1info>
      <author>
        <firstname>Linus</firstname>
        <surname>Tolke</surname>
      </author>
    </sect1info>
    <title>Settings for Eclipse</title>
    <para>
These style guides correspond to the following settings in Eclipse:
      </para>
    <itemizedlist>
      <listitem>
        <para>In Preferences => Java => Code Formatter => New Lines</para>
        <para>
None of the boxes 
"Insert a new line before opening brace",
"Insert new lines in control statements",
"Clear all blank lines",
"Insert new line between 'else if'",
or
"Insert a new line inside an empty block"
are checked.
</para>
      </listitem>
      <listitem>
        <para>
In Preferences => Java => Code Formatter => Line Splitting
</para>
        <para>
Maximum line length is 80.
</para>
      </listitem>
      <listitem>
        <para>In Preferences => Java => Code Formatter => Style</para>
        <para>
None of the boxes
"Compact assignment"
or
"Indentation is represented by a tab"
are checked.
</para>
        <para>
Number of spaces representing a tab: 4.
This should probably be read as Number of spaces representing a 
level of indentation.
</para>
      </listitem>
      <listitem>
        <para>In Preferences => Java => Java Editor => Appearance</para>
        <para>
Displayed tab width: 8
</para>
        <para>
"Insert space for tabs (see Formatting preferences)" checked.
There seems to be no way of having tabs set at width 8 and the
indentation level set at 4 at the same time so we must let
Eclipse generate code without tabs to obey the Sun Coding standard.
</para>
      </listitem>
    </itemizedlist>
  </sect1>
  <sect1>
    <sect1info>
      <author>
        <firstname>Linus</firstname>
        <surname>Tolke</surname>
      </author>
    </sect1info>
    <title>Settings for NetBeans</title>
    <para>
These style guides correspond to the following settings in NetBeans:
    </para>
    <itemizedlist>
      <listitem>
        <para>
In (Tools =>) Options => Editing => Editor Settings => Java Editor
        </para>
        <para>
Tab Size = 8
        </para>
      </listitem>
      <listitem>
        <para>
In (Tools =>) Options => Editing => 
Indentation Engines => Java Indentation Engine
        </para>
        <para>
Add Newline Before Brace: False,
Add Space Before Parenthesis: False,
Expand Tabs to Spaces: False,
Number of Spaces per Tab: 4 (Should probably be read as
Number of Spaces per indentation level).
        </para>
      </listitem>
    </itemizedlist>
  </sect1>
  <sect1>
    <sect1info>
      <author>
        <firstname>Linus</firstname>
        <surname>Tolke</surname>
      </author>
    </sect1info>
    <title>Settings for Emacs</title>
    <para>
These style guides correspond to the default java settings in Emacs:
<programlisting>
 ("java"
  (c-basic-offset . 4)
  (c-comment-only-line-offset 0 . 0)
  (c-offsets-alist
   (inline-open . 0)
   (topmost-intro-cont . +)
   (statement-block-intro . +)
   (knr-argdecl-intro . 5)
   (substatement-open . +)
   (label . +)
   (statement-case-open . +)
   (statement-cont . +)
   (arglist-intro . c-lineup-arglist-intro-after-paren)
   (arglist-close . c-lineup-arglist)
   (access-label . 0)
   (inher-cont . c-lineup-java-inher)
   (func-decl-cont . c-lineup-java-throws)))
</programlisting>
    </para>
  </sect1>
</chapter>



<!-- Local stuff for Emacs - please do not delete

Local Variables:
mode: xml
sgml-doctype: "cookbook.xml"
sgml-parent-document: ("cookbook.xml" "chapter" nil)
sgml-validate-command: "nsgmls -wxml -sv ../docbook-setup/xml.dcl \
  cookbook.xml"
End:

-->
