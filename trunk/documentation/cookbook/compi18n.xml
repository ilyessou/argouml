<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- $Id$ -->

  <sect1 id="internationalization">
    <title>Internationalization</title>
      <indexterm>
	<primary>Internationalization</primary>
      </indexterm>
      <indexterm>
	<primary>I18n</primary>
      </indexterm>
      <indexterm>
	<primary>Localization</primary>
      </indexterm>
      <indexterm>
	<primary>L10n</primary>
      </indexterm>
      <indexterm>
	<primary>ResourceBundles</primary>
      </indexterm>
      <para>
Purpose - to provide the infrastructure that the other subsystems can
use to translate strings;
to provide the infrastructure that makes it possible to plug in
new languages;
to administer the default (English U.S.) language;
to administer all supported languages.
</para>
      <para>
The Internationalization is located in <classname>org.argouml.i18n</classname>
in the class path.
In the checked out copy of ArgoUML it is located partly in
<filename>argouml/src_new/org/argouml/i18n</filename> 
- functionality, and non-localized default language (US English), 
and partly in
<filename>argouml/src/i18n/<replaceable>language</replaceable>/src/org/argouml</filename>
- all files for a specific language.
</para>
      <para>
The Internationalization is a Layer 0 subsystem. 
See <xref linkend="layer0"></xref>.
</para>

      <indexterm>
	<primary>ListResourceBundles</primary>
      </indexterm>
      <indexterm>
	<primary>PropertyResourceBundles</primary>
      </indexterm>
      <para>
In ArgoUML internationalization (sometimes called i18n) is done using
the property files i.e. PropertyResourceBundles.
We used to have ListResourceBundle classes instead but they
are all gone by 0.15.3.
</para>
      <sect2>
	<title>Organizing translators</title>
	<indexterm>
	  <primary>Language teams</primary>
	</indexterm>
	<indexterm>
	  <primary>Internationalization teams</primary>
	</indexterm>
	<indexterm>
	  <primary>i18n teams</primary>
	</indexterm>
	<indexterm>
	  <primary>Translators</primary>
	</indexterm>
	<para>
The problems with internationalization are not so much the technical
problems as to how it works but more so the problems are with
getting, keeping and coordinating the correct competences to do
the job.
This comes from the fact that by necessity the different
persons working with internationalization have different native languages
and that complicates the communications.
</para>
	<para>
To handle this problem for GNU applications 
there is a community set up around <quote>gettext</quote> with one language team
per language working with all <quote>gettext</quote> applications.
There are also tools to help the translator do his job
delivered with <quote>gettext</quote> that are the same for all the applications.
In each of these language teams discussions are held that ensure a
consistent use of words over all these applications.
</para>
	<para>
It is for me (Linus Tolke, May 2002) unclear if and how such a
community exists for Open Source Java tools and ArgoUML cannot
simply benefit from the <quote>gettext</quote> communities since we don't use
<quote>gettext</quote> and cannot use the same tools.
</para>
	<para>
To get things done, we organize our own Language Teams with ArgoUML.
Each language team is actually just one or several persons that
know that language and are eager to work with translating ArgoUML.
</para>
	<para>
The language team has the following responsibilities:
<orderedlist>
	    <listitem>
	      <para>
All localized strings and resources shall be translated into the language.
</para>
	      <para>
This is a constant work with keeping up with the changes that
will be made to the ArgoUML code since ArgoUML 
is under fast development.
</para>
	    </listitem>
	    <listitem>
	      <para>
The terminology used shall be correct.
</para>
	      <para>
This requires work in keeping up with the current literature in the
domain of ArgoUML.
</para>
	    </listitem>
	    <listitem>
	      <para>
Help with the improvements on ArgoUML by pin-pointing where ArgoUML
needs to be modified to allow for localization.
</para>
	      <para>
As ArgoUML is originally built without localization we still have
places in the GUI that is not localizable just by
modifying the resource bundles. 
Each such place is a Defect and shall be corrected.
</para>
	    </listitem>
	    <listitem>
	      <para>
See that the used libraries also provide their part in that language.
</para>
	      <para>
This is mostly GEF since GEF is central both when it comes to 
the fact that it has localized strings of its own but also
because it handles parts of the localization.
</para>
	      <para>
This means discussing with the teams developing the underlying package
as to how best to provide the localization for those parts. 
Either by providing localization for that team to include in the
package or by having ArgoUML overriding that package in that respect.
</para>
	    </listitem>

	  </orderedlist>
</para>
      </sect2>
      <sect2>
	<title>Ambitions for localization</title>
	<para>
Let me (Linus Tolke, May 2002) try to define the levels of
ambition for us to try to make it possible to discuss where
we are going.
</para>
	<orderedlist>
	  <listitem>
	    <para>No translation</para>
	    <para>
This is the lowest level of ambition that is a "do nothing"-level.
This goes for all languages where we have not done anything like
Swahili, Polish, South African English, ...
</para>
	  </listitem>
	  <listitem>
	    <para>Tool translation</para>
	    <para>
This is the basic level of ambition that each Language Team should
aim for.
It means that within ArgoUML all strings are localized so that ArgoUML
is giving a complete appearance of being a tool for that language.
</para>
	    <para>
Setting this level of ambition for a language
(or creating a team for the language) is pointless
if there is no window system available for the language in questions.
I mean, if neither the people working with 
Windows, Linux (KDE or Gnome) or java has collected enough interest
to do a translation of the basic infrastructure there is no point
in doing so for ArgoUML.
(My Windows 2k has 80 supported languages so I would think that this
is a no-issue.)
</para>
	  </listitem>
	  <listitem>
	    <para>User environment translation</para>
	    <para>
This is the next level of ambition that can be set out by a 
Language Team that works really well and has plenty of translation
resources left.
</para>
	    <para>
It means that not only the ArgoUML tool should be translated but also
everything around it that the user sees 
i.e. the User Manual, the Quick Guide, the FAQ, 
the Users' part of the ArgoUML Web site.
</para>
	    <para>
Setting this level of ambition for a language is pointless
if the problem domain does not exist in that language.
I mean, if the professionals that use UML or other 
Software Engineering tools, in their every day work don't use 
their native language to discuss UML concepts,
then there is no use in translating these concepts to their language,
they will not use the translation because they are more
comfortable with the English concepts.
Note that the UML Specification does only exist in English
and a natural part of this level of ambition would probably
be to translate that.
</para>
	  </listitem>
	  <listitem>
	    <para>Development environment translation</para>
	    <para>
Here I mean that everything that the developer of ArgoUML sees
is translated.
</para>
	    <para>
We don't do this in the ArgoUML project.
</para>
	    <para>
This begins with this Cookbook, then the Developers' part of the
ArgoUML web site and 
also includes the javadoc comments in the code of ArgoUML and
design documentation of included packages such as GEF, NSUML...
</para>
	  </listitem>
	</orderedlist>
      </sect2>
<sect2 id="howdoi_internationalization">
<title>How do I ...?</title>
	<para>
<itemizedlist>
	    <listitem>
	      <para>...fix an incorrect or missing translation?</para>
	      <para>
This is the responsibility of the language team.
Send your corrections to the correct team by mail
or enter an issue in issuezilla.
The language team members are listed in the Developer Zone.
</para>
	      <para>
If the language team does not do its work quickly enough
(or well enough in your opinion),
please volunteer to help them out by joining the team.
</para>
	      <para>
If the language team does not respond, contact the project leader.
</para>
</listitem>
	    <listitem>
	      <para>...verify that all translations are up to date?</para>
	      <para>
Run checkstyle on the i18n parts.
This is done from
<filename>argouml/src_new</filename>
with the <literal>checkstyle-i18n</literal> target.
</para>
              <para>
Search for comments on keys.
</para>
              <para>
Observe that the reported filenames are in the
<filename>argouml/build</filename>
directory even if the changes are supposed to be made in
<filename>argouml/src/i18n/<replaceable>language</replaceable>/src/org/argouml/i18n</filename>!
</para>
	    </listitem>
	    <listitem>
	      <para>...start a new Language Team?</para>
	      <para>
Contact the project leader to discuss this.
He will create the team once he is convinced that
you have understood the responsibilities.
</para>
              <para>
The Language Teams are listed on
the web page of language teams on the Tigris site.
As soon as the language code and names (at least one) are in place
the team is created.
</para>
	      <para>
From that point it is the Language Team's responsibility to 
do a good job.
</para>
	    </listitem>
	    <listitem>
	      <para>
...find the languages internationalization code for the language 
your instance of ArgoUML is attempting to run with: en, es, en_GB,...
</para>
	      <para>
The one you are currently using is shown in the Versions information
in the about box.
Help Menu => About ArgoUML Menuitem => Version tab
just after the Operating System information.
Search for the text looking like this:
<programlisting>
Language: sh
Country: KR
</programlisting>
This example means that you have your computer set to
Swahili as spoken in Korea (I think).
Notice that the <replaceable>Language:</replaceable> and
<replaceable>Country:</replaceable> are localized and could
appear in your language.
</para>
	    </listitem>
	    <listitem>
	      <para>...start the translation work?</para>
              <para>
This is only applicable for members of the language team.
</para>
	      <para>
Look at the files in
<filename class="directory">org/argouml/i18n</filename>,
under <filename class="directory">argouml/src_new</filename>.
</para>
	      <para>
Translate all the values in each of these files.
</para>
	      <para>
This is a lot of extremely qualified work including searching well-known
literature on UML and Software Engineering in order to get the correct
terms for the domain.
Discuss with other UML and Software Engineering professionals with the
same native language to get it right.
</para>
	      <para>
Create the files with the translations and store them in
<filename class="directory">argouml/src/i18n/<replaceable>language</replaceable>/src/org/argouml/i18n</filename>.
They will have names like:
<filename>action_<replaceable>language code</replaceable>.properties</filename>,
<filename>button_<replaceable>language code</replaceable>.properties</filename>,
<filename>checkbox_<replaceable>language code</replaceable>.properties</filename>,
<filename>combobox_<replaceable>language code</replaceable>.properties</filename>, ...
</para>
	      <para>
When this is done the first iteration of the Tool translation is completed.
The work will probably be more maintenance-like from here on.
</para>
	    </listitem>
	    <listitem>
	      <para>...join an existing Language Team</para>
	      <para>
Discuss with the Language Team in question by mailing the members.
They will hopefully have work prepared for you and greet you with open arms.
</para>
	    </listitem>
	    <listitem>
	      <para>...add or modify code with localized things?</para>
              <para>
This is only applicable for developers working with the ArgoUML Java source.
</para>
	      <orderedlist>
		<listitem>
		  <para>
Everywhere the user would see a string in the GUI you should
localize a key.
</para>
		  <para>
This means that instead of writing a string you write a call to a
localizer method with a "key" ("label" or "tag") as argument and
the localizer method finds
the resolution of the "key" is in one of the property files.
You select one of the files for you key and name the key accordingly.
</para>
		  <para>
The key is a string.
The key has a special syntax like this:
<programlisting>
    word1.word2.word3
</programlisting>
where word1 is the same as the first part of the filename that 
the key resides in.
Example:
The key "action.about-argouml" resides in the files
<filename>action.properties</filename> and 
<filename>action_<replaceable>language code</replaceable>.properties</filename>.
</para>
                  <para>
You will have to call the class
<classname>org.argouml.i18n.Translator</classname>
to convert them to wherever they are used.
</para>
                  <para>
This is how a real example would look like:
<programlisting>
import org.argouml.i18n.Translator;
...
    String localized = Translator.localize(<replaceable>key</replaceable>);
</programlisting>
</para>
		</listitem>
		<listitem>
		  <para>
Add your "key" and resolution in English (U.S.) in the non-localized 
properties file in
<filename>argouml/src_new/org/argouml/i18n</filename>
and test that the GUI looks good for the default language.
</para>
		  <para>
Which property file ArgoUML will eventually use
depends on the localization settings
of the running ArgoUML instance.
While developing you should use en_US or some language
that does not have a translation so that you can work with 
the default language.
</para>
		</listitem>
		<listitem>
		  <para>
Contact all language-teams so that they can update their files.
</para>
                  <para>
Currently (November 2003) there is a great confusion as to where
we stand on the different translations.
For this reason we can't say if any language team is up to date
with the changes and served by such a contact.
</para>
		</listitem>
		<listitem>
		  <para>
If you have strings that are sentences where you have dynamic values
like a file name, a class name, or some property to enter at a certain place,
remember that all languages would not write it exactly like that.
Use <classname>MessageFormat</classname> to build every such sentence!
There is a convenience function for this 
in <classname>Translator</classname>
called <methodname>messageFormat</methodname>.
</para>
		</listitem>
	      </orderedlist>
	      <para>
Notice that if you somewhere change the meaning of a specific
localized thing it would be a good idea to use a new "key" for the
new meaning.
This will make it easier for the translation team to
spot the modification.
</para>
	      <para>
There allegedly are tools in the java world to spot this kind of changes.
Until we have the tools and processes in place to handle them
it is better to rely on this simpler mechanism to guarantee correctness.
</para>
	      <para>
Notice also that you shouldn't localize 
log entries,
comments,
exception names,
names of environment variables, and
tags and tokens used in save files.
This is because
the development project of ArgoUML is a one-language community (en_US) and
the users of ArgoUML would want to be able to run an ArgoUML localized
differently with 
otherwise the exact same settings,
loading and saving the same files, ...
</para>
	    </listitem>
	  </itemizedlist>
</para>
      </sect2>
</sect1>


<!-- Local stuff for Emacs - please do not delete

Local Variables:
mode: xml
sgml-doctype: "cookbook.xml"
sgml-parent-document: ("cookbook.xml" "sect1" nil)
sgml-validate-command: "nsgmls -wxml -sv ../docbook-setup/xml.dcl \
  cookbook.xml"
End:

-->
