<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- $Id$ -->

  <chapter id="buildingandtools">
    <title>Building from source</title>
    <para>
If you are in a hurry:
<programlisting>
C:\Work>set CVSROOT=:pserver:guest@cvs.tigris.org:/cvs
C:\Work>cvs login   (use guest as password)
C:\Work>cvs checkout argouml_src
C:\Work>set JAVA_HOME=<replaceable>C:\Programs\jdkwhatever</replaceable>
C:\Work>cd argouml\src_new
C:\Work\argouml\src_new>build run
</programlisting>
A window from the newly compiled ArgoUML opens after a while!
</para>
    <para>
That was the compact version for Windows + JDK.
(Note: jdk cannot be installed in a directory that contains space in its
name.)
</para>
    <para>
If you don't understand this or it doesn't work read the rest of 
the chapter that describes all the nitty details about why and
how.
</para>
     <sect1 id="starting">
     <title>Getting started</title>
      <para>
In order to develop with ArgoUML it is absolutely mandatory to get
the CVS version of ArgoUML.
How this is done is described in
<xref endterm="cvs_checkout_term" linkend="cvs_checkout"></xref>.
</para>
      <para>
Notice that the CVS contents is not only a set of source files but
instead it is the complete development environment for
all work within the ArgoUML project.
</para>

      <sect2>
	<title>Which tools do I need to build ArgoUML?</title>
	<indexterm>
	  <primary>Building</primary>
	  <secondary>tools</secondary>
	</indexterm>
	<indexterm>
	  <primary>Tools</primary>
	  <secondary>needed for building</secondary>
	</indexterm>
	<para>
These are the tools not included in the cvs repository that
you need to work with ArgoUML.
</para>
	<itemizedlist>
	  <listitem>
	    <para>
A computer with a free disk space for your work.
</para>
	    <para>
100MB is enough to download everything from the repository.
(Currently March 2003 it is 68MB).
150MB is enough to download all and build the tool and the documentation.
(Currently March 2003 it is 114MB).
250MB is enough to build it all 
(javadocs, documentation, classes, packages, ...).
</para>
	  </listitem>
	  <listitem>
	    <para>
CVS for getting the files
and committing source code updates.
</para>
	  </listitem>
	  <listitem>
	    <para>
JDK, at least version 1.3 (includes the java compiler)
</para>
	  </listitem>
	</itemizedlist>
      </sect2>
      <sect2>
	<title>
Which tools are part of the ArgoUML development environment?
</title>
	<indexterm>
	  <primary>Tools</primary>
	  <secondary>used</secondary>
	</indexterm>
	<para>
These tools are provided by the development environment that you
get when you check out from CVS.
</para>
	<itemizedlist>
	  <listitem>
	    <indexterm>
	      <primary>ANT</primary>
	    </indexterm>
	    <para>
ANT, the tool to manage compiling and packaging.
</para>
	  </listitem>
	  <listitem>
	    <indexterm>
	      <primary>ANTLR</primary>
	    </indexterm>
	    <para>
ANTLR, for regenerating the built-in parser.
</para>
	  </listitem>
	  <listitem>
	    <indexterm>
	      <primary>JUnit</primary>
	    </indexterm>
	    <para>
JUnit, for running the JUnit test cases.
</para>
	  </listitem>
	  <listitem>
	    <indexterm>
	      <primary>jdepend</primary>
	    </indexterm>
	    <para>
JDepend, for examining the code.
</para>
	  </listitem>
	</itemizedlist>
	<para>
For building the documentation from docbook format, 
these tools are also provided with the development environment that
you get when you check out from CVS.
</para>
	<itemizedlist>
	  <listitem>
	    <para>
saxon for building documentation from docbook format.
</para>
	  </listitem>
	  <listitem>
	    <indexterm>
	      <primary>Docbook</primary>
	      <secondary>XSL stylesheets</secondary>
	    </indexterm>
	    <para>
Docbook XSL stylesheets.
</para>
	  </listitem>
	  <listitem>
	    <indexterm>
	      <primary>fop</primary>
	    </indexterm>
	    <para>
fop for generating pdf versions of the docbook format.
</para>
	    <para>
To build a pdf file with the pictures included you need Jimi.
</para>
	  </listitem>
	</itemizedlist>
      </sect2>
      <sect2>
	<title>What libraries are needed and used by ArgoUML?</title>
	<para>
These libraries are provided in the development environment that
you get when you check out CVS.
They are checked by the java compiler when compiling, 
needed for running ArgoUML and therefore distributed with ArgoUML.
</para>
	<itemizedlist>
	  <listitem>
	    <indexterm>
	      <primary>NSUML</primary>
	    </indexterm>
	    <para>
nsuml, the Novosoft UML library.
</para>
	    <para>
ArgoUML project doesn't include the developing of Java classes for 
the purpose of storing, saving and loading an UML Model.
That work is done by NSUML and is used by ArgoUML.
</para>
<!--
	    <para>
See <xref linkend="nsuml"/> for some reading tips on how to learn
the insides of NSUML.
</para>
-->
	  </listitem>

	  <listitem>
	    <indexterm>
	      <primary>GEF</primary>
	    </indexterm>

	    <para>
GEF graph editing framework, available from 
<ulink url="http://gef.tigris.org">gef.tigris.org</ulink>.
</para>
	    <para>
It is also recommended that you check out GEF at the same time as you
check out ArgoUML because many things in Argo relate to GEF and it is
quite handy to have the source code available.
GEF is also residing at tigris so you can do a simple
<command>cvs <replaceable>-d :user@cvs.tigris.org:/cvs</replaceable> co gef</command>
(with the same checkout arguments you had when you checked out ArgoUML)
to get it.
</para>
	  </listitem>

	  <listitem>
	    <para>
The ocl package to parse and run the Object Constraint Language things.
</para>
	    <para>
Details about the package are available from sourceforge
<ulink url="http://dresden-ocl.sourceforge.net/">OCL Compiler</ulink>.
</para>
	  </listitem>

	  <listitem>
	    <indexterm>
	      <primary>log4j</primary>
	    </indexterm>
	    <para>
log4j, a library with infrastructure for logs.
</para>
	  </listitem>

	  <listitem>
	    <para>
antlrall, the run-time part of the antlr tool.
</para>
	  </listitem>

	</itemizedlist>
      </sect2>

 </sect1>
    <sect1 id="cvs_checkout">
      <title id="cvs_checkout_term">Download from the CVS repository</title>
      <indexterm>
	<primary>CVS</primary>
	<secondary>checking out from</secondary>
      </indexterm>
      <indexterm>
	<primary>Checking out from CVS</primary>
      </indexterm>
      <para>
The CVS repository at Tigris is accessable using the pserver protocol.
The CVS root is <filename>/cvs</filename> at cvs.tigris.org.
You use your Tigris login and Tigris password.
</para>
      <para>
This means that you will set the <varname>CVSROOT</varname>-variable to
<parameter>:pserver:<replaceable>login</replaceable>@cvs.tigris.org:/cvs</parameter>
where <replaceable>login</replaceable> is your Tigris login.
This needs to be done for the first checkout.
After that the root will be remembered by the checked out copy.
</para>
      <para>
The next thing to do is to login. It is done using the command:
<command>cvs login</command>.
This only needs to be done once and then the account on your machine
remembers this.
</para>
      <para>
Then you do the actual checking out.
<command>cvs checkout <replaceable>modulename</replaceable></command>.
</para>
      <para>
The CVS module you need to check out to build ArgoUML is
<parameter>argouml_src</parameter>.
This will check out the directories
<filename class="directory">argouml/lib</filename>,
<filename class="directory">argouml/tools</filename>,
<filename class="directory">argouml/src</filename>,
<filename class="directory">argouml/src_new</filename>,
and
<filename class="directory">argouml/tests</filename>.
</para>
      <para>
If you want to build the documentation you check out the module
<parameter>argouml_doc</parameter>.
This will check out the directories
<filename class="directory">argouml/lib</filename>
<filename class="directory">argouml/tools</filename>
and
<filename class="directory">argouml/documentation</filename>.
</para>
      <para>
If you want to work with the web site you check out the directory
<parameter>argouml/www</parameter>.
</para>
      <para>
If you give the argument
<parameter>argouml</parameter> all of ArgoUML is checked out.
That is no problem except for the extra use of bandwidth and disk space
but if you have plenty of both, get it all, and eventually you will
see how everything is used for a purpose in the project.
</para>
      <para>
If you don't want to acquire a tigris login to do this you can use the
"guest" account with the password "guest".
Since the checked out copy remembers the login you used to do the
check out, if you do this, you will have to remember to delete this
copy and start over if you get a developer role in the project and
want to do commits directly.
</para>
    </sect1>
 <sect1 id="Build">
     <title id="Build_term">Build Process</title>
      <indexterm>
	<primary>Building</primary>
	<secondary>ArgoUML</secondary>
      </indexterm>
      <indexterm>
	<primary>ANT</primary>
      </indexterm>
     <para>
The ArgoUML build process is driven by ANT, and it is highly recommend
that you stick to that.
There are people known to build from JBuilder or Netbeans, but always
make sure that your work compile with the plain vanilla build process.
     </para>
      <para>
Ant is a tool written in java developed for Apache that reads an xml-file
with rules telling what to compile to what result and what files to include
in what jar-file.
</para>
      <indexterm>
	<primary><filename>build.xml</filename></primary>
      </indexterm>
      <para>
The rule file is named <filename>build.xml</filename>.
There is one of those in every separate build directory
(<filename class="directory">src_new</filename>,
<filename class="directory">documentation</filename>, and
<filename class="directory">modules/<replaceable>whatever</replaceable></filename>).
</para>

      <sect2>
	<title>How ANT is run from the ArgoUML development environment</title>
	<indexterm>
	  <primary>ANT</primary>
	  <secondary>how it is used</secondary>
	</indexterm>
	<para>
For your convenience the ant tool of the correct version is present in the
CVS repository of ArgoUML in the file
<filename class="libraryfile">argouml/tools/ant-1.4.1/lib/ant.jar</filename>.
</para>
	<para>
Normally ant is started with the command
<command>../tools/ant-1.4.1/bin/ant <replaceable>arg</replaceable></command>
and in the modules
<command>
../../tools/ant-1.4.1/bin/ant <replaceable>arg</replaceable>
</command>.
On windows the command
<command>..\tools\ant-1.4.1\bin\ant <replaceable>arg</replaceable></command>
runs the program <filename>ant.bat</filename>.
</para>
	<para>
To keep you from having to write this and keeping track if you are
working with a module or not
there are two scripts (one for Unix and one for
Windows) that are called <filename>build.sh</filename> and
<filename>build.bat</filename> respectively present in most
of the directories that contain a <filename>build.xml</filename> file.
These two scripts run the equivalence of the above paths.
</para>
	<para>
By setting JAVA_HOME to different values you can at different times
build with different versions of jdk and java.
</para>
	<para>
To use different versions of ANT,
you are responsible for installing your own version.
Also, you must execute
<command>/where/ever/you/placed/your/new/ant <replaceable>target</replaceable></command>
rather than
<command>build <replaceable>target</replaceable></command>.
</para>
	<sect3>
	  <title>Compiling for Unix</title>
	  <indexterm>
	    <primary>Compiling</primary>
	    <secondary>Unix</secondary>
	  </indexterm>
	  <indexterm>
	    <primary>Unix</primary>
	    <secondary>compilation</secondary>
	  </indexterm>
	  <para>
Here is what you need to do in order to compile and run
your checked out copy of ArgoUML under Unix.
</para>
	  <orderedlist>
	    <listitem>
	      <para><command>JAVA_HOME=<replaceable>/where/you/have/installed/jdk</replaceable></command></para>
	      <para><command>export JAVA_HOME</command></para>
	      <para>
This is for sh-style shells like sh, ksh, zsh and bash. If you use
csh-style shells like csh and tcsh you will instead have to write
<command>setenv JAVA_HOME <replaceable>/where/you/have/installed/jdk</replaceable></command>.
</para>
	    </listitem>
	    <listitem>
	      <para>
Change the current directory to the directory you are building
</para>
	      <para>
<command>cd <replaceable>/your/checked/out/copy/of/argouml/src_new</replaceable></command>
</para>
	    </listitem>
	    <listitem>
	      <para>Start ant using <command>./build.sh</command></para>
	      <para>This gives you a list of targets with descriptions</para>
	    </listitem>
	    <listitem>
	      <para>
Compile and run Argouml using <command>./build.sh run</command>
</para>
	      <para>
You can do this over and over again when you have modified something
or want to compile and run again.
</para>
	    </listitem>
	  </orderedlist>
	</sect3>
	<sect3>
	  <title>Compiling for Windows</title>
	  <indexterm>
	    <primary>Compiling</primary>
	    <secondary>Windows</secondary>
	  </indexterm>
	  <indexterm>
	    <primary>Windows</primary>
	    <secondary>Compilation</secondary>
	  </indexterm>
	  <orderedlist>
	    <listitem>
	      <para>
<command>set JAVA_HOME=<replaceable>\where\you\have\installed\jdk</replaceable></command>
</para>
	    </listitem>
	    <listitem>
	      <para>
Change the current directory to the directory you are building
</para>
	      <para>
<command>chdir <replaceable>\your\checked\out\copy\of\argouml\src_new</replaceable></command>
</para>
	    </listitem>
	    <listitem>
	      <para>Start ant using <command>build</command></para>
	      <para>This gives you a list of targets with descriptions</para>
	    </listitem>
	    <listitem>
	      <para>
Compile and run Argouml using <command>build run</command>
</para>
	      <para>
You can do this over and over again when you have modified something
or want to compile and run again.
</para>
	    </listitem>
	  </orderedlist>

	  <indexterm>
	    <primary>Compiling</primary>
	    <secondary>Cygwin</secondary>
	  </indexterm>
	  <indexterm>
	    <primary>Cygwin</primary>
	    <secondary>Compilation</secondary>
	  </indexterm>
	  <para>
If you do this from Cygwin you work just like for Unix.
</para>

	</sect3>
	<sect3>
	  <title>Customizing and configuring your build</title>
	  <indexterm>
	    <primary>Compiling</primary>
	    <secondary>customized</secondary>
	  </indexterm>
	  <indexterm>
	    <primary>Compiling</primary>
	    <secondary>build.properties</secondary>
	  </indexterm>
	  <indexterm>
	    <primary>Compiling</primary>
	    <secondary>argouml.build.properties</secondary>
	  </indexterm>
	  <para>
It is possible to customize your compilation of ArgoUML.
</para>
	  <para>
If you issue the command
<command>build list-property-files</command>
you can see what files are searched for properties.
</para>
	  <para>
Don't change the
<filename class="libraryfile">argouml/src_new/default.properties</filename>
file (unless you are working with updating the development environment
itself).
Instead create one of the other files locally on you machine.
The properties in these files have precedence over the properties in
<filename class="libraryfile">argouml/src_new/default.properties</filename>.
</para>
	  <para>
Remember that if you do this, you have modified your development
environment.
To be sure that you will not break anything for
anyone else when checking in things 
developed using this modified environment, 
remove these files temporarily for the compiling and testing
you do just before you commit.
	  </para>
	</sect3>
	<sect3>
	  <title>Building javadoc</title>
	  <indexterm>
	    <primary>Javadoc</primary>
	    <secondary>building</secondary>
	  </indexterm>
	  <indexterm>
	    <primary>Building</primary>
	    <secondary>javadoc</secondary>
	  </indexterm>
	  <para>
By running ANT again using <command>build prepare-docs</command>
the javadoc documentation is generated and put into
<filename class="directory">argouml/build/javadocs</filename>.
</para>
	</sect3>
      </sect2>
      <sect2>
	<title>How documentation is presented</title>
	<para>
This describes how the documentation arrives on the web site.
</para>
	<sect3 id="how_the_web_site_works">
	  <title>How the ArgoUML web site works</title>
	  <indexterm>
	    <primary>Web Site</primary>
	    <secondary>maintaining</secondary>
	  </indexterm>
	  <para>
Tigris provides the ArgoUML site to be edited through CVS. Everything
that is checked in under <filename>argouml/www</filename>
becomes immediatly available at the url 
<ulink url="http://argouml.tigris.org/">http://argouml.tigris.org/</ulink>
with some added decorations.
</para>
	  <para>
Example: The file <filename>argouml/www/project.html</filename> is
available at 
<ulink url="http://argouml.tigris.org/project.html">http://argouml.tigris.org/project.html</ulink>.
</para>
	  <para>
This is the way the site is maintained and updated.
</para>
	</sect3>
	<sect3>
	  <title>The ArgoUML documentation</title>
	  <indexterm>
	    <primary>Documentation</primary>
	  </indexterm>
	  <indexterm>
	    <primary>Web Site</primary>
	    <secondary>documentation</secondary>
	  </indexterm>
	  <para>
For the ArgoUML project the same documenation shall be available in both
html, pdf and javahelp. To this end the documentation is written in
docbook xml and generated into two versions of html 
(one page per chapter and one page for the whole book),
pdf and javahelp.
</para>
	  <para>
We have tools that does the conversion from docbook xml to html and pdf.
The conversion is done whenever you need to look at the result or when 
you want to present the final result on the web site.
</para>
	  <para>
There are currently three different books generated in this way,
each into its own directory. They are cookbook (this document), 
manual and quick-guide. They are all generated and stored in the
exact same way except for the name of the directory that is one
of <filename class="directory">cookbook</filename>,
<filename class="directory">manual</filename> or 
<filename class="directory">quick-guide</filename>.
Below I will reference these directories using
<filename class="directory"><replaceable>book</replaceable></filename>.
</para>
	  <para>
When a new version of the documentation is to be made available on the
web site the responsible document release person does the following:
</para>
	  <orderedlist>
	    <listitem>
	      <para>
He checks out everything needed
and a copy of the <filename class="directory">argouml/www</filename>.
</para>
	      <para>
The module <parameter>argouml_docs</parameter> is there for this purpose.
</para>
	      <para>
If wanted, the CVS repository could be tagged and then the tag
can be checked out. This makes it possible to know exactly
how a certain version of the documentation was generated.
</para>
	    </listitem>
	    <listitem>
	      <para>
The documentation is generated using <command>build docs</command>.
</para>
	      <para>
This generates all three books and the result appears in
<filename class="directory">argouml/build/documentation/defaulthtml/<replaceable>book</replaceable></filename>,
<filename class="directory">argouml/build/documentation/printablehtml/<replaceable>book</replaceable></filename>, and
<filename class="directory">argouml/build/documentation/pdf/<replaceable>book</replaceable></filename>.
</para>
	      <para>
This has been done several times before while preparing the release so
no problems are expected. If there are problems then the preparations
were not good enough and the process is best stopped right here.
</para>
	    </listitem>
	    <listitem>
	      <para>
All the old files are removed from the checked out copy of 
<filename class="directory">argouml/www/documentation/defaulthtml/<replaceable>book</replaceable></filename>, 
<filename class="directory">argouml/www/documentation/printablehtml/<replaceable>book</replaceable></filename>.
</para>
	    </listitem>
	    <listitem>
	      <para>
New files are copied into the checked out copy of www
on top of the previous files there replacing them.
</para>
	      <para>
All the files are copied from
<filename class="directory">argouml/build/documentation/defaulthtml/<replaceable>book</replaceable></filename> to
<filename class="directory">argouml/www/documentation/defaulthtml/<replaceable>book</replaceable></filename>. 
The same for <filename class="directory">printablehtml</filename> and 
<filename class="directory">pdf</filename>.
</para>
	    </listitem>
	    <listitem>
	      <para>
No longer used files in 
<filename class="directory">argouml/www/documentation</filename>
are removed from CVS and new files are added.
</para>
	      <para><command>cvs -n update</command></para>
	      <para>Watch for "Missing" and "Unknown" files.</para>
	      <para>
The missing files are scheduled to be removed by:
<command>cvs remove <replaceable>each of the missing files</replaceable></command>
</para>
	      <para>
The "Unknown" files are scheduled to be added by:
<command>cvs add <replaceable>each of the added files</replaceable></command>
</para>
	      <para>
This removing of missing files and adding of unknown files may seem
backward but it is from the perspective of CVS.
The missing files are the ones that were present in the previous
version of the documentation and do not have a replacement,
either because that chapter does not exist anymore or that the tool
generates filenames differently.
The Unknown files are files with filenames that for the same reason
appear from one version of the documentation to the next.
</para>
	    </listitem>
	    <listitem>
	      <para>
Commit the changes thus publishing it on the web site.
</para>
	      <para>
<command>cvs commit -m'New version of the documentation published'</command>
</para>
	    </listitem>
	    <listitem>
	      <para>
The pdf book is uploaded to the download page.
</para>
	    </listitem>
	  </orderedlist>
	</sect3>
	<sect3>
	  <title>How developers work with documentation</title>
	  <indexterm>
	    <primary>Documentation</primary>
	    <secondary>work with</secondary>
	  </indexterm>
	  <para>
Developers that work with the documentation or with the tools 
to generate the documentation (or anyone else interested in this)
can generate the documentation like described above and examine
the result in
<filename class="directory">argouml/build</filename>.
It is only the last part about checking in and upploading the result
under
<filename class="directory">argouml/www/documentation</filename>
that requires write access in the CVS and synchronisation with the
rest of the project.
</para>
	  <para>
In order to do this you need to check out the whole of the
<filename class="directory">argouml/documentation</filename> directory.
You also need the directory
<filename class="directory">argouml/lib</filename> and
<filename class="directory">argouml/tools</filename>
that contain the tools used: ANT, Fop, saxon, ...
</para>
	  <para>
The subdirectories of
<filename class="directory">argouml/documentation</filename>,
<filename class="directory">cookbook</filename>,
<filename class="directory">manual</filename>, and
<filename class="directory">quick-guide</filename>
each contain one of the four books.
The subdirectory
<filename class="directory">docbook-setup</filename>
contains two things. 
It contains the configuration files that control how the generation is done.
It contains the xsl rules for all the generation.
The subdirectory
<filename class="directory">images</filename>
contains all the required pictures for all the books.
</para>
	</sect3>
      </sect2>
      <sect2>
	<title>Troubleshooting the development build</title>
	<indexterm>
	  <primary>Troubleshooting</primary>
	  <secondary>development build</secondary>
	</indexterm>
	<sect3>
	  <title>Compiling failed. Any suggestions?</title>
	  <para>
It might be that some other developer has made a misstake in checking
in things that contain errors, or forgotten to check in some files
in a change.
Look at the last couple of hours on the
<ulink url="http://argouml.tigris.org/servlets/BrowseList?listName=dev">
developers mailing list</ulink>!
It is probably on fire.
</para>
	  <para>
Another reason for problems is an unclean local source tree.
This means that if you have updated different parts of your source
tree at different times it might contain inconsistencies.
If you suspect this, first try to fix it by doing
<command>build clean</command> and <command>cvs update -d</command>
before trying to build again.
If that doesn't work remove your checked out copy completely and 
get it all again through CVS.
</para>
	  <para>
Another reason might be that you have an 
<filename>build.properties</filename> or
<filename>argouml.build.properties</filename>
file that you have been working with earlier
and that is doing something. If in doubt, remove those files.
</para>
	  <para>
If nothing helps, ask the 
<ulink url="mailto:dev@argouml.tigris.org">developers mailing list</ulink>!
</para>
	</sect3>
	<sect3>
	  <title>Can't commit my changes?</title>
	  <indexterm>
	    <primary>Troubleshooting</primary>
	    <secondary>commiting changes</secondary>
	  </indexterm>
	  <para>
You need to have a developer role in the ArgoUML project.
If you don't then you cannot do commit yourself.
Discuss what you have done and how best to test it on the
<ulink url="mailto:dev@argouml.tigris.org">developers mailing list</ulink>!
Eventually someone will commit it for you.
</para>
	  <para>
Furthermore the checkout of your copy needs to be done with your
tigris id that has the Developer role.
If you for some reason have earlier checked out
a copy as guest and then made modifications, changed the CVSROOT
variable you still cannot commit changes done in the repository since the
checked out copy contains information on who checked out.
For this reason, it is best to apply for an Observer role in 
the project if you are going to work with the source at all.
The Observer role is probably granted within a couple of days
(we welcome everybody!) and then you can check out with your tigris id.
This means that when you eventually are granted a Developer role you
can continue working with the same checked out copy.
</para>
	</sect3>
      </sect2>

 </sect1>

    <sect1 id="junittests">
      <title>The JUnit test cases</title>
      <indexterm>
	<primary>JUnit testing</primary>
      </indexterm>
      <indexterm>
	<primary>Unit testing of ArgoUML</primary>
      </indexterm>
      <indexterm>
	<primary>Testing ArgoUML</primary>
      </indexterm>
      <para>
ArgoUML has a set of automatic test cases using JUnit-framework
for testing the insides of the code.
The purpose of these are to help in pin-pointing problems with
code changes before even starting ArgoUML.
</para>
      <para>
The JUnit test cases are residing in a separate directory and
run from ant targets in the
<filename>src_new/build.xml</filename>.
They are never distributed with ArgoUML but merely a tool for
developers.
</para>

	<para>
By running the command
<command>build tests guitests</command>
in <filename>src_new</filename>
these test cases are started, each in their own jvm.
</para>
	<para>
Each test case writes its result on the Ant log.
</para>
	<para>
The result is also generated into a set of files that can be found at
<filename>build/test/reports/junit/output/html/index.html</filename>.
</para>

        <para>
The testcases java source code is located under
<filename>argouml/tests/org/argouml</filename>.
</para>

	<sect2>
	  <title>How to write a test case</title>
	  <indexterm>
	    <primary>Unit testing of ArgoUML</primary>
	  </indexterm>
	  <indexterm>
	    <primary>Testing ArgoUML</primary>
	  </indexterm>
	  <indexterm>
	    <primary>Testcases</primary>
	    <secondary>writing</secondary>
	  </indexterm>
	  <indexterm>
	    <primary>Writing</primary>
	    <secondary>testcases</secondary>
	  </indexterm>
	  <para>
Now this will make all you java-enthusiasts go nuts!
We have both classnames and method names with a special syntax.
</para>
	  <para>
The name of the test case starts with "Test" (i.e. Capital T, then
small e, s and t) or 
"GUITest" (i.e. Capital G, U, I, T then small e, s, t).
The reason for this is that the special targets in
<filename>src_new/build.xml</filename>
searches for test cases with these names.
If you write a test case that does not comply to this rule you still
can run the test case manually after having started with
<command>build run-with-test-panel</command>
but it wont be known and run by other developers and automatic build
mechanisms so don't do it.
</para>

	<para>
Testcases that doesn't require GUI components in place
have filenames like
<filename>Test<replaceable>*</replaceable>.java</filename>.
They must be able to run on a headless system.
To make sure that this works, always run your newly developed
test case with <command>build tests</command> using 
jdk1.4 or later.
</para>
      <para>
Testcases that do require GUI components in place
have filenames like
<filename>GUITest<replaceable>*</replaceable>.java</filename>.
</para>
      <para>
We should try to get as many tests from the GUITest* class to 
the corresponding Test* class because the latter are run by automatic 
builds regularly.
</para>
      <para>
Every class
<classname>org.argouml.<replaceable>x.y</replaceable>.<replaceable>z</replaceable></classname>
stored in the file
<filename class="directory">src_new/org/argouml/<replaceable>x/y</replaceable>/<replaceable>z</replaceable>.java</filename>
should have a JUnit test case called
<classname>org.argouml.<replaceable>x.y</replaceable>.Test<replaceable>z</replaceable></classname>
stored in the file
<filename class="directory">tests/org/argouml/<replaceable>x/y</replaceable>/Test<replaceable>z</replaceable>.java</filename>
containing all the Unit Test Cases for that class
that don't need the GUI components to run.
Classes that have things that needs to be tested that 
do need GUI components to run should also have a class named
<classname>org.argouml.<replaceable>x.y</replaceable>.GUITest<replaceable>z</replaceable></classname>
stored in the file
<filename class="directory">tests/org/argouml/<replaceable>x/y</replaceable>/GUITest<replaceable>z</replaceable>.java</filename>
</para>
	  <para>
If you only want to run your newly written test cases and not
all the test cases, you could start with the command
<command>build run-with-test-panel</command>
and give the class name of your test case like
<classname>org.argouml.<replaceable>x.y</replaceable>.Test<replaceable>z</replaceable></classname>
or
<classname>org.argouml.<replaceable>x.y</replaceable>.GUITest<replaceable>z</replaceable></classname>.
You will then get the output in the window.
You could run all tests in this way by specifying the special test suite
<classname>org.argouml.util.DoAllTests</classname>
in the same way.
</para>

	  <para>
The test case imports the JUnit framework: 
<blockquote>
	      <para>
import junit.framework.*;
</para>
	    </blockquote>
and it inherits <classname>TestCase</classname>
(i.e. <classname>junit.framework.TestCase</classname>).
</para>
	  <para>
Methods that are tests must have names that start with "test"
(i.e. all small t, e, s, t). This is a requirement of the JUnit
framework.
</para>
	  <para>
Try to keep the test cases as short as possible.
There is no need in cluttering them up just to beautify the output.
Prefer
<programlisting>
// Exampel from JUnit FAQ
public void testIndexOutOfBoundsExceptionNotRaised()
        throws IndexOutOfBoundsException {
    ArrayList emptyList = new ArrayList();
    Object o = emptyList.get(0);
}
</programlisting>
over
<programlisting>
public void testIndexOutOfBoundsExceptionNotRaised() {
    try {
        ArrayList emptyList = new ArrayList();
        Object o = emptyList.get(0);
    } catch (IndexOutOfBoundsException iobe) {
        fail("Index out of bounds exception was thrown.");
    }
}
</programlisting>
because the code is shorter, easier to maintain and you get a better
error message from the JUnit framework.
</para>
	  <para>
A lot of times it is useful just to run the compiler to verify that
the signatures are correct on the interfaces. Therefor Linus has
thought it is a good idea to add methods called
<methodname>compileTestStatics</methodname>,
<methodname>compileTestConstructors</methodname>, and
<methodname>compileTestMethods</methodname>
that was thought to include correct calls to all static methods,
all public constructors, and all other public methods that are not
otherwise tested.
These methods are never called.
They serve as a guarantee that the public interface of a class will
never lose any of the functionality provided by its signature in an
uncontrolled way in just the same way as the test-methods serve as a
guarantee that no features will ever be lost.
</para>
	  <example>
	    <title>An example without javadoc comments</title>
	    <indexterm>
	      <primary>Testcases</primary>
	      <secondary>an example</secondary>
	    </indexterm>
	    <para>
<programlisting>
package org.argouml.uml.ui;
import junit.framework.*;

public class GUITestUMLAction extends TestCase {
    public GUITestUMLAction(String name) {
	super(name);
    }

    // Testing all three constructors.
    public void testCreate1() {
	UMLAction to = new UMLAction(new String("hejsan"));
	assert("Disabled", to.shouldBeEnabled());
    }
    public void testCreate2() {
	UMLAction to = new UMLAction(new String("hejsan"), true);
	assert("Disabled", to.shouldBeEnabled());
    }
    public void testCreate3() {
	UMLAction to = new UMLAction(new String("hejsan"), true, UMLAction.NO_ICON);
	assert("Disabled", to.shouldBeEnabled());
    }
}
</programlisting>
and the corresponding no-gui-class:
<programlisting>
package org.argouml.uml.ui;
import junit.framework.*;

public class TestUMLAction extends TestCase {
    public TestUMLAction(String name) {
	super(name);
    }

    // Functions never actually called. Provided in order to make
    // sure that the static interface has not changed.
    private void compileTestStatics() {
	boolean t1 = UMLAction.HAS_ICON;
	boolean t2 = UMLAction.NO_ICON;
	UMLAction.getShortcut(new String());
	UMLAction.getMnemonic(new String());
    }

    private void compileTestConstructors() {
	new UMLAction(new String());
	new UMLAction(new String(), true);
	new UMLAction(new String(), true, true);
    }

    private void compileTestMethods() {
	UMLAction to = new UMLAction(new String());
	to.markNeedsSave();
	to.updateEnabled(new Object());
	to.updateEnabled();
	to.shouldBeEnabled();
    }
}
</programlisting>
</para>
	  </example>
      </sect2>
    </sect1>


    <sect1 id="release_process">
      <title>Making a release</title>
      <indexterm>
	<primary>Making a release</primary>
      </indexterm>
      <para>
To simplify for the person that is actually doing the release work
and to make sure that everything is done in the exact same way 
every time and nothing is forgotten,
this list of what to do when releasing is maintained.
</para>
      <para>
It is provided with the hopes of being helpful.
<!-- If you, the release responsible, finds it unhelpful, please remove it! -->
</para>
      <para>
To understand this you need knowledge of how cvs works and 
how you normally build and test ArgoUML.
</para>
      <para>
This instruction is supposed to work on a windows system (running build.bat).
The author (Linus Tolke) has for some time been running it 
on a cygwin system (running build.sh) 
assuming that this will be the same as on any unix system.
How it is actually run on a cygwin/unix system is also noted.
</para>

      <para>
What needs to be done when one actually does a release:
</para>

      <para>
	<orderedlist>
	  <listitem>
	    <para>Tag the whole CVS repository with the freeze tag!</para>
	    <para>
Normally this tag is "VERSION_<replaceable>X_Y_Z</replaceable>_F",
e.g. VERSION_0_9_7_F.
The according command line CVS command is 
<command>cvs rtag VERSION_<replaceable>X_Y_Z</replaceable>_F argouml</command>.
(Because of a problem on the Tigris site, this doesn't work. 
Instead make sure you have a complete checked out copy of ArgoUML,
go to the root directory 
<filename class="directory">argouml</filename>
and run the command
<command>cvs tag VERSION_<replaceable>X_Y_Z</replaceable>_F</command>.)
</para>
	  </listitem>
	  <listitem>
	    <para>Check out a new copy of the source!</para>
	    <para>
This is done by checking out from the tag using the command
<command>cvs co -r VERSION_<replaceable>X_Y_Z</replaceable>_F argouml_modules</command>
and
<command>cvs co -r VERSION_<replaceable>X_Y_Z</replaceable>_F argouml/tests</command>
in a newly created directory.
</para>
	    <para>
These commands assume that you have set the CVSROOT correctly. 
If not you will have to use commands like
<command>cvs -d :pserver:<replaceable>user</replaceable>@cvs.tigris.org:/cvs co ...</command>
instead.
</para>
	  </listitem>
	  <listitem>
	    <para>
Build the release!
</para>
	    <para>
This is done in the
<filename class="directory">argouml/src_new</filename>
directory of the newly created copy
by issueing the command <command>build dist-release</command>!
(Linus:
It takes around 10 minutes on my machine 
	JDK1.3.1_01/700MHz/256MB (May 2003),
It takes around 30 minutes on a Lysator machine simultaneously 
doing a lot of other things.
	JDK1.3.1_06/sun4d/256MB (July 2003).
)
</para>
	    <para>
On a Cygwin/Unix system you need to 
first make the <command>ant</command> executable with the command
<command>chmod +x ../tools/ant-1.4.1/bin/ant</command>
and then issue the command with 
<command>./build.sh</command> instead of 
<command>build</command>.
</para>
	    <para>
The output should be the files
<filename>ArgoUML-<replaceable>VERSION</replaceable>-libs.tar.gz</filename>,
<filename>ArgoUML-<replaceable>VERSION</replaceable>-libs.zip</filename>,
<filename>ArgoUML-<replaceable>VERSION</replaceable>-modules.tar.gz</filename>,
<filename>ArgoUML-<replaceable>VERSION</replaceable>-modules.zip</filename>,
<filename>ArgoUML-<replaceable>VERSION</replaceable>-src.tar.gz</filename>,
<filename>ArgoUML-<replaceable>VERSION</replaceable>-src.zip</filename>,
<filename>ArgoUML-<replaceable>VERSION</replaceable>-app.tgz</filename>,
<filename>ArgoUML-<replaceable>VERSION</replaceable>.tar.gz</filename>, and
<filename>ArgoUML-<replaceable>VERSION</replaceable>.zip</filename>
in the <filename class="directory">argouml</filename> directory
in your new copy.
</para>
	  </listitem>
	  <listitem>
	    <para>Test the release!</para>
	    <para>
Either the 
<filename>ArgoUML-<replaceable>VERSION</replaceable>.tar.gz</filename> or
<filename>ArgoUML-<replaceable>VERSION</replaceable>.zip</filename>
file is tested by unpacking, starting and then
running through the test cases.
Currently there isn't any defined test cases for manual testing.
</para>
	    <para>
There are two sets of automatic test cases.
<itemizedlist>
		<listitem>
		  <para>
Run the JUnit test cases in
<filename class="directory">argouml/tests</filename>
by issueing the command
<command>build alltests</command>
in the <filename class="directory">argouml/src_new</filename> directory.
(Linus
It takes around 12 minutes on my machine 
	JDK1.3.1_01/700MHz/256MB (May 2003),
It takes around three hours on a Lysator machine simultaneously
doing a lot of other things and the X session over a 50kb/s modem.
	JDK1.3.1_06/sun4d/256MB (July 2003).
)
</para>
		  <para>
There should not be any failed tests. 
(See details on where to find the result in
<xref linkend="junittests"></xref>).
</para>
		</listitem>
		<listitem>
		  <para>
Run the JUnit test cases in 
<filename class="directory">modules/junit</filename>
by cd:ing to
<filename class="directory">modules/junit</filename>
and running <command>build run</command>,
invoking JUnit tests from the Tools menu,
specifying the Test Case TestAll,
and running without "Reload classes every run" checked.
(See details in <xref linkend="junittests"></xref>).
</para>
		  <para>
The corresponding <filename>build.sh</filename> is not available for
a Cygwin/Unix system so you must run the ant command directly.
First make the <command>ant</command> executable with the command
<command>chmod +x ../../tools/ant-1.4.1/bin/ant</command>
if you havn't made it above
and then issue the command 
<command>../../tools/ant-1.4.1/bin/ant run</command> instead of the
<command>build run</command> command.
</para>
		  <para>
No problems shall be found.
</para>
		</listitem>
	      </itemizedlist>
</para>
	    <para>
If the tests did not pass See <xref linkend="release_process_test_failed"/>.
</para>
	  </listitem>
	  <listitem>
	    <para>Tag the whole repository with the release tag!</para>
	    <para>
This tag is "VERSION_<replaceable>X_Y_Z</replaceable>",
e.g. VERSION_0_9_7.
The according command line CVS command is 
<command>cvs tag VERSION_<replaceable>X_Y_Z</replaceable></command>
when your are standing in the
<filename class="directory">argouml</filename>-directory.
</para>
	  </listitem>
	  <listitem>
	    <para>
Open the repository for commits towards the next version.
</para>
	    <para>
This is done by setting the <methodname>argo.core.version</methodname>
in <filename>default.properties</filename> to 
<replaceable>Number of next release</replaceable>, commiting
and telling everyone on the developers mailing list.
Notice that this cannot be done in the tagged copy but you either need
to go back to your other working tree or need to check out the file
<filename>argouml/src_new/default.properties</filename>
specifically to do this.
</para>
	  </listitem>
	  <listitem>
	    <para>Upload the files onto the tigris website!</para>
	    <para>
Only a project owner can do that.
Please write the descriptions of the files like this:
<itemizedlist>
		<listitem>
		  <para>libraries</para>
		  <para>
libraries needed to compile
</para>
		</listitem>
		<listitem>
		  <para>sources</para>
		  <para>
source code without libraries
</para>
		</listitem>
		<listitem>
		  <para>complete set</para>
		  <para>
binary distribution, including all libraries
</para>
		</listitem>
		<listitem>
		  <para>application bundle</para>
		  <para>
binary distribution, runnable as application bundle
</para>
		</listitem>
	      </itemizedlist>
</para>
	  </listitem>
	  <listitem>
	    <para>
Contact Jason Robbins to make the new Webstart version available!
</para>
	    <para>
Jason Robbins takes care of the signing and publishing of the
Webstart version.
</para>
	  </listitem>
	  <listitem>
	    <para>
Go through Issuezilla and check things.
</para>
	    <para>
Things to check are:
</para>
	    <orderedlist>
	      <listitem>
		<para>
That there is a Version created in issuezilla for the newly created release.
</para>
		<para>
The purpose of this is to make it possible for everyone 
to report bugs on the new release.
</para>
	      </listitem>
	      <listitem>
		<para>
Make sure that the upcoming releases have 
target milestones created for them.
</para>
	      </listitem>
	      <listitem>
		<para>
Change the target milestones of all the not yet resolved issues 
for this release to ---.
</para>
	      </listitem>
	      <listitem>
	        <para>
Move all issues reported on 'current' to this release.
</para>
                <para>
These items were reported between the previous version and this version.
Since 'current' will be reused for the next release, they need to be
locked to the closest release to where they were found.
</para>
              </listitem>
	      <listitem>
		<para>Other stuff.</para>
		<para>
This can also be a good time to change all 
RESOLVED/REMIND and RESOLVED/LATER.
Search for them and Reopen them.
</para>
	      </listitem>
	    </orderedlist>
	  </listitem>
	  
	  <listitem>
	    <para>Update the web page</para>
	    <para>
The
<ulink url="http://argouml.tigris.org/documentation/issuezilla/frequentlyusedlists.html">Lists of Issues</ulink>
page contains a link to each version and needs to be updated.
</para>
	  </listitem>
	  
	  <listitem>
	    <para>Make announcements!</para>
	    <para>
Write a News announcements and a short note on 
the dev, users and announce lists.
Announcer should make sure that he/she is already subscribed to all lists
with a reference to the news item.
</para>
	    <para>
The announcement shall include
a statement on what kind of release this is,
information on what has changed (for stable releases this is a list of what
has changed since the last stable release),
the list of resolved issues,
a list of serious known problems with this release 
(stable releases shouldn't have any),
technical details on how the release was built, and
the plan for the following release.
</para>
	    <para>
Freshmeat: currently Thierry Lach does the freshmeat announcements
which require a login so just inform him.
</para>
	  </listitem>
	</orderedlist>
</para>
      <sect2 id="release_process_test_failed">
	<title>The release did not work</title>
	<indexterm>
	  <primary>Troubleshooting</primary>
	  <secondary>during the release work</secondary>
	</indexterm>
	<para>
This shouldn't happen! This really shouldn't happen!
</para>
	<para>
The reason that this has happened is that one of the developers 
has made a mistake.
You now must decide a way forward.
</para>
	<sect3 id="release_work_fix_problem_yourself">
	  <title>Fix the problem yourself.</title>
	  <para>
If the problem is obvious to you and you can fix it quickly, do so.
This is done by doing the following:
<itemizedlist>
	      <listitem>
		<para>Make the release tag into a branch</para>
		<para>
<command>cvs rtag -b -r VERSION_<replaceable>X_Y_Z</replaceable>_F BRANCH_<replaceable>X_Y_Z</replaceable></command>
</para>
	      </listitem>
	      <listitem>
		<para>Update your checked out copy to be on that branch</para>
		<para>
<command>cvs update -r BRANCH_<replaceable>X_Y_Z</replaceable></command>
</para>
	      </listitem>
	      <listitem>
		<para>Fix the problem in your checked out copy</para>
	      </listitem>
	      <listitem>
		<para>Commit the problem in the branch</para>
		<para>
<command>cvs commit -m'Fix of problem blabla'</command>
</para>
	      </listitem>
	      <listitem>
		<para>Continue the build process</para>
		<para>
This is done by restarting the <command>build dist-release</command>-command
and from that point on working in the branch instead of at the tag.
</para>
	      </listitem>
	      <listitem>
		<para>
Explain to the culprit what mistakes he has made and how to fix it.
</para>
		<para>
It is now his responsibility to make sure that the problem will not
appear in the next version.
He can do this either by merging in your fix or by fixing the problem
in some other way.
</para>
		<para>
At this point an in-detail description of how poor programming skills
the culprit has and how ugly his mother is, is probably in place but
please keep it constructive!
Remember, you might be mistaken when you guess who the responsible is.
</para>
	      </listitem>
	    </itemizedlist>
</para>
	</sect3>

	<sect3>
	  <title>
Delay the release waiting for someone to fix the problem.
</title>
	  <para>
Create the branch as described in 
<xref linkend="release_work_fix_problem_yourself"/>.
Then tell the culprit and everyone on the developer list
what the problem is and that it is to be fixed in the
release branch a.s.a.p.
</para>
	  <para>
Monitor the changes made to the branch to verify that
no one commits anything else but the solutions to the
problems.
</para>
	  <para>
When you get notified that it is completed, 
update your checked out copy and continue the release work.
</para>
	</sect3>
      </sect2>


</sect1>

</chapter>

<!-- Local stuff for Emacs - please do not delete

Local Variables:
mode: xml
sgml-doctype: "cookbook.xml"
sgml-parent-document: ("cookbook.xml" "chapter" nil)
sgml-validate-command: "nsgmls -wxml -sv ../docbook-setup/xml.dcl \
  cookbook.xml"
End:

-->
