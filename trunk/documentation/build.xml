<?xml version="1.0"?>
<!-- ====================================================================== -->
<!-- ArgoUML Manuals & Documentation Build file                             -->
<!-- Author: Kunle Odutola  31-March-2001                                   -->
<!--                                                                        -->
<!-- Modified: Jeremy Bennett  30-November-2001. Comments over use of 'ant' -->
<!--           alone rather than build.sh or build.bath clarified           -->
<!--                                                                        -->
<!--           Jeremy Bennett  8-March-2002. Changed to use Saxon for       -->
<!--           DocBook processing                                           -->
<!--                                                                        -->
<!--           Jeremy Bennett  14-March-2002. Changes to Fop classpath      -->
<!--           suggested by Daniel Faensen's testing.                       -->
<!--                                                                        -->
<!--           Thierry Lach    Summer 2002. Changes to use ant 1.4.1.       -->
<!--                                                                        -->
<!-- Parts borrowed from the ArgoUML build file                             -->
<!--                                                                        -->
<!-- ====================================================================== -->
<!-- 

About this file
===============

This file is the build file for ArgoUML Manuals & Documentation. It contains
the instructions that are read by a build tool to automate the process of
creating the various files that constitute the Manual & Documentation. This
build file is designed to be read by ANT - the 100% Java build tool from the
Apache guys.  | @SEE http://jakarta.apache.org/ant/


About ArgoUML
=============

ArgoUML is an Open Source, 100% Pure Java tool for designing and documenting
software systems using UML. ArgoUML was conceived by Jason Robbins while at UCL
and was subsequently released as an open source product. ArgoUML is now hosted
at Tigris by Jason.  | @SEE http://www.argouml.org/


Frequently Asked Questions
==========================

1. What tools do I need to use this build file?

        You need the following to be able to build the ArgoUML Manuals and
        Documentation:

        - The Java 2 SDK installed on your machine. It is recommended that you
          install JDK version 1.2.2 or later. Note that you need the JDK and
          not just the JRE. Many tools such as javadoc are only available in
          the JDK.

        - The ArgoUML manual's source files. This are available in the ArgoUML
          source distribution and in CVS. Please visit
          "http://www.argouml.org/" for download information. This file is a
          part of the ArgoUML source.

        - "Ant" the Java build tool (http://jakarta.apache.org/ant/). The Ant
          jar file(s) are included in the ArgoUML source distribution and CVS
          but, you might want to install Ant fully in any case.

        - The DocBook system (http://www.docbook.org/). Included in the ArgoUML
          source distribution and CVS.

        - "FOP" the XML-to-PDF formatter (http://xml.apache.org/fop/). Included
          in the ArgoUML source distribution and CVS. Note that there are some
          issues with the latest version of Fop discussed in the README file in
          this directory.

2. I have all the tools what next ?

        You need to ensure that you've set up your environment correctly for
        the build process to work. Please note that environment variables
        should be setup up in your shell (using AUTOEXEC.BAT on Windows 9x/Me
        or .login on Linux/Unix) and not in a batch file for it to work. To set
        up your environment, check the following:

        a) Set an environment variable called JAVA_HOME to your JDK's 
           installation directory. This needed by the build tool Ant.
           Examples of what you might do:
                        On Windows       -  set JAVA_HOME=D:\jdk1.3
                        On Linux\Unix    -  export JAVA_HOME=/usr/local/jdk1.3

        b) If you've installed Ant yourself (but *NOT* if you'd using Ant
           delivered with Argo/UML) then you need to: 
           i) Set the environment variable ANT_HOME to the Ant install
              directory. 
                        On Windows       -  set ANT_HOME=D:\Applications\Ant
                        On Linux\Unix    -  export ANT_HOME=/usr/local/ant
           ii) Add ANT_HOME/bin to your PATH :-
                        On Windows           -  set PATH=%PATH%;%ANT_HOME%\bin
                        On Linux/Unix    -  export PATH=$(PATH);$(ANT_HOME)/bin
        
3. What the instructions for building the manual ?

        a) Read and follow the instructions above for the following FAQs:
                        i)  "What tools do I need to use this build file?"
                        ii) "I have all the tools, what next?"
 
        b) Change your current working directory to the directory where this
           file is located under the ArgoUML installation directory (or under
           the ArgoUML checkout directory if you are using CVS)

        c) Type the following command:
                        On Windows      - build
                        On Linux/Unix   - ./build.sh
           Note that under Linux/Unix, you should ensure build.sh is executable
           by  using 'chmod ugo+x build.sh' if necessary.

           ( alternatively you may type 'ant' without the quotes *only* if    )
           ( you installed Ant yourself. You should also ensure you have Fop  )
           ( installed, since this is used to build PDF, and is not picked up )
           ( from the argouml distribution by plain 'ant'                     )
        d) This will display a "build usage help page" that describes the
           different build targets available with this file and how to invoke
           them.
        

Property Settings
=================

You may place a simple text file named ".ant.properties" in your home directory
with which you can change certain properties. For example, by adding a line to
.ant.properties you can change the compiler to be used

build.compiler=jikes
(without a blank after "jikes"!).

This will force Ant to compile with jikes if you have it on your system. Refer to the ant documentation for other settings and options.

=========================================================================== -->

<project name="ArgoDocs" default="help" basedir="..">

  <property name="argo.root.dir" value="${basedir}"/>
  <property environment="env"/>
  <property file="${argo.root.dir}/documentation/build.properties"/>
  <property file="${user.home}/argouml.build.properties"/>
  <property file="${argo.root.dir}/documentation/default.properties"/>
  <property name="documentation.dir" value="${argo.root.dir}/documentation"/>
  <property name="extlib.dir"        
      value="${argo.docbook.dir}/docbook-xsl-1.49/extensions"/>

  <path id="saxon.classpath">
    <pathelement location="${saxon.jar.path}" />
    <pathelement location="${extlib.dir}/saxon65.jar"/>
  </path>

  <target name="init">
    <tstamp>
        <format property="year" pattern="yyyy"/>
    </tstamp>

    <property name="Name"              value="ArgoUML-docs"/>
    <property name="name"              value="argouml-docs"/>

    <echo message="--------------- ${Name} ${argo.core.version} [${year}] ------------"/>
    <echo message="Using ${ant.version}"/>


    <property name="printablehtml.dir" value="${argo.docs.output.dir}/printablehtml"/>
    <property name="defaulthtml.dir"   value="${argo.docs.output.dir}/defaulthtml"/>
    <property name="pdf.dir"           value="${argo.docs.output.dir}/pdf"/>
    <property name="javahelp.dir"      value="${argo.docs.output.dir}/javahelp"/>

    <available property="jimi-is-available"
               value="true"
	       classname="com.sun.jimi.core.Jimi">
        <classpath>
            <pathelement location="${jimi.jar.path}" />
	</classpath>
    </available>

  </target>

  <!-- =================================================================== -->
  <!-- Generate a help screen                                              -->
  <!-- =================================================================== -->

  <target name="help" depends="init">
    <echo message="${name}-${argo.core.version} build file, available targets:"/>
    <echo message="-------------------------------------------------------------------"/>
    <echo message="defaulthtml   : Build chunked   HTML docs to ARGO_HOME/build/documentation/ "/>
    <echo message="printablehtml : Build printable HTML docs to ARGO_HOME/build/documentation/ "/>
    <echo message="pdf           : Build Acrobat   PDF  docs to ARGO_HOME/build/documentation/ "/>
    <echo message="javahelp      : Build Sun  JAVAHELP  docs to ARGO_HOME/build/documentation/ "/>
    <echo message="docs          : Build PDF and HTML docs to ARGO_HOME/build/documentation/ "/>
    <echo message="dist          : Create/Update .zip and .tar.gz archives in ARGO_HOME/ "/>
    <echo message="clean         : Clean built files. "/>
    <echo message="total-clean   : Clean built files and distribution. "/>
    <echo message="                                                        "/>
    <echo message="-------------------------------------------------------------------"/>
    <echo message="  USAGE: build &lt;target&gt; "/>
  </target>
  
  <!-- =================================================================== -->
  <!-- Prepares the build directory                                        -->
  <!-- =================================================================== -->

  <target name="prepare" depends="init">
    <mkdir dir="${argo.build.dir}"/>
    <mkdir dir="${argo.docs.output.dir}"/>
    <mkdir dir="${defaulthtml.dir}"/>
    <mkdir dir="${printablehtml.dir}"/>
    <mkdir dir="${javahelp.dir}"/>
    <mkdir dir="${pdf.dir}"/>
  </target>
  
  <!-- =================================================================== -->
  <!-- defaulthtml: Create default HTML documentation                      -->
  <!-- =================================================================== -->

  <target name="defaulthtml" depends="prepare">
    <!-- Set switch for create-defaulthtml target to ensure that it runs -->
    <property name="generate-defaulthtml" value="true" />
    <!-- Call "internal-scheduler" target to start the process -->
    <antcall target="internal-scheduler"/>    
  </target>

  <!-- =================================================================== -->
  <!-- printablehtml: Create printable HTML documentation                  -->
  <!-- =================================================================== -->

  <target name="printablehtml" depends="prepare">
    <!-- Set switch for create-printablehtml target to ensure that it runs -->
    <property name="generate-printablehtml" value="true" />
    <!-- Call "internal-scheduler" target to start the process -->
    <antcall target="internal-scheduler"/>    
  </target>
  

  <!-- =================================================================== -->
  <!-- javahelp: Create javahelp documentation                             -->
  <!-- =================================================================== -->

  <target name="javahelp" depends="prepare">
    <!-- Set switch for "create-javahelp" target to ensure that it runs -->
    <property name="generate-javahelp" value="true" />
    <!-- Call "internal-scheduler" target to start the process -->
    <antcall target="internal-scheduler"/>          
  </target>
  
  <target name="jimi-check" depends="prepare" unless="jimi-is-available">
      <echo message="Jimi is not available.">

The Jimi file is not available. The pdf result will be poor since
most of the images cannot be included and you will get several
[fop] [ERROR]:-messages.

Please refer to the readme file in the tools/fop-0.20.3
directory for further information.

      </echo>
  </target>

  <target name="jimi-get" depends="prepare" unless="jimi-is-available">
    <!-- We are missing an URL for this. -->
    <get src="http://where.ever.jimi/is/residing/jimi-1.0.jar"
         dest="${jimi.jar.path}"
	 usetimestamp="true"
	 verbose="false"
	 ignoreerrors="true"/>

    <!-- Alternative solution:
    <get src="http://where.ever.jimi/is/residing/jimi-1.0.tar.Z"
         dest="${jimi.jar.path}"
	 usetimestamp="true"
	 verbose="false"
	 ignoreerrors="true"/>
    <unpack/>
    <build/>
    <move/>
     -->

    <!-- Check availability again - if the get worked, it will be there. -->
    <available file="${jimi.jar.path}" property="jimi-is-available"/>
  </target>


  <!-- =================================================================== -->
  <!-- pdf: Create PDF documentation                                       -->
  <!-- =================================================================== -->

  <target name="pdf" depends="prepare">
    <!-- Set switch for "create-pdf" target to ensure that it runs -->
    <property name="generate-pdf" value="true" />
    <!-- Call "internal-scheduler" target to start the process -->
    <antcall target="internal-scheduler"/>          
  </target>
  
  <!-- =================================================================== -->
  <!-- docs: Generates pdf and html documentation                          -->
  <!-- =================================================================== -->

  <target name="docs" depends="prepare">
    <!-- Set switch for pdf, defaulthtml and printablehtml builders       -->
    <property name="generate-defaulthtml" value="true" />
    <property name="generate-printablehtml" value="true" />
    <property name="generate-pdf" value="true" />
    <!-- Call "internal-scheduler" target to start the process -->
    <antcall target="internal-scheduler"/>    
  </target>
  
  <!-- =================================================================== -->
  <!-- internal-scheduler: Contains the definition of all the documents    -->
  <!--   that could possibly be built in this system.    -->
  <!--                                                                     -->
  <!--   Its function is to pass the details of the documents that it      -->
  <!--   knows to the target named "internal-dispatcher" one-at-a-time.    -->
  <!--                                                                     -->
  <!--   This is where the details of new documents are added and details  -->
  <!--   of old documents removed.                                         -->
  <!-- =================================================================== -->

  <target name="internal-scheduler">

    <!-- First we set up some properties to make our job easier     -->

    <property name="chunked.xsl"   
              value="../docbook-setup/create-chunked.xsl"/>

    <property name="printable.xsl"
              value="../docbook-setup/create-printable.xsl"/>

    <property name="pdf.xsl"
              value="../docbook-setup/create-pdf.xsl"/>

    <property name="javahelp.xsl"
              value="../docbook-setup/create-javahelp.xsl"/>

    <property name="imglist.xsl"
              value="../docbook-setup/create-imglist.xsl"/>


    <!-- Copy and change 'antcall' task below for additional DocBook
         documents

         <antcall target="internal-dispatcher">    
           <param name="doc.subdir"  value="javahelp"/>
           <param name="doc.prefix"  value="javahelp"/>
         </antcall>  -->

    <!-- The developers' cookbook -->

    <antcall target="internal-dispatcher">    
      <!-- sub-dir of 'documentation' with xml file -->
      <param name="doc.subdir"  value="cookbook"/>
      <!-- DocBook filename without xml extension   -->
      <param name="doc.prefix"  value="cookbook"/>
    </antcall>

    <!-- The quick guide -->

    <antcall target="internal-dispatcher">    
      <!-- sub-dir of 'documentation' with xml file -->
      <param name="doc.subdir"  value="quick-guide"/>
      <!-- DocBook filename without xml extension   -->
      <param name="doc.prefix"  value="quickguide"/>
    </antcall>

    <!-- The user manual -->

    <antcall target="internal-dispatcher">    
      <!-- sub-dir of 'documentation' with xml file -->
      <param name="doc.subdir"  value="manual"/>
      <!-- DocBook filename without xml extension   -->
      <param name="doc.prefix"  value="argomanual"/>
    </antcall>

  </target>
  
  <!-- =================================================================== -->
  <!-- internal-dispatcher: Sets up the correct environment for building   -->
  <!--   the documents and them dispatches the request to build to each    -->
  <!--   of the following targets:                                         -->
  <!--     create-defaulthtml:   for multi-page HTML                       -->
  <!--     create-printablehtml: for single-page HTML                      -->
  <!--     create-pdf:           for PDF output                            -->
  <!--                                                                     -->
  <!--   Each target is driven by a switch set in the top level target     -->
  <!--   that the user invoked.                                            -->
  <!--                                                                     -->
  <!--   This target does the following:                                   -->
  <!--     a. sets up relevant properties                                  -->
  <!--     b. copies the 'images' dir to 'source' dir                      -->
  <!--     c. calls 'create-XXXX' targets sequentially                     -->
  <!--     d. removes the previously copied 'images' dir                   -->
  <!-- =================================================================== -->

  <target name="internal-dispatcher">

    <!-- We copy the 'images' directory into our source directory.  (this is to
         allow each output directory to be self-contained).  Of course it also
         means that more space is used up by these multiple copies of the
         images directory.

         We try to determine what files image files are to be copied and copy
         only those. -->

    <echo message="Copying images for ${doc.prefix}.xml..."/>

    <java classname="com.icl.saxon.StyleSheet"
          fork="yes"
	  taskname="saxon"
          dir="${documentation.dir}/${doc.subdir}">
      <classpath>
        <path refid="saxon.classpath"/>
      </classpath>
      <arg value="${doc.prefix}.xml"/>
      <arg value="${imglist.xsl}"/>
    </java>

    <!-- Copy the image files to where we want them. Watch out for a nasty if
         there are no images, so imglist.txt is empty. The entire documentation
         tree would be copied in to the source directory! Quick fix is to
         always have at least one file, "tip.png". --> 

    <copy todir="${documentation.dir}/${doc.subdir}">
      <fileset dir="${documentation.dir}"
         includes="images/tip.png"
         includesfile="${documentation.dir}/${doc.subdir}/imglist.txt"/>
    </copy>

    <!-- Now invoke each of the targets. They will only do anything if their
         trigger (generate-XXX) has been set true earlier. -->

    <antcall target="create-defaulthtml">     
      <param name="source.dir"  value="${documentation.dir}/${doc.subdir}"/>
      <param name="source.xml"  value="${doc.prefix}.xml"/>
      <param name="source.xsl"  value="${chunked.xsl}"/>
      <param name="target.dir"  value="${defaulthtml.dir}/${doc.subdir}"/>
    </antcall>

    <antcall target="create-printablehtml">   
      <param name="source.dir"  value="${documentation.dir}/${doc.subdir}"/>
      <param name="source.xml"  value="${doc.prefix}.xml"/>
      <param name="source.xsl"  value="${printable.xsl}"/>
      <param name="target.dir"  value="${printablehtml.dir}/${doc.subdir}"/>
      <param name="target.html" value="${doc.prefix}.html"/>
    </antcall>

    <antcall target="create-pdf">     
      <param name="source.dir"  value="${documentation.dir}/${doc.subdir}"/>
      <param name="source.xml"  value="${doc.prefix}.xml"/>
      <param name="source.xsl"  value="${pdf.xsl}"/>
      <param name="source.fo"   value="${doc.prefix}.fo"/>
      <param name="target.dir"  value="${pdf.dir}/${doc.subdir}"/>
      <param name="target.pdf"  value="${doc.prefix}.pdf"/>
    </antcall>

    <antcall target="create-javahelp">        
      <param name="source.dir"  value="${documentation.dir}/${doc.subdir}"/>
      <param name="source.xml"  value="${doc.prefix}.xml"/>
      <param name="source.xsl"  value="${javahelp.xsl}"/>
      <param name="source.fo"   value="${doc.prefix}.fo"/>
      <param name="target.dir"  value="${javahelp.dir}/${doc.subdir}"/>
      <param name="target.javahelp"  value="${doc.prefix}.jh"/>
      <param name="target.jar"  value="${doc.subdir}.jar"/>
      <param name="target.hs"  value="${doc.subdir}.hs"/>
    </antcall>

    <!-- Delete the redundant images directory and list from the source
         directory  -->

    <delete dir="${documentation.dir}/${doc.subdir}/images"/>
    <delete file="${documentation.dir}/${doc.subdir}/imglist.txt" quiet="true"/>
  </target>
  
  <!-- =================================================================== -->
  <!-- create-defaulthtml: Generates the online, paged html documentation  -->
  <!-- =================================================================== -->

  <target name="create-defaulthtml" if="generate-defaulthtml">
    <mkdir dir="${target.dir}"/>

    <!-- Watch for the nasty - the base.dir MUST have a trailing / -->

    <echo message="Building chunked HTML for ${source.xml}..."/>

    <java classname="com.icl.saxon.StyleSheet"
          fork="yes"
	  taskname="saxon"
          dir="${source.dir}">
      <classpath>
        <path refid="saxon.classpath"/>
      </classpath>
      <arg value="${source.xml}"/>
      <arg value="${source.xsl}"/>
      <arg value="base.dir=${target.dir}/"/>
    </java>

    <!-- Delete spurious ld-*.html files created in the source directory. -->

    <delete>
      <fileset dir="${source.dir}" includes="ld-*.html" /> 
    </delete>

    <!-- Copy remaining stylesheets, images and static HTML also    -->

    <copy todir="${target.dir}">
      <fileset dir="${source.dir}" includes="*.html,*.css,images/**" /> 
    </copy>
  </target>
  
  <!-- =================================================================== -->
  <!-- create-printablehtml: Generates the printable html documentation    -->
  <!-- =================================================================== -->

  <target name="create-printablehtml" if="generate-printablehtml">
    <mkdir dir="${target.dir}"/>

    <echo message="Building single file HTML for ${source.xml}..."/>

    <java classname="com.icl.saxon.StyleSheet"
          fork="yes"
	  taskname="saxon"
          dir="${source.dir}">
      <classpath>
        <path refid="saxon.classpath"/>
      </classpath>
      <arg line="-o ${target.dir}/${target.html}"/>
      <arg value="${source.xml}"/>
      <arg value="${source.xsl}"/>
    </java>

    <!-- Delete spurious ld-*.html files created in the source directory. -->

    <delete>
      <fileset dir="${source.dir}" includes="ld-*.html" /> 
    </delete>

    <copy todir="${target.dir}">
      <fileset dir="${source.dir}" includes="*.html,*.css,images/**" />
    </copy>
  </target>
  
  <!-- =================================================================== -->
  <!-- create-pdf: Generates the pdf documentation       -->
  <!-- =================================================================== -->

  <target name="create-pdf" if="generate-pdf">
    <mkdir dir="${target.dir}"/>

    <!-- This could be an idea if jimi-1.0.jar were available anywhere.
      <antcall target="jimi-get"/>
     -->

    <echo message="Building Formatting Objects for ${source.xml}..."/>
    <antcall target="jimi-check"/>

    <java classname="com.icl.saxon.StyleSheet"
          fork="yes"
	  taskname="saxon"
          dir="${source.dir}">
      <classpath>
        <path refid="saxon.classpath"/>
      </classpath>
      <arg line="-o ${source.dir}/${source.fo}"/>
      <arg value="${source.xml}"/>
      <arg value="${source.xsl}"/>
    </java>

    <!-- Fop won't handle tables properly. Mangle the source.fo file
         in to a form where at least admonitions work. Get rid of this
         transformation once Fop is fixed.  -->

    <echo message="Patching up Fop data because of problems with Fop."/>
    <replace file="${source.dir}/${source.fo}">
      <replacetoken><![CDATA[<fo:table><fo:table-body]]></replacetoken>
      <replacevalue><![CDATA[<fo:table><fo:table-column column-width="1.5cm"/><fo:table-column column-width="14.0cm"/><fo:table-body]]></replacevalue>
    </replace>

    <!-- Invoke Fop on our terms. This is the only place we need more memory
         (for the user manual), so we invoke as a forked process with a bigger
         VM.

         You should check that the classpath reflects the library of the Fop
         build you are using (which should be copied in to $ARGO_HOME/lib).

         To process the PNG images in the manual, you will need to have built
         Fop from source using the Jimi library in your classpath, and also
         place a jar of the Jimi library (jimi-1.0.jar) in the
	 $ARGO_TOOLS/lib directory. If you don't do this, Fop
	 will complain each time it encounters a PNG image, and they will
	 not be included in the output. -->

    <echo message="Building PDF for ${source.fo}..."/>

    <java classname="org.apache.fop.apps.Fop"
          fork="yes"
          maxmemory="176M"
	  taskname="fop"
          dir="${source.dir}">
      <classpath>
        <pathelement location="${jimi.jar.path}"/>
        <pathelement location="${fop.build.dir}/fop-0.20.3-custom.jar"/>
        <pathelement location="${fop.lib.dir}/avalon-framework-4.0.jar"/>
        <pathelement location="${fop.lib.dir}/batik-1.1.jar"/>
        <pathelement location="${fop.lib.dir}/logkit-1.0.jar"/>
        <pathelement location="${fop.lib.dir}/xalan-2.0.0.jar"/>
        <pathelement location="${fop.lib.dir}/xalanj1compat.jar"/>
        <pathelement location="${xerces.jar.path}"/>         
      </classpath>
      <arg value="-q"/>
      <arg line="-fo ${source.dir}/${source.fo}"/>
      <arg line="-pdf ${target.dir}/${target.pdf}"/>
    </java>

<!--    <delete file="${source.dir}/${source.fo}"/> -->
    <antcall target="jimi-check"/>

  </target>

  <!-- =================================================================== -->
  <!-- create-javahelp: Generates the javahelp documentation         -->
  <!-- =================================================================== -->

  <target name="create-javahelp" if="generate-javahelp">
    <mkdir dir="${target.dir}"/>

    <!-- Watch for the nasty - the base.dir MUST have a trailing / -->

    <echo message="Building JavaHelp for ${source.xml}..."/>

    <java classname="com.icl.saxon.StyleSheet"
          fork="yes"
	  taskname="saxon"
          dir="${source.dir}">
      <classpath>
        <path refid="saxon.classpath"/>
      </classpath>
      <arg value="${source.xml}"/>
      <arg value="${javahelp.xsl}"/>
      <arg value="base.dir=${target.dir}/"/>
    </java>

    <!-- Delete spurious ld-*.html files created in the source directory. -->

    <delete>
      <fileset dir="${source.dir}" includes="ld-*.html" /> 
    </delete>

    <!-- Copy remaining stylesheets, images and static HTML also    -->

    <copy todir="${target.dir}">
      <fileset dir="${source.dir}" includes="jhelp*,*.html,*.css,images/**" /> 
    </copy>

    <move file="${target.dir}/jhelpset.hs"
          tofile="${target.dir}/${target.hs}"/>

    <jar jarfile="${argo.build.dir}/${target.jar}"
         basedir="${target.dir}"
         includes="**"
         excludes="*.jar"/>
  </target>
  
  
  <!-- =================================================================== -->
  <!-- dist: Creates the distribution. This is just the defaulthtml in zip -->
  <!--       and tar.gz versions                                           -->
  <!-- =================================================================== -->

  <target name="dist" depends="defaulthtml">

    <echo message="Building distribution files from ${defaulthtml.dir}..."/>

    <!-- The ZIP file -->

    <zip zipfile="${Name}-${argo.core.version}.zip" basedir="${defaulthtml.dir}"/>

    <!-- The tar.gz file -->

    <tar tarfile="${Name}-${argo.core.version}.tar" basedir="${defaulthtml.dir}"/>
    <gzip zipfile="${Name}-${argo.core.version}.tar.gz" src="${Name}-${argo.core.version}.tar"/>
    <delete file="${Name}-${argo.core.version}.tar"/>
  </target>


  <!-- =================================================================== -->
  <!-- Cleans up generated stuff                                           -->
  <!-- =================================================================== -->

  <target name="clean" depends="init">
    <delete dir="${argo.docs.output.dir}"/>
  </target>
  

  <!-- =================================================================== -->
  <!-- Total cleanup                                                       -->
  <!-- =================================================================== -->

  <target name="total-clean" depends="clean">
    <delete file="${Name}-${argo.core.version}.zip"/>
    <delete file="${Name}-${argo.core.version}.tar"/>
    <delete file="${Name}-${argo.core.version}.tar.gz"/>
  </target>       
</project>

