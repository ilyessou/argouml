<?xml version="1.0"?>
<!-- $Id$ -->
<!-- ArgoUML Manuals & Documentation Build file                             -->
<!-- Author: Kunle Odutola  31-March-2001                                   -->
<!--                                                                        -->
<!-- Modified: Jeremy Bennett, Thierry Lach, Linus Tolke                    -->
<!-- 

About this file
===============

This file is the build file for ArgoUML Manuals & Documentation. This
build file is designed to be read by ANT. See http://jakarta.apache.org/ant/

What tools do I need to use this build file?

  You need the following to be able to build the ArgoUML Manuals and
  Documentation:
  - The Java 2 SDK.
  - The ArgoUML manual's source files. This are available in the ArgoUML
    source repository in CVS.
  - Tool "Ant". This is available in the ArgoUML source repository in CVS.
  - The DocBook system (http://www.docbook.org/). Downloaded from this
    ant script using the target docbook-xsl-get.

  If you are going to build pdf versions you also need:
  - Tool "FOP". This is available in the ArgoUML source repository
    in CVS.
  - JIMI (see the fop readme file).

 -->

<project name="ArgoDocs" default="defaulthtml" basedir="..">

  <property name="argo.root.dir" value="${basedir}"/>
  <property file="${argo.root.dir}/documentation/build.properties"/>
  <property file="${user.home}/argouml.build.properties"/>
  <property file="${argo.root.dir}/documentation/default.properties"/>
  <property name="documentation.dir" value="${argo.root.dir}/documentation"/>

  <!-- The ambition is that there should be only one place where the
       docbook-xsl version is located. This would be it then.
       Currently this is not the case. The version is also in all the
       docbook-setup/create-blabla.xsl files so when you change this
       you need also to change those files. This is to be made as part 
       of the deployment of a new version of docbook-xsl.
    -->
  <property name="docbook-xsl" value="docbook-xsl-1.66.1"/>

  <property name="docbook-xsl-root" 
	    value="${documentation.dir}/docbook-setup/${docbook-xsl}"/>
  <property name="docbook-xsl-source-url"
            value="http://puzzle.dl.sourceforge.net/sourceforge/docbook/${docbook-xsl}.zip"/>

  <path id="saxon.classpath">
    <pathelement location="${saxon.jar.path}" />
  </path>

  <target name="init">
    <tstamp>
        <format property="year" pattern="yyyy"/>
    </tstamp>

    <property name="Name"              value="ArgoUML-docs"/>
    <property name="name"              value="argouml-docs"/>

    <echo message="--------------- ${Name} ${argo.core.version} [${year}] ------------"/>
    <echo message="Using ${ant.version}"/>


    <property name="printablehtml.dir" value="${argo.docs.output.dir}/printablehtml"/>
    <property name="defaulthtml.dir"   value="${argo.docs.output.dir}/defaulthtml"/>
    <property name="pdf.dir"           value="${argo.docs.output.dir}/pdf"/>
    <property name="javahelp.dir"      value="${argo.docs.output.dir}/javahelp"/>

    <available property="jimi-is-available"
               value="true"
	       classname="com.sun.jimi.core.Jimi">
        <classpath>
            <pathelement location="${jimi.jar.path}" />
	</classpath>
    </available>

<echo message="Testing for docbook-xsl: ${docbook-xsl-root}/xhtml/xref.xsl"/>
    <available property="docbook-xsl-is-available"
	       file="${docbook-xsl-root}/xhtml/xref.xsl"/>

  </target>

  <!-- =================================================================== -->
  <!-- Prepares the build directory                                        -->
  <!-- =================================================================== -->

  <target name="prepare" depends="init">
    <mkdir dir="${argo.build.dir}"/>
    <mkdir dir="${argo.docs.output.dir}"/>
    <mkdir dir="${defaulthtml.dir}"/>
    <mkdir dir="${printablehtml.dir}"/>
    <mkdir dir="${javahelp.dir}"/>
    <mkdir dir="${pdf.dir}"/>
  </target>
  
  <!-- =================================================================== -->
  <!-- defaulthtml: Create default HTML documentation                      -->
  <!-- =================================================================== -->

  <target name="defaulthtml" depends="prepare"
          description="Create documents in .../defaulthtml (chunked).">
    <!-- Set switch for create-defaulthtml target to ensure that it runs -->
    <property name="generate-defaulthtml" value="true" />
    <!-- Call "internal-scheduler" target to start the process -->
    <antcall target="internal-scheduler"/>    
  </target>

  <!-- =================================================================== -->
  <!-- printablehtml: Create printable HTML documentation                  -->
  <!-- =================================================================== -->

  <target name="printablehtml" depends="prepare"
          description="Create documents in .../printablehtml (one big file).">
    <!-- Set switch for create-printablehtml target to ensure that it runs -->
    <property name="generate-printablehtml" value="true" />
    <!-- Call "internal-scheduler" target to start the process -->
    <antcall target="internal-scheduler"/>    
  </target>
  

  <!-- =================================================================== -->
  <!-- javahelp: Create javahelp documentation                             -->
  <!-- =================================================================== -->

  <target name="javahelp" depends="prepare"
          description="Create javahelp documentation (currently not working).">
    <!-- Set switch for "create-javahelp" target to ensure that it runs -->
    <property name="generate-javahelp" value="true" />
    <!-- Call "internal-scheduler" target to start the process -->
    <antcall target="internal-scheduler"/>          
  </target>
  

  <!-- =================================================================== -->
  <!-- javahelp: Download jimi                                             -->
  <!-- =================================================================== -->

  <target name="jimi-check" depends="prepare" unless="jimi-is-available">
      <echo message="Jimi is not available.">

The Jimi file is not available. The pdf result will be poor since
most of the images cannot be included and you will get several
[fop] [ERROR]:-messages.

Please refer to the readme file in the tools/fop-0.20.3
directory for further information.

      </echo>
  </target>

  <target name="jimi-get" depends="prepare" unless="jimi-is-available">
    <!-- We are missing an URL for this. -->
    <get src="http://where.ever.jimi/is/residing/jimi-1.0.jar"
         dest="${jimi.jar.path}"
	 usetimestamp="true"
	 verbose="false"
	 ignoreerrors="true"/>

    <!-- Alternative solution:
    <get src="http://where.ever.jimi/is/residing/jimi-1.0.tar.Z"
         dest="${jimi.jar.path}"
	 usetimestamp="true"
	 verbose="false"
	 ignoreerrors="true"/>
    <unpack/>
    <build/>
    <move/>
     -->

    <!-- Check availability again - if the get worked, it will be there. -->
    <available file="${jimi.jar.path}" property="jimi-is-available"/>
  </target>


  <!-- =================================================================== -->
  <!-- javahelp: Download docbook-xsl                                      -->
  <!-- =================================================================== -->

  <target name="docbook-xsl-check" depends="prepare"
          unless="docbook-xsl-is-available">
      <fail message="docbook-xsl is not available.">

The docbook-xsl package is not available. It is not possible to generate the
documentation without it.

To get it, call ant with the docbook-xsl-get target.
      </fail>
  </target>

  <target name="docbook-xsl-get" depends="prepare"
          description="Download the docbook-xsl stylesheets."
 	  unless="docbook-xsl-is-available">
    <get src="${docbook-xsl-source-url}"
         dest="${documentation.dir}/docbook-setup/${docbook-xsl}.zip"
	 usetimestamp="true"
	 verbose="false"
	 ignoreerrors="true"/>

    <unzip src="${documentation.dir}/docbook-setup/${docbook-xsl}.zip"
           dest="${documentation.dir}/docbook-setup"/>

    <!-- Check availability again - if the get worked, it will be there. -->
    <available property="docbook-xsl-is-available"
	       file="${docbook-xsl-root}/xhtml/xref.xsl"/>

  </target>


  <!-- =================================================================== -->
  <!-- pdf: Create PDF documentation                                       -->
  <!-- =================================================================== -->

  <target name="pdf" depends="prepare"
          description="Create the pdf version of all documents (in .../pdf).">
    <!-- Set switch for "create-pdf" target to ensure that it runs -->
    <property name="generate-pdf" value="true" />
    <!-- Call "internal-scheduler" target to start the process -->
    <antcall target="internal-scheduler"/>          
  </target>
  
  <!-- =================================================================== -->
  <!-- docs: Generates pdf and html documentation                          -->
  <!-- =================================================================== -->

  <target name="docs" depends="prepare"
          description="Create all versions of all documents.">
    <!-- Set switch for pdf, defaulthtml and printablehtml builders       -->
    <property name="generate-defaulthtml" value="true" />
    <property name="generate-printablehtml" value="true" />
    <property name="generate-pdf" value="true" />
    <!-- Call "internal-scheduler" target to start the process -->
    <antcall target="internal-scheduler"/>    
  </target>
  
  <!-- =================================================================== -->
  <!-- internal-scheduler: Contains the definition of all the documents    -->
  <!--   that could possibly be built in this system.    -->
  <!--                                                                     -->
  <!--   Its function is to pass the details of the documents that it      -->
  <!--   knows to the target named "internal-dispatcher" one-at-a-time.    -->
  <!--                                                                     -->
  <!--   This is where the details of new documents are added and details  -->
  <!--   of old documents removed.                                         -->
  <!-- =================================================================== -->

  <target name="internal-scheduler">

    <antcall target="docbook-xsl-check"/>

    <!-- First we set up some properties to make our job easier     -->

    <property name="chunked.xsl"   
              value="../docbook-setup/create-chunked.xsl"/>

    <property name="printable.xsl"
              value="../docbook-setup/create-printable.xsl"/>

    <property name="pdf.xsl"
              value="../docbook-setup/create-pdf.xsl"/>

    <property name="preprocess-pdf.xsl"
              value="../docbook-setup/preprocess-pdf.xsl"/>

    <property name="javahelp.xsl"
              value="../docbook-setup/create-javahelp.xsl"/>

    <property name="imglist.xsl"
              value="../docbook-setup/create-imglist.xsl"/>


    <!-- Copy and change 'antcall' task below for additional DocBook
         documents

         <antcall target="internal-dispatcher">    
           <param name="doc.subdir"  value="javahelp"/>
           <param name="doc.prefix"  value="javahelp"/>
         </antcall>  -->

    <!-- The developers' cookbook -->

    <antcall target="internal-dispatcher">    
      <!-- sub-dir of 'documentation' with xml file -->
      <param name="doc.subdir"  value="cookbook"/>
      <!-- DocBook filename without xml extension   -->
      <param name="doc.prefix"  value="cookbook"/>
    </antcall>

    <!-- The quick guide -->

    <antcall target="internal-dispatcher">    
      <!-- sub-dir of 'documentation' with xml file -->
      <param name="doc.subdir"  value="quick-guide"/>
      <!-- DocBook filename without xml extension   -->
      <param name="doc.prefix"  value="quickguide"/>
    </antcall>

    <!-- The user manual -->

    <antcall target="internal-dispatcher">    
      <!-- sub-dir of 'documentation' with xml file -->
      <param name="doc.subdir"  value="manual"/>
      <!-- DocBook filename without xml extension   -->
      <param name="doc.prefix"  value="argomanual"/>
    </antcall>

  </target>
  
  <!-- =================================================================== -->
  <!-- internal-dispatcher: Sets up the correct environment for building   -->
  <!--   the documents and them dispatches the request to build to each    -->
  <!--   of the following targets:                                         -->
  <!--     create-defaulthtml:   for multi-page HTML                       -->
  <!--     create-printablehtml: for single-page HTML                      -->
  <!--     create-pdf:           for PDF output                            -->
  <!--                                                                     -->
  <!--   Each target is driven by a switch set in the top level target     -->
  <!--   that the user invoked.                                            -->
  <!--                                                                     -->
  <!--   This target does the following:                                   -->
  <!--     a. copies the file xxx.in to xxx.xml                            -->
  <!--     b. copies the used 'images' dir to 'source' dir                 -->
  <!--     c. calls 'create-XXXX' targets sequentially                     -->
  <!--     d. removes the previously copied 'images' dir                   -->
  <!--     e. removes the generated file                                   -->
  <!-- =================================================================== -->

  <target name="internal-dispatcher">

    <!-- We generate a property file. -->
    <copy file="${documentation.dir}/${doc.subdir}/${doc.prefix}.xml"
          tofile="${documentation.dir}/${doc.subdir}/${doc.prefix}-generated.xml">
      <filterset>
        <filter token="VERSION" value="${argo.core.version}"/>
      </filterset>
    </copy>

    <!-- We copy the 'images' directory into our source directory.  (this is to
         allow each output directory to be self-contained).  Of course it also
         means that more space is used up by these multiple copies of the
         images directory.

         We try to determine what files image files are to be copied and copy
         only those. -->

    <echo message="Copying images for ${doc.prefix}.xml..."/>

    <java classname="com.icl.saxon.StyleSheet"
          fork="yes"
	  taskname="saxon"
          dir="${documentation.dir}/${doc.subdir}">
      <classpath>
        <path refid="saxon.classpath"/>
      </classpath>
      <arg value="${doc.prefix}-generated.xml"/>
      <arg value="${imglist.xsl}"/>
    </java>

    <!-- Copy the image files to where we want them. Watch out for a nasty if
         there are no images, so imglist.txt is empty. The entire documentation
         tree would be copied in to the source directory! Quick fix is to
         always have at least one file, "tip.png". --> 

    <copy todir="${documentation.dir}/${doc.subdir}">
      <fileset dir="${documentation.dir}"
         includes="images/tip.png"
         includesfile="${documentation.dir}/${doc.subdir}/imglist.txt"/>
    </copy>

    <!-- Now invoke each of the targets. They will only do anything if their
         trigger (generate-XXX) has been set true earlier. -->

    <antcall target="create-defaulthtml">     
      <param name="source.dir"  value="${documentation.dir}/${doc.subdir}"/>
      <param name="source.xml"  value="${doc.prefix}-generated.xml"/>
      <param name="source.xsl"  value="${chunked.xsl}"/>
      <param name="target.dir"  value="${defaulthtml.dir}/${doc.subdir}"/>
    </antcall>

    <antcall target="create-printablehtml">   
      <param name="source.dir"  value="${documentation.dir}/${doc.subdir}"/>
      <param name="source.xml"  value="${doc.prefix}-generated.xml"/>
      <param name="source.xsl"  value="${printable.xsl}"/>
      <param name="target.dir"  value="${printablehtml.dir}/${doc.subdir}"/>
      <param name="target.html" value="${doc.prefix}.html"/>
    </antcall>

    <antcall target="create-pdf">     
      <param name="source.dir"  value="${documentation.dir}/${doc.subdir}"/>
      <param name="source.xml"  value="${doc.prefix}-generated.xml"/>
      <param name="source.xsl"  value="${pdf.xsl}"/>
      <param name="preprocess.xsl"  value="${preprocess-pdf.xsl}"/>
      <param name="source.fo"   value="${doc.prefix}.fo"/>
      <param name="target.dir"  value="${pdf.dir}/${doc.subdir}"/>
      <param name="target.pdf"  value="${doc.prefix}.pdf"/>
    </antcall>

    <antcall target="create-javahelp">        
      <param name="source.dir"  value="${documentation.dir}/${doc.subdir}"/>
      <param name="source.xml"  value="${doc.prefix}-generated.xml"/>
      <param name="source.xsl"  value="${javahelp.xsl}"/>
      <param name="source.fo"   value="${doc.prefix}.fo"/>
      <param name="target.dir"  value="${javahelp.dir}/${doc.subdir}"/>
      <param name="target.javahelp"  value="${doc.prefix}.jh"/>
      <param name="target.jar"  value="${doc.subdir}.jar"/>
      <param name="target.hs"  value="${doc.subdir}.hs"/>
    </antcall>

    <!-- Delete the redundant images directory and list from the source
         directory  -->

    <delete dir="${documentation.dir}/${doc.subdir}/images"/>
    <delete file="${documentation.dir}/${doc.subdir}/imglist.txt" quiet="true"/>
    <delete file="${documentation.dir}/${doc.subdir}/${doc.prefix}-generated.xml"/>
  </target>
  
  <!-- =================================================================== -->
  <!-- create-defaulthtml: Generates the online, paged html documentation  -->
  <!-- =================================================================== -->

  <target name="create-defaulthtml" if="generate-defaulthtml">
    <mkdir dir="${target.dir}"/>

    <!-- Watch for the nasty - the base.dir MUST have a trailing / -->

    <echo message="Building chunked HTML for ${source.xml}..."/>

    <java classname="com.icl.saxon.StyleSheet"
          fork="yes"
	  taskname="saxon"
          dir="${source.dir}">
      <classpath>
        <path refid="saxon.classpath"/>
      </classpath>
      <arg value="${source.xml}"/>
      <arg value="${source.xsl}"/>
      <arg value="base.dir=${target.dir}/"/>
    </java>

    <!-- Delete spurious ld-*.html files created in the source directory. -->

    <delete>
      <fileset dir="${source.dir}" includes="ld-*.html" /> 
    </delete>

    <!-- Copy remaining stylesheets, images and static HTML also    -->

    <copy todir="${target.dir}">
      <fileset dir="${source.dir}" includes="*.html,*.css,images/**" /> 
    </copy>
  </target>
  
  <!-- =================================================================== -->
  <!-- create-printablehtml: Generates the printable html documentation    -->
  <!-- =================================================================== -->

  <target name="create-printablehtml" if="generate-printablehtml">
    <mkdir dir="${target.dir}"/>

    <echo message="Building single file HTML for ${source.xml}..."/>

    <java classname="com.icl.saxon.StyleSheet"
          fork="yes"
	  taskname="saxon"
          dir="${source.dir}">
      <classpath>
        <path refid="saxon.classpath"/>
      </classpath>
      <arg line="-o '${target.dir}/${target.html}'"/>
      <arg value="${source.xml}"/>
      <arg value="${source.xsl}"/>
    </java>

    <!-- Delete spurious ld-*.html files created in the source directory. -->

    <delete>
      <fileset dir="${source.dir}" includes="ld-*.html" /> 
    </delete>

    <copy todir="${target.dir}">
      <fileset dir="${source.dir}" includes="*.html,*.css,images/**" />
    </copy>
  </target>
  
  <!-- =================================================================== -->
  <!-- create-pdf: Generates the pdf documentation       -->
  <!-- =================================================================== -->

  <target name="create-pdf" if="generate-pdf">
    <mkdir dir="${target.dir}"/>

    <!-- This could be an idea if jimi-1.0.jar were available anywhere.
      <antcall target="jimi-get"/>
     -->

    <echo message="Building Formatting Objects for ${source.xml}..."/>
    <antcall target="jimi-check"/>

    <!-- preprocess the document for fop 0.20.5:
         execute the stylesheet preprocess-pdf.xsl in docbook-setup/
         on the xml source
         The output is written to ${source.xml}.prep, which is
         picked up by the next step in the processing chain.
      -->
    <java classname="com.icl.saxon.StyleSheet"
          fork="yes"
	  taskname="saxon"
          dir="${source.dir}">
      <classpath>
        <path refid="saxon.classpath"/>
      </classpath>
      <arg line='-o "${source.dir}/${source.xml}.prep"'/>
      <arg value="${source.xml}"/>
      <arg value="${preprocess.xsl}"/>
    </java>


    <java classname="com.icl.saxon.StyleSheet"
          fork="yes"
	  taskname="saxon"
          dir="${source.dir}">
      <classpath>
        <path refid="saxon.classpath"/>
      </classpath>
      <arg line='-o "${source.dir}/${source.fo}"'/>
      <arg value="${source.xml}.prep"/>
      <arg value="${source.xsl}"/>
    </java>

    <!-- Invoke Fop on our terms. This is the only place we need more memory
         (for the user manual), so we invoke as a forked process with a bigger
         VM.

         You should check that the classpath reflects the library of the Fop
         build you are using (which should be copied in to $ARGO_HOME/lib).

         To process the PNG images in the manual, you will need to have built
         Fop from source using the Jimi library in your classpath, and also
         place a jar of the Jimi library (jimi-1.0.jar) in the
	 $ARGO_TOOLS/lib directory. If you don't do this, Fop
	 will complain each time it encounters a PNG image, and they will
	 not be included in the output. -->

    <echo message="Building PDF for ${source.fo}..."/>
    <java classname="org.apache.fop.apps.Fop"
          maxmemory="176M"
          fork="yes"
	  taskname="fop"
          dir="${source.dir}">
      <classpath>
        <pathelement location="${jimi.jar.path}"/>
        <pathelement location="${fop.build.dir}/fop.jar"/>
        <pathelement location="${fop.lib.dir}/avalon-framework-cvs-20020806.jar"/>
        <pathelement location="${fop.lib.dir}/batik.jar"/>
        <pathelement location="${fop.lib.dir}/xalan-2.4.1.jar"/>
        <pathelement location="${fop.lib.dir}/xml-apis.jar"/>
        <pathelement location="${xerces.jar.path}"/>         
      </classpath>
      <!-- Idea 1: Change the -q to -d when you are trouble-shooting. -->
      <arg value="-q"/>
      <arg line='-fo "${source.dir}/${source.fo}"'/>
      <arg line='-pdf "${target.dir}/${target.pdf}"'/>
    </java>

    <!-- Idea 2: Comment the delete out so you can look at the .fo file. -->
    <delete file="${source.dir}/${source.fo}"/>
    <delete file="${source.dir}/${source.xml}.prep"/>
    <antcall target="jimi-check"/>

  </target>

  <!-- =================================================================== -->
  <!-- create-javahelp: Generates the javahelp documentation         -->
  <!-- =================================================================== -->

  <target name="create-javahelp" if="generate-javahelp">
    <mkdir dir="${target.dir}"/>

    <!-- Watch for the nasty - the base.dir MUST have a trailing / -->

    <echo message="Building JavaHelp for ${source.xml}..."/>

    <java classname="com.icl.saxon.StyleSheet"
          fork="yes"
	  taskname="saxon"
          dir="${source.dir}">
      <classpath>
        <path refid="saxon.classpath"/>
      </classpath>
      <arg value="${source.xml}"/>
      <arg value="${javahelp.xsl}"/>
      <arg value="base.dir=${target.dir}/"/>
    </java>

    <!-- Delete spurious ld-*.html files created in the source directory. -->

    <delete>
      <fileset dir="${source.dir}" includes="ld-*.html" /> 
    </delete>

    <!-- Copy remaining stylesheets, images and static HTML also    -->

    <copy todir="${target.dir}">
      <fileset dir="${source.dir}" includes="jhelp*,*.html,*.css,images/**" /> 
    </copy>

    <move file="${target.dir}/jhelpset.hs"
          tofile="${target.dir}/${target.hs}"/>

    <jar jarfile="${argo.build.dir}/${target.jar}"
         basedir="${target.dir}"
         includes="**"
         excludes="*.jar"/>
  </target>
  
  
  <!-- =================================================================== -->
  <!-- dist: Creates the distribution. This is just the defaulthtml in zip -->
  <!--       and tar.gz versions                                           -->
  <!-- =================================================================== -->

  <target name="dist" depends="defaulthtml"
          description="Build together a distribution of the chunked html.">

    <echo message="Building distribution files from ${defaulthtml.dir}..."/>

    <!-- The ZIP file -->

    <zip zipfile="${Name}-${argo.core.version}.zip" basedir="${defaulthtml.dir}"/>

    <!-- The tar.gz file -->

    <tar tarfile="${Name}-${argo.core.version}.tar" basedir="${defaulthtml.dir}"/>
    <gzip zipfile="${Name}-${argo.core.version}.tar.gz" src="${Name}-${argo.core.version}.tar"/>
    <delete file="${Name}-${argo.core.version}.tar"/>
  </target>


  <!-- =================================================================== -->
  <!-- Cleans up generated stuff                                           -->
  <!-- =================================================================== -->

  <target name="clean" depends="init"
          description="Remove the generated files.">
    <delete dir="${argo.docs.output.dir}"/>
  </target>
  

  <!-- =================================================================== -->
  <!-- Total cleanup                                                       -->
  <!-- =================================================================== -->

  <target name="total-clean" depends="clean">
    <delete file="${Name}-${argo.core.version}.zip"/>
    <delete file="${Name}-${argo.core.version}.tar"/>
    <delete file="${Name}-${argo.core.version}.tar.gz"/>
  </target>       
</project>

