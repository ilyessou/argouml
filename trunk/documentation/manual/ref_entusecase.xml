<?xml version="1.0" encoding="ISO-8859-1"?>

<!--

Description of all the artifacts associated with use case diagrams within
Argo/UML.


Modifications
=============

 5 Dec 2001:  Jeremy Bennett. Created as a new chapter.

19 Mar 2002:  Jeremy Bennett. Changed all tables to variablelists to fix
              problems with generating PDF.

 4 Apr 2002:  Jeremy Bennett. Updated details for actor and use case to show
              new popup menus and fields to support include, extend and
              extension points for 0.9.8.

18 Apr 2002:  Jeremy Bennett. Incorporated comments from Bob Marcum,
              particularly relating to "limitations" section.

-->

<chapter id="ch.ref.entusecase">
  <title>&argouml; Use Case Diagram Artifact Reference</title>

  <sect1>
    <title>Introduction</title>

    <para>This chapter describes each artifact that can be created within a use
      case diagram. Note that some sub-artifacts of artifacts on the diagram
      may not actually themselves appear on the diagram.</para>

    <para>There is a close relationship between this material and the
      properties tab of the details pane (see
      <xref linkend="s1.ref.proptab"/>). That section covers properties in
      general, in this chapter they are linked to specific artifacts.</para>

    <!-- A diagram to show all things visible on the diagram -->

    <para><xref linkend="fig.ref.use_case_diagram"/> shows a use case diagram
      with all possible artifacts displayed.</para>

    <!-- This should be a comprehensive picture. In fact its just the minimum
         at the moment. It would be good to put some bubbles on this one
         pointing things out as well. -->

    <figure id="fig.ref.use_case_diagram" float="1">
      <title>Possible artifacts on a use case diagram.</title>

      <screenshot><mediaobject>
        <imageobject>
          <imagedata format="GIF" align="center"
                     fileref="images/reference/use_case_diagram.gif"/>
        </imageobject>
      </mediaobject></screenshot>
    </figure>

    <!-- Limitations in Argo/UML relating to display of extension points. -->

    <sect2>
      <title>&argouml; Limitations Concerning Use Case Diagrams</title>

      <para>Use case diagrams are now well supported within &argouml;. The min
        outstanding limitation is that extension points cannot be shown in a
        separate compartment on the use case.</para>

      <caution><para>Earlier versions of &argouml; implemented extend and
        include relationships by using a stereotyped dependency
        relationship. Although such diagrams will show correctly on the
        diagram, they will not link correctly to the use cases, and should be
        replaced by proper extend and include relationships using the current
        system.</para></caution>
    </sect2>
  </sect1>

  <!-- Artifacts specific to use case diagrams. Actor -->

  <sect1 id="s1.ref.actor">
    <title>Actor</title>

    <para>An actor represents any external entity (human or machine) that
      interacts with the system, providing input, receiving output, or
      both.</para>

    <para>Within the UML metamodel, actor is a sub-class of
     <literal>classifier</literal>.</para>

    <para>The actor icon is a stick man (see <xref
      linkend="fig.ref.use_case_diagram"/>).</para>

    <!-- The details tabs -->

    <sect2>
      <title>Actor Details Tabs</title>

      <para>The details tabs that are active for actors are as
        follows.</para>

      <variablelist>

        <!-- Entry for ToDoItem tab -->

        <varlistentry>
          <term><literal>ToDoItem</literal></term>

          <listitem><para>Standard tab.</para></listitem>
        </varlistentry>

        <!-- Entry for Properties tab -->

        <varlistentry>
          <term><literal>Properties</literal></term>

          <listitem><para>See <xref linkend="s2.ref.actor_property_toolbar"/>
            and <xref linkend="s2.ref.actor_property_fields"/>
            below.</para></listitem>
        </varlistentry>

        <!-- Entry for Documentation tab -->

        <varlistentry>
          <term><literal>Documentation</literal></term>

          <listitem><para>Standard tab.</para></listitem>
        </varlistentry>

        <!-- Entry for Style tab -->

        <varlistentry>
          <term><literal>Style</literal></term>

          <listitem><para>Standard tab. Fill color is used for the stick
            man's head.</para></listitem>
        </varlistentry>

        <!-- Entry for Source tab -->

        <varlistentry>
          <term><literal>Source</literal></term>

          <listitem><para>Standard tab. It would not be usual to provide any
            code for an actor, since it is external to the
            system.</para>

          <note><para>The source tab content can be changed, but this has
            no effect.</para></note></listitem>
        </varlistentry>

        <!-- Entry for Constraints tab -->

        <varlistentry>
          <term><literal>Constraints</literal></term>

          <listitem><para>Standard tab. There are no standard constraints
            defined for <literal>Actor</literal> within the UML
            metamodel.</para></listitem>
        </varlistentry>

        <!-- Entry for Tagged Values tab -->

        <varlistentry>
          <term><literal>Tagged Values</literal></term>

          <listitem><para>Standard tab. In the UML metamodel,
            <literal>Actor</literal> has the following standard tagged
            values defined.</para>

            <itemizedlist>
              <listitem><para><literal>persistence</literal> (from the
                superclass, <literal>Classifier</literal>). Values
                <literal>transitory</literal>, indicating state is
                destroyed when an instance is destroyed or
                <literal>persistent</literal>, marking state is
                preserved when an instance is destroyed.</para>

              <tip><para>Actors sit outside the system, and so their
                internal behavior is of little concern, and this tagged
                value is best ignored.</para></tip></listitem>

              <listitem><para><literal>semantics</literal> (from the
                superclass, <literal>Classifier</literal>). The value is a
                specification of the semantics of the
                actor.</para></listitem>

              <listitem><para><literal>derived</literal> (from the
                superclass, <literal>ModelElement</literal>). Values
                <literal>true</literal>, meaning the actor is
                redundant&mdash;it can be formally derived from other
                elements, or <literal>false</literal> meaning it
                cannot.</para>

              <note><para>Derived actors have limited value, since they sit
                outside the system being designed. They may have their
                value in analysis to introduce useful names or
                concepts.</para></note></listitem>
            </itemizedlist>

            <note><para>The UML <literal>Element</literal> metaclass from
              which all other artifacts are derived includes the tagged
              element <literal>documentation</literal> which is handled by
              the <emphasis>documentation tab</emphasis> under
              &argouml;</para></note></listitem>
        </varlistentry>

      </variablelist>
    </sect2>

    <!-- Actor properties -->

    <sect2 id="s2.ref.actor_property_toolbar">
      <title>Actor Property Toolbar</title>

      <variablelist>

        <!-- Entry for Go up button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/navigate_up.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Go
            up</literal></term>

          <listitem><para>Navigate up through the package structure of the
            model.</para></listitem>
        </varlistentry>

        <!-- Entry for Go back button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/navigate_back.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Go
            back</literal></term>

          <listitem><para>Navigate back to the previous
            artifact.</para>

          <warning><para>This feature is currently broken within &argouml;
            and there is no guarantee where (if anywhere) this button will
            take you.</para></warning></listitem>
        </varlistentry>

        <!-- Entry for Go forward button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/navigate_forward.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Go
            forward</literal></term>

          <listitem><para>Navigate forward to the next
            artifact.</para>

          <warning><para>This feature is currently broken within &argouml;
            and there is no guarantee where (if anywhere) this button will
            take you.</para></warning></listitem>
        </varlistentry>

        <!-- Entry for Add actor button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/actor.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Add
            actor</literal></term>

          <listitem><para>This creates a new actor within the model, (but not
            within the diagram), navigating immediately to the
            properties tab for that actor.</para>

          <tip><para>This method of creating new actors can be
            confusing. Much better to create them within diagrams where you
            want them.</para></tip></listitem>
        </varlistentry>

        <!-- Entry for Delete button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/property_delete.gif"/>
          </imageobject></inlinemediaobject></guiicon>
            <literal>Delete</literal></term>

          <listitem><para>This deletes the selected actor from the
            model.</para>

          <warning><para>This is a deletion from the model
            <emphasis>not</emphasis> just the diagram. To delete an actor
            from the diagram, but keep it within the model, use the main
            menu <literal>Edit/Remove From Diagram</literal>
            (Ctrl-R).</para></warning></listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <!-- Fields in the properties tab -->

    <sect2 id="s2.ref.actor_property_fields">
      <title>Property Fields For Actor</title>

      <variablelist>

        <!-- Entry for Name -->

        <varlistentry>
          <term><literal>Name</literal></term>

          <listitem><para>Text box. The name of the actor. Since an actor is a
            classifier, it would be conventional to Capitalize the first
            letter (and initial letters of any component words),
            e.g. <literal>RemoteSensor</literal>.</para>

          <note><para>&argouml; does not enforce any naming convention for
            actors</para></note></listitem>
        </varlistentry>

        <!-- Entry for Stereotype -->

        <varlistentry>
          <term><literal>Stereotype</literal></term>

          <listitem><para>Drop down selector. Actor is provided by default with
            the UML standard stereotypes (<literal>metaclass</literal>,
            <literal>powertype</literal>, <literal>process</literal>,
            <literal>thread</literal>, <literal>utility</literal>) for
            classifiers. &argouml; also provides the additional stereotypes,
            <literal>machine</literal>, <literal>organization</literal>,
            <literal>person</literal> and
            <literal>singleton</literal>. Stereotypes are of limited value
            with actors, but these last three are probably of most
            use.</para></listitem>
        </varlistentry>

        <!-- Entry for NavStereo -->

        <varlistentry>
          <term><literal>Navigate Stereotype</literal></term>

          <listitem><para><guiicon><inlinemediaobject><imageobject><imagedata
              format="GIF" align="center"
              fileref="images/icons/navigate_stereotype.gif"/>
            </imageobject></inlinemediaobject></guiicon> icon. If a
              stereotype has been selected, this will navigate you to the
              stereotype property panel (see <xref
                linkend="s1.ref.stereotype"/>).</para></listitem>
        </varlistentry>

        <!-- Entry for Namespace -->

        <varlistentry>
          <term><literal>Namespace</literal></term>

          <listitem><para>Text box. Records the namespace for the actor. This
            is the package hierarchy.</para>

          <para>&Button1; click on the entry will take you to the package
            defining this namespace (or the model for the top level
            namespace).</para></listitem>
        </varlistentry>

        <!-- Entry for Modifiers -->

        <varlistentry>
          <term><literal>Modifiers</literal></term>

          <listitem><para>Check box, with entries <literal>Abstract</literal>,
            <literal>Final</literal> and <literal>Root</literal>.</para>

          <itemizedlist>
            <listitem><para><literal>abstract</literal> is used to declare
              that this actor cannot be instantiated, but must always be
              specialized.</para>

            <caution><para>While actors can be specialized and
              generalized, it is not clear that an abstract actor has any
              meaning. Perhaps it might be used to indicate an actor that
              does not itself interact with a use case, but whose children
              do.</para></caution></listitem>

            <listitem><para><literal>final</literal> indicates that this
              actor can have no further children, while
              <literal>root</literal> indicates it is a top level
              actor with no parent.</para></listitem>
          </itemizedlist></listitem>
        </varlistentry>

        <!-- Entry for Generalizations -->

        <varlistentry>
          <term><literal>Generalizations</literal></term>

          <listitem><para>Text area. Lists any actor that
            <emphasis>generalizes</emphasis> this actor.</para>

          <para>&Button1; click navigates to the generalization and opens
            its property tab.</para>

          <para>&Button2; click yields a drop down menu with five
            entries</para>

          <itemizedlist>
            <listitem><para><literal>Open</literal>. Navigate to the
              selected generalization.</para></listitem>

            <listitem><para><literal>Add</literal>. Add a new
              generalization. Note that the new generalization is added to
              the model, but not the diagram. You will need to find it in
              the navigation pane and add it from there.</para>

            <tip><para>It is far easier to add generalizations by drawing
              them on the relevant diagram in the editing
              pane.</para></tip></listitem>

            <listitem><para><literal>Delete</literal>. The link from the
              generalization to the actor (<emphasis>but not the
              generalization itself</emphasis>) is removed.</para>

            <tip><para>This <emphasis>does not</emphasis> remove the
              generalization from the model or the diagram, leading to
              potentially very confusing diagrams. It is usually far easier
              to remove generalizations from the editing
              pane.</para></tip></listitem>

            <listitem><para><literal>Move Up</literal>. Only available where
              there are two or more generalizations listed, and the
              generalization selected is not at the top. It is moved one up the
              list.</para></listitem>

            <listitem><para><literal>Move Down</literal>. Only available where
              there are two or more generalizations listed, and the
              generalization selected is not at the bottom. It is moved one
              down the list.</para></listitem>
          </itemizedlist></listitem>
        </varlistentry>

        <!-- Entry for Specializations -->

        <varlistentry>
          <term><literal>Specializations</literal></term>

          <listitem><para>Text box. Lists any specialized actor (i.e. for which
            this actor is a generalization. The specialized actors can
            communicate with the same use case instances as this actor.</para>

          <para>&button1; click navigates to the generalization and opens
            its property tab.</para>

          <para>&Button2; click yields a drop down menu with five
            entries</para>

          <itemizedlist>
            <listitem><para><literal>Open</literal>. Navigate to the
              selected generalization.</para></listitem>

            <listitem><para><literal>Add</literal>. Add a new
              generalization. Note that the new generalization is added to
              the model, but not the diagram.</para>

            <tip><para>It is far easier to add generalizations by drawing
              them on the relevant diagram in the editing
              pane.</para></tip></listitem>

            <listitem><para><literal>Delete</literal>. The link from the
              generalization to the actor (<emphasis>but not the
              generalization itself</emphasis>) is removed.</para>

            <tip><para>This <emphasis>does not</emphasis> remove the
              generalization from the model or the diagram, leading to
              potentially very confusing diagrams. It is usually far easier
              to remove generalizations from the editing
              pane.</para></tip></listitem>

            <listitem><para><literal>Move Up</literal>. Only available where
              there are two or more specializations listed, and the
              specialization selected is not at the top. It is moved one up the
              list.</para></listitem>

            <listitem><para><literal>Move Down</literal>. Only available where
              there are two or more specializations listed, and the
              specialization selected is not at the bottom. It is moved one
              down the list.</para></listitem>
          </itemizedlist></listitem>
        </varlistentry>

        <!-- Entry for Associations -->

        <varlistentry>
          <term><literal>Associations</literal></term>

          <listitem><para>Text area. Lists any associations connected to the
            actor. &Button1; click on an association will navigate to
            that association. &Button2; click gives a pop up menu with
            five options.</para>

          <itemizedlist>
            <listitem><para><literal>Open</literal>. Where a navigation
              exists, navigate to it.</para></listitem>

            <listitem><para><literal>Add</literal>. Add a new
              association. Note that the new association is added to the
              model, but not the diagram. You will need to find it in the
              navigation pane and add it from there.</para>

            <tip><para>It is far easier to add associations by drawing them
              on the relevant diagram in the editing
              pane.</para></tip></listitem>

            <listitem><para><literal>Delete</literal>. Where an association
              is linked to this actor, this removes the link to the
              actor.</para>

            <tip><para>This <emphasis>does not</emphasis> remove the
              association from the model or the diagram, leading to
              potentially very confusing diagrams. It is usually far easier
              to remove associations from the editing
              pane.</para></tip></listitem>

            <listitem><para><literal>Move Up</literal>. Only available
             where there are two or more associations listed, and the
             association selected is not at the top. It is moved one up the
             list.</para></listitem>

            <listitem><para><literal>Move Down</literal>. Only available
             where there are two or more associations listed, and the
             association selected is not at the bottom. It is moved one
             down the list.</para></listitem>
          </itemizedlist></listitem>
        </varlistentry>

        <!-- Entry for Implements -->

        <varlistentry>
          <term><literal>Implements</literal></term>

          <listitem><para>Text area. Listing the classes that are implemented
            by this actor. Although it is possible to create an abstraction
            through a &button2; pop up menu, this makes no sense for an
            actor.</para></listitem>
        </varlistentry>
      </variablelist>
    </sect2>
  </sect1>

  <!-- use case -->

  <sect1 id="s1.ref.use_case">
    <title>Use Case</title>

    <para>A use case represents a complete meaningful <quote>chunk</quote> of
      activity by the system in relation to its external users (actors), human
      or machine. It represents the primary route through which requirements
      are captured for the system under construction</para>

    <para>Within the UML metamodel, use case is a sub-class of
     <literal>classifier</literal>.</para> 

    <para>The use case icon is an oval (see <xref
      linkend="fig.ref.use_case_diagram"/>).</para>

    <!-- The details tabs -->

    <sect2>
      <title>Use Case Details Tabs</title>

      <para>The details tabs that are active for use cases are as
        follows.</para>

      <variablelist>

        <!-- Entry for ToDoItem tab -->

        <varlistentry>
          <term><literal>ToDoItem</literal></term>

          <listitem><para>Standard tab.</para></listitem>
        </varlistentry>

        <!-- Entry for Properties tab -->

        <varlistentry>
          <term><literal>Properties</literal></term>

          <listitem><para>See <xref
              linkend="s2.ref.use_case_property_toolbar"/> and <xref
              linkend="s2.ref.use_case_property_fields"/>
            below.</para></listitem>
        </varlistentry>

        <!-- Entry for Documentation tab -->

        <varlistentry>
          <term><literal>Documentation</literal></term>

          <listitem><para>Standard tab.</para></listitem>
        </varlistentry>

        <!-- Entry for Style tab -->

        <varlistentry>
          <term><literal>Style</literal></term>

          <listitem><para>Standard tab. Fill color is used for the use case
            oval.</para></listitem> 
        </varlistentry>

        <!-- Entry for Source tab -->

        <varlistentry>
          <term><literal>Source</literal></term>

          <listitem><para>Standard tab. It would not be usual to provide any
            code for a use case, since it is primarily a vehicle for
            capturing requirements about the system under construction, not
            creating the solution.</para></listitem>
        </varlistentry>

        <!-- Entry for Constraints tab -->

        <varlistentry>
          <term><literal>Constraints</literal></term>

          <listitem><para>Standard tab. There are no standard constraints
            defined for <literal>UseCase</literal> within the UML
            metamodel.</para></listitem>
        </varlistentry>

        <!-- Entry for Tagged Values tab -->

        <varlistentry>
          <term><literal>Tagged Values</literal></term>

          <listitem><para>Standard tab. In the UML metamodel,
            <literal>UseCase</literal> has the following standard tagged
            values defined.</para>

            <itemizedlist>
              <listitem><para><literal>persistence</literal> (from the
                superclass, <literal>Classifier</literal>). Values
                <literal>transitory</literal>, indicating state is
                destroyed when an instance is destroyed or
                <literal>persistent</literal>, marking state is
                preserved when an instance is destroyed.</para>

              <tip><para>In general the instantiation of use cases is not a
                major aspect of any design method (they are mostly
                concerned with requirements capture. For most &ooad;
                methodologies, this tag can safely be
                ignored.</para></tip></listitem>

              <listitem><para><literal>semantics</literal> (from the
                superclass, <literal>Classifier</literal>). The value is a
                specification of the semantics of the
                use case.</para></listitem>

              <listitem><para><literal>derived</literal> (from the
                superclass, <literal>ModelElement</literal>). Values
                <literal>true</literal>, meaning the use case is
                redundant&mdash;it can be formally derived from other
                elements, or <literal>false</literal> meaning it
                cannot.</para>

              <note><para>Derived use cases still have their value in
                analysis to introduce useful names or
                concepts.</para></note></listitem>
            </itemizedlist>

            <note><para>The UML <literal>Element</literal> metaclass from
              which all other artifacts are derived includes the tagged
              element <literal>documentation</literal> which is handled by
              the <emphasis>documentation tab</emphasis> under
              &argouml;</para></note></listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <!-- Use case properties -->

    <sect2 id="s2.ref.use_case_property_toolbar">
      <title>Use Case Property Toolbar</title>

      <variablelist>

        <!-- Entry for Go up button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/navigate_up.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Go
            up</literal></term>

          <listitem><para>Navigate up through the package structure of the
            model.</para></listitem>
        </varlistentry>

        <!-- Entry for Go back button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/navigate_back.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Go
            back</literal></term>

          <listitem><para>Navigate back to the previous
            artifact.</para>

          <warning><para>This feature is currently broken within &argouml;
            and there is no guarantee where (if anywhere) this button will
            take you.</para></warning></listitem>
        </varlistentry>

        <!-- Entry for Go forward button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/navigate_forward.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Go
            forward</literal></term>

          <listitem><para>Navigate forward to the next
            artifact.</para>

          <warning><para>This feature is currently broken within &argouml;
            and there is no guarantee where (if anywhere) this button will
            take you.</para></warning></listitem>
        </varlistentry>

        <!-- Entry for Add use case button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/use_case.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Add use
            case</literal></term>

          <listitem><para>This creates a new use case within the model, (but
            not within the diagram), navigating immediately to the
            properties tab for that use case.</para>

          <tip><para>This method of creating new use cases can be
            confusing. Much better to create them within diagrams where you
            want them.</para></tip></listitem>
        </varlistentry>

        <!-- Entry for Add extension point button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/extension_point.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Add extension
            point</literal></term>

          <listitem><para>This creates a new use extension point within the
            namespace of the current use case, with the current use case as its
            associated use case, navigating immediately to the properties tab
            for that extension point.</para></listitem>
        </varlistentry>

        <!-- Entry for Delete button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/property_delete.gif"/>
          </imageobject></inlinemediaobject></guiicon>
            <literal>Delete</literal></term>

          <listitem><para>This deletes the selected use case from the
            model.</para>

          <warning><para>This is a deletion from the model
            <emphasis>not</emphasis> just the diagram. To delete a use case
            from the diagram, but keep it within the model, use the main
            menu <literal>Edit/Remove From Diagram</literal>
            (Ctrl-R).</para></warning></listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <!-- Fields in the properties tab -->

    <sect2 id="s2.ref.use_case_property_fields">
      <title>Property Fields For Use Case</title>

      <variablelist>

        <!-- Entry for Name -->

        <varlistentry>
          <term><literal>Name</literal></term>

          <listitem><para>Text box. The name of the use case. Since a use case
            is a classifier, it would be conventional to Capitalize the
            first letter (and initial letters of any component words),
            e.g. <literal>RemoteSensor</literal>.</para>

          <note><para>&argouml; does not enforce any naming convention for
            use cases</para></note></listitem>
        </varlistentry>

        <!-- Entry for Stereotype -->

        <varlistentry>
          <term><literal>Stereotype</literal></term>

          <listitem><para>Drop down selector. Use case is provided by default
            with the UML standard stereotypes (<literal>metaclass</literal>,
            <literal>powertype</literal>, <literal>process</literal>,
            <literal>thread</literal>, <literal>utility</literal>) for
            classifiers. &argouml; also provides the additional stereotypes,
            <literal>machine</literal>, <literal>organization</literal>,
            <literal>person</literal> and
            <literal>singleton</literal>. Stereotyping can be useful when
            creating use cases in the problem domain (requirements capture) and
            solution domain (analysis), but none of the pre-defined stereotypes
            are well suited to this.</para>

          <warning><para>If a stereotype is selected in &argouml; it will
            not be displayed in the diagram.</para></warning></listitem>
        </varlistentry>

        <!-- Entry for NavStereo -->

        <varlistentry>
          <term><literal>Navigate Stereotype</literal></term>

          <listitem><para><guiicon><inlinemediaobject><imageobject><imagedata
              format="GIF" align="center"
              fileref="images/icons/navigate_stereotype.gif"/>
            </imageobject></inlinemediaobject></guiicon> icon. If a
              stereotype has been selected, this will navigate you to the
              stereotype property panel (see <xref
                linkend="s1.ref.stereotype"/>).</para></listitem>
        </varlistentry>

        <!-- Entry for Namespace -->

        <varlistentry>
          <term><literal>Namespace</literal></term>

          <listitem><para>Text box. Records the namespace for the
            use case. This is the package hierarchy.</para>

          <para>&Button1; click on the entry will take you to the package
            defining this namespace (or the model for the top level
            namespace).</para></listitem>
        </varlistentry>

        <!-- Entry for Modifiers -->

        <varlistentry>
          <term><literal>Modifiers</literal></term>

          <listitem><para>Check box, with entries <literal>Abstract</literal>,
            <literal>Final</literal> and <literal>Root</literal>.</para>

          <itemizedlist>
            <listitem><para><literal>abstract</literal> is used to declare
              that this use case cannot be instantiated, but must always be
              specialized.</para>

            <caution><para>While use cases can be specialized and
              generalized, it is not clear that an abstract use case has
              any meaning. Perhaps it might be used to indicate an use case
              that does not itself interact with an actor, but whose
              children do.</para></caution></listitem>

            <listitem><para><literal>final</literal> indicates that this
              use case can have no further children, while
              <literal>root</literal> indicates it is a top level
              use case with no parent.</para></listitem>
          </itemizedlist></listitem>
        </varlistentry>

        <!-- Entry for Generalizations -->

        <varlistentry>
          <term><literal>
            <anchor id="ref.use_case_generalization"/>Generalizations
          </literal></term>

          <listitem><para>Text area. Lists use cases which are generalizations
            of this one. Will be set whenever a generalization is created
            on the diagram. &Button1; click on a generalization will
            navigate to that generalization. &Button2; click gives a pop
            up menu with five options.</para>

          <itemizedlist>
            <listitem><para><literal>Open</literal>. Where a generalization
              exists, navigate to it.</para></listitem>

            <listitem><para><literal>Add</literal>. Add a new
              generalization. Note that the new association is added to the
              model, but not the diagram. You will need to find it in the
              navigation pane and add it from there.</para>

            <tip><para>It is far easier to add generalizations by drawing
              them on the relevant diagram in the editing
              pane.</para></tip>

            <caution><para>It is possible to add multiple
              generalizations. However is is hard to see a sensible meaning
              for this. In addition the size of the text area makes this
              very inconvenient in &argouml;.</para></caution></listitem>

            <listitem><para><literal>Delete</literal>. Where a
              generalization exists linking to this use case, this removes
              the link to this use case.</para>

            <tip><para>This <emphasis>does not</emphasis> remove the
              generalization from the model or the diagram, leading to
              potentially very confusing diagrams. It is usually far easier
              to remove generalizations from the editing
              pane.</para></tip></listitem>

            <listitem><para><literal>Move Up</literal>. Only available
              where there are two or more generalizations listed (see
              <emphasis>caution</emphasis> above), and the generalization
              selected is not at the top. It is moved one up the
              list.</para></listitem>

            <listitem><para><literal>Move Down</literal>. Only available
              where there are two or more generalizations listed (see
              <emphasis>caution</emphasis> above), and the generalization
              selected is not at the bottom. It is moved one down the
              list.</para></listitem>
            </itemizedlist></listitem>
        </varlistentry>

        <!-- Entry for Specializations -->

        <varlistentry>
          <term><literal>Specializations</literal></term>

          <listitem><para>Text box. Lists any specialized use case (i.e. for
            which this use case is a generalization.</para>

          <para>&button1; click navigates to the generalization and opens
            its property tab.</para>

          <para>&Button2; click yields a drop down menu with five
            entries</para>

          <itemizedlist>
            <listitem><para><literal>Open</literal>. Navigate to the
              selected generalization.</para></listitem>

            <listitem><para><literal>Add</literal>. Add a new
              generalization. Note that the new generalization is added to
              the model, but not the diagram.</para>

            <tip><para>It is far easier to add generalizations by drawing
              them on the relevant diagram in the editing
              pane.</para></tip></listitem>

            <listitem><para><literal>Delete</literal>. The link from the
              generalization to the use case (<emphasis>but not the
              generalization itself</emphasis>) is removed.</para>

            <tip><para>This <emphasis>does not</emphasis> remove the
              generalization from the model or the diagram, leading to
              potentially very confusing diagrams. It is usually far easier
              to remove generalizations from the editing
              pane.</para></tip></listitem>

            <listitem><para><literal>Move Up</literal>. Only available
             where there are two or more specializations listed, and the
             specialization selected is not at the top. It is moved one up
             the list.</para></listitem>

            <listitem><para><literal>Move Down</literal>. Only available
             where there are two or more specializations listed, and the
             specialization selected is not at the bottom. It is moved one
             down the list.</para></listitem>
          </itemizedlist></listitem>
        </varlistentry>

        <!-- Entry for Extends -->

        <varlistentry>
          <term><literal>Extends</literal></term>

          <listitem><para>Text box. Lists any class that is extended by this
            use case.</para>

          <para>Where an extends relationship has been created (see below),
            &button1; click will navigate to that relationship. &Button2; gives
            a pop up menu with five entries.</para>

          <itemizedlist>
            <listitem><para><literal>Open</literal>. Where an extends
              relationship has been created, navigate to
              it.</para></listitem>

            <listitem><para><literal>Add</literal>. Add a new
              extend relationship and navigate to it. The current use case is
              set as the extension end of the extend relationship.</para>

            <caution><para>It is possible to add multiple extends
              relationships. However is is hard to see a sensible meaning
              for this.</para></caution></listitem>

            <listitem><para><literal>Delete</literal>. Removes the link to the
              selected extend relationship.</para>

            <note><para>This deletes the connection to the extend relationship,
              but does not delete the extend relationship from the
              model.</para></note></listitem>

            <listitem><para><literal>Move Up</literal>. Only available where
             there are two or more extend relationships listed (not
             recommended), and the extend relationship selected is not at the
             top. It is moved one up the list.</para></listitem>

            <listitem><para><literal>Move Down</literal>. Only available where
             there are two or more extend relationships listed (not
             recommended), and the extend relationship selected is not at the
             bottom. It is moved one down the list.</para></listitem>
           </itemizedlist></listitem>
        </varlistentry>

        <!-- Entry for Includes -->

        <varlistentry>
          <term><literal>Includes</literal></term>

          <listitem><para>Text box. Lists any use case that this use case
            includes.</para>

          <para>Where an include relationship has been created (see below),
            &button1; click will navigate to that relationship. &Button2; gives
            a pop up menu with five entries.</para>

          <itemizedlist>
            <listitem><para><literal>Open</literal>. Where an include
              relationship has been created, navigate to
              it.</para></listitem>

            <listitem><para><literal>Add</literal>. Add a new
              include relationship and navigate to it. The current use case
              will be made the base use case of the include
              relationship.</para></listitem>

            <listitem><para><literal>Delete</literal>. Removes the link to the
              selected include relationship.</para>

            <note><para>This deletes the connection to the include
              relationship, but does not delete the include relationship from
              the model.</para></note></listitem>

            <listitem><para><literal>Move Up</literal>. Only available where
              there are two or more include relationships listed, and the
              include relationship selected is not at the top. It is moved one
              up the list.</para></listitem>

            <listitem><para><literal>Move Down</literal>. Only available where
              there are two or more include relationships listed, and the
              include relationship selected is not at the bottom. It is moved
              one down the list.</para></listitem>
            </itemizedlist></listitem>
        </varlistentry>

        <!-- Entry for Extension Points -->

        <varlistentry>
          <term><literal>Extension Points</literal></term>

          <listitem><para>Text box. If this use case is, or can be extended,
            this field lists the extension points for the use case.</para>

          <note><para>Extension points are listed by their location point
            rather than their name.</para></note>

          <para>Where an extension point has been created (see below),
            &button1; click will navigate to that relationship. &Button2; gives
            a pop up menu with five entries.</para>

          <itemizedlist>
            <listitem><para><literal>Open</literal>. Where an extension
              point has been created, navigate to it.</para></listitem>

            <listitem><para><literal>Add</literal>. Add a new extension point
              and navigate to it, making this use case the owning use case of
              the extension point.</para></listitem>

            <listitem><para><literal>Delete</literal>. Where an extension
              point has been created, this removes it.</para>

            <note><para>This deletes the connection to the extension point, but
              does not delete the extension point from the
              model.</para></note></listitem>

            <listitem><para><literal>Move Up</literal>. Only available where
              there are two or more extension points listed, and the extension
              point selected is not at the top. It is moved one up the
              list.</para></listitem>

            <listitem><para><literal>Move Down</literal>. Only available where
              there are two or more extension points listed, and the extension
              point selected is not at the bottom. It is moved one down the
              list.</para></listitem>
          </itemizedlist></listitem>
        </varlistentry>

        <!-- Entry for Associations -->

        <varlistentry>
          <term><literal>Associations</literal></term>

          <listitem><para>Text area. Lists any associations connected to the
            use case. &Button1; click on an association will navigate
            to that association. &Button2; click gives a pop up menu with
            five options.</para>

          <itemizedlist>
            <listitem><para><literal>Open</literal>. Navigate to the
              association.</para></listitem>

            <listitem><para><literal>Add</literal>. Add a new
              association. Note that the new association is added to the
              model, but not the diagram. You will need to find it in the
              navigation pane and add it from there.</para>

            <tip><para>It is far easier to add associations by drawing them
              on the relevant diagram in the editing
              pane.</para></tip></listitem>

            <listitem><para><literal>Delete</literal>. Where an association
              is linked to a use case, this removes the link to the use
              case.</para>

            <tip><para>This <emphasis>does not</emphasis> remove the
              association from the model or the diagram, leading to
              potentially very confusing diagrams. It is usually far easier
              to remove associations from the editing
              pane.</para></tip></listitem>

            <listitem><para><literal>Move Up</literal>. Only available
             where there are two or more associations listed, and the
             association selected is not at the top. It is moved one up the
             list.</para></listitem>

            <listitem><para><literal>Move Down</literal>. Only available
             where there are two or more associations listed, and the
             association selected is not at the bottom. It is moved one
             down the list.</para></listitem>
          </itemizedlist></listitem>
        </varlistentry>

        <!-- Entry for Operations -->

        <varlistentry>
          <term><literal>Operations</literal></term>

          <listitem><para>Text area. Listing the operations that are available
            on this use case. As a sub-class of the UML classifier
            metaclass, a use case has many of the properties of a
            class (see <xref linkend="s1.ref.class_class"/>).</para>

          <para>In some &ooad; processes it might be useful to treat use
            cases as classes as well, and give them operations and
            attributes. This is of very limited in &argouml;, since it is
            not possible to take a use case and add it to a class diagram,
            so all class relationships must be shown with the notation of a
            use case diagram.</para>

          <para>Should you wish to add operations to a use case,
            &button1; click allows you to navigate to them and
            &button2; click gives a pop up menu with options to
            <literal>Open</literal>, <literal>Add</literal>,
            <literal>Delete</literal>, <literal>Move&nbsp;Up</literal> and
            <literal>Move&nbsp;Down</literal> (see <link
              linkend="ref.use_case_generalization">Generalizations</link>
            for examples of how these operations are used).</para></listitem>
        </varlistentry>

        <!-- Entry for Attributes -->

        <varlistentry>
          <term><literal>Attributes</literal></term>

          <listitem><para>Text area. Listing the attributes that are available
            on this use case. As a sub-class of the UML classifier
            metaclass, a use case has many of the properties of a
            class (see <xref linkend="s1.ref.class_class"/>).</para>

          <para>In some &ooad; processes it might be useful to treat use
            cases as classes as well, and give them operations and
            attributes. This is of very limited in &argouml;, since it is
            not possible to take a use case and add it to a class diagram,
            so all class relationships must be shown with the notation of a
            use case diagram.</para>

          <para>Should you wish to add attributes to a use case,
            &button1; click allows you to navigate to them and
            &button2; click gives a pop up menu with options to
            <literal>Open</literal>, <literal>Add</literal>,
            <literal>Delete</literal>, <literal>Move&nbsp;Up</literal> and
            <literal>Move&nbsp;Down</literal> (see <link
              linkend="ref.use_case_generalization">Generalizations</link>
            for examples of how these operations are used).</para></listitem>
        </varlistentry>
      </variablelist>
    </sect2>
  </sect1>

  <!-- Association (has Association End as a sub-artifact) -->

  <sect1 id="s1.ref.association_use_case">
    <title>Association</title>

    <para>An association on a use case diagram represents is a relationship
      between an actor and a use case showing that actor's involvement in the
      use case. The invocation of the use case will involve some (significant)
      change perceived by the actor.</para>

    <para>Within the UML metamodel, <literal>Association</literal> is a
      sub-class of both <literal>Relationship</literal> and
      <literal>GeneralizableElement</literal>.</para> 

    <para>The association is represented as a line connecting actor and use
      case (see <xref linkend="fig.ref.use_case_diagram"/>). The name of the
      association appears above the line and any stereotype above that.</para>

    <note><para>&argouml; provides no specific way of showing the direction of
      the association as described in the UML 1.3 standard. The naming should
      attempt to make this clear.</para></note>

    <para>The association contains two ends, which may be navigated to via the
      association property sheet. See <xref
        linkend="s1.ref.association_end_use_case"/> for more
      information.</para>

    <!-- The details tabs -->

    <sect2>
      <title>Association Details Tabs</title>

      <para>The details tabs that are active for associations are as
        follows.</para>

      <variablelist>

        <!-- Entry for ToDoItem tab -->

        <varlistentry>
          <term><literal>ToDoItem</literal></term>

          <listitem><para>Standard tab.</para></listitem>
        </varlistentry>

        <!-- Entry for Properties tab -->

        <varlistentry>
          <term><literal>Properties</literal></term>

          <listitem><para>See <xref
              linkend="s2.ref.association_property_toolbar"/> and <xref
              linkend="s2.ref.association_property_fields"/>
            below.</para></listitem>
        </varlistentry>

        <!-- Entry for Documentation tab -->

        <varlistentry>
          <term><literal>Documentation</literal></term>

          <listitem><para>Standard tab.</para></listitem>
        </varlistentry>

        <!-- Entry for Style tab -->

        <varlistentry>
          <term><literal>Style</literal></term>

          <listitem><para>Standard tab. Fill color is used for the use case
            oval.</para>

          <note><para>The values for the bounds of the Association appear
            to have no meaning. Changing them has no effect on the
            diagram. This is sensible behavior, given the association is
            tied to a particular actor and use case.</para></note></listitem>
        </varlistentry>

        <!-- Entry for Source tab -->

        <varlistentry>
          <term><literal>Source</literal></term>

          <listitem><para>Standard tab. You would not expect to generate any
            code for an association, and any code entered here is ignored
            (it will have disappeared when you come back to the
            association.</para></listitem>
        </varlistentry>

        <!-- Entry for Constraints tab -->

        <varlistentry>
          <term><literal>Constraints</literal></term>

          <listitem><para>Standard tab. In the UML metamodel,
            <literal>Association</literal> has the following standard
            constraints defined.</para>

            <itemizedlist>
              <listitem><para><literal>xor</literal>. Applied to a set of
                associations, indicating that over that set, exactly one
                association is manifest for any particular association
                instance.</para></listitem>
            </itemizedlist></listitem>
        </varlistentry>

        <!-- Entry for Tagged Values tab -->

        <varlistentry>
          <term><literal>Tagged Values</literal></term>

          <listitem><para>Standard tab. In the UML metamodel,
            <literal>Association</literal> has the following standard
            tagged values defined.</para>

            <itemizedlist>
              <listitem><para><literal>persistence</literal>. Values
                <literal>transitory</literal>, indicating state is
                destroyed when an instance is destroyed or
                <literal>persistent</literal>, marking state is
                preserved when an instance is destroyed.</para></listitem>

              <listitem><para><literal>derived</literal> (from the
                superclass, <literal>ModelElement</literal>). Values
                <literal>true</literal>, meaning the association is
                redundant&mdash;it can be formally derived from other
                elements, or <literal>false</literal> meaning it
                cannot.</para>

              <note><para>Derived associations still have their value in
                analysis to introduce useful names or concepts, and in
                design to avoid re-computation.</para></note></listitem>
            </itemizedlist>

            <note><para>The UML <literal>Element</literal> metaclass from
              which all other artifacts are derived includes the tagged
              element <literal>documentation</literal> which is handled by
              the <emphasis>documentation tab</emphasis> under
              &argouml;</para></note></listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <!-- Association properties -->

    <sect2 id="s2.ref.association_property_toolbar">
      <title>Association Property Toolbar</title>

      <variablelist>

        <!-- Entry for Go up button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/navigate_up.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Go
            up</literal></term>

          <listitem><para>Navigate up through the package structure of the
            model. For an association this will be the package containing
            the association.</para></listitem>
        </varlistentry>

        <!-- Entry for Go back button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/navigate_back.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Go
            back</literal></term>

          <listitem><para>Navigate back to the previous
            artifact.</para>

          <warning><para>This feature is currently broken within &argouml;
            and there is no guarantee where (if anywhere) this button will
            take you.</para></warning></listitem>
        </varlistentry>

        <!-- Entry for Go forward button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/navigate_forward.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Go
            forward</literal></term>

          <listitem><para>Navigate forward to the next
            artifact.</para>

          <warning><para>This feature is currently broken within &argouml;
            and there is no guarantee where (if anywhere) this button will
            take you.</para></warning></listitem>
        </varlistentry>

        <!-- Entry for Delete button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/property_delete.gif"/>
          </imageobject></inlinemediaobject></guiicon>
            <literal>Delete</literal></term>

          <listitem><para>This deletes the selected association from the
            model.</para>

          <warning><para>This is a deletion from the model
            <emphasis>not</emphasis> just the diagram. To delete an
            association from the diagram, but keep it within the model, use
            the main menu <literal>Edit/Remove From Diagram</literal>
            (Ctrl-R).</para></warning></listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <!-- Fields in the properties tab -->

    <sect2 id="s2.ref.association_property_fields">
      <title>Property Fields For Association</title>

      <variablelist>

        <!-- Entry for Name -->

        <varlistentry>
          <term><literal>Name</literal></term>

          <listitem><para>Text box. The name of the association. By convention
            association names start with a lower case letter, with
            <quote>bumpy caps</quote> used to indicate words within the
            name, thus: <literal>salesHandling</literal>.</para>

          <note><para>&argouml; does not enforce any naming convention for
            associations.</para></note>

          <tip><para>Although the design critics will advise otherwise, it
            is perfectly normal not to name associations on a use case,
            since the relationship is obvious from the actor and use case
            name.</para></tip></listitem>
        </varlistentry>

        <!-- Entry for Stereotype -->

        <varlistentry>
          <term><literal>Stereotype</literal></term>

          <listitem><para>Drop down selector. Association is provided by
            default with the UML standard stereotype for Association
            ((<literal>implicit)</literal>) and the additional Association
            stereotypes for the Software Engineering Process and Business
            Modeling in the UML standard (<literal>communicate</literal>
            and <literal>subscribe</literal>). &argouml; also provides the
            additional stereotypes, <literal>machine</literal>,
            <literal>organization</literal> and <literal>person</literal>
            and four additional stereotypes suggested by some writers using
            patterns (<literal>offstage actor</literal>, <literal>primary
            actor</literal>, <literal>stakeholder</literal> and
            <literal>supporting actor</literal>).</para>

          <para>Stereotyping can be useful when creating use cases in the
            problem domain (requirements capture) and solution domain
            (analysis), as well as for processes based on patterns.</para>

          <para>The stereotype is shown between &laquo; and &raquo; above
            the name of the association on the diagram.</para>

          <warning><para>The provision of <literal>offstage
            actor</literal>, <literal>primary actor</literal>,
            <literal>stakeholder</literal> and <literal>supporting
            actor</literal> by &argouml; as stereotypes of
            <literal>Association</literal> appears to be erroneous. They
            should be stereotypes of <literal>Actor</literal> (or arguably
            <literal>Classifier</literal>).</para></warning></listitem>
        </varlistentry>

        <!-- Entry for NavStereo -->

        <varlistentry>
          <term><literal>Navigate Stereotype</literal></term>

          <listitem><para><guiicon><inlinemediaobject><imageobject><imagedata
              format="GIF" align="center"
              fileref="images/icons/navigate_stereotype.gif"/>
            </imageobject></inlinemediaobject></guiicon> icon. If a
              stereotype has been selected, this will navigate you to the
              stereotype property panel (see <xref
                linkend="s1.ref.stereotype"/>).</para></listitem>
        </varlistentry>

        <!-- Entry for Namespace -->

        <varlistentry>
          <term><literal>Namespace</literal></term>

          <listitem><para>Text box. Records the namespace for the
            association. This is the package hierarchy.</para>

          <para>&Button1; click on the entry will take you to the package
            defining this namespace (or the model for the top level
            namespace).</para></listitem>
        </varlistentry>

        <!-- Entry for Modifiers -->

        <varlistentry>
          <term><literal>Modifiers</literal></term>

          <listitem><para>Check box, with entries <literal>Abstract</literal>,
            <literal>Final</literal> and <literal>Root</literal>. No known
            use.</para>

          <tip><para>While attributes are generalizable elements, marking
            them as with these modifiers is of limited
            value with binary associations (the only support that &argouml;
            supports properly.</para></tip></listitem>
        </varlistentry>

        <!-- Entry for Association Ends -->

        <varlistentry>
          <term><literal>Association Ends</literal></term>

          <listitem><para>Text area. Lists the ends of this association. An
            association can have any number of ends, but for use cases, two
            is the only useful number (associative classes can led to a
            third end on class diagrams, but this is not supported by
            &argouml;). For more on association ends see <xref
            linkend="s1.ref.association_end_use_case"/>.</para>

          <para>The names are listed, unless the association end has no
            name (the case when it is first created), in which case the
            artifact at that end, and its multiplicity, is shown.</para>

          <note><para>The only representation of association ends on a
            diagram is that their name appears at the relevant end of the
            corresponding association. There is no way to access them from
            the diagram.</para></note>

          <para>&Button1; click on an association end will navigate to that
            end. &Button2; click gives a pop up menu with five
            options.</para>

          <itemizedlist>
            <listitem><para><literal>Open</literal>. Where an association
              end exists, navigate to it.</para></listitem>

            <listitem><para><literal>Add</literal>. Add a new association
              end and navigate to its property tab.</para>

            <tip><para>While adding new ends is possible, the value of
              this is limited for Use Case diagrams where the standard two
              ends is all that is every needed.</para></tip></listitem>

            <listitem><para><literal>Delete</literal>. Where an association
              end this removes it completely from the
              model.</para></listitem>

            <listitem><para><literal>Move Up</literal>. Only available
              where there are two or more association ends, and the
              association end selected is not at the top. It is moved one
              up the list.</para></listitem>

            <listitem><para><literal>Move Down</literal>. Only available
              where there are two or more association ends listed, and the
              association end selected is not at the bottom. It is moved
              one down the list.</para></listitem> </itemizedlist></listitem>
        </varlistentry>

        <!-- Entry for Generalizations -->

        <varlistentry>
          <term><literal>Generalizations</literal></term>

          <listitem><para>Text area. Lists any association that
            <emphasis>generalizes</emphasis> this association.</para>

          <caution><para>It is possible to create generalizations using the
            pop-up menu from here, but there is no way within &argouml; to give
            them a parent, so the entry has no use.</para></caution>

          <para>&Button1; click navigates to the generalization and opens
            its property tab.</para>

          <para>&Button2; click yields a drop down menu with five
            entries</para>

          <itemizedlist>
            <listitem><para><literal>Open</literal>. Navigate to the
              selected generalization.</para></listitem>

            <listitem><para><literal>Add</literal>. Add a new
              generalization. Note that the new generalization is added to
              the model, but not the diagram. You will need to find it in
              the navigation pane and add it from there.</para>

            <tip><para>It is far easier to add generalizations by drawing
              them on the relevant diagram in the editing
              pane.</para></tip></listitem>

            <listitem><para><literal>Delete</literal>. The link from the
              generalization to the association (<emphasis>but not the
              generalization itself</emphasis>) is removed.</para>

            <tip><para>This <emphasis>does not</emphasis> remove the
              generalization from the model or the diagram, leading to
              potentially very confusing diagrams. It is usually far easier
              to remove generalizations from the editing
              pane.</para></tip></listitem>

            <listitem><para><literal>Move Up</literal>. Only available where
              there are two or more generalizations listed, and the
              generalization selected is not at the top. It is moved one up the
              list.</para></listitem>

            <listitem><para><literal>Move Down</literal>. Only available where
              there are two or more generalizations listed, and the
              generalization selected is not at the bottom. It is moved one
              down the list.</para></listitem>
          </itemizedlist></listitem>
        </varlistentry>

        <!-- Entry for Specializations -->

        <varlistentry>
          <term><literal>Specializations</literal></term>

          <listitem><para>Text box. Lists any specialized association (i.e. for
            which this association is a generalization.</para>

          <caution><para>It is possible to create generalizations using the
            pop-up menu from here, but there is no way within &argouml; to give
            them a parent, so the entry has no use.</para></caution>

          <para>&button1; click navigates to the generalization and opens
            its property tab.</para>

          <para>&Button2; click yields a drop down menu with five
            entries</para>

          <itemizedlist>
            <listitem><para><literal>Open</literal>. Navigate to the
              selected generalization.</para></listitem>

            <listitem><para><literal>Add</literal>. Add a new
              generalization. Note that the new generalization is added to
              the model, but not the diagram.</para>

            <tip><para>It is far easier to add generalizations by drawing
              them on the relevant diagram in the editing
              pane.</para></tip></listitem>

            <listitem><para><literal>Delete</literal>. The link from the
              generalization to the association (<emphasis>but not the
              generalization itself</emphasis>) is removed.</para>

            <tip><para>This <emphasis>does not</emphasis> remove the
              generalization from the model or the diagram, leading to
              potentially very confusing diagrams. It is usually far easier
              to remove generalizations from the editing
              pane.</para></tip></listitem>

            <listitem><para><literal>Move Up</literal>. Only available where
              there are two or more specializations listed, and the
              specialization selected is not at the top. It is moved one up the
              list.</para></listitem>

            <listitem><para><literal>Move Down</literal>. Only available where
              there are two or more specializations listed, and the
              specialization selected is not at the bottom. It is moved one
              down the list.</para></listitem>
          </itemizedlist></listitem>
        </varlistentry>
      </variablelist>
    </sect2>
  </sect1>

  <!-- Association End artifacts (sub-artifact of Association) -->

  <sect1 id="s1.ref.association_end_use_case">
    <title>Association End</title>

    <para>Two or more association ends are associated with each association
      (see <xref linkend="s1.ref.association_use_case"/>), although for the
      purposes of use case diagrams, the number of ends can only usefully be
      two.</para>

    <para>Within the UML metamodel, <literal>AssociationEnd</literal> is a
      sub-class of <literal>ModelElement</literal>.</para>

    <para>The association end has no direct representation on any diagram,
      although its name is shown at the relevant end of the parent
      association (see <xref linkend="fig.ref.use_case_diagram"/>).</para>

    <tip><para>Although you can change attributes of association ends when
      creating a use case model, this is often not necessary. Many of the
      properties of an association end relate to its use in class diagrams, and
      are of limited relevance to use cases. The most useful attributes to
      consider altering are the name (used as the role name) and the
      multiplicity.</para></tip>

    <note><para>&argouml; does not currently support qualifiers, as described
      in the UML&nbsp;1.3 standard.</para></note>

    <!-- The details tabs -->

    <sect2>
      <title>Association End Details Tabs</title>

      <para>The details tabs that are active for associations are as
        follows.</para>

      <variablelist>

        <!-- Entry for ToDoItem tab -->

        <varlistentry>
          <term><literal>ToDoItem</literal></term>

          <listitem><para>Standard tab.</para></listitem>
        </varlistentry>

        <!-- Entry for Properties tab -->

        <varlistentry>
          <term><literal>Properties</literal></term>

          <listitem><para>See <xref
              linkend="s2.ref.association_end_property_toolbar"/> and <xref
              linkend="s2.ref.association_end_property_fields"/>
            below.</para></listitem>
        </varlistentry>

        <!-- Entry for Documentation tab -->

        <varlistentry>
          <term><literal>Documentation</literal></term>

          <listitem><para>Standard tab.</para></listitem>
        </varlistentry>

        <!-- Entry for Style tab -->

        <varlistentry>
          <term><literal>Style</literal></term>

          <listitem><para>Standard tab, but with no meaning, since the only
            representation is via the parent association.</para></listitem>
        </varlistentry>

        <!-- Entry for Source tab -->

        <varlistentry>
          <term><literal>Source</literal></term>

          <listitem><para>Standard tab. You would not expect to generate any
            code for an association end, but this tab contains a
            declaration for the association end as an instance of the
            actor or use case artifact to which it is connected.</para>

          <note><para>This is probably not the correct thing to do for good
            code generation, and will need to be changed in future versions
            of &argouml;.</para></note></listitem>
        </varlistentry>

        <!-- Entry for Constraints tab -->

        <varlistentry>
          <term><literal>Constraints</literal></term>

          <listitem><para>Standard tab. There are no standard constraints
            defined for <literal>AssociationEnd</literal> within the UML
            metamodel.</para></listitem>
        </varlistentry>

        <!-- Entry for Tagged Values tab -->

        <varlistentry>
          <term><literal>Tagged Values</literal></term>

          <listitem><para>Standard tab. In the UML metamodel,
            <literal>AssociationEnd</literal> has the following standard
            tagged values defined.</para>

            <itemizedlist>
              <listitem><para><literal>derived</literal> (from the
                superclass, <literal>ModelElement</literal>). Values
                <literal>true</literal>, meaning the association end is
                redundant&mdash;it can be formally derived from other
                elements, or <literal>false</literal> meaning it
                cannot.</para>

              <tip><para>Derived association ends still have their value in
                analysis to introduce useful names or concepts, and in
                design to avoid re-computation. However they their
                composition with association, means they can only sensibly
                have a true <literal>derived</literal> tag if the
                association also does.</para></tip></listitem>
            </itemizedlist>

            <note><para>The UML <literal>Element</literal> metaclass from
              which all other artifacts are derived includes the tagged
              element <literal>documentation</literal> which is handled by
              the <emphasis>documentation tab</emphasis> under
              &argouml;</para></note></listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <!-- Association end properties -->

    <sect2 id="s2.ref.association_end_property_toolbar">
      <title>Association End Property Toolbar</title>

      <variablelist>

        <!-- Entry for Go up button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/navigate_up.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Go
            up</literal></term>

          <listitem><para>Navigate up to the association to which this end
            belongs.</para></listitem> 
        </varlistentry>

        <!-- Entry for Go back button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/navigate_back.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Go
            back</literal></term>

          <listitem><para>Navigate back to the previous
            artifact.</para>

          <warning><para>This feature is currently broken within &argouml;
            and there is no guarantee where (if anywhere) this button will
            take you.</para></warning></listitem>
        </varlistentry>

        <!-- Entry for Go forward button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/navigate_forward.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Go
            forward</literal></term>

          <listitem><para>Navigate forward to the next
            artifact.</para>

          <warning><para>This feature is currently broken within &argouml;
            and there is no guarantee where (if anywhere) this button will
            take you.</para></warning></listitem>
        </varlistentry>

        <!-- Entry for Go to other end button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/association_end.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Go to other
            end</literal></term>

          <listitem><para>This navigates to the other end of the
            association.</para></listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <!-- Fields in the properties tab -->

    <sect2 id="s2.ref.association_end_property_fields">
      <title>Property Fields For Association End</title>

      <variablelist>

        <!-- Entry for Name -->

        <varlistentry>
          <term><literal>Name</literal></term>

          <listitem><para>Text box. The name of the association end, which
            provides a <emphasis>role name</emphasis> for this end of the
            association. This role name can be used for navigation, and in
            an implementation context (not really relevant to use case
            diagrams), provides a name by which the source end of an
            association can reference the target end.</para>

          <note><para>&argouml; does not enforce any naming convention for
            associations.</para></note></listitem>
        </varlistentry>

        <!-- Entry for Stereotype -->

        <varlistentry>
          <term><literal>Stereotype</literal></term>

          <listitem><para>Drop down selector. Association end is provided by
            default with the UML standard stereotypes for AssociationEnd
            (<literal>association</literal>, <literal>global</literal>,
            <literal>local</literal>, <literal>parameter</literal>,
            <literal>self</literal>). &argouml; also provides the
            additional stereotypes, <literal>machine</literal>,
            <literal>organization</literal> and
            <literal>person</literal>.</para>

          <para>Stereotyping association ends can be very useful in class
            diagrams. However it is of limited use in use case diagrams,
            although the default stereotype of
            <literal>association</literal> can be used to emphasis
            this.</para>

          <warning><para>There is no diagram representation of the
            stereotype of an association end.</para></warning></listitem>
        </varlistentry>

        <!-- Entry for NavStereo -->

        <varlistentry>
          <term><literal>Navigate Stereotype</literal></term>

          <listitem><para><guiicon><inlinemediaobject><imageobject><imagedata
              format="GIF" align="center"
              fileref="images/icons/navigate_stereotype.gif"/>
            </imageobject></inlinemediaobject></guiicon> icon. If a
              stereotype has been selected, this will navigate you to the
              stereotype property panel (see <xref
                linkend="s1.ref.stereotype"/>).</para></listitem>
        </varlistentry>

        <!-- Entry for Type -->

        <varlistentry>
          <term><literal>Type</literal></term>

          <listitem><para>Drop down selector providing access to all standard
            UML types provided by &argouml; and all new classes created
            within the current model.</para>

          <para>This is the type of the entity attached to this end of the
            association.</para>

          <tip><para>By default &argouml; will select the class of the
            artifact to which the linkend is connected. There is little
            point in altering this when working with use case
            diagrams.</para></tip>

          <caution><para>When you create new classes elsewhere in &argouml;
            they will not appear in this drop down until after the model
            has been saved and reloaded.</para></caution></listitem>
        </varlistentry>

        <!-- Entry for NavClass (note the icon is identical to
             Navstereo) -->

        <varlistentry>
          <term><literal>Navigate Class</literal></term>

          <listitem><para><guiicon><inlinemediaobject><imageobject><imagedata
              format="GIF" align="center"
              fileref="images/icons/navigate_stereotype.gif"/>
              </imageobject></inlinemediaobject></guiicon> icon. If a
              datatype, interface or class has been selected, this will
              navigate you to its property sheet, (see <xref
                linkend="s1.ref.datatype"/>, <xref
                linkend="s1.ref.interface_class"/> and <xref
               linkend="s1.ref.class_class"/>) .</para></listitem>
        </varlistentry>

        <!-- Entry for Multiplicity -->

        <varlistentry>
          <term><literal>Multiplicity</literal></term>

          <listitem><para>Drop down menu. Records the multiplicity of this
            association end (with respect to the other end), i.e. how many
            instances of this end may be associated with an instance of the
            other end.</para>

          <tip><para>For use case diagrams you can often ignore this, at
            least in the early stages.</para></tip></listitem>
        </varlistentry>

        <!-- Entry for Association -->

        <varlistentry>
          <term><literal>Association</literal></term>

          <listitem><para>Text box. Records the parent association for this
            association end. &Button1; click on
            this entry will take you to that association. &Button2; click
            will invoke a pop-up menu, with a single entry,
            <literal>Open</literal> that will also navigate you to that
            association.</para></listitem>
        </varlistentry>

        <!-- Entry for Navigable -->

        <varlistentry>
          <term><literal>Navigable</literal></term>

          <listitem><para>Check box, with a single entry,
            <literal>navigable</literal>. Indicates that this end can be
            navigated to from the other end.</para>

          <tip><para>This means little to a use case diagram. It is useful
            for associations on class diagrams.</para></tip>

          <note><para>The UML 1.3 standard provides a number of options for
            how navigation is displayed on an association end. ArgoUML uses
            option 3, which means that arrow heads are shown at the end of
            an association, when navigation is enabled at only one end, to
            indicate the direction in which navigation is possible. This
            means that the default, with both ends navigable has non
            arrows. This is an appropriate representation for use
            cases.</para></note></listitem>
        </varlistentry>

        <!-- Entry for Ordering -->

        <varlistentry>
          <term><literal>Ordering</literal></term>

          <listitem><para>Radio box, with three entries
            <literal>unordered</literal>, <literal>ordered</literal> and
            <literal>sorted</literal>. Where there are multiple instances
            indicates the nature of any ordering.</para>

          <note><para><literal>sorted</literal> represents an extension to
            UML&nbsp;1.3.</para></note>

          <tip><para>This means little to a use case diagram. It is useful
            for associations on class diagrams.</para></tip></listitem>
        </varlistentry>

        <!-- Entry for Aggregation -->

        <varlistentry>
          <term><literal>Aggregation</literal></term>

          <listitem><para>Radio box, with three entries
            <literal>none</literal>, <literal>aggregation</literal> and
            <literal>composite</literal>. Indicates whether the
            relationship with the far end represents some type of loose
            grouping (<literal>aggregation</literal>) or tight grouping
            (<literal>composite</literal>.</para> 

          <note><para>You may not have aggregation at both ends of an
            association.</para></note>

          <tip><para>While it does have some meaning, it is of limited use
            to show aggregation on a use case diagram. It is useful
            for associations on class diagrams.</para></tip></listitem>
        </varlistentry>

        <!-- Entry for Classifier -->

        <varlistentry>
          <term><literal>Classifier</literal></term>

          <listitem><para>Check box, with a single entry,
            <literal>classifier</literal>. Indicates that this end relates
            to a class rather than an instance of a class (the
            default).</para>

          <tip><para>Not relevant to a use case diagram. It is useful
            for associations on class diagrams.</para></tip></listitem>
        </varlistentry>

        <!-- Entry for Changeability -->

        <varlistentry>
          <term><literal>Changeability</literal></term>

          <listitem><para>Radio box, with three entries
            <literal>changeable</literal>, <literal>frozen</literal> and
            <literal>add only</literal>. Indicates whether instances of
            this end of the attributed may be: i) created and deleted by
            the source after the target instance is created; ii) not
            created or deleted by the source after the target instance is
            created; or iii) created but not deleted after the target
            instance is created.</para>

          <tip><para>This is entirely related to associations as used in
            the realization of a solution, and is not relevant to use case
            diagrams.</para></tip></listitem>
        </varlistentry>

        <!-- Entry for Visibility -->

        <varlistentry>
          <term><literal>Visibility</literal></term>

          <listitem><para>Radio box, with three entries
            <literal>public</literal>, <literal>protected</literal> and
            <literal>private</literal>. Indicates whether navigation to
            this end may be by: i) any classifier; ii) only the source
            classifier and its children; or iii) only by the source
            classifier.</para>

          <tip><para>This is entirely related to associations as used in
            the realization of a solution, and is not relevant to use case
            diagrams.</para></tip></listitem>
        </varlistentry>
      </variablelist>
    </sect2>
  </sect1>

  <!-- Generalization -->

  <sect1 id="s1.ref.generalization_use_case">
    <title>Generalization</title>

    <para>Generalization is a relationship between two use cases or two
     actors. Where A is a generalization of B, it means A describes more
     general behavior and B a more specific version of that
     behavior.</para>

   <para>Examples for a travel agent sales system might be the use case
     for making a booking as a generalization of the use case for making a
     flight booking and a salesman actor being a generalization of a supervisor
     actor (since supervisors can also act as salesmen, but not vice
     versa).</para>

    <para>Generalization is analogous to class inheritance within OO
      programming.</para>

    <note><para>It is easy to confuse <emphasis>extends</emphasis>
      relationships between use cases with generalization. However extends is
      about augmenting a use case's behavior at a specific
      point. Generalization is about specializing the behavior throughout the
      use case.</para></note>

    <para>Within the UML metamodel, <literal>Generalization</literal> is a
      sub-class of <literal>Relationship</literal>.</para>

    <para>Generalization is represented as an arrow with white filled head from
      the specialized use case or actor to the generalized use case or actor
      (see <xref linkend="fig.ref.use_case_diagram"/>).</para>

    <!-- The details tabs -->

    <sect2>
      <title>Generalization Details Tabs</title>

      <para>The details tabs that are active for associations are as
        follows.</para>

      <variablelist>

        <!-- Entry for ToDoItem tab -->

        <varlistentry>
          <term><literal>ToDoItem</literal></term>

          <listitem><para>Standard tab.</para></listitem>
        </varlistentry>

        <!-- Entry for Properties tab -->

        <varlistentry>
          <term><literal>Properties</literal></term>

          <listitem><para>See <xref
              linkend="s2.ref.generalization_property_toolbar"/> and <xref
              linkend="s2.ref.generalization_property_fields"/>
            below.</para></listitem>
        </varlistentry>

        <!-- Entry for Documentation tab -->

        <varlistentry>
          <term><literal>Documentation</literal></term>

          <listitem><para>Standard tab.</para></listitem>
        </varlistentry>

        <!-- Entry for Style tab -->

        <varlistentry>
          <term><literal>Style</literal></term>

          <listitem><para>Standard tab</para>

          <note><para>The values for the bounds of the generalization
            appear to have no meaning. Changing them has no effect on the
            diagram. This is sensible behavior, given the generalization
            is tied to a particular actor and use
            case.</para></note></listitem>
        </varlistentry>

        <!-- Entry for Source tab -->

        <varlistentry>
          <term><literal>Source</literal></term>

          <listitem><para>Standard tab. You would not expect to generate any
            code for an association end, but this tab contains the name of
            the generalization.</para>

          <note><para>This is probably not the correct thing to do for good
            code generation, and will need to be changed in future versions
            of &argouml;.</para></note></listitem>
        </varlistentry>

        <!-- Entry for Constraints tab -->

        <varlistentry>
          <term><literal>Constraints</literal></term>

          <listitem><para>Standard tab. In the UML metamodel,
            <literal>Generalization</literal> has the following standard
            constraints defined.</para>

            <itemizedlist>
              <listitem><para><literal>complete</literal>. Applied to a set
                of generalizations with the same discriminator (see <xref
                linkend="s1.ref.generalization_class"/>) and same parent,
                indicating that an instance of the parent must be an
                instance of one of those children.</para>

              <para>Where there is only one discriminator, this implies the
                parent must be abstract.</para>

              <tip><para>The point of this constraint is to indicate that
                within the design, no more children are expected to be
                created for this parent. If more are created, the
                implication is that there will be significant rework
                required within the design.</para></tip></listitem>

              <listitem><para><literal>disjoint</literal>. Applied to a set
                of generalizations indicates and instance of the parent
                must be an instance of no more than one of the children
                within the set.</para>

              <note><para>This is the default semantics of
                generalization</para></note></listitem> 

              <listitem><para><literal>incomplete</literal>. The converse
                of <literal>complete</literal> indicating that within a set
                of generalizations of the same parent sharing the same
                discriminator, an instance of the parent need not be an
                instance of a child within the set (there is no guarantee
                such an instance exists)</para>

              <para>This implies the parent must be concrete.</para>

              <tip><para>The point of this constraint is to indicate that
                within the design, more children may be created for this
                parent. If more are created, the implication is that there
                should be no significant rework required within the
                design.</para></tip></listitem>

              <listitem><para><literal>overlapping</literal>. The inverse f
                <literal>disjoint</literal>. Applied to a set of
                generalizations indicates an instance of one child in the
                set may simultaneously be an instance of another child
                within the set (although this is not
                guaranteed).</para></listitem>

            </itemizedlist></listitem>
        </varlistentry>

        <!-- Entry for Tagged Values tab -->

        <varlistentry>
          <term><literal>Tagged Values</literal></term>

          <listitem><para>Standard tab. In the UML metamodel,
            <literal>Generalization</literal> has the following standard
            tagged values defined.</para>

            <itemizedlist>
              <listitem><para><literal>derived</literal> (from the
                superclass, <literal>ModelElement</literal>). Values
                <literal>true</literal>, meaning the generalization is
                redundant&mdash;it can be formally derived from other
                elements, or <literal>false</literal> meaning it
                cannot.</para>

              <note><para>Derived generalizations still have their value in
                analysis to introduce useful names or concepts, and in
                design to avoid re-computation.</para></note></listitem>
            </itemizedlist>

            <note><para>The UML <literal>Element</literal> metaclass from
              which all other artifacts are derived includes the tagged
              element <literal>documentation</literal> which is handled by
              the <emphasis>documentation tab</emphasis> under
              &argouml;</para></note></listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <!-- Generalization properties -->

    <sect2 id="s2.ref.generalization_property_toolbar">
      <title>Generalization Property Toolbar</title>

      <variablelist>

        <!-- Entry for Go up button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/navigate_up.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Go
            up</literal></term>

          <listitem><para>Navigate up through the package structure of the
            model. For a generalization this will be the package containing
            the generalization.</para></listitem>
        </varlistentry>

        <!-- Entry for Go back button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/navigate_back.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Go
            back</literal></term>

          <listitem><para>Navigate back to the previous
            artifact.</para>

          <warning><para>This feature is currently broken within &argouml;
            and there is no guarantee where (if anywhere) this button will
            take you.</para></warning></listitem>
        </varlistentry>

        <!-- Entry for Go forward button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/navigate_forward.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Go
            forward</literal></term>

          <listitem><para>Navigate forward to the next
            artifact.</para>

          <warning><para>This feature is currently broken within &argouml;
            and there is no guarantee where (if anywhere) this button will
            take you.</para></warning></listitem>
        </varlistentry>

        <!-- Entry for Delete button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/property_delete.gif"/>
          </imageobject></inlinemediaobject></guiicon>
            <literal>Delete</literal></term>

          <listitem><para>This deletes the selected generalization from the
            model.</para>

          <warning><para>This is a deletion from the model
            <emphasis>not</emphasis> just the diagram. To delete a
            generalization from the diagram, but keep it within the model,
            use the main menu <literal>Edit/Remove From Diagram</literal>
            (Ctrl-R).</para></warning></listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <!-- Fields in the properties tab -->

    <sect2 id="s2.ref.generalization_property_fields">
      <title>Property Fields For Generalization</title>

      <variablelist>

        <!-- Entry for Name -->

        <varlistentry>
          <term><literal>Name</literal></term>

          <listitem><para>Text box. The name of the generalization.</para>

          <tip><para>It is quite common to leave generalizations
            unnamed in use case analysis.</para></tip>

          <note><para>&argouml; does not enforce any naming convention for
            associations.</para></note>

          <note><para>There is no representation of the stereotype of a
            generalization on the diagram.</para></note></listitem>
        </varlistentry>

        <!-- Entry for Stereotype -->

        <varlistentry>
          <term><literal>Stereotype</literal></term>

          <listitem><para>Drop down selector. Generalization is provided by
            default with the UML standard stereotype,
            (<literal>implementation</literal>. &argouml; also provides the
            additional stereotypes, <literal>machine</literal>,
            <literal>organization</literal> and
            <literal>person</literal>. The stereotype is shown between
            &laquo; and &raquo; above or across the generalization.</para>

          <tip><para>Stereotyping generalization does not have great value
            on a use case diagram. The standard stereotype is about
            implementation, and suited to the use of generalization on
            class diagrams.</para></tip></listitem>
        </varlistentry>

        <!-- Entry for NavStereo -->

        <varlistentry>
          <term><literal>Navigate Stereotype</literal></term>

          <listitem><para><guiicon><inlinemediaobject><imageobject><imagedata
              format="GIF" align="center"
              fileref="images/icons/navigate_stereotype.gif"/>
            </imageobject></inlinemediaobject></guiicon> icon. If a
              stereotype has been selected, this will navigate you to the
              stereotype property panel (see <xref
                linkend="s1.ref.stereotype"/>).</para></listitem>
        </varlistentry>

        <!-- Entry for Discriminator -->

        <varlistentry>
          <term><literal>Discriminator</literal></term>

          <listitem><para>Text box. The name of a discriminator for the
            specialization. UML&nbsp;1.3 allows grouping of specializations
            into a number of sets, on the basis of this value.</para>

          <tip><para>The empty string <quote></quote> is a valid entry (and
            the default) for this field. The discriminator is only of
            practical use in cases of multiple inheritance. An example is
            discussed in the section covering generalization on class
            diagrams (see <xref
            linkend="s1.ref.generalization_class"/>). There is little point
            in use this with a use case diagram.</para></tip></listitem>
        </varlistentry>

        <!-- Entry for Namespace -->

        <varlistentry>
          <term><literal>Namespace</literal></term>

          <listitem><para>Text box. Records the namespace for the
            generalization. This is the package hierarchy.</para>

          <para>&Button1; click on the entry will take you to the package
            defining this namespace (or the model for the top level
            namespace).</para></listitem>
        </varlistentry>

        <!-- Entry for Parent -->

        <varlistentry>
          <term><literal>Parent</literal></term>

          <listitem><para>Text box. Records the use case or actor that is the
            <emphasis>parent</emphasis> in this relationship, i.e. the more
            general end of the relationship. &Button1; click
            on this entry will take you to that use case or
            actor. &Button2; click will give a pop up menu, with a single
            entry, <literal>Open</literal> which will also navigate to that
            use case or actor.</para></listitem>
        </varlistentry>

        <!-- Entry for child -->

        <varlistentry>
          <term><literal>Child</literal></term>

          <listitem><para>Text box. Records the use case or actor that is the
            <emphasis>child</emphasis> in this relationship, i.e. the more
            specific end of the relationship. &Button1; click
            on this entry will take you to that use case or
            actor. &Button2; click will give a pop up menu, with a single
            entry, <literal>Open</literal> which will also navigate to that
            use case or actor.</para></listitem>
        </varlistentry>

        <!-- Entry for Powertype -->

        <varlistentry>
          <term><literal>Powertype</literal></term>

          <listitem><para>Drop down selector providing access to all standard
            UML types provided by &argouml; and all new classes created
            within the current model.</para>

          <para>This is the type of the child entity of the
            generalization.</para>

          <tip><para>This can be ignored for use case analysis. The only
            sensible value to put in would be the child use case type (as a
            classifier, this appears in the drop down
            list.</para></tip></listitem>
        </varlistentry>
      </variablelist>

      <figure id="fig.discriminator_example" float="1">
        <title>Example use of a discriminator with generalization</title>

        <screenshot><mediaobject>
          <imageobject>
            <imagedata format="GIF" align="center"
                       fileref="images/reference/discriminator_example.gif"/>
          </imageobject>
        </mediaobject></screenshot>
      </figure>

    </sect2>
  </sect1>

  <!-- Extend relationship -->

  <sect1 id="s1.ref.extend">
    <title>Extend</title>

    <para>Extend is a relationship between two use cases. Where A extends B, it
      means A describes more specific behavior and B the general version of
      that behavior.</para>

    <para>In many respects extend is like generalization. However the key
      difference is that the extended use case defines <emphasis>extension
      points</emphasis> (see <xref linkend="s1.ref.extension_point"/>), which
      are the only places where its behaviour may be extended. The extending
      use case must define at which of these extension points it adds
      behavior.</para>

    <para>This makes the use of extend more tightly controlled than general
      extension, and it is thus preferred wherever possible.</para>

     <para>Examples for a travel agent sales system might be the use case for
       paying for a ticket, which has an extension point in the specification
       of the payment. Extending use cases may then extend at this point to pay
       by cash, credit card etc.</para>

    <para>Within the UML metamodel, <literal>Extend</literal> is a
      sub-class of <literal>Relationship</literal>.</para>

    <para>An extend relationship is represented as a dotted link with an open
      arrow head and a label <literal>&laquo;extend&raquo;</literal> (see <xref
      linkend="fig.ref.use_case_diagram"/>).</para>

    <!-- The details tabs -->

    <sect2>
      <title>Extend Details Tabs</title>

      <para>The details tabs that are active for extend relationships are as
        follows.</para>

      <note><para>There is no source tab, since there is no source code that
        could be generated for an extend relationship.</para></note>

      <variablelist>

        <!-- Entry for ToDoItem tab -->

        <varlistentry>
          <term><literal>ToDoItem</literal></term>

          <listitem><para>Standard tab.</para></listitem>
        </varlistentry>

        <!-- Entry for Properties tab -->

        <varlistentry>
          <term><literal>Properties</literal></term>

          <listitem><para>See <xref
              linkend="s2.ref.extend_property_toolbar"/> and <xref
              linkend="s2.ref.extend_property_fields"/>
            below.</para></listitem>
        </varlistentry>

        <!-- Entry for Documentation tab -->

        <varlistentry>
          <term><literal>Documentation</literal></term>

          <listitem><para>Standard tab.</para></listitem>
        </varlistentry>

        <!-- Entry for Style tab -->

        <varlistentry>
          <term><literal>Style</literal></term>

          <listitem><para>Standard tab</para>

          <note><para>The values for the bounds of the extend relationships
            appear to have no meaning. Changing them has no effect on the
            diagram. This is sensible behavior, given the extend
            is tied to a particular pair of use
            cases.</para></note></listitem>
        </varlistentry>

        <!-- Entry for Constraints tab -->

        <varlistentry>
          <term><literal>Constraints</literal></term>

          <listitem><para>Standard tab. In the UML metamodel,
            <literal>Extend</literal> has no standard
            constraints defined.</para></listitem>
        </varlistentry>

        <!-- Entry for Tagged Values tab -->

        <varlistentry>
          <term><literal>Tagged Values</literal></term>

          <listitem><para>Standard tab. In the UML metamodel,
            <literal>Extend</literal> has the following standard
            tagged values defined.</para>

            <itemizedlist>
              <listitem><para><literal>derived</literal> (from the
                superclass, <literal>ModelElement</literal>). Values
                <literal>true</literal>, meaning the extend relationship is
                redundant&mdash;it can be formally derived from other
                elements, or <literal>false</literal> meaning it
                cannot.</para>

              <note><para>Derived extend relationships could have their value
                in analysis to introduce useful names or
                concepts.</para></note></listitem>
            </itemizedlist>

            <note><para>The UML <literal>Element</literal> metaclass from
              which all other artifacts are derived includes the tagged
              element <literal>documentation</literal> which is handled by
              the <emphasis>documentation tab</emphasis> under
              &argouml;</para></note></listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <!-- Extend properties -->

    <sect2 id="s2.ref.extend_property_toolbar">
      <title>Extend Property Toolbar</title>

      <variablelist>

        <!-- Entry for Go up button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/navigate_up.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Go
            up</literal></term>

          <listitem><para>Navigate up through the package structure of the
            model. For a extend this will be the package containing
            the extend.</para></listitem>
        </varlistentry>

        <!-- Entry for Go back button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/navigate_back.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Go
            back</literal></term>

          <listitem><para>Navigate back to the previous
            artifact.</para>

          <warning><para>This feature is currently broken within &argouml;
            and there is no guarantee where (if anywhere) this button will
            take you.</para></warning></listitem>
        </varlistentry>

        <!-- Entry for Go forward button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/navigate_forward.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Go
            forward</literal></term>

          <listitem><para>Navigate forward to the next
            artifact.</para>

          <warning><para>This feature is currently broken within &argouml;
            and there is no guarantee where (if anywhere) this button will
            take you.</para></warning></listitem>
        </varlistentry>

        <!-- Entry for Add extension point button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/extension_point.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Add extension
            point</literal></term>

          <listitem><para>This creates a new use case extension point within
            the namespace of the current extend relationship, with the current
            extend relationship as its first extending relationship, navigating
            immediately to the properties tab for that extension point.</para>

          <tip><para>While it is perfectly valid to create extension points
            from an extend relationship, the created extension point will have
            no associated use case (it can subsequently be set up).</para>

          <para>It would be more usual to instead create the extension point
            within a use case and subsequently link to it from an extend
            relationship (see <xref linkend="s2.ref.extend_property_fields"/>
            below).</para></tip></listitem>
        </varlistentry>

        <!-- Entry for Delete button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/property_delete.gif"/>
          </imageobject></inlinemediaobject></guiicon>
            <literal>Delete</literal></term>

          <listitem><para>This deletes the selected extend relationshp from the
            model.</para>

          <warning><para>This is a deletion from the model
            <emphasis>not</emphasis> just the diagram. To delete a
            extend from the diagram, but keep it within the model,
            use the main menu <literal>Edit/Remove From Diagram</literal>
            (Ctrl-R).</para></warning></listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <!-- Fields in the properties tab -->

    <sect2 id="s2.ref.extend_property_fields">
      <title>Property Fields For Extend</title>

      <variablelist>

        <!-- Entry for Name -->

        <varlistentry>
          <term><literal>Name</literal></term>

          <listitem><para>Text box. The name of the extend relationship.</para>

          <tip><para>It is quite common to leave extends
            unnamed in use case analysis.</para></tip>

          <note><para>&argouml; does not enforce any naming convention for
            extend relationships.</para></note>

          <note><para>There is no representation of the stereotype of an
            extend relationship on the diagram.</para></note></listitem>
        </varlistentry>

        <!-- Entry for Stereotype -->

        <varlistentry>
          <term><literal>Stereotype</literal></term>

          <listitem><para>Drop down selector. &argouml; provides the
            non-standard stereotypes, <literal>machine</literal>,
            <literal>organization</literal> and
            <literal>person</literal>. It also rather bizarly provides the
            <literal>realize</literal> stereotype (which is more properly just
            a stereotype of abstraction relationships.</para>

          <tip><para>Stereotyping does not have great value on an extend
            relationship.</para></tip></listitem>
        </varlistentry>

        <!-- Entry for NavStereo -->

        <varlistentry>
          <term><literal>Navigate Stereotype</literal></term>

          <listitem><para><guiicon><inlinemediaobject><imageobject><imagedata
              format="GIF" align="center"
              fileref="images/icons/navigate_stereotype.gif"/>
            </imageobject></inlinemediaobject></guiicon> icon. If a
              stereotype has been selected, this will navigate you to the
              stereotype property panel (see <xref
                linkend="s1.ref.stereotype"/>).</para></listitem>
        </varlistentry>

        <!-- Entry for Namespace -->

        <varlistentry>
          <term><literal>Namespace</literal></term>

          <listitem><para>Text box. Records the namespace for the
            extend. This is the package hierarchy.</para>

          <para>&Button1; click on the entry will take you to the package
            defining this namespace (or the model for the top level
            namespace).</para></listitem>
        </varlistentry>

        <!-- Entry for Base -->

        <varlistentry>
          <term><literal>Base</literal></term>

          <listitem><para>Drop down selector. Records the use case that is
            being extended by this extend relationship.  &Button1; click
            on this entry will give a drop down menu of all available use cases
            (and an empty entry) which may be selected by &button1;
            click.</para>

          <caution><para>In the current version of &argouml; if you change the
            base use case on an extend relationship that is already shown on a
            diagram, then it will NOT be redrawn. Currently the only way to
            effect a redraw is to remove the use cases at each end from the
            diagram and then add them back from the navigation
            pane.</para></caution></listitem>
        </varlistentry>

        <!-- Entry for NavUseCase (Base) -->

        <varlistentry>
          <term><literal>Navigate Use Case (Base)</literal></term>

          <listitem><para><guiicon><inlinemediaobject><imageobject><imagedata
              format="GIF" align="center"
              fileref="images/icons/navigate_stereotype.gif"/>
            </imageobject></inlinemediaobject></guiicon> icon. If a
              base use case has been selected, this will navigate you to the
              use case property panel (see <xref
                linkend="s1.ref.use_case"/>).</para></listitem>
        </varlistentry>

        <!-- Entry for Extension -->

        <varlistentry>
          <term><literal>Extension</literal></term>

          <listitem><para>Drop down selector. Records the use case that is
            doing the extending through this extend relationship.  &Button1;
            click on this entry will give a drop down menu of all available use
            cases (and an empty entry) which may be selected by &button1;
            click.</para>

          <caution><para>In the current version of &argouml; if you change the
            extension use case on an extend relationship that is already shown
            on a diagram, then it will NOT be redrawn. Currently the only way
            to effect a redraw is to remove the use cases at each end from the
            diagram and then add them back from the navigation
            pane.</para></caution></listitem>
        </varlistentry>

        <!-- Entry for NavUseCase (Extension) -->

        <varlistentry>
          <term><literal>Navigate Use Case (Extension)</literal></term>

          <listitem><para><guiicon><inlinemediaobject><imageobject><imagedata
              format="GIF" align="center"
              fileref="images/icons/navigate_stereotype.gif"/>
            </imageobject></inlinemediaobject></guiicon> icon. If a
              extension use case has been selected, this will navigate you to
              the use case property panel (see <xref
                linkend="s1.ref.use_case"/>).</para></listitem>
        </varlistentry>

        <!-- Entry for Extension Points -->

        <varlistentry>
          <term><literal>Extension Points</literal></term>

          <listitem><para>Text box. If this use case is, or can be extended,
            this field lists the extension points for the use case.</para>

          <note><para>Extension points are listed by their location point
            rather than their name.</para></note>

          <para>Where an extension point has been created (see below),
            &button1; click will navigate to that relationship. &Button2; gives
            a pop up menu with six entries.</para>

          <itemizedlist>
            <listitem><para><literal>Open</literal>. Navigate to the selected
              extension point. Grayed out if there are currently no extension
              points.</para></listitem>

            <listitem><para><literal>Add</literal>. Add a new extension point
              before the current extension point in the list and navigate to
              it. The current extend relationship is added as the first in list
              of extending relationships of the new extension
              point.</para></listitem>

            <listitem><para><literal>Link</literal>. Where there are existing
              extension points (other than those currently used by the extend
              relationship) this produces a drop down menu of those extension
              points. They are shown in two groups. First those that are
              extension points of the current extend relationships base use
              case (and which are therefore semantically valid within the UML
              standard). Secondly those of other use cases (which are not
              semnatically valid).</para>

            <para>&button1; click on an extension point will add it to the
              extension point list of the extend relationship before the
              selected point in the current extension point list.</para>

            <tip><para>It may still make sense to link to an extension point in
              the second part of the list in the middle of a model
              reorganisation. In the fullness of time, an &argouml; critic will
              warn of this problem.</para></tip></listitem>

            <listitem><para><literal>Delete</literal>. Where an extension
              point has been created<literal>Add</literal>, this removes
              it.</para>

            <note><para>This deletes the connection to the extension point
              extension point, but does not delete the extension point from the
              model.</para></note></listitem>

            <listitem><para><literal>Move Up</literal>. Only available where
              there are two or more extension points listed, and the extension
              point selected is not at the top. It is moved one up the
              list.</para></listitem>

            <listitem><para><literal>Move Down</literal>. Only available where
              there are two or more extension points listed, and the extension
              point selected is not at the bottom. It is moved one down the
              list.</para></listitem>
          </itemizedlist></listitem>
        </varlistentry>
      </variablelist>
    </sect2>
  </sect1>

  <!-- Extension Point relationship -->

  <sect1 id="s1.ref.extension_point">
    <title>Extension Point</title>

    <para>An extension point describes a point in a use case where an extending
      use case may provide additional behaviour.</para>

     <para>Examples for a travel agent sales system might be the use case for
       paying for a ticket, which has an extension point in the specification
       of the payment. Extending use cases may then extend at this point to pay
       by cash, credit card etc.</para>

    <para>Within the UML metamodel, <literal>Extension Point</literal> is a
      sub-class of <literal>ModelElement</literal>. It has no representation on
      the diagram.</para>

    <!-- The details tabs -->

    <sect2>
      <title>Extension Point Details Tabs</title>

      <para>The details tabs that are active for extension points are as
        follows.</para>

      <note><para>There is no source tab, since there is no source code that
        could be generated for an extension point.</para></note>

      <variablelist>

        <!-- Entry for ToDoItem tab -->

        <varlistentry>
          <term><literal>ToDoItem</literal></term>

          <listitem><para>Standard tab.</para></listitem>
        </varlistentry>

        <!-- Entry for Properties tab -->

        <varlistentry>
          <term><literal>Properties</literal></term>

          <listitem><para>See <xref
              linkend="s2.ref.extension_point_property_toolbar"/> and <xref
              linkend="s2.ref.extension_point_property_fields"/>
            below.</para></listitem>
        </varlistentry>

        <!-- Entry for Documentation tab -->

        <varlistentry>
          <term><literal>Documentation</literal></term>

          <listitem><para>Standard tab.</para></listitem>
        </varlistentry>

        <!-- Entry for Style tab -->

        <varlistentry>
          <term><literal>Style</literal></term>

          <listitem><para>Standard tab</para>

          <caution><para>The values here are those of the owning use
            case.</para></caution></listitem>
        </varlistentry>

        <!-- Entry for Constraints tab -->

        <varlistentry>
          <term><literal>Constraints</literal></term>

          <listitem><para>Standard tab. In the UML metamodel,
            <literal>ExtensionPoint</literal> has no standard
            constraints defined.</para></listitem>
        </varlistentry>

        <!-- Entry for Tagged Values tab -->

        <varlistentry>
          <term><literal>Tagged Values</literal></term>

          <listitem><para>Standard tab. In the UML metamodel,
            <literal>ExtensionPoint</literal> has the following standard
            tagged values defined.</para>

            <itemizedlist>
              <listitem><para><literal>derived</literal> (from the
                superclass, <literal>ModelElement</literal>). Values
                <literal>true</literal>, meaning the extension point is
                redundant&mdash;it can be formally derived from other
                elements, or <literal>false</literal> meaning it
                cannot.</para>

              <note><para>It is not clear how derived extension points could
                have any value in analysis.</para></note></listitem>
            </itemizedlist>

            <note><para>The UML <literal>Element</literal> metaclass from
              which all other artifacts are derived includes the tagged
              element <literal>documentation</literal> which is handled by
              the <emphasis>documentation tab</emphasis> under
              &argouml;</para></note></listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <!-- Extension Point properties -->

    <sect2 id="s2.ref.extension_point_property_toolbar">
      <title>Extension Point Property Toolbar</title>

      <variablelist>

        <!-- Entry for Go up button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/navigate_up.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Go
            up</literal></term>

          <listitem><para>Navigate up through the package structure of the
            model. For a extension point this will be the package containing
            the extension point.</para></listitem>
        </varlistentry>

        <!-- Entry for Go back button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/navigate_back.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Go
            back</literal></term>

          <listitem><para>Navigate back to the previous
            artifact.</para>

          <warning><para>This feature is currently broken within &argouml;
            and there is no guarantee where (if anywhere) this button will
            take you.</para></warning></listitem>
        </varlistentry>

        <!-- Entry for Go forward button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/navigate_forward.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Go
            forward</literal></term>

          <listitem><para>Navigate forward to the next
            artifact.</para>

          <warning><para>This feature is currently broken within &argouml;
            and there is no guarantee where (if anywhere) this button will
            take you.</para></warning></listitem>
        </varlistentry>

        <!-- Entry for Delete button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/property_delete.gif"/>
          </imageobject></inlinemediaobject></guiicon>
            <literal>Delete</literal></term>

          <listitem><para>This deletes the selected extension point from the
            model.</para></listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <!-- Fields in the properties tab -->

    <sect2 id="s2.ref.extension_point_property_fields">
      <title>Property Fields For Extension Point</title>

      <variablelist>

        <!-- Entry for Name -->

        <varlistentry>
          <term><literal>Name</literal></term>

          <listitem><para>Text box. The name of the extension point.</para>

          <tip><para>It is quite common to leave extension points
            unnamed in use case analysis, since they are always listed (within
            use cases and extend relationships) by their location.</para></tip>

          <note><para>&argouml; does not enforce any naming convention for
            extension points.</para></note></listitem>
        </varlistentry>

        <!-- Entry for Stereotype -->

        <varlistentry>
          <term><literal>Stereotype</literal></term>

          <listitem><para>Drop down selector. &argouml; provides the
            non-standard stereotypes, <literal>machine</literal>,
            <literal>organization</literal> and
            <literal>person</literal>. It also rather bizarly provides the
            <literal>realize</literal> stereotype (which is more properly just
            a stereotype of abstraction relationships.</para>

          <tip><para>Stereotyping does not have great value on an extension
            point.</para></tip></listitem>
        </varlistentry>

        <!-- Entry for NavStereo -->

        <varlistentry>
          <term><literal>Navigate Stereotype</literal></term>

          <listitem><para><guiicon><inlinemediaobject><imageobject><imagedata
              format="GIF" align="center"
              fileref="images/icons/navigate_stereotype.gif"/>
            </imageobject></inlinemediaobject></guiicon> icon. If a
              stereotype has been selected, this will navigate you to the
              stereotype property panel (see <xref
                linkend="s1.ref.stereotype"/>).</para></listitem>
        </varlistentry>

        <!-- Entry for Namespace -->

        <varlistentry>
          <term><literal>Namespace</literal></term>

          <listitem><para>Text box. Records the namespace for the
            extension point. This is the package hierarchy.</para>

          <para>&Button1; click on the entry will take you to the package
            defining this namespace (or the model for the top level
            namespace).</para></listitem>
        </varlistentry>

        <!-- Entry for Location -->

        <varlistentry>
          <term><literal>Location</literal></term>

          <listitem><para>Text box. A description of the location of this
            extension point within the owning use case.</para>

          <tip><para>Extension points are always listed (within
            use cases and extend relationships) by their location. Typically
            this will be the number/name of the paragraph in the
            specification.</para></tip></listitem>
        </varlistentry>

        <!-- Entry for Base Use Case-->

        <varlistentry>
          <term><literal>Base Use Case</literal></term>

          <listitem><para>Drop down selector. Records the base use case within
            which this extension point is defined. &Button1; click
            on this entry will give a drop down menu of all available use cases
            (and an empty entry) which may be selected by &button1;
            click.</para></listitem>
        </varlistentry>

        <!-- Entry for NavUseCase -->

        <varlistentry>
          <term><literal>Navigate Use Case</literal></term>

          <listitem><para><guiicon><inlinemediaobject><imageobject><imagedata
              format="GIF" align="center"
              fileref="images/icons/navigate_stereotype.gif"/>
            </imageobject></inlinemediaobject></guiicon> icon. If a
              base use case has been selected, this will navigate you to the
              use case property panel (see <xref
                linkend="s1.ref.use_case"/>).</para></listitem>
        </varlistentry>

        <!-- Entry for Extending Use Case -->

        <varlistentry>
          <term><literal>Extending Use Cases</literal></term>

          <listitem><para>Text box. Lists all use cases which extend the base
            use case through this extension point.</para>

          <para>Where an extending use case exists, &button1; click will
            navigate to that relationship. &Button2; gives a pop up menu with
            five entries.</para>

          <itemizedlist>
            <listitem><para><literal>Open</literal>. Navigate to the extend
              relationship that links to the selected
              use case. Grayed out if there are currently no extending use
              cases.</para></listitem>

            <listitem><para><literal>Add</literal>. Add a new extend
              relationship (which can then add an extension use case)
              before the current use case in the list and navigate to
              it. The owning use case of the current extension point
              relationship is made the base use case of the new extend
              relationship.</para></listitem>

            <listitem><para><literal>Delete</literal>. Where an extend
              relationship to an extending use case has been
              created<literal>Add</literal>, this removes the link to
              it.</para>

            <note><para>This deletes the connection to the extend relationship,
              but does not delete the extend relationship from the
              model.</para></note></listitem>

            <listitem><para><literal>Move Up</literal>. Only available where
              there are two or more use cases listed, and the use case selected
              is not at the top. It is moved one up the list.</para></listitem>

            <listitem><para><literal>Move Down</literal>. Only available where
              there are two or more use cases listed, and the use case selected
              is not at the bottom. It is moved one down the
              list.</para></listitem> </itemizedlist></listitem>
        </varlistentry>
      </variablelist>
    </sect2>
  </sect1>

  <!-- Include relationship -->

  <sect1 id="s1.ref.include">
    <title>Include</title>

    <para>Include is a relationship between two use cases. Where A includes B,
      it means B described behaviour that is to be included in the description
      of the behaviour of A at some point (defined internally by A).</para>

    <para>Examples for a travel agent sales system might be the use case for
      booking travel, which includes use cases for booking flights and taking
      payment.</para>

    <para>Within the UML metamodel, <literal>Include</literal> is a
      sub-class of <literal>Relationship</literal>.</para>

    <para>An include relationship is represented as a dotted link with an open
      arrow head and a label <literal>&laquo;include&raquo;</literal> (see
      <xref linkend="fig.ref.use_case_diagram"/>).</para>

    <!-- The details tabs -->

    <sect2>
      <title>Include Details Tabs</title>

      <para>The details tabs that are active for include relationships are as
        follows.</para>

      <note><para>There is no source tab, since there is no source code that
        could be generated for an include relationship.</para></note>

      <variablelist>

        <!-- Entry for ToDoItem tab -->

        <varlistentry>
          <term><literal>ToDoItem</literal></term>

          <listitem><para>Standard tab.</para></listitem>
        </varlistentry>

        <!-- Entry for Properties tab -->

        <varlistentry>
          <term><literal>Properties</literal></term>

          <listitem><para>See <xref
              linkend="s2.ref.include_property_toolbar"/> and <xref
              linkend="s2.ref.include_property_fields"/>
            below.</para></listitem>
        </varlistentry>

        <!-- Entry for Documentation tab -->

        <varlistentry>
          <term><literal>Documentation</literal></term>

          <listitem><para>Standard tab.</para></listitem>
        </varlistentry>

        <!-- Entry for Style tab -->

        <varlistentry>
          <term><literal>Style</literal></term>

          <listitem><para>Standard tab</para>

          <note><para>The values for the bounds of the include relationships
            appear to have no meaning. Changing them has no effect on the
            diagram. This is sensible behavior, given the include
            is tied to a particular pair of use
            cases.</para></note></listitem>
        </varlistentry>

        <!-- Entry for Constraints tab -->

        <varlistentry>
          <term><literal>Constraints</literal></term>

          <listitem><para>Standard tab. In the UML metamodel,
            <literal>Include</literal> has no standard
            constraints defined.</para></listitem>
        </varlistentry>

        <!-- Entry for Tagged Values tab -->

        <varlistentry>
          <term><literal>Tagged Values</literal></term>

          <listitem><para>Standard tab. In the UML metamodel,
            <literal>Include</literal> has the following standard
            tagged values defined.</para>

            <itemizedlist>
              <listitem><para><literal>derived</literal> (from the
                superclass, <literal>ModelElement</literal>). Values
                <literal>true</literal>, meaning the include relationship is
                redundant&mdash;it can be formally derived from other
                elements, or <literal>false</literal> meaning it
                cannot.</para>

              <note><para>Derived include relationships could have their value
                in analysis to introduce useful names or
                concepts.</para></note></listitem>
            </itemizedlist>

            <note><para>The UML <literal>Element</literal> metaclass from
              which all other artifacts are derived includes the tagged
              element <literal>documentation</literal> which is handled by
              the <emphasis>documentation tab</emphasis> under
              &argouml;</para></note></listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <!-- Include properties -->

    <sect2 id="s2.ref.include_property_toolbar">
      <title>Include Property Toolbar</title>

      <variablelist>

        <!-- Entry for Go up button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/navigate_up.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Go
            up</literal></term>

          <listitem><para>Navigate up through the package structure of the
            model. For a include this will be the package containing
            the include.</para></listitem>
        </varlistentry>

        <!-- Entry for Go back button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/navigate_back.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Go
            back</literal></term>

          <listitem><para>Navigate back to the previous
            artifact.</para>

          <warning><para>This feature is currently broken within &argouml;
            and there is no guarantee where (if anywhere) this button will
            take you.</para></warning></listitem>
        </varlistentry>

        <!-- Entry for Go forward button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/navigate_forward.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Go
            forward</literal></term>

          <listitem><para>Navigate forward to the next
            artifact.</para>

          <warning><para>This feature is currently broken within &argouml;
            and there is no guarantee where (if anywhere) this button will
            take you.</para></warning></listitem>
        </varlistentry>

        <!-- Entry for Delete button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/property_delete.gif"/>
          </imageobject></inlinemediaobject></guiicon>
            <literal>Delete</literal></term>

          <listitem><para>This deletes the selected include relationshp from
            the model.</para>

          <warning><para>This is a deletion from the model
            <emphasis>not</emphasis> just the diagram. To delete a
            include from the diagram, but keep it within the model,
            use the main menu <literal>Edit/Remove From Diagram</literal>
            (Ctrl-R).</para></warning></listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <!-- Fields in the properties tab -->

    <sect2 id="s2.ref.include_property_fields">
      <title>Property Fields For Include</title>

      <variablelist>

        <!-- Entry for Name -->

        <varlistentry>
          <term><literal>Name</literal></term>

          <listitem><para>Text box. The name of the include
            relationship.</para>

          <tip><para>It is quite common to leave include relationships unnamed
            in use case analysis.</para></tip>

          <note><para>&argouml; does not enforce any naming convention for
            include relationships.</para></note>

          <note><para>There is no representation of the stereotype of an
            include relationship on the diagram.</para></note></listitem>
        </varlistentry>

        <!-- Entry for Stereotype -->

        <varlistentry>
          <term><literal>Stereotype</literal></term>

          <listitem><para>Drop down selector. &argouml; provides the
            non-standard stereotypes, <literal>machine</literal>,
            <literal>organization</literal> and
            <literal>person</literal>. It also rather bizarly provides the
            <literal>realize</literal> stereotype (which is more properly just
            a stereotype of abstraction relationships.</para>

          <tip><para>Stereotyping does not have great value on an include
            relationship.</para></tip></listitem>
        </varlistentry>

        <!-- Entry for NavStereo -->

        <varlistentry>
          <term><literal>Navigate Stereotype</literal></term>

          <listitem><para><guiicon><inlinemediaobject><imageobject><imagedata
              format="GIF" align="center"
              fileref="images/icons/navigate_stereotype.gif"/>
            </imageobject></inlinemediaobject></guiicon> icon. If a
              stereotype has been selected, this will navigate you to the
              stereotype property panel (see <xref
                linkend="s1.ref.stereotype"/>).</para></listitem>
        </varlistentry>

        <!-- Entry for Namespace -->

        <varlistentry>
          <term><literal>Namespace</literal></term>

          <listitem><para>Text box. Records the namespace for the
            include. This is the package hierarchy.</para>

          <para>&Button1; click on the entry will take you to the package
            defining this namespace (or the model for the top level
            namespace).</para></listitem>
        </varlistentry>

        <!-- Entry for Base -->

        <varlistentry>
          <term><literal>Base</literal></term>

          <listitem><para>Drop down selector. Records the use case that is
            doing the including in this include relationship.  &Button1; click
            on this entry will give a drop down menu of all available use cases
            (and an empty entry) which may be selected by &button1;
            click.</para>

          <caution><para>In the current version of &argouml; if you change the
            base use case on an include relationship that is already shown on a
            diagram, then it will NOT be redrawn. Currently the only way to
            effect a redraw is to remove the use cases at each end from the
            diagram and then add them back from the navigation
            pane.</para></caution></listitem>
        </varlistentry>

        <!-- Entry for NavUseCase (Base) -->

        <varlistentry>
          <term><literal>Navigate Use Case (Base)</literal></term>

          <listitem><para><guiicon><inlinemediaobject><imageobject><imagedata
              format="GIF" align="center"
              fileref="images/icons/navigate_stereotype.gif"/>
            </imageobject></inlinemediaobject></guiicon> icon. If a
              base use case has been selected, this will navigate you to the
              use case property panel (see <xref
                linkend="s1.ref.use_case"/>).</para></listitem>
        </varlistentry>

        <!-- Entry for Addition -->

        <varlistentry>
          <term><literal>Addition</literal></term>

          <listitem><para>Drop down selector. Records the use case that is
            being included by this include relationship.  &Button1;
            click on this entry will give a drop down menu of all available use
            cases (and an empty entry) which may be selected by &button1;
            click.</para>

          <caution><para>In the current version of &argouml; if you change the
            addition use case on an include relationship that is already shown
            on a diagram, then it will NOT be redrawn. Currently the only way
            to effect a redraw is to remove the use cases at each end from the
            diagram and then add them back from the navigation
            pane.</para></caution></listitem>
        </varlistentry>

        <!-- Entry for NavUseCase (Addition) -->

        <varlistentry>
          <term><literal>Navigate Use Case (Addition)</literal></term>

          <listitem><para><guiicon><inlinemediaobject><imageobject><imagedata
              format="GIF" align="center"
              fileref="images/icons/navigate_stereotype.gif"/>
            </imageobject></inlinemediaobject></guiicon> icon. If a
              addition use case has been selected, this will navigate you to
              the use case property panel (see <xref
                linkend="s1.ref.use_case"/>).</para></listitem>
        </varlistentry>
      </variablelist>
    </sect2>
  </sect1>

  <!-- Dependency -->

  <sect1 id="s1.ref.dependency_use_case">
    <title>Dependency</title>

    <para>Dependency is a relationship between two artifacts showing that one
      depends on the other.</para>

    <caution><para>Dependency has little use in use case diagrams. It is
      provided, because earlier versions of &argouml; used it (incorrectly) to
      implement include and extends relationships</para></caution>

    <para>Within the UML metamodel, <literal>Dependency</literal> is a
      sub-class of <literal>Relationship</literal>.</para>

    <para>Dependency is represented as a dotted line with an open arrow head
      from the dependent to the depending artifact (see <xref
      linkend="fig.ref.use_case_diagram"/>).</para>

    <!-- The details tabs -->

    <sect2>
      <title>Dependency Details Tabs</title>

      <para>The details tabs that are active for dependencies are as
        follows.</para>

      <note><para>There is no source tab, since there is no source code that
        could be generated for a dependency relationship.</para></note>

      <variablelist>

        <!-- Entry for ToDoItem tab -->

        <varlistentry>
          <term><literal>ToDoItem</literal></term>

          <listitem><para>Standard tab.</para></listitem>
        </varlistentry>

        <!-- Entry for Properties tab -->

        <varlistentry>
          <term><literal>Properties</literal></term>

          <listitem><para>See <xref
              linkend="s2.ref.dependency_property_toolbar"/> and <xref
              linkend="s2.ref.dependency_property_fields"/>
            below.</para></listitem>
        </varlistentry>

        <!-- Entry for Documentation tab -->

        <varlistentry>
          <term><literal>Documentation</literal></term>

          <listitem><para>Standard tab.</para></listitem>
        </varlistentry>

        <!-- Entry for Style tab -->

        <varlistentry>
          <term><literal>Style</literal></term>

          <listitem><para>Standard tab</para>

          <note><para>The values for the bounds of the dependency appear to
            have no meaning. Changing them has no effect on the
            diagram. This is sensible behavior, given the dependency is
            tied to a particular use case.</para></note></listitem>
        </varlistentry>

        <!-- Entry for Constraints tab -->

        <varlistentry>
          <term><literal>Constraints</literal></term>

          <listitem><para>Standard tab. There are no standard constraints
            defined for <literal>Dependency</literal> within
            the UML metamodel.</para></listitem>
        </varlistentry>

        <!-- Entry for Tagged Values tab -->

        <varlistentry>
          <term><literal>Tagged Values</literal></term>

          <listitem><para>Standard tab. In the UML metamodel,
            <literal>Dependency</literal> has no tagged values of its own, but
            through superclasses has the following standard tagged values
            defined.</para>

            <itemizedlist>
              <listitem><para><literal>derived</literal> (from the superclass,
                <literal>ModelElement</literal>). Values
                <literal>true</literal>, meaning the dependency relationship is
                redundant&mdash;it can be formally derived from other elements,
                or <literal>false</literal> meaning it cannot.</para>

              <note><para>Derived dependencies still have their value in
                analysis to introduce useful names or
                concepts.</para></note></listitem>
            </itemizedlist>

            <note><para>The UML <literal>Element</literal> metaclass from
              which all other artifacts are derived includes the tagged
              element <literal>documentation</literal> which is handled by
              the <emphasis>documentation tab</emphasis> under
              &argouml;</para></note></listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <!-- Dependency properties -->

    <sect2 id="s2.ref.dependency_property_toolbar">
      <title>Dependency Property Toolbar</title>

      <variablelist>

        <!-- Entry for Go up button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/navigate_up.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Go
            up</literal></term>

          <listitem><para>Navigate up through the package structure of the
            model. For a dependency this will be the package containing
            the dependency.</para></listitem>
        </varlistentry>

        <!-- Entry for Go back button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/navigate_back.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Go
            back</literal></term>

          <listitem><para>Navigate back to the previous
            artifact.</para>

          <warning><para>This feature is currently broken within &argouml;
            and there is no guarantee where (if anywhere) this button will
            take you.</para></warning></listitem>
        </varlistentry>

        <!-- Entry for Go forward button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/navigate_forward.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Go
            forward</literal></term>

          <listitem><para>Navigate forward to the next
            artifact.</para>

          <warning><para>This feature is currently broken within &argouml;
            and there is no guarantee where (if anywhere) this button will
            take you.</para></warning></listitem>
        </varlistentry>

        <!-- Entry for Delete button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/property_delete.gif"/>
          </imageobject></inlinemediaobject></guiicon>
            <literal>Delete</literal></term>

          <listitem><para>This deletes the selected dependency from the
            model.</para>

          <warning><para>This is a deletion from the model
            <emphasis>not</emphasis> just the diagram. To delete a
            dependency from the diagram, but keep it within the model, use
            the main menu <literal>Edit/Remove From Diagram</literal>
            (Ctrl-R).</para></warning></listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <!-- Fields in the properties tab -->

    <sect2 id="s2.ref.dependency_property_fields">
      <title>Property Fields For Dependency</title>

      <variablelist>

        <!-- Entry for Name -->

        <varlistentry>
          <term><literal>Name</literal></term>

          <listitem><para>Text box. The name of the dependency.</para>

          <tip><para>It is quite common to leave dependencies
            unnamed.</para></tip> 

          <note><para>&argouml; does not enforce any naming convention for
            associations.</para></note>

          <note><para>There is no representation of the name of a
            dependency on the diagram.</para></note></listitem>
        </varlistentry>

        <!-- Entry for Stereotype -->

        <varlistentry>
          <term><literal>Stereotype</literal></term>

          <listitem><para>Drop down selector. Dependency has no standard
            stereotypes of its own under UML&nbsp;1.3. &argouml; provides two
            stereotypes <literal>extend</literal> and
            <literal>include</literal>, which in the past allowed depend to be
            used to draw these relationships. &argouml; also provides the
            additional stereotypes, <literal>machine</literal>,
            <literal>organization</literal>, <literal>person</literal> and
            rather bizarrely <literal>realize</literal> (which properly is a
            stereotype only of abstraction). The stereotype is shown between
            &laquo; and &raquo; above or across the
            generalization.</para></listitem>
        </varlistentry>

        <!-- Entry for NavStereo -->

        <varlistentry>
          <term><literal>Navigate Stereotype</literal></term>

          <listitem><para><guiicon><inlinemediaobject><imageobject><imagedata
              format="GIF" align="center"
              fileref="images/icons/navigate_stereotype.gif"/>
            </imageobject></inlinemediaobject></guiicon> icon. If a
              stereotype has been selected, this will navigate you to the
              stereotype property panel (see <xref
                linkend="s1.ref.stereotype"/>).</para></listitem>
        </varlistentry>

        <!-- Entry for Namespace -->

        <varlistentry>
          <term><literal>Namespace</literal></term>

          <listitem><para>Text box. Records the namespace for the
            dependency. This is the package hierarchy.</para>

          <para>&Button1; click on the entry will take you to the package
            defining this namespace (or the model for the top level
            namespace).</para></listitem>
        </varlistentry>

        <!-- Entry for Suppliers -->

        <varlistentry>
          <term><literal>Suppliers</literal></term>

          <listitem><para>Text area. Lists the <quote>depending</quote> ends
            of the relationship, i.e. the end supplying what is needed by
            the other end.</para>

          <itemizedlist>
            <listitem><para><literal>Open</literal>. Where a supplier
              exists, navigate to it.</para></listitem>

            <listitem><para><literal>Move Up</literal>. Only available
              where there are two or more suppliers, and the
              supplier selected is not at the top. It is moved one
              up the list.</para></listitem>

            <listitem><para><literal>Move Down</literal>. Only available
              where there are two or more suppliers listed, and the
              supplier selected is not at the bottom. It is moved one down
              the list.</para></listitem> </itemizedlist></listitem>
        </varlistentry>

        <!-- Entry for Clients -->

        <varlistentry>
          <term><literal>Clients</literal></term>

          <listitem><para>Text area. Lists the <quote>depending</quote> ends
            of the relationship, i.e. the end supplying what is needed by
            the other end.</para>

          <para>&Button1; click on a client will navigate to that
            use case. &Button2; click gives a pop up menu with three
            options.</para>

          <itemizedlist>
            <listitem><para><literal>Open</literal>. Where a client
              exists, navigate to it.</para></listitem>

            <listitem><para><literal>Move Up</literal>. Only available
              where there are two or more clients, and the client selected
              is not at the top. It is moved one up the
              list.</para></listitem>

            <listitem><para><literal>Move Down</literal>. Only available
              where there are two or more clients listed, and the client
              selected is not at the bottom. It is moved one down the
              list.</para></listitem> </itemizedlist></listitem>
        </varlistentry>
      </variablelist>
    </sect2>
  </sect1>

</chapter>

<!-- Local stuff for Emacs - please do not delete

Local Variables:
mode: xml
sgml-doctype: "argomanual.xml"
sgml-parent-document: ("argomanual.xml" "chapter" nil)
sgml-validate-command: "nsgmls -wxml -sv ../docbook-setup/xml.dcl \
  argomanual.xml"
End:

-->
