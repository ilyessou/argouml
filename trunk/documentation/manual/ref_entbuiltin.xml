<?xml version="1.0" encoding="ISO-8859-1"?>

<!--

A description of the built in datatypes, classes, interfaces and stereotypes
within ArgoUML


Modifications
=============

11 Dec 2001:  Jeremy Bennett. Created as new chapter.

-->

<chapter id="chrefentbuiltin">
  <title>&argouml; Built In DataTypes, Classes, Intefaces and
    Stereotypes</title>

  <sect1>
    <title>Introduction</title>

    <para>This chapter describes the datatypes, classes, interfaces and
      stereotypes, which by default, are built in to &argouml;.</para>

    <para>Datatypes, classes and interfaces are generally available for use
      anywhere a class may be selected in the properties tab. The most common
      use is for types of methods and parameters.</para>

    <note><para>These built in stereotypes and classes can be disabled through
      the menu <literal>Edit>Settings</literal>.</para></note>

    <sect2>
      <title>Package Structure</title>

      <para>The datatypes, classes and interfaces are effectively organised as
        a hierarchy beneath the overall model itself. They are in four
        packages, <literal>lang</literal>, <literal>math</literal>,
        <literal>net</literal> and <literal>util</literal>, themselves
        subpackages of <literal>java</literal>, which is a subpackage of the
        model itself. <xref linkend="figrefentclasshier"/> shows this as a UML
        package diagram.</para>

      <!-- This diagram shows the package hierarchy. -->

      <figure id="figrefentclasshier" float="1">
        <title>Hierarchy of datatypes, classes and interfaces within
          &argouml;</title>

        <screenshot><mediaobject>
          <imageobject>
            <imagedata format="PNG" align="center"
                       fileref="images/reference/entclasshier.png"/>
          </imageobject>

          <textobject>
            <para>A package diagram showing a package hierarchy. At the top is
              the model itself. Beneath this is the subpackage
              <literal>java</literal>. Beneath <literal>java</literal> are four
              subpackages, from left to right <literal>lang></literal>,
              <literal>math</literal>, <literal>net</literal> and
              <literal>util</literal>. All four have their own subpackage
              <literal>classes</literal> beneath them. In addition
              <literal>lang</literal> has a subpackage,
              <literal>datatypes</literal> beneath it, and
              <literal>util</literal> has a subpackage
              <literal>interfaces</literal> beneath it.</para>
          </textobject>
        </mediaobject></screenshot>
      </figure>
    </sect2>
  </sect1>

  <!-- Built in datatypes. -->

  <sect1>
    <title>Built In Datatypes</title>

    <para>These are the built in atomic types. Strictly speaking they are
      classes (like all types) and you can change them if you wish. However
      this is not good practice</para>

    <para>All these can be found in the <literal>java.lang</literal> subpackage
      of the main model.</para>

    <note><para>You will not find these exposed within the top level package by
      default. However if you select a datatype (say from within a class
      parameter property sheet), and navigate up, you can navigate up to the
      top package. Thereafter you will find that the package has appeared as a
      subpackage of the model, and you can navigate back down (but only to the
      type you came up from).</para></note>

    <!-- boolean -->

    <sect2>
      <title><literal>boolean</literal></title>

      <remark>To be written&hellip;</remark>
    </sect2>

    <!-- byte -->

    <sect2>
      <title><literal>byte</literal></title>

      <remark>To be written&hellip;</remark>
    </sect2>

    <!-- char -->

    <sect2>
      <title><literal>char</literal></title>

      <remark>To be written&hellip;</remark>
    </sect2>

    <!-- double -->

    <sect2>
      <title><literal>double</literal></title>

      <remark>To be written&hellip;</remark>
    </sect2>

    <!-- float -->

    <sect2>
      <title><literal>float</literal></title>

      <remark>To be written&hellip;</remark>
    </sect2>

    <!-- int -->

    <sect2>
      <title><literal>int</literal></title>

      <remark>To be written&hellip;</remark>
    </sect2>

    <!-- long -->

    <sect2>
      <title><literal>long</literal></title>

      <remark>To be written&hellip;</remark>
    </sect2>

    <!-- short -->

    <sect2>
      <title><literal>short</literal></title>

      <remark>To be written&hellip;</remark>
    </sect2>

    <!-- void -->

    <sect2>
      <title><literal>void</literal></title>

      <para>Not strictly speaking a type, but the absence of type. &argouml;
        knows about void and allows it as an option where a datatype may be
        selected.</para>
    </sect2>
  </sect1>

  <!-- Built in classes -->

  <sect1>
    <title>Built In Classes</title>

    <para>These are the common classes, corresponding to classes defined within
      the standard Java environment. It is up to you if you wish to change
      them.</para>

    <para>These are found in all four subpackages of the
      <literal>java</literal> subpackage.</para>

    <note><para>As with datatypes, you will not find these exposed within the
      top level package by default. However if you select a datatype (say from
      within a class parameter property sheet), and navigate up, you can
      navigate up to the top package. Thereafter you will find that the package
      has appeared as a subpackage of the model, and you can navigate back down
      (but only to the type you came up from).</para></note>

    <!-- Classes in java.lang -->

    <sect2>
      <title>Built In Classes Within <literal>java.lang</literal></title>

      <!-- Boolean -->

      <sect3>
        <title><literal>Boolean</literal></title>

        <remark>To be written&hellip;</remark>
      </sect3>

      <!-- Byte -->

      <sect3>
        <title><literal>Byte</literal></title>

        <remark>To be written&hellip;</remark>
      </sect3>

      <!-- Char -->

      <sect3>
        <title><literal>Char</literal></title>

        <remark>To be written&hellip;</remark>
      </sect3>

      <!-- Double -->

      <sect3>
        <title><literal>Double</literal></title>

        <remark>To be written&hellip;</remark>
      </sect3>

      <!-- Float -->

      <sect3>
        <title><literal>Float</literal></title>

        <remark>To be written&hellip;</remark>
      </sect3>

      <!-- Integer -->

      <sect3>
        <title><literal>Integer</literal></title>

        <remark>To be written&hellip;</remark>
      </sect3>

      <!-- Long -->

      <sect3>
        <title><literal>Long</literal></title>

        <remark>To be written&hellip;</remark>
      </sect3>

      <!-- Object -->

      <sect3>
        <title><literal>Object</literal></title>

        <remark>To be written&hellip;</remark>
      </sect3>

      <!-- Short -->

      <sect3>
        <title><literal>Short</literal></title>

        <remark>To be written&hellip;</remark>
      </sect3>

      <!-- String -->

      <sect3>
        <title><literal>String</literal></title>

        <remark>To be written&hellip;</remark>
      </sect3>
    </sect2>

    <!-- Classes in java.math -->

    <sect2>
      <title>Built In Classes Within <literal>java.math</literal></title>

      <!-- Big Decimal -->

      <sect3>
        <title><literal>BigDecimal</literal></title>

        <remark>To be written&hellip;</remark>
      </sect3>

      <!-- Big Integer -->

      <sect3>
        <title><literal>BigInteger</literal></title>

        <remark>To be written&hellip;</remark>
      </sect3>
    </sect2>

    <!-- Classes in java.net -->

    <sect2>
      <title>Built In Classes Within <literal>java.net</literal></title>

      <!-- URL -->

      <sect3>
        <title><literal>URL</literal></title>

        <remark>To be written&hellip;</remark>
      </sect3>
    </sect2>

    <!-- Classes in java.util -->

    <sect2>
      <title>Built In Classes Within <literal>java.util</literal></title>

      <!-- Vector -->

      <sect3>
        <title><literal>Vector</literal></title>

        <remark>To be written&hellip;</remark>
      </sect3>

      <!-- Date -->

      <sect3>
        <title><literal>Date</literal></title>

        <remark>To be written&hellip;</remark>
      </sect3>

      <!-- Time -->

      <sect3>
        <title><literal>Time</literal></title>

        <remark>To be written&hellip;</remark>
      </sect3>
    </sect2>
  </sect1>

  <!-- Built in interfaces. -->

  <sect1>
    <title>Built In Interfaces</title>

    <para>These are some useful interfaces, corresponding to classes defined
      within the standard Java environment. Interfaces have many of the
      properties of classes (like all types) and you can change them if you
      wish.</para>

    <para>All these can be found in the <literal>java.util</literal> subpackage
      of the main model.</para>

    <note><para>You will not find these exposed within the top level package by
      default. However if you select a datatype (say from within a class
      parameter property sheet), and navigate up, you can navigate up to the
      top package. Thereafter you will find that the package has appeared as a
      subpackage of the model, and you can navigate back down (but only to the
      type you came up from).</para></note>

    <!-- Collection -->

    <sect2>
      <title><literal>Collection</literal></title>

      <remark>To be written&hellip;</remark>
    </sect2>

    <!-- Iterator -->

    <sect2>
      <title><literal>Iterator</literal></title>

      <remark>To be written&hellip;</remark>
    </sect2>

    <!-- List -->

    <sect2>
      <title><literal>List</literal></title>

      <remark>To be written&hellip;</remark>
    </sect2>

    <!-- Set -->

    <sect2>
      <title><literal>Set</literal></title>

      <remark>To be written&hellip;</remark>
    </sect2>

    <!-- Sorted Set -->

    <sect2>
      <title><literal>SortedSet</literal></title>

      <remark>To be written&hellip;</remark>
    </sect2>
  </sect1>

  <!-- Built in stereotypes. -->

  <sect1>
    <title>Built In Stereotypes</title>

    <para>&argouml; has a large number of stereotypes built in. Stereotypes are
      themselves objects, and derive from base classes used within the
      &argouml; system itself. The actual stereotypes available to use with any
      particular entity will depend ultimately how that entity is derived from
      one of these base classes.</para>

    <para>In this section, the stereotypes are organised by their base
      classes.</para>

    <!-- Stereotypes derived from the top level object -->

    <sect2>
      <title>Top Level Stereotypes</title>

      <remark>To be written&hellip;</remark>

      <!-- machine -->

      <sect3>
        <title><literal>machine</literal></title>

        <remark>To be written&hellip;</remark>
      </sect3>

      <!-- person -->

      <sect3>
        <title><literal>person</literal></title>

        <remark>To be written&hellip;</remark>
      </sect3>
    </sect2>

    <!-- Stereotypes derived from base class Abstraction -->

    <sect2>
      <title>Stereotypes Derived from the <literal>Abstraction</literal> Base
        Class</title>

      <remark>To be written&hellip;</remark>

      <!-- derive -->

      <sect3>
        <title><literal>derive</literal></title>

        <remark>To be written&hellip;</remark>
      </sect3>

      <!-- realize -->

      <sect3>
        <title><literal>realize</literal></title>

        <remark>To be written&hellip;</remark>
      </sect3>

      <!-- refine -->

      <sect3>
        <title><literal>refine</literal></title>

        <remark>To be written&hellip;</remark>
      </sect3>

      <!-- trace -->

      <sect3>
        <title><literal>trace</literal></title>

        <remark>To be written&hellip;</remark>
      </sect3>
    </sect2>

    <!-- Stereotypes derived from base class Association -->

    <sect2>
      <title>Stereotypes Derived from the <literal>Association</literal> Base
        Class</title>

      <remark>To be written&hellip;</remark>

      <!-- communicate -->

      <sect3>
        <title><literal>communicate</literal></title>

        <remark>To be written&hellip;</remark>
      </sect3>

      <!-- implicit -->

      <sect3>
        <title><literal>implicit</literal></title>

        <remark>To be written&hellip;</remark>
      </sect3>

      <!-- offstage actor -->

      <sect3>
        <title><literal>offstage actor</literal></title>

        <remark>To be written&hellip;</remark>
      </sect3>

      <!-- primary actor -->

      <sect3>
        <title><literal>primary actor</literal></title>

        <remark>To be written&hellip;</remark>
      </sect3>

      <!-- stakeholder -->

      <sect3>
        <title><literal>stakeholder</literal></title>

        <remark>To be written&hellip;</remark>
      </sect3>

      <!-- subscribe -->

      <sect3>
        <title><literal>subscribe</literal></title>

        <remark>To be written&hellip;</remark>
      </sect3>

      <!-- supporting actor -->

      <sect3>
        <title><literal>supporting actor</literal></title>

        <remark>To be written&hellip;</remark>
      </sect3>
    </sect2>

    <!-- Stereotypes derived from base class AssociationEnd -->

    <sect2>
      <title>Stereotypes Derived from the <literal>AssociationEnd</literal>
        Base Class</title>

      <remark>To be written&hellip;</remark>

      <!-- association -->

      <sect3>
        <title><literal>association</literal></title>

        <remark>To be written&hellip;</remark>
      </sect3>

      <!-- global -->

      <sect3>
        <title><literal>global</literal></title>

        <remark>To be written&hellip;</remark>
      </sect3>

      <!-- local -->

      <sect3>
        <title><literal>local</literal></title>

        <remark>To be written&hellip;</remark>
      </sect3>

      <!-- parameter -->

      <sect3>
        <title><literal>parameter</literal></title>

        <remark>To be written&hellip;</remark>
      </sect3>

      <!-- self -->

      <sect3>
        <title><literal>self</literal></title>

        <remark>To be written&hellip;</remark>
      </sect3>
    </sect2>

    <!-- Stereotypes derived from base class BehaviouralFeature -->

    <sect2>
      <title>Stereotypes Derived from the <literal>BehavioralFeature</literal>
        Base Class</title>

      <remark>To be written&hellip;</remark>

      <!-- create -->

      <sect3>
        <title><literal>create</literal></title>

        <remark>To be written&hellip;</remark>
      </sect3>

      <!-- destroy -->

      <sect3>
        <title><literal>destroy</literal></title>

        <remark>To be written&hellip;</remark>
      </sect3>
    </sect2>

    <!-- Stereotypes derived from base class CallEvent -->

    <sect2>
      <title>Stereotypes Derived from the <literal>CallEvent</literal> Base
        Class</title>

      <remark>To be written&hellip;</remark>

      <!-- create -->

      <sect3>
        <title><literal>create</literal></title>

        <remark>To be written&hellip;</remark>
      </sect3>

      <!-- destroy -->

      <sect3>
        <title><literal>destroy</literal></title>

        <remark>To be written&hellip;</remark>
      </sect3>
    </sect2>

    <!-- Stereotypes derived from base class Class -->

    <sect2>
      <title>Stereotypes Derived from the <literal>Class</literal> Base
        Class</title>

      <remark>To be written&hellip;</remark>

      <!-- boundary -->

      <sect3>
        <title><literal>boundary</literal></title>

        <remark>To be written&hellip;</remark>
      </sect3>

      <!-- case worker -->

      <sect3>
        <title><literal>case worker</literal></title>

        <remark>To be written&hellip;</remark>
      </sect3>

      <!-- control -->

      <sect3>
        <title><literal>control</literal></title>

        <remark>To be written&hellip;</remark>
      </sect3>

      <!-- entity -->

      <sect3>
        <title><literal>entity</literal></title>

        <remark>To be written&hellip;</remark>
      </sect3>

      <!-- implementationClass -->

      <sect3>
        <title><literal>implementationClass</literal></title>

        <remark>To be written&hellip;</remark>
      </sect3>

      <!-- internal worker -->

      <sect3>
        <title><literal>internal worker</literal></title>

        <remark>To be written&hellip;</remark>
      </sect3>

      <!-- type -->

      <sect3>
        <title><literal>type</literal></title>

        <remark>To be written&hellip;</remark>
      </sect3>

      <!-- worker -->

      <sect3>
        <title><literal>worker</literal></title>

        <remark>To be written&hellip;</remark>
      </sect3>
    </sect2>

    <!-- Stereotypes derived from base class Classifier -->

    <sect2>
      <title>Stereotypes Derived from the <literal>Classifier</literal> Base
        Class</title>

      <remark>To be written&hellip;</remark>

      <!-- metaclass -->

      <sect3>
        <title><literal>metaclass</literal></title>

        <remark>To be written&hellip;</remark>
      </sect3>

      <!-- powertype -->

      <sect3>
        <title><literal>powertype</literal></title>

        <remark>To be written&hellip;</remark>
      </sect3>

      <!-- process -->

      <sect3>
        <title><literal>process</literal></title>

        <remark>To be written&hellip;</remark>
      </sect3>

      <!-- thread -->

      <sect3>
        <title><literal>thread</literal></title>

        <remark>To be written&hellip;</remark>
      </sect3>

      <!-- utility -->

      <sect3>
        <title><literal>utility</literal></title>

        <remark>To be written&hellip;</remark>
      </sect3>
    </sect2>

    <!-- Stereotypes derived from base class Collaboration -->

    <sect2>
      <title>Stereotypes Derived from the <literal>Collaboration</literal> Base
        Class</title>

      <remark>To be written&hellip;</remark>

      <!-- use-case realization -->

      <sect3>
        <title><literal>use-case realization</literal></title>

        <remark>To be written&hellip;</remark>
      </sect3>
    </sect2>

    <!-- Stereotypes derived from base class Comment -->

    <sect2>
      <title>Stereotypes Derived from the <literal>Comment</literal> Base
        Class</title>

      <remark>To be written&hellip;</remark>

      <!-- requirement -->

      <sect3>
        <title><literal>requirement</literal></title>

        <remark>To be written&hellip;</remark>
      </sect3>

      <!-- responsibility -->

      <sect3>
        <title><literal>responsibility</literal></title>

        <remark>To be written&hellip;</remark>
      </sect3>
    </sect2>

    <!-- Stereotypes derived from base class Component -->

    <sect2>
      <title>Stereotypes Derived from the <literal>Component</literal> Base
        Class</title>

      <remark>To be written&hellip;</remark>

      <!-- document -->

      <sect3>
        <title><literal>document</literal></title>

        <remark>To be written&hellip;</remark>
      </sect3>

      <!-- executable -->

      <sect3>
        <title><literal>executable</literal></title>

        <remark>To be written&hellip;</remark>
      </sect3>

      <!-- file -->

      <sect3>
        <title><literal>file</literal></title>

        <remark>To be written&hellip;</remark>
      </sect3>

      <!-- library -->

      <sect3>
        <title><literal>library</literal></title>

        <remark>To be written&hellip;</remark>
      </sect3>

      <!-- table -->

      <sect3>
        <title><literal>table</literal></title>

        <remark>To be written&hellip;</remark>
      </sect3>
    </sect2>

    <!-- Stereotypes derived from base class Constraint -->

    <sect2>
      <title>Stereotypes Derived from the <literal>Constraint</literal> Base
        Class</title>

      <remark>To be written&hellip;</remark>

      <!-- invariant -->

      <sect3>
        <title><literal>invariant</literal></title>

        <remark>To be written&hellip;</remark>
      </sect3>

      <!-- postcondition -->

      <sect3>
        <title><literal>postcondition</literal></title>

        <remark>To be written&hellip;</remark>
      </sect3>

      <!-- precondition -->

      <sect3>
        <title><literal>precondition</literal></title>

        <remark>To be written&hellip;</remark>
      </sect3>
    </sect2>

    <!-- Stereotypes derived from base class DataType -->

    <sect2>
      <title>Stereotypes Derived from the <literal>DataType</literal> Base
        Class</title>

      <remark>To be written&hellip;</remark>

      <!-- enumeration -->

      <sect3>
        <title><literal>enumeration</literal></title>

        <remark>To be written&hellip;</remark>
      </sect3>
    </sect2>

    <!-- Stereotypes derived from base class Dependency -->

    <sect2>
      <title>Stereotypes Derived from the <literal>Dependency</literal> Base
        Class</title>

      <remark>To be written&hellip;</remark>

      <!-- extend -->

      <sect3>
        <title><literal>extend</literal></title>

        <remark>To be written&hellip;</remark>
      </sect3>

      <!-- include -->

      <sect3>
        <title><literal>include</literal></title>

        <remark>To be written&hellip;</remark>
      </sect3>
    </sect2>

    <!-- Stereotypes derived from base class Flow -->

    <sect2>
      <title>Stereotypes Derived from the <literal>Flow</literal> Base
        Class</title>

      <remark>To be written&hellip;</remark>

      <!-- become -->

      <sect3>
        <title><literal>become</literal></title>

        <remark>To be written&hellip;</remark>
      </sect3>

      <!-- copy -->

      <sect3>
        <title><literal>copy</literal></title>

        <remark>To be written&hellip;</remark>
      </sect3>

      <!-- create -->

      <sect3>
        <title><literal>create</literal></title>

        <remark>To be written&hellip;</remark>
      </sect3>
    </sect2>

    <!-- Stereotypes derived from base class Generalization -->

    <sect2>
      <title>Stereotypes Derived from the <literal>Generalization</literal>
        Base Class</title>

      <remark>To be written&hellip;</remark>

      <!-- implementation -->

      <sect3>
        <title><literal>implementation</literal></title>

        <remark>To be written&hellip;</remark>
      </sect3>
    </sect2>

    <!-- Stereotypes derived from base class Model -->

    <sect2>
      <title>Stereotypes Derived from the <literal>Model</literal> Base
        Class</title>

      <remark>To be written&hellip;</remark>

      <!-- analysis model -->

      <sect3>
        <title><literal>analysis model</literal></title>

        <remark>To be written&hellip;</remark>
      </sect3>

      <!-- use-case model -->

      <sect3>
        <title><literal>use-case model</literal></title>

        <remark>To be written&hellip;</remark>
      </sect3>
    </sect2>

    <!-- Stereotypes derived from base class ModelElement -->

    <sect2>
      <title>Stereotypes Derived from the <literal>ModelElement</literal> Base
        Class</title>

      <remark>To be written&hellip;</remark>

      <!-- organization -->

      <sect3>
        <title><literal>organization</literal></title>

        <remark>To be written&hellip;</remark>
      </sect3>
    </sect2>

    <!-- Stereotypes derived from base class ObjectFlowState -->

    <sect2>
      <title>Stereotypes Derived from the <literal>ObjectFlowState</literal>
        Base Class</title>

      <remark>To be written&hellip;</remark>

      <!-- signalFlow -->

      <sect3>
        <title><literal>signalFlow</literal></title>

        <remark>To be written&hellip;</remark>
      </sect3>
    </sect2>

    <!-- Stereotypes derived from base class Package -->

    <sect2>
      <title>Stereotypes Derived from the <literal>Package</literal> Base
        Class</title>

      <remark>To be written&hellip;</remark>

      <!-- facade -->

      <sect3>
        <title><literal>facade</literal></title>

        <remark>To be written&hellip;</remark>
      </sect3>

      <!-- framework -->

      <sect3>
        <title><literal>framework</literal></title>

        <remark>To be written&hellip;</remark>
      </sect3>

      <!-- metamodel -->

      <sect3>
        <title><literal>metamodel</literal></title>

        <remark>To be written&hellip;</remark>
      </sect3>

      <!-- stub -->

      <sect3>
        <title><literal>stub</literal></title>

        <remark>To be written&hellip;</remark>
      </sect3>

      <!-- systemModel -->

      <sect3>
        <title><literal>systemModel</literal></title>

        <remark>To be written&hellip;</remark>
      </sect3>

      <!-- use-case package -->

      <sect3>
        <title><literal>use-case package</literal></title>

        <remark>To be written&hellip;</remark>
      </sect3>

      <!-- analysis service package -->

      <sect3>
        <title><literal>analysis service package</literal></title>

        <remark>To be written&hellip;</remark>
      </sect3>
    </sect2>

    <!-- Stereotypes derived from base class Permission -->

    <sect2>
      <title>Stereotypes Derived from the <literal>Permission</literal> Base
        Class</title>

      <remark>To be written&hellip;</remark>

      <!-- access -->

      <sect3>
        <title><literal>access</literal></title>

        <remark>To be written&hellip;</remark>
      </sect3>

      <!-- friend -->

      <sect3>
        <title><literal>friend</literal></title>

        <remark>To be written&hellip;</remark>
      </sect3>

      <!-- import -->

      <sect3>
        <title><literal>import</literal></title>

        <remark>To be written&hellip;</remark>
      </sect3>
    </sect2>

    <!-- Stereotypes derived from base class Subsystem -->

    <sect2>
      <title>Stereotypes Derived from the <literal>Subsystem</literal> Base
        Class</title>

      <remark>To be written&hellip;</remark>

      <!-- design system -->

      <sect3>
        <title><literal>design system</literal></title>

        <remark>To be written&hellip;</remark>
      </sect3>

      <!-- implementation system -->

      <sect3>
        <title><literal>implementation system</literal></title>

        <remark>To be written&hellip;</remark>
      </sect3>

      <!-- implementation subsystem -->

      <sect3>
        <title><literal>implementation subsystem</literal></title>

        <remark>To be written&hellip;</remark>
      </sect3>

      <!-- design service subsystem -->

      <sect3>
        <title><literal>design service subsystem</literal></title>

        <remark>To be written&hellip;</remark>
      </sect3>

      <!-- object system -->

      <sect3>
        <title><literal>object system</literal></title>

        <remark>To be written&hellip;</remark>
      </sect3>

      <!-- organization unit -->

      <sect3>
        <title><literal>organization unit</literal></title>

        <remark>To be written&hellip;</remark>
      </sect3>

      <!-- work unit -->

      <sect3>
        <title><literal>work unit</literal></title>

        <remark>To be written&hellip;</remark>
      </sect3>
    </sect2>

    <!-- Stereotypes derived from base class Usage -->

    <sect2>
      <title>Stereotypes Derived from the <literal>Usage</literal> Base
        Class</title>

      <remark>To be written&hellip;</remark>

      <!-- call -->

      <sect3>
        <title><literal>call</literal></title>

        <remark>To be written&hellip;</remark>
      </sect3>

      <!-- instantiate -->

      <sect3>
        <title><literal>instantiate</literal></title>

        <remark>To be written&hellip;</remark>
      </sect3>

      <!-- send -->

      <sect3>
        <title><literal>send</literal></title>

        <remark>To be written&hellip;</remark>
      </sect3>
    </sect2>
  </sect1>

</chapter>

<!-- Local stuff for Emacs - please do not delete

Local Variables:
mode: xml
sgml-doctype: "argomanual.xml"
sgml-parent-document: ("argomanual.xml" "chapter" nil)
sgml-validate-command: "nsgmls -wxml -sv ../docbook-setup/xml.dcl \
  argomanual.xml"
End:

-->
