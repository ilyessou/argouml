<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- $Id$ -->
<!--
// Copyright (c) 1996-2005 The Regents of the University of California. All
// Rights Reserved. Permission to use, copy, modify, and distribute this
// software and its documentation without fee, and without a written
// agreement is hereby granted, provided that the above copyright notice
// and this paragraph appear in all copies.  This software program and
// documentation are copyrighted by The Regents of the University of
// California. The software program and documentation are supplied "AS
// IS", without any accompanying services from The Regents. The Regents
// does not warrant that the operation of the program will be
// uninterrupted or error-free. The end-user understands that the program
// was developed for research purposes and is advised not to rely
// exclusively on the program for any reason.  IN NO EVENT SHALL THE
// UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR DIRECT, INDIRECT,
// SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING LOST PROFITS,
// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
// SUCH DAMAGE. THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY
// WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
// PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
// CALIFORNIA HAS NO OBLIGATIONS TO PROVIDE MAINTENANCE, SUPPORT,
// UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
-->

<!--

This describes the Details Pane. We set a boundary here, to avoid describing
all the artifacts. The description of properties for each artifact is left to
the chapter on diagrams.

-->

<chapter id="ch.ref.detpane">
  <title>The Details Pane</title>

  <sect1>
    <title>Introduction</title>

    <para><xref linkend="fig.ref.details_pane"/> shows the &argouml; window,
      with the details pane highlighted.</para>

    <!-- A picture of the ArgoUML window with all except the details pane
         grayed out. -->

    <figure id="fig.ref.details_pane" float="1">
      <title>Overview of the details pane</title>

      <screenshot><mediaobject>
        <imageobject>
          <imagedata format="PNG" align="center"
                     fileref="images/reference/details_pane.png"/>
        </imageobject>
      </mediaobject></screenshot>
    </figure>

    <para>For any artifact within the system, this pane is where all its
      associated data is viewed and entered.</para>

    <para>The Pane has a series of tabs at the top, which are selected by
      &button1; click
      The body of a tab is a menu of items to be checked,
      selected or entered specific to the particular tab selected.</para>

    <para>Of these, the <literal>Properties</literal> Tab is by far the most
      complex, with a different presentation for each artifact within the
      system. The detailed descriptions of the properties tab for each artifact
      are the subject of separate chapters covering the artifacts that may
      appear on the various diagrams (see <xref linkend="ch.ref.entities"/>
      through <xref linkend="ch.ref.entdeploy"/>).</para>
  </sect1>
  
  <!-- How the mouse behaves in the details pane -->

  <!-- I do not see the use of such a chapter: 
  it does not say anything new.
  Let's remove it! -->
  <!--sect1 id="s1.ref.details_mouse">
    <title>Mouse Behavior in the Details Pane</title>

    <para>Behavior of the mouse in general, and the naming of the buttons is
      covered in the chapter on the overall user interface (see
      <xref linkend="ch.ref.ui"/>).</para-->

    <!-- Button1 click -->

    <!--sect2>
      <title>&Button1; Click</title>

      <para>This action is generally used to select an item for subsequent
        operations. 
      </para>

      <para>Where &button2; click has been used to bring up a context sensitive
        pop-up menu (see below), &button1; click is used to select the menu
        entry required. &Button1; click outside the menu area will remove
        it.</para>
    </sect2-->

    <!-- Button1 double click -->

    <!--sect2>
      <title>&Button1; Double Click</title>

      <para>In general this has no effect other than that of &button1; single
        click. However, for fields of the property tab that are references to other
        artifacts this will navigate to that artifact.</para>

      <para>And you can <quote>spawn</quote> a copy of any tab by
        double-clicking on the tab. It will then show as an individual window
        and you can put it where you will on the screen.</para>
    </sect2-->

    <!-- Button2 click -->

    <!--sect2>
      <title>&Button2; Actions</title>

      <para>When used over text field entries in the the properties tab, this
        may display a context dependent pop-up menu (depending on the
        field). Menu entries are highlighted (but not selected) and sub-menus
        exposed by subsequent mouse motion (without any buttons). Menu entry
        selection is with &button1;.</para>

      <para>If the entry generating the menu has not yet been highlighted it
        will also be highlighted.</para>
    </sect2-->

    <!-- Button2 double click -->

    <!--sect2>
      <title>&Button2; Double Click</title>

      <para>This has no effect other than that of &button2; single
        click.</para>
    </sect2-->

    <!-- Button2 Motion -->

    <!--sect2>
      <title>&Button2; Motion</title>

      <para>This is used to select items in a context sensitive menu popped up
        by use of &button2; click.</para>
    </sect2>
  </sect1-->

  <!-- The To-Do tab -->

  <sect1 id="s1.ref.to_do">
    <title>To Do Item Tab</title>

    <para>This tab provides control over the various to-do items 
      created by the user, or raised automatically by the
      &argouml; critics (discussed in more detail in the section on the
      <literal>Critique</literal> menu&mdash;see
      <xref linkend="s1.ref.menu_critique"/>). 
      <xref linkend="fig.ref.details_to_do"/> shows a typical 
      pane. The to-do item is selected with &button1; in the to-do pane (see
      <xref linkend="ch.ref.todopane"/>) or by using the
      <literal>Critiques</literal> context sensitive pop-up menu on the editing
      pane.</para>

    <!-- A picture of the to-do tab of the details pane. -->

    <figure id="fig.ref.details_to_do" float="1">
      <title>Example of the <literal>To Do Item</literal> tab on the
        properties pane</title>

      <screenshot><mediaobject>
        <imageobject>
          <imagedata format="PNG" align="center"
                     fileref="images/reference/details_to_do.png"/>
        </imageobject>
      </mediaobject></screenshot>
    </figure>

    <!-- Point to browse critics menu -->

    <para>Customization of the critics behaviour is possible through the
      <literal>Browse critics&hellip;</literal> menu (see <xref
      linkend="s2.ref.menu_browse_critics"/>).</para>

    <para>The body of the tab describes the problem found by the critic and
      outlines how it can be fixed. To the left are four buttons.</para>

    <itemizedlist>

      <!-- Add a to-do item -->

      <listitem><para><guiicon><inlinemediaobject><imageobject>
        <imagedata format="GIF" align="center"
                   fileref="images/icons/new_to_do_item.gif"/> 
        </imageobject></inlinemediaobject></guiicon>
        <literal>New To Do Item&hellip;</literal>
        This launches a dialog box (see 
        <xref linkend="fig.ref.details_new_to_do"/>), which allows you to
        create your own to-do item, with its own headline (which appears in the
        to-do pane), priority for the to-do pane, reference URL
        <!-- TODO: What is the use of the reference URL? It is never shown
        anymore.-->
        and detailed
        description for further information.
        <!-- TODO: It is not possible to edit a todo item once it is created. Should
        that not be possible? Enhancement issue... -->
        </para>

      <!-- The New To-Do Item dialog. -->

      <figure id="fig.ref.details_new_to_do" float="1">
        <title>Dialog box for
          <literal>New&nbsp;To&nbsp;Do&nbsp;Item</literal></title>

        <screenshot><mediaobject>
          <imageobject>
            <imagedata format="PNG" align="center"
                       fileref="images/reference/details_new_to_do.png"/>
          </imageobject>
        </mediaobject></screenshot>
      </figure>

      </listitem>

      <!-- Resolve the to-do item for a reason -->

      <listitem><para><guiicon><inlinemediaobject><imageobject>
        <imagedata format="GIF" align="center"
                   fileref="images/icons/resolve_item.gif"/> 
        </imageobject></inlinemediaobject></guiicon>
        <literal>Resolve Item&hellip;</literal>
        This pops up a dialog allowing the user to resolve the selected
        to-do item (see <xref linkend="fig.ref.details_resolve_to_do"/>).
        This is an important dialog, because it allows you to deal with
        to-do items in ways other than the recommendation of the to-do item
        (which is the whole point of their being advisory).</para>
        
        <para>This dialog box is intended to be used for the following
          reasons: deleting todo items that were manually created, 
          preventing a single critic to trigger on a single object,
          and dismissing categories of todo items by lowering 
          design concerns or design goals.
        </para>

        <!-- The Resolve To-Do Item dialog. -->
        
        <figure id="fig.ref.details_resolve_to_do" float="1">
          <title>Dialog box for
            <literal>Resolve&nbsp;Item</literal></title>

            <screenshot><mediaobject>
            <imageobject>
              <imagedata format="PNG" align="center"
                       fileref="images/reference/details_resolve_to_do.png"/>
            </imageobject>
          </mediaobject></screenshot>
        </figure>
        <!-- TODO: The tooltip of the button is "Dismiss To Do Item...". 
        Should be "Resolve...". See issue ... -->

        <para>At the top are three radio-buttons, 
          of which by default the last is selected,
          labeled 1) <literal>It is not relevant to my goals</literal>, 2)
          <literal>It is not of concern at the moment</literal>, and 3)
          <literal>Reason given below</literal>. If you choose the third of these
          you should enter a reason in the main text
          box.
          <!-- TODO: but it is not retrievable: you can never see the reason again -->
          <!-- TODO: But it is not stored in the project file -->
        </para>

        <tip><para>If you wish to resolve a to-do item
          (that is generated by a critic)
          by following its
          recommendations, just make the recommended changes and the to-do item
          will disappear of its own accord. There is no need to use this
          dialog.
        </para></tip>

        <warning><para>The V0.18 version of &argouml; implementation is
          incomplete:
          The reason given is not stored when the project is saved. 
          And there is no way to retrieve todo items that were resolved.
          So, it is not usefull to give a reason at all.
          <!-- TODO: Solve this problem... -->
          </para>
          <para>
            When a todo item generated by a critic is resolved, then there is no
            way to undo this (unless by re-crating the object that triggered the
            critic).
          <!-- TODO: Solve this problem... -->
          </para>
        </warning>
      </listitem>

      <!-- Send Email to expert -->

      <listitem><para><guiicon><inlinemediaobject><imageobject>
        <imagedata format="GIF" align="center"
                   fileref="images/icons/send_email.gif"/> 
        </imageobject></inlinemediaobject></guiicon>
        <literal>Send Email To Expert&hellip;</literal>
        Activating this tool allows the user to send an Email to an expert
        asking for advice. This works like clicking a 
        "mailto:users@argouml.tigris.org?subject=[critic header]" link in 
        your webbrowser.
        </para>
      </listitem>

      <!-- Snooze the current critic -->

      <listitem><para><guiicon><inlinemediaobject><imageobject>
        <imagedata format="GIF" align="center"
                   fileref="images/icons/snooze_critic.gif"/> 
        </imageobject></inlinemediaobject></guiicon>
        <literal>Snooze Critic</literal>
        This suspends the activity of the critic that generated the current
        to-do item. The to-do item (and all others generated by the critic)
        will disappear from the to-do pane.</para>

      <para>
The critic will wake up after a period of time. 
Initially this
        period is 10 minutes, but it doubles on each successive application of
        the Snooze button. The critic can be awakened explicitly through the
        <literal>Critique&nbsp;&gt;&nbsp;Browse&nbsp;Critics&hellip;</literal>
        menu (see <xref linkend="s2.ref.menu_browse_critics"/>).</para>

      <tip><para>Some common critics can fire the whole time as you build a big
        diagram. Some users find it useful to snooze these critics until the
        diagram has been completed.</para></tip></listitem>
    </itemizedlist>

    <!-- All about the wizards -->
    <sect2>
      <title>Wizards</title>
  
      <para>Some of the more common critics have a <quote>wizard</quote>
        available to help in fixing the problem. 
        The  wizard comprises a series of pages (one or more)
        in the <literal>ToDo&nbsp;Item</literal> tab that step you through
        the changes. </para>

      <!-- A picture of a wizard in the details pane. -->

      <figure id="fig.ref.details_wizard" float="1">
        <title>Example of a <literal>Wizard</literal></title>

        <screenshot><mediaobject>
          <imageobject>
            <imagedata format="PNG" align="center"
                       fileref="images/reference/details_wizard.png"/>
          </imageobject>
        </mediaobject></screenshot>
      </figure>

      <para>The wizard is driven through the first three buttons at the
        bottom of the <literal>ToDo&nbsp;Item</literal> tab.</para>

      <itemizedlist>
        <listitem><para><literal>Back</literal>. This will take you back to the
          previous step in the wizard. Grayed out if this is the first
          step.</para></listitem>
  
        <listitem><para><literal>Next</literal>. This will take you back to the
          next step in the wizard. Grayed out if this is the last
          step.</para></listitem>
          <!-- TODO: The text of the to-do item says: 
          "To fix this, use the "Next>" button,...".
          So, should the Next button not have a ">" symbol? I think it is best to add
          a (nice) graphical symbol for this to the button.
          Idem for the Back button.        
          See issue ... -->
          
        <listitem><para><literal>Finish</literal>. This will commit the changes
          you have made through the wizard
          in previous steps, and/or use the defaults for all next steps. 
          </para></listitem>
      </itemizedlist>
  
      <note><para>Not all to-do items have wizards. 
        If there is no wizard all three buttons will remain grayed
        out.</para></note>

    </sect2>

    <!-- The Help button -->

    <sect2>
      <title>The Help Button</title>
        
      <para>There is one remaining button at the bottom of the
        <literal>To&nbsp;Do&nbsp;Item</literal> tab, labeled
        <literal>Help</literal>. This will fire up a browser to a URL with
        further help.</para>
  
      <warning><para>In the V0.14 release of &argouml; 
        the URLs are generally invalid. 
        <!-- TODO: How do I know? See issue ... -->
        The few that are valid have no information.
        <!-- TODO: Make integrated help system. 
        Remove the Help button from this pane. 
        See enhancement issue ... -->
      </para></warning>

    </sect2>
  </sect1>

  <!-- The Properties tab -->

  <sect1 id="s1.ref.proptab">
    <title>Properties Tab</title>

    <para>Through this tab, the properties of artifacts selected in the
      explorer or editing pane may be set. The properties of an artifact
      may be displayed in one of the following ways:</para>

    <orderedlist>
      <listitem><para>Selection of the artifact in the explorer or editing
        panes, followed by selection of the properties tab in the details pane;
        or</para></listitem>
      
      <listitem><para>Context sensitive pop-up menu
        <literal>Properties</literal> (using &button2; click) on an artifact in
        the editing or explorer, which will select the item
        <emphasis>and</emphasis>select the <literal>Properties</literal> tab in
        the details pane.
        <!-- TODO: Get rid of such useless way of selecting a tab by selecting a
        pop-up menu item. -->
      </para></listitem>
      
      <listitem><para>
        Navigation buttons cause different artifacts to be selected. I.e. the
        <literal>Go Up</literal> button on the properties tab, the
        <literal>Navigate Back</literal> and <literal>Navigate Forward</literal>
        buttons in the main tool bar, and the various menu-items under
        <literal>Edit - Select</literal>.
      </para></listitem>
    </orderedlist>

    <para><xref linkend="fig.ref.details_properties"/> shows a typical
     properties tab for an artifact in &argouml; (in this case a class).</para>

    <figure id="fig.ref.details_properties" float="1">
      <title>A typical <literal>Properties</literal> tab on the details
        pane</title>

      <screenshot><mediaobject>
        <imageobject>
          <imagedata format="PNG" align="center"
                     fileref="images/reference/details_properties.png"/>
        </imageobject>
      </mediaobject></screenshot>
    </figure>

    <para>At the top left is the icon and name of the type of artifact
      (i.e. the UML metaclass, not the actual name of this particular
      artifact). In this example the property tab is for a class.</para>

    <para>To the right of this is a toolbar of icons relevant to this property
      tab. The first one is always navigation
      <literal>Go&nbsp;up</literal>. 
      The last is always <literal>Delete</literal> to 
      delete the selected artifact from the model.
      The ones in between depend on the artifact.
    </para>

    <para>The remainder of the tab comprises fields, laid out in two or three
      columns. Each field has a label to its left. The fields may be text
      boxes, text areas, drop down selectors, radio boxes and check boxes. In
      most (but not all cases) the values can be changed. In the case of text
      boxes this is sometimes by just typing the required value.</para>

    <para>However for
      many text boxes and text areas, data entry is via a context
      sensitive pop-up menu (using &button2; click), which offers options to
      add a new entry,
      delete an entry or move entries up and down (in text areas with multiple
      entries).</para>

    <para>The first field is almost always a text field
      <literal>Name</literal>, where the name of the specific artifact can be
      entered. The remaining fields vary depending on the artifact
      selected.</para>

    <para>The detailed property sheets for all &argouml; artifacts are
      discussed in separate chapters for each of the diagram types
      (use case diagram (<xref linkend="ch.ref.entusecase"/>,
      class diagram (<xref linkend="ch.ref.entclass"/>,
      sequence diagram (<xref linkend="ch.ref.entseq"/>,
      statechart diagram (<xref linkend="ch.ref.entstate"/>,
      collaboration diagram (<xref linkend="ch.ref.entcollab"/>,
      activity diagram (<xref linkend="ch.ref.entactiv"/>,
      deployment diagram (<xref linkend="ch.ref.entdeploy"/>). Property sheets
      for artifacts that are common to all diagram types have their own chapter
      (<xref linkend="ch.ref.entities"/>).</para>

    <caution><para>&argouml; will always try to squeeze all fields on to the
      property sheet. If the size of the property tab is too small, it may
      become unusable. The solution is to either enlarge the property tab by
      enlarging the main window, or by
      moving the dividers to left and top.</para></caution>
  </sect1>

  <!-- The Documentation tab -->

  <sect1 id="s2.ref.documentation_tab">
    <title>Documentation Tab</title>

    <para>Within the UML&nbsp;1.3 standard, all artifacts are children of the
      <literal>Element</literal> metaclass. The <literal>Element</literal>
      metaclass defines a tagged value <literal>documentation</literal> for
      comment, description or explanation of the element to which it is
      attached. Since this tagged value applies to every artifact, it is given
      its own tab in the details pane, rather than being part of the
      <literal>Tagged&nbsp;Values</literal> tab.</para>
  
    <para><xref linkend="fig.ref.details_documentation"/> shows a typical
     documentation tab for an artifact in &argouml;.</para>

    <figure id="fig.ref.details_documentation" float="1">
      <title>A typical <literal>Documentation</literal> tab on the details
        pane</title>

      <screenshot><mediaobject>
        <imageobject>
          <imagedata format="PNG" align="center"
                     fileref="images/reference/details_documentation.png"/>
        </imageobject>
      </mediaobject></screenshot>
    </figure>

    <para>The fields on this tab are the same for all artifacts.</para>

    <itemizedlist>
      <listitem><para><literal>Author:</literal> A text box for the author of
        the documentation.</para></listitem>

      <listitem><para><literal>Version:</literal> A text box for the version of
        the documentation.</para></listitem>

      <listitem><para><literal>Since:</literal> A text box to show how long
        the documentation has been valid.</para></listitem>

      <listitem><para><literal>Deprecated:</literal> A check box to indicate
        whether this artifact is deprecated (i.e. planned for removal in future
        versions of the design model).</para></listitem>

      <listitem><para><literal>See:</literal> Pointers to documentation outside
        the system.</para></listitem>

      <listitem><para><literal>Documentation:</literal> Literal text of any
        documentation.</para></listitem>
    </itemizedlist>

    <tip><para>&argouml; is not primarily a documentation system. For artifacts
      that require heavy documentation, notably use cases, the use of the
      <literal>See:</literal> field to point to external documents is more
      practical.</para></tip>
  </sect1>

  <!-- The Style tab -->

  <sect1>
    <title>Style Tab</title>

    <para>This tab provides some limited control over the graphical
      representation of artifacts in the editing pane.</para>

    <para>Artifacts that do not have any specific direct graphical
      representation on the screen (beyond their textual description) do not
      have style tabs of their own. 
      For example the style sheet of an operation on a class will be
      downlighted.
    </para>

    <para>Style sheets vary a little from artifact to artifact, but <xref
     linkend="fig.ref.details_style"/> shows a typical style tab for an
     artifact in &argouml; 
     (in this case a package).
   </para>

    <figure id="fig.ref.details_style" float="1">
      <title>A typical <literal>Style</literal> tab on the details
        pane</title>

      <screenshot><mediaobject>
        <imageobject>
          <imagedata format="PNG" align="center"
                     fileref="images/reference/details_style.png"/>
        </imageobject>
      </mediaobject></screenshot>
    </figure>

    <para>There may be further fields in some cases, e.g. for a class, 
      but the fields shown
      are common to many artifacts.</para>

    <itemizedlist>
      <listitem><para><literal>Bounds:</literal> This defines the corners of
        the bounding box for a 2D artifact. It comprises four numbers separated
        by periods. These four numbers are respectively: i) the X coordinate of
        the upper left corner of the box; ii) the Y coordinate of the upper
        left corner of the box; iii) the width of the box; and iv) the height
        of the box. All units are pixels on the editing pane.</para>

        <caution><para>This field has no effect on 1D artifacts that link other
          artifacts (associations, generalizations etc), since their position is
          constrained by their connectedness.
        </para></caution>
      </listitem>

      <listitem><para><literal>Fill:</literal> This drop-down selector
        specifies the fill color for 2D artifacts. It is not present for line
        artifacts.
        Selecting <literal>No Fill</literal> makes the artifact transparant.
        Selecting <literal>Custom</literal> allows to create other colors then
        the ones listed. 
        It causes the color selector dialog box to appear, see 
        <xref linkend="fig.ref.details_style_colorpicker1"/>.
      </para></listitem>

      <listitem><para><literal>Line:</literal> This drop-down selector
        specifies the line color for artifacts.
        Selecting <literal>No Fill</literal> makes the artifact transparant.
        Selecting <literal>Custom</literal> allows to create other colors then
        the ones listed. 
        It causes the color selector dialog box to appear, see 
        <xref linkend="fig.ref.details_style_colorpicker1"/>.
      </para></listitem>

      <listitem><para><literal>Shadow:</literal> This drop-down selector
        specifies the width of the shadow (if any) for 2D artifacts. It is not
        present for line artifacts.</para></listitem>
    </itemizedlist>

    <figure id="fig.ref.details_style_colorpicker1" float="1">
      <title>The <literal>Custom Fill/Line Color</literal> dialog box</title>
      <screenshot><mediaobject>
        <imageobject>
          <imagedata format="PNG" align="center"
                     fileref="images/reference/details_style_colorpicker1.png"/>
        </imageobject>
      </mediaobject></screenshot>
    </figure>

    <figure id="fig.ref.details_style_colorpicker2" float="1">
      <title>The <literal>Custom Fill/Line Color</literal> dialog box</title>
      <screenshot><mediaobject>
        <imageobject>
          <imagedata format="PNG" align="center"
                     fileref="images/reference/details_style_colorpicker2.png"/>
        </imageobject>
      </mediaobject></screenshot>
    </figure>

    <figure id="fig.ref.details_style_colorpicker3" float="1">
      <title>The <literal>Custom Fill/Line Color</literal> dialog box</title>
      <screenshot><mediaobject>
        <imageobject>
          <imagedata format="PNG" align="center"
                     fileref="images/reference/details_style_colorpicker3.png"/>
        </imageobject>
      </mediaobject></screenshot>
    </figure>

  </sect1>

  <!-- The Source tab -->

  <sect1>
    <title>Source tab</title>

    <para>This tab is a single box, containing the source code that will be
      generated for this artifact. &argouml; generates a template of the code
      required (most specifically for classes). The intention is that you will
      add artifact specific code here, and it will be incorporated.</para>

    <warning><para>This part of &argouml; is very much under
      development. At this stage any code you add will be lost.
      </para>
    </warning>
  </sect1>

  <!-- The Constraints tab -->

  <sect1 id="s1.ref.details_constraints">
    <title>Constraints Tab</title>

    <para>Constraints are one of the extension mechanisms provided for
      UML. &argouml; is equipped with a powerful constraint editor based on
      the <emphasis>Object Constraint Language (OCL)</emphasis> defined in the
      UML&nbsp;1.3 standard.</para>

    <caution>
      <para>
        The OCL editor implementation for &argouml; V0.14
        doesn't support OCL constraints for elements other than
        Classes and Features.
        <!-- See issue 1805 -->
      </para>
      <para>
        This is something of a general restriction of OCL. Although the UML
        specification claims that there may be a constraint for every model
        element, the OCL specification only defines classes/interfaces and
        operations as allowable contexts. 
      </para>
      <para>
        It is not before OCL 2.0 that a more general definition of allowable
        contexts is introduced. The key issue is that for each context
        definition you need to define what is the contextualClassifier, i.e.,
        the classifier that will be associated with the self keyword. The
        creators of the OCL specification claim that this is not an issue for
        the OCL specification, but rather for UML or some integration task
        force. Conversely, it seems that the UML specification people seem to
        expect this to be defined in the OCL specification (which is why we
        did a first step in that direction in OCL 2.0).
      </para>
      <para>
        So, to cut a long story short, it appeared that the simplest solution
        for &argouml; at the moment
        would be to enable the OCL property panel only for those
        model elements for which there actually exists a definition of the
        contextualClassifier in OCL 1.4. These are (s. above) Class/Interface
        and Feature.
      </para>
    </caution>

    <para>The standard pre-defines a small number of constraints (for example
      the <literal>xor</literal> constraint over a set of associations
      indicating that only one may be manifest for any particular
      instance).</para>

    <para>The standard also envisages a number of circumstances where general
      purpose constraints may be useful:</para>

    <itemizedlist>
      <listitem><para>To specify invariants on classes and types in the class
        model;</para></listitem>

      <listitem><para>To specify type invariants for
        stereotypes;</para></listitem>

      <listitem><para>To describe pre- and post-conditions on operations and
        methods;</para></listitem>

      <listitem><para>To describe guards;</para></listitem>

      <listitem><para>As a navigation language; and</para></listitem>

      <listitem><para>To specify constraints on operations.</para></listitem>
    </itemizedlist>

    <para><xref linkend="fig.ref.details_constraints"/> shows a typical
     constraint tab for a artifact in &argouml; (in this case a class).</para>

    <figure id="fig.ref.details_constraints" float="1">
      <title>A typical <literal>Constraints</literal> tab on the details
        pane</title>
      <screenshot><mediaobject>
        <imageobject>
          <imagedata format="PNG" align="center"
                     fileref="images/reference/details_constraints.png"/>
        </imageobject>
      </mediaobject></screenshot>
    </figure>

    <para>Along the top of the tab are a series of icons.</para>

    <itemizedlist>

      <!-- New constraint -->

      <listitem><para><guiicon><inlinemediaobject><imageobject>
        <imagedata format="GIF" align="center"
                   fileref="images/icons/new_constraint.gif"/> 
        </imageobject></inlinemediaobject></guiicon>
        <literal>New Constraint</literal>. This creates a new constraint and
        launches the constraint editor in the <literal>Constraints
        tab</literal> for that new constraint (see
        <xref linkend="s2.ref.details_constraint_editor"/>). The new constraint
        is created with a context declaration for the currently selected
        artifact.
        </para>
        <warning>
          <para>
            It seems logical, that when a new constraint is created, 
            it needs to be edited. But &argouml; V0.14 fails to start the OCL editor 
            upon creation; you have to do this by 
            primo selecting the new constraint first, 
            secundo rename it, 
            and tertio press the <literal>Edit Constraint</literal> button.
            It is essental for successfully creating a constraint 
            to follow these 4 steps accurately: create, select,
            rename, edit.
            The step to rename is necessary, because the validity check will
            refuse the constraint if 
            its name differs from the name mentioned in the constraint text.
            For the same reason, renaming a constraint afterwards is impossible.
          </para>
        </warning>
        <!-- TODO: See enhancement issue ...  -->
      </listitem>

      <!-- Delete constraint -->

      <listitem><para><guiicon><inlinemediaobject><imageobject>
        <imagedata format="GIF" align="center"
                   fileref="images/icons/delete_constraint.gif"/> 
        </imageobject></inlinemediaobject></guiicon>
        <literal>Delete Constraint</literal>. The constraint currently selected
        in the <literal>Constraint&nbsp;Name</literal> box (see below) is
        deleted.
        </para>
        
        <caution>
          <para>
            In V0.14 of &argouml; this button is not downlighted when 
            it is not functional, i.e. when
            no constraint is selected.
            <!-- TODO: See issue ... -->
          </para>
        </caution>
      </listitem>

      <!-- Edit constraint -->

      <listitem><para><guiicon><inlinemediaobject><imageobject>
        <imagedata format="GIF" align="center"
                   fileref="images/icons/edit_constraint.gif"/> 
        </imageobject></inlinemediaobject></guiicon>
        <literal>Edit Constraint</literal>. This launches the constraint editor
        in the <literal>Constraints</literal> tab (see
        <xref linkend="s2.ref.details_constraint_editor"/>). The editor is
        invoked on the constraint currently selected in the
        <literal>Constraint&nbsp;Name</literal> box.
        </para>
        
        <caution>
          <para>
            In V0.14 of &argouml; this button is not downlighted when 
            it is not functional, i.e. when
            no constraint is selected.
            <!-- TODO: See issue ... -->
          </para>
        </caution>
      </listitem>

      <!-- Check constraint -->

      <!--listitem><para><guiicon><inlinemediaobject><imageobject>
        <imagedata format="GIF" align="center"
                   fileref="images/icons/check_constraint.gif"/> 
        </imageobject></inlinemediaobject></guiicon>
        <literal>Check OCL Syntax</literal>. This button is intended to check
        the syntax of the selected constraint.</para>

      <caution><para>In the current release of &argouml; this button is always
        grayed out on the main <literal>Constraints</literal> tab. It may only
        be invoked from within the constraint editor (see
        <xref linkend="s2.ref.details_constraint_editor"/>).
      </para></caution></listitem-->

      <!-- Configure constraints -->

      <listitem><para><guiicon><inlinemediaobject><imageobject>
        <imagedata format="GIF" align="center"
                   fileref="images/icons/configure_constraints.gif"/> 
        </imageobject></inlinemediaobject></guiicon>
        <literal>Configure Constraint Editor</literal>. This a dialog to
        configure options in the constraint editor (see
        <xref linkend="fig.ref.details_constraints_dialog"/>).</para>

      <!-- The configure constraints dialog. -->

      <figure id="fig.ref.details_constraints_dialog" float="1">
        <title>Dialog box for configuring constraints</title>
        <screenshot><mediaobject>
          <imageobject>
            <imagedata format="PNG" align="center"
              fileref="images/reference/details_constraints_dialog.png"/>
          </imageobject>
        </mediaobject></screenshot>
      </figure>

      <para>
        The dialog box has a check box for the following option.
      </para>

      <itemizedlist>
        <listitem><para><literal>Check type conformance of OCL
          constraints</literal>. OCL is strictly typed. At the early stages of
          design it may be helpful to disable type checking, rather than follow
          through all the detailed specification needed to get type
          consistency.</para></listitem>
      </itemizedlist>

      <para>At the bottom are two buttons, labeled
        <literal>OK</literal> (to accept the option changes) and
        <literal>Cancel</literal> (to discard the changes).</para></listitem>
    </itemizedlist>

    <!--para>To the right of the toolbar is a check box labeled <literal>Syntax
      Assistant</literal> (unchecked by default), which will enable the syntax
      assistant in the constraint editor (see
      <xref linkend="s2.ref.details_constraint_editor"/>).</para>

    <caution><para>In the current release of &argouml; this check box is always
      grayed out on the main <literal>Constraints</literal> tab. It may only be
      changed from within the constraint editor.</para></caution-->

    <para>The main body of the constraints tab comprises two boxes, a smaller
      to the left and a larger one to the right. The two are separated by two
      small arrow buttons which control the size of the boxes.</para>

    <itemizedlist>
      <listitem><para><guiicon><inlinemediaobject><imageobject>
        <imagedata format="GIF" align="center"
                   fileref="images/icons/constraints_left.gif"/> 
        </imageobject></inlinemediaobject></guiicon>
        <literal>Shrink Left</literal>. &Button1; click on this icon shrinks
        the box on the left. Its effect may be reversed by use of the
        <literal>Shrink&nbsp;Right</literal> button (see
        below).</para></listitem>
    
      <listitem><para><guiicon><inlinemediaobject><imageobject>
        <imagedata format="GIF" align="center"
                   fileref="images/icons/constraints_right.gif"/> 
        </imageobject></inlinemediaobject></guiicon>
        <literal>Shrink Right</literal>. &Button1; click on this icon shrinks
        the box on the right. Its effect may be reversed by use of the
        <literal>Shrink&nbsp;Left</literal> button (see
        above).</para></listitem>
    </itemizedlist>

    <para>Finer control can be achieved by using &button1; motion to drag the
      dividing bar to left and right.</para>

    <para>The box on the left is titled <literal>Constraint Name</literal> and
      lists all the constraints (if any) so far defined for the selected
      artifact. A constraint may be selected by &button1; click.</para>

    <para>The box on the right is labeled <literal>Preview</literal> and
      contains the text of the constraint.
      This box only shows some contents if a constraint is selected.
      Where a constraint is too large for
      the box, a scroll bar is provided to the right.</para>

    <sect2 id="s2.ref.details_constraint_editor">
      <title>The Constraint Editor</title>
    
      <para>This is invoked through the use of the
        <!-- TODO: Enter issue for the feature of the next line -->
        <!-- <literal>New&nbsp;Constraint</literal> or -->
        <literal>Edit&nbsp;Constraint</literal> button on the main
        <literal>Constraints</literal> tab. The constraint editor takes up the
        whole tab (see 
        <xref linkend="fig.ref.details_constraint_editor"/>).</para>

      <!-- The constraint editor. -->

      <figure id="fig.ref.details_constraint_editor" float="1">
        <title>Dialog box for configuring constraints</title>
        <screenshot><mediaobject>
          <imageobject>
            <imagedata format="PNG" align="center"
              fileref="images/reference/details_constraint_editor.png"/>
          </imageobject>
        </mediaobject></screenshot>
      </figure>

      <para>Along the top of the tab are a series of icons.</para>

      <itemizedlist>

        <!-- New constraint -->

        <!--listitem><para><guiicon><inlinemediaobject><imageobject>
          <imagedata format="GIF" align="center"
                     fileref="images/icons/new_constraint.gif"/> 
          </imageobject></inlinemediaobject></guiicon>
          <literal>New Constraint</literal>. This is intended to create a new
          constraint for editing.</para>

        <caution><para>In the current release of &argouml; this button is
          always grayed out in the constraints editor. It can only be invoked
          from the main <literal>Constraints</literal> tab (see
          <xref linkend="s1.ref.details_constraints"/>).
        </para></caution></listitem-->

        <!-- Cancel Edit constraint -->

        <listitem><para><guiicon><inlinemediaobject><imageobject>
          <imagedata format="GIF" align="center"
                     fileref="images/icons/cancel_edit_constraint.gif"/> 
          </imageobject></inlinemediaobject></guiicon>
          <literal>Cancel Edit Constraint</literal>. This exits the constraint
          editor without saving any changes and returns to the main
          <literal>Constraints</literal> tab.</para></listitem>

        <!-- Check constraint -->

        <listitem><para><guiicon><inlinemediaobject><imageobject>
          <imagedata format="GIF" align="center"
                     fileref="images/icons/check_constraint.gif"/> 
          </imageobject></inlinemediaobject></guiicon>
          <literal>Check OCL Syntax</literal>. This button invokes a full
          syntax check of the OCL written in the editor. If the syntax is
          valid, the constraint is saved, and control returns to the main
          <literal>Constraints</literal> tab. If the syntax is not valid, a
          dialog box explains the problem.</para>

          <warning>
            <para>Whether type checking is included should be configurable with the
              <literal>Configure&nbsp;Constraint&nbsp;Editor</literal> button (see
              below). But &argouml; V0.14 does always check, and refuses to
              accept any constraint with the slightest error.
              <!-- TODO: See issue ... -->
            </para>
          </warning>
        </listitem>

        <!-- Configure constraints -->

        <listitem><para><guiicon><inlinemediaobject><imageobject>
          <imagedata format="GIF" align="center"
                     fileref="images/icons/configure_constraints.gif"/> 
          </imageobject></inlinemediaobject></guiicon>
          <literal>Configure Constraint Editor</literal>. This a dialog to
          configure options in the constraint editor. It is also available in
          the main <literal>Constraints</literal> tab and is discussed in detail
          there (see
          <xref linkend="s1.ref.details_constraints"/>).</para></listitem>
      </itemizedlist>

      <para>To the right of the toolbar is a check box labeled <literal>Syntax
        Assistant</literal> (unchecked by default), which will enable the
        syntax assistant in the constraint editor.</para>

      <para>If the syntax assistant is enabled, six drop down menus are
        provided in a row immediately below the toolbar. These provide standard
        templates for OCL that, when selected, will be inserted into the
        constraint being edited.</para>
        
        <!-- TODO: These drop-down menus are very non-standard UI widgets. 
        Normally, drop down combo boxes do not invoke an action, 
        that is considered bad behaviour. 
        Also, the first item in the drop-down is not supposed to be a title, 
        selecting of which only cancels opening the drop-down.
        Make something better, see enhancement issue ... -->
        
      <para>
        The syntax assistant can be made floating in a seperate window by 
        &button1; motion on the small divider area to the left of the row of
        drop-down menus.
      </para>

      <!-- Details of the syntax assistant -->

      <itemizedlist>
        <listitem><para><literal>General</literal>. General OCL
          constructors. Entries: <literal>inv</literal> (inserts an invariant);
          <literal>pre</literal> (inserts a pre-condition);
          <literal>post</literal> (inserts a post-condition);
          <literal>self</literal> (inserts a self-reference);
          <literal>@pre</literal> (inserts a reference to a value at the start
          of an operation); and <literal>result</literal> (inserts a reference
          to a previous result).</para></listitem>

        <listitem><para><literal>Basic Operators</literal>. Relational
          operators and parentheses. Entries: <literal>=</literal>;
          <literal>&lt;&gt;</literal>; <literal>&lt;</literal>;
          <literal>&gt;</literal>; <literal>&lt;=</literal>;
          <literal>&gt;=</literal>; and
          <literal>()</literal>.</para></listitem>
      
        <listitem><para><literal>Numbers</literal>. Arithmetic operators and
          functions. Entries: <literal>+</literal>; <literal>-</literal>;
          <literal>*</literal>; <literal>/</literal>; <literal>mod</literal>;
          <literal>div</literal>; <literal>abs</literal>;
          <literal>max</literal>; <literal>min</literal>;
          <literal>round</literal>; and <literal>floor</literal>.
        </para></listitem>
      
        <listitem><para><literal>Strings</literal>. String functions. Entries:
          <literal>concat</literal>; <literal>size</literal>;
          <literal>toLower</literal>; <literal>toUpper</literal>; and
          <literal>substring</literal>.</para></listitem>
      
        <listitem><para><literal>Booleans</literal>. Logical
          functions. Entries: <literal>or</literal>; <literal>and</literal>;
          <literal>xor</literal>; <literal>not</literal>;
          <literal>implies</literal>; and
          <literal>if&nbsp;then&nbsp;else</literal>.</para></listitem>

        <listitem><para><literal>Collections</literal>. Operators and functions
          on collections&mdash;bags, sets and sequences. The large number of
          functions are organized into sub-groups.</para>

        <itemizedlist>
          <listitem><para><literal>General</literal>. Functions that apply to
            all types of collection. Entries:
            <literal>Collection&nbsp;{}</literal> (insert a new collection);
            <literal>Set&nbsp;{}</literal> (insert a a new set);
            <literal>Bag&nbsp;{}</literal> (insert a new bag);
            <literal>Sequence&nbsp;{}</literal> (insert a new sequence);
            <literal>size</literal>; <literal>count</literal>;
            <literal>isEmpty</literal>; <literal>notEmpty</literal>;
            <literal>includes</literal>; <literal>includesAll</literal>;
            <literal>iterate</literal>; <literal>exists</literal>;
            <literal>forAll</literal>; <literal>collect</literal>;
            <literal>select</literal>; <literal>reject</literal>;
            <literal>union</literal>; <literal>intersection</literal>;
            <literal>including</literal>; <literal>excluding</literal>; and
            <literal>sum</literal>.</para></listitem>
    
          <listitem><para><literal>Sets</literal>. Operators and functions
            that apply only to sets. Entries: <literal>-</literal> (set
            difference); and
            <literal>symmetricDifference</literal>.</para></listitem>

          <listitem><para><literal>Sequences</literal>. Functions that apply to
            sequences. Entries: <literal>first</literal>;
            <literal>last</literal>; <literal>at</literal>;
            <literal>append</literal>; <literal>prepend</literal>; and
            <literal>subSequence</literal>.</para></listitem>
        </itemizedlist></listitem>
      </itemizedlist>

      <para>The remainder of the tab comprises a writable text area containing
        the text to be edited. The mouse buttons have their standard behavior
        within an editable text area (see
        <xref linkend="s1.ref.mouse"/>).</para>

      <para>In addition, cut, copy and paste operations may be invoked through
        the keyboard shortcuts <literal>Ctrl-X</literal>,
        <literal>Ctrl-C</literal> and <literal>Ctrl-V</literal>
        respectively.</para>

      <warning><para>There is a known problem with the V0.14 release of
        &argouml;. The <literal>Cut</literal>, <literal>Copy</literal> and
        <literal>Paste</literal> functions on the <literal>Edit</literal> menu
        cannot be used within the constraint editor. If used they will work on
        the currently selected artifact in the editing pane.</para>

      <para>Given the known problems with these menu buttons in the V0.14
        release of &argouml; (see <xref linkend="s2.ref.menu_cut"/>,
        <xref linkend="s2.ref.menu_copy"/> and
        <xref linkend="s2.ref.menu_paste"/>) this could disrupt the model. It
        should be avoided at all costs.</para></warning>
    </sect2>
  </sect1>

  <!-- The Tagged Values tab -->

  <sect1>
    <title>Tagged Values Tab</title>

    <para>Tagged values are another extension mechanism provided by UML. The
      user can define name-value pairs to be associated with artifacts which
      define properties of that artifact. The names are known as
      <emphasis>tags</emphasis>. UML pre-defines a number of tags that are
      useful for many of its artifacts.</para>

    <note><para>The tag <literal>documentation</literal> is defined for the top
      UML metaclass, <literal>Element</literal> and is so available to all
      artifacts. In &argouml; documentation values are provided through the
      <literal>Documentation</literal> tab, rather than by using the
      <literal>Tagged&nbsp;Values</literal> tab.</para></note>

    <para>The <literal>Tagged&nbsp;Values</literal> tab in &argouml; comprises
      a simple two column table, with an editable box on the left for the tag
      name and an editable box on the right for the associated value. There is
      always at least one empty row available for any new tag. The mouse
      buttons have their standard behavior within an editable text area (see
      <xref linkend="s1.ref.mouse"/>).</para>

    <para>In addition, cut, copy and paste operations may be invoked through
      the keyboard shortcuts <literal>Ctrl-X</literal>,
      <literal>Ctrl-C</literal> and <literal>Ctrl-V</literal>
      respectively.</para>

    <warning><para>There is a known problem with the V0.14 release of
      &argouml;. The <literal>Cut</literal>, <literal>Copy</literal> and
      <literal>Paste</literal> functions on the <literal>Edit</literal> menu
      cannot be used within the constraint editor. If used they will work on
      the currently selected artifact in the editing pane.</para>

   <para>Given the known problems with these menu buttons in the V0.14
      release of &argouml; (see <xref linkend="s2.ref.menu_cut"/>, <xref
      linkend="s2.ref.menu_copy"/> and <xref linkend="s2.ref.menu_paste"/>)
      this could disrupt the model. It should be avoided at all
      costs.</para></warning>
  </sect1>

  <!-- The Checklist tab -->

  <sect1>
    <title>Checklist Tab</title>

    <para>Conducting design reviews and inspections 
      is one of the most effective ways of detecting errors 
      during software development. 
      A design review typically consists of a small number of designers, 
      implementers, or other project stakeholders holding a meeting 
      to review a software development artifact. 
      Many development organizations have developed checklists 
      of common design problems for use in design review meetings. 
      Recent research indicated that reviewers inspecting code 
      without meeting, makeing use of these checklists, 
      are just as effective as design review meetings.
    </para>
    <para>
      Hence, a checklist feature has been added to &argouml;, 
      that is much in the spirit of design review checklists. 
      However, &argouml;'s checklists are integrated 
      into the design tool user interface and the design task.
    </para>
    
    <para>A software designer using &argouml; can see 
      a review checklist for any design element. 
      The <quote>Checklist</quote> tab presents a list of check-off items 
      that is appropriate to the currently selected design element. 
      For example, when a class is selected in a design diagram, 
      the checklist tab shows items that prompt 
      critical thinking about classes. See the figure below.
      Designers may check off items as they consider them. 
      Checked items are kept in the list to show 
      what has already been considered, 
      while unchecked items prompt the designer to consider new design issues. 
      &argouml; supplies many different checklists 
      with many possible items.
    </para>

    <figure id="fig.ref.detpane_checklist" float="1">
      <title>An example of a checklist for a class.</title>
      <screenshot>
        <mediaobject>
          <imageobject>
            <imagedata format="PNG" align="center"
              fileref="images/reference/detpane_checklist.png"/>
          </imageobject>
        </mediaobject>
      </screenshot>
    </figure>
    
    <!--caution><para>In the V0.14 release of &argouml;, this tab is not
      completely implemented. E.g. the checks are not saved.
    </para></caution-->
  </sect1>
</chapter>

<!-- Local stuff for Emacs - please do not delete

Local Variables:
mode: xml
sgml-doctype: "argomanual.xml"
sgml-parent-document: ("argomanual.xml" "chapter" nil)
sgml-validate-command: "nsgmls -wxml -sv ../docbook-setup/xml.dcl \
  argomanual.xml"
indent-tabs-mode: nil
End:

-->
