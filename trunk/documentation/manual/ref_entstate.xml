<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- $Id$ -->

<!--

Description of all the artifacts associated with State Diagrams within ArgoUML.

-->

<chapter id="ch.ref.entstate">
  <title>&argouml; State Diagram Artifact Reference</title>

  &notupdatedfor014disclaimer;

  <sect1>
    <title>Introduction</title>

    <para>This chapter describes each artifact that can be created within a
      state diagram. Note that some sub-artifacts of artifacts on the diagram
      may not actually themselves appear on the diagram.</para>

    <para>There is a close relationship between this material and the
      Properties Tab of the Details Pane (see
      <xref linkend="s1.ref.proptab"/>). That section covers Properties in
      general, in this chapter they are linked to specific artifacts.</para>

    <note><para>The whole area of behavioral modeling is still under
      development in &argouml;. Many of the facilities described in the UML
      standard have yet to be implemented or are not fully implemented in the
      current release.</para></note>

    <!-- A diagram to show all things visible on the diagram -->

    <para><xref linkend="fig.ref.state_diagram"/> shows a state diagram with
      all possible artifacts displayed.</para>

    <!-- A state diagram showing just about everything. -->

    <figure id="fig.ref.state_diagram" float="1">
      <title>Possible artifacts on a state diagram.</title>

      <screenshot><mediaobject>
        <imageobject>
          <imagedata format="GIF" align="center"
                     fileref="images/reference/state_diagram.gif"/>
        </imageobject>
      </mediaobject></screenshot>
    </figure>

    <!-- Limitations in Argo/UML relating to support for events and code
         generation. -->

    <sect2 id="s2.ref.state_limitations">
      <title>Limitations Concerning State Diagrams in &argouml;</title>

      <para>
The state diagrams are generally well drawn, but the 4 event types 
supported (CallEvent, SignalEvent, ChangeEvent and TimeEvent), are purely 
textual, with no way to link them back to their associated operations.
Also the various kinds of Actions are only supported in the same way.
</para>

      <para>
Code generation from state diagrams is not properly developed yet.
</para>
    </sect2>
  </sect1>

  <!-- Artifacts specific to State Diagrams. State artifact. Has Action as
       sub-artifact -->

  <sect1 id="s1.ref.state">
    <title>State</title>

    <para>
A state models a situation during which some (usually implicit)
invariant condition holds for the parent class.
This invariant may be a static situation such as an object waiting for
some external event to occur, or some dynamic activity 
<quote>in progress</quote>.
</para>
    
    <para>A state is represented on a state diagram in &argouml; as a
      rectangle with rounded corners, with a horizontal line separating the
      name at the top from the description of the behavior below. The
      description of the behavior includes the entry and exit actions and any
      internal transitions.</para>

    <!-- State details tabs -->

    <sect2>
      <title>State Details Tabs</title>

      <para>The details tabs that are active for states are as
        follows.</para>

      <variablelist>

        <!-- Entry for ToDoItem tab -->

        <varlistentry>
          <term><literal>ToDoItem</literal></term>

          <listitem><para>Standard tab.</para></listitem>
        </varlistentry>

        <!-- Entry for Properties tab -->

        <varlistentry>
          <term><literal>Properties</literal></term>

          <listitem><para>See <xref
              linkend="s2.ref.state_property_toolbar"/> and <xref
              linkend="s2.ref.state_property_fields"/>
            below.</para></listitem>
        </varlistentry>

        <!-- Entry for Documentation tab -->

        <varlistentry>
          <term><literal>Documentation</literal></term>

          <listitem><para>Standard tab.</para></listitem>
        </varlistentry>

        <!-- Entry for Style tab -->

        <varlistentry>
          <term><literal>Style</literal></term>

          <listitem><para>Standard tab. The values for the bounds of the state
            define the bounding box of the state.</para>

          <caution><para>The <literal>Shadow</literal> field has no
            effect&mdash; in the current release of &argouml;. There are no
            shadow effects provided for states on the
            diagram.</para></caution></listitem>
        </varlistentry>

        <!-- Entry for Source tab -->

        <varlistentry>
          <term><literal>Source</literal></term>

          <listitem><para>Standard tab, containing just the name of the
            state.</para>

          <note><para>In the fullness of time this tab will contain code to
            implement the state (code for actions will be associated with
            the particular actions). This is not implemented in the current
            release of &argouml;.</para></note></listitem>
        </varlistentry>

        <!-- Entry for Constraints tab -->

        <varlistentry>
          <term><literal>Constraints</literal></term>

          <listitem>
            <para>Standard tab.
This tab is downlighted, since constraints are not defined for 
<literal>State</literal> within the &argouml; metamodel.
</para>
          </listitem>
        </varlistentry>

        <!-- Entry for Tagged Values tab -->

        <varlistentry>
          <term><literal>Tagged Values</literal></term>

          <listitem><para>Standard tab. 
In the UML metamodel,
            <literal>State</literal> has the following standard
            tagged values defined.</para>

            <itemizedlist>
              <listitem><para><literal>derived</literal> (from the
                superclass, <literal>ModelElement</literal>). Values
                <literal>true</literal>, meaning the state is
                redundant&mdash;it can be formally derived from other
                elements, or <literal>false</literal> meaning it
                cannot.</para>

                <note><para>
Derived states still have their value in analysis to introduce useful
names or concepts, and in design to avoid re-computation. 
</para>
                </note>

                <note>
                  <para>
The UML <literal>Element</literal> metaclass from which all other
artifacts are derived includes the tagged element
<literal>documentation</literal> which is handled by the
<emphasis>documentation tab</emphasis> under
&argouml;
</para>
                </note>
              </listitem>
            </itemizedlist>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <!-- State properties -->

    <sect2 id="s2.ref.state_property_toolbar">
      <title>State Property Toolbar</title>

      <variablelist>

        <!-- Entry for Go up button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/navigate_up.gif"/>
          </imageobject></inlinemediaobject></guiicon>
            <literal>Go up</literal></term>

          <listitem><para>Navigate up through the package
            structure.</para></listitem>
        </varlistentry>

        <!-- Entry for Delete button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/property_delete.gif"/>
          </imageobject></inlinemediaobject></guiicon>
            <literal>Delete</literal></term>

          <listitem><para>This deletes the state from the model</para>

            <warning>
              <para>
This is a deletion from the model,
<emphasis>not</emphasis> just the diagram.
To delete a
            state from the diagram, but keep it within the model, use
            the main menu <literal>Edit/Remove From Diagram</literal>
(Delete).
</para>
            </warning>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <!-- Fields in the properties tab -->

    <sect2 id="s2.ref.state_property_fields">
      <title>Property Fields For State</title>

      <variablelist>

        <!-- Entry for Name -->

        <varlistentry>
          <term><literal>Name</literal></term>

          <listitem><para>Text box. The name of the state. By convention
            state names start with a lower case letter and use bumpy caps
            to divide words within the name.</para>

          <note><para>&argouml; does not enforce this naming
            convention.</para></note></listitem>
        </varlistentry>

        <!-- Entry for Stereotype -->

        <varlistentry>
          <term><literal>Stereotype</literal></term>

          <listitem><para>Drop down selector. State has no stereotypes by
default in the UML standard.
<!--, but &argouml; provides the
            stereotypes, <literal>machine</literal>,
            <literal>organization</literal> and
            <literal>person</literal>.</para>

          <caution><para>&argouml; also provides the stereotype
            <literal>realize</literal> for states. This appears to be an
            error, since this stereotype properly belongs to the
            <literal>Abstraction</literal>
            metaclass.</para></caution>
 -->
</para>
	  </listitem>
        </varlistentry>

        <!-- Entry for NavStereo -->

        <varlistentry>
          <term><literal>Navigate Stereotype</literal></term>

          <listitem><para><guiicon><inlinemediaobject><imageobject><imagedata
              format="GIF" align="center"
              fileref="images/icons/navigate_stereotype.gif"/>
            </imageobject></inlinemediaobject></guiicon> icon. If a
              stereotype has been selected, this will navigate to the
stereotype property panel (see <!-- MVW: this reference is wrong, 
should not link to chapter 16.4, but 14.4:--> 
<xref linkend="s1.ref.stereotype_class"/>).
</para>
          </listitem>
        </varlistentry>

        <!-- Entry for Container -->

        <varlistentry>
          <term><literal>Container</literal></term>

          <listitem>
	    <para>
Text box. Shows the container of the state. This is the state hierarchy.
</para>

            <para>
&Button1; double click on the entry will navigate to the composite state
that contains this state (or the top-level state that is the root of the state
containment hierarchy).
</para>
          </listitem>
        </varlistentry>

        <!-- Entry for Entry Action -->

        <varlistentry>
          <term><literal>Entry-Action</literal></term>

          <listitem>
	    <para>Text box. Shows the name of the action (if any) to be executed 
	    on entry to this state.</para>

            <para>&Button1; click navigates to the selected entry, &button2;
              gives a pop up menu with two entries:</para>

            <itemizedlist>
              <listitem><para><literal>New</literal>. Add a new Entry
                action of a certain kind. This menu has the following submenus 
	        to select the kind of action: Call Action, Create Action, 
		Destroy Action, Return Action, Send Action, Terminate Action, 
		Uninterpreted Action.</para>
	      </listitem>
              <listitem><para><literal>Delete From Model</literal>. Delete the 
	      Entry-Action.</para></listitem>
            </itemizedlist>
	    
	  </listitem>
        </varlistentry>

        <!-- Entry for Exit Action -->

        <varlistentry>
          <term><literal>Exit-Action</literal></term>

          <listitem>
	    <para>Text box. Shows the action (if any) to be executed on
              exit from this state.</para>

            <para>&Button1; click navigates to the selected action, &button2;
              gives a pop up menu with two entries.</para>

            <itemizedlist>
              <listitem><para><literal>New</literal>. Add a new Exit
                action of a certain kind. This menu has the following submenus 
                to select the kind of action: Call Action, Create Action, 
                Destroy Action, Return Action, Send Action, Terminate Action, 
                Uninterpreted Action.</para>
	      </listitem>
              <listitem><para><literal>Delete From Model</literal>. Delete the 
	      Exit-Action.</para></listitem>
            </itemizedlist>
          </listitem>

        </varlistentry>

        <!-- Entry for Do-Activity -->

        <varlistentry>
          <term><literal>Do-Activity</literal></term>

          <listitem>
            <para>Text box. Shows the action (if any) to be executed
              while being in this state.</para>

            <para>&Button1; click navigates to the selected action, &button2;
              gives a pop up menu with two entries.</para>

            <itemizedlist>
              <listitem><para><literal>New</literal>. Add a new Do-Activity
                (action) of a certain kind. This menu has the following submenus 
	        to select the kind of action: Call Action, Create Action, 
		Destroy Action, Return Action, Send Action, Terminate Action, 
		Uninterpreted Action.</para>
	      </listitem>
              <listitem><para><literal>Delete From Model</literal>. Delete the 
	      Do-Activity.</para></listitem>
            </itemizedlist>
          </listitem>

        </varlistentry>

        <!-- Entry for Incoming -->

        <varlistentry>
          <term><literal>Incoming</literal></term>

          <listitem>
            <para>Text area. Lists all the transitions that enter this
              state, including any internal transitions within the state
              (described below).</para>

            <para>&Button1; click navigates to the selected entry.</para>

          </listitem>
        </varlistentry>

        <!-- Entry for Outgoing -->

        <varlistentry>
          <term><literal>Outgoing</literal></term>

          <listitem>
            <para>Text area. Lists all the transitions that leave this
              state, including any internal transitions within the state
              (described below).</para>

            <para>&Button1; click navigates to the selected action.</para>

          </listitem>
        </varlistentry>
	
        <!-- Entry for Internal Transitions -->

        <varlistentry>
          <term><literal>Internal Transitions</literal></term>

          <listitem>
            <para>
Text area. Lists all the internal transitions of the
state. Such transitions neither exit nor enter the state, so they 
do not cause a state change. Which 
means that the Entry and Exit actions are not invoked.
</para>

            <para>&Button1; click navigates to the selected transition,
              &button2; gives a pop up menu with one entry.</para>
  
            <itemizedlist>
              <listitem>
                <para><literal>New</literal>. Add a new internal
                transition.</para>
              </listitem>
            </itemizedlist>
          </listitem>
        </varlistentry>

      </variablelist>
    </sect2>
  </sect1>

  <!-- Action artifact (subsidiary of State) -->

  <sect1 id="s1.ref.action_state">
    <title>Action</title>

    <para>An action specifies an executable statement and is an abstraction of
a computational procedure that can change the state of the model. In the
UML metamodel it is a child of <!--both--> 
<literal>ModelElement</literal> 
<!--and <literal>ActionSequence</literal>-->. 
Since in the metamodel an ActionSequence is itself an Action that is an 
aggregation of other actions, an ActionSequence may be used anywhere an 
action may be.</para>

    <para>There are a number of different types of action that are children of
      action within the UML metamodel.</para>

    <itemizedlist>
      <listitem><para><literal>CreateAction</literal>. Associated with a
        classifier, this action creates an instance of that
        classifier.</para></listitem>

      <listitem><para><literal>CallAction</literal>. Associated with an
        operation of a class, this action calls the given
        operation.</para></listitem>

      <listitem>
        <para><literal>AssignmentAction</literal>.
An action used to assign a new value to a link or an attribute link.
</para>
      </listitem>

      <listitem>
        <para><literal>ReturnAction</literal>.
An action used to return a result to an earlier caller.
</para>
      </listitem>

      <listitem><para><literal>SendAction</literal>. Associated with a signal,
        this action causes the signal to be raised.</para></listitem>

      <listitem><para><literal>TerminateAction</literal>. Causes the invoking
        object to self-destruct.</para></listitem>

      <listitem>
        <para><literal>UninterpretedAction</literal>.
An action used to specify language-specific actions
that do not classify under the other types of actions.
</para>
      </listitem>

      <listitem><para><literal>DestroyAction</literal>. Destroys the specified
        target object.</para></listitem>
    </itemizedlist>

    <para>
An action is represented on the diagram by the text of its expression.
</para>


    <!-- Action details tabs -->

    <sect2>
      <title>Action Details Tabs</title>

      <para>The details tabs that are active for actions are as
        follows.</para>

      <variablelist>

        <!-- Entry for ToDoItem tab -->

        <varlistentry>
          <term><literal>ToDoItem</literal></term>

          <listitem><para>Standard tab.</para></listitem>
        </varlistentry>

        <!-- Entry for Properties tab -->

        <varlistentry>
          <term><literal>Properties</literal></term>

          <listitem><para>See <xref
              linkend="s2.ref.action_property_toolbar"/> and <xref
              linkend="s2.ref.action_property_fields"/>
            below.</para></listitem>
        </varlistentry>

        <!-- Entry for Documentation tab -->

        <varlistentry>
          <term><literal>Documentation</literal></term>

          <listitem><para>Standard tab.</para></listitem>
        </varlistentry>

        <!-- Entry for Style tab -->

        <varlistentry>
          <term><literal>Style</literal></term>

          <listitem><para>Standard tab. The contents of this tab relate to the
            owning artifact (state or transition), not the action, and any
            changes affect that owning artifact.</para></listitem>
        </varlistentry>

        <!-- Entry for Source tab -->

        <varlistentry>
          <term><literal>Source</literal></term>

          <listitem><para>Standard tab, containing the expression for the
            action.</para>
          <note><para>In the fullness of time this tab will contain code to
            implement the action. This is not implemented in the current
            release of &argouml;.</para></note></listitem>
        </varlistentry>

        <!-- Entry for Constraints tab -->

        <varlistentry>
          <term><literal>Constraints</literal></term>

          <listitem><para>Standard tab. There are no standard constraints
            defined for <literal>Action</literal> within the UML
            metamodel.</para></listitem>
        </varlistentry>

        <!-- Entry for Tagged Values tab -->

        <varlistentry>
          <term><literal>Tagged Values</literal></term>

          <listitem><para>Standard tab. In the UML metamodel,
            <literal>Action</literal> has the following standard
            tagged values defined.</para>

            <itemizedlist>
              <listitem><para><literal>derived</literal> (from the
                superclass, <literal>ModelElement</literal>). Values
                <literal>true</literal>, meaning the action is
                redundant&mdash;it can be formally derived from other
                elements, or <literal>false</literal> meaning it
                cannot.</para>

              <note><para>Derived actions still have their value in
                analysis and design to introduce useful names or concepts,
                and in design to avoid
                re-computation.</para></note></listitem>
            </itemizedlist>

            <note><para>The UML <literal>Element</literal> metaclass from
              which all other artifacts are derived includes the tagged
              element <literal>documentation</literal> which is handled by
              the <emphasis>documentation tab</emphasis> under
              &argouml;</para></note></listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <!-- Action properties -->

    <sect2 id="s2.ref.action_property_toolbar">
      <title>Action Property Toolbar</title>

      <variablelist>

        <!-- Entry for Go back button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/navigate_back.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Go
            back</literal></term>

          <listitem><para>Navigate back to the previous
            artifact.</para>

          <warning><para>This feature is currently broken within &argouml;
            and there is no guarantee where (if anywhere) this button will
            take you.</para></warning></listitem>
        </varlistentry>

        <!-- Entry for Go forward button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/navigate_forward.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Go
            forward</literal></term>

          <listitem><para>Navigate forward to the next
            artifact.</para>

          <warning><para>This feature is currently broken within &argouml;
            and there is no guarantee where (if anywhere) this button will
            take you.</para></warning></listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <!-- Fields in the properties tab -->

    <sect2 id="s2.ref.action_property_fields">
      <title>Property Fields For Action</title>

<!-- Issue: 2164 -->
      <variablelist>

        <!-- Entry for Name -->

        <varlistentry>
          <term><literal>Name</literal></term>

          <listitem><para>Text box. The name of the action. By convention
            action names start with a lower case letter and use bumpy caps
            to divide words within the name.</para>

          <note><para>&argouml; does not enforce this naming
            convention.</para></note></listitem>
        </varlistentry>

        <!-- Entry for Expression -->

        <varlistentry>
          <term><literal>Expression</literal></term>

          <listitem><para>Text box. The expression that defines the
            action.</para>

          <caution><para>The current release of &argouml; only partially
            implements actions. As a practical convention it is suggested
            that call actions are shown as the name of the operation
            generating the action with any arguments in parentheses and
            that send actions are shown as the name of the signal
            generating the action with any arguments in parentheses. Return
            actions should be shown as the expression for the value they
            return, or empty otherwise. Create and destroy actions should
            shown as <literal>create(&lt;target&gt;)</literal> and
            <literal>destroy(&lt;target&gt;)</literal>. Terminate action
            should be shown as
            <literal>terminate</literal>.</para></caution></listitem>
        </varlistentry>

        <!-- Entry for Language -->

        <varlistentry>
          <term><literal>Language</literal></term>

          <listitem><para>Text box. This is not part of standard UML, but in
            the partial implementation of actions currently available in
            UML it may be useful to indicate that the expression is written
            in a particular programming language.</para></listitem>
        </varlistentry>
      </variablelist>
    </sect2>
  </sect1>

  <!-- Composite State artifact -->

  <sect1>
    <title>Composite State</title>

    <para>A composite state is a state that contains other states (known as
      sub-states), allowing hierarchical state machines to be
      constructed.</para>

    <para>A composite state is represented on a state diagram in &argouml; as a
      large rectangle with rounded corners, with a horizontal line separating
      the name at the top from the description of the behavior and the model
      of the sub-state machine below. The description of the behavior includes
      the entry and exit actions and any internal transitions.</para>

    <para>Sub-states are placed within a composite machine by placing them
      entirely within the composite state when creating them for the first
      time in the editing pane.</para>

    <para>The description of a composite state is almost identical to that of a
      state (see <xref linkend="s1.ref.state"/> and so is not duplicated
      here. The single difference is one additional field below the field for
      <literal>Stereotype</literal>, which is described as follows.</para>

    <variablelist>
      <varlistentry>
        <term><literal>Subvertices</literal></term>

        <listitem><para>Text area. Lists the sub-states contained within
          this composite state.</para>

        <para>&Button1; click navigates to the selected entry, &button2;
          gives a pop up menu with one entry.</para>

        <itemizedlist>
          <listitem><para><literal>Open</literal>. Navigate to the
            selected sub-state.</para></listitem>
        </itemizedlist></listitem>
      </varlistentry>
    </variablelist>
  </sect1>

  <!-- Transition artifact. Has Call Event and Guard as sub-artifacts. -->

  <sect1 id="s1.ref.transition_state">
    <title>Transition</title>

    <para>A transition is a directed relation between a source state (or
      composite state) and destination state (or composite state). Within the
      UML metamodel, <literal>Transition</literal> is a sub-class of
      <literal>ModelElement</literal>.</para>

    <para>A transition is represented on a state diagram in &argouml; as an
      arrow connecting the source to the destination state. Alongside the state
      is the name of the transition (if any) separated by a colon
      (<literal>:</literal>) from the trigger action, any guard in square
      brackets (<literal>[]</literal>) separated by a slash
(<literal>/</literal>) from any effect expression.
</para>

    <!-- Transition details tabs -->

    <sect2>
      <title>Transition Details Tabs</title>

      <para>The details tabs that are active for transitions are as
        follows.</para>

      <variablelist>

        <!-- Entry for ToDoItem tab -->

        <varlistentry>
          <term><literal>ToDoItem</literal></term>

          <listitem><para>Standard tab.</para></listitem>
        </varlistentry>

        <!-- Entry for Properties tab -->

        <varlistentry>
          <term><literal>Properties</literal></term>

          <listitem><para>See <xref
              linkend="s2.ref.transition_property_toolbar"/> and <xref
              linkend="s2.ref.transition_property_fields"/>
            below.</para></listitem>
        </varlistentry>

        <!-- Entry for Documentation tab -->

        <varlistentry>
          <term><literal>Documentation</literal></term>

          <listitem><para>Standard tab.</para></listitem>
        </varlistentry>

        <!-- Entry for Style tab -->

        <varlistentry>
          <term><literal>Style</literal></term>

          <listitem><para>Standard tab. The values for the bounds of the
            transition have no effect, since the position of the transition
            is defined by its end points.</para>

          <caution><para>In the current release of &argouml; changing the
            color of the line does not change the color of the arrow
            head.</para></caution></listitem>
        </varlistentry>

        <!-- Entry for Source tab -->

        <varlistentry>
          <term><literal>Source</literal></term>

          <listitem><para>Standard tab, containing just the name of the
            transition, any guard and any effect in the same format as the
            diagram.</para>

          <note><para>In the fullness of time this tab will contain any
            code to implement the transition (code for the effect and guard
            will be associated with their artifacts). This is not
            implemented in the current release of
            &argouml;.</para></note></listitem>
        </varlistentry>

        <!-- Entry for Constraints tab -->

        <varlistentry>
          <term><literal>Constraints</literal></term>

          <listitem><para>Standard tab. There are no standard constraints
            defined for <literal>Transition</literal> within the UML
            metamodel.</para></listitem>
        </varlistentry>

        <!-- Entry for Tagged Values tab -->

        <varlistentry>
          <term><literal>Tagged Values</literal></term>

          <listitem><para>Standard tab. In the UML metamodel,
            <literal>Transition</literal> has the following standard
            tagged values defined.</para>

            <itemizedlist>
              <listitem><para><literal>derived</literal> (from the
                superclass, <literal>ModelElement</literal>). Values
                <literal>true</literal>, meaning the transition is
                redundant&mdash;it can be formally derived from other
                elements, or <literal>false</literal> meaning it
                cannot.</para>

              <note><para>Derived transitions still have their value in
                analysis and design to introduce useful names or concepts,
                and in design to avoid
                re-computation.</para></note></listitem>
            </itemizedlist>

            <note><para>The UML <literal>Element</literal> metaclass from
              which all other artifacts are derived includes the tagged
              element <literal>documentation</literal> which is handled by
              the <emphasis>documentation tab</emphasis> under
              &argouml;</para></note></listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <!-- Transition properties -->

    <sect2 id="s2.ref.transition_property_toolbar">
      <title>Transition Property Toolbar</title>

      <variablelist>

        <!-- Entry for Go up button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/navigate_up.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Go
            up</literal></term>

          <listitem><para>Navigate up through the package
            structure.</para></listitem>
        </varlistentry>

        <!-- Entry for Go back button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/navigate_back.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Go
            back</literal></term>

          <listitem><para>Navigate back to the previous
            artifact.</para>

          <warning><para>This feature is currently broken within &argouml;
            and there is no guarantee where (if anywhere) this button will
            take you.</para></warning></listitem>
        </varlistentry>

        <!-- Entry for Go forward button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/navigate_forward.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Go
            forward</literal></term>

          <listitem><para>Navigate forward to the next
            artifact.</para>

          <warning><para>This feature is currently broken within &argouml;
            and there is no guarantee where (if anywhere) this button will
            take you.</para></warning></listitem>
        </varlistentry>

        <!-- Entry for Delete button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/property_delete.gif"/>
          </imageobject></inlinemediaobject></guiicon>
            <literal>Delete</literal></term>

          <listitem><para>This deletes the transition from the model</para>

          <warning><para>This is a deletion from the model
            <emphasis>not</emphasis> just the diagram. To delete a
            transition from the diagram, but keep it within the model, use
            the main menu <literal>Edit/Remove From Diagram</literal>
            (Ctrl-R).</para></warning></listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <!-- Fields in the properties tab -->

    <sect2 id="s2.ref.transition_property_fields">
      <title>Property Fields For Transition</title>

      <variablelist>

        <!-- Entry for Name -->

        <varlistentry>
          <term><literal>Name</literal></term>

          <listitem><para>Text box. The name of the transition. By convention
            transition names start with a lower case letter and use bumpy
            caps to divide words within the name.</para>

          <note><para>&argouml; does not enforce this naming
            convention.</para></note></listitem>
        </varlistentry>

        <!-- Entry for Stereotype -->

        <varlistentry>
          <term><literal>Stereotype</literal></term>

          <listitem><para>Drop down selector. Transition has no stereotypes by
            default in the UML standard, but &argouml; provides the
            stereotypes, <literal>machine</literal>,
            <literal>organization</literal> and
            <literal>person</literal>.</para>

          <caution><para>&argouml; also provides the stereotype
            <literal>realize</literal> for transitions. This appears to be
            an error, since this stereotype properly belongs to the
            <literal>Abstraction</literal>
            metaclass.</para></caution></listitem>
        </varlistentry>

        <!-- Entry for NavStereo -->

        <varlistentry>
          <term><literal>Navigate Stereotype</literal></term>

          <listitem><para><guiicon><inlinemediaobject><imageobject><imagedata
              format="GIF" align="center"
              fileref="images/icons/navigate_stereotype.gif"/>
            </imageobject></inlinemediaobject></guiicon> icon. If a
              stereotype has been selected, this will navigate to the
              stereotype property panel (see <xref
                linkend="s1.ref.stereotype_class"/>).</para></listitem>
        </varlistentry>

        <!-- Entry for Source -->

        <varlistentry>
          <term><literal>Source</literal></term>

          <listitem><para>Text box. Lists the source state for the
            transition.</para>

          <para>&Button1; click navigates to the selected entry, &button2;
            gives a pop up menu with one entry.</para>

          <itemizedlist>
            <listitem><para><literal>Open</literal>. Navigate to the
              selected transition.</para></listitem>
          </itemizedlist></listitem>
        </varlistentry>

        <!-- Entry for Target -->

        <varlistentry>
          <term><literal>Target</literal></term>

          <listitem><para>Text box. Lists the target state for the
            transition.</para>

          <para>&Button1; click navigates to the selected entry, &button2;
            gives a pop up menu with one entry.</para>

          <itemizedlist>
            <listitem><para><literal>Open</literal>. Navigate to the
              selected transition.</para></listitem>
          </itemizedlist></listitem>
        </varlistentry>

        <!-- Entry for Trigger -->

        <varlistentry>
          <term><literal>Trigger</literal></term>

          <listitem><para>Text box. Lists the trigger event (if any) which
            invokes this transition.</para>

          <note><para>UML does not require there to be a trigger, if a
            guard is defined. The transition is taken immediately if the
            guard is true.</para></note>

          <para>&Button1; click navigates to the selected entry, &button2;
            gives a pop up menu with three entries.</para>

          <itemizedlist>
            <listitem><para><literal>Open</literal>. Navigate to the
              selected event.</para></listitem>

            <listitem><para><literal>Delete</literal>. Delete the selected
              event.</para></listitem>

            <listitem><para><literal>Add</literal>. Add a new event. Grayed
              out if there is already an event defined.</para></listitem>
          </itemizedlist></listitem>
        </varlistentry>

        <!-- Entry for Guard -->

        <varlistentry>
          <term><literal>Guard</literal></term>

          <listitem><para>Text box. Lists the guard expression (if any) which
            must be true before this transition can be taken.</para>

          <para>&Button1; click navigates to the selected entry, &button2;
            gives a pop up menu with three entries.</para>

          <itemizedlist>
            <listitem><para><literal>Open</literal>. Navigate to the
              selected guard.</para></listitem>

            <listitem><para><literal>Delete</literal>. Delete the selected
              guard.</para></listitem>

            <listitem><para><literal>Add</literal>. Add a new guard. Grayed
              out if there is already a guard defined.</para></listitem>
          </itemizedlist></listitem>
        </varlistentry>

        <!-- Entry for Effect -->

        <varlistentry>
          <term><literal>Effect</literal></term>

          <listitem><para>Text box. Lists the action (if any) to be invoked as
            this transition is taken.</para>

          <para>&Button1; click navigates to the selected action, &button2;
            gives a pop up menu with three entries.</para>

          <itemizedlist>
            <listitem><para><literal>Open</literal>. Navigate to the
              selected action.</para></listitem>

            <listitem><para><literal>Delete</literal>. Delete the selected
              action.</para></listitem>

            <listitem><para><literal>Add</literal>. Add a new
              action.</para></listitem>
          </itemizedlist></listitem>
        </varlistentry>
      </variablelist>
    </sect2>
  </sect1>

  <!-- Call Event artifact (subsidiary of Transition) -->

  <sect1 id="s1.ref.call_event_state">
    <title>Call Event</title>

    <para>An event is an observable occurrence. In the
      UML metamodel it is a child of <literal>ModelElement</literal>.</para>

    <para>There are a number of different types of events that are children of
      event within the UML metamodel.</para>

    <itemizedlist>
      <listitem><para><literal>SignalEvent</literal>. Associated with a signal,
        this event is caused by the signal being raised.</para></listitem>

      <listitem><para><literal>CallEvent</literal>. Associated with an
        operation of a class, this event is caused by a call to the given
        operation. The expected effect is that the steps of the operation will
        be executed.</para></listitem>

      <listitem><para><literal>TimeEvent</literal>. An event cause by
      expiration of a timing deadline.</para></listitem>

      <listitem><para><literal>ChangeEvent</literal>. An event caused by a
        particular expression (of attributes and associations) becoming
        true.</para></listitem>
    </itemizedlist>

    <para>An action is represented by its name.</para>

    <caution><para>The current release of &argouml; does not show the
      parameters of the event.</para></caution>

    <caution><para>The current release of &argouml; has only partially
      implemented events, and currently indicates that they are always call
      events. In practice, since only the name and parameters can be specified,
      the call event tab can be used for any event. The name field should be
      used to indicate that it is a signal, timing or change
      event.</para></caution>

    <!-- Call Event details tabs -->

    <sect2>
      <title>Call Event Details Tabs</title>

      <para>The details tabs that are active for call events are as
        follows.</para>

      <variablelist>

        <!-- Entry for ToDoItem tab -->

        <varlistentry>
          <term><literal>ToDoItem</literal></term>

          <listitem><para>Standard tab.</para></listitem>
        </varlistentry>

        <!-- Entry for Properties tab -->

        <varlistentry>
          <term><literal>Properties</literal></term>

          <listitem><para>See <xref
              linkend="s2.ref.call_event_property_toolbar"/> and <xref
              linkend="s2.ref.call_event_property_fields"/>
            below.</para></listitem>
        </varlistentry>

        <!-- Entry for Documentation tab -->

        <varlistentry>
          <term><literal>Documentation</literal></term>

          <listitem><para>Standard tab.</para></listitem>
        </varlistentry>

        <!-- Entry for Style tab -->

        <varlistentry>
          <term><literal>Style</literal></term>

          <listitem><para>Standard tab. The contents of this tab relate to the
            owning artifact (transition), not the call event, and any
            changes affect that owning artifact.</para></listitem>
        </varlistentry>

        <!-- Entry for Source tab -->

        <varlistentry>
          <term><literal>Source</literal></term>

          <listitem><para>Standard tab, containing the name of the
            call event.</para>

          <note><para>In the fullness of time this tab will contain code to
            implement the call event. This is not implemented in the
            current release of &argouml;.</para></note></listitem>
        </varlistentry>

        <!-- Entry for Constraints tab -->

        <varlistentry>
          <term><literal>Constraints</literal></term>

          <listitem><para>Standard tab. There are no standard constraints
            defined for <literal>CallEvent</literal> within the UML
            metamodel.</para></listitem>
        </varlistentry>

        <!-- Entry for Tagged Values tab -->

        <varlistentry>
          <term><literal>Tagged Values</literal></term>

          <listitem><para>Standard tab. In the UML metamodel,
            <literal>Call Event</literal> has the following standard
            tagged values defined.</para>

            <itemizedlist>
              <listitem><para><literal>derived</literal> (from the
                superclass, <literal>ModelElement</literal>). Values
                <literal>true</literal>, meaning the call event is
                redundant&mdash;it can be formally derived from other
                elements, or <literal>false</literal> meaning it
                cannot.</para>

              <note><para>Derived call events still have their value in
                analysis and design to introduce useful names or concepts,
                and in design to avoid
                re-computation.</para></note></listitem>
            </itemizedlist>

            <note><para>The UML <literal>Element</literal> metaclass from
              which all other artifacts are derived includes the tagged
              element <literal>documentation</literal> which is handled by
              the <emphasis>documentation tab</emphasis> under
              &argouml;</para></note></listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <!-- Call Event properties -->

    <sect2 id="s2.ref.call_event_property_toolbar">
      <title>Call Event Property Toolbar</title>

      <variablelist>

        <!-- Entry for Go up button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/navigate_up.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Go
            up</literal></term>

          <listitem><para>Navigate up through the package
            structure.</para></listitem>
        </varlistentry>

        <!-- Entry for Go back button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/navigate_back.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Go
            back</literal></term>

          <listitem><para>Navigate back to the previous
            artifact.</para>

          <warning><para>This feature is currently broken within &argouml;
            and there is no guarantee where (if anywhere) this button will
            take you.</para></warning></listitem>
        </varlistentry>

        <!-- Entry for Go forward button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/navigate_forward.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Go
            forward</literal></term>

          <listitem><para>Navigate forward to the next
            artifact.</para>

          <warning><para>This feature is currently broken within &argouml;
            and there is no guarantee where (if anywhere) this button will
            take you.</para></warning></listitem>
        </varlistentry>

        <!-- Entry for Add parameter -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/parameter.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Add
            parameter</literal></term>

          <listitem><para>This creates a new parameter for the event
            operation as the current parameter, navigating immediately to
            the properties tab for that parameter (see
            <xref linkend="s1.ref.parameter"/>).</para></listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <!-- Fields in the properties tab -->

    <sect2 id="s2.ref.call_event_property_fields">
      <title>Property Fields For Call Event</title>

      <variablelist>

        <!-- Entry for Name -->

        <varlistentry>
          <term><literal>Name</literal></term>

          <listitem><para>Text box. The name of the call event. By convention
            call event names start with a lower case letter and use bumpy
            caps to divide words within the name in the same way as
            operations.</para>

          <note><para>&argouml; does not enforce this naming
            convention.</para></note>

          <tip><para>For call events it makes sense to use the name of the
            associated operation. For signal events it make sense to use
            the name of the signal, prefixed by
            <literal>[sig]</literal>. For time events use the time
            expression, prefixed by <literal>[time]</literal> and for
            change events the change expression, prefixed by
            <literal>[change]</literal>.</para></tip></listitem>
        </varlistentry>

        <!-- Entry for Expression -->

        <varlistentry>
          <term><literal>Parameters</literal></term>

          <listitem><para>Text area, with entries for all the actual parameter
            values of
            the event (see <xref linkend="s1.ref.parameter"/>).</para>

          <para>&Button1; click on any of the parameters
            navigates to that parameter. &button2; click brings up a pop up
            menu with four entries.</para>

          <itemizedlist>
            <listitem><para><literal>Open</literal>. Navigate to the
              selected parameter.</para></listitem>

            <listitem><para><literal>Add</literal>. Create a new parameter
              and navigate to it.</para></listitem>

            <listitem><para><literal>Move Up</literal>. Only available where
              there are two or more parameters, and the parameter selected is
              not at the top. It is moved up one.</para></listitem>

            <listitem><para><literal>Move Down</literal>. Only available where
              there are two or more parameters listed, and the parameter
              selected is not at the bottom. It is moved down
              one.</para></listitem> </itemizedlist></listitem>
        </varlistentry>
      </variablelist>
    </sect2>
  </sect1>

  <!-- Guard artifact (subsidiary of Transition) -->

  <sect1 id="s1.ref.guard_state">
    <title>Guard</title>

    <para>A guard is associated with a transition. At the time an event is
      dispatched, the guard is evaluated, and if false, its transition is
      disabled. In the UML metamodel, <literal>Guard</literal> is a child of
      <literal>ModelElement</literal>.</para>

    <para>An guard is represented by the text of its expression in square
      brackets (<literal>[]</literal>).</para>

    <!-- Guard details tabs -->

    <sect2>
      <title>Guard Details Tabs</title>

      <para>The details tabs that are active for guards are as
        follows.</para>

      <variablelist>

        <!-- Entry for ToDoItem tab -->

        <varlistentry>
          <term><literal>ToDoItem</literal></term>

          <listitem><para>Standard tab.</para></listitem>
        </varlistentry>

        <!-- Entry for Properties tab -->

        <varlistentry>
          <term><literal>Properties</literal></term>

          <listitem><para>See <xref
              linkend="s2.ref.guard_property_toolbar"/> and <xref
              linkend="s2.ref.guard_property_fields"/>
            below.</para></listitem>
        </varlistentry>

        <!-- Entry for Documentation tab -->

        <varlistentry>
          <term><literal>Documentation</literal></term>

          <listitem><para>Standard tab.</para></listitem>
        </varlistentry>

        <!-- Entry for Style tab -->

        <varlistentry>
          <term><literal>Style</literal></term>

          <listitem><para>Standard tab. The contents of this tab relate to the
            owning artifact (transition), not the guard, and any
            changes affect that owning artifact.</para></listitem>
        </varlistentry>

        <!-- Entry for Source tab -->

        <varlistentry>
          <term><literal>Source</literal></term>

          <listitem><para>Standard tab, containing the expression for the
            guard.</para>

          <note><para>In the fullness of time this tab will contain code to
            implement the guard. This is not implemented in the current
            release of &argouml;.</para></note></listitem>
        </varlistentry>

        <!-- Entry for Constraints tab -->

        <varlistentry>
          <term><literal>Constraints</literal></term>

          <listitem><para>Standard tab. There are no standard constraints
            defined for <literal>Guard</literal> within the UML
            metamodel.</para></listitem>
        </varlistentry>

        <!-- Entry for Tagged Values tab -->

        <varlistentry>
          <term><literal>Tagged Values</literal></term>

          <listitem><para>Standard tab. In the UML metamodel,
            <literal>Guard</literal> has the following standard
            tagged values defined.</para>

            <itemizedlist>
              <listitem><para><literal>derived</literal> (from the
                superclass, <literal>ModelElement</literal>). Values
                <literal>true</literal>, meaning the guard is
                redundant&mdash;it can be formally derived from other
                elements, or <literal>false</literal> meaning it
                cannot.</para>

              <note><para>Derived guards still have their value in
                analysis and design to introduce useful names or concepts,
                and in design to avoid
                re-computation.</para></note></listitem>
            </itemizedlist>

            <note><para>The UML <literal>Element</literal> metaclass from
              which all other artifacts are derived includes the tagged
              element <literal>documentation</literal> which is handled by
              the <emphasis>documentation tab</emphasis> under
              &argouml;</para></note></listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <!-- Guard properties -->

    <sect2 id="s2.ref.guard_property_toolbar">
      <title>Guard Property Toolbar</title>

      <variablelist>

        <!-- Entry for Go up button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/navigate_up.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Go
            up</literal></term>

          <listitem><para>Navigate up through the package
            structure.</para></listitem>
        </varlistentry>

        <!-- Entry for Go back button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/navigate_back.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Go
            back</literal></term>

          <listitem><para>Navigate back to the previous
            artifact.</para>

          <warning><para>This feature is currently broken within &argouml;
            and there is no guarantee where (if anywhere) this button will
            take you.</para></warning></listitem>
        </varlistentry>

        <!-- Entry for Go forward button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/navigate_forward.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Go
            forward</literal></term>

          <listitem><para>Navigate forward to the next
            artifact.</para>

          <warning><para>This feature is currently broken within &argouml;
            and there is no guarantee where (if anywhere) this button will
            take you.</para></warning></listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <!-- Fields in the properties tab -->

    <sect2 id="s2.ref.guard_property_fields">
      <title>Property Fields For Guard</title>

      <variablelist>

        <!-- Entry for Name -->

        <varlistentry>
          <term><literal>Name</literal></term>

          <listitem><para>Text box. The name of the guard. By convention
            guard names start with a lower case letter and use bumpy caps
            to divide words within the name.</para>

          <note><para>&argouml; does not enforce this naming
            convention.</para></note></listitem>
        </varlistentry>

        <!-- Entry for Expression -->

        <varlistentry>
          <term><literal>Expression</literal></term>

          <listitem><para>Text box. The expression that defines the
            guard.</para></listitem>
        </varlistentry>

        <!-- Entry for Language -->

        <varlistentry>
          <term><literal>Language</literal></term>

          <listitem><para>Text box. This is not part of standard UML, but in
            the partial implementation of guards currently available in
            UML it may be useful to indicate that the expression is written
            in a particular programming language.</para></listitem>
        </varlistentry>

        <!-- Entry for Transition -->

        <varlistentry>
          <term><literal>Transition</literal></term>

          <listitem><para>Text box, listing the transition that owns this
            guard.</para>

          <para>&Button1; click on the transition navigates to that
            transition. &button2; click brings up a pop up menu with one
            entry.</para>

          <itemizedlist>
            <listitem><para><literal>Open</literal>. Navigate to the
              selected transition.</para></listitem>
          </itemizedlist></listitem>
        </varlistentry>
      </variablelist>
    </sect2>
  </sect1>

  <!-- Pseudostate artifact. Can't be created directly. -->

  <sect1 id="s1.ref.pseudostate">
    <title>Pseudostate</title>

    <para>A pseudostate encompasses a number of different transient vertices on
      a state machine diagram. They do not have the properties of a full state
      and serve only as a connection point for transactions (but with some
      semantic value). Within the
      UML metamodel, <literal>Pseudostate</literal> is a sub-class of
      <literal>StateVertex</literal>.</para>

    <para>The representation of a pseudostate on a state diagram in &argouml;
      depends on the particular type of pseudostate: initial, deepHistory,
      shallowHistory, join, fork, junction and choice. &argouml; does not allow
      you to place a pseudostate directly, but only through tools for the
      specific types of pseudostate. These are described in separate sections
      below (see
      <xref linkend="s1.ref.initial_state"/>,
      <xref linkend="s1.ref.branch_state"/>,
      <xref linkend="s1.ref.fork_state"/>,
      <xref linkend="s1.ref.join_state"/>,
      <xref linkend="s1.ref.shallow_history"/> and
      <xref linkend="s1.ref.deep_history"/>).</para>

    <caution><para>The current release of &argouml; does not provide support
      for a junction pseudostate.</para></caution>

    <!-- Pseudostate details tabs -->

    <sect2>
      <title>Pseudostate Details Tabs</title>

      <para>The details tabs that are active for pseudostates are as
        follows.</para>

      <variablelist>

        <!-- Entry for ToDoItem tab -->

        <varlistentry>
          <term><literal>ToDoItem</literal></term>

          <listitem><para>Standard tab.</para></listitem>
        </varlistentry>

        <!-- Entry for Properties tab -->

        <varlistentry>
          <term><literal>Properties</literal></term>

          <listitem><para>See <xref
              linkend="s2.ref.pseudostate_property_toolbar"/> and <xref
              linkend="s2.ref.pseudostate_property_fields"/>
            below.</para></listitem>
        </varlistentry>

        <!-- Entry for Documentation tab -->

        <varlistentry>
          <term><literal>Documentation</literal></term>

          <listitem><para>Standard tab.</para></listitem>
        </varlistentry>

        <!-- Entry for Style tab -->

        <varlistentry>
          <term><literal>Style</literal></term>

          <listitem><para>Standard tab.</para>

          <caution><para>The <literal>Shadow</literal> field has no
            effect&mdash; in the current release of &argouml;. There are no
            shadow effects provided for states on the
            diagram.</para></caution></listitem>
        </varlistentry>

        <!-- Entry for Source tab -->

        <varlistentry>
          <term><literal>Source</literal></term>

          <listitem><para>Standard tab, containing just the name of the
            pseudostate.</para>

          <note><para>In the fullness of time this tab will contain any
            code to implement the pseudostate. This is not implemented in
            the current release of &argouml;.</para></note></listitem>
        </varlistentry>

        <!-- Entry for Constraints tab -->

        <varlistentry>
          <term><literal>Constraints</literal></term>

          <listitem><para>Standard tab. There are no standard constraints
            defined for <literal>Pseudostate</literal> within the UML
            metamodel.</para></listitem>
        </varlistentry>

        <!-- Entry for Tagged Values tab -->

        <varlistentry>
          <term><literal>Tagged Values</literal></term>

          <listitem><para>Standard tab. In the UML metamodel,
            <literal>Pseudostate</literal> has the following standard
            tagged values defined.</para>

            <itemizedlist>
              <listitem><para><literal>derived</literal> (from the
                superclass, <literal>ModelElement</literal>). Values
                <literal>true</literal>, meaning the pseudostate is
                redundant&mdash;it can be formally derived from other
                elements, or <literal>false</literal> meaning it
                cannot.</para>

              <note><para>Derived pseudostates still have their value in
                analysis and design to introduce useful names or concepts,
                and in design to avoid
                re-computation.</para></note></listitem>
            </itemizedlist>

            <note><para>The UML <literal>Element</literal> metaclass from
              which all other artifacts are derived includes the tagged
              element <literal>documentation</literal> which is handled by
              the <emphasis>documentation tab</emphasis> under
              &argouml;</para></note></listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <!-- Pseudostate properties -->

    <sect2 id="s2.ref.pseudostate_property_toolbar">
      <title>Pseudostate Property Toolbar</title>

      <variablelist>

        <!-- Entry for Go up button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/navigate_up.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Go
            up</literal></term>

          <listitem><para>Navigate up through the package
            structure.</para></listitem>
        </varlistentry>

        <!-- Entry for Go back button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/navigate_back.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Go
            back</literal></term>

          <listitem><para>Navigate back to the previous
            artifact.</para>

          <warning><para>This feature is currently broken within &argouml;
            and there is no guarantee where (if anywhere) this button will
            take you.</para></warning></listitem>
        </varlistentry>

        <!-- Entry for Go forward button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/navigate_forward.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Go
            forward</literal></term>

          <listitem><para>Navigate forward to the next
            artifact.</para>

          <warning><para>This feature is currently broken within &argouml;
            and there is no guarantee where (if anywhere) this button will
            take you.</para></warning></listitem>
        </varlistentry>

        <!-- Entry for Delete button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/property_delete.gif"/>
          </imageobject></inlinemediaobject></guiicon>
            <literal>Delete</literal></term>

          <listitem><para>This deletes the pseudostate from the model</para>

          <warning><para>This is a deletion from the model
            <emphasis>not</emphasis> just the diagram. To delete a
            pseudostate from the diagram, but keep it within the model, use
            the main menu <literal>Edit/Remove From Diagram</literal>
            (Ctrl-R).</para></warning></listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <!-- Fields in the properties tab -->

    <sect2 id="s2.ref.pseudostate_property_fields">
      <title>Property Fields For Pseudostate</title>

      <variablelist>

        <!-- Entry for Name -->

        <varlistentry>
          <term><literal>Name</literal></term>

          <listitem><para>Text box. The name of the pseudostate. By convention
            pseudostate names start with a lower case letter and use bumpy
            caps to divide words within the name.</para>

          <note><para>&argouml; does not enforce this naming
            convention.</para></note>

          <tip><para>Pseudostate names are not shown on the diagram and it
            is not usually necessary to give them a
            name.</para></tip></listitem>
        </varlistentry>

        <!-- Entry for Kind -->

        <varlistentry>
          <term><literal>Kind</literal></term>

          <listitem><para>Radio buttons. Radio button indicating the type of
            pseudostate: <literal>junction</literal>,
            <literal>branch</literal>, <literal>fork</literal>,
            <literal>join</literal>, <literal>deep history</literal> and
            <literal>shallow history</literal>.</para>

          <note><para>In &argouml; these buttons are defined by the type of
            pseudostate created and cannot be changed. As a consequence
            they are shown grayed out.</para></note></listitem>
        </varlistentry>

        <!-- Entry for Incoming -->

        <varlistentry>
          <term><literal>Incoming</literal></term>

          <listitem><para>Text area. Lists any incoming transitions for the
            pseudostate.</para>

          <para>&Button1; click navigates to the selected transition,
            &button2; gives a pop up menu with one entry.</para>

          <itemizedlist>
            <listitem><para><literal>Open</literal>. Navigate to the
              selected transition.</para></listitem>
          </itemizedlist></listitem>
        </varlistentry>

        <!-- Entry for Outgoing -->

        <varlistentry>
          <term><literal>Outgoing</literal></term>

          <listitem><para>Text area. Lists any outgoing transitions for the
            pseudostate.</para>

          <para>&Button1; click navigates to the selected transition,
            &button2; gives a pop up menu with one entry.</para>

          <itemizedlist>
            <listitem><para><literal>Open</literal>. Navigate to the
              selected transition.</para></listitem>
          </itemizedlist></listitem>
        </varlistentry>
      </variablelist>
    </sect2>
  </sect1>

  <!-- Initial State. This is a pseudo state, which all have the same
       property sheet. The pseudo states are Initial State, Branch, Fork,
       Join, Shallow History and Deep History but *NOT* Final State,
       which is a real state. -->

  <sect1 id="s1.ref.initial_state">
    <title>Initial State</title>

    <para>The initial state is a pseudostate
      (see <xref linkend="s1.ref.pseudostate"/>) representing the default state
      of a state machine (or composite state) when it is created. It is the
      state from which any initial transition is made.</para>

    <para>As a consequence it is not permissible to have incoming
      transitions. &argouml; will not let you create such transitions, and if
      you import a model that has such transitions, a critic will
      complain.</para>

    <para>An initial state is represented on the diagram as a solid disc.</para>
  </sect1>

  <!-- Final State -->

  <sect1 id="s1.ref.final_state">
    <title>Final State</title>

    <para>If a transition reaches a final state, it implies completion of the
      activity associated with that composite state, or at the top level, of
      the complete state machine. In the UML metamodel
      <literal>FinalState</literal> is a child of
      <literal>State</literal>.</para>

    <note><para>A final state is a true state (with all its attributes),
      <emphasis>not</emphasis> a pseudostate.</para></note>

    <para>Completion at the top level implies termination (i.e. destruction) of
      the owning object instance.</para>

    <para>The representation of a final state on the diagram is a circle with a
      small disc at its center.</para>

    <!-- Final State details tabs -->

    <sect2>
      <title>Final State Details Tabs</title>

      <para>The details tabs that are active for final states are as
        follows.</para>

      <variablelist>

        <!-- Entry for ToDoItem tab -->

        <varlistentry>
          <term><literal>ToDoItem</literal></term>

          <listitem><para>Standard tab.</para></listitem>
        </varlistentry>

        <!-- Entry for Properties tab -->

        <varlistentry>
          <term><literal>Properties</literal></term>

          <listitem><para>See <xref
              linkend="s2.ref.final_state_property_toolbar"/> and <xref
              linkend="s2.ref.final_state_property_fields"/>
            below.</para></listitem>
        </varlistentry>

        <!-- Entry for Documentation tab -->

        <varlistentry>
          <term><literal>Documentation</literal></term>

          <listitem><para>Standard tab.</para></listitem>
        </varlistentry>

        <!-- Entry for Style tab -->

        <varlistentry>
          <term><literal>Style</literal></term>

          <listitem><para>Standard tab.</para>

          <caution><para>The <literal>Shadow</literal> field has no
            effect&mdash; in the current release of &argouml;. There are no
            shadow effects provided for states on the
            diagram.</para></caution></listitem>
        </varlistentry>

        <!-- Entry for Source tab -->

        <varlistentry>
          <term><literal>Source</literal></term>

          <listitem><para>Standard tab, containing just the name of the
            final state, any guard and any effect in the same format as the
            diagram.</para>

          <note><para>In the fullness of time this tab will contain any
            code to implement the final state. This is not implemented in
            the current release of &argouml;.</para></note></listitem>
        </varlistentry>

        <!-- Entry for Constraints tab -->

        <varlistentry>
          <term><literal>Constraints</literal></term>

          <listitem><para>Standard tab. There are no standard constraints
            defined for <literal>Final State</literal> within the UML
            metamodel.</para></listitem>
        </varlistentry>

        <!-- Entry for Tagged Values tab -->

        <varlistentry>
          <term><literal>Tagged Values</literal></term>

          <listitem><para>Standard tab. In the UML metamodel,
            <literal>Final State</literal> has the following standard
            tagged values defined.</para>

            <itemizedlist>
              <listitem><para><literal>derived</literal> (from the
                superclass, <literal>ModelElement</literal>). Values
                <literal>true</literal>, meaning the final state is
                redundant&mdash;it can be formally derived from other
                elements, or <literal>false</literal> meaning it
                cannot.</para>

              <note><para>Derived final states still have their value in
                analysis and design to introduce useful names or concepts,
                and in design to avoid
                re-computation.</para></note></listitem>
            </itemizedlist>

            <note><para>The UML <literal>Element</literal> metaclass from
              which all other artifacts are derived includes the tagged
              element <literal>documentation</literal> which is handled by
              the <emphasis>documentation tab</emphasis> under
              &argouml;</para></note></listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <!-- Final State properties -->

    <sect2 id="s2.ref.final_state_property_toolbar">
      <title>Final State Property Toolbar</title>

      <variablelist>

        <!-- Entry for Go up button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/navigate_up.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Go
            up</literal></term>

          <listitem><para>Navigate up through the package
            structure.</para></listitem>
        </varlistentry>

        <!-- Entry for Go back button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/navigate_back.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Go
            back</literal></term>

          <listitem><para>Navigate back to the previous
            artifact.</para>

          <warning><para>This feature is currently broken within &argouml;
            and there is no guarantee where (if anywhere) this button will
            take you.</para></warning></listitem>
        </varlistentry>

        <!-- Entry for Go forward button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/navigate_forward.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Go
            forward</literal></term>

          <listitem><para>Navigate forward to the next
            artifact.</para>

          <warning><para>This feature is currently broken within &argouml;
            and there is no guarantee where (if anywhere) this button will
            take you.</para></warning></listitem>
        </varlistentry>

        <!-- Entry for Delete button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/property_delete.gif"/>
          </imageobject></inlinemediaobject></guiicon>
            <literal>Delete</literal></term>

          <listitem><para>This deletes the final state from the model</para>

          <warning><para>This is a deletion from the model
            <emphasis>not</emphasis> just the diagram. To delete a
            final state from the diagram, but keep it within the model, use
            the main menu <literal>Edit/Remove From Diagram</literal>
            (Ctrl-R).</para></warning></listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <!-- Fields in the properties tab -->

    <sect2 id="s2.ref.final_state_property_fields">
      <title>Property Fields For Final State</title>

      <variablelist>

        <!-- Entry for Name -->

        <varlistentry>
          <term><literal>Name</literal></term>

          <listitem><para>Text box. The name of the final state. By convention
            final state names start with a lower case letter and use bumpy
            caps to divide words within the name.</para>

          <note><para>&argouml; does not enforce this naming
            convention.</para></note>

          <tip><para>Final state names are not shown on the diagram and it
            is not usually necessary to give them a
            name.</para></tip></listitem>
        </varlistentry>

        <!-- Entry for Stereotype -->

        <varlistentry>
          <term><literal>Stereotype</literal></term>

          <listitem><para>Drop down selector. Final State has no stereotypes
            by default in the UML standard, but &argouml; provides the
            stereotypes, <literal>machine</literal>,
            <literal>organization</literal> and
            <literal>person</literal>.</para>

          <caution><para>&argouml; also provides the stereotype
            <literal>realize</literal> for final states. This appears to be
            an error, since this stereotype properly belongs to the
            <literal>Abstraction</literal>
            metaclass.</para></caution></listitem>
        </varlistentry>

        <!-- Entry for NavStereo -->

        <varlistentry>
          <term><literal>Navigate Stereotype</literal></term>

          <listitem><para><guiicon><inlinemediaobject><imageobject><imagedata
              format="GIF" align="center"
              fileref="images/icons/navigate_stereotype.gif"/>
            </imageobject></inlinemediaobject></guiicon> icon. If a
              stereotype has been selected, this will navigate to the
              stereotype property panel (see <xref
                linkend="s1.ref.stereotype_class"/>).</para></listitem>
        </varlistentry>

        <!-- Entry for Incoming -->

        <varlistentry>
          <term><literal>Incoming</literal></term>

          <listitem><para>Text area. Lists any incoming transitions for the
            final state.</para>

          <para>&Button1; click navigates to the selected transition,
            &button2; gives a pop up menu with one entry.</para>

          <itemizedlist>
            <listitem><para><literal>Open</literal>. Navigate to the
              selected transition.</para></listitem>
          </itemizedlist></listitem>
        </varlistentry>
      </variablelist>
    </sect2>
  </sect1>

  <!-- Branch. This is a pseudo state, which all have the same property
       sheet. The pseudo states are Initial State, Branch, Fork, Join,
       Shallow History and Deep History but *NOT* Final State, which is a
       real state. -->

  <sect1 id="s1.ref.branch_state">
    <title>Branch</title>

    <para>Branch is a pseudostate (see <xref linkend="s1.ref.pseudostate"/>)
      which allows a dynamic choice of outgoing transitions. The chosen
      transition is that whose guard is true at the time of the transition (if
      more than one is true, one is selected at random).</para>

    <note><para>UML calls this sort of branch a <literal>choice</literal>. UML
      also defines a static branch, <literal>junction</literal>, based on
      static conditional expressions, which is not supported in the current
      release of &argouml;</para></note>

    <para>A branch is represented on the diagram as a solid (white by default)
      diamond.</para>
  </sect1>

  <!-- Fork. This is a pseudo state, which all have the same property
       sheet. The pseudo states are Initial State, Branch, Fork, Join,
       Shallow History and Deep History but *NOT* Final State, which is a
       real state. -->

  <sect1 id="s1.ref.fork_state">
    <title>Fork</title>

    <para>Fork is a pseudostate (see <xref linkend="s1.ref.pseudostate"/>)
      which splits a transition in to two or more concurrent
      transitions.</para>

    <caution><para>The outgoing transitions should not have
      guards. However the current release of &argouml; will not enforce
      this.</para></caution>

    <para>A fork is represented on the diagram as a solid (black by default)
      horizontal bar.</para>
  </sect1>


  <!-- Join. This is a pseudo state, which all have the same property
       sheet. The pseudo states are Initial State, Branch, Fork, Join,
       Shallow History and Deep History but *NOT* Final State, which is a
       real state. -->

  <sect1 id="s1.ref.join_state">
    <title>Join</title>

    <para>Fork is a pseudostate (see <xref linkend="s1.ref.pseudostate"/>)
      which joins two or more concurrent transitions into a single
      transition.</para>

    <caution><para>The incoming transitions should not have
      guards. However the current release of &argouml; will not enforce
      this.</para></caution>

    <para>A join is represented on the diagram as a solid (black by default)
      horizontal bar.</para>
  </sect1>


  <!-- Shallow History. This is a pseudo state, which all have the same
       property sheet. The pseudo states are Initial State, Branch, Fork,
       Join, Shallow History and Deep History but *NOT* Final State,
       which is a real state. -->

  <sect1 id="s1.ref.shallow_history">
    <title>Shallow History</title>

    <para>Shallow History is a pseudostate (see <xref
      linkend="s1.ref.pseudostate"/>) within a composite state, which
      causes control to be passed to the state that last had control within the
      composite state. A transition may show a default state to use if the
      composite state has never been entered before.</para> 

    <para>The shallow history ignores any composite states within this
composite state, dealing only with direct sub-states.
</para>

    <para>A shallow history is represented on the diagram as a circle
      containing the letter <literal>H</literal>.</para>
  </sect1>

  <!-- Deep History. This is a pseudo state, which all have the same
       property sheet. The pseudo states are Initial State, Branch, Fork,
       Join, Shallow History and Deep History but *NOT* Final State,
       which is a real state. -->

  <sect1 id="s1.ref.deep_history">
    <title>Deep History (to be improved...)</title>

<!-- TODO:
    Rewrite!
 -->
    <para>Shallow History is a pseudostate (see <xref
      linkend="s1.ref.pseudostate"/>) within a composite state, which
      causes control to be passed to the state that last had control within the
      composite state. A transition may show a default state to use if the
      composite state has never been entered before.</para> 

    <para>The deep history will transfer to a state within any hierarchy of
composite states within this composite state if that is
      necessary.</para>

    <para>A deep history is represented on the diagram as a circle
      containing the symbols <literal>H*</literal>.</para>
  </sect1>
</chapter>

<!-- Local stuff for Emacs - please do not delete

Local Variables:
mode: xml
sgml-doctype: "argomanual.xml"
sgml-parent-document: ("argomanual.xml" "chapter" nil)
sgml-validate-command: "nsgmls -wxml -sv ../docbook-setup/xml.dcl \
  argomanual.xml"
indent-tabs-mode: nil
End:

-->
