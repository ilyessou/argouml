<?xml version="1.0" encoding="ISO-8859-1"?>

<!--

Top level description of all the artifacts within ArgoUML.

-->

<chapter id="ch.ref.entities">
  <title>Top Level Artifact Reference</title>

  <sect1>
    <title>Introduction</title>

    <para>This chapter describes each artifact that can be created within
      &argouml;. The chapter covers top-level <quote>general</quote>
      artifacts. The following chapters (see <xref
        linkend="ch.ref.entusecase"/> through <xref
        linkend="ch.ref.entdeploy"/>) cover each of the &argouml;
      diagrams.</para> 

    <para>There is a close relationship between this material and the
      properties tab of the details pane (see 
      <xref linkend="s1.ref.proptab"/>). That section covers properties in
      general, in this chapter they are linked to specific artifacts.</para>
  </sect1>

  <!-- Top level artifacts. Model -->

  <sect1 id="s1.ref.model">
    <title>The Model</title>

    <indexterm>
      <primary>Model, The</primary>
    </indexterm>

    <para>The model is the top level artifact within &argouml;. In the UML
      meta-model it is a sub-class of package. In many respects within
      &argouml; it behaves similarly to a package (see <xref
      linkend="s1.ref.package"/>).</para>

    <note><para>&argouml; is restricted to one model within the
      tool.</para></note>

    <para>Standard data types, classes and packages are loaded (the
      default, see <xref linkend="ch.ref.entbuiltin"/>) as sub-packages
of the model.
These sub-packages are not initially present in the model 
but are added to the model when used.
</para>

    <!-- Model details tabs -->

    <sect2>
      <title>Model Details Tabs</title>

      <indexterm>
        <primary>Model</primary>
        <secondary>Details Tabs</secondary>
      </indexterm>
      <indexterm>
        <primary>Details Tabs</primary>
        <secondary>for Model</secondary>
      </indexterm>

      <para>The details tabs that are active for the model are as
        follows.</para>

      <variablelist>

        <!-- Entry for ToDoItem tab -->

        <varlistentry>
          <term><literal>ToDoItem</literal></term>

          <listitem><para>Standard tab.</para></listitem>
        </varlistentry>

        <!-- Entry for Properties tab -->

        <varlistentry>
          <term><literal>Properties</literal></term>

          <listitem><para>See <xref
              linkend="s2.ref.model_property_toolbar"/> and <xref
              linkend="s2.ref.model_property_fields"/>
            below.</para></listitem>
        </varlistentry>

        <!-- Entry for Documentation tab -->

        <varlistentry>
          <term><literal>Documentation</literal></term>

          <listitem>
            <para>Standard tab.
See <xref linkend="s2.ref.documentation_tab"/>.
</para>
          </listitem>
        </varlistentry>

        <!-- Entry for Source tab -->

        <varlistentry>
          <term><literal>Source</literal></term>

          <listitem><para>Standard tab. This contains a template package
            declaration appropriate to the entire model. In the future this
            would be part of the code generation activity.</para></listitem>
        </varlistentry>

        <!-- Entry for Constraints tab -->

        <varlistentry>
          <term><literal>Constraints</literal></term>

          <listitem><para>Standard tab. 
This tab is downlighted, since constraints are not defined for a 
<literal>Model</literal> within the &argouml; metamodel.
          </para></listitem>
        </varlistentry>

        <!-- Entry for Tagged Values tab -->

        <varlistentry>
          <term><literal>Tagged Values</literal></term>

          <listitem><para>Standard tab. In the UML meta-model,
            <literal>Model</literal> has the following standard tagged
            values defined.</para>

            <itemizedlist>
              <listitem><para><literal>derived</literal> (from the
superclass, <literal>ModelElement</literal>).
</para>
                <para>
Values <literal>true</literal>, 
meaning the class is redundant 
&mdash; it can be formally derived from other elements,
or <literal>false</literal> meaning it cannot.
</para>

                <para>
Derived models have their value 
in analysis to introduce useful names or concepts, and 
in design to avoid re-computation.
</para>
              </listitem>
            </itemizedlist>

          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <!-- Model properties -->

    <sect2 id="s2.ref.model_property_toolbar">
      <title>Model Property Toolbar</title>

      <variablelist>

        <!-- Entry for Go up button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/navigate_up.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Go
            up</literal></term>

          <listitem><para>Navigate up through the package structure of the
model.
</para>
            <para>
Since the model is the top package nothing will happen.
<!-- TODO: Shouldn't it better be downlighted or absent then? See issue ... -->
            </para>
          </listitem>
        </varlistentry>

        <!-- Entry for Add subpackage button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/package.gif"/>
          </imageobject></inlinemediaobject></guiicon> 
<literal>Add Package</literal>
</term>
          <listitem>
            <indexterm>
              <primary>Add Package</primary>
            </indexterm>
            <indexterm>
              <primary>New Package</primary>
            </indexterm>
            <indexterm>
              <primary>Create a new Package</primary>
            </indexterm>

            <para>
This creates a new Package (see <xref
              linkend="s1.ref.package"/>) within the model (which appears
            on no diagram), navigating immediately to the properties tab
            for that package.</para>

            <tip>
              <para>
While it can make sense to create Packages of the
            model this way, it is usually a lot clearer to create them
            within diagrams where you want them.</para></tip></listitem>
        </varlistentry>

        <!-- Entry for Delete button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/property_delete.gif"/>
          </imageobject></inlinemediaobject></guiicon>
            <literal>Delete</literal></term>

          <listitem>
            <para>
This tool is always downlighted, since. 
it is meaningless to delete the model!
<!-- TODO: Shouldn't it better be absent then? See issue ... -->
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <!-- Fields in the properties tab -->

    <sect2 id="s2.ref.model_property_fields">
      <title>Property Fields For The Model</title>

      <variablelist>

        <!-- Entry for Name -->

        <varlistentry>
          <term><literal>Name</literal></term>

          <listitem>
            <indexterm>
              <primary>Model Name</primary>
            </indexterm>
            <indexterm>
              <primary>Name</primary>
              <secondary>of Model</secondary>
            </indexterm>

            <para>Text box.
The name of the model.
The name of a
            model, like all packages, is by convention all lower
            case.</para>

          <note><para>The default name supplied to a new model by
            &argouml;, <literal>untitledModel</literal>, is thus erroneous
            and guarantees that &argouml; always starts up with at least
            one problem being reported by the design
            critics.</para></note></listitem>
        </varlistentry>

        <!-- Entry for Stereotype -->

        <varlistentry>
          <term><literal>Stereotype</literal></term>

          <listitem>
            <indexterm>
              <primary>Model Stereotype</primary>
            </indexterm>
            <indexterm>
              <primary>Stereotype</primary>
              <secondary>of Model</secondary>
            </indexterm>

            <para>Drop down selector.
Model is provided by default
            with the UML standard stereotypes for model
            (<literal>systemModel</literal> and
            <literal>metamodel</literal>) and package
            (<literal>facade</literal>, <literal>framework</literal>,
<literal>stub</literal>).
</para>
<!-- These are for some reason missing. Issue 2115.
as well as the stereotypes for models
            and packages in the UML standard profiles for
            <emphasis>software development process</emphasis>
            (<literal>use-case&nbsp;model</literal>,
            <literal>analysis&nbsp;model</literal>,
            <literal>design&nbsp;model</literal>,
            <literal>implementation&nbsp;model</literal>,
            <literal>use&nbsp;case&nbsp;package</literal> and
            <literal>analysis&nbsp;service&nbsp;package</literal>).
            &argouml; also provides the additional stereotypes,
            <literal>machine</literal>, <literal>organization</literal> and
            <literal>person</literal>.</para>

          <note><para>A number of standard stereotypes are currently
            missing from &argouml;: <literal>topLevel</literal> (from
            package), <literal>use&nbsp;case&nbsp;system</literal>,
            <literal>analysis&nbsp;system</literal>,
            <literal>analysis&nbsp;package</literal> (all three from the
            <emphasis>software development process</emphasis>
            profile).</para></note>
 -->
          <para>Stereotyping models is a useful thing, although it is of
            limited value in &argouml; where you have only a single
            model.</para></listitem>
        </varlistentry>

        <!-- Entry for NavStereo -->

        <varlistentry>
          <term><literal>Navigate Stereotype</literal></term>

          <listitem><para><guiicon><inlinemediaobject><imageobject><imagedata
              format="GIF" align="center"
              fileref="images/icons/navigate_stereotype.gif"/>
            </imageobject></inlinemediaobject></guiicon> icon. If a
              stereotype has been selected, this will navigate to the
              stereotype property panel (see <xref
                linkend="s1.ref.stereotype"/>).</para></listitem>
        </varlistentry>

        <!-- Entry for Namespace -->

        <varlistentry>
          <term><literal>Namespace</literal></term>

          <listitem>
            <indexterm>
              <primary>Model Namespace</primary>
            </indexterm>
            <indexterm>
              <primary>Namespace</primary>
              <secondary>of Model</secondary>
            </indexterm>

            <para>Text box. Records the namespace for the model. This
            is the package hierarchy. However since the model is at the top
            of the hierarchy in &argouml;, this box is always
            empty.</para></listitem>
<!-- ArgoUML V0.14 does should a non-relevent icon, though. See issue ... -->
        </varlistentry>

        <!-- Entry for Visibility -->

        <varlistentry>
          <term><literal>Visibility</literal></term>

          <listitem>
            <indexterm>
              <primary>Model Visibility</primary>
            </indexterm>
            <indexterm>
              <primary>Visibility</primary>
              <secondary>of Model</secondary>
            </indexterm>

            <para>Radio box,
with entries
<literal>public</literal>,
<literal>protected</literal>, and
<literal>private</literal>.
</para>

            <para>
Records the visibility for the model.
Since &argouml; only permits one model,
this has no meaningful use.
</para>
          </listitem>
        </varlistentry>

        <!-- Entry for Modifiers -->

        <varlistentry>
          <term><literal>Modifiers</literal></term>

          <listitem>
            <indexterm>
              <primary>Model Modifiers</primary>
            </indexterm>
            <indexterm>
              <primary>Modifiers</primary>
              <secondary>of Model</secondary>
            </indexterm>

            <para>Check box, with entries
<literal>Abstract</literal>,
<literal>Leaf</literal> and 
<literal>Root</literal>.
</para>
<!-- TODO: V0.14 shows the checkboxes centred, not left-aligned. See issue ... -->
            <itemizedlist>
              <listitem>
                <para><literal>abstract</literal>
is used to declare that this model cannot be instantiated,
but must always be specialized.
</para>

                <para>
The meaning of <literal>abstract</literal> 
applied to a model is not that clear. 
It might mean that the model contains
interfaces or
abstract classes 
without realizations.
Since &argouml; only permits one model, 
this is not a meaningful box to check.
</para>
              </listitem>

              <listitem>
                <para><literal>Leaf</literal>
indicates that this model can have no further subpackages, 
while <literal>root</literal> indicates it is the top level model.
</para>

                <para>
Within &argouml; <literal>root</literal> only
meaningfully applies to the Model,
since all packages sit within the model.
In the absence of the <literal>topLevel</literal> stereotype, 
this could be used to emphasize that the Model is at the top level.
</para>
              </listitem>
            </itemizedlist>
          </listitem>
        </varlistentry>

        <!-- Entry for Generalizations -->

        <varlistentry>
          <term><literal>Generalizations</literal></term>

          <listitem>
            <para>Text area.
Lists any model that <emphasis>generalizes</emphasis> this model.
</para>

            <note>
              <para>
Since there is only one model in ArgoUML there is no
sensible specialization or generalization that could be
created.
</para>
            </note>

          </listitem>
        </varlistentry>

        <!-- Entry for Specializations -->

        <varlistentry>
          <term><literal>Specializations</literal></term>

          <listitem>
            <para>Text box.
Lists any specialized model (i.e. for which this model is a generalization.
</para>

            <note>
              <para>
Since there is only one model in ArgoUML there is no
sensible specialization or generalization that could be
created.
</para>
            </note>

          </listitem>
        </varlistentry>

        <!-- Entry for Owned Elements -->

        <varlistentry>
          <term><literal>Owned Elements
          </literal></term>

          <listitem>
            <indexterm>
              <primary>Model Owned Elements</primary>
            </indexterm>
            <indexterm>
              <primary>Owned Elements</primary>
              <secondary>of Model</secondary>
            </indexterm>

            <para>Text area.
A listing of the top level
packages,
classes,
interfaces,
datatypes,
actors,
use cases,
associations,
generalizations, and
stereotypes
within the model.
</para>

            <para>
&Button1; double click on any of the artifacts yields
navigating to that artifact.
</para>

          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>
  </sect1>

  <!-- Datatype artifact. Sub-Artifact of a model or package. -->

  <sect1 id="s1.ref.datatype">
    <title>Datatype</title>

    <indexterm>
      <primary>Datatypes</primary>
    </indexterm>

    <para>Datatypes can be thought of as simple classes. They have no
      attributes, and any operations on them must have no side-effects. A
      useful analogy is primitive datatypes in a language like Java. The
      integer <quote>3</quote> stands on its own&mdash;it has no inner
      structure. There are operations (for example addition) on the integers,
      but when I perform <literal>3&nbsp;+&nbsp;4</literal> the result is a new
      number, <quote>3</quote> and <quote>4</quote> are unchanged by the
      exercise.</para>

    <para>Within UML&nbsp;1.3, <literal>DataType</literal> is a sub-class of
      the <literal>Classifier</literal> metaclass. It embraces the predefined
      primitive types (<literal>byte</literal>, <literal>char</literal>,
      <literal>double</literal>, <literal>float</literal>,
      <literal>int</literal>, <literal>long</literal> and <literal>
      short</literal>), the predefined enumeration, <literal>boolean</literal>
      and user defined <emphasis>enumeration types</emphasis>.</para>

    <note><para>Also <literal>void</literal> is implemented as a 
      datatype within &argouml;</para></note>

<!-- Issue 1761, (Issue 2114).-->
<!-- TODO: The description below was true in earlier versions of ArgoUML. 
How does it work now? -->
<!--    <para>
Within &argouml; new datatypes may be created using the <literal>New
      datatype</literal> button on the property tabs of the model and packages
      (in which case the new datatype is restricted in scope to the
      package), as well as the properties tab for datatype..</para>
 -->
    <caution><para>
Within &argouml; 0.14 new datatypes may be created using the <literal>New
      datatype</literal> button on the property tabs of existing datatypes only.
      This function really should be present on the property tabs of the model
      and packages, too.
      <!-- TODO: See issue ... -->
    </para></caution>
    <tip><para>
      As a consequence, when starting a new model, a trick is needed to create
      the first datatype. The easiest way is to create an operation (on a class)
      and select the return parameter, and set it to any predefined datatype,
      e.g. <literal>int</literal>. From this moment on, the datatype
      <literal>int</literal> will be present in the explorer 
      and its property tabs contains the <literal>New Datatype</literal> button.
    </para></tip>
      
    <note>
      <para>
UML&nbsp;1.3 allows user defined datatypes to be placed on
class diagrams. This is not permitted in &argouml;.
</para>
    </note>

    <!-- Datatype details tabs -->

    <sect2>
      <title>Datatype Details Tabs</title>

      <indexterm>
        <primary>Datatype Details Tabs</primary>
      </indexterm>
      <indexterm>
        <primary>Details Tabs</primary>
        <secondary>for Datatype</secondary>
      </indexterm>

      <para>The details tabs that are active for datatypes are as
        follows.</para>

      <variablelist>

        <!-- Entry for ToDoItem tab -->

        <varlistentry>
          <term><literal>ToDoItem</literal></term>

          <listitem><para>Standard tab.</para></listitem>
        </varlistentry>

        <!-- Entry for Properties tab -->

        <varlistentry>
          <term><literal>Properties</literal></term>

          <listitem>

            <indexterm>
              <primary>Datatype Properties</primary>
            </indexterm>
            <indexterm>
              <primary>Properties</primary>
              <secondary>for Datatype</secondary>
            </indexterm>

          <para>See <xref
              linkend="s2.ref.datatype_property_toolbar"/> and <xref
              linkend="s2.ref.datatype_property_fields"/>
            below.</para></listitem>
        </varlistentry>

        <!-- Entry for Documentation tab -->

        <varlistentry>
          <term><literal>Documentation</literal></term>

          <listitem>
            <para>Standard tab.
See <xref linkend="s2.ref.documentation_tab"/>.
</para>
          </listitem>
        </varlistentry>

        <!-- Entry for Style tab -->

<!--        <varlistentry>
          <term><literal>Style</literal></term>

          <listitem><para>Standard tab, but with no effect. In a future
            version of &argouml; the <literal>Attributes</literal> and
            <literal>Operations</literal> tick boxes will control the
            display of literals and operations defined for the
            datatype.</para></listitem>
        </varlistentry>
-->
        <!-- Entry for Source tab -->

        <varlistentry>
          <term><literal>Source</literal></term>

          <listitem><para>Standard tab. Unused. One would expect a class
             declaration for the new datatype to support code
             generation.</para></listitem>
<!-- TOTDO: See enhancement issue ... -->
        </varlistentry>

        <!-- Entry for Constraints tab -->

        <varlistentry>
          <term><literal>Constraints</literal></term>

          <listitem><para>Standard tab. 
This tab is downlighted, since constraints are not defined for an 
<literal>Event</literal> within the &argouml; metamodel.
          </para></listitem>
        </varlistentry>

        <!-- Entry for Tagged Values tab -->

        <varlistentry>
          <term><literal>Tagged Values</literal></term>

          <listitem>
            <indexterm>
              <primary>Datatype Tagged Values</primary>
            </indexterm>
            <indexterm>
              <primary>Tagged Values</primary>
              <secondary>for Datatype</secondary>
            </indexterm>

            <para>Standard tab.
In the UML metamodel,
            <literal>Datatype</literal> has the following standard tagged
            values defined.</para>

<!-- TODO: All these below are not available. See issue ... -->
            <itemizedlist>
              <listitem><para><literal>persistence</literal> (from the
                superclass, <literal>Classifier</literal>). Values
                <literal>transitory</literal>, indicating state is
                destroyed when an instance is destroyed or
                <literal>persistent</literal>, marking state is
                preserved when an instance is destroyed.</para>

              <tip><para>Since user defined datatypes are enumerations,
                they have no state to preserve, and the value of this
                tagged value is irrelevant.</para></tip></listitem>

              <listitem><para><literal>semantics</literal> (from the
                superclass, <literal>Classifier</literal>). The value is a
                specification of the semantics of the
                datatype.</para></listitem>

              <listitem><para><literal>derived</literal> (from the
                superclass, <literal>ModelElement</literal>). Values
                <literal>true</literal>, meaning the class is
                redundant&mdash;it can be formally derived from other
                elements, or <literal>false</literal> meaning it
                cannot.</para>

              <tip><para>While formally available, a derived datatype
                does not have an obvious value, and so datatypes should
                always be marked with
                <literal>derived=false</literal>.</para></tip></listitem>
            </itemizedlist>

          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <!-- Datatype properties -->

    <sect2 id="s2.ref.datatype_property_toolbar">
      <title>Datatype Property Toolbar</title>

      <indexterm>
        <primary>Datatype Property Toolbar</primary>
      </indexterm>
      <indexterm>
        <primary>Property Toolbar</primary>
        <secondary>for Datatype</secondary>
      </indexterm>

      <variablelist>

        <!-- Entry for Go up button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/navigate_up.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Go
            up</literal></term>

          <listitem><para>Navigate up through the package
            structure.</para></listitem>
        </varlistentry>

        <!-- Entry for New datatype button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/datatype.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>New
            datatype</literal></term>

          <listitem><para>This creates a new datatype (see <xref
              linkend="s1.ref.class_class"/>) within the same package as
              the current datatype.</para>

          <tip><para>While it can make sense to create datatypes this way,
            it can be clearer to create them within the package or model
            where you want them.</para></tip></listitem>
        </varlistentry>

        <!-- Entry for Add enumeration literal button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/enumeration_literal.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Add enumeration
            literal</literal></term>

          <listitem><para>This creates a new enumeration literal within the
            datatype, navigating immediately to the properties tab for that
            literal.</para>

          <caution><para>&argouml; does not actually have a separate
            concept of a literal. The navigation will navigate to the
            property sheet for an attribute of a class (see <xref
            linkend="s1.ref.attribute"/>). When defining a literal, all
            that matters is its name. Other parts of the attribute property
sheet should be ignored.
Also the name of the literal must obey the rules for an Attribute
or a critic will fire.
<!-- TODO: See enhancement issue ... -->
</para>
            </caution>
          </listitem>
        </varlistentry>

        <!-- Entry for Delete button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/property_delete.gif"/>
          </imageobject></inlinemediaobject></guiicon>
            <literal>Delete</literal></term>

          <listitem><para>This deletes the datatype from the
            model.</para></listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <!-- Fields in the properties tab -->

    <sect2 id="s2.ref.datatype_property_fields">
      <title>Property Fields For Datatype</title>

      <indexterm>
        <primary>Datatype Property Fields</primary>
      </indexterm>
      <indexterm>
        <primary>Property Fields</primary>
        <secondary>for Datatype</secondary>
      </indexterm>

      <variablelist>

        <!-- Entry for Name -->

        <varlistentry>
          <term><literal>Name</literal></term>

          <listitem>
            <indexterm>
              <primary>Datatype Name</primary>
            </indexterm>
            <indexterm>
              <primary>Name</primary>
              <secondary>for Datatype</secondary>
            </indexterm>

            <para>Text box.
 The name of the datatype.
The primitive
            datatypes all have lower case names, but there is no formal
            convention.</para>

          <note>
              <para>
The default name supplied for a newly created datatype
is the empty string <quote></quote>. 
Datatypes with empty string names
will appear with the name <literal>(anon Datatype)</literal> 
in the explorer.
</para>
            </note>
          </listitem>
        </varlistentry>

        <!-- Entry for Stereotype -->

        <varlistentry>
          <term><literal>Stereotype</literal></term>

          <listitem>
            <indexterm>
              <primary>Datatype Stereotype</primary>
            </indexterm>
            <indexterm>
              <primary>Stereotype</primary>
              <secondary>for Datatype</secondary>
            </indexterm>

            <para>Drop down selector.
Package is provided by default
            with the UML standard stereotypes for classifier
            (<literal>metaclass</literal>, <literal>powertype</literal>,
            <literal>process</literal>, <literal>thread</literal> and
<literal>utility</literal>).
</para>

<!-- Issue 2112
          <para>Most important of all, &argouml; provides the stereotype
            <literal>enumeration</literal> for use with user defined
            enumeration data types.</para>
 -->

          <tip><para>The stereotype <literal>enumeration</literal>
          should always be used
          for any created enumeration datatypes.</para></tip>

            <caution>
              <para>
<!-- Issue 2112 -->
In version 0.14 the <literal>enumeration</literal> must be created
before it can be used.
</para>
            </caution>
          </listitem>

        </varlistentry>

        <!-- Entry for NavStereo -->

        <varlistentry>
          <term><literal>Navigate Stereotype</literal></term>

          <listitem><para><guiicon><inlinemediaobject><imageobject><imagedata
              format="GIF" align="center"
              fileref="images/icons/navigate_stereotype.gif"/>
            </imageobject></inlinemediaobject></guiicon> icon. If a
              stereotype has been selected, this will navigate to the
              stereotype property panel (see <xref
                linkend="s1.ref.stereotype"/>).</para></listitem>
        </varlistentry>

        <!-- Entry for Namespace -->

        <varlistentry>
          <term><literal>Namespace</literal></term>

          <listitem>
            <para>Drop down selector.
Allows changeing the namespace for the datatype.
This is the package hierarchy.
</para>
          </listitem>
        </varlistentry>

        <!-- Entry for Modifiers -->

        <varlistentry>
          <term><literal>Modifiers</literal></term>

          <listitem>
            <indexterm>
              <primary>Datatype Modifiers</primary>
            </indexterm>
            <indexterm>
              <primary>Modifiers</primary>
              <secondary>for Datatype</secondary>
            </indexterm>

            <para>Check box, with entries 
<!-- Issue 2110.
        <literal>public</literal>, 
 -->
<literal>Abstract</literal>, 
<literal>Leaf</literal> and
<literal>Root</literal>.
</para>

            <itemizedlist>
<!-- Issue 2110.
            <listitem><para><literal>public</literal> has identical meaning
              to the <literal>public</literal> declaration in Java. It
              indicates whether this datatype is restricted to use in its
              own package (the default) or can be used by
              anyone.</para></listitem>
 -->
              <listitem>
                <para><literal>Abstract</literal>
is used to declare that this datatype cannot be instantiated,
but must always be specialized.
</para>

                <note>
                  <para>
&argouml; provides no mechanism for specializing
datatypes, so this check box is of little use.
</para>
                </note>
              </listitem>

              <listitem>
                <para><literal>Leaf</literal>
indicates that this datatype can have no further sub-types, 
while <literal>Root</literal> indicates it is a top level datatype.
</para>

                <tip>
                  <para>
In the absence of specialization of datatypes within
&argouml; these have little value.
In effect all datatypes are both
<literal>Root</literal> and
<literal>Final</literal>
</para>
                </tip>
              </listitem>
            </itemizedlist>
          </listitem>
        </varlistentry>

        <!-- Entry for Generalizations -->

        <varlistentry>
          <term><literal>Generalizations</literal></term>

          <listitem><para>Text area. Lists any datatype that
            <emphasis>generalizes</emphasis> this datatype.</para>

          <caution><para>It is not clear that generalizing datatypes makes much
            sense.</para></caution>
<!-- TODO: Shouldn't it be removed then? See enhancement issue ... -->
            
<!-- Issue 2117
          <para>&Button1; click navigates to the generalization and opens
            its property tab.</para>

          <para>&Button2; click yields a drop down menu with five
            entries</para>

          <itemizedlist>
            <listitem><para><literal>Open</literal>. Navigate to the
              selected generalization.</para></listitem>

            <listitem><para><literal>Add</literal>. Add a new
              generalization. Note that the new generalization is added to
              the model, but not the diagram. You will need to find it in
              the explorer and add it from there.</para>

            <tip><para>It is far easier to add generalizations by drawing
              them on the relevant diagram in the editing
              pane.</para></tip></listitem>

            <listitem><para><literal>Delete</literal>. The link from the
              generalization to the datatype (<emphasis>but not the
              generalization itself</emphasis>) is removed.</para>

            <tip><para>This <emphasis>does not</emphasis> remove the
              generalization from the model or the diagram, leading to
              potentially very confusing diagrams. It is usually far easier
              to remove generalizations from the editing
              pane.</para></tip></listitem>

            <listitem><para><literal>Move Up</literal>. Only available where
              there are two or more generalizations listed, and the
              generalization selected is not at the top. It is moved up
              one.</para></listitem>

            <listitem><para><literal>Move Down</literal>. Only available where
              there are two or more generalizations listed, and the
              generalization selected is not at the bottom. It is moved down
one.
</para>
              </listitem> 
            </itemizedlist>
 -->
          </listitem>
        </varlistentry>

        <!-- Entry for Specializations -->

        <varlistentry>
          <term><literal>Specializations</literal></term>

          <listitem><para>Text box. Lists any specialized datatype (i.e. for
            which this datatype is a generalization.</para>

          <caution><para>It is not clear that specializing datatypes makes much
            sense.</para></caution>
<!-- TODO: Shouldn't it be removed then? See enhancement issue ... -->


<!-- Issue 2117
          <para>&button1; click navigates to the generalization and opens
            its property tab.</para>

          <para>&Button2; click yields a drop down menu with five
            entries</para>

          <itemizedlist>
            <listitem><para><literal>Open</literal>. Navigate to the
              selected generalization.</para></listitem>

            <listitem><para><literal>Add</literal>. Add a new
              generalization. Note that the new generalization is added to
              the model, but not the diagram.</para>

            <tip><para>It is far easier to add generalizations by drawing
              them on the relevant diagram in the editing
              pane.</para></tip></listitem>

            <listitem><para><literal>Delete</literal>. The link from the
              generalization to the datatype (<emphasis>but not the
              generalization itself</emphasis>) is removed.</para>

            <tip><para>This <emphasis>does not</emphasis> remove the
              generalization from the model or the diagram, leading to
              potentially very confusing diagrams. It is usually far easier
              to remove generalizations from the editing
              pane.</para></tip></listitem>

            <listitem><para><literal>Move Up</literal>. Only available where
              there are two or more specializations listed, and the
              specialization selected is not at the top. It is moved up
              one.</para></listitem>

            <listitem><para><literal>Move Down</literal>. Only available where
              there are two or more specializations listed, and the
              specialization selected is not at the bottom. It is moved down
one.
</para>
              </listitem>
            </itemizedlist>
-->
          </listitem>
        </varlistentry>

        <!-- Entry for Dependency -->

        <varlistentry>
          <term><literal>Dependency</literal></term>

          <listitem>
            <para>Text box.
Lists any abstract classes or interfaces realized by this datatype. 
By default this is empty.
</para> 

            <caution>
              <para>
It is not clear that Dependency datatypes makes much sence.
</para>
            </caution>
<!-- TODO: Shouldn't it be removed then? See enhancement issue ... -->


<!-- Issue: 2117
          <para>&Button1; click navigates to any entry (but see the warning
            below), &button2; gives a pop up menu with five entries.</para>

          <itemizedlist>
            <listitem><para><literal>Open</literal>. Where an abstraction
              dependency exists, navigate to it (but see warning
              below).</para></listitem>

            <listitem><para><literal>Add</literal>. Add a new abstraction
              dependency.</para>

            <note><para>&argouml; does not navigate to the new abstraction,
              and this field shows the name [empty], whatever name you
              choose to give the abstraction.</para></note>

            <tip><para>While adding abstractions is possible, only the
              supplier end is created, and there is no way to supply the
              client end. The value of such abstractions is therefore
              minimal.</para></tip></listitem>

            <listitem><para><literal>Delete</literal>. Where an abstraction
              has been added this removes it completely from the
              model.</para></listitem>

            <listitem><para><literal>Move Up</literal>. Only available where
              there are two or more abstractions, and the abstraction selected
              is not at the top. It is moved up one.</para></listitem>

            <listitem><para><literal>Move Down</literal>. Only available where
              there are two or more abstractions listed, and the abstraction
              selected is not at the bottom. It is moved down
              one.</para></listitem>
          </itemizedlist>

          <tip><para>In principle a datatype could realize some
            other artifact, but it would be unusual. Best
            avoided.</para></tip>

          <warning><para>&Button1; click on the default entry navigates to
            the most recently selected to-do item in the to-do pane. This
            seems to be a bug in &argouml;.</para></warning>
-->
          </listitem>
        </varlistentry>

        <!-- Entry for Operations -->

        <varlistentry>
          <term><literal>Operations</literal></term>

          <listitem>
            <para>Text area. Lists all the operations defined on this
datatype.
&Button1; double click navigates to the selected operation.
</para>
<!-- Issue: 637
            &button2; click brings up a pop up menu with five
            entries.</para>

          <itemizedlist>
            <listitem><para><literal>Open</literal>. Navigate to the
              selected operation.</para></listitem>

            <listitem><para><literal>Add</literal>. Add a new
              operation and navigate to it.</para></listitem>

            <listitem><para><literal>Delete</literal>. Removes the selected
              operation from the model.</para></listitem>

            <listitem><para><literal>Move Up</literal>. Only available where
              there are two or more operations, and the operation selected is
              not at the top. It is moved up one.</para></listitem>

            <listitem><para><literal>Move Down</literal>. Only available where
              there are two or more operations listed, and the operation
              selected is not at the bottom. It is moved down
              one.</para></listitem>
          </itemizedlist>
 -->
          <para>See <xref linkend="s1.ref.operation"/> for details of
            operations.</para>

          <para>Since V0.14 does not provide in any means to create 
          operations of datatypes, this field is not useful.
<!-- TODO: See enhancement issue ... -->
          </para>
<!--      <caution><para>&argouml; treats all operations as equivalent. Any
            operations created here will use the same mechanism as
            operations for classes. Remember that operations on datatypes
            must have no side effects (they are read-only). This means the
            <literal>query</literal> modifier <emphasis>must</emphasis> be
            checked for all operations.</para></caution>
-->
            </listitem>
        </varlistentry>


        <!-- Entry for literals -->

        <varlistentry>
          <term><literal>Literals</literal></term>

          <listitem>
            <indexterm>
              <primary>Datatype Literals</primary>
            </indexterm>
            <indexterm>
              <primary>Literals</primary>
              <secondary>for Datatype</secondary>
            </indexterm>

            <para>Text area.
Lists all the enumeration literals defined for this
            datatype. &Button1; click navigates to the selected literal,
            &button2; click brings up a pop up menu with three
            entries.</para>

            <itemizedlist>
            <listitem><para><literal>Open</literal>. Navigate to the
              selected literal.</para></listitem>

              <listitem>
                <para><literal>New</literal>.
Add a new literal and navigate to it.
</para>
              </listitem>

            <listitem><para><literal>Delete</literal>. Removes the selected
              literal from the model.</para></listitem>

<!-- Issue 2120
            <listitem><para><literal>Move Up</literal>. Only available where
              there are two or more literals, and the literal selected is not
              at the top. It is moved up one.</para></listitem>

            <listitem><para><literal>Move Down</literal>. Only available where
              there are two or more literals listed, and the literal selected
              is not at the bottom. It is moved down one.</para></listitem>
 -->
          </itemizedlist>

          <caution><para>&argouml; does not actually have a separate
            concept of a literal. The navigations listed above will all
            navigate to the property sheet for an attribute of a class (see
            <xref linkend="s1.ref.attribute"/>). When defining a literal,
            all that matters is its name. Other parts of the attribute
            property sheet should be ignored.</para></caution>
<!-- TODO: Shouldn't we have this seperate concept? See enhancement issue ... -->
          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>
  </sect1>

  <!-- Stereotypes -->

  <sect1 id="s1.ref.stereotype">
    <title>Stereotypes</title>

    <indexterm>
      <primary>Stereotypes</primary>
    </indexterm>

    <para>Stereotypes are the main extension mechanism of UML, providing a way
      to derive specializations of the standard
      metaclasses. <literal>Stereotype</literal> is a sub-class of
      <literal>GeneralizableElement</literal> in the UML metamodel. Stereotypes
      are supplemented by <emphasis>constraints</emphasis> and <emphasis>tagged
      values</emphasis>.</para>

    <para>
New stereotypes are added from 
<!-- Issue 1761, (Issue: 2121)
the model property tab (see <xref linkend="s1.ref.model"/>, 
the package property tab (see <xref linkend="s1.ref.package"/>) or 
-->
the stereotype property tab itself (see
        below). Properties of existing stereotypes can be reached by selecting
        the property tab for any artifact with that stereotype and using the
        navstereo button (<guiicon><inlinemediaobject><imageobject><imagedata
          format="GIF" align="center"
          fileref="images/icons/navigate_stereotype.gif"/>
        </imageobject></inlinemediaobject></guiicon>) within the property
        tab.</para>

    <!-- Stereotype details tabs -->

    <sect2>
      <title>Stereotype Details Tabs</title>

      <indexterm>
        <primary>Stereotype Details Tabs</primary>
      </indexterm>
      <indexterm>
        <primary>Details Tabs</primary>
        <secondary>for Stereotype</secondary>
      </indexterm>

      <para>The details tabs that are active for stereotypes are as
        follows.</para>
<!-- We normally do not mention this in the other chapters
      <note><para>The <literal>Style</literal> tab is grayed out, since a
        stereotype has no representation on a diagram.</para></note>
-->
      <variablelist>

        <!-- Entry for ToDoItem tab -->

        <varlistentry>
          <term><literal>ToDoItem</literal></term>

          <listitem><para>Standard tab.</para></listitem>
        </varlistentry>

        <!-- Entry for Properties tab -->

        <varlistentry>
          <term><literal>Properties</literal></term>

          <listitem><para>See <xref
              linkend="s2.ref.stereotype_property_toolbar"/> and <xref
              linkend="s2.ref.stereotype_property_fields"/>
            below.</para></listitem>
        </varlistentry>

        <!-- Entry for Documentation tab -->

        <varlistentry>
          <term><literal>Documentation</literal></term>

          <listitem>
            <para>Standard tab.
See <xref linkend="s2.ref.documentation_tab"/>.
</para>
          </listitem>
        </varlistentry>

        <!-- Entry for Source tab -->

        <varlistentry>
          <term><literal>Source</literal></term>

          <listitem><para>Standard tab. This contains the representation of
            the stereotype on diagrams (its name between &laquo; and
            &raquo;).</para>

          <warning><para>You can edit this entry, but it has no effect and
            when you return to the entry it will be restored to its
            original value.</para></warning></listitem>
        </varlistentry>

        <!-- Entry for Constraints tab -->

        <varlistentry>
          <term><literal>Constraints</literal></term>

          <listitem><para>Standard tab. 
This tab is downlighted, since constraints are not defined for an 
<literal>Stereotype</literal> within the &argouml; metamodel.
            </para>

<!-- TODO: check Issue 1805 -->
<!--            <caution>
              <para>
It is currently not possible to create constraints for Stereotypes
so the Constraints tab is not active.
</para>
            </caution>
-->
          </listitem>

        </varlistentry>

        <!-- Entry for Tagged Values tab -->

        <varlistentry>
          <term><literal>Tagged Values</literal></term>

          <listitem><para>Standard tab. In the UML metamodel,
            <literal>Stereotype</literal> has the following standard tagged
            values defined.</para>

            <itemizedlist>
              <listitem><para><literal>derived</literal> (from the
                superclass, <literal>ModelElement</literal>). Values
                <literal>true</literal>, meaning the class is
                redundant&mdash;it can be formally derived from other
                elements, or <literal>false</literal> meaning it
                cannot.</para>

              <note><para>This indicates any element with this stereotype
                has the <literal>derived</literal> tag set
                accordingly.</para></note></listitem>
            </itemizedlist>

            <caution><para>Tagged values for a stereotype are rather
              different to those for elements in the UML core architecture,
              in that they apply to all artifacts to which the stereotype
              is applied, <emphasis>not</emphasis> just the stereotype
              itself.</para></caution></listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <!-- Stereotype properties -->

    <sect2 id="s2.ref.stereotype_property_toolbar">
      <title>Stereotype Property Toolbar</title>

      <indexterm>
        <primary>Stereotype Property Toolbar</primary>
      </indexterm>
      <indexterm>
        <primary>Property Toolbar</primary>
        <secondary>for Stereotype</secondary>
      </indexterm>

      <variablelist>

        <!-- Entry for Go up button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/navigate_up.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Go
            up</literal></term>

          <listitem><para>Navigate up through the package structure of the
            model.</para></listitem>
        </varlistentry>

        <!-- Entry for Add stereotype button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/stereotype.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Add
            stereotype</literal></term>

          <listitem><para>This creates a new stereotype (see <xref
              linkend="s1.ref.stereotype"/>) within the model (which
              appears on no diagram), navigating immediately to the
              properties tab for that stereotype.</para></listitem>
        </varlistentry>

        <!-- Entry for Delete button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/property_delete.gif"/>
          </imageobject></inlinemediaobject></guiicon>
            <literal>Delete</literal></term>

          <listitem><para>This deletes the stereotype from the
            model.</para></listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <!-- Fields in the properties tab -->

    <sect2 id="s2.ref.stereotype_property_fields">
      <title>Property Fields For Stereotype</title>

      <indexterm>
        <primary>Stereotype Property Fields</primary>
      </indexterm>
      <indexterm>
        <primary>Property Fields</primary>
        <secondary>for Stereotype</secondary>
      </indexterm>
 
     <variablelist>

        <!-- Entry for Name -->

        <varlistentry>
          <term><literal>Name</literal></term>

          <listitem>
            <indexterm>
              <primary>Stereotype Name</primary>
            </indexterm>
            <indexterm>
              <primary>Name</primary>
              <secondary>for Stereotype</secondary>
            </indexterm>

            <para>
Text box.
The name of the stereotype.
There is no
            convention for naming stereotypes, beyond starting them with a
            lower case letter. Even the standard UML stereotypes vary
            between all lower case (e.g. <literal>metamodel</literal>),
            bumpy caps (e.g. <literal>systemModel</literal>) and space
            separated (e.g. <literal>object model</literal>).</para>

          <note><para>&argouml; does not enforce any naming convention for
            stereotypes</para></note></listitem>
        </varlistentry>

        <!-- Entry for Base Class -->

        <varlistentry>
          <term><literal>Base Class</literal></term>

          <listitem>
            <indexterm>
              <primary>Stereotype Base Class</primary>
            </indexterm>
            <indexterm>
              <primary>Base Class</primary>
              <secondary>for Stereotype</secondary>
            </indexterm>

            <para>
Drop down selector.
Any stereotype must be derived
            from one of the metaclasses in the UML metamodel
            <literal>Abstraction</literal>, <literal>Association</literal>,
            <literal>AssociationEnd</literal>,
            <literal>BehavioralFeature</literal>,
            <literal>CallEvent</literal>, <literal>Class</literal>,
            <literal>Classifier</literal>,
            <literal>Collaboration</literal>, <literal>Comment</literal>,
            <literal>Component</literal>, <literal>Constraint</literal>,
            <literal>DataType</literal>, <literal>Dependency</literal>,
            <literal>Flow</literal>, <literal>Generalization</literal>,
<!-- TODO: Check for completeness. 
E.g. Link is not listed here, but implemented. -->
            <literal>Model</literal>, <literal>ModelElement</literal>,
            <literal>ObjectFlowState</literal>, <literal>Package</literal>,
            <literal>Permission</literal>, <literal>Subsystem</literal> and
            <literal>Usage</literal>) or the artifact classes
            that derive from them. The stereotype will then
            be available to artifacts that derive from that same metaclass
            or that artifact.</para></listitem>
        </varlistentry>

        <!-- Entry for Namespace -->

        <varlistentry>
          <term><literal>Namespace</literal></term>

          <listitem>
            <indexterm>
              <primary>Stereotype Namespace</primary>
            </indexterm>
            <indexterm>
              <primary>Namespace</primary>
              <secondary>for Stereotype</secondary>
            </indexterm>

            <para>
Drop down selector.
Records the namespace for the
<!-- TODO: This is fixed to the model in V0.14. Is that correct? -->
            stereotype. This is the package hierarchy.</para>
          </listitem>
        </varlistentry>

        <!-- Entry for Modifiers -->

        <varlistentry>
          <term><literal>Modifiers</literal></term>

          <listitem>
            <indexterm>
              <primary>Stereotype Modifiers</primary>
            </indexterm>
            <indexterm>
              <primary>Modifiers</primary>
              <secondary>for Stereotype</secondary>
            </indexterm>

            <para>Check box, with entries
<literal>abstract</literal>,
<literal>final</literal> and
<literal>root</literal>.
</para>

          <itemizedlist>
            <listitem><para><literal>abstract</literal> is used to declare
              that artifacts that use this stereotype cannot be
              instantiated, but must always be
              specialized.</para></listitem>

              <listitem>
                <para><literal>final</literal> indicates that
              artifacts that use this stereotype can have no further
              sub-types, while <literal>root</literal> indicates it is a
              top level artifact.</para></listitem>
          </itemizedlist>

          <caution><para>Remember that these modifiers apply to the
            artifacts using the stereotype, not just the
            stereotype.</para></caution>

          <warning><para>&argouml; neither imposes, nor checks that artifacts
            using a stereotype adopt the stereotype's
            modifiers.</para></warning></listitem>
        </varlistentry>

        <!-- Entry for Generalizations -->

        <varlistentry>
          <term><literal>Generalizations</literal></term>

          <listitem><para>Text area. Lists any stereotype that
            <emphasis>generalizes</emphasis> this stereotype.</para>

          <caution><para>It is not clear that generalizing stereotypes makes
            much sense.</para></caution>

          <para>&Button1; click navigates to the generalization and opens
            its property tab.</para>

          <para>&Button2; click yields a drop down menu with three
            entries</para>

          <itemizedlist>
            <listitem><para><literal>Open</literal>. Navigate to the
              selected generalization.</para></listitem>

            <listitem><para><literal>Add</literal>. Add a new
              generalization. The "Add/Remove Generalizations" dialog box opens.
<!-- TODO: Where is this described? Provide a link to it! -->
              </para>

<!-- TODO: Is this nonsense?
            <tip><para>It is far easier to add generalizations by drawing
              them on the relevant diagram in the editing
              pane.</para></tip>
-->
            </listitem>

            <listitem><para><literal>Delete</literal>. The 
              generalization 
              is deleted.
              </para>
            </listitem>

            </itemizedlist>
          </listitem>
        </varlistentry>

        <!-- Entry for Specializations -->

        <varlistentry>
          <term><literal>Specializations</literal></term>

          <listitem><para>Text box. Lists any specialized stereotype (i.e. for
            which this stereotype is a generalization.</para>

          <caution><para>It is not clear that specializing stereotypes makes
            much sense.</para></caution>

          <para>&button1; click navigates to the specialised stereotype and opens
            its property tab.</para>

          <para>&Button2; click yields a drop down menu with three
            entries</para>

          <itemizedlist>
            <listitem><para><literal>Open</literal>. Navigate to the
              selected specialization.</para></listitem>

            <listitem><para><literal>Add</literal>. Add a new
              specialization. The "Add/Remove Specializations" dialog box opens.
<!-- TODO: Where is this described? Provide a link to it! -->
              </para></listitem>

             <listitem><para><literal>Delete</literal>. The link
              specialization
              is deleted.</para>

             </listitem>

            </itemizedlist>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>
  </sect1>

  <!-- Diagrams -->

  <sect1>
    <title>&argouml; Diagrams</title>

    <indexterm>
      <primary>Diagrams</primary>
    </indexterm>

    <para>&argouml; supports all eight primary types of diagrams defined by
      UML 1.3: i) use case; ii) class; iii) sequence; iv) state; v)
      collaboration; vi) activity; vii) component and viii) deployment. They
      are created using the <literal>Create Diagram</literal> drop down menu
      (see <xref linkend="s1.ref.create.diagram.menu"/>).</para>

    <note><para>&argouml; uses its deployment diagram to create both UML 1.3
      component and deployment diagrams.</para></note>

    <caution><para>State and activity diagrams are associated with a particular
      class, and can only be created when a class has been selected. 
    </para></caution>

    <warning><para>In version 0.14, there is no support for the UML 1.3 object diagram
      as a variant of the class diagram. However, it is possible to create simple object
      diagrams within the &argouml; deployment diagram.</para></warning>

    <caution>
      <para>
Up until the version 0.14 the sequence diagrams were implemented 
incorrectly w.r.t. the UML model.
For this reason it is in 0.14 no longer possible to create sequence
diagrams.
In an upcoming release correctly implemented sequence diagrams 
will be available.
</para>
    </caution>

    <!-- The details tabs -->

    <sect2>
      <title>Diagram Details Tabs</title>

      <indexterm>
        <primary>Diagram Details Tabs</primary>
      </indexterm>
      <indexterm>
        <primary>Details Tabs</primary>
        <secondary>for Diagrams</secondary>
      </indexterm>

      <para>The details tabs that are active for diagrams are as
        follows.</para>

      <variablelist>

      <!-- Entry for ToDoItem tab -->

      <varlistentry>
        <term><literal>ToDoItem</literal></term>

        <listitem><para>Standard tab.</para></listitem>
      </varlistentry>

      <!-- Entry for Properties tab -->

      <varlistentry>
        <term><literal>Properties</literal></term>

        <listitem>
            <para>See 
<xref linkend="s2.ref.diagram_property_fields"/>
          below.</para></listitem>
      </varlistentry>

      </variablelist>

    </sect2>

    <!-- Fields in the properties tab -->

    <sect2 id="s2.ref.diagram_property_fields">
      <title>Property Fields For Diagram</title>

      <indexterm>
        <primary>Diagram Property Fields</primary>
      </indexterm>
      <indexterm>
        <primary>Property Fields</primary>
        <secondary>for Diagrams</secondary>
      </indexterm>

      <variablelist>

        <!-- Entry for Name -->

        <varlistentry>
          <term><literal>Name</literal></term>

          <listitem>
            <indexterm>
              <primary>Diagram Name</primary>
            </indexterm>
            <indexterm>
              <primary>Name</primary>
              <secondary>for Diagrams</secondary>
            </indexterm>

            <para>
The name of the diagram. 
There are no
            conventions for naming diagrams. By default, &argouml; uses
            the (space separated) diagram name and a sequence number,
            thus <literal>use&nbsp;case&nbsp;diagram&nbsp;1</literal>.
          </para></listitem>
        </varlistentry>
      </variablelist>
    </sect2>
  </sect1>

</chapter>

<!-- Local stuff for Emacs - please do not delete

Local Variables:
mode: xml
sgml-doctype: "argomanual.xml"
sgml-parent-document: ("argomanual.xml" "chapter" nil)
sgml-validate-command: "nsgmls -wxml -sv ../docbook-setup/xml.dcl \
  argomanual.xml"
indent-tabs-mode: nil
End:

-->
