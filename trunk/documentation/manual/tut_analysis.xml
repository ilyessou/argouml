<?xml version="1.0" encoding="ISO-8859-1"?>

<!--

This is the Analysis tutorial chapter of the User Manual.

Modifications
=============

 4 Dec 2001:  Jeremy Bennett. Broken out as a separate section from the
              original manual by Alejandro, Phillipe and Andreas.

-->

<chapter id="ch.tut.analysis">
  <title>Analysis</title>

  <sect1>
    <title>Introduction</title>

    <para>Analysis is the process of taking the <quote>customer</quote>
      requirements and re-casting them in the language of, and from the
      perspective of, a putative solution.</para>

    <para>We are not actually trying the flesh out the detailed solution at
      this stage. That occurs in the <emphasis>Design Phase</emphasis> (see
      <xref linkend="ch.tut.design"/>).</para>

    <para>Unlike the boundary between Requirements and Analysis Phases, the
      boundary between Analysis and Design Phases is inherently blurred. The
      key is that analysis should define the solution no further than is
      necessary to specify the requirements in the language of the
      solution. The artifacts in Analysis generally represent a high level of
      abstraction.</para>

    <para>Once again the <emphasis>recursive</emphasis>, and
      <emphasis>iterative</emphasis> nature of our process means we will come
      back to the Analysis phase many times in the future.</para>
  </sect1>

  <!-- Take the reader through the analysis process. This will be quite high
       level in the current version of the document. -->

  <sect1>
    <title>The Analysis Process</title>

    <remark>Include CRC cards. To be written&hellip;</remark>

    <sect2>
      <title>Output of the Analysis Process</title>

      <remark>To be written&hellip;</remark>

      <!-- Example of a Static Diagram. Classes in the language of the problem
           space, but starts to show elements of the solution. Needs to use
           stereotyping. -->

      <sect3>
        <title>Concept Class Diagram</title>

        <remark>To be written&hellip;</remark>
      </sect3>

      <!-- Example of a Dynamic Diagram. System behaviour in the langauge of
           the problem space, but also starts to show elements of the
           solution. Needs also to use stereotyping. -->

      <sect3>
        <title>System Sequence Diagram</title>

        <remark>To be written&hellip;</remark>
      </sect3>

      <!-- Associated with the two previous diagram types. Brings static and
           dynamic models together. -->

      <sect3>
        <title>System State Diagram</title>

        <remark>To be written&hellip;</remark>
      </sect3>

      <!-- Use Cases and their specifications recast in solution language. -->

      <sect3>
        <title>Realisation Use Case Diagram</title>

        <remark>To be written&hellip;</remark>
      </sect3>

      <sect3>
        <title>Documents</title>

        <remark>Use Case Specifications and Supplementary Requirements
          Specifications recast in solution language. To be
          written&hellip;</remark>
      </sect3>
    </sect2>
  </sect1>

  <!-- Introduce UML Class Diagrams and how they can be used for Concept Class
       Diagrams. Will be very limited for this edition. At this stage we only
       show the bits relevant to Concept level diagrams. -->

  <sect1 id="s1.umlclassdiags">
    <title>Class Diagrams</title>

    <remark>To be written&hellip;</remark>

    <sect2>
      <title>The Class Diagram</title>

      <remark>To be written&hellip;</remark>
    </sect2>

    <sect2>
      <title>Advanced Class Diagrams</title>

      <remark>To be written&hellip;</remark>

      <sect3>
        <title>Association Classes</title>

        <remark>To be written&hellip;</remark>
      </sect3>
    </sect2>
  </sect1>

  <!-- Now show how to do in in Argo/UML. -->

  <sect1 id="s1.argoclassdiags">
    <title>Creating Class Diagrams in &argouml;</title>

    <sect2>
      <title>Classes</title>

      <remark>Identifying class diagrams from existing materials (Vision, Use
        Cases etc). To be written&hellip;</remark>

      <!-- From Alejandro, Philippe and Andreas -->

      <sect3>
        <title>Using the Note Icon in the Toolbar</title>

        <para>Click on your target class. Then click on the note icon. ArgoUML
          will generate the link automatically.</para> 

        <para>You can also right click to add a note as well! Be aware that you
          can add an undefined number of notes to any one class!</para> 

        <warning><para>Be aware that your note will not appear in the source
          code documentation tab.</para></warning>
      </sect3>
    </sect2>

    <sect2>
      <title>Associations</title>

      <remark>To be written&hellip;</remark>

      <sect3>
        <title>Aggregation</title>

        <remark>To be written&hellip;</remark>
      </sect3>
    </sect2>

    <sect2>
      <title>Class Attributes and Operations</title>

      <remark>To be written&hellip;</remark>

      <!-- From Alejandro, Philippe and Andreas -->

      <sect3>
        <title>Entering Data Into Attributes and Methods Windows</title>

        <para>Click directly in the class artifact and start typing. Do not use
          the properties window dialog fields&mdash;they are not fully
          functional and liable to cause you a little frustration.</para>

        <para> In fact, it would be interesting to see if you can type
          stereotypes write in the class attribute box for generating XML
          diagrams.</para>
      </sect3>

      <!-- Some information on attributes. Don't need everything at this
           stage. -->

      <sect3>
        <title>Class Attributes</title>

        <remark>To be written&hellip;</remark>
      </sect3>

      <!-- At this stage go light on operations - we'll cover them more in the
           Design Phase -->

      <sect3>
        <title>Class Operations</title>

        <remark>To be written&hellip;</remark>
      </sect3>
    </sect2>

    <sect2>
      <title>Advanced Class Features</title>

      <sect3>
        <title>Association Classes</title>

        <remark>To be written&hellip;</remark>
      </sect3>
     
      <!-- Use stereotypes to distinguish concept diagrams -->

      <sect3>
        <title>Stereotypes</title>

        <remark>To be written&hellip;</remark>
      </sect3>
    </sect2>
  </sect1>

  <!-- Introduce UML Sequence Diagrams and how they can be used for System
       Sequence Diagrams. Will be very limited for this edition. At this stage
       we only show the bits relevant to System level diagrams. -->

  <sect1 id="s1.umlseqdiags">
    <title>Sequence Diagrams</title>

    <remark>To be written&hellip;</remark>

    <sect2>
      <title>The Sequence Diagram</title>

      <remark>To be written&hellip;</remark>
    </sect2>

    <sect2>
      <title>Identifying Actions</title>

      <remark>To be written&hellip;</remark>
    </sect2>

    <sect2>
      <title>Advanced Sequence Diagrams</title>

      <remark>To be written&hellip;</remark>
    </sect2>
  </sect1>

  <!-- Now show how to do in in Argo/UML. -->

  <sect1 id="s1.argoseqdiags">
    <title>Creating Sequence Diagrams in &argouml;</title>

    <sect2>
      <title>Sequence Diagrams</title>

      <!-- From Alejandro, Phillipe and Andreas -->

      <sect3>
        <title>Creating a Sequence Diagram</title>

        <para>Normally, you can just start a sequence diagram right
        away. On the <literal>Create&nbsp;Diagram</literal> menu choose
        <literal>Sequence</literal>.</para>
      </sect3>

      <sect3>
        <title>Known Issues with Sequence Diagrams</title>

        <para>The following problems are currently identified.</para>

        <itemizedlist>
          <listitem><para>Checklist is not enabled with Sequence
            artifacts.</para></listitem>

          <listitem><para>It is not possible (as yet) to create call
          backs.</para></listitem>

          <listitem><para>You cannot change the order of the connectivity of a
          link artifact in ArgoUML yet.</para></listitem>

          <listitem><para>StimulusDestroy is not dependable.</para></listitem>
        </itemizedlist>
      </sect3>
    </sect2>

    <sect2>
      <title>Actions</title>

      <remark>To be written&hellip;</remark>
    </sect2>

    <sect2>
      <title>Advanced Sequence Diagrams</title>

      <remark>To be written&hellip;</remark>
    </sect2>

  </sect1>

  <!-- Introduce UML State Diagrams and how they can be used for System
       State Diagrams. Will be very limited for this edition. At this stage
       we only show the bits relevant to System level diagrams. -->

  <sect1 id="s1.umlstatediags">
    <title>State Diagrams</title>

    <remark>To be written&hellip;</remark>

    <sect2>
      <title>The State Diagram</title>

      <remark>Types of state diagram (Moore, Mealy); Hierarchical diagrams. To
        be written&hellip;</remark>
    </sect2>

    <!-- Keep this very light here - we don't need most of this at the System
         Level -->

    <sect2>
      <title>Advanced State Diagrams</title>

      <remark>To be written&hellip;</remark>

      <sect3>
        <title>Hierarchical State Diagrams</title>

        <remark>To be written&hellip;</remark>
      </sect3>
    </sect2>
  </sect1>

  <!-- Now show how to do in in Argo/UML. -->

  <sect1 id="s1.argostatediags">
    <title>Creating State Diagrams in &argouml;</title>

    <sect2>
      <title>State Diagrams</title>

      <remark>To be written&hellip;</remark>
      
      <!-- Taken from Alejandro, Phillipe and Andreas. Creating a State
           Diagram --> 

      <sect3>
        <title>Creating a State Diagram</title>

        <para>Select a class, then you can create a state diagram.</para>
      </sect3>
    </sect2>


    <sect2>
      <title>States</title>

      <remark>To be written&hellip;</remark>
      
      <!-- Taken from Alejandro, Phillipe and Andreas. Creating a State
           Diagram --> 

      <sect3>
        <title>Editing a Composite State</title>

        <!-- Don't really understand what the question is, and how the answer
             relates -->

        <para>When editing a composite state, how do you provide
          do and event for a composite state?</para>

        <para>The answer is to select a class, then you can create a state
          diagram.</para>
      </sect3>
    </sect2>

    <sect2>
      <title>Transitions</title>

      <remark>To be written&hellip;</remark>
    </sect2>

    <sect2>
      <title>Actions</title>

      <remark>To be written&hellip;</remark>
    </sect2>

    <!-- Keep this very light here - we don't need most of this at the System
         Level -->

    <sect2>
      <title>Advanced State Diagrams</title>

      <remark>To be written&hellip;</remark>

      <sect3>
        <title>Hierarchical State Diagrams</title>

        <remark>To be written&hellip;</remark>
      </sect3>
    </sect2>
  </sect1>

  <!-- Realisation Use Cases. Note that this doesn't require anything new - its
       just what has to be done with what we have already. -->

  <sect1>
    <title>Realisation Use Cases</title>

    <remark>To be written&hellip;</remark>
  </sect1>

  <!-- Now show how to do in in Argo/UML. -->

  <sect1>
    <title>Creating Realisation Use Cases in &argouml;</title>

    <remark>To be written&hellip;</remark>
  </sect1>

  <!-- Now illustrate all these techniques and diagrams with the Case
       Study. -->

  <sect1>
    <title>Case Study</title>

    <sect2>
      <title>Concept Class Diagrams</title>

      <remark>To be written&hellip;</remark>

      <sect3>
        <title>Identifying classes</title>

         <remark>To be written&hellip;</remark>
      </sect3>

      <sect3>
        <title>Identifying associations</title>

         <remark>To be written&hellip;</remark>
      </sect3>
    </sect2>

    <sect2>
      <title>System Sequence Diagrams</title>

      <remark>To be written&hellip;</remark>

      <sect3>
        <title>Identifying actions</title>

         <remark>To be written&hellip;</remark>
      </sect3>
    </sect2>

    <sect2>
      <title>System State Diagrams</title>

      <remark>To be written&hellip;</remark>
    </sect2>

    <sect2>
      <title>Realisation Use Cases</title>

      <remark>To be written&hellip;</remark>
    </sect2>
  </sect1>

</chapter>

<!-- Local stuff for Emacs - please do not delete

Local Variables:
mode: xml
sgml-doctype: "argomanual.xml"
sgml-parent-document: ("argomanual.xml" "chapter" nil)
sgml-validate-command: "nsgmls -wxml -sv ../docbook-setup/xml.dcl \
  argomanual.xml"
End:

-->
