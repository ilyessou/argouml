<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- $Id$ -->

<!--

This chapter covers the Explorer.

-->

<chapter id="ch.ref.navpane">
  <title>The Explorer</title>
  <indexterm>
    <primary>Explorer</primary>
  </indexterm>
  <indexterm>
    <primary>Navigation</primary>
    <secondary>Tree</secondary>
  </indexterm>
  <indexterm>
    <primary>Navigation</primary>
    <secondary>Pane</secondary>
  </indexterm>
  <indexterm>
    <primary>Navigator</primary>
    <secondary>Tree</secondary>
  </indexterm>
  <indexterm>
    <primary>Navigator</primary>
    <secondary>Pane</secondary>
  </indexterm>

  <para>
    The Explorer was previously called Navigation Pane/Tree or sometimes
    Navigator Pane/Tree.
  </para>  

  &notupdatedfor014disclaimer;

  <sect1>
    <title>Introduction</title>

    <para><xref linkend="fig.ref.navigation_pane"/> shows the &argouml; window,
      with the explorer highlighted.</para>

    <!-- This diagram shows the navigation overview. It is a complete ArgoUML
         window, but with all except the explorer grayed out. This was
         done using GIMP with selected areas using filter color range 0.5 to
         0.7.-->

    <figure id="fig.ref.navigation_pane" float="1">
      <title>Overview of the explorer</title>

      <screenshot><mediaobject>
        <imageobject>
          <imagedata format="PNG" align="center"
                     fileref="images/reference/navigator_pane.png"/>
        </imageobject>
      </mediaobject></screenshot>
    </figure>

    <para>The explorer allows the user to view the structure of the
      model from a number of predefined perspectives. It also allows the user
      to define their own perspetives for custom exploring of the
      model.</para>

    <para>An important feature, related to the cognitive psychology ideas
      behind &argouml; is that not all artifacts are necessarily shown in all
      perspectives. Rather, the perspectives are used to implement hiding of
      uninteresting parts of the model.</para>
  </sect1>

  <!-- How the mouse behaves in this pane -->

  <sect1 id="s1.ref.nav_mouse">
    <title>Mouse Behavior in the Explorer</title>
    <indexterm>
      <primary>Explorer</primary>
      <secondary>Mouse Behavior</secondary>
    </indexterm>
    <indexterm>
      <primary>Mouse Behavior</primary>
      <secondary>in the Explorer</secondary>
    </indexterm>

    <para>Behavior of the mouse in general, and the naming of the buttons is
      covered in the chapter on the overall user interface (see
      <xref linkend="ch.ref.ui"/>).</para>

    <!-- Button1 click -->

    <sect2>
      <title>&Button1; Click</title>

      <para>Within the hierarchical display, elements which have
        sub-hierarchies are indicated by
        <guiicon><inlinemediaobject><imageobject><imagedata
          format="GIF" align="center"
          fileref="images/icons/hierarchy_closed.gif"/>
        </imageobject></inlinemediaobject></guiicon> when the hierarchy is
        hidden and 
        <guiicon><inlinemediaobject><imageobject><imagedata
          format="GIF" align="center"
          fileref="images/icons/hierarchy_open.gif"/>
        </imageobject></inlinemediaobject></guiicon> when the hierarchy is
        open.</para>

      <para>&Button1; click over the name of any diagram artifact will cause
        the diagram to be selected and displayed in the editing pane. Its
        details will also be displayed in the details pane.</para>

      <para>&Button1; click over the name of any artifact other than a diagram
        in the main area of the explorer will cause it to be selected,
        and its details shown in the details pane. If the artifact is part of a
        diagram currently displayed in the editing pane, it will be highlighted
        there.</para>

      <note><para>If the artifact is part of a diagram other than that
        currently displayed in the Editing Pane, there will be
        <emphasis>no</emphasis> change of diagram in the Editing
        Pane.</para></note>

      <para>Where &button2; click has been used to bring up a context sensitive
        pop-up menu (see below), &button1; click is used to select the menu
        entry required. &button1; click outside the menu area will remove
        it.</para>
    </sect2>

    <!-- Button1 double click -->

    <sect2>
      <title>&Button1; Double Click</title>

      <para>This has no effect other than that of &button1; single
        click.</para>
    </sect2>

    <!-- Button2 click -->

    <sect2>
      <title>&Button2; Actions</title>

      <para>When used over text items in the the explorer, this will
        display a context dependent pop-up menu. Menu entries are highlighted
        (but not selected) and sub-menus exposed by subsequent mouse motion
        (without any buttons). Menu entry selection is with &button1;</para>

      <para>If the artifact generating the menu has not yet been selected it
        will also be selected.</para>
    </sect2>

    <!-- Button2 double click -->

    <sect2>
      <title>&Button2; Double Click</title>

      <para>This has no effect other than that of &button2; single
        click.</para>
    </sect2>
  </sect1>

  <!-- Selecting different perspectives with the drop down menu -->

  <sect1>
    <title>Perspective Selection</title>

    <para>The artifacts in the &argouml; model may be ordered from a number of
      perspectives. This drop-down allows selection of the perspective to be
      used in the explorer.</para>

    <note><para>Within the hierarchy, there is no particular ordering of
      artifacts at a particular level. They tend to be in order of
      creation. This is a known limitation of the current release of
      &argouml;.</para></note>

    <itemizedlist>
      <listitem><para><literal>Package-centric</literal> (the default). The
        exploring hierarchy is organized by package hierarchy. The top level
        shows the model. Under this are all the top level packages in the model
        and all the artifacts that are directly in the namespace of the
        model.</para>

      <para>Beneath each package are all the artifacts that sit within the
        namespace of that package, including any further sub-packages (which in
        turn have their own sub-hierarchies).</para></listitem>

      <listitem><para><literal>Diagram-centric</literal>. In this view the top
        level comprises all the diagrams in the model. Beneath each diagram is
        a flat listing of all the artifacts on the diagram. Artifacts that have
        sub-artifacts that do not appear on the diagram have their own
        hierarchy (for example attributes and operations of
        classes).</para></listitem>

      <listitem><para><literal>Inheritance-centric</literal>. In this view the
        top level shows the model. Beneath this are all artifacts that have no
        generalization in the model. Those artifacts that have specializations
        have a sub-hierarchy showing the specializations.</para></listitem>

      <listitem><para><literal>Class Associations</literal>. In this view the
        top level shows the model. Beneath this are all diagrams and all
        classes. All classes that have associations have a hierarchy tracking
        through the associated classes.</para></listitem>

      <listitem><para><literal>Navigable Associations</literal>. This is
        identical to the Class Associations ordering, but includes only
        navigable associations.</para></listitem>

      <listitem><para><literal>Association-centric</literal>. In this view the
        top level shows the model. Beneath this are all diagrams and all
        associations. All associations then have a sub-hierarchy listing
        the classes they connect. Where classes have associated state diagrams
        these are shown beneath the class.</para></listitem>

      <listitem><para><literal>State-centric</literal>. In this view the top
        level shows all the state machines and all activity graphics associated
        with classes. The state machine for <emphasis>Class</emphasis> is named
        <emphasis>Class</emphasis><literal>StateMachine</literal> and the
        activity graph for <emphasis>Class</emphasis> is named
        <emphasis>Class</emphasis><literal>ActivityGraph</literal>.</para>

      <para>Beneath each state machine is a hierarchy showing the state
        diagram and all of the states. Beneath each state is a list of the
        transitions in and out of the state.</para>

      <para>Beneath each activity graph is a hierarchy showing the activity
        diagram and all of the action states. Beneath each action state is a
        list of the transitions in and out of the action
        state.</para></listitem>

      <listitem><para><literal>Transitions-centric</literal>. This is very
        similar to <literal>State-centric</literal> view, but under each state
        machine is listed the diagrams and all transitions on the diagram, with
        states being shown as sub-hierarchies under their connected
        transitions.</para>

      <para>Similarly under each activity graph is listed the diagrams and all
        transitions on the diagram, with action states being shown as
        sub-hierarchies under their connected transitions.</para></listitem>

      <listitem><para><literal>Transitions-paths</literal>. This is
        similar to <literal>State-centric</literal> view. However under each
        state machine is shown the state diagram and the initial state. Under
        the initial state is a hierarchy showing the states to which it has
        transitions, and so on for each of those states. A similar structure is
        used for activity diagrams.</para></listitem>

      <listitem><para><literal>Collaboration-centric</literal>. This should
        show all collaborations in the view with artifacts in hierarchies under
        their collaborations.</para>

      <warning><para>In the current release of &argouml; this view is broken,
        and will display nothing.</para></warning></listitem>

      <listitem><para><literal>Dependency-centric</literal>. In this view the
        top level shows the model. Beneath this are all diagrams and top level
        artifacts. A hierarchy is shown for any dependency beneath any top
        level artifact.</para>

      <caution><para>Dependencies include realizations and
        implicit dependencies such as inner classes and state machines on their
        owning classes.</para>

      <para>When examining older &argouml; models, you may find some
        dependencies stereotyped as <literal>&laquo;extend&raquo;</literal> or
        <literal>&laquo;include&raquo;</literal>, since they were used
        (incorrectly) to depict extend and include relationships on use case
        diagrams. If such dependencies are seen, they should be replaced by
        proper extend and include relationships, which are now supported on the
        use case diagram.</para></caution></listitem>
    </itemizedlist>
  </sect1>

  <!-- Navigating around with the buttons -->

  <sect1>
    <title>Navigating Backward and Forward</title>

    <para>Two buttons are provided allowing the user to navigate back and
      forward through diagrams in the model.</para>

    <itemizedlist>
      <listitem><para><guiicon><inlinemediaobject><imageobject><imagedata
          format="GIF" align="center"
          fileref="images/icons/navigate_back.gif"/>
        </imageobject></inlinemediaobject></guiicon>
        <literal>Navigate Back</literal>. &argouml; keeps a record of the
        diagrams that you have been viewing while navigating the model. This
        button moves you back to the previous one viewed. If there are no more
        previous diagrams, the button is grayed out.</para></listitem>

      <listitem><para><guiicon><inlinemediaobject><imageobject><imagedata
          format="GIF" align="center"
          fileref="images/icons/navigate_forward.gif"/>
        </imageobject></inlinemediaobject></guiicon>
        <literal>Navigate Forward</literal>. &argouml; keeps a record of the
          diagrams that you have been viewing while navigating the model. This
          button moves you forward to the next one viewed (after you have used
          the Navigate Back button to move back). If there are no more next
          diagrams, the button is grayed out.</para></listitem>
    </itemizedlist>

    <warning><para>In the current release of &argouml; there is believed to be
      a problem, where the same diagram appears several times in a row so that
      Navigate Back/Forward does not appear to work.</para></warning>
  </sect1>

  <!-- Button for configuring perspectives-->

  <sect1>
    <title>Configuring Perspectives</title>

    <para>The explorer is designed to be user configurable, to allow the
      designer to view in his or her preferred way.</para>

    <!-- The Perspectives -->

    <sect2>
      <title>Perspectives Tag</title>

      <para>&button1; click on the NavConfig icon
        (<guiicon><inlinemediaobject><imageobject><imagedata 
          format="GIF" align="center" fileref="images/icons/nav_config.gif"/>
        </imageobject></inlinemediaobject></guiicon>) brings up the explorer
        perspectives dialog (see
        <xref linkend="fig.ref.navigator_pane_perspectives"/>).</para>

      <!-- The explorer perspectives dialog. -->

      <figure id="fig.ref.navigator_pane_perspectives" float="1">
        <title>Explorer perspectives dialog box</title>

        <screenshot><mediaobject>
          <imageobject>
            <imagedata format="PNG" align="center"
              fileref="images/reference/navigator_pane_perspectives.png"/>
          </imageobject>
        </mediaobject></screenshot>
      </figure>

      <para>The dialog box has at the top two tabs, labeled
        <literal>Perspectives</literal> and <literal>Panes</literal>. The first
        of these is the default, but can be selected explicitly by &button1;
        click on the tab.</para>

      <para>The top half of the dialog contains a text area with a list of all
        the currently defined perspectives and to the right three buttons
        stacked vertically. &Button1; click can be used to select a
        perspective, with CONTROL and SHIFT keys used for multiple
        perspectives.</para>

      <itemizedlist>
        <listitem><para><literal>New</literal>. This creates a new perspective
          from scratch with no rules selected.</para></listitem>

        <listitem><para><literal>Remove</literal>. This removes the selected
          perspective(s).</para></listitem>

        <listitem><para><literal>Duplicate</literal>. This should copy the
          selected perspective(s) so it/they can be used as the basis of a new
          perspective.</para>

        <warning><para>In the current release of &argouml; this function,
          although not grayed out, has no effect.</para></warning></listitem>
      </itemizedlist>

      <para>The lower half of the dialog contains two text areas. The one on
        the left, labeled <literal>Rules&nbsp;Library</literal>contains
        possible expansion rules to be expanded in turn to create the
        hierarchy. The one on the right contains the actual rules chosen for
        the hierarchy.</para>

      <para>Separating the two areas are buttons labeled
        <literal>&gt;&gt;</literal> and <literal>&lt;&lt;</literal>. The first
        of these transfers rules selected on the left to the text area on the
        right&mdash;i.e. it adds rules to the perspective. The second transfers
        rules selected on the right to the text area on the left&mdash;i.e. it
        removes rules from the perspective.</para>

      <para>The rules are applied in turn to the overall project (UML model) to
        create the top level list. They are then reapplied in turn to each of
        the elements in the top level list to create the next level hierarchy,
        and so on until no further expansion is possible.</para>

      <para>At the very bottom right is a button labeled <literal>OK</literal>
        to indicate that all changes are complete. &button1; click on this
        button will close the dialog window.</para>

      <note><para>There is no <literal>Cancel</literal> button, because all
        changes take immediate effect.</para></note>
    </sect2>
    
    <!-- The Panes - appears to be a null operation -->

    <sect2>
      <title>Panes Tag</title>

      <para>This dialog is obtained by using &button1; to select the
        <literal>Panes</literal> tab after &button1; click on the NavConfig
        icon (<guiicon><inlinemediaobject><imageobject><imagedata format="GIF"
        align="center" fileref="images/icons/nav_config.gif"/>
        </imageobject></inlinemediaobject></guiicon>) has brought up the
        explorer perspectives dialog (see <xref
        linkend="fig.ref.navigator_pane_panes"/>).</para>

      <!-- The explorer perspectives dialog. -->

      <figure id="fig.ref.navigator_pane_panes" float="1">
        <title>explorers dialog box</title>

        <screenshot><mediaobject>
          <imageobject>
            <imagedata format="PNG" align="center"
              fileref="images/reference/navigator_pane_panes.png"/>
          </imageobject>
        </mediaobject></screenshot>
      </figure>

      <para>The explorer was conceived as being able to offer multiple
        views simultaneously, with up to three panels of hierarchy. This dialog
        offers control of these panels, with an option to show or not show each
        panel, and the option of the second and third panels to be rooted at
        the selection on the previous panel, or to show the previously used
        hierarchy.</para>

      <caution><para>This functionality is not yet implemented in
        &argouml;. Only the first panel is ever shown, which is always rooted
        at project. All other options are grayed out and
        unavailable.</para></caution>

      <para>When using the explorer, it is worth bearing in mind that
        this is a useful visualization of the model, it is not
        <emphasis>solely</emphasis> for navigation and selection.  It is also
        useful for users to easily (meaning a few mouse clicks without having
        to arrange a diagram) visualize the model structured according to some
        perspective.  For example, show me the state nesting, or show me the
        class inheritance tree, or show me the package nesting, or show me the
        list of actors.</para>

      <para>The idea with the second and third nav tree panes, is that
        sometimes it is easier to explore the tree to a certain level in one
        tree and then continue expanding in a second tree .  Since
        each tree will not be so deep, it will look more like a list.</para>

      <para>For example, look at the way javadocs are viewed with frames: the
        packages are selected from one list, and interfaces, classes, and
        exceptions in that package are shown in a second pane.  In the case of
        javadocs, the second pane has a tree with three roots that are always
        expanded, but it is visually presented as three lists with three
        headers.</para>

      <para>The other suggested use of a second or third nav panel is to list
        recently visited model elements.  This is simliar to the recently
        visited files listed on the <literal>File</literal> menu of most
        applications, but for model elements rather than files.</para>

      <para>The motivtion is the fact that designers frequently
        <quote>interrupt</quote> themselves: they are thinking of working on
        one part of the design, and then they make a decision that needs a
        change in some other part, and then that has an implication on some
        other part, and&hellip; and&hellip; and&hellip; the designer forgets
        what it was they were originally trying to accomplish.  They need to
        <quote>pop their mental stack</quote> to come back to finish what the
        started.  If they fail to do that, they leave half-finished fragments
        all over the design which always seem to come out as soon as it is
        presented to someone else.</para>

      <para>A recently visited list should be LIFO (stack) ordered, or FIFO
        (queue) ordered.  The goal would be to help designers come back to
        finish what they were doing, or simply to help them switch between two
        or three related parts of the design.  The <literal>Navigate
        Back</literal> and <literal>Navigate Forward</literal> buttons in the
        explorer serve the same basic purpose and use a lot less screen
        space.</para>


      <para>&argouml;'s tear-off tabs (see <xref linkend="s2.ref.spawn"/> also
help with alternating between views, 
but sometimes users don't want to work with so many separate windows.
</para>

      <para>This is the theory that motivates the idea of multiple nav
        panes. For more information see Jason Robbins' PhD dissertation <ulink
        url="http://argouml.tigris.org/docs/robbins_dissertation/">
        http://argouml.tigris.org/docs/robbins_dissertation/</ulink>.  One
        practical usability concern is available screen space and another is
        visual complexity. For this reason the multiple panes have yet to be
        implemented in &argouml; while more pressing issues are
        addressed.</para>
    </sect2>
  </sect1>

  <!-- Context Sensitive Menu -->

  <sect1>
    <title>Context Sensitive Menu</title>

    <para>&Button2; Click over any selected artifact in the main area of the
      explorer will cause a pop-up menu to appear.</para>

     <!-- Add artifact to diagram -->

    <sect2>
      <title>Add to Diagram</title>

      <para>This entry on the pop-up menu appears for any artifact that could
        be added to a diagram in the editing
        pane. This could be the diagram currently displayed in editing pane, or
        it could be a diagram in a <quote>spawned</quote> window (see
        <xref linkend="s2.ref.edit_button1_double_click"/> for an explantion of
        how to do this).</para>

      <para>The item can be placed in a diagram by moving the cursor to the
        editing pane or a spawned editing pane window (where it will appear as
        a cross) and clicking &button1;.</para>

      <caution><para>This menu entry appears and is not grayed out, even for
        some artifacts that can not be placed on the currently selected diagram
        in the editing pane.</para>

      <para>This is because there may be separate spawned editing pane windows
        on which the artifact can validly be placed. &argouml; cannot track
        which windows are available, and can only know if an artifact can be
        validly placed, until a window is selected with the cursor
        <emphasis>after</emphasis> the
        <literal>Add&nbsp;to&nbsp;Diagram</literal> is chosen.</para>

      <para>The only way to find out if an artifact can be placed in a
        particular window is to try the operation and see if the artifact is
        placed.</para></caution>

      <caution><para>A separate known limitation is that the current release of
        &argouml; will not let you place more than one copy of any particular
        artifact on a diagram.</para></caution>
        <!-- TODO: check if an issue exists for this defect-->

    </sect2>

    <!-- Delete From Model -->

    <sect2>
      <title>Delete From Model</title>

      <para>This entry on the pop-up menu appears for any artifact that could
        be deleted from the model.</para>

      <warning><para>This deletes the artifact from the model completely, not
        just from the diagram. To remove the artifact just from the diagram,
        use the edit menu (see <xref
        linkend="s2.menu_edit_remove_from_diagram"/>).</para></warning>

      <caution>
        <para>
You can delete a diagram from the model. Depending on the type of diagram, 
that might delete all artifacts shown on the diagram. 
To illustrate the differences, consider the following examples:
        </para>

        <itemizedlist>
          <listitem><para>
Deleting a class diagram does not delete any artifact drawn on it. 
All artifacts that were shown on the diagram remain present in the model.
<!-- This because a class diagram does not "map" on any artifact according the UML standard V1.3, chapter 3.19.3 -->
          </para></listitem>
          <listitem><para>
Deleting a statechart diagram also deletes the statemachine it represents, 
and hence also all the artifacts owned by the statemachine.
<!-- This because a statechart diagram does "map" into a StateMachine according the UML standard V1.3, chapter 3.74.3 -->
          </para></listitem>
        </itemizedlist>
      </caution>

    </sect2>

    <!-- Set Source Path... -->

    <sect2>
      <title>Set Source Path ... (To be written)</title>
      <para>This entry on the pop-up menu ...</para>
    </sect2>

    <!-- Add Package -->

    <sect2>
      <title>Add Package</title>
      <para>
This entry on the pop-up menu is available 
whenever an artifact is selected that may contain a package, 
e.g. a package. 

After activating this menu the artifact will own a new package.
      </para>
    </sect2>

    <!-- Properties -->

    <sect2>
      <title>Properties Pop-Up</title>

      <para>
This entry on the pop-up menu causes the properties tab of the selected artifact or diagram 
to be displayed in the details pane.
      </para>
      <para>
The use of this function is limited, 
since the same effect can be obtained by 
clicking on the tab for the properties in the details pane directly.
Besides, &argouml; currently always downlights this menu-item. 
      </para>

    </sect2>

  </sect1>

</chapter>

<!-- Local stuff for Emacs - please do not delete

Local Variables:
mode: xml
sgml-doctype: "argomanual.xml"
sgml-parent-document: ("argomanual.xml" "chapter" nil)
sgml-validate-command: "nsgmls -wxml -sv ../docbook-setup/xml.dcl \
argomanual.xml"
indent-tabs-mode: nil
End:

-->
