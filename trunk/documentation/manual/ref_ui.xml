<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- $Id$ -->

<!--

This is the top level reference to the User Interface. To keep things
manageable, the description of each of the panes and the menu bar have their
own chapters.

-->

<chapter id="ch.ref.ui">
  <title>User Interface Reference</title>

  &notupdatedfor014disclaimer;

  <sect1>
    <title>Introduction</title>

    <para>This chapter describes the overall behavior of the user
      interface. Description of the various component parts&mdash;the menu bar,
      panes and various diagrams&mdash; is in separate chapters.</para>
  </sect1>

  <!-- An overview of the window as a whole -->

  <sect1>
    <title>Overview of the Window</title>

    <para><xref linkend="fig.ref.gui_overview"/> shows the main &argouml;
      window.</para>

    <!-- A big diagram with all the bits pointed out.--> 
<!--    TODO: At the moment its just a
         plane screenshot, but it would be nice to float in some bubbles
         pointing out things. -->

    <figure id="fig.ref.gui_overview" float="1">
      <title>Overview of the &argouml; window</title>

      <screenshot><mediaobject>
        <imageobject>
          <imagedata format="PNG" align="center"
                     fileref="images/reference/gui_overview.png"/>
        </imageobject>
      </mediaobject></screenshot>
    </figure>

    <para>At the top of screen is a <emphasis>menu bar</emphasis>, 
      which is described in
      <xref linkend="ch.ref.menu"/>. 
      Below that is the <emphasis>toolbar</emphasis>, as described in 
      <xref linkend="ch.ref.toolbar"/>...
    </para>
    <para>
      The bulk of the window comprises four
      sub-windows or <emphasis>panes</emphasis>. Clockwise from top left these
      are the <emphasis>explorer</emphasis> (see <xref
      linkend="ch.ref.navpane"/>), <emphasis>editing pane</emphasis> (see <xref
      linkend="ch.ref.editpane"/>), <emphasis>details pane</emphasis> (see
      <xref linkend="ch.ref.detpane"/>) and <emphasis>to-do pane</emphasis>
      (see <xref linkend="ch.ref.todopane"/>). All 4 panes
      have a <emphasis>tool bar</emphasis> at the top 
      (in the <emphasis>details pane</emphasis> it is located 
      under the <emphasis>properties</emphasis> tab).. 
      An overview of the panes is given in
      <xref linkend="s1.ref.panes"/>. Finally at the bottom of the window is a
      <emphasis>status bar</emphasis> described in <xref
      linkend="s1.ref.status"/>.
    </para>

  </sect1>

  <!-- A summary of the diagrams that can be created in ArgoUML -->

  <sect1 id="s1.ref.diagram_types">
    <title>UML Diagram Types supported by &argouml;</title>

    <para>The UML standard specifies eight principle diagrams, all of which are
      supported by &argouml;.</para>

    <itemizedlist>
      <listitem><para><emphasis>Use case diagram</emphasis>. Used to capture
        and analyse the requirements for any &ooad; project. See <xref
        linkend="ch.ref.entusecase"/> for details of the &argouml; use case
        diagram and the artifacts it supports.</para></listitem>

      <listitem><para><emphasis>Class diagram</emphasis>. This diagram captures
        the static structure of the system being designed, showing the classes,
        interfaces and datatypes and how they are related. Variants of this
        diagram are used to show package structures within a system (the
        <emphasis>package diagram</emphasis>) and the relationships between
        particular instances (the <emphasis>object diagram</emphasis>).</para>

      <para>The &argouml; class diagram provides support for class and package
        diagrams. See <xref linkend="ch.ref.entclass"/> for details of the
        artifacts it supports. The current implementation has no support for
        object diagrams.</para></listitem>

      <listitem><para><emphasis>Behavior diagrams</emphasis>. There are four
        such diagrams (or strictly speaking, five, since the use case diagram
        is a type of behavior diagram), which show the dynamic behavior of the
        system at all levels.</para>

      <itemizedlist>
        <listitem><para><emphasis>State diagram</emphasis>. Used to show the
          dynamic behavior of a single object (class instance). This diagram is
          of particular use in systems using complex communication protocols,
          such as in telecommunications. See <xref linkend="ch.ref.entstate"/>
          for details of the &argouml; state diagram and the artifacts it
          supports.</para></listitem>

        <listitem><para><emphasis>Activity diagram</emphasis>. Used to show the
          dynamic behavior of groups of objects (class instance). This diagram
          is an alternative to the state diagram, and is better suited to
          systems with a great deal of user interaction. See <xref
          linkend="ch.ref.entactiv"/> for details of the &argouml; activity
          diagram and the artifacts it supports.</para></listitem>

        <listitem><para><emphasis>Interaction diagrams</emphasis>. There are
          two diagrams in this category, used to show the dynamic interaction
          between objects (class instances) in the system.</para>

        <itemizedlist>
          <listitem><para><emphasis>Sequence diagram</emphasis>. Shows the
            interactions (typically messages or procedure calls) between
            instances of classes (objects) and actors against a
            timeline. Particularly useful where the timing relationships
            between interactions are important. See <xref
            linkend="ch.ref.entseq"/> for details of the &argouml; sequence
            diagram and the artifacts it supports.</para></listitem>
      
          <listitem><para><emphasis>Collaboration diagram</emphasis>. Shows the
            interactions (typically messages or procedure calls) between
            instances of classes (objects) and actors against the structural
            relationships between those instances. Particularly useful where it
            is useful to relate interactions to the static structure of the
            system. See <xref linkend="ch.ref.entcollab"/> for details of the
            &argouml; collaboration diagram and the artifacts it
            supports.</para></listitem>
        </itemizedlist></listitem>
      </itemizedlist></listitem>

      <listitem><para><emphasis>Implementation diagrams</emphasis>. UML defines
        two implementation diagrams to show the relationship between the
        software components that make up a system (the <emphasis>component
        diagram</emphasis>) and the relationship between the software and the
        hardware on which it is deployed at run-time (the <emphasis>deployment
        diagram</emphasis>.</para>

      <para>The &argouml; deployment diagram provides support for both
        component and deployment diagrams. See <xref
        linkend="ch.ref.entdeploy"/> for details of the diagram and the
        artifacts it supports.</para></listitem>
    </itemizedlist>

    <para>There are some artifacts that are common to all diagrams. These are
      described in a separate chapter (see <xref
      linkend="ch.ref.entities"/>).</para>
  </sect1>

  <!-- The central explanation of how the mouse behaves -->

  <sect1 id="s1.ref.mouse">
    <title>General Mouse Behavior in &argouml;</title>

    <para>Mouse behavior that is specific to the various panes of &argouml;
      (see <xref linkend="s1.ref.panes"/>) or the menu bar, is discussed in the
      chapters covering those panes and the menu bar. In this section we cover
      behavior that is general across all of &argouml;.</para>

    <para>In a number of places in &argouml; text may be directly edited
      (for example the constraint editor&mdash;see
      <xref linkend="s2.ref.details_constraint_editor"/>). The behavior of the
      mouse when handling text is discussed in the sections that follow.</para>

    <sect2>
      <title>Mouse Button Terminology</title>

      <para>&argouml; assumes a two button mouse. We will refer to the buttons
        as <quote>&button1;</quote> and <quote>&button2;</quote>. &Button1; is
        the leftmost button on a right-handed mouse, and sometimes referred to
        as the <emphasis>select</emphasis> button. &Button2; is the rightmost
        button on a right-handed mouse, and is sometimes referred to as the
        <emphasis>adjust</emphasis> button.</para>

      <para>A single depress and release of a mouse button while the mouse is
        referred to as a <emphasis>click</emphasis>. Two clicks in quick
        succession is referred to as a <emphasis>double
        click</emphasis>. Moving the mouse while holding a button down is
        referred to as <emphasis>button motion</emphasis> with the starting
        point being at <emphasis>button down</emphasis> and the end point at
        <emphasis>button up</emphasis>.</para>
    </sect2>

    <!-- Button1 click -->

    <sect2>
      <title>&Button1; Click</title>

      <para>This action is generally used to select an item for subsequent
        operations. If the item is an artifact in the explorer or the
        editing pane it will be highlighted.</para>

      <!-- General behavior when editing text -->

      <sect3>
        <title>General Behavior When Editing Text</title>

        <para>Here &button1; is used to select the point within the text at
          which operations (text entry and deletion) will take place.</para>
      </sect3>
    </sect2>

    <!-- Button1 double click -->

    <sect2>
      <title>&Button1; Double Click</title>

      <para>The behavior of &button1; double click varies betweens panes and
        is discussed in their chapters.</para>

      <!-- General behavior when editing text -->

      <sect3>
        <title>General Behavior When Editing Text</title>

        <para>Here &button1; double click is used to select a complete word, or
          other syntactic unit within the text. Subsequent operations (text
          entry and deletion) will replace the selected text.</para>
      </sect3>
    </sect2>

    <!-- Button1 Motion -->

    <sect2>
      <title>&Button1; Motion</title>

      <sect3>
        <title>General Behavior When Editing Text</title>

        <para>Here &button1; motion is used to select a range of
          text. Subsequent operations (text entry and deletion) will replace
          the selected text.</para>
      </sect3>
    </sect2>

    <!-- Shift and control keys -->

    <sect2>
      <title>Shift and Control with &Button1;</title>

      <!-- Where there is a list of things -->

      <sect3>
        <title>Within Lists</title>

        <para>This behavior applies where there is a list of things that may
          be selected. This includes various dialog boxes, and the to-do pane,
          where there is a list of to-do items to be selected.</para>

        <para>Where selections are to be made, the SHIFT key is used to with
          &button1; to <emphasis>extend</emphasis> from the original &button1;
          selection to the current position.</para>

        <para>Similarly the CONTROL key with &button1; is used to add
          individual items to the current selection. Where Ctrl-&button1; is
          used on an item already selected, that item is removed from the
          selection.</para>

        <caution><para>Users of Microsoft Windows will be familiar with the use
          SHIFT and CONTROL together to add sub-lists to an existing
          selection. &argouml; does not support this. SHIFT-CONTROL will behave
          as CONTROL.</para></caution>
      </sect3>

      <!-- General behavior when editing text -->

      <sect3>
        <title>General Behavior When Editing Text</title>

        <para>In a number of places in &argouml; text may be directly edited
          (for example the constraint editor&mdash;see
          <xref linkend="s2.ref.details_constraint_editor"/>). Here SHIFT
          &button1; is used to select a range of text from the previously
          selected point. Subsequent operations (text entry and deletion) will
          replace the selected text.</para>
      </sect3>
    </sect2>

    <!-- Button2 click -->

    <sect2>
      <title>&Button2; Actions</title>

      <para>&Button2; actions are all dependent on the pane or menu bar, and
        discussed in their various chapters.</para>
    </sect2>

    <!-- Button2 double click -->

    <sect2>
      <title>&Button2; Double Click</title>

      <para>&Button2; actions are all dependent on the pane or menu bar, and
        discussed in their various chapters.</para>
    </sect2>

    <!-- Button2 Motion -->

    <sect2>
      <title>&Button2; Motion</title>

      <para>&Button2; actions are all dependent on the pane or menu bar, and
        discussed in their various chapters.</para>
    </sect2>
  </sect1>

  <!-- General information about Panes -->

  <sect1 id="s1.ref.panes">
    <title>General Information About Panes</title>

    <para>The four sub-windows of the main &argouml; window are called
      <emphasis>panes</emphasis>. Clockwise from top left these are the
      <emphasis>explorer</emphasis> (see <xref
      linkend="ch.ref.navpane"/>), <emphasis>editing pane</emphasis> (see <xref
      linkend="ch.ref.editpane"/>), <emphasis>details pane</emphasis> (see
      <xref linkend="ch.ref.detpane"/>) and <emphasis>to-do pane</emphasis>
      (see <xref linkend="ch.ref.todopane"/>). At the top the editing pane is a
      <emphasis>tool bar</emphasis>.</para>

    <sect2>
      <title>Re-sizing Panes</title>

      <para>You can re-size panes by dragging on the divider bars between
        them. The mouse cursor changes to a vertical or horizontal bar with an
        arrow at right-angles when over the divider bars.</para>

      <para>In addition you will see there are two small left pointing arrows
        within the vertical divider bars, one at the top of the vertical
        divider bar between explorer and editing pane and one at the top
        of the vertical divider bar between to-do pane and details
        pane. &Button1; click on the first of these will expand the editing
        pane to the full width of the window, &button1; click on the second
        will expand the details pane to the full width of the window.</para>
      
      <para>There is also a small downward pointing arrow within the
        horizontal divider bar at its leftmost end. Clicking on this will
        expand the explorer and editing panes to the full depth of the
        window.</para>

      <para>By using both the top arrow on the vertical divider and the arrow
        on the horizontal divider, it is possible to expand the editing pane to
        use the entire window.</para>
    </sect2>

    <sect2 id="s2.ref.spawn">
      <title>Looking at Different Diagrams Simultaneously</title>

      <para>&argouml; provides the ability to spawn copies of key windows. This
        is possible for the editing pane and for the tabs of the details
        pane. These can then be manipulated as separate windows and placed as
        desired on the screen.</para>

      <para>This is achieved through use of &button1; double click as described
        in sections <xref linkend="s1.ref.edit_mouse"/> and
        <xref linkend="s1.ref.details_mouse"/>.</para>

      <note><para>There is no equivalent function for the explorer or to-do
        panes.</para></note>
    </sect2>

    <sect2>
      <title>Reducing the Number of Panes Visible</title>

      <para>This function is not implemented directly. However you can spawn
        a pane (see <xref linkend="s2.ref.spawn"/>) and maximize this to be the
        whole window, which achieves the same thing.</para>
    </sect2>
  </sect1>

  <!-- All about the status bar -->

  <sect1 id="s1.ref.status">
    <title>The status bar</title>

    <para>The status bar is at the very bottom of the &argouml; window and is
      used to display short advisory messages. In general such messages are
      self explanatory. It is also used for debugging messages for the system
      in development&mdash;these messages can be ignored.</para>
  </sect1>

</chapter>

<!-- Local stuff for Emacs - please do not delete

Local Variables:
mode: xml
sgml-doctype: "argomanual.xml"
sgml-parent-document: ("argomanual.xml" "chapter" nil)
sgml-validate-command: "nsgmls -wxml -sv ../docbook-setup/xml.dcl \
argomanual.xml"
indent-tabs-mode: nil
End:

-->
