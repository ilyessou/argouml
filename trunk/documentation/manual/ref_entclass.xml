<?xml version="1.0" encoding="ISO-8859-1"?>

<!--

Description of all the artifacts associated with Class Diagrams within
Argo/UML.


Modifications
=============

 5 Dec 2001:  Jeremy Bennett. Created as a new chapter.

11 Dec 2001:  Jeremy Bennett. Removed wish list. Added section on built in
              classes.

18 Dec 2001:  Jeremy Bennett. Started to specify all the entities on this
              diagram

29 Jan 2002:  Jeremy Bennett. Updated to reflect bug fix preventing attributes
              being added to classes.

19 Mar 2002:  Jeremy Bennett. Changed all tables to variablelists to fix
              problems with generating PDF.

-->

<chapter id="ch.ref.entclass">
  <title>&argouml; Class Diagram Artifact Reference</title>

  <sect1>
    <title>Introduction</title>

    <para>This chapter describes each artifact that can be created within a
      class diagram. Note that some sub-artifacts of artifacts on the diagram
      may not actually themselves appear on the diagram.</para>

    <para>Class diagrams are used for only one of the UML static structure
      diagrams, the class diagram itself. Object diagrams are represented on
      the &argouml; deployment diagram.</para>

    <para>In addition, &argouml; uses the class diagram to show model structure
      through the use of packages.</para>

    <para>There is a close relationship between this material and the
      Properties Tab of the Details Pane (see
      <xref linkend="s1.ref.proptab"/>). That section covers Properties in
      general, in this chapter they are linked to specific artifacts.</para>

    <!-- A diagram to show all things visible on the class diagram -->

    <para><xref linkend="fig.ref.class_diagram"/> shows a class diagram with
      all possible artifacts displayed.</para>

    <!-- Show all the bits and pieces. One day we'll add some call-out
         bubbles. -->

    <figure id="fig.ref.class_diagram" float="1">
      <title>Possible artifacts on a class diagram.</title>

      <screenshot><mediaobject>
        <imageobject>
          <imagedata format="GIF" align="center"
                     fileref="images/reference/class_diagram.gif"/>
        </imageobject>
      </mediaobject></screenshot>
    </figure>

    <!-- A diagram to show all things visible on the package diagram -->

    <para><xref linkend="fig.ref.package_diagram"/> shows a package diagram
      with all possible artifacts displayed.</para>

    <!-- Show all the bits and pieces. One day we'll add some call-out
         bubbles. -->

    <figure id="fig.ref.package_diagram" float="1">
      <title>Possible artifacts on a package diagram.</title>

      <screenshot><mediaobject>
        <imageobject>
          <imagedata format="GIF" align="center"
                     fileref="images/reference/package_diagram.gif"/>
        </imageobject>
      </mediaobject></screenshot>
    </figure>
  </sect1>

  <!-- Artifacts specific to Class Diagrams. Package artifact - cross reference
       to Model properties. Has DataType and StereoType as sub-artifacts. -->

  <sect1 id="s1.ref.package">
    <title>Package</title>

    <para>The package is the main organizational artifact within &argouml;. In
      the UML metamodel it is a sub-class of both <literal>Namespace</literal>
      and <literal>GeneralizableElement</literal>.</para>

    <note><para>&argouml; also implements the UML <literal>Model</literal>
      artifact as a sub-class of package (see <xref
      linkend="s1.ref.package"/>), but <emphasis>not</emphasis> the
      <literal>Subsystem</literal> artifact.</para></note>

    <caution><para>&argouml; does not fully implement all aspects of UML model
      management. In particular the only relationship that can be shown between
      packages is <literal>Dependency</literal>, although UML&nbsp;1.3 defines
      <literal>Generalization</literal> and the sub-class dependency
      <literal>Permission</literal> for use between packages.</para></caution>

    <!-- Package details tabs -->

    <sect2>
      <title>Package Details Tabs</title>

      <para>The details tabs that are active for packages are as
        follows.</para>

      <variablelist>

        <!-- Entry for ToDoItem tab -->

        <varlistentry>
          <term><literal>ToDoItem</literal></term>

          <listitem><para>Standard tab.</para></listitem>
        </varlistentry>

        <!-- Entry for Properties tab -->

        <varlistentry>
          <term><literal>Properties</literal></term>

          <listitem><para>See <xref
              linkend="s2.ref.package_property_toolbar"/> and <xref
              linkend="s2.ref.package_property_fields"/>
            below.</para></listitem>
        </varlistentry>

        <!-- Entry for Documentation tab -->

        <varlistentry>
          <term><literal>Documentation</literal></term>

          <listitem><para>Standard tab.</para></listitem>
        </varlistentry>

        <!-- Entry for Style tab -->

        <varlistentry>
          <term><literal>Style</literal></term>

          <listitem><para>Standard tab. The <literal>Bounds:</literal> field
            defines the bounding box for the package on the diagram.</para>

          <warning><para>There are some bugs remaining in entering data in
            the <literal>Bounds:</literal> field. Take care when typing
            that you do get the values you want in
            place.</para></warning></listitem>
        </varlistentry>

        <!-- Entry for Source tab -->

        <varlistentry>
          <term><literal>Source</literal></term>

          <listitem><para>Standard tab. This contains a template package
            declaration appropriate to the entire package. In the future
            this would be part of the code generation
            activity.</para></listitem>
        </varlistentry>

        <!-- Entry for Constraints tab -->

        <varlistentry>
          <term><literal>Constraints</literal></term>

          <listitem><para>Standard tab. There are no standard constraints
            defined for <literal>Package</literal> within the UML
            metamodel.</para></listitem>
        </varlistentry>

        <!-- Entry for Tagged Values tab -->

        <varlistentry>
          <term><literal>Tagged Values</literal></term>

          <listitem><para>Standard tab. In the UML metamodel,
            <literal>Package</literal> has the following standard tagged
            values defined.</para>

            <itemizedlist>
              <listitem><para><literal>derived</literal> (from the
                superclass, <literal>ModelElement</literal>). Values
                <literal>true</literal>, meaning the package is
                redundant&mdash;it can be formally derived from other
                elements, or <literal>false</literal> meaning it
                cannot.</para>

              <note><para>Derived packages still have their value in
                analysis to introduce useful names or concepts, and in
                design to avoid re-computation.</para></note></listitem>
            </itemizedlist>

            <note><para>The UML <literal>Element</literal> metaclass from
              which all other artifacts are derived includes the tagged
              element <literal>documentation</literal> which is handled by
              the <emphasis>documentation tab</emphasis> under
              &argouml;</para></note></listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <!-- Package properties -->

    <sect2 id="s2.ref.package_property_toolbar">
      <title>Package Property Toolbar</title>

      <variablelist>

        <!-- Entry for Go up button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/navigate_up.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Go
            up</literal></term>

          <listitem><para>Navigate up through the package
            structure.</para></listitem>
        </varlistentry>

        <!-- Entry for Go back button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/navigate_back.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Go
            back</literal></term>

          <listitem><para>Navigate back to the previous
            artifact.</para>

          <warning><para>This feature is currently broken within &argouml;
            and there is no guarantee where (if anywhere) this button will
            take you.</para></warning></listitem>
        </varlistentry>

        <!-- Entry for Go forward button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/navigate_forward.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Go
            forward</literal></term>

          <listitem><para>Navigate forward to the next
            artifact.</para>

          <warning><para>This feature is currently broken within &argouml;
            and there is no guarantee where (if anywhere) this button will
            take you.</para></warning></listitem>
        </varlistentry>

        <!-- Entry for Add class button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/class.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Add
            class</literal></term>

          <listitem><para>This creates a new class (see <xref
              linkend="s1.ref.class_class"/>) within the package (which
              appears on no diagram), navigating immediately to the
              properties tab for that class.</para>

          <tip><para>Whilst it can make sense to create classes this way,
            it can be clearer to create them within diagrams where you want
            them.</para></tip></listitem>
        </varlistentry>

        <!-- Entry for Add interface button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/interface.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Add
            interface</literal></term>

          <listitem><para>This creates a new interface (see <xref
              linkend="s1.ref.interface_class"/>) within the package (which
              appears on no diagram), navigating immediately to the
              properties tab for that interface.</para>

          <tip><para>Whilst it can make sense to create interfaces this
            way, it can be clearer to create them within diagrams where you
            want them.</para></tip></listitem>
        </varlistentry>

        <!-- Entry for Add datatype button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/datatype.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Add
            datatype</literal></term>

          <listitem><para>This creates a new datatype (see <xref
              linkend="s1.ref.datatype_class"/>) within the package (which
            appears on no diagram), navigating immediately to the
            properties tab for that datatype.</para></listitem>
        </varlistentry>

        <!-- Entry for Add stereotype button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/stereotype.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Add
            stereotype</literal></term>

          <listitem><para>This creates a new stereotype (see <xref
              linkend="s1.ref.stereotype_class"/>) within the package,
              navigating immediately to the properties tab for that
              stereotype.</para></listitem>
        </varlistentry>

        <!-- Entry for Add actor button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/actor.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Add
            actor</literal></term>

          <listitem><para>This creates a new actor (see <xref
              linkend="s1.ref.actor"/>) within the package (which appears
            on no diagram), navigating immediately to the properties tab
            for that actor.</para>

          <tip><para>Whilst it can make sense to create actors this way, it
            is can be clearer to create them within diagrams where you want
            them.</para></tip></listitem>
        </varlistentry>

        <!-- Entry for Add use case button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/use_case.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Add use
            case</literal></term>

          <listitem><para>This creates a new use case (see <xref
              linkend="s1.ref.use_case"/>) within the package (which
            appears on no diagram), navigating immediately to the
            properties tab for that use case.</para>

          <tip><para>Whilst it can make sense to create use cases this way,
            it can be clearer to create them within diagrams where you want
            them.</para></tip></listitem>
        </varlistentry>

        <!-- Entry for Add subpackage button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/package.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Add
            subpackage</literal></term>

          <listitem><para>This creates a new sub-package (see <xref
              linkend="s1.ref.package"/>) within the package (which appears
            on no diagram), navigating immediately to the properties tab
            for that package.</para></listitem>
        </varlistentry>

        <!-- Entry for Add generalization button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/generalization.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Add
            generalization</literal></term>

          <listitem><para>This creates a new generalization (see <xref
              linkend="s1.ref.generalization_use_case"/> and <xref
              linkend="s1.ref.generalization_class"/>) within the package
              (which appears on no diagram), navigating immediately to the
              properties tab for that generalization.</para>

          <tip><para>Whilst it can make sense to create generalizations
            this way, it is usually a lot clearer to create them within
            diagrams where you want them.</para></tip></listitem>
        </varlistentry>

        <!-- Entry for Add realization button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/realization.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Add
            realization</literal></term>

          <listitem><para>This should create a new realization (i.e. an
            abstraction with stereotype
            <literal>realize</literal>&mdash;see <xref
              linkend="s1.ref.abstraction"/>) within the package (which
            appears on no diagram).</para>

          <warning><para>This appears to be broken in the current release
            of &argouml;. Even if it did work, it would be of limited
            value, since the abstraction property sheet has no mechanism
            for adding supplier and client
            artifacts.</para></warning></listitem>
        </varlistentry>

        <!-- Entry for Delete button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/property_delete.gif"/>
          </imageobject></inlinemediaobject></guiicon>
            <literal>Delete</literal></term>

          <listitem><para>Deletes the package from the model.</para>

          <warning><para>This is a deletion from the model
            <emphasis>not</emphasis> just the diagram. To delete a
            package from the diagram, but keep it within the model,
            use the main menu <literal>Edit/Remove From Diagram</literal>
            (Ctrl-R).</para></warning></listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <!-- Fields in the properties tab -->

    <sect2 id="s2.ref.package_property_fields">
      <title>Property Fields For Package</title>

      <variablelist>

        <!-- Entry for Name -->

        <varlistentry>
          <term><literal>Name</literal></term>

          <listitem><para>Text box. The name of the package. The name of a
            package, like all packages, is by convention all lower
            case, with periods seperating the components of the package
            hierarchy.</para>

          <note><para>The default name supplied to a new package by
            &argouml; is the empty string <quote></quote>. The package will
            appear with the name <literal>anon</literal> in the navigation
            pane.</para></note></listitem>
        </varlistentry>

        <!-- Entry for Stereotype -->

        <varlistentry>
          <term><literal>Stereotype</literal></term>

          <listitem><para>Drop down selector. Package is provided by default
            with the UML standard stereotypes for package
            (<literal>facade</literal>, <literal>framework</literal>,
            <literal>stub</literal>), as well as the stereotypes for models
            and packages in the UML standard profiles for
            <emphasis>software development process</emphasis>
            (<literal>use&nbsp;case&nbsp;package</literal> and
            <literal>analysis&nbsp;service&nbsp;package</literal>).
            &argouml; also provides the additional stereotypes,
            <literal>machine</literal>, <literal>organization</literal> and
            <literal>person</literal>.</para>

          <note><para>A number of standard stereotypes are currently
            missing from &argouml;: <literal>topLevel</literal> (from
            package), <literal>use&nbsp;case&nbsp;system</literal>,
            <literal>analysis&nbsp;system</literal>,
            <literal>analysis&nbsp;package</literal> (all three from the
            <emphasis>software development process</emphasis>
            profile).</para></note>

          <caution><para>&argouml; provides the stereotype
            <literal>realize</literal> for models and packages. This
            appears to be an error, since this stereotype properly belongs
            to the <literal>Abstraction</literal> metaclass.</para>

          <para>In addition the stereotypes <literal>systemModel</literal>
            and <literal>metamodel</literal> are provided, although they
            should only be used for models (a sub-class of
            <literal>Package</literal>).</para></caution></listitem>
        </varlistentry>

        <!-- Entry for NavStereo -->

        <varlistentry>
          <term><literal>Navigate Stereotype</literal></term>

          <listitem><para><guiicon><inlinemediaobject><imageobject><imagedata
              format="GIF" align="center"
              fileref="images/icons/navigate_stereotype.gif"/>
            </imageobject></inlinemediaobject></guiicon> icon. If a
              stereotype has been selected, this will navigate you to the
              stereotype property panel (see <xref
                linkend="s1.ref.stereotype_class"/>).</para></listitem>
        </varlistentry>

        <!-- Entry for Namespace -->

        <varlistentry>
          <term><literal>Namespace</literal></term>

          <listitem><para>Text box. Records the namespace for the
            package. This is the package hierarchy.</para>

          <para>&Button1; click on the entry will take you to the package
            defining this namespace (or the model for the top level
            namespace).</para></listitem>
        </varlistentry>

        <!-- Entry for Modifiers -->

        <varlistentry>
          <term><literal>Modifiers</literal></term>

          <listitem><para>Check box, with entries <literal>abstract</literal>,
            <literal>final</literal> and <literal>root</literal>.</para>

          <itemizedlist>
            <listitem><para><literal>abstract</literal> is used to declare
              that this package cannot be instantiated, but must always be
              specialized.</para>

            <tip><para>The meaning of <literal>abstract</literal> applied
              to a package if not that clear. It might mean that the
              package contains interfaces or abstract classes without
              realizations. This is probably better handled through
              stereotyping of the package (for example
              <literal>&laquo;facade&raquo;</literal>).
            </para></tip></listitem>

            <listitem><para><literal>final</literal> indicates that this
              package can have no further subpackages, while
              <literal>root</literal> indicates it is the top level
              package.</para>

            <tip><para>Within &argouml; <literal>root</literal> only
              meaningfully applies to the Model, since all packages sit
              within the model. In the absence of the
              <literal>topLevel</literal> stereotype, this could be used to
              emphasize that the Model is at the top
              level.</para></tip></listitem>
          </itemizedlist></listitem>
        </varlistentry>

        <!-- Entry for Derived -->

        <varlistentry>
          <term><literal>Derived</literal></term>

          <listitem><para>Text box. Lists any derived class. This would show
            any packages, for which this package was the
            generalization.</para>

          <para>However since &argouml; does not currently
            implement generalization for packages, this always shows the
            entry <literal>none</literal> and the pop-up menu is always
            grayed out.</para></listitem>
        </varlistentry>

        <!-- Entry for Extends -->

        <varlistentry>
          <term><literal>Extends</literal></term>

          <listitem><para>Text box. Lists any use case that is extended by
            this package. Meaningless for a package, since extension
            relates to use cases only.</para></listitem>
        </varlistentry>

        <!-- Entry for Implements -->

        <varlistentry>
          <term><literal>Implements</literal></term>

          <listitem><para>Text area. Lists any packages for which this package
            is the realization.</para>

          <caution><para>&argouml; uses this for any dependent packages,
            implying that the dependency relationship is one of
            implementation. However in the absence of a permission
            relationship, such dependency relationships are also used on
            diagrams to show import, access and similar relationships. Use
            of the realize stereotype for true realization relationships is
            recommended.</para></caution>

          <para>It is possible to add realizations from this menu, although
            since there is no way to add a package to the other end of the
            abstraction, it is meaningless. &Button1; click allows you
            to navigate to them and &button2; click gives a pop up menu
            with options to <literal>Open</literal>,
            <literal>Add</literal>, <literal>Delete</literal>,
            <literal>Move&nbsp;Up</literal> and
            <literal>Move&nbsp;Down</literal> (see <link
            linkend="ref.use_case_generalization">Generalizations</link>
            for examples of how these operations are used).</para></listitem>
        </varlistentry>

        <!-- Entry for Owned Elements -->

        <varlistentry>
          <term><literal>Owned Elements
          </literal></term>

          <listitem><para>Text area. A hierarchical listing of the packages,
            classes, interfaces, datatypes, actors, use cases,
            associations, generalizations and stereotypes within the
            package. For each of these types of artifact, where there is at
            least one example in the package, a folder icon is
            shown.</para>

          <para>&Button1; double click on the folder icon
            (<guiicon><inlinemediaobject><imageobject><imagedata
              format="GIF" align="center"
              fileref="images/icons/folder.gif"/> 
            </imageobject></inlinemediaobject></guiicon>) opens the folder
            to reveal the artifacts owned under that category.</para>

          <para>&Button1; click on any of the revealed artifacts yields
            navigates to that artifact.</para>

          <para>&Button1; double click on an open folder (with
            artifacts displayed) will close the folder and hide the
            artifacts.</para>

          <para>Alternatively, &Button2; double click on any item gives
            a pop up menu.</para>

          <itemizedlist>
            <listitem><para><literal>Add</literal>. This option creates a
              new artifact of the specified type within the package, and
              navigates to that item.</para>

            <note><para>The item is placed under its relevant folder,
              irrespective of where the pop up menu is revealed. So
              &button2; lick on <literal>Actor</literal> folder and
              selection of <literal>Add/Package</literal> will place the
              new package under the <literal>Package</literal> folder, not
              the <literal>Actor</literal> folder.</para></note>

            <para>This is the only menu option actually available to the
              package (the others apply to packages within the package, see
              <xref linkend="s1.ref.package"/>).</para>

            <tip><para>It is often far easier to add artifacts by drawing
              them on the relevant diagram in the editing
              pane.</para></tip></listitem>

            <listitem><para><literal>Delete</literal>. This is always
              grayed out for a package.</para></listitem>

            <listitem><para><literal>Go</literal>. This is always
              grayed out for a package.</para></listitem>

            <listitem><para><literal>Open</literal>. This is always
              grayed out for a package.</para></listitem>
          </itemizedlist></listitem>
        </varlistentry>
      </variablelist>
    </sect2>
  </sect1>

  <!-- Datatype artifact. Sub-Artifact of Package. -->

  <sect1 id="s1.ref.datatype_class">
    <title>Datatype</title>

    <para>Datatypes are not specific to packages or class diagrams, and are
      discussed within the chapter on top level artifacts (see <xref
      linkend="s1.ref.datatype"/>).</para>
  </sect1>

  <!-- Stereotype artifact. Sub-Artifact of Package. -->

  <sect1 id="s1.ref.stereotype_class">
    <title>Stereotype</title>

    <para>Stereotypes are not specific to packages or class diagrams, and are
      discussed within the chapter on top level artifacts (see <xref
      linkend="s1.ref.stereotype"/>).</para>
  </sect1>

  <!-- Class artifact. Has Attributes and Operations as
       sub-artifacts. Operations itself has Signal and Parameters as
       sub-artifacts -->

  <sect1 id="s1.ref.class_class">
    <title>Class</title>

    <para>The class is the dominant artifact on a class diagram. In
      the UML metamodel it is a sub-class of <literal>Classifier</literal>
      and <literal>GeneralizableElement</literal>.</para>

    <para>A class is represented on a class diagram as a rectangle with three
      horizontal compartments. The top compartment displays the class name (and
      stereotype), the second compartment any attributes and the third any
      operations. The last two compartments may optionally be hidden.</para>

    <!-- Class details tabs -->

    <sect2>
      <title>Class Details Tabs</title>

      <para>The details tabs that are active for classes are as
        follows.</para>

      <variablelist>

        <!-- Entry for ToDoItem tab -->

        <varlistentry>
          <term><literal>ToDoItem</literal></term>

          <listitem><para>Standard tab.</para></listitem>
        </varlistentry>

        <!-- Entry for Properties tab -->

        <varlistentry>
          <term><literal>Properties</literal></term>

          <listitem><para>See <xref
              linkend="s2.ref.class_property_toolbar"/> and <xref
              linkend="s2.ref.class_property_fields"/>
            below.</para></listitem>
        </varlistentry>

        <!-- Entry for Documentation tab -->

        <varlistentry>
          <term><literal>Documentation</literal></term>

          <listitem><para>Standard tab.</para></listitem>
        </varlistentry>

        <!-- Entry for Style tab -->

        <varlistentry>
          <term><literal>Style</literal></term>

          <listitem><para>Standard tab. The tick boxes,
            <literal>Attributes</literal> and <literal>Operations</literal>
            allow the attributes and operations compartments to be shown
            (the default) or hidden. The <literal>Bounds:</literal> field
            defines the bounding box for the package on the diagram.</para>

          <warning><para>There are some bugs remaining in entering data in
            the <literal>Bounds:</literal> field. Take care when typing
            that you do get the values you want in
            place.</para></warning></listitem>
        </varlistentry>

        <!-- Entry for Source tab -->

        <varlistentry>
          <term><literal>Source</literal></term>

          <listitem><para>Standard tab. This contains a template for the class
            declaration (with JavaDoc header) and declarations of
            associated classes.</para></listitem>
        </varlistentry>

        <!-- Entry for Constraints tab -->

        <varlistentry>
          <term><literal>Constraints</literal></term>

          <listitem><para>Standard tab. There are no standard constraints
            defined for <literal>Class</literal> within the UML
            metamodel.</para></listitem>
        </varlistentry>

        <!-- Entry for Tagged Values tab -->

        <varlistentry>
          <term><literal>Tagged Values</literal></term>

          <listitem><para>Standard tab. In the UML metamodel,
            <literal>Class</literal> has the following standard tagged
            values defined.</para>

            <itemizedlist>
              <listitem><para><literal>persistence</literal> (from the
                superclass, <literal>Classifier</literal>). Values
                <literal>transitory</literal>, indicating state is
                destroyed when an instance is destroyed or
                <literal>persistent</literal>, marking state is
                preserved when an instance is destroyed.</para></listitem>

              <listitem><para><literal>semantics</literal> (from the
                superclass, <literal>Classifier</literal>). The value is a
                specification of the semantics of the
                class.</para></listitem>

              <listitem><para><literal>derived</literal> (from the
                superclass, <literal>ModelElement</literal>). Values
                <literal>true</literal>, meaning the class is
                redundant&mdash;it can be formally derived from other
                elements, or <literal>false</literal> meaning it
                cannot.</para>

              <note><para>Derived classes still have their value in
                analysis to introduce useful names or concepts, and in
                design to avoid re-computation.</para></note></listitem>
            </itemizedlist>

            <note><para>The UML <literal>Element</literal> metaclass from
              which all other artifacts are derived includes the tagged
              element <literal>documentation</literal> which is handled by
              the <emphasis>documentation tab</emphasis> under
              &argouml;</para></note></listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <!-- Class properties -->

    <sect2 id="s2.ref.class_property_toolbar">
      <title>Class Property Toolbar</title>

      <variablelist>

        <!-- Entry for Go up button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/navigate_up.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Go
            up</literal></term>

          <listitem><para>Navigate up through the package
            structure.</para></listitem>
        </varlistentry>

        <!-- Entry for Go back button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/navigate_back.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Go
            back</literal></term>

          <listitem><para>Navigate back to the previous
            artifact.</para>

          <warning><para>This feature is currently broken within &argouml;
            and there is no guarantee where (if anywhere) this button will
            take you.</para></warning></listitem>
        </varlistentry>

        <!-- Entry for Go forward button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/navigate_forward.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Go
            forward</literal></term>

          <listitem><para>Navigate forward to the next
            artifact.</para>

          <warning><para>This feature is currently broken within &argouml;
            and there is no guarantee where (if anywhere) this button will
            take you.</para></warning></listitem>
        </varlistentry>

        <!-- Entry for Add attribute -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/attribute.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Add
            attribute</literal></term>

          <listitem><para>This creates a new attribute (see <xref
              linkend="s1.ref.attribute"/>) within the class, navigating
            immediately to the properties tab for that
            attribute.</para></listitem> 
        </varlistentry>

        <!-- Entry for Add operation button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/operation.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Add
            operation</literal></term>

          <listitem><para>This creates a new operation (see <xref
              linkend="s1.ref.operation"/>) within the class, navigating
              immediately to the properties tab for that
              operation.</para></listitem>
        </varlistentry>

        <!-- Entry for Add interface button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/interface.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Add
            interface</literal></term>

          <listitem><para>This creates a new interface (see <xref
              linkend="s1.ref.interface_class"/>) within the package (which
              appears on no diagram), navigating immediately to the
              properties tab for that interface.</para>

          <tip><para>Whilst it can make sense to create interfaces this
            way, it can be clearer to create them within diagrams where you
            want them.</para></tip></listitem>
        </varlistentry>

        <!-- Entry for Add inner class button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/inner_class.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Add inner
            class</literal></term>

          <listitem><para>This creates a new inner class (which appears on no
            diagram) within the
            class. This belongs to the class and is restricted to the
            namespace of the class. It exactly models the Java concept of
            inner class. As an inner class it needs no attributes or
            operations, since it shares those of its owner.</para>

          <note><para>Inner class is not a separate concept in UML. This is
              a convenient shorthand for creating a class that is
              restricted to the namespace of its owning
              class.</para></note></listitem>
        </varlistentry>

        <!-- Entry for Delete button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/property_delete.gif"/>
          </imageobject></inlinemediaobject></guiicon>
            <literal>Delete</literal></term>

          <listitem><para>This deletes the class from the model</para>

          <warning><para>This is a deletion from the model
            <emphasis>not</emphasis> just the diagram. To delete a class
            from the diagram, but keep it within the model, use the main
            menu <literal>Edit/Remove From Diagram</literal>
            (Ctrl-R).</para></warning></listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <!-- Fields in the properties tab -->

    <sect2 id="s2.ref.class_property_fields">
      <title>Property Fields For Class</title>

      <variablelist>

        <!-- Entry for Name -->

        <varlistentry>
          <term><literal>Name</literal></term>

          <listitem><para>Text box. The name of the class. The name of a class
            has a leading capital letter, with words separated by
            <quote>bumpy caps</quote>.</para>

          <note><para>The &argouml; critics will complain about class names
            that do not have an initial capital.</para></note></listitem>
        </varlistentry>

        <!-- Entry for Stereotype -->

        <varlistentry>
          <term><literal>Stereotype</literal></term>

          <listitem><para>Drop down selector. Class is provided by default
            with the UML standard stereotypes for
            <literal>Class</literal>
            (<literal>implementationClass</literal> and
            <literal>type</literal>) and for <literal>Classifier</literal>
            (<literal>metaclass</literal>, <literal>powerType</literal>,
            <literal>process</literal>, <literal>thread</literal> and
            <literal>utility</literal>), as well as the stereotypes for
            classes in the UML standard profiles for
            <emphasis>software development process</emphasis>
            (<literal>boundary</literal>, <literal>entity</literal> and
            <literal>control</literal>) and <emphasis>business
            modeling</emphasis> (<literal>worker</literal>,
            <literal>case&nbsp;worker</literal>,
            <literal>internal&nbsp;worker</literal> and
            <literal>entity</literal> (again)).
            &argouml; also provides the additional stereotypes,
            <literal>machine</literal>, <literal>organization</literal> and
            <literal>person</literal>, and rather strangely
            <literal>realize</literal> (a stereotype of
            <literal>Abstraction</literal>).</para>

          <caution><para>&argouml; provides the stereotype
            <literal>realize</literal> for classes. This appears to be an
            error, since this stereotype properly belongs to the
            <literal>Abstraction</literal>
            metaclass.</para></caution>

          <tip><para>One stereotype that is not part of the UML standard,
            but is widely used is <literal>Singleton</literal>, used to
            distinguish classes which have a single static instance, and no
            public constructor. Although not part of &argouml; by default,
            this stereotype is understood by the critics. You may find it
            useful to create this stereotype for yourself (see <xref
              linkend="s1.ref.stereotype"/>).</para></tip></listitem>
        </varlistentry>

        <!-- Entry for NavStereo -->

        <varlistentry>
          <term><literal>Navigate Stereotype</literal></term>

          <listitem><para><guiicon><inlinemediaobject><imageobject><imagedata
              format="GIF" align="center"
              fileref="images/icons/navigate_stereotype.gif"/>
            </imageobject></inlinemediaobject></guiicon> icon. If a
              stereotype has been selected, this will navigate you to the
              stereotype property panel (see <xref
                linkend="s1.ref.stereotype_class"/>).</para></listitem>
        </varlistentry>

        <!-- Entry for Namespace -->

        <varlistentry>
          <term><literal>Namespace</literal></term>

          <listitem><para>Text box. Records the namespace for the
            class. This is the package hierarchy.</para>

          <para>&Button1; click on the entry will take you to the package
            defining this namespace (or the model for the top level
            namespace).</para></listitem>
        </varlistentry>

        <!-- Entry for Extends -->

        <varlistentry>
          <term><literal>Extends</literal></term>

          <listitem><para>Text box. Lists any class that generalizes this
            class (see <xref
              linkend="s1.ref.generalization_class"/>).</para>

          <caution><para>&argouml; is incorrect in using the designation
            <quote>Extends</quote> for this field. It should correctly be
            called <quote>Generalizations</quote>.</para></caution>

          <para>&Button1; click takes you to the selected entry, &button2;
            gives a pop up menu with five entries.</para>

          <itemizedlist>
            <listitem><para><literal>Open</literal>. Navigate to the
              selected generalization.</para></listitem>

            <listitem><para><literal>Add</literal>. Add a new
              generalization.</para>

            <note><para>&argouml; always has this option grayed out, which
              appears to be a bug.</para></note>

            <tip><para>New generalizations can be added from the class
              diagram (but note the caution about multiple generalizations
              below).</para></tip></listitem>

            <listitem><para><literal>Delete</literal>. Removes the link to
              the selected generalization.</para>

            <note><para>This only removes the link to the
              generalization. To remove the generalization from the model
              you must navigate to it (or select it on the diagram or
              navigation pane) and then delete it.</para></note></listitem>

            <listitem><para><literal>Move Up</literal>. Only available
              where there are two or more generalizations, and the
              generalization selected is not at the top. It is moved one up
              the list.</para></listitem>

            <listitem><para><literal>Move Down</literal>. Only available
              where there are two or more generalizations listed, and the
              generalization selected is not at the bottom. It is moved
              one down the list.</para></listitem>
          </itemizedlist>

          <caution><para>UML&nbsp;1.3 allows you to create multiple
            generalizations from a class, in other words permits multiple
            inheritance. You should bear in mind that the absence of
            multiple inheritance in many popular programming languages
            (notably C++ and Java) may lead to implementation difficulties
            with such designs.</para></caution></listitem>
        </varlistentry>

        <!-- Entry for Modifiers -->

        <varlistentry>
          <term><literal>Modifiers</literal></term>

          <listitem><para>Check box, with entries <literal>public</literal>,
            <literal>abstract</literal>, 
            <literal>final</literal>, <literal>root</literal> and
            <literal>active</literal>.</para>

          <itemizedlist>
            <listitem><para><literal>public</literal> has identical meaning
              to the <literal>public</literal> declaration in Java. It
              indicated whether this class is restricted to use in its own
              package (the default) or can be used by
              anyone.</para></listitem>

            <listitem><para><literal>abstract</literal> is used to declare
              that this class cannot be instantiated, but must always be
              subclassed. The name of an abstract class is displayed in
              italics on the diagram.</para>

            <caution><para>If a class has any abstract operations, then it
              should be declared abstract. &argouml; will not enforce
              this.</para></caution></listitem>

            <listitem><para><literal>final</literal> indicates that this
              class cannot be further subclassed, while
              <literal>root</literal> indicates it can have no
              superclass. It is possible for a class to be both abstract
              and final, since its static operations may still be
              referenced.</para></listitem>

            <listitem><para><literal>active</literal> indicates that this
              class exhibits dynamic behavior (and is thus associated with
              a state or activity diagram).</para></listitem>
          </itemizedlist></listitem>
        </varlistentry>

        <!-- Entry for Associations -->

        <varlistentry>
          <term><literal>Associations</literal></term>

          <listitem><para>Text box. Lists any associations (see <xref
              linkend="s1.ref.association_class"/>) connected to this
            class.</para>

          <para>&Button1; click takes you to the selected entry, &button2;
            gives a pop up menu with five entries.</para>

          <itemizedlist>
            <listitem><para><literal>Open</literal>. Navigate to the
              selected association.</para></listitem>

            <listitem><para><literal>Add</literal>. Add a new
              association.</para>

            <tip><para>New associations can usually more easily be added
              from the class diagram.</para></tip></listitem>

            <listitem><para><literal>Delete</literal>. Removes the link to
              the selected association.</para>

            <note><para>This only removes the link to the
              association. To remove the association from the model
              you must navigate to it (or select it on the diagram or
              navigation pane) and then delete it.</para></note></listitem>

            <listitem><para><literal>Move Up</literal>. Only available
              where there are two or more associations, and the
              association selected is not at the top. It is moved one up
              the list.</para></listitem>

            <listitem><para><literal>Move Down</literal>. Only available
              where there are two or more associations listed, and the
              association selected is not at the bottom. It is moved
              one down the list.</para></listitem>
          </itemizedlist></listitem>
        </varlistentry>

        <!-- Entry for Implements -->

        <varlistentry>
          <term><literal>Implements</literal></term>

          <listitem><para>Text box. Lists any classes or interfaces (see <xref
              linkend="s1.ref.association_class"/>) which are an
              abstraction of this class (i.e. which this class
              realizes).</para>

          <para>&Button1; click takes you to the abstraction for the
            selected entry, &button2; 
            gives a pop up menu with five entries.</para>

          <itemizedlist>
            <listitem><para><literal>Open</literal>. Navigate to the
              selected abstraction.</para></listitem>

            <listitem><para><literal>Add</literal>. Add a new
              abstraction.</para>

            <tip><para>New abstractions can usually more easily be added
              from the class diagram.</para></tip></listitem>

            <listitem><para><literal>Delete</literal>. Removes the link to
              the selected abstraction.</para>

            <note><para>This only removes the link to the
              abstraction. To remove the abstraction from the model
              you must navigate to it (or select it on the diagram or
              navigation pane) and then delete it.</para></note></listitem>

            <listitem><para><literal>Move Up</literal>. Only available
              where there are two or more abstractions, and the
              abstraction selected is not at the top. It is moved one up
              the list.</para></listitem>

            <listitem><para><literal>Move Down</literal>. Only available
              where there are two or more abstractions listed, and the
              abstraction selected is not at the bottom. It is moved
              one down the list.</para></listitem>
          </itemizedlist></listitem>
        </varlistentry>

        <!-- Entry for Derived -->

        <varlistentry>
          <term><literal>Derived</literal></term>

          <listitem><para>Text area. Lists any derived classes, i.e those for
            which this class is a generalization.</para>

          <para>&Button1; click takes you to the generalization for the
            selected entry, &button2; gives a pop up menu with a single
            entry, which also takes you to the generalization.</para>

          <caution><para>You may potentially have a large number of entries
            here, and the pop up menu makes access very difficult. The work
            around is to go to the parent classes on the diagram or the
            navigation pane.</para></caution></listitem>
        </varlistentry>

        <!-- Entry for Operations -->

        <varlistentry>
          <term><literal>Operations</literal></term>

          <listitem><para>Text area. Lists all the operations (see <xref
              linkend="s1.ref.operation"/>) defined on this
              class. &Button1; click takes you to the selected operation,
              &button2; click brings up a pop up menu with five
              entries.</para>

          <itemizedlist>
            <listitem><para><literal>Open</literal>. Navigate to the
              selected operation.</para></listitem>

            <listitem><para><literal>Add</literal>. Add a new
              operation and navigate to it.</para></listitem>

            <listitem><para><literal>Delete</literal>. Removes the selected
              operation from the model.</para></listitem>

            <listitem><para><literal>Move Up</literal>. Only available
              where there are two or more operations, and the operation
              selected is not at the top. It is moved one up the
              list.</para></listitem>

            <listitem><para><literal>Move Down</literal>. Only available
              where there are two or more operations listed, and the
              operation selected is not at the bottom. It is moved
              one down the list.</para></listitem>
          </itemizedlist></listitem>
        </varlistentry>

        <!-- Entry for attributes -->

        <varlistentry>
          <term><literal>Attributes</literal></term>

          <listitem><para>Text area. Lists all the attributes (see <xref
              linkend="s1.ref.attribute"/>) defined for this
            class. &Button1; click takes you to the selected attribute,
            &button2; click brings up a pop up menu with five
            entries.</para>

          <itemizedlist>
            <listitem><para><literal>Open</literal>. Navigate to the
              selected attribute.</para></listitem>

            <listitem><para><literal>Add</literal>. Add a new
              attribute and navigate to it.</para></listitem>

            <listitem><para><literal>Delete</literal>. Removes the selected
              attribute from the model.</para></listitem>

            <listitem><para><literal>Move Up</literal>. Only available
              where there are two or more attributes, and the attribute
              selected is not at the top. It is moved one up the
              list.</para></listitem>

            <listitem><para><literal>Move Down</literal>. Only available
              where there are two or more attributes listed, and the
              attribute selected is not at the bottom. It is moved
              one down the list.</para></listitem>
          </itemizedlist></listitem>
        </varlistentry>

        <!-- Entry for Owned Elements -->

        <varlistentry>
          <term><literal>Owned Elements
          </literal></term>

          <listitem><para>Text area. A listing of artifacts contained within
            the classes' namespace. This is where any inner class (see
            <xref linkend="s2.ref.class_property_toolbar"/>) will
            appear</para>

          <para>&Button1; click on any of the artifacts
            navigates to that artifact. &button2; click brings up a pop up
            menu with five entries.</para>

          <itemizedlist>
            <listitem><para><literal>Open</literal>. Navigate to the
              selected artifact.</para></listitem>

            <listitem><para><literal>Add</literal>. Point to a sub-menu
              with seven options: <literal>Add_Menu_Actor</literal>;
              <literal>Add_Menu_Class</literal>;
              <literal>Add_Menu_Datatype</literal>;
              <literal>Add_Menu_Exception</literal>;
              <literal>Add_Menu_Interface</literal>;
              <literal>Add_Menu_Signal</literal> and
              <literal>Add_Menu_UseCase</literal>. Selecting any one will
              create an artifact of that type within the namespace of the
              class (but not on any diagram) and navigate to
              it.</para>

            <note><para><literal>Add_Menu_Exception</literal> is identical
              to <literal>Add_Menu_Signal</literal>. Both add a
              signal.</para></note>

            <tip><para>Most namespace hierarchies should be managed
              through the package mechanism. Namespace hierarchies through
              classes are best restricted to inner classes. Conceivable
              datatypes, signals and interfaces could also appear here, but
              actors and use cases would seem of no
              value.</para></tip></listitem>

            <listitem><para><literal>Delete</literal>. Removes the selected
              artifact from the model.</para></listitem>

            <listitem><para><literal>Move Up</literal>. Only available
              where there are two or more artifacts, and the artifact
              selected is not at the top. It is moved one up the
              list.</para></listitem>

            <listitem><para><literal>Move Down</literal>. Only available
              where there are two or more artifacts listed, and the
              artifact selected is not at the bottom. It is moved
              one down the list.</para></listitem>
          </itemizedlist></listitem>
        </varlistentry>
      </variablelist>
    </sect2>
  </sect1>

  <!-- Attribute artifact (subsidiary of Class) -->

  <sect1 id="s1.ref.attribute">
    <title>Attribute</title>

    <para>Attribute is a named slot within a class (or other
      <literal>Classifier</literal> describing a range of values that may be
      held by instances of the class. In the UML metamodel it is a sub-class of
      <literal>StructuralFeature</literal> which is itself a sub-class of
      <literal>Feature</literal>.</para>

    <para>An attribute is represented on a single line within the attribute
      compartment of the class. Its syntax is as follows:</para>

    <blockquote><para><emphasis>visibility</emphasis>
      [<literal>static</literal>] [<literal>final</literal>]
      <emphasis>attributeName</emphasis> <literal>:</literal>
      <emphasis>type</emphasis> [<literal>=</literal>
      <emphasis>initialValue</emphasis>]</para></blockquote>

    <para><emphasis>visibility</emphasis> is <literal>+</literal>,
      <literal>#</literal> or <literal>-</literal> corresponding to
      <literal>public</literal>, <literal>protected</literal> or
      <literal>private</literal> visibility respectively.</para>

    <para><literal>static</literal> and <literal>final</literal> optionally
      appear if the attribute has those modifiers</para>

    <para>In addition any attribute declared static will have its whole entry
      underlined on the diagram.</para>

    <para><emphasis>attributeName</emphasis> is the actual name of the
      attribute being declared.</para>

    <para><emphasis>type</emphasis> is the type (UML datatype, class or
      interface) declared for the attribute.</para>

    <para><emphasis>initialValue</emphasis> is any initial value to be given to
      the attribute when an instance of the class is created. This may be
      overridden by any constructor operation.</para>

    <!-- Attribute details tabs -->

    <sect2 id="s2.ref.attribute_details_tabs">
      <title>Attribute Details Tabs</title>

      <para>The details tabs that are active for attributes are as
        follows.</para>

      <variablelist>

        <!-- Entry for ToDoItem tab -->

        <varlistentry>
          <term><literal>ToDoItem</literal></term>

          <listitem><para>Standard tab.</para></listitem>
        </varlistentry>

        <!-- Entry for Properties tab -->

        <varlistentry>
          <term><literal>Properties</literal></term>

          <listitem><para>See <xref
              linkend="s2.ref.attribute_property_toolbar"/> and <xref
              linkend="s2.ref.attribute_property_fields"/>
            below.</para></listitem>
        </varlistentry>

        <!-- Entry for Documentation tab -->

        <varlistentry>
          <term><literal>Documentation</literal></term>

          <listitem><para>Standard tab.</para></listitem>
        </varlistentry>

        <!-- Entry for Style tab -->

        <varlistentry>
          <term><literal>Style</literal></term>

          <listitem><para>Standard tab, but relating to the owning class,
            rather than the attribute. The tick boxes,
            <literal>Attributes</literal> and <literal>Operations</literal>
            allow the attributes and operations compartments of the class
            to be shown (the default) or hidden. The
            <literal>Bounds:</literal> field defines the bounding box for
            the package on the diagram.</para>

          <warning><para>There are some bugs remaining in entering data in
            the <literal>Bounds:</literal> field. Take care when typing
            that you do get the values you want in
            place.</para></warning></listitem>
        </varlistentry>

        <!-- Entry for Source tab -->

        <varlistentry>
          <term><literal>Source</literal></term>

          <listitem><para>Standard tab. This contains a declaration for the
            attribute.</para>

          <warning><para>The declaration for attributes with multiplicity
            (see <xref linkend="s2.ref.attribute_property_fields"/>) is
            not syntactically correct Java at
            present.</para></warning></listitem>
        </varlistentry>

        <!-- Entry for Constraints tab -->

        <varlistentry>
          <term><literal>Constraints</literal></term>

          <listitem><para>Standard tab. There are no standard constraints
            defined for <literal>Attribute</literal> within the UML
            metamodel.</para></listitem>
        </varlistentry>

        <!-- Entry for Tagged Values tab -->

        <varlistentry>
          <term><literal>Tagged Values</literal></term>

          <listitem><para>Standard tab. In the UML metamodel,
            <literal>Attribute</literal> has the following standard tagged
            values defined.</para>

            <itemizedlist>
              <listitem><para><literal>persistence</literal>. Values
                <literal>transitory</literal>, indicating state is
                destroyed when an instance is destroyed or
                <literal>persistent</literal>, marking state is
                preserved when an instance is destroyed.</para></listitem>

              <listitem><para><literal>derived</literal> (from the
                superclass, <literal>ModelElement</literal>). Values
                <literal>true</literal>, meaning the attribute is
                redundant&mdash;it can be formally derived from other
                elements, or <literal>false</literal> meaning it
                cannot.</para>

              <note><para>Derived attributes still have their value in
                analysis to introduce useful names or concepts, and in
                design to avoid re-computation.</para></note></listitem>
            </itemizedlist>

            <note><para>The UML <literal>Element</literal> metaclass from
              which all other artifacts are derived includes the tagged
              element <literal>documentation</literal> which is handled by
              the <emphasis>documentation tab</emphasis> under
              &argouml;</para></note></listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <!-- Attribute properties -->

    <sect2 id="s2.ref.attribute_property_toolbar">
      <title>Attribute Property Toolbar</title>

      <variablelist>

        <!-- Entry for Go up button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/navigate_up.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Go
            up</literal></term>

          <listitem><para>Navigate up through the package
            structure.</para></listitem>
        </varlistentry>

        <!-- Entry for Go back button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/navigate_back.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Go
            back</literal></term>

          <listitem><para>Navigate back to the previous
            artifact.</para>

          <warning><para>This feature is currently broken within &argouml;
            and there is no guarantee where (if anywhere) this button will
            take you.</para></warning></listitem>
        </varlistentry>

        <!-- Entry for Go forward button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/navigate_forward.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Go
            forward</literal></term>

          <listitem><para>Navigate forward to the next
            artifact.</para>

          <warning><para>This feature is currently broken within &argouml;
            and there is no guarantee where (if anywhere) this button will
            take you.</para></warning></listitem>
        </varlistentry>

        <!-- Entry for New attribute -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/attribute.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>New
            attribute</literal></term>

          <listitem><para>This creates a new attribute within the owning class
              of the current attribute, navigating immediately to the
              properties tab for that attribute.</para>

          <tip><para>This is a very convenient way to add a number of
            attributes, one after the other, to a
            class.</para></tip></listitem>
        </varlistentry>

        <!-- Entry for Delete button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/property_delete.gif"/>
          </imageobject></inlinemediaobject></guiicon>
            <literal>Delete</literal></term>

          <listitem><para>This deletes the attribute from the model</para>

          <warning><para>This is a deletion from the model
            <emphasis>not</emphasis> just the diagram. Since attributes
            have no meaning independent of their owning class, it makes no
            sense to delete them just from the model. If desired the whole
            attribute compartment can be hidden on the diagram using the
            <emphasis>style</emphasis> tab (see <xref
              linkend="s2.ref.attribute_property_toolbar"/>) or the
            &button2; pop up menu for the class on the
            diagram.</para></warning></listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <!-- Fields in the properties tab -->

    <sect2 id="s2.ref.attribute_property_fields">
      <title>Property Fields For Attribute</title>

      <variablelist>

        <!-- Entry for Name -->

        <varlistentry>
          <term><literal>Name</literal></term>

          <listitem><para>Text box. The name of the attribute. The name of a
            attribute has a leading lower case letter, with words separated
            by <quote>bumpy caps</quote>.</para>

          <note><para>The &argouml; critics will complain about attribute
            names that do not have an initial
            lower case letter.</para></note></listitem>
        </varlistentry>

        <!-- Entry for multiplicity -->

        <varlistentry>
          <term><literal>Multiplicity</literal></term>

          <listitem><para>Drop down selector. The default (empty) value is
            that there is one instance of this attribute for each instance
            of the class, i.e. it is a scalar. The drop down provides a
            number of specifications for non-scalar attributes.</para>

          <note><para>The selection <literal>1..1</literal> is equivalent
            to the default (exactly one scalar instance). The selection
            <literal>0..1</literal> indicates an optional scalar
            attribute.</para></note>

          <caution><para>&argouml; restricts you to a number of predefined
            ranges for multiplicity. There is no way to give a user defined
            range.</para></caution></listitem>
        </varlistentry>

        <!-- Entry for Stereotype -->

        <varlistentry>
          <term><literal>Stereotype</literal></term>

          <listitem><para>Drop down selector. There are no UML standard
            stereotypes for <literal>Attribute</literal>. &argouml;
            provides the additional stereotypes,
            <literal>machine</literal>, <literal>organization</literal> and
            <literal>person</literal>, and rather strangely
            <literal>realize</literal> (a stereotype of
            <literal>Abstraction</literal>).</para>

          <caution><para>&argouml; provides the stereotype
            <literal>realize</literal> for attributes. This appears to be
            an error, since this stereotype properly belongs to the
            <literal>Abstraction</literal>
            metaclass.</para></caution></listitem>
        </varlistentry>

        <!-- Entry for NavStereo -->

        <varlistentry>
          <term><literal>Navigate Stereotype</literal></term>

          <listitem><para><guiicon><inlinemediaobject><imageobject><imagedata
              format="GIF" align="center"
              fileref="images/icons/navigate_stereotype.gif"/>
            </imageobject></inlinemediaobject></guiicon> icon. If a
              stereotype has been selected, this will navigate you to the
              stereotype property panel (see <xref
                linkend="s1.ref.stereotype_class"/>).</para></listitem>
        </varlistentry>

        <!-- Entry for Owner -->

        <varlistentry>
          <term><literal>Owner</literal></term>

          <listitem><para>Text box. Records the class which contains this
            attribute.</para>

          <para>&Button1; click on the entry will navigate to the
            class. &Button2; click provides a pop up menu with a single
            entry, <literal>Open</literal>, which will also navigate to the
            class.</para></listitem>
        </varlistentry>

        <!-- Entry for Type -->

        <varlistentry>
          <term><literal>Type</literal></term>

          <listitem><para>Drop down selector. The type of this attribute. This
            can be any UML <literal>Classifier</literal>, although in
            practice only <literal>Class</literal>,
            <literal>DataType</literal> or <literal>Interface</literal>
            make any sense.</para>

          <note><para>A type must be declared (it can be
            <literal>void</literal>). By default &argouml; supplies
            <literal>int</literal> as the type.</para></note></listitem>
        </varlistentry>

        <!-- Entry for NavClass -->

        <varlistentry>
          <term><literal>Navigate Type</literal></term>

          <listitem><para><guiicon><inlinemediaobject><imageobject><imagedata
              format="GIF" align="center"
              fileref="images/icons/navigate_type.gif"/>
            </imageobject></inlinemediaobject></guiicon> icon. This will
            navigate you to the property panel for the currently selected
            type. (see <xref linkend="s1.ref.class_class"/>, <xref
              linkend="s1.ref.datatype_class"/> and <xref
              linkend="s1.ref.interface_class"/>).</para></listitem>
        </varlistentry>

        <!-- Entry for Initial Value -->

        <varlistentry>
          <term><literal>Initial Value</literal></term>

          <listitem><para>Text box with drop down. This allows you to set an
            initial value for the attribute if desired (this is
            optional). The drop down menu provides access to the common
            values <literal>0</literal>, <literal>1</literal>,
            <literal>2</literal> and <literal>null</literal>.</para>

          <caution><para>Any constructor operation may ignore this initial
            value.</para></caution></listitem>
        </varlistentry>

        <!-- Entry for Visibility -->

        <varlistentry>
          <term><literal>Visibility</literal></term>

          <listitem><para>Radio box, with entries <literal>public</literal>,
            <literal>protected</literal> and
            <literal>private</literal>.</para>

          <itemizedlist>
            <listitem><para><literal>public</literal>. The attribute is
              available to any artifact that can see the owning
              class.</para></listitem>

            <listitem><para><literal>protected</literal>. The attribute is
              available only to the owning class, or artifacts that are
              subclasses of the owning class.</para></listitem>

            <listitem><para><literal>private</literal>. The attribute is
              available only to the owning class (and any inner
              classes).</para></listitem>
          </itemizedlist></listitem>
        </varlistentry>

        <!-- Entry for Modifiers -->

        <varlistentry>
          <term><literal>Modifiers</literal></term>

          <listitem><para>Check box, with entries <literal>static</literal>,
            <literal>final</literal>, <literal>transient</literal> and
            <literal>volatile</literal>.</para>

          <itemizedlist>
            <listitem><para><literal>static</literal>. There is only one
              instance of this attribute associated with the class (as
              opposed to one for each instance of the class). This is the
              <literal>OwnerScope</literal> attribute of a
              <literal>Feature</literal> metaclass within UML. Any
              attribute declared static is shown underlined on the class
              diagram.</para></listitem>

            <listitem><para><literal>final</literal>The value of this
              attribute may not be changed after it has been
              instantiated.</para>

            <caution><para>This corresponds to the
              <literal>Changeability</literal> attribute of the
              <literal>Attribute</literal> metaclass within the UML
              standard. &argouml; has no mechanism for indicating the
              <literal>addOnly</literal> value of this
              attribute.</para></caution></listitem>

            <listitem><para><literal>transient</literal>. This corresponds
              to the <literal>permanence</literal> tagged value (see <xref
                linkend="s2.ref.attribute_details_tabs"/>), and should 
              not really be on the property sheet.</para>

            <tip><para>UML Purists should not use this check box, but enter
              a permanence tagged value on the tagged value
              tab.</para></tip></listitem>

            <listitem><para><literal>volatile</literal>. This is an
              &argouml; extension to the UML&nbsp;1.3 standard to indicate
              that this attribute is realized in some volatile form (for
              example it will be a memory mapped control register).</para>

            <tip><para>The proper place for this extension is as a tagged
              value (or stereotype). UML purists may choose to adopt either
              of these mechanisms.</para></tip></listitem>
          </itemizedlist></listitem>
        </varlistentry>
      </variablelist>
    </sect2>
  </sect1>

  <!-- Operation artifact (subsidiary of Class), with subsidiaries Parameter
       and Signal. -->

  <sect1 id="s1.ref.operation">
    <title>Operation</title>

    <para>Operation is a service that can be requested from an object to effect
      behavior. In the UML metamodel it is a sub-class of
      <literal>BehavioralFeature</literal> which is itself a sub-class of
      <literal>Feature</literal>.</para>

    <para>An operation is represented on a single line within the operation
      compartment of the class. Its syntax is as follows:</para>

    <blockquote><para><emphasis>visibility</emphasis>
      [<literal>static</literal>] [<literal>final</literal>]
      <emphasis>operationName</emphasis> <literal>(</literal>
      [<emphasis>argumentDeclaration</emphasis> [,
      <emphasis>argumentDeclaration</emphasis>]*] <literal>:</literal>
      <emphasis>returnType</emphasis></para></blockquote>

    <para><emphasis>visibility</emphasis> is <literal>+</literal>,
      <literal>#</literal> or <literal>-</literal> corresponding to
      <literal>public</literal>, <literal>protected</literal> or
      <literal>private</literal> visibility respectively.</para>

    <para><literal>static</literal> and <literal>final</literal> optionally
      appear if the operation has those modifiers</para>

    <para>In addition any operation declared static will have its whole entry
      underlined on the diagram.</para>

    <para><emphasis>operationName</emphasis> is the name of the operation
      actually being declared.</para>

    <para>There may be zero or more <emphasis>argumentDeclarations</emphasis>
      separated by commas. An <emphasis>argumentDeclaration</emphasis> is a
      pair of the form:</para>

    <blockquote><para><emphasis>name</emphasis> <literal>:</literal>
      <emphasis>type</emphasis></para></blockquote>

    <para><emphasis>returnType</emphasis> is the type (UML datatype, class or
      interface) of the result returned.</para>

    <para>Finally the whole entry is shown in italics if the operation is
      declared abstract.</para>

    <!-- Operation details tabs -->

    <sect2>
      <title>Operation Details Tabs</title>

      <para>The details tabs that are active for operations are as
        follows.</para>

      <variablelist>

        <!-- Entry for ToDoItem tab -->

        <varlistentry>
          <term><literal>ToDoItem</literal></term>

          <listitem><para>Standard tab.</para></listitem>
        </varlistentry>

        <!-- Entry for Properties tab -->

        <varlistentry>
          <term><literal>Properties</literal></term>

          <listitem><para>See <xref
              linkend="s2.ref.operation_property_toolbar"/> and <xref
              linkend="s2.ref.operation_property_fields"/>
            below.</para></listitem>
        </varlistentry>

        <!-- Entry for Documentation tab -->

        <varlistentry>
          <term><literal>Documentation</literal></term>

          <listitem><para>Standard tab.</para></listitem>
        </varlistentry>

        <!-- Entry for Style tab -->

        <varlistentry>
          <term><literal>Style</literal></term>

          <listitem><para>Standard tab, but relating to the owning class,
            rather than the operation. The tick boxes,
            <literal>Attributes</literal> and <literal>Operations</literal>
            allow the attributes and operations compartments of the class
            to be shown (the default) or hidden. The
            <literal>Bounds:</literal> field defines the bounding box for
            the package on the diagram.</para>

          <warning><para>There are some bugs remaining in entering data in
            the <literal>Bounds:</literal> field. Take care when typing
            that you do get the values you want in
            place.</para></warning></listitem>
        </varlistentry>

        <!-- Entry for Source tab -->

        <varlistentry>
          <term><literal>Source</literal></term>

          <listitem><para>Standard tab. This contains a declaration for the
            operation.</para>

          <warning><para>The <literal>final</literal> modifier is ignored
            and will not appear in the source
            declaration.</para></warning></listitem>
        </varlistentry>

        <!-- Entry for Constraints tab -->

        <varlistentry>
          <term><literal>Constraints</literal></term>

          <listitem><para>Standard tab. There are no standard constraints
            defined for <literal>Operation</literal> within the UML
            metamodel.</para></listitem>
        </varlistentry>

        <!-- Entry for Tagged Values tab -->

        <varlistentry>
          <term><literal>Tagged Values</literal></term>

          <listitem><para>Standard tab. In the UML metamodel,
            <literal>Operation</literal> has the following standard tagged
            values defined.</para>

            <itemizedlist>
              <listitem><para><literal>semantics</literal>. The value is a
                specification of the semantics of the
                operation.</para></listitem>

              <listitem><para><literal>derived</literal> (from the
                superclass, <literal>ModelElement</literal>). Values
                <literal>true</literal>, meaning the operation is
                redundant&mdash;it can be formally derived from other
                elements, or <literal>false</literal> meaning it
                cannot.</para>

              <note><para>Derived operations still have their value in
                analysis to introduce useful names or concepts, and in
                design to avoid re-computation.</para></note></listitem>
            </itemizedlist>

            <note><para>The UML <literal>Element</literal> metaclass from
              which all other artifacts are derived includes the tagged
              element <literal>documentation</literal> which is handled by
              the <emphasis>documentation tab</emphasis> under
              &argouml;</para></note></listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <!-- Operation properties -->

    <sect2 id="s2.ref.operation_property_toolbar">
      <title>Operation Property Toolbar</title>

      <variablelist>

        <!-- Entry for Go up button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/navigate_up.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Go
            up</literal></term>

          <listitem><para>Navigate up through the package
            structure.</para></listitem>
        </varlistentry>

        <!-- Entry for Go back button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/navigate_back.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Go
            back</literal></term>

          <listitem><para>Navigate back to the previous
            artifact.</para>

          <warning><para>This feature is currently broken within &argouml;
            and there is no guarantee where (if anywhere) this button will
            take you.</para></warning>

          <warning><para>This feature is currently broken within &argouml;
            and there is no guarantee where (if anywhere) this button will
            take you.</para></warning></listitem>
        </varlistentry>

        <!-- Entry for Go forward button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/navigate_forward.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Go
            forward</literal></term>

          <listitem><para>Navigate forward to the next
            artifact.</para>

          <warning><para>This feature is currently broken within &argouml;
            and there is no guarantee where (if anywhere) this button will
            take you.</para></warning></listitem>
        </varlistentry>

        <!-- Entry for New operation -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/operation.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>New
            operation</literal></term>

          <listitem><para>This creates a new operation within the owning class
              of the current operation, navigating immediately to the
              properties tab for that operation.</para>

          <tip><para>This is a very convenient way to add a number of
            operations, one after the other, to a
            class.</para></tip></listitem>
        </varlistentry>

        <!-- Entry for Add parameter -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/parameter.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Add
            parameter</literal></term>

          <listitem><para>This creates a new parameter for the operation,
            navigating immediately to the properties tab for that
            parameter.</para></listitem>
        </varlistentry>

        <!-- Entry for Delete button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/property_delete.gif"/>
          </imageobject></inlinemediaobject></guiicon>
            <literal>Delete</literal></term>

          <listitem><para>This deletes the operation from the model</para>

          <warning><para>This is a deletion from the model
            <emphasis>not</emphasis> just the diagram. Since operations
            have no meaning independent of their owning class, it makes no
            sense to delete them just from the model. If desired the whole
            operation compartment can be hidden on the diagram using the
            <emphasis>style</emphasis> tab (see <xref
              linkend="s2.ref.operation_property_toolbar"/>) or the
            &button2; pop up menu for the class on the
            diagram.</para></warning></listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <!-- Fields in the properties tab -->

    <sect2 id="s2.ref.operation_property_fields">
      <title>Property Fields For Operation</title>

      <variablelist>

        <!-- Entry for Name -->

        <varlistentry>
          <term><literal>Name</literal></term>

          <listitem><para>Text box. The name of the operation. The name of an
            operation has a leading lower case letter, with words separated
            by <quote>bumpy caps</quote>.</para>

          <note><para>The &argouml; critics will complain about operation
            names that do not have an initial
            lower case letter.</para></note>

          <tip><para>If you wish to follow the Java convention of
            constructors having the same name as the class, you will
            violate this rule. Remove the critic using the to-do tab (see
            <xref linkend="s1.ref.to_do"/>).</para></tip></listitem>
        </varlistentry>

        <!-- Entry for Stereotype -->

        <varlistentry>
          <term><literal>Stereotype</literal></term>

          <listitem><para>Drop down selector. There are two UML standard
            stereotypes for <literal>Operation</literal> (from the parent
            metaclass, <literal>BehavioralFeature</literal>),
            <literal>create</literal> and
            <literal>destroy</literal>. &argouml; provides the additional
            stereotypes, <literal>machine</literal>,
            <literal>organization</literal> and <literal>person</literal>,
            and rather strangely <literal>realize</literal> (a stereotype
            of <literal>Abstraction</literal>).</para>

          <tip><para>You should use <literal>create</literal> as the
            stereotype for constructors, and <literal>destroy</literal> for
            destructors (or finalize methods under Java).</para></tip>

          <caution><para>&argouml; provides the stereotype
            <literal>realize</literal> for operations. This appears to be
            an error, since this stereotype properly belongs to the
            <literal>Abstraction</literal>
            metaclass.</para></caution></listitem>
        </varlistentry>

        <!-- Entry for NavStereo -->

        <varlistentry>
          <term><literal>Navigate Stereotype</literal></term>

          <listitem><para><guiicon><inlinemediaobject><imageobject><imagedata
              format="GIF" align="center"
              fileref="images/icons/navigate_stereotype.gif"/>
            </imageobject></inlinemediaobject></guiicon> icon. If a
              stereotype has been selected, this will navigate you to the
              stereotype property panel (see <xref
                linkend="s1.ref.stereotype_class"/>).</para></listitem>
        </varlistentry>

        <!-- Entry for Owner -->

        <varlistentry>
          <term><literal>Owner</literal></term>

          <listitem><para>Text box. Records the class which contains this
            operation.</para>

          <para>&Button1; click on the entry will navigate to the
            class. &Button2; click provides a pop up menu with a single
            entry, <literal>Open</literal>, which will also navigate to the
            class.</para></listitem>
        </varlistentry>

        <!-- Entry for Visibility -->

        <varlistentry>
          <term><literal>Visibility</literal></term>

          <listitem><para>Radio box, with entries <literal>public</literal>,
            <literal>protected</literal> and
            <literal>private</literal>.</para>

          <itemizedlist>
            <listitem><para><literal>public</literal>. The operation is
              available to any artifact that can see the owning
              class.</para></listitem>

            <listitem><para><literal>protected</literal>. The operation is
              available only to the owning class, or artifacts that are
              subclasses of the owning class.</para></listitem>

            <listitem><para><literal>private</literal>. The operation is
              available only to the owning class (and any inner
              classes).</para></listitem>
          </itemizedlist></listitem>
        </varlistentry>

        <!-- Entry for Modifiers -->

        <varlistentry>
          <term><literal>Modifiers</literal></term>

          <listitem><para>Check box, with entries <literal>abstract</literal>,
            <literal>final</literal>, <literal>root</literal>,
            <literal>query</literal> and <literal>static</literal>.</para>

          <itemizedlist>
            <listitem><para><literal>abstract</literal>. This operation has
              no implementation with this class. The implementation must be
              provided by a subclass.</para>

            <important><para>Any class with an abstract operation must
              itself be declared abstract.</para></important></listitem>

            <listitem><para><literal>final</literal>The implementation of
              this operation must not be overridden by any
              subclass.</para></listitem>

            <listitem><para><literal>root</literal>. The declaration of
              this operation must not override a declaration of the
              operation from a superclass.</para></listitem>

            <listitem><para><literal>query</literal>. This indicates that
              the operation must have no side effects (i.e. it must not
              change the state of the system). It can only return a
              value.</para>

            <caution><para>Operations for user defined datatypes must
              always check this modifier.</para></caution></listitem>

            <listitem><para><literal>static</literal>. There is only one
              instance of this operation associated with the class (as
              opposed to one for each instance of the class). This is the
              <literal>OwnerScope</literal> attribute of a
              <literal>Feature</literal> metaclass within UML. Any
              operation declared static is shown underlined on the class
              diagram.</para></listitem>
          </itemizedlist></listitem>
        </varlistentry>

        <!-- Entry for Concurrency -->

        <varlistentry>
          <term><literal>Concurrency</literal></term>

          <listitem><para>Radio box, with entries
            <literal>sequential</literal>, <literal>synchronized</literal>
            and <literal>concurrent</literal>.</para>

          <itemizedlist>
            <listitem><para><literal>sequential</literal>. Only one call to
              an instance (of the class with the operation) may be
              outstanding at any one time. There is no protection, and no
              guarantee of behavior if the system violates this
              rule.</para></listitem>

            <listitem><para><literal>synchronized</literal>. Multiple calls
              to one instance are allowed, but only one may execute at a
              time. The others are blocked. In the UML&nbsp;1.3 standard
              this form of concurrency is known as
              <literal>guarded</literal>.</para>

            <caution><para>It is up to the system designer to ensure
              deadlock cannot occur. It is the responsibility of the
              operation to implement the blocking behavior (as opposed to
              the system).</para></caution></listitem>

            <listitem><para><literal>concurrent</literal>. Multiple calls
              to one instance may execute at the same time. The operation
              is responsible for ensuring correct behavior. This must be
              managed even if there are other sequential or synchronized
              (guarded) operations executing at the time.</para></listitem>
          </itemizedlist></listitem>
        </varlistentry>

        <!-- Entry for Parameter -->

        <varlistentry>
          <term><literal>Parameter</literal></term>

          <listitem><para>Text area, with entries for all the parameters of
            the operation (see <xref linkend="s1.ref.parameter"/>). A new
            operation is always created with one new parameter,
            <literal>return</literal> to define the return type of the
            operation.</para>

          <para>&Button1; click on any of the parameters
            navigates to that parameter. &button2; click brings up a pop up
            menu with four entries.</para>

          <itemizedlist>
            <listitem><para><literal>Open</literal>. Navigate to the
              selected parameter.</para></listitem>

            <listitem><para><literal>Add</literal>. Create a new parameter
              and navigate to it.</para></listitem>

            <listitem><para><literal>Move Up</literal>. Only available
              where there are two or more parameters, and the parameter
              selected is not at the top. It is moved one up the
              list.</para></listitem>

            <listitem><para><literal>Move Down</literal>. Only available
              where there are two or more parameters listed, and the
              parameter selected is not at the bottom. It is moved
              one down the list.</para></listitem>
          </itemizedlist></listitem>
        </varlistentry>

        <!-- Entry for Raised Signals -->

        <varlistentry>
          <term><literal>Raised Signals</literal></term>

          <listitem><para>Text area, with entries for all the signals (see
            <xref linkend="s1.ref.signal"/>) that can be raised by the
            operation.</para>

          <caution><para>&argouml; at present has limited support for
            signals. In particular they are not linked to signal events
            that could drive state machines.</para></caution>

          <para>&Button1; click on any of the parameters
            navigates to that parameter. &button2; click brings up a pop up
            menu with four entries.</para>

          <itemizedlist>
            <listitem><para><literal>Open</literal>. Navigate to the
              selected signal.</para></listitem>

            <listitem><para><literal>Add</literal>. Create a new signal
              and navigate to it.</para></listitem>

            <listitem><para><literal>Move Up</literal>. Only available
              where there are two or more signals, and the signal
              selected is not at the top. It is moved one up the
              list.</para></listitem>

            <listitem><para><literal>Move Down</literal>. Only available
              where there are two or more signals listed, and the
              signal selected is not at the bottom. It is moved
              one down the list.</para></listitem>
          </itemizedlist></listitem>
        </varlistentry>
      </variablelist>
    </sect2>
  </sect1>

  <!-- Parameter artifact (subsidiary of Operation) -->

  <sect1 id="s1.ref.parameter">
    <title>Parameter</title>

    <para>A parameter is a variable that can be passed. In the UML metamodel it
      is a sub-class of <literal>ModelElement</literal>.</para>

    <para>A parameter is represented on within the operation declaration in the
      operation compartment of a class.</para>

    <blockquote><para><emphasis>name</emphasis> <literal>:</literal>
      <emphasis>type</emphasis></para></blockquote>

    <para><emphasis>name</emphasis> is the name of the parameter.</para>

    <para><emphasis>type</emphasis> is the type (UML datatype, class or
      interface) of the parameter.</para>

    <para>The exception is any parameter representing a return value, whose
      type only is shown at the end of the operation declaration.</para>

    <!-- Parameter details tabs -->

    <sect2>
      <title>Parameter Details Tabs</title>

      <para>The details tabs that are active for parameters are as
        follows.</para>

      <variablelist>

        <!-- Entry for ToDoItem tab -->

        <varlistentry>
          <term><literal>ToDoItem</literal></term>

          <listitem><para>Standard tab.</para></listitem>
        </varlistentry>

        <!-- Entry for Properties tab -->

        <varlistentry>
          <term><literal>Properties</literal></term>

          <listitem><para>See <xref
              linkend="s2.ref.parameter_property_toolbar"/> and <xref
              linkend="s2.ref.parameter_property_fields"/>
            below.</para></listitem>
        </varlistentry>

        <!-- Entry for Documentation tab -->

        <varlistentry>
          <term><literal>Documentation</literal></term>

          <listitem><para>Standard tab.</para></listitem>
        </varlistentry>

        <!-- Entry for Style tab -->

        <varlistentry>
          <term><literal>Style</literal></term>

          <listitem><para>Standard tab, but relating to the owning class,
            rather than the parameter. The tick boxes,
            <literal>Attributes</literal> and <literal>Operations</literal>
            allow the attributes and operations compartments of the class
            to be shown (the default) or hidden. The
            <literal>Bounds:</literal> field defines the bounding box for
            the package on the diagram.</para>

          <warning><para>There are some bugs remaining in entering data in
            the <literal>Bounds:</literal> field. Take care when typing
            that you do get the values you want in
            place.</para></warning></listitem>
        </varlistentry>

        <!-- Entry for Source tab -->

        <varlistentry>
          <term><literal>Source</literal></term>

          <listitem><para>Standard tab. This contains a declaration for the
            parameter.</para></listitem>
        </varlistentry>

        <!-- Entry for Constraints tab -->

        <varlistentry>
          <term><literal>Constraints</literal></term>

          <listitem><para>Standard tab. There are no standard constraints
            defined for <literal>Parameter</literal> within the UML
            metamodel.</para></listitem>
        </varlistentry>

        <!-- Entry for Tagged Values tab -->

        <varlistentry>
          <term><literal>Tagged Values</literal></term>

          <listitem><para>Standard tab. In the UML metamodel,
            <literal>Parameter</literal> has the following standard tagged
            values defined.</para>

            <itemizedlist>
              <listitem><para><literal>derived</literal> (from the
                superclass, <literal>ModelElement</literal>). Values
                <literal>true</literal>, meaning the parameter is
                redundant&mdash;it can be formally derived from other
                elements, or <literal>false</literal> meaning it
                cannot.</para>

              <caution><para>A derived parameter is a meaningless
                concept.</para></caution></listitem>
            </itemizedlist>

            <note><para>The UML <literal>Element</literal> metaclass from
              which all other artifacts are derived includes the tagged
              element <literal>documentation</literal> which is handled by
              the <emphasis>documentation tab</emphasis> under
              &argouml;</para></note></listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <!-- Parameter properties -->

    <sect2 id="s2.ref.parameter_property_toolbar">
      <title>Parameter Property Toolbar</title>

      <variablelist>

        <!-- Entry for Go up button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/navigate_up.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Go
            up</literal></term>

          <listitem><para>Navigate up through the package
            structure.</para></listitem>
        </varlistentry>

        <!-- Entry for Go back button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/navigate_back.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Go
            back</literal></term>

          <listitem><para>Navigate back to the previous
            artifact.</para>

          <warning><para>This feature is currently broken within &argouml;
            and there is no guarantee where (if anywhere) this button will
            take you.</para></warning>

          <warning><para>This feature is currently broken within &argouml;
            and there is no guarantee where (if anywhere) this button will
            take you.</para></warning></listitem>
        </varlistentry>

        <!-- Entry for Go forward button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/navigate_forward.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Go
            forward</literal></term>

          <listitem><para>Navigate forward to the next
            artifact.</para>

          <warning><para>This feature is currently broken within &argouml;
            and there is no guarantee where (if anywhere) this button will
            take you.</para></warning></listitem>
        </varlistentry>

        <!-- Entry for Add parameter -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/parameter.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Add
            parameter</literal></term>

          <listitem><para>This creates a new parameter for the for the same
            operation as the current parameter, navigating immediately to
            the properties tab for that parameter.</para>

          <tip><para>This is a convenient way to add a series of parameters
            for the same operation.</para></tip></listitem>
        </varlistentry>

        <!-- Entry for Delete button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/property_delete.gif"/>
          </imageobject></inlinemediaobject></guiicon>
            <literal>Delete</literal></term>

          <listitem><para>This deletes the parameter from the model</para>

          <warning><para>This is a deletion from the model
            <emphasis>not</emphasis> just the diagram. Since parameters
            have no meaning independent of their owning operation, it makes
            no sense to delete them just from the model. If desired the
            whole operation compartment can be hidden on the diagram using
            the <emphasis>style</emphasis> tab (see <xref
            linkend="s2.ref.parameter_property_toolbar"/>) or the
            &button2; pop up menu for the class on the
            diagram.</para></warning></listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <!-- Fields in the properties tab -->

    <sect2 id="s2.ref.parameter_property_fields">
      <title>Property Fields For Parameter</title>

      <variablelist>

        <!-- Entry for Name -->

        <varlistentry>
          <term><literal>Name</literal></term>

          <listitem><para>Text box. The name of the parameter. By convention,
            the name of a parameter has a leading lower case letter, with
            words separated by <quote>bumpy caps</quote>.</para>

          <note><para>The &argouml; critics do not complain about parameter
            names that do not have an initial lower case
            letter.</para></note></listitem>
        </varlistentry>

        <!-- Entry for Stereotype -->

        <varlistentry>
          <term><literal>Stereotype</literal></term>

          <listitem><para>Drop down selector. There are no UML standard
            stereotypes for <literal>Parameter</literal>. &argouml;
            provides the stereotypes, <literal>machine</literal>,
            <literal>organization</literal> and <literal>person</literal>,
            and rather strangely <literal>realize</literal> (a stereotype
            of <literal>Abstraction</literal>).</para>

          <caution><para>&argouml; provides the stereotype
            <literal>realize</literal> for parameters. This appears to be
            an error, since this stereotype properly belongs to the
            <literal>Abstraction</literal>
            metaclass.</para></caution></listitem>
        </varlistentry>

        <!-- Entry for NavStereo -->

        <varlistentry>
          <term><literal>Navigate Stereotype</literal></term>

          <listitem><para><guiicon><inlinemediaobject><imageobject><imagedata
              format="GIF" align="center"
              fileref="images/icons/navigate_stereotype.gif"/>
            </imageobject></inlinemediaobject></guiicon> icon. If a
              stereotype has been selected, this will navigate you to the
              stereotype property panel (see <xref
                linkend="s1.ref.stereotype_class"/>).</para></listitem>
        </varlistentry>

        <!-- Entry for Owner -->

        <varlistentry>
          <term><literal>Owner</literal></term>

          <listitem><para>Text box. Records the operation which contains this
            parameter.</para>

          <para>&Button1; click on the entry will navigate to the
            operation. &Button2; click provides a pop up menu with a single
            entry, <literal>Open</literal>, which will also navigate to the
            operation.</para></listitem>
        </varlistentry>

        <!-- Entry for Type -->

        <varlistentry>
          <term><literal>Type</literal></term>

          <listitem><para>Drop down selector. The type of this parameter. This
            can be any UML <literal>Classifier</literal>, although in
            practice only <literal>Class</literal>,
            <literal>DataType</literal> or <literal>Interface</literal>
            make any sense.</para>

          <note><para>A type must be declared (it can be
            <literal>void</literal>, but this only makes sense for a return
            parameter). By default &argouml; supplies
            <literal>int</literal> as the type the first time a parameter
            is created, and thereafter the type of the most recently
            created parameter.</para></note></listitem>
        </varlistentry>

        <!-- Entry for NavClass -->

        <varlistentry>
          <term><literal>Navigate Type</literal></term>

          <listitem><para><guiicon><inlinemediaobject><imageobject><imagedata
              format="GIF" align="center"
              fileref="images/icons/navigate_type.gif"/>
            </imageobject></inlinemediaobject></guiicon> icon. This will
            navigate you to the property panel for the currently selected
            type. (see <xref linkend="s1.ref.class_class"/>, <xref
              linkend="s1.ref.datatype_class"/> and <xref
              linkend="s1.ref.interface_class"/>).</para></listitem>
        </varlistentry>

        <!-- Entry for Initial Value -->

        <varlistentry>
          <term><literal>Initial Value</literal></term>

          <listitem><para>Text box with drop down. This allows you to set an
            initial value for the parameter if desired (this is
            optional). The drop down menu provides access to the common
            values <literal>0</literal>, <literal>1</literal>,
            <literal>2</literal> and <literal>null</literal>.</para>

          <caution><para>This only makes sense for <literal>out</literal>
            or <literal>return</literal>
            parameters.</para></caution></listitem>
        </varlistentry>

        <!-- Entry for Kind -->

        <varlistentry>
          <term><literal>Kind</literal></term>

          <listitem><para>Radio box, with entries <literal>in/out</literal>,
            <literal>in</literal>, <literal>out</literal> and
            <literal>return</literal>.</para>

          <itemizedlist>
            <listitem><para><literal>in/out</literal>. The parameter is
              used both to pass values in and to pass results back out of
              the operation.</para>

            <note><para>This is the default for any new
              parameter.</para></note></listitem>

            <listitem><para><literal>in</literal>. The parameter is used
              only to pass values in to the operation.</para></listitem>

            <listitem><para><literal>out</literal>. The parameter is used
              only to pass values back from the
              operation.</para></listitem>

            <listitem><para><literal>return</literal>. The parameter is a
              return result from the call.</para>

            <note><para>There is nothing to stop you declaring more than
              one return parameter (some programming languages support this
              concept), but all except the first appear in the list of
              parameters passed in on the diagram, which is
              confusing.</para></note>

            <tip><para>The name of the return parameter does not appear on
              the diagram, but it is convenient to give it an appropriate
              name (such as the default <literal>return</literal> to
              identify it in the list of parameters on the operation
              property tab.</para></tip></listitem>
          </itemizedlist></listitem>
        </varlistentry>
      </variablelist>
    </sect2>
  </sect1>

  <!-- Signal artifact (subsidiary of Operation). Also relevant to state
       diagrams. -->

  <sect1 id="s1.ref.signal">
    <title>Signal</title>

    <para>A signal is a specification of an asynchronous stimulus communicated
      between instances. In the UML metamodel it is a sub-class of
      <literal>Classifier</literal>.</para>

    <para>Within &argouml; signals are not fully handled. Their value is when
      they are received as <emphasis>signal events</emphasis> driving the
      asynchronous behavior of state machines and when associated with
      <emphasis>send actions</emphasis> in state machines and messages for
      collaboration diagrams.</para>

    <tip><para>In general there is limited value at present in defining signals
      within &argouml;. It may prove more useful to define signals as classes,
      with a (user defined) stereotype of
      <literal>&laquo;signal&raquo;</literal> as suggested in the UML 1.3
      standard. This allows any dependency relationships between signals to be
      shown.</para></tip>

    <!-- Signal details tabs -->

    <sect2>
      <title>Signal Details Tabs</title>

      <para>The details tabs that are active for signals are as
        follows.</para>

      <variablelist>

        <!-- Entry for ToDoItem tab -->

        <varlistentry>
          <term><literal>ToDoItem</literal></term>

          <listitem><para>Standard tab.</para></listitem>
        </varlistentry>

        <!-- Entry for Properties tab -->

        <varlistentry>
          <term><literal>Properties</literal></term>

          <listitem><para>See <xref
              linkend="s2.ref.signal_property_toolbar"/> and <xref
              linkend="s2.ref.signal_property_fields"/>
            below.</para></listitem>
        </varlistentry>

        <!-- Entry for Documentation tab -->

        <varlistentry>
          <term><literal>Documentation</literal></term>

          <listitem><para>Standard tab.</para></listitem>
        </varlistentry>

        <!-- Entry for Style tab -->

        <varlistentry>
          <term><literal>Style</literal></term>

          <listitem><para>Standard tab, but relating to the owning class,
            rather than the signal. The tick boxes,
            <literal>Attributes</literal> and <literal>Operations</literal>
            allow the attributes and operations compartments of the class
            to be shown (the default) or hidden. The
            <literal>Bounds:</literal> field defines the bounding box for
            the package on the diagram.</para>

          <warning><para>There are some bugs remaining in entering data in
            the <literal>Bounds:</literal> field. Take care when typing
            that you do get the values you want in
            place.</para></warning></listitem>
        </varlistentry>

        <!-- Entry for Source tab -->

        <varlistentry>
          <term><literal>Source</literal></term>

          <listitem><para>Standard tab. There is nothing generated for a
            signal.</para></listitem>
        </varlistentry>

        <!-- Entry for Constraints tab -->

        <varlistentry>
          <term><literal>Constraints</literal></term>

          <listitem><para>Standard tab. There are no standard constraints
            defined for <literal>Signal</literal> within the UML
            metamodel.</para></listitem>
        </varlistentry>

        <!-- Entry for Tagged Values tab -->

        <varlistentry>
          <term><literal>Tagged Values</literal></term>

          <listitem><para>Standard tab. In the UML metamodel,
            <literal>Signal</literal> has the following standard tagged
            values defined.</para>

            <itemizedlist>
              <listitem><para><literal>persistence</literal> (from the
                superclass, <literal>Classifier</literal>). Values
                <literal>transitory</literal>, indicating state is
                destroyed when an instance is destroyed or
                <literal>persistent</literal>, marking state is
                preserved when an instance is destroyed.</para></listitem>

              <listitem><para><literal>semantics</literal> (from the
                superclass, <literal>Classifier</literal>). The value is a
                specification of the semantics of the
                signal.</para></listitem>

              <listitem><para><literal>derived</literal> (from the
                superclass, <literal>ModelElement</literal>). Values
                <literal>true</literal>, meaning the signal is
                redundant&mdash;it can be formally derived from other
                elements, or <literal>false</literal> meaning it
                cannot.</para>

              <note><para>Derived signals still have their value in
                analysis to introduce useful names or concepts, and in
                design to avoid re-computation.</para></note></listitem>
            </itemizedlist>

            <note><para>The UML <literal>Element</literal> metaclass from
              which all other artifacts are derived includes the tagged
              element <literal>documentation</literal> which is handled by
              the <emphasis>documentation tab</emphasis> under
              &argouml;</para></note></listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <!-- Signal properties -->

    <sect2 id="s2.ref.signal_property_toolbar">
      <title>Signal Property Toolbar</title>

      <variablelist>

        <!-- Entry for Go up button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/navigate_up.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Go
            up</literal></term>

          <listitem><para>Navigate up through the package
            structure.</para></listitem>
        </varlistentry>

        <!-- Entry for Go back button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/navigate_back.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Go
            back</literal></term>

          <listitem><para>Navigate back to the previous
            artifact.</para>

          <warning><para>This feature is currently broken within &argouml;
            and there is no guarantee where (if anywhere) this button will
            take you.</para></warning>

          <warning><para>This feature is currently broken within &argouml;
            and there is no guarantee where (if anywhere) this button will
            take you.</para></warning></listitem>
        </varlistentry>

        <!-- Entry for Go forward button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/navigate_forward.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Go
            forward</literal></term>

          <listitem><para>Navigate forward to the next
            artifact.</para>

          <warning><para>This feature is currently broken within &argouml;
            and there is no guarantee where (if anywhere) this button will
            take you.</para></warning></listitem>
        </varlistentry>

        <!-- Entry for Add operation button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/operation.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Add
            operation</literal></term>

          <listitem><para>This creates a new operation (see <xref
              linkend="s1.ref.operation"/>) for the signal, navigating
              immediately to the properties tab for that
              operation.</para>

          <caution><para>Although signals are very similar to classes, it
            makes little sense to define operations for
            them.</para></caution></listitem>
        </varlistentry>

        <!-- Entry for Add attribute -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/attribute.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Add
            attribute</literal></term>

          <listitem><para>This creates a new attribute (see <xref
              linkend="s1.ref.attribute"/>)  for the signal, navigating
            immediately to the properties tab for that
            attribute.</para>

          <note><para>The attributes are effectively the parameters of the
            signal.</para></note></listitem>
        </varlistentry>

        <!-- Entry for New signal -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/signal.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>New
            signal</literal></term>

          <listitem><para>This creates a new signal, navigating immediately to
            the properties tab for that signal.</para>

          <note><para>&argouml; uses the icon for a class for this button,
            rather than the icon for a signal.</para></note>

          <caution><para>The signal is not associated with the same
            operation as the original signal, so there appears no way to
            use it in the model.</para></caution></listitem>
        </varlistentry>

        <!-- Entry for Delete button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/property_delete.gif"/>
          </imageobject></inlinemediaobject></guiicon>
            <literal>Delete</literal></term>

          <listitem><para>This deletes the signal from the model</para>

          <warning><para>This is a deletion from the model. &argouml; at
            present has no way of referencing signals independently of
            their owning operation, and so once deleted they can not be
            accessed.</para></warning></listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <!-- Fields in the properties tab -->

    <sect2 id="s2.ref.signal_property_fields">
      <title>Property Fields For Signal</title>

      <variablelist>

        <!-- Entry for Name -->

        <varlistentry>
          <term><literal>Name</literal></term>

          <listitem><para>Text box. The name of the signal. From their
            similarity to classes, by convention,
            the name of a signal has a leading upper case letter, with
            words separated by <quote>bumpy caps</quote>.</para>

          <note><para>The &argouml; critics do not complain about signal
            names that do not have an initial upper case
            letter.</para></note></listitem>
        </varlistentry>

        <!-- Entry for Stereotype -->

        <varlistentry>
          <term><literal>Stereotype</literal></term>

          <listitem><para>Drop down selector. Signal is provided by default
            with the UML standard stereotypes for its parent in the
            UML meta-model, <literal>Classifier</literal>
            (<literal>metaclass</literal>, <literal>powerType</literal>,
            <literal>process</literal>, <literal>thread</literal> and
            <literal>utility</literal>).
            &argouml; also provides the additional stereotypes,
            <literal>machine</literal>, <literal>organization</literal> and
            <literal>person</literal>, and rather strangely
            <literal>realize</literal> (a stereotype of
            <literal>Abstraction</literal>).</para>

          <caution><para>&argouml; provides the stereotype
            <literal>realize</literal> for parameters. This appears to be
            an error, since this stereotype properly belongs to the
            <literal>Abstraction</literal>
            metaclass.</para></caution></listitem>
        </varlistentry>

        <!-- Entry for NavStereo -->

        <varlistentry>
          <term><literal>Navigate Stereotype</literal></term>

          <listitem><para><guiicon><inlinemediaobject><imageobject><imagedata
              format="GIF" align="center"
              fileref="images/icons/navigate_stereotype.gif"/>
            </imageobject></inlinemediaobject></guiicon> icon. If a
              stereotype has been selected, this will navigate you to the
              stereotype property panel (see <xref
                linkend="s1.ref.stereotype_class"/>).</para></listitem>
        </varlistentry>

        <!-- Entry for Extends -->

        <varlistentry>
          <term><literal>Extends</literal></term>

          <listitem><para>Text box. Lists any class that generalizes this
            class (see <xref
              linkend="s1.ref.generalization_class"/>).</para>

          <caution><para>&argouml; is incorrect in using the designation
            <quote>Extends</quote> for this field. It should correctly be
            called <quote>Generalizations</quote>.</para></caution>

          <para>By default this field is shown with the entry
            <literal>none</literal>. &Button1; click takes you to the
            selected entry, &button2; gives a pop up menu with five
            entries.</para>

          <itemizedlist>
            <listitem><para><literal>Open</literal>. Navigate to the
              selected generalization.</para></listitem>

            <listitem><para><literal>Add</literal>. Add a new
              generalization and navigate to that new
              generalization.</para>

            <caution><para>&argouml; creates the generalization with the
              signal as child, but no parent, and no menu for adding a
              parent. The name will always appear as
              <literal>null</literal>.</para></caution></listitem>

            <listitem><para><literal>Delete</literal>. Removes the link to
              the selected generalization.</para>

            <note><para>This only removes the link to the
              generalization. To remove the generalization from the model
              you must navigate to it (or select it on the diagram or
              navigation pane) and then delete it.</para></note></listitem>

            <listitem><para><literal>Move Up</literal>. Only available
              where there are two or more generalizations, and the
              generalization selected is not at the top. It is moved one up
              the list.</para></listitem>

            <listitem><para><literal>Move Down</literal>. Only available
              where there are two or more generalizations listed, and the
              generalization selected is not at the bottom. It is moved
              one down the list.</para></listitem>
          </itemizedlist>

          <caution><para>&argouml; allows you to create generalizations,
            but not to specify parents, so they are of no use at
            all.</para></caution>

          <tip><para>To specify detailed properties of signals define them
            as classes with the stereotype
            <literal>&laquo;signal&raquo;</literal>.</para></tip></listitem>
        </varlistentry>

        <!-- Entry for Implements -->

        <varlistentry>
          <term><literal>Implements</literal></term>

          <listitem><para>Text box. Lists any class or interface that is
            realized by this signal. (see <xref
              linkend="s1.ref.abstraction"/>).</para>

          <caution><para>&argouml; is incorrect in using the designation
            <quote>Extends</quote> for this field. It should correctly be
            called <quote>Realizes</quote>.</para></caution>

          <para>By default this field is shown with the entry
            <literal>none</literal>. &Button1; click takes you to the
            selected entry, &button2; gives a pop up menu with five
            entries.</para>

          <itemizedlist>
            <listitem><para><literal>Open</literal>. Navigate to the
              selected abstraction.</para></listitem>

            <listitem><para><literal>Add</literal>. Add a new
              abstraction.</para>

            <caution><para>&argouml; creates the abstraction with the
              signal as client, but no supplier, and no menu for adding a
              supplier. The name will always appear as
              <literal>[empty]</literal>.</para></caution></listitem>

            <listitem><para><literal>Delete</literal>. Removes the link to
              the selected abstraction.</para>

            <note><para>This only removes the link to the
              abstraction. To remove the abstraction from the model
              you must navigate to it (or select it on the diagram or
              navigation pane) and then delete it.</para></note></listitem>

            <listitem><para><literal>Move Up</literal>. Only available
              where there are two or more abstractions, and the
              abstraction selected is not at the top. It is moved one up
              the list.</para></listitem>

            <listitem><para><literal>Move Down</literal>. Only available
              where there are two or more abstractions listed, and the
              abstraction selected is not at the bottom. It is moved
              one down the list.</para></listitem>
          </itemizedlist>

          <caution><para>&argouml; allows you to create abstractions, but
            not to specify suppliers, so they are of no use at all. Since
            signals should not have operations or attributes, abstraction
            seems a meaningless concept.</para></caution></listitem>
        </varlistentry>

        <!-- Entry for Modifiers -->

        <varlistentry>
          <term><literal>Modifiers</literal></term>

          <listitem><para>Check box, with entries <literal>public</literal>,
            <literal>abstract</literal>, 
            <literal>final</literal> and <literal>root</literal>.</para>

          <itemizedlist>
            <listitem><para><literal>public</literal> has identical meaning
              to the <literal>public</literal> declaration in Java. It
              indicates whether this signal is restricted to use in its own
              package (the default) or can be used by
              anyone.</para>

            <caution><para>With the limited support for signals within
              &argouml;, signals are effectively tied to their owning
              operation anyway.</para></caution></listitem>

            <listitem><para><literal>abstract</literal> is used to declare
              that this signal cannot be instantiated, but must always be
              specialized.</para>

            <caution><para>&argouml; provides no mechanism for defining
              specialization between signals.</para></caution></listitem>

            <listitem><para><literal>final</literal> indicates that this
              signal cannot be further specialized, while
              <literal>root</literal> indicates it can have no
              generalization.</para>

            <caution><para>&argouml; provides no mechanism for defining
              specialization between signals, so all should be declared
              both <literal>final</literal> and
              <literal>root.</literal></para></caution></listitem>
          </itemizedlist></listitem>
        </varlistentry>

        <!-- Entry for Namespace -->

        <varlistentry>
          <term><literal>Namespace</literal></term>

          <listitem><para>Text box. Records the namespace for the
            class. This is the package hierarchy of the class which owns
            the operation which owns this signal.</para>

          <para>&Button1; click on the entry will take you to the package
            defining this namespace (or the model for the top level
            namespace).</para></listitem>
        </varlistentry>

        <!-- Entry for Derived -->

        <varlistentry>
          <term><literal>Derived</literal></term>

          <listitem><para>Text area. Lists any derived signals, i.e those for
            which this signal is a generalization. There is a single entry
            shown by default, <literal>none</literal>.</para>

          <para>&Button1; click has no effect, &button2; gives a pop up
            menu with a single entry which is always grayed out.</para> 

          <note><para>This field has no use for a
            signal.</para></note></listitem>
        </varlistentry>

        <!-- Entry for Operations -->

        <varlistentry>
          <term><literal>Operations</literal></term>

          <listitem><para>Text area. Lists all the operations (see <xref
              linkend="s1.ref.operation"/>) defined on this
              signal. &Button1; click takes you to the selected operation,
              &button2; click brings up a pop up menu with five
              entries.</para>

          <itemizedlist>
            <listitem><para><literal>Open</literal>. Navigate to the
              selected operation.</para></listitem>

            <listitem><para><literal>Add</literal>. Add a new
              operation and navigate to it.</para></listitem>

            <listitem><para><literal>Delete</literal>. Removes the selected
              operation from the model.</para></listitem>

            <listitem><para><literal>Move Up</literal>. Only available
              where there are two or more operations, and the operation
              selected is not at the top. It is moved one up the
              list.</para></listitem>

            <listitem><para><literal>Move Down</literal>. Only available
              where there are two or more operations listed, and the
              operation selected is not at the bottom. It is moved
              one down the list.</para></listitem>
          </itemizedlist>

          <caution><para>Signals should not have any
            operations.</para></caution></listitem>
        </varlistentry>

        <!-- Entry for Attributes -->

        <varlistentry>
          <term><literal>Attributes</literal></term>

          <listitem><para>Text area. Lists all the attributes (see <xref
              linkend="s1.ref.attribute"/>) defined for this class. These
            are effectively the parameters to the signal. &Button1; click
            takes you to the selected attribute, &button2; click brings
            up a pop up menu with five entries.</para>

          <itemizedlist>
            <listitem><para><literal>Open</literal>. Navigate to the
              selected attribute.</para></listitem>

            <listitem><para><literal>Add</literal>. Add a new
              attribute and navigate to it.</para></listitem>

            <listitem><para><literal>Delete</literal>. Removes the selected
              attribute from the model.</para></listitem>

            <listitem><para><literal>Move Up</literal>. Only available
              where there are two or more attributes, and the attribute
              selected is not at the top. It is moved one up the
              list.</para></listitem>

            <listitem><para><literal>Move Down</literal>. Only available
              where there are two or more attributes listed, and the
              attribute selected is not at the bottom. It is moved
              one down the list.</para></listitem>
          </itemizedlist></listitem>
        </varlistentry>

        <!-- Entry for Associations -->

        <varlistentry>
          <term><literal>Associations</literal></term>

          <listitem><para>Text area. Lists all the associations (see <xref
              linkend="s1.ref.association_class"/>) defined on this
              signal. &Button1; click takes you to the selected
              association, &button2; click brings up a pop up menu with
              five entries.</para>

          <itemizedlist>
            <listitem><para><literal>Open</literal>. Navigate to the
              selected association.</para></listitem>

            <listitem><para><literal>Add</literal>. Add a new
              association and navigate to it.</para></listitem>

            <listitem><para><literal>Delete</literal>. Removes the selected
              association from the model.</para></listitem>

            <listitem><para><literal>Move Up</literal>. Only available
              where there are two or more associations, and the association
              selected is not at the top. It is moved one up the
              list.</para></listitem>

            <listitem><para><literal>Move Down</literal>. Only available
              where there are two or more associations listed, and the
              association selected is not at the bottom. It is moved
              one down the list.</para></listitem>
          </itemizedlist>

          <caution><para>Signals should not have any
            associations&mdash;the concept is
            meaningless.</para></caution></listitem>
        </varlistentry>
      </variablelist>
    </sect2>
  </sect1>

  <!-- Association artifact. Has Association End as sub-artifact. Reference
       back to Use Case -->

  <sect1 id="s1.ref.association_class">
    <title>Association</title>

    <para>An association on a class diagram represents a relationship between
      classes, or between classes and an interface.</para>

    <caution><para>&argouml; is restricted to binary associations at
      present. See <xref linkend="s2.ref.association_multiway"/> for more on
      this.</para></caution>

    <para>Associations are described under use case diagrams (see <xref
      linkend="s1.ref.association_use_case"/>). There are a few additional
      issues specific to their use on class diagrams.</para>

    <para>Associations are permitted between interfaces and classes, but
      UML&nbsp;1.3 specifies they must only be navigable toward the
      interface&mdash;in other words the interface cannot see the
      class. &argouml; will draw such associations with the appropriate
      navigation.</para>

    <para>As with use case diagrams, associations with the tag
      <literal>derived</literal> have their value in analysis to introduce
      useful names or concepts, and in design to avoid re-computation.</para>

    <para>As with use case diagrams, associations are often not named, since
      their meaning is obvious from the context.</para>

    <para>As with use case diagrams, there is little value in creating more
      than two association ends, since &argouml; does not support multi-way
      associations.</para>

    <!-- A bit about multiway associations -->

    <sect2 id="s2.ref.association_multiway">
      <title>Three-way and Greater Associations</title>

      <para>UML&nbsp;1.3 provides for associations that are governed by a third
        <emphasis>associative class</emphasis>. &argouml; provides no support
        for multi-way associations or associative classes at this stage.</para>
    </sect2>
  </sect1>

  <!-- Association End artifact (sub-artifact of Association). Reference back
       to Use Case -->

  <sect1 id="s1.ref.association_end_class">
    <title>Association End</title>

    <para>Association ends are described under use case diagrams (see <xref
      linkend="s1.ref.association_end_use_case"/>).</para>
  </sect1>

  <!-- Dependency artifact. Reference back to Use Case -->

  <sect1 id="s1.ref.dependency_class">
    <title>Dependency</title>

    <para>Dependencies are described under use case diagrams (see <xref
      linkend="s1.ref.dependency_use_case"/>).</para>
  </sect1>

  <!-- Generalization artifact. Reference back to Use Case -->

  <sect1 id="s1.ref.generalization_class">
    <title>Generalization</title>

    <para>Generalization is described under use case diagrams (see <xref
      linkend="s1.ref.generalization_use_case"/>).</para>

    <note><para>Within the context of classes, generalization and
      specialization are the UML terms describing class
      inheritance.</para></note>
  </sect1>

  <!-- Interface artifact -->

  <sect1 id="s1.ref.interface_class">
    <title>Interface</title>

    <para>An interface is a set of operations characterizing the behavior of
      an element. It can be usefully thought of as an abstract class with no
      attributes. In the UML metamodel it is a sub-class of
      <literal>Classifier</literal> and through that
      <literal>GeneralizableElement</literal>.</para>

    <para>A class is represented on a class diagram as a rectangle with two
      horizontal compartments. The top compartment displays the interface name
      (and above it <literal>&laquo;interface&raquo;</literal>) and the second
      any operations. Unlike a class, the operations compartment may not be
      hidden.</para>

    <!-- Interface details tabs -->

    <sect2>
      <title>Interface Details Tabs</title>

      <para>The details tabs that are active for interfaces are as
        follows.</para>

      <variablelist>

        <!-- Entry for ToDoItem tab -->

        <varlistentry>
          <term><literal>ToDoItem</literal></term>

          <listitem><para>Standard tab.</para></listitem>
        </varlistentry>

        <!-- Entry for Properties tab -->

        <varlistentry>
          <term><literal>Properties</literal></term>

          <listitem><para>See <xref
              linkend="s2.ref.interface_property_toolbar"/> and <xref
              linkend="s2.ref.interface_property_fields"/>
            below.</para></listitem>
        </varlistentry>

        <!-- Entry for Documentation tab -->

        <varlistentry>
          <term><literal>Documentation</literal></term>

          <listitem><para>Standard tab.</para></listitem>
        </varlistentry>

        <!-- Entry for Style tab -->

        <varlistentry>
          <term><literal>Style</literal></term>

          <listitem><para>Standard tab. The <literal>Bounds:</literal> field
            defines the bounding box for the package on the diagram.</para>

          <warning><para>There are some bugs remaining in entering data in
            the <literal>Bounds:</literal> field. Take care when typing
            that you do get the values you want in
            place.</para></warning></listitem>
        </varlistentry>

        <!-- Entry for Source tab -->

        <varlistentry>
          <term><literal>Source</literal></term>

          <listitem><para>Standard tab. This contains a template for the
            interface declaration (with JavaDoc header) and declarations of
            associated interfaces.</para></listitem>
        </varlistentry>

        <!-- Entry for Constraints tab -->

        <varlistentry>
          <term><literal>Constraints</literal></term>

          <listitem><para>Standard tab. There are no standard constraints
            defined for <literal>Interface</literal> within the UML
            metamodel.</para></listitem>
        </varlistentry>

        <!-- Entry for Tagged Values tab -->

        <varlistentry>
          <term><literal>Tagged Values</literal></term>

          <listitem><para>Standard tab. In the UML metamodel,
            <literal>Interface</literal> has the following standard tagged
            values defined.</para>

            <itemizedlist>
              <listitem><para><literal>persistence</literal> (from the
                superclass, <literal>Classifier</literal>). Values
                <literal>transitory</literal>, indicating state is
                destroyed when an instance is destroyed or
                <literal>persistent</literal>, marking state is
                preserved when an instance is destroyed.</para>

              <warning><para>Since interfaces are by definition abstract,
                they can have no instance, and so this tagged value must
                refer to the properties of the realizing
                class.</para></warning></listitem>

              <listitem><para><literal>semantics</literal> (from the
                superclass, <literal>Classifier</literal>). The value is a
                specification of the semantics of the
                interface.</para></listitem>

              <listitem><para><literal>derived</literal> (from the
                superclass, <literal>ModelElement</literal>). Values
                <literal>true</literal>, meaning the interface is
                redundant&mdash;it can be formally derived from other
                elements, or <literal>false</literal> meaning it
                cannot.</para>

              <note><para>Derived interfaces still have their value in
                analysis to introduce useful names or concepts, and in
                design to avoid re-computation.</para></note></listitem>
            </itemizedlist>

            <note><para>The UML <literal>Element</literal> metaclass from
              which all other artifacts are derived includes the tagged
              element <literal>documentation</literal> which is handled by
              the <emphasis>documentation tab</emphasis> under
              &argouml;</para></note></listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <!-- Interface properties -->

    <sect2 id="s2.ref.interface_property_toolbar">
      <title>Interface Property Toolbar</title>

      <variablelist>

        <!-- Entry for Go up button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/navigate_up.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Go
            up</literal></term>

          <listitem><para>Navigate up through the package
            structure.</para></listitem>
        </varlistentry>

        <!-- Entry for Go back button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/navigate_back.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Go
            back</literal></term>

          <listitem><para>Navigate back to the previous
            artifact.</para>

          <warning><para>This feature is currently broken within &argouml;
            and there is no guarantee where (if anywhere) this button will
            take you.</para></warning></listitem>
        </varlistentry>

        <!-- Entry for Go forward button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/navigate_forward.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Go
            forward</literal></term>

          <listitem><para>Navigate forward to the next
            artifact.</para>

          <warning><para>This feature is currently broken within &argouml;
            and there is no guarantee where (if anywhere) this button will
            take you.</para></warning></listitem>
        </varlistentry>

        <!-- Entry for Add operation button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/operation.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Add
            operation</literal></term>

          <listitem><para>This creates a new operation (see <xref
              linkend="s1.ref.operation"/>) within the interface,
              navigating immediately to the properties tab for that
              operation.</para></listitem>
        </varlistentry>

        <!-- Entry for Delete button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/property_delete.gif"/>
          </imageobject></inlinemediaobject></guiicon>
            <literal>Delete</literal></term>

          <listitem><para>This deletes the interface from the model</para>

          <warning><para>This is a deletion from the model
            <emphasis>not</emphasis> just the diagram. To delete an
            interface from the diagram, but keep it within the model, use
            the main menu <literal>Edit/Remove From Diagram</literal>
            (Ctrl-R).</para></warning></listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <!-- Fields in the properties tab -->

    <sect2 id="s2.ref.interface_property_fields">
      <title>Property Fields For Interface</title>

      <variablelist>

        <!-- Entry for Name -->

        <varlistentry>
          <term><literal>Name</literal></term>

          <listitem><para>Text box. The name of the interface. The name of an
            interface has a leading capital letter, with words separated by
            <quote>bumpy caps</quote>.</para>

          <note><para>Unlike classes, the &argouml; critics will not
            complain about interface names that do not have an initial
            capital.</para></note></listitem>
        </varlistentry>

        <!-- Entry for Stereotype -->

        <varlistentry>
          <term><literal>Stereotype</literal></term>

          <listitem><para>Drop down selector. Interface is provided by default
            with the UML standard stereotypes for the parent meta-class,
            <literal>Classifier</literal> (<literal>metaclass</literal>,
            <literal>powerType</literal>, <literal>process</literal>,
            <literal>thread</literal> and <literal>utility</literal>).
            &argouml; also provides the additional stereotypes,
            <literal>machine</literal>, <literal>organization</literal> and
            <literal>person</literal>, and rather strangely
            <literal>realize</literal> (a stereotype of
            <literal>Abstraction</literal>).</para>

          <caution><para>&argouml; provides the stereotype
            <literal>realize</literal> for interfaces. This appears to be
            an error, since this stereotype properly belongs to the
            <literal>Abstraction</literal>
            metaclass.</para></caution></listitem>
        </varlistentry>

        <!-- Entry for NavStereo -->

        <varlistentry>
          <term><literal>Navigate Stereotype</literal></term>

          <listitem><para><guiicon><inlinemediaobject><imageobject><imagedata
              format="GIF" align="center"
              fileref="images/icons/navigate_stereotype.gif"/>
            </imageobject></inlinemediaobject></guiicon> icon. If a
              stereotype has been selected, this will navigate you to the
              stereotype property panel (see <xref
                linkend="s1.ref.stereotype_class"/>).</para></listitem>
        </varlistentry>

        <!-- Entry for Namespace -->

        <varlistentry>
          <term><literal>Namespace</literal></term>

          <listitem><para>Text box. Records the namespace for the
            interface. This is the package hierarchy.</para>

          <para>&Button1; click on the entry will take you to the package
            defining this namespace (or the model for the top level
            namespace).</para></listitem>
        </varlistentry>

        <!-- Entry for Extends -->

        <varlistentry>
          <term><literal>Extends</literal></term>

          <listitem><para>Text box. Lists any interface that generalizes this
            interface (see <xref
              linkend="s1.ref.generalization_class"/>).</para>

          <caution><para>&argouml; is incorrect in using the designation
            <quote>Extends</quote> for this field. It should correctly be
            called <quote>Generalizations</quote>.</para></caution>

          <para>&Button1; click takes you to the selected entry, &button2;
            gives a pop up menu with five entries.</para>

          <itemizedlist>
            <listitem><para><literal>Open</literal>. Navigate to the
              selected generalization.</para></listitem>

            <listitem><para><literal>Add</literal>. Add a new
              generalization.</para>

            <note><para>&argouml; always has this option grayed out, which
              appears to be a bug.</para></note>

            <tip><para>New generalizations can be added from the class
              diagram (but note the caution about multiple generalizations
              below).</para></tip></listitem>

            <listitem><para><literal>Delete</literal>. Removes the link to
              the selected generalization.</para>

            <note><para>This only removes the link to the
              generalization. To remove the generalization from the model
              you must navigate to it (or select it on the diagram or
              navigation pane) and then delete it.</para></note></listitem>

            <listitem><para><literal>Move Up</literal>. Only available
              where there are two or more generalizations, and the
              generalization selected is not at the top. It is moved one up
              the list.</para></listitem>

            <listitem><para><literal>Move Down</literal>. Only available
              where there are two or more generalizations listed, and the
              generalization selected is not at the bottom. It is moved
              one down the list.</para></listitem>
          </itemizedlist>

          <caution><para>UML&nbsp;1.3 allows you to create multiple
            generalizations from a interface, in other words permits
            multiple inheritance. You should bear in mind that the absence
            of multiple inheritance in many popular programming languages
            (notably C++ and Java) may lead to implementation difficulties
            with such designs.</para></caution></listitem>
        </varlistentry>

        <!-- Entry for Modifiers -->

        <varlistentry>
          <term><literal>Modifiers</literal></term>

          <listitem><para>Check box, with entries <literal>public</literal>,
            <literal>abstract</literal>, <literal>final</literal> and
            <literal>root</literal>.</para>

          <itemizedlist>
            <listitem><para><literal>public</literal> has identical meaning
              to the <literal>public</literal> declaration in Java. It
              indicated whether this interface is restricted to use in its
              own package (the default) or can be used by
              anyone.</para></listitem>

            <listitem><para><literal>abstract</literal> is used to declare
              that this interface cannot be instantiated, but must always
              be specialized. The name of an abstract interface is
              displayed in italics on the diagram.</para>

            <caution><para>This is meaningless, since by definition an
              interface is an abstract entity. The UML&nbsp;1.3 standard
              offers no clarification.</para></caution></listitem>

            <listitem><para><literal>final</literal> indicates that this
              interface cannot be further specialized, while
              <literal>root</literal> indicates it can have no
              generalizations.</para></listitem>
          </itemizedlist></listitem>
        </varlistentry>

        <!-- Entry for Associations -->

        <varlistentry>
          <term><literal>Associations</literal></term>

          <listitem><para>Text box. Lists any associations (see <xref
              linkend="s1.ref.association_class"/>) connected to this
            interface.</para>

          <note><para>Associations between classes and interfaces
            <emphasis>must</emphasis> be navigable
            <emphasis>only</emphasis> from the class to the
            interface. &argouml; will create associations between classes
            and interfaces with the correct navigability.</para></note>

          <para>&Button1; click takes you to the selected entry, &button2;
            gives a pop up menu with five entries.</para>

          <itemizedlist>
            <listitem><para><literal>Open</literal>. Navigate to the
              selected association.</para></listitem>

            <listitem><para><literal>Add</literal>. Add a new
              association.</para>

            <tip><para>New associations can usually more easily be added
              from the interface diagram.</para></tip></listitem>

            <listitem><para><literal>Delete</literal>. Removes the link to
              the selected association.</para>

            <note><para>This only removes the link to the
              association. To remove the association from the model
              you must navigate to it (or select it on the diagram or
              navigation pane) and then delete it.</para></note></listitem>

            <listitem><para><literal>Move Up</literal>. Only available
              where there are two or more associations, and the
              association selected is not at the top. It is moved one up
              the list.</para></listitem>

            <listitem><para><literal>Move Down</literal>. Only available
              where there are two or more associations listed, and the
              association selected is not at the bottom. It is moved
              one down the list.</para></listitem>
          </itemizedlist></listitem>
        </varlistentry>

        <!-- Entry for Implements -->

        <varlistentry>
          <term><literal>Implementations</literal></term>

          <listitem><para>Text box. Lists any classes or interfaces (see <xref
              linkend="s1.ref.association_class"/>) which are an abstraction
              of this interface (i.e. which this interface
              realizes).</para>

          <note><para>This field should probably be correctly labeled
            <literal>Implements</literal></para></note>

          <warning><para>Although the UML&nbsp;1.3 standard does not appear
            to forbid this, &argouml; does not support abstraction of
            interfaces.</para></warning>

          <para>This entry is always shown as
            <literal>none</literal>. &Button1; click has no effect, and
            &button2; gives a pop up menu with five entries all grayed
            out.</para></listitem>
        </varlistentry>

        <!-- Entry for Derived -->

        <varlistentry>
          <term><literal>Derived</literal></term>

          <listitem><para>Text area. Lists any derived interfaces, i.e those
            for which this interface is a generalization.</para>

          <caution><para>This field should be correctly labeled
            <literal>Generalizes</literal>.</para></caution>

          <para>&Button1; click takes you to the generalization for the
            selected entry, &button2; gives a pop up menu with a single
            entry, <literal>Open</literal>which also takes you to the
            generalization.</para>

          <tip><para>There may be difficulties setting up the
            generalization parent this way. It is usually clearer to add
            the generalization on a diagram.</para></tip>

          <caution><para>You may potentially have a large number of entries
            here, and the pop up menu makes access very difficult. The work
            around is to go to the parent interfaces on the diagram or the
            navigation pane.</para></caution></listitem>
        </varlistentry>

        <!-- Entry for Operations -->

        <varlistentry>
          <term><literal>Operations</literal></term>

          <listitem><para>Text area. Lists all the operations (see <xref
              linkend="s1.ref.operation"/>) defined on this
              interface. &Button1; click takes you to the selected
              operation, &button2; click brings up a pop up menu with five
              entries.</para>

          <itemizedlist>
            <listitem><para><literal>Open</literal>. Navigate to the
              selected operation.</para></listitem>

            <listitem><para><literal>Add</literal>. Add a new
              operation and navigate to it.</para></listitem>

            <listitem><para><literal>Delete</literal>. Removes the selected
              operation from the model.</para></listitem>

            <listitem><para><literal>Move Up</literal>. Only available
              where there are two or more operations, and the operation
              selected is not at the top. It is moved one up the
              list.</para></listitem>

            <listitem><para><literal>Move Down</literal>. Only available
              where there are two or more operations listed, and the
              operation selected is not at the bottom. It is moved
              one down the list.</para></listitem>
          </itemizedlist>

          <caution><para>All operations on an interface
            <emphasis>must</emphasis> be public. The &argouml; critics will
            complain if this is not the case.</para></caution></listitem>
        </varlistentry>
      </variablelist>
    </sect2>
  </sect1>

  <!-- Abstraction artifact. Make it clear that realization is just a
       stereotyped abstraction. -->

  <sect1 id="s1.ref.abstraction">
    <title>Abstraction</title>

    <para>An abstraction is a dependency relationship joining two artifacts
      within the model at different levels of abstraction. Within &argouml; it
      is principally used through its specific stereotype
      <literal>realize</literal> to define realization dependencies, which link
      artifacts that <emphasis>specify</emphasis> behavior to the
      corresponding artifacts that <emphasis>implement</emphasis> the
      behavior.</para>

    <para>In the UML metamodel <literal>Abstraction</literal> is a sub-class of
      <literal>Dependency</literal> and through that
      <literal>Relationship</literal>.</para>

    <para>An abstraction with stereotype <literal>realize</literal> is
      represented on a class diagram as a dotted line with a solid white head
      at the specifying end. Note that all other stereotypes of abstraction
      should be represented using an open arrow head, but this is not supported
      by &argouml;</para>

    <!-- Abstraction details tabs -->

    <sect2>
      <title>Abstraction Details Tabs</title>

      <para>The details tabs that are active for abstractions are as
        follows.</para>

      <variablelist>

        <!-- Entry for ToDoItem tab -->

        <varlistentry>
          <term><literal>ToDoItem</literal></term>

          <listitem><para>Standard tab.</para></listitem>
        </varlistentry>

        <!-- Entry for Properties tab -->

        <varlistentry>
          <term><literal>Properties</literal></term>

          <listitem><para>See <xref
              linkend="s2.ref.abstraction_property_toolbar"/> and <xref
              linkend="s2.ref.abstraction_property_fields"/>
            below.</para></listitem>
        </varlistentry>

        <!-- Entry for Documentation tab -->

        <varlistentry>
          <term><literal>Documentation</literal></term>

          <listitem><para>Standard tab.</para></listitem>
        </varlistentry>

        <!-- Entry for Style tab -->

        <varlistentry>
          <term><literal>Style</literal></term>

          <listitem><para>Standard tab.</para>

          <note><para>The values for the bounds of the abstraction appear
            to have no meaning. Changing them has no effect on the
            diagram. This is sensible behavior, given the association is
            tied to particular artifacts.</para></note></listitem>
        </varlistentry>

        <!-- Entry for Source tab -->

        <varlistentry>
          <term><literal>Source</literal></term>

          <listitem><para>Standard tab. This contains the single word
            <literal>realizes</literal>.</para>

            <caution><para>An abstraction should not generate any code, so
              this entry is probably a mistake.</para></caution></listitem>
        </varlistentry>

        <!-- Entry for Constraints tab -->

        <varlistentry>
          <term><literal>Constraints</literal></term>

          <listitem><para>Standard tab. There are no standard constraints
            defined for <literal>Abstraction</literal> within the UML
            metamodel.</para></listitem>
        </varlistentry>

        <!-- Entry for Tagged Values tab -->

        <varlistentry>
          <term><literal>Tagged Values</literal></term>

          <listitem><para>Standard tab. In the UML metamodel,
            <literal>Abstraction</literal> has the following standard
            tagged values defined.</para>

            <itemizedlist>
              <listitem><para><literal>derived</literal> (from the
                superclass, <literal>ModelElement</literal>). Values
                <literal>true</literal>, meaning the abstraction is
                redundant&mdash;it can be formally derived from other
                elements, or <literal>false</literal> meaning it
                cannot.</para>

              <note><para>Derived abstractions still have their value in
                analysis to introduce useful names or concepts, and in
                design to avoid re-computation.</para></note></listitem>
            </itemizedlist>

            <note><para>The UML <literal>Element</literal> metaclass from
              which all other artifacts are derived includes the tagged
              element <literal>documentation</literal> which is handled by
              the <emphasis>documentation tab</emphasis> under
              &argouml;</para></note></listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <!-- Abstraction properties -->

    <sect2 id="s2.ref.abstraction_property_toolbar">
      <title>Abstraction Property Toolbar</title>

      <variablelist>

        <!-- Entry for Go up button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/navigate_up.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Go
            up</literal></term>

          <listitem><para>Navigate up through the package
            structure.</para></listitem>
        </varlistentry>

        <!-- Entry for Go back button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/navigate_back.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Go
            back</literal></term>

          <listitem><para>Navigate back to the previous
            artifact.</para>

          <warning><para>This feature is currently broken within &argouml;
            and there is no guarantee where (if anywhere) this button will
            take you.</para></warning></listitem>
        </varlistentry>

        <!-- Entry for Go forward button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/navigate_forward.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Go
            forward</literal></term>

          <listitem><para>Navigate forward to the next
            artifact.</para>

          <warning><para>This feature is currently broken within &argouml;
            and there is no guarantee where (if anywhere) this button will
            take you.</para></warning></listitem>
        </varlistentry>

        <!-- Entry for Delete button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/property_delete.gif"/>
          </imageobject></inlinemediaobject></guiicon>
            <literal>Delete</literal></term>

          <listitem><para>This deletes the abstraction from the model</para>

          <warning><para>This is a deletion from the model
            <emphasis>not</emphasis> just the diagram. To delete an
            abstraction from the diagram, but keep it within the model, use
            the main menu <literal>Edit/Remove From Diagram</literal>
            (Ctrl-R).</para></warning></listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <!-- Fields in the properties tab -->

    <sect2 id="s2.ref.abstraction_property_fields">
      <title>Property Fields For Abstraction</title>

      <variablelist>

        <!-- Entry for Name -->

        <varlistentry>
          <term><literal>Name</literal></term>

          <listitem><para>Text box. The name of the abstraction. There are no
            constraints on the name of an abstraction, which is not shown
            on any diagram.</para></listitem>
        </varlistentry>

        <!-- Entry for Stereotype -->

        <varlistentry>
          <term><literal>Stereotype</literal></term>

          <listitem><para>Drop down selector. Abstraction is provided by
            default with the UML standard stereotypes
            <literal>derive</literal>, <literal>realize</literal>,
            <literal>refine</literal> and <literal>trace</literal>.
            &argouml; also provides the additional stereotypes,
            <literal>machine</literal>, <literal>organization</literal> and
            <literal>person</literal>.</para>

          <caution><para>&argouml; automatically selects the stereotype
            realize when an abstraction is created. The user is free to
            change the stereotype to use the abstraction to indicate for
            example a <literal>trace</literal> relationship. However
            &argouml; will not alter the representation on the diagram
            accordingly.</para></caution></listitem>
        </varlistentry>

        <!-- Entry for NavStereo -->

        <varlistentry>
          <term><literal>Navigate Stereotype</literal></term>

          <listitem><para><guiicon><inlinemediaobject><imageobject><imagedata
              format="GIF" align="center"
              fileref="images/icons/navigate_stereotype.gif"/>
            </imageobject></inlinemediaobject></guiicon> icon. If a
              stereotype has been selected, this will navigate you to the
              stereotype property panel (see <xref
                linkend="s1.ref.stereotype_class"/>).</para></listitem>
        </varlistentry>

        <!-- Entry for Namespace -->

        <varlistentry>
          <term><literal>Namespace</literal></term>

          <listitem><para>Text box. Records the namespace for the
            abstraction. This is the package hierarchy.</para>

          <para>&Button1; click on the entry will take you to the package
            defining this namespace (or the model for the top level
            namespace).</para></listitem>
        </varlistentry>

        <!-- Entry for Suppliers -->

        <varlistentry>
          <term><literal>Suppliers</literal></term>

          <listitem><para>Text area. Lists the artifact that is the supplier
            end of this abstraction (for a realization this is the end
            providing the implementation).</para>

          <note><para> Although this is a text area there is no mechanism
            for adding more than one supplier.</para></note>

          <para>&Button1; click takes you to the selected entry, &button2;
            gives a pop up menu with three entries.</para>

          <itemizedlist>
            <listitem><para><literal>Open</literal>. Navigate to the
              selected artifact.</para></listitem>

            <listitem><para><literal>Move Up</literal>. Since there is only
              ever one supplier this is always grayed
              out.</para></listitem>

            <listitem><para><literal>Move Down</literal>. Since there is
              only ever one supplier this is always grayed
              out.</para></listitem>
          </itemizedlist></listitem>
        </varlistentry>

        <!-- Entry for Clients -->

        <varlistentry>
          <term><literal>Clients</literal></term>

          <listitem><para>Text area. Lists the artifact that is the client
            end of this abstraction (for a realization this is the end
            providing the specification).</para>

          <note><para> Although this is a text area there is no mechanism
            for adding more than one client.</para></note>

          <para>&Button1; click takes you to the selected entry, &button2;
            gives a pop up menu with three entries.</para>

          <itemizedlist>
            <listitem><para><literal>Open</literal>. Navigate to the
              selected artifact.</para></listitem>

            <listitem><para><literal>Move Up</literal>. Since there is only
              ever one client this is always grayed
              out.</para></listitem>

            <listitem><para><literal>Move Down</literal>. Since there is
              only ever one client this is always grayed
              out.</para></listitem>
          </itemizedlist></listitem>
        </varlistentry>
      </variablelist>
    </sect2>
  </sect1>

</chapter>

<!-- Local stuff for Emacs - please do not delete

Local Variables:
mode: xml
sgml-doctype: "argomanual.xml"
sgml-parent-document: ("argomanual.xml" "chapter" nil)
sgml-validate-command: "nsgmls -wxml -sv ../docbook-setup/xml.dcl \
  argomanual.xml"
End:

-->
