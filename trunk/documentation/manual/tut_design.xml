<?xml version="1.0" encoding="ISO-8859-1"?>

<!--

This is the Design tutorial chapter of the User Manual.

Modifications
=============

 6 Dec 2001:  Jeremy Bennett. Broken out as a separate section from the
              original manual by Alejandro, Phillipe and Andreas.

-->

<chapter id="chtutdesign">
  <title>Design</title>

  <sect1>
    <title>Introduction</title>

    <para>We now have the problem we are trying to solve specified in the
      language of a putative solution. In the Design Phase, we construct all
      the details of that solution.</para>

    <para>The blurred boundary between Analysis and Design is reflected in
      their use of many of the same UML tools. In this chapter we will mostly
      be reusing UML technology we have already met once. The big step is
      casting everything into concrete terms. We move from the abstract
      concepts of analysis to their concrete realisation.</para>

    <para>Once again the <emphasis>recursive</emphasis>, and
      <emphasis>iterative</emphasis> nature of our process means we will come
      back to the Design phase many times in the future.</para>

  </sect1>

  <!-- Take the reader through the design process. This will be quite high
       level in the current version of the document. -->

  <sect1>
    <title>The Design Process</title>

    <remark>To be written&hellip;</remark>

    <sect2>
      <title>Output of the Design Process</title>

      <remark>To be written&hellip;</remark>

      <!-- Organizing everything into packages. -->

      <sect3>
        <title>Package Diagram</title>

        <remark>To be written&hellip;</remark>
      </sect3>

      <!-- Take the Class Diagram down to reality. -->

      <sect3>
        <title>Realization Class Diagrams</title>

        <remark>To be written&hellip;</remark>
      </sect3>

      <!-- Sequence Diagrams need to be tied into Collaboration Diagrams -->

      <sect3>
        <title>Sequence Diagrams and Collaboration Diagrams</title>

        <remark>To be written&hellip;</remark>
      </sect3>

      <!-- State Diagrams are the detailed realisation of classes that link
           them to sequence and collaboration diagrams. Activity Diagrams are a
           variant-->

      <sect3>
        <title>State Diagrams and Activity Diagrams</title>

        <remark>To be written&hellip;</remark>
      </sect3>

      <!-- How everything will fit together -->

      <sect3>
        <title>Deployment Diagram</title>

        <remark>To be written&hellip;</remark>
      </sect3>

      <!-- What documents do we need. The System Architecture -->

      <sect3>
        <title>Documents</title>

        <remark>System Architecture. To be
          written&hellip;</remark>
      </sect3>
    </sect2>
  </sect1>

  <!-- Introduce UML Package Diagrams, as really a type of Class Diagram. Start
       to introduce the need for a System Architecture here. -->

  <sect1>
    <title>Package Diagrams</title>

    <remark>To be written&hellip;</remark>

    <!-- Done using the Class Diagram -->

    <sect2>
      <title>The Package Diagram</title>

      <remark>To be written&hellip;</remark>
    </sect2>

    <sect2>
      <title>Advanced Package Diagrams</title>

      <remark>To be written&hellip;</remark>

      <!-- Subpackages -->

      <sect3>
        <title>Subpackages</title>

        <remark>To be written&hellip;</remark>
      </sect3>

      <!-- How to add a new data type -->

      <sect3>
        <title>Adding DataTypes</title>

        <remark>To be written&hellip;</remark>
      </sect3>

      <!-- How to add a new stereotype -->

      <sect3>
        <title>Adding Stereotypes</title>

        <remark>To be written&hellip;</remark>
      </sect3>
    </sect2>
  </sect1>

  <!-- Now show how to do in in Argo/UML. -->

  <sect1>
    <title>Creating Package Diagrams in &argouml;</title>

    <!-- How do we identify what goes in packages -->

    <sect2>
      <title>Packages</title>

      <remark>How to work out what goes in packages. To be
        written&hellip;</remark> 

      <!-- How and when to sub-package -->

      <sect3>
        <title>Subpackages</title>

        <remark>To be written&hellip;</remark>
      </sect3>

    </sect2>

    <!-- How packages can be related -->

    <sect2>
      <title>Relationships between packages</title>

      <remark>To be written&hellip;</remark>

      <sect3>
        <title>Dependency</title>

        <remark>To be written&hellip;</remark>
      </sect3>

      <sect3>
        <title>Generalization</title>

        <remark>To be written&hellip;</remark>
      </sect3>
      <sect3>
        <title>Realization and Abstraction</title>

        <remark>To be written&hellip;</remark>
      </sect3>
    </sect2>

    <!-- Datatypes and Stereotypes -->

    <sect2>
      <title>Advanced Package Features</title>

      <remark>To be written&hellip;</remark>

      <sect3>
        <title>Creating New Datatypes</title>

        <remark>To be written&hellip;</remark>
      </sect3>

      <sect3>
        <title>Creating New Stereotypes</title>

        <remark>To be written&hellip;</remark>
      </sect3>
    </sect2>
  </sect1>

  <!-- Show more on Classes, when used for realization and lots of detail. -->

  <sect1>
    <title>More on Class Diagrams</title>

    <remark>To be written&hellip;</remark>

    <sect2>
      <title>The Class Diagram</title>

      <remark>To be written&hellip;</remark>

      <!-- Lots more on attributes and operations -->

      <sect3>
        <title>Class Attributes</title>

        <remark>To be written&hellip;</remark>
      </sect3>

      <sect3>
        <title>Class Operations</title>

        <remark>To be written&hellip;</remark>
      </sect3>
    </sect2>

    <sect2>
      <title>Advanced Class Diagrams</title>

      <remark>To be written&hellip;</remark>

      <sect3>
        <title>Realization and Abstraction</title>

        <remark>To be written&hellip;</remark>
      </sect3>
    </sect2>
  </sect1>

  <!-- Now show how to do in in Argo/UML. -->

  <sect1>
    <title>More on Class Diagrams in &argouml;</title>

    <sect2>
      <title>Classes</title>

      <remark>More on identifying classes from existing materials and use of
      stereotypes. To be written&hellip;</remark>
    </sect2>

    <sect2>
      <title>Class Attributes and Operationss</title>

      <remark>To be written&hellip;</remark>

      <sect3>
        <title>Class Attributes</title>

        <remark>To be written&hellip;</remark>
      </sect3>

      <!-- We need to go into operations properly here -->

      <sect3>
        <title>Class Operations</title>

        <remark>To be written&hellip;</remark>
      </sect3>
    </sect2>

    <sect2>
      <title>Advanced Class Features</title>

      <!-- Andreas things on Interfaces -->

    <sect3>
        <title>Operations on Interfaces</title>

        <sect4>
          <title>Interfaces that extend interfaces</title>

          <para>Add a unnamed interface to the current classdiagram by
            single-clicking on the interface icon in the toolbar and then
            clicking at the diagram pane (see <xref
            linkend="figtutiftool"/>).</para>

          <!-- A shot of the Editing toolbar -->

          <figure id="figtutiftool" float="1">
            <title>Selecting the Interface tool</title>

            <screenshot><mediaobject>
              <imageobject>
                <imagedata format="GIF" align="center"
                           fileref="images/tutorial/iftool.gif"/>
              </imageobject>

              <textobject>
                <para>A picture of the Editing Pane, showing the toolbar, with
                  the Inteface tool highlighted.</para>
              </textobject>
            </mediaobject></screenshot>
          </figure>

          <para>Then double click on the interfaces name field to change it's
            name as shown in <xref linkend="figtutif"/>.</para>

          <!-- A shot of an Interface entity -->

          <figure id="figtutif" float="1">
            <title>Interface entity on the Class Diagram</title>

            <screenshot><mediaobject>
              <imageobject>
                <imagedata format="GIF" align="center"
                  fileref="images/tutorial/if.gif"/>
              </imageobject>

              <textobject>
                <para>A picture of the Editing Pane, showing an interface with
                  its (empty) name field highlighted.</para>
              </textobject>
            </mediaobject></screenshot>
          </figure>

          <para>and type a name for it (like <literal>TestInterface</literal>
            in this case). Press <quote>Enter</quote> when the name is
            complete. (You could also enter the name by going to the Properties
            Tab in the Details Pane after adding the interface.)</para>

          <para>Add another interface with a different by repeating the last
            2 steps.  Then single-click on the Generalization icon in the
            toolbar as shown in <xref linkend="figtutgeneralize"/>.</para>

          <!-- A shot of a Generalization icon -->

          <figure id="figtutgeneralize" float="1">
            <title>Generalization on the Class Diagram toolbar</title>

            <screenshot><mediaobject>
              <imageobject>
                <imagedata format="GIF" align="center"
                  fileref="images/tutorial/generalize.gif"/>
              </imageobject>

              <textobject>
                <para>A picture of the Editing Pane, showing two Interfaces and
                the Generalization tool highlighted.</para>
              </textobject>
            </mediaobject></screenshot>
          </figure>

          <para>move the mouse pointer to the subinterface, press the left
            mouse button and drag the generalization to the superinterface,
            where you release the mouse button. Figure <xref
              linkend="figtutifgen"/> shows how your diagram should look
            now.</para>

          <!-- A shot of two interfaces linked by a generalization -->

          <figure id="figtutifgen" float="1">
            <title>Generalization between two Interfaces.</title>

            <screenshot><mediaobject>
              <imageobject>
                <imagedata format="GIF" align="center"
                  fileref="images/tutorial/ifgen.gif"/>
              </imageobject>

              <textobject>
                <para>A picture of the Editing Pane, showing two Interfaces and
                  with a Generalization from the lower to the upper.</para>
              </textobject>
            </mediaobject></screenshot>
          </figure>

          <para>By clicking on the subinterface and the properties pane, you
            can see that the interface actually extends it's
            superinterface.</para>
        </sect4>
      </sect3>

      <!-- Use stereotypes to distinguish concept diagrams -->

      <sect3>
        <title>Stereotypes</title>

        <remark>To be written&hellip;</remark>
      </sect3>
    </sect2>
  </sect1>

  <!-- More detail on Sequence Diagrams and introduce Collaboration Diagrams as
       an equivalent. -->

  <sect1>
    <title>Sequence and Collaboration Diagrams</title>

    <remark>To be written&hellip;</remark>

    <!-- Extend what we already knew -->

    <sect2>
      <title>More on the Sequence Diagram</title>

      <remark>To be written&hellip;</remark>
    </sect2>

    <!-- Introduce its relative, the Collaboration Diagram -->

    <sect2>
      <title>The Collaboration Diagram</title>

      <remark>To be written&hellip;</remark>

      <!-- Adding Messages -->

      <sect3>
        <title>Messages</title>

        <remark>To be written&hellip;</remark>
      </sect3>

      <!-- Actions associated with messages -->

      <sect3>
        <title>Actions</title>

        <remark>To be written&hellip;</remark>
      </sect3>
    </sect2>

    <sect2>
      <title>Advanced Collaboration Diagrams</title>

      <remark>To be written&hellip;</remark>
    </sect2>
  </sect1>

  <!-- Now show how to do in in Argo/UML. -->

  <sect1>
    <title>Creating Collaboration Diagrams in &argouml;</title>

    <sect2>
      <title>Collaboration Diagrams</title>

      <remark>To be written&hellip;</remark>
    </sect2>

    <sect2>
      <title>Messages</title>

      <remark>To be written&hellip;</remark>

      <!-- Actions associated with messages -->

      <sect3>
        <title>Actions</title>

        <remark>To be written&hellip;</remark>
      </sect3>
    </sect2>

    <sect2>
      <title>Advanced Collaboration Diagrams</title>

      <remark>To be written&hellip;</remark>
    </sect2>

  </sect1>

  <!-- Take State Diagrams in Detail. Need to show how these link to sequence
       and collaboration diagrams. -->

  <sect1>
    <title>State Diagrams</title>

    <remark>To be written&hellip;</remark>

    <sect2>
      <title>The State Diagram</title>

      <remark>More on this. To be written&hellip;</remark>
    </sect2>

    <!-- More on all the detailed stuff -->

    <sect2>
      <title>Advanced State Diagrams</title>

      <remark>To be written&hellip;</remark>

      <!-- All the options for where actions can go -->

      <sect3>
        <title>Actions</title>

        <remark>To be written&hellip;</remark>
      </sect3>

      <!-- Transitions - all the advanced stuff -->

      <sect3>
        <title>Transitions</title>

        <remark>To be written&hellip;</remark>

        <!-- Triggers -->

        <sect4>
          <title>Triggers</title>

          <remark>To be written&hellip;</remark>
        </sect4>

        <!-- Guards -->

        <sect4>
          <title>Guards</title>

          <remark>To be written&hellip;</remark>
        </sect4>

        <!-- Effects -->

        <sect4>
          <title>Effectss</title>

          <remark>To be written&hellip;</remark>
        </sect4>
      </sect3>

      <!-- Pseudo states (we've already met the initial state) -->

      <sect3>
        <title>Pseudo States</title>

        <remark>To be written&hellip;</remark>

        <!-- Branch  -->

        <sect4>
          <title>Branch</title>

          <remark>To be written&hellip;</remark>
        </sect4>

        <!-- Fork and Join  -->

        <sect4>
          <title>Fork and Join</title>

          <remark>To be written&hellip;</remark>
        </sect4>
      </sect3>

      <!-- Hierarchical States -->

      <sect3>
        <title>Hierarchical State Machines</title>

        <remark>To be written&hellip;</remark>
      </sect3>

      <!-- History -->

      <sect3>
        <title>Models for State History</title>

        <remark>Shallow v Deep. To be written&hellip;</remark>
      </sect3>
    </sect2>
  </sect1>

  <!-- Now show how to do in in Argo/UML. -->

  <sect1>
    <title>Creating State Diagrams in &argouml;</title>

    <!-- A bit more detail this time -->

    <sect2>
      <title>State Diagrams</title>

      <remark>To be written&hellip;</remark>
    </sect2>

    <sect2>
      <title>States</title>

      <remark>To be written&hellip;</remark>
    </sect2>

    <sect2>
      <title>Transitions</title>

      <remark>To be written&hellip;</remark>

    </sect2>

    <sect2>
      <title>Actions</title>

      <remark>To be written&hellip;</remark>
    </sect2>

    <!-- How to do hard things -->

    <sect2>
      <title>Advanced State Diagrams</title>

      <remark>To be written&hellip;</remark>

      <!-- Transitions - all the advanced stuff -->

      <sect3>
        <title>Transitions</title>

        <remark>To be written&hellip;</remark>

        <!-- Triggers -->

        <sect4>
          <title>Triggers</title>

          <remark>To be written&hellip;</remark>
        </sect4>

        <!-- Guards -->

        <sect4>
          <title>Guards</title>

          <remark>To be written&hellip;</remark>
        </sect4>

        <!-- Effects -->

        <sect4>
          <title>Effectss</title>

          <remark>To be written&hellip;</remark>
        </sect4>
      </sect3>

      <sect3>
        <title>Pseudo States</title>

        <remark>To be written&hellip;</remark>

        <!-- Branch  -->

        <sect4>
          <title>Branch</title>

          <remark>To be written&hellip;</remark>
        </sect4>

        <!-- Fork and Join  -->

        <sect4>
          <title>Fork and Join</title>

          <remark>To be written&hellip;</remark>
        </sect4>
      </sect3>

      <!-- Hierarchical States -->

      <sect3>
        <title>Hierarchical State Machines</title>

        <remark>To be written&hellip;</remark>
      </sect3>

      <!-- History -->

      <sect3>
        <title>History</title>

        <remark>Shallow v Deep. To be written&hellip;</remark>
      </sect3>
    </sect2>
  </sect1>

  <!-- Activity Diagrams as a variant of State Diagrams -->

  <sect1>
    <title>Activity Diagrams</title>

    <remark>To be written&hellip;</remark>

    <sect2>
      <title>The Activity Diagram</title>

      <remark>More on this. To be written&hellip;</remark>

      <!-- Actions States - the one new bit -->

      <sect3>
        <title>Action States</title>

        <remark>To be written&hellip;</remark>
      </sect3>
    </sect2>
  </sect1>

  <!-- Now show how to do in in Argo/UML. Relate to State Diagrams -->

  <sect1>
    <title>Creating Activity Diagrams in &argouml;</title>

    <sect2>
      <title>Activity Diagrams</title>

      <remark>To be written&hellip;</remark>

      <!-- From Alejandro, Phillippe and Andreas -->

      <sect3>
        <title>Creating an Activity Diagram</title>

        <para>Select a use case or class, then you can create an activity
          diagram.</para>
      </sect3>
    </sect2>

    <sect2>
      <title>Action States</title>

      <remark>To be written&hellip;</remark>
    </sect2>
  </sect1>

  <!-- Deployment Diagrams -->

  <sect1>
    <title>Deployment Diagrams</title>

    <remark>To be written&hellip;</remark>

    <!-- Explain the UML Concept -->

    <sect2>
      <title>The Deployment Diagram</title>

      <remark>To be written&hellip;</remark>
    </sect2>
  </sect1>

  <!-- Now show how to do in in Argo/UML. -->

  <sect1>
    <title>Creating Deployment Diagrams in &argouml;</title>

    <!-- How do we work all this out -->

    <sect2>
      <title>Nodes</title>

      <remark>To be written&hellip;</remark>

      <sect3>
        <title>Node Instances</title>

        <remark>To be written&hellip;</remark>
      </sect3>

    </sect2>

    <sect2>
      <title>Components</title>

      <remark>To be written&hellip;</remark>

      <sect3>
        <title>Component Instances</title>

        <remark>To be written&hellip;</remark>
      </sect3>

    </sect2>

    <!-- How nodes and components can be related -->

    <sect2>
      <title>Relationships between nodes and components</title>

      <remark>To be written&hellip;</remark>

      <sect3>
        <title>Dependency</title>

        <remark>To be written&hellip;</remark>
      </sect3>

      <sect3>
        <title>Associations</title>

        <remark>To be written&hellip;</remark>
      </sect3>
      <sect3>
        <title>Links</title>

        <remark>To be written&hellip;</remark>
      </sect3>
    </sect2>
  </sect1>

  <!-- The System Architecture. Need to say something about this. -->

  <sect1>
    <title>System Architecture</title>

    <remark>To be written&hellip;</remark>
  </sect1>

  <!-- Now illustrate all these techniques and diagrams with the Case
       Study. -->

  <sect1>
    <title>Case Study</title>

    <sect2>
      <title>Packages</title>

      <remark>To be written&hellip;</remark>

      <sect3>
        <title>Identifying Packages</title>

         <remark>To be written&hellip;</remark>
      </sect3>

      <sect3>
        <title>Datatypes and Stereotypes</title>

         <remark>To be written&hellip;</remark>
      </sect3>
    </sect2>

    <sect2>
      <title>Class Diagrams</title>

      <remark>To be written&hellip;</remark>

      <sect3>
        <title>Identifying classes</title>

         <remark>To be written&hellip;</remark>
      </sect3>

      <sect3>
        <title>Identifying associations</title>

         <remark>To be written&hellip;</remark>
      </sect3>

      <sect3>
        <title>Specifying Attributes and Operations</title>

         <remark>To be written&hellip;</remark>
      </sect3>
    </sect2>

    <sect2>
      <title>Sequence Diagrams</title>

      <remark>To be written&hellip;</remark>

      <sect3>
        <title>Identifying actions</title>

         <remark>To be written&hellip;</remark>
      </sect3>
    </sect2>

    <sect2>
      <title>Collaboration Diagrams</title>

      <remark>To be written&hellip;</remark>

      <sect3>
        <title>Identifying Messages</title>

         <remark>To be written&hellip;</remark>
      </sect3>
    </sect2>

    <sect2>
      <title>State Diagrams</title>

      <remark>To be written&hellip;</remark>
    </sect2>

    <sect2>
      <title>Activity Diagrams</title>

      <remark>To be written&hellip;</remark>
    </sect2>

    <sect2>
      <title>The Deployment Diagram</title>

      <remark>To be written&hellip;</remark>
    </sect2>

    <sect2>
      <title>The System Architecture</title>

      <remark>To be written&hellip;</remark>
    </sect2>
  </sect1>
</chapter>

<!-- Local stuff for Emacs - please do not delete

Local Variables:
mode: xml
sgml-doctype: "argomanual.xml"
sgml-parent-document: ("argomanual.xml" "chapter" nil)
sgml-validate-command: "nsgmls -wxml -sv ../docbook-setup/xml.dcl \
  argomanual.xml"
End:

-->
