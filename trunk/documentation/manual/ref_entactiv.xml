<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- $Id$ -->

<!--

Description of all the artifacts associated with Activity Diagrams within
Argo/UML.

-->

<chapter id="ch.ref.entactiv">
  <title>Activity Diagram Artifact Reference</title>

  <sect1>
    <title>Introduction</title>

    <para>This chapter describes each artifact that can be created within an
      Activity diagram. Note that some sub-artifacts of artifacts 
      may not actually themselves appear on the diagram.</para>

    <para>There is a close relationship between this material and the
      Properties Tab of the Details Pane (see <xref
      linkend="s1.ref.proptab"/>). That section covers Properties in general,
      in this chapter they are linked to specific artifacts.</para>

    <!-- A diagram to show all things visible on the diagram -->

    <para><xref linkend="fig.ref.activity_diagram"/> shows an Activity Diagram
      with all possible artifacts displayed.</para>

    <!-- This picture more or less maps to the one used for State Diagram. -->

    <figure id="fig.ref.activity_diagram" float="1">
      <title>Possible artifacts on an activity diagram.</title>

      <screenshot><mediaobject>
        <imageobject>
          <imagedata format="GIF" align="center"
                     fileref="images/reference/activity_diagram.gif"/>
        </imageobject>
      </mediaobject></screenshot>
    </figure>

    <!-- Limitations in Argo/UML relating to support for swimlanes -->

    <sect2>
      <title>Limitations Concerning Activity Diagrams in &argouml;</title>

    <para>Activity diagrams are not fully developed yet in
      &argouml;. Many aspects are not fully implemented, or may not behave as
      expected. In particular swim lanes, action-object flows, control icons
      (signals), sub-activities, object flows, control icons and interactions 
      with other classifiers are not provided. 
      In practice there is little in the current implementation of
      the activity diagram to distinguish it from the state diagram (see <xref
      linkend="ch.ref.entstate"/>).</para>

    </sect2>
  </sect1>

  <!-- Artifacts specific to Activity Diagrams. Action State artifact. Has
       Action as sub-artifact -->

  <sect1>
    <title>Action State</title>

    <para>An action state represents execution of an atomic action, usually the
      invocation of an action. Within the UML metamodel,
      <literal>ActionState</literal> is a sub-class of 
      <literal>SimpleState</literal>. It is a specialized simple state that
      only has an entry action, and with an implicit trigger as soon as that
      action is completed.</para>

    <caution><para>As a consequence any outgoing transitions from an action
      state should not have explicit triggers defined (&argouml; will not
      currently check for this). <!-- TODO: See issue ... --> 
      They may have guards to provide a choice where
      there is more than one transition. 
      <!-- TODO: check if this is true! I doubt it. -->
      </para></caution>

    <note><para>
Unlike an ordinary state, an internal transition, 
an exit action and a Do activity are not permitted for action states.
    </para></note>

    <para>An action state is represented on an activity diagram in &argouml; as
      a rectangle with rounded corners containing the name of the action
      state.</para>

    <caution><para>The UML standard expects that the activity diagram should
      contain the expression associated with the entry action, rather than the
      action state name (which is shown by the current version on &argouml;).
      <!-- TODO: See issue ...-->
      </para></caution>

    <!-- Action state details tabs -->

    <sect2>
      <title>Action State Details Tabs</title>

      <para>The details tabs that are active for action states are as
        follows.</para>

      <variablelist>

        <!-- Entry for ToDoItem tab -->

        <varlistentry>
          <term><literal>ToDoItem</literal></term>

          <listitem><para>Standard tab.</para></listitem>
        </varlistentry>

        <!-- Entry for Properties tab -->

        <varlistentry>
          <term><literal>Properties</literal></term>

          <listitem><para>See <xref
              linkend="s2.ref.action_state_property_toolbar"/> and <xref
              linkend="s2.ref.action_state_property_fields"/>
            below.</para></listitem>
        </varlistentry>

        <!-- Entry for Documentation tab -->

        <varlistentry>
          <term><literal>Documentation</literal></term>

          <listitem><para>Standard tab.</para></listitem>
        </varlistentry>

        <!-- Entry for Style tab -->

        <varlistentry>
          <term><literal>Style</literal></term>

          <listitem><para>Standard tab. The values for the bounds of the
            action state define the bounding box of the action
            state.</para>
          </listitem>
        </varlistentry>

        <!-- Entry for Source tab -->

        <varlistentry>
          <term><literal>Source</literal></term>

          <listitem><para>Standard tab that shows the name of the action state.
          </para>
          <!-- TODO: See issue ... -->
          <note><para>In the fullness of time this tab will contain code to
            implement the action state (code for actions will be associated
            with the particular actions). This is not implemented in the
            current release of &argouml;.</para></note></listitem>
        </varlistentry>

        <!-- Entry for Constraints tab -->

        <varlistentry>
          <term><literal>Constraints</literal></term>

          <listitem><para>Standard tab. There are no standard constraints
            defined for <literal>ActionState</literal> within the UML
            metamodel.</para></listitem>
        </varlistentry>

        <!-- Entry for Tagged Values tab -->

        <varlistentry>
          <term><literal>Tagged Values</literal></term>

          <listitem><para>Standard tab. In the UML metamodel,
            <literal>ActionState</literal> has the following standard
            tagged values defined.</para>

            <itemizedlist>
              <listitem><para><literal>derived</literal> (from the
                superclass, <literal>ModelElement</literal>). Values
                <literal>true</literal>, meaning the action state is
                redundant&mdash;it can be formally derived from other
                elements, or <literal>false</literal> meaning it cannot.
                <!-- TODO: So, why isn't it listed? See issue ...-->
                <!-- TODO: Shouldn't it be shown on the diagram with a '/'? 
                See issue...-->
                </para>

              <note><para>Derived action states still have their value in
                analysis and design to introduce useful names or concepts,
                and in design to avoid
                re-computation.</para></note></listitem>
            </itemizedlist>

            <note><para>The UML <literal>Element</literal> metaclass from
              which all other artifacts are derived includes the tagged
              element <literal>documentation</literal> which is handled by
              the <emphasis>documentation tab</emphasis> under
              &argouml;</para></note></listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <!-- Action state property toolbar -->

    <sect2 id="s2.ref.action_state_property_toolbar">
      <title>Action State Property ToolBar</title>

      <variablelist>

        <!-- Entry for Go up button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/navigate_up.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Go
            up</literal></term>

          <listitem><para>Navigate up through the package
            structure.</para></listitem>
        </varlistentry>

        <!-- Entry for Delete button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/property_delete.gif"/>
          </imageobject></inlinemediaobject></guiicon>
            <literal>Delete</literal></term>

          <listitem><para>This deletes the action state from the model</para>

          <warning><para>This is a deletion from the model
            <emphasis>not</emphasis> just the diagram. To delete an
            action state from the diagram, but keep it within the model, use
            the main menu <literal>Remove From Diagram</literal>
            (or press the Delete key).</para>
            <para>But beware!. Currently, &argouml; does not show the 
            <literal>Add to Diagram</literal> 
            pop-up menu for action states.</para>
            <!-- TODO: See issue ... -->
            </warning></listitem>
        </varlistentry>
      </variablelist>
    </sect2>
  
      <!-- Fields in the properties tab -->

    <sect2 id="s2.ref.action_state_property_fields" >
      <title>Property fields for action state</title>

      <variablelist>

        <!-- Entry for Name -->

        <varlistentry>
          <term><literal>Name</literal></term>

          <listitem><para>Text box. The name of the action state. By
            convention action state names start with a lower case letter
            and use bumpy caps to divide words within the name.</para>

          <note><para>&argouml; does not enforce this naming
            convention.</para></note></listitem>
            <!-- TODO: See enhancement issue ... -->
        </varlistentry>

        <!-- Entry for Stereotype -->

        <varlistentry>
          <term><literal>Stereotype</literal></term>

          <listitem><para>Drop down selector. Action state has no stereotypes
            by default in the UML standard.</para>

          </listitem>
        </varlistentry>

        <!-- Entry for NavStereo -->

        <varlistentry>
          <term><literal>Navigate Stereotype</literal></term>

          <listitem><para><guiicon><inlinemediaobject><imageobject><imagedata
              format="GIF" align="center"
              fileref="images/icons/navigate_stereotype.gif"/>
            </imageobject></inlinemediaobject></guiicon> icon. If a
              stereotype has been selected, this will navigate to the
              stereotype property panel (see
              <xref linkend="s1.ref.stereotype"/>).</para></listitem>
        </varlistentry>

        <!-- Entry for Namespace -->

        <varlistentry>
          <term><literal>Namespace</literal></term>

          <listitem>
            <para>
Text box.
The namespace in which the action state is defined.
            </para></listitem>
        </varlistentry>

        <!-- Entry for Entry Action -->

        <varlistentry>
          <term><literal>Entry-Action</literal></term>

          <listitem><para>Text box. 
Shows the name of the action to be invoked on entry to this action state.
According the UML standard, an Action State is obliged to have an Entry-Action.
<!-- TODO: See enhancement issue ... for a critic for this matter. -->
            </para>

            <para>&Button1; double-click navigates to the shown entry, 
              &button2; gives a pop up menu with two entries.</para>

            <itemizedlist>
              <listitem>
                <para><literal>New</literal>. 
Add a new Entry action of a certain kind. 
This menu has the following 7 submenus 
to select the kind of action: Call Action, Create Action, 
Destroy Action, Return Action, Send Action, Terminate Action, 
Uninterpreted Action.
                </para>
              </listitem>
              <listitem><para><literal>Delete From Model</literal>. 
Delete the Entry-Action.
<!-- TODO: This is always downlighted currently. See issue ... -->
              </para></listitem>
            </itemizedlist>

          </listitem>
        </varlistentry>

        <!-- Entry for Exit Action -->
<!-- MVW: This field is present in 0.14 ArgoUML, 
but should not be according UML standard.
TODO: See issue ...-->

        <!-- Entry for Do-Activity -->
<!-- MVW: This field is present in 0.14 ArgoUML, 
but should not be according UML standard.
TODO: See issue ...-->


        <!-- Entry for Modifiers -->
<!-- TODO: MVW: Missing in ArgoUML: a modifier checkbox field for "Dynamic". 
See issue ... -->
        <!--varlistentry>
          <term><literal>Modifiers</literal></term>

          <listitem><para>Check box. Indicates whether the action state's
            actions may be executed concurrently if there are parallel
            executions invoked.</para>

          <caution><para>This field is of limited value in the current
            release of &argouml; in the absence of fields specifying
            dynamic arguments and dynamic
            multiplicity.</para></caution></listitem>
        </varlistentry-->

        <!-- Entry for Incoming -->

        <varlistentry>
          <term><literal>Incoming</literal></term>

          <listitem>
            <para>Text area. Lists the transitions that enter this action state.
            </para>

            <para>&Button1; double-click navigates to the selected entry.
            </para>
          </listitem>
        </varlistentry>

        <!-- Entry for Outgoing -->

        <varlistentry>
          <term><literal>Outgoing</literal></term>

          <listitem>
            <para>Text area. Lists the transitions that leave this action state.
            </para>

            <para>&Button1; double-click navigates to the selected entry.
            </para>
          </listitem>
        </varlistentry>

        <!-- Entry for Internal Transitions -->
<!-- TODO: MVW: This field is present in 0.14 ArgoUML, 
but should not be according UML standard. See issue ... -->

      </variablelist>
    </sect2>
  </sect1>

  <!-- Action artifact (subsidiary of Action state), cross refer to State
       Diagram -->

  <sect1>
    <title>Action</title>

    <para>This artifact is described in the context of state diagrams (see
      <xref linkend="s1.ref.action_state"/>).</para>
  </sect1>

  <!-- Transition artifact. Has Call Event and Guard as sub-artifacts. Cross
       refer to State Diagram -->

  <sect1>
    <title>Transition</title>

    <para>This artifact is described in the context of state diagrams (see
      <xref linkend="s1.ref.transition_state"/>).</para>

    <caution><para>Remember that action states do not have explicit triggers.
      The transition is implicitly triggered as soon as the entry event of the
      action state is complete. An explicit trigger should not therefore be
      set.</para>

    <para>The current release of &argouml; will not check that this constraint
      is met.</para></caution>
<!-- TODO: See enhancement issue ... -->
  </sect1>

  <!-- Event artifacts (subsidiary of Transition) -->
  <!-- TODO: Events are not to be used in an Activity diagram. See Issue ...-->
<!--
  <sect1>
    <title>Event</title>

    <para>This artifact is described in the context of state diagrams (see
      <xref linkend="s1.ref.call_event_state"/>).</para>

    <caution><para>The only place this is used is for the trigger of a
      transition. However remember that action states do not have explicit
      triggers.  The transition is implicitly triggered as soon as the entry
      event of the action state is complete. An explicit trigger should not
      therefore be set.</para>

    <para>The current release of &argouml; will not check that this constraint
      is met.</para></caution>
  </sect1>
-->

  <!-- Guard artifact (subsidiary of Transition) -->

  <sect1>
    <title>Guard</title>

    <para>This artifact is described in the context of state diagrams (see
      <xref linkend="s1.ref.guard_state"/>).</para>
  </sect1>

  <!-- Initial State. This is a pseudo state, which all have the same
       property sheet. The pseudo states are Initial State, Branch, Fork,
       Join, Shallow History and Deep History but *NOT* Final State,
       which is a real state. Cross refer to State Diagram -->

  <sect1>
    <title>Initial State</title>

    <para>This artifact is described in the context of state diagrams (see
      <xref linkend="s1.ref.initial_state"/>).</para>
  </sect1>

  <!-- Final State - cross refer to State Diagram-->

  <sect1>
    <title>Final State</title>

    <para>This artifact is described in the context of state diagrams (see
      <xref linkend="s1.ref.final_state"/>).</para>
  </sect1>

  <!-- Branch. This is a pseudo state, which all have the same property
       sheet. The pseudo states are Initial State, Branch, Fork, Join,
       Shallow History and Deep History but *NOT* Final State, which is a
       real state. Cross refer to State Diagram -->

  <sect1>
    <title>Branch</title>

    <para>This artifact is described in the context of state diagrams (see
      <xref linkend="s1.ref.branch_state"/>).</para>

    <caution><para>As a detailed technicality, a branch on an activity diagram
      should be static, i.e. implemented as a <literal>junction</literal>
      pseudostate, rather than a <literal>choice</literal> pseudostate. The
      current release of &argouml; uses <literal>choice</literal> which is
      wrong.</para></caution>
<!-- TODO: See issue ... -->
  </sect1>

  <!-- Fork. This is a pseudo state, which all have the same property
       sheet. The pseudo states are Initial State, Branch, Fork, Join,
       Shallow History and Deep History but *NOT* Final State, which is a
       real state. Cross refer to State Diagram -->

  <sect1>
    <title>Fork</title>

    <para>This artifact is described in the context of state diagrams (see
      <xref linkend="s1.ref.fork_state"/>).</para>
  </sect1>

  <!-- Join. This is a pseudo state, which all have the same property
       sheet. The pseudo states are Initial State, Branch, Fork, Join,
       Shallow History and Deep History but *NOT* Final State, which is a
       real state. Cross refer to State Diagram -->

  <sect1>
    <title>Join</title>

    <para>This artifact is described in the context of state diagrams (see
      <xref linkend="s1.ref.join_state"/>).</para>
  </sect1>
</chapter>

<!-- Local stuff for Emacs - please do not delete

Local Variables:
mode: xml
sgml-doctype: "argomanual.xml"
sgml-parent-document: ("argomanual.xml" "chapter" nil)
sgml-validate-command: "nsgmls -wxml -sv ../docbook-setup/xml.dcl \
  argomanual.xml"
indent-tabs-mode: nil
End:

-->
