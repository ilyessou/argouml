<?xml version="1.0"?>

<!-- ===========================================================================

!!!!!!!!!!!!!!!!  Now requires ANT 1.2   !!!!!!!!!!!!!!!!!!!!!
if you get a message like:

build.xml:162: Could not create task of type: copy because I can't find it in th
e list of task class definitions

You are running not running ANT 1.2


                           * ================== *
                           |  How to build Argo |
                           * ================== *

           Adaption from the FOP build.xml written by Stefano Mazzocchi
                by Giacomo Pati with some addition by Fotis Jannidis
           Adapted by Andreas Rueckert, Alejandro Ramirez and Andrew Smith


Introduction
============

ArgoUML is a free UML tool. It is written entirely in Java.
The homepage of Argo is http://argouml.tigris.org

Installing the build tools
==========================

Building the latest versions of ArgoUML is automated using Ant which is a little but very handy tool that uses a build file written in XML (this file) as building instructions. For more information refer to "http://jakarta.apache.org/ant/". Essentially this is just setting ANT_HOME to the directory where you extracted the ant-distribution, and adding ANT_HOME/bin to your PATH.)

Additionally you have to make sure, that the "JAVA_HOME" environment property should be set to match the JVM you want to use. That's it.


Building instructions
=====================

First, make sure your current working directory is where this very file is located. Then just type

	ant

or, if it doesn't work

	build

to create the settings for an environment to suit Ant.

After the above command you should see a help screen describing the usage of the Ant facility if everything is set up properly.


Property Settings
=================

You may place a simple text file named ".ant.properties" in your home directory using which you can change certain properties. For example, by adding a line to .ant.properties you can change the compiler to be used

build.compiler=jikes
(without a blank after "jikes"!).

This will force Ant to compile with jikes if you have it on your system. The other alternatives for this setting are;

build.compiler=modern
to use the most up-to-date version available to you which for Sun is currently javac from jdk1.3

or the default if no explicit setting is made anywhere;

build.compiler=classic
to use a compiler/Virtual Machine combination compatible with jdk1.2.

On machines using Windows the home directory is selected to be C:\ so the instructions in the build file will look there for .ant.properties.

The filename is necessary for commonality with UNIX/LINUX systems but you will not be able to save or rename a file to this form of name using the Windows GUI directly. At least two workarounds are possible
(i) use Notepad (NOT Wordpad) to create, edit, rename or save the file
(ii) go into a DOS window and use the DOS command Edit to create, edit, rename or save the file.
After these operations the file will still be visible in the GUI.


Compilation instructions for ArgoUML
====================================

If you want to compile ArgoUML, you need to have following:
- your compiler in your PATH
- JAVA_HOME correctly set to where Java2 is installed
- ANT_HOME correctly set to where ANT is installed
- the additional libraries (nsuml.jar, ocl-argo.jar, xml4j.jar, gef.jar, antlrall.jar) in argouml/lib
- the support file (uml13.dtd) is optional but desirable in argouml/lib

when these are right the command

     build compile

will do the job. With this arrangement problems with the set size of environment may arise for DOS command line windows, but a setting of 4096b should be ample on the Memory page of the Property dialogue box.

If something went wrong, go to the FAQ section below.

Also, you'll note that reusing a single JVM instance for each task, increases tremendously the performance of the whole build system, compared to other tools (i.e. make or shell scripts) where a new JVM is started for each task.


Build targets
=============
See the usage target.

====================================== FAQ =====================================

1) Why some of the classes present in the original jar are not built anymore?

The ArgoUML build system is very flexible: if a module requires a package that
is not present in the classpath at build time, the module is skipped but
the built process is not stopped.

2) I see a lot of warnings starting like this: "Warning: file modified in the future:"
Sometimes ant gives out this warnings, but the build is finished without any problems

3) "ant run" doesn't work, XML classes are not found, what's wrong?
Maybe you have hard-coded your ANT_HOME variable in the ant start-script. This way it
doesn't find it's own XML-libs. You need to set ANT_HOME in your shell.


============================================================================ -->

<project name="argouml" default="usage" basedir=".">

  <!-- =================================================================== -->
  <!-- Global initialization                                               -->
  <!-- =================================================================== -->

  <!-- These cannot be changed in .ant.properties -->
  <target name="setversion">
    <property file="default.properties"/>
  </target>


  <!-- =================================================================== -->
  <!-- Initialization target                                               -->
  <!-- =================================================================== -->

 <target name="init" depends="setversion">

    <tstamp/>

    <property name="Name" value="ArgoUML"/>
    <property name="name" value="argouml"/>
    <property name="version" value="${argo.release.version}-${DSTAMP}-${TSTAMP}"/>
    <property name="year" value="2002"/>

    <echo message="------------------- ${Name} ${version} [${year}] ----------------"/>

    <property name="src.dir" value="../src_new"/>
    <property name="lib.dir" value="../lib"/>

    <property name="version.package" value="org/argouml/application"/>

    <property name="gef.jar" value="gef-0.9.6.jar"/>
    <property name="classpath" value="${JAVA_HOME}/lib/tools.jar:${lib.dir}/xerces.jar:${lib.dir}/nsuml.jar:${lib.dir}/ocl-argo.jar:${lib.dir}/${gef.jar}:${lib.dir}/antlrall.jar:${lib.dir}/log4j.jar:${lib.dir}/jh.jar:${lib.dir}/xalan.jar:${lib.dir}/saxon.jar:${lib.dir}/jaxp.jar"/>

    <property name="packages" value="org.argouml.*"/>
    <property name="manifest" value="${src.dir}/org/argouml.mf"/>

    <property name="build.dir" value="../build"/>
    <property name="build.src" value="${src.dir}"/>
    <property name="build.dest" value="${build.dir}/classes"/>
    <property name="dist.dir" value="${build.dir}/dist"/>
    <property name="docs.dir" value="${build.dir}/javadocs"/>
    <property name="snapshot.dir" value="../www/snapshots"/>

    <property name="argo.bin.dir" value="${build.dir}/bin"/>
    <property name="argo.bin.src" value="${build.src}/bin"/>

    <available classname="org.tigris.gef.base.Globals"
	       classpath="${classpath}"
               property="has.gef" />
    <available classname="org.tigris.gef.util.Localizer"
	       classpath="${classpath}"
               property="has.gef.localizer" />
    <available classname="org.apache.log4j.Category"
	       classpath="${classpath}"
               property="has.log4j" />
    <available classname="antlr.ANTLRException"
	       classpath="${classpath}"
               property="has.antlr" />

    <!-- ===============================================================  -->
    <!-- Load user properties.                                            -->
    <!--                                                                  -->
    <!-- Any property set before this cannot be changed                   -->
    <!-- Check for argo-specific properties before generic ant properties -->
    <!-- Since .ant.properties is rather generic, we check for            -->
    <!-- .argo.ant.properties first, to allow setting properties that     -->
    <!-- we know will be argo-oriented, then the more generic             -->
    <!-- .ant.properties, which could be used by other ant buildfiles.    -->
    <!--                                                                  -->
    <!-- Also allow the same two files in local directory which are used  -->
    <!-- for properties not set in properties files found in user.home.   -->
    <!-- ===============================================================  -->

    <property file="${user.home}/.argo.ant.properties"/>
    <property file="${user.home}/.ant.properties"/>
    <property file=".argo.ant.properties"/>
    <property file=".ant.properties"/>

    <!-- The following can be set in .argo.ant.properties                 -->
    <!--     or .ant.properties to some other value                       -->
    <property name="debug" value="off"/>
    <property name="optimize" value="on"/>
    <property name="deprecation" value="off"/>

    <!-- developer.lib.dir is the developer snapshot directory.           -->
    <!-- If it is not set, it defaults to build.dir, and "build install"  -->
    <!-- will not do anything.                                            -->
    <property name="developer.lib.dir" value="${build.dir}"/>

    <!-- developer.bin.dir is the developer snapshot directory.           -->
    <!-- If it is not set, it defaults to argo.bin.dir, and               -->
    <!-- "build install"  will not do anything.                           -->
    <property name="developer.bin.dir" value="${argo.bin.dir}"/>

    <property name="javadoc.use" value="true"/>
    <!-- General javadocs probably should not show private -->
    <property name="javadoc.private" value="false"/>
    <property name="javadoc.splitindex" value="true"/>
    <property name="javadoc.author" value="false"/>
    <property name="xerces.javadoc.link"
              value="http://xml.apache.org/xerces-j/apiDocs"/>
    <property name="log4j.javadoc.link"
              value="http://jakarta.apache.org/log4j/docs/api"/>
    <property name="jdk.javadoc.link"
              value="http://java.sun.com/products/jdk/1.2/docs/api"/>

  </target>

  <!-- Note this file can only make Ant display values set in the file correctly, -->
  <!-- but external values in the environment or properties file will be operational.  -->

  <!-- =================================================================== -->
  <!-- Help on usage                                                       -->
  <!-- =================================================================== -->
  <target name="usage" depends="init">
    <echo>

${Name} Build file
-------------------------------------------------------------

 available targets are:

   compile      --> compiles the source code to the tree under ${build.dir}
   run          --> runs ArgoUML from compiled source
   package      --> generates the ${name}.jar file
   dist         --> generates ${Name} .tar.gz and .zip files into ${dist.dir}
   prepare-docs --> writes the documentation to ${docs.dir}
   clean        --> cleans up the ${build.dir} directory
   distclean    --> cleans up the distribution directory, ${dist.dir}
   jdepend      --> obtain design quality metrics by applying JDepend
   usage        --> show this message (default)

 See the comments inside the build.xml file for more details.
-------------------------------------------------------------
    </echo>
  </target>

  <!-- =================================================================== -->
  <!-- Prepares the build directory                                        -->
  <!-- =================================================================== -->
  <target name="prepare" depends="init">
    <!-- create directories -->
    <echo message="Preparing the build directories"/>
    <mkdir dir="${build.dir}"/>
    <mkdir dir="${build.dir}/ext"/>
    <mkdir dir="${build.dest}"/>

    <uptodate property="version.is.current"
	    targetfile="${build.src}/${version.package}/ArgoVersion.java">
	    <srcfiles dir="${build.src}/${version.package}">
          <include name="ArgoVersion.template"/>
      </srcfiles>
      <srcfiles dir="${build.src}">
          <include name="default.properties"/>
          <include name="build.properties"/>
      </srcfiles>
    </uptodate>

    <copy todir="${build.dest}/org/argouml/Images">
      <fileset dir="${build.src}/org/argouml/Images" includes="**/**" excludes="CVS/**" />
    </copy>
    <copy todir="${build.dest}/org/argouml/i18n">
      <fileset dir="${build.src}/org/argouml/i18n" includes="*.properties" />
    </copy>
    <copy todir="${build.dest}/org/argouml/resource">
      <fileset dir="${build.src}/org/argouml/resource" includes="**/**" excludes="CVS/**" />
    </copy>
    <copy todir="${build.dest}/org/argouml/xml/dtd">
      <fileset dir="${build.src}/org/argouml/xml/dtd" includes="**/**" excludes="CVS/**" />
    </copy>
    <copy file="${build.src}/org/argouml/argo.ini" tofile="${build.dest}/org/argouml/argo.ini" />
    <copy file="${build.src}/org/argouml/default.xmi" tofile="${build.dest}/org/argouml/default.xmi" />
	<copy file="${build.src}/org/argouml/registry.xml" tofile="${build.dest}/org/argouml/registry.xml"/>
  </target>

  <!-- =================================================================== -->
  <!-- Update from CVS                                                     -->
  <!-- =================================================================== -->

  <target name="update" depends="prepare">
    <echo message="Updating from CVS "/>
    <cvs dest="${src.dir}"
	 command="update"
    />
  </target>

  <!-- =================================================================== -->
  <!-- Generates the parsers from the grammars by using Antlr              -->
  <!-- =================================================================== -->

  <target name="generateparser" depends="prepare">
    <echo message="Generate parsers"/>

    <java fork="yes" classname="antlr.Tool" classpath="${classpath}">
          <arg line="-o ${build.src}/org/argouml/uml/reveng/java  ${build.src}/org/argouml/uml/reveng/java/java.g"/>
    </java>
    <java fork="yes" classname="antlr.Tool" classpath="${classpath}">
          <arg line="-o ${build.src}/org/argouml/language/java/generator  ${build.src}/org/argouml/language/java/generator/java.g"/>
    </java>

  </target>

  <!-- =================================================================== -->
  <!-- Checks for necessary libraries and correct versions of libraries    -->
  <!-- =================================================================== -->

  <target name="prerequisites"
          depends="prepare,
	           check.gef.localizer,
		   check.gef,
		   check.log4j,
		   check.antlr">
  </target>

  <target name="check.gef"
          depends="prepare"
	  unless="has.gef">
    <fail message="gef library does not appear to be in the classpath."/>
  </target>

  <target name="check.gef.localizer"
          depends="prepare, check.gef"
	  unless="has.gef.localizer">
    <fail message="Please install a more recent version of the gef library (minimum 0.9.5)"/>
  </target>

  <target name="check.log4j"
          depends="prepare"
	  unless="has.log4j">
    <fail message="log4j library does not appear to be in the classpath."/>
  </target>

  <target name="check.antlr"
          depends="prepare"
	  unless="has.antlr">
    <fail message="antlrall library does not appear to be in the classpath."/>
  </target>

  <!-- =================================================================== -->
  <!-- Updates the version source file if necessary                        -->
  <!-- =================================================================== -->
  <target name="update-version" depends="prepare" unless="version.is.current">
    <echo message="Creating ArgoVersion.java for version ${argo.release.version}"/>
    <filter token="ARGO_RELEASE_VERSION"
	    value="${argo.release.version}"/>
    <copy file="${build.src}/${version.package}/ArgoVersion.template"
	  tofile="${build.src}/${version.package}/ArgoVersion.java"
	  filtering="on"
	  overwrite="on"/>
  </target>

  <!-- =================================================================== -->
  <!-- Compiles the source directory                                       -->
  <!-- =================================================================== -->
  <target name="compile" depends="prepare, prerequisites, update-version">

    <echo message="Compiling the sources"/>

    <!-- create directories -->
    <mkdir dir="${build.dest}"/>

    <!-- remove obsolete classes before compiling -->
    <delete file="${build.dest}/org/argouml/model/uml/ModelListener.class"/>
    <delete file="${build.dest}/org/argouml/model/uml/AbstractModelFactory.class"/>

    <javac srcdir="${build.src}"
           destdir="${build.dest}"
           classpath="${classpath}"
           excludes="*.txt,*.bat,*.xml,*.sh"
           debug="${debug}"
           deprecation="${deprecation}"
           optimize="${optimize}"/>
  </target>

  <!-- =================================================================== -->
  <!-- Creates the class package                                           -->
  <!-- =================================================================== -->
  <target name="package" depends="compile">
    <filter token="version" value="${version}"/>
    <copy file="${manifest}" tofile="${build.dest}/${manifest}" filtering="on" overwrite="on" />
    <jar jarfile="${build.dir}/${name}.jar"
         basedir="${build.dest}"
         includes="org/argouml/**"
         excludes="*.txt,*.bat,*.xml,*.sh,${manifest}"
         manifest="${build.dest}/${manifest}"/>
    <copy todir="${build.dir}">
      <fileset dir="${lib.dir}" />
    </copy>
    <copy file="${src.dir}/README.txt" tofile="${build.dir}/README.txt" />
    <copy file="${src.dir}/bin/argouml.sh" todir="${build.dir}" />
  </target>

  <!-- =================================================================== -->
  <!-- Creates a snapshot                                                  -->
  <!-- =================================================================== -->
  <target name="snapshot" depends="compile">
    <!-- create directories -->
    <mkdir dir="${snapshot.dir}"/>
    <filter token="version" value="${version}"/>
    <copy file="${manifest}" tofile="${build.dest}/${manifest}" filtering="on" />
    <jar jarfile="${snapshot.dir}/${name}-snapshot-${DSTAMP}.jar"
         basedir="${build.dest}"
         includes="org/argouml/**"
         excludes="*.txt,*.bat,*.xml,*.sh,${manifest}"
         manifest="${build.dest}/${manifest}"/>
  </target>

  <!-- =================================================================== -->
  <!-- Prepares the docs                                                   -->
  <!-- =================================================================== -->
  <target name="prepare-docs" depends="init, javadocs">
  </target>

  <target name="javadocs" depends="init">
    <mkdir dir="${docs.dir}"/>

    <!-- Links allow reference to external classes from within Argo javadocs -->
    <javadoc sourcepath="${build.src}"
             destdir="${docs.dir}"
             packagenames="${packages}"
	     use="${javadoc.use}"
	     private="${javadoc.private}"
	     splitindex="${javadoc.splitindex}"
	     author="${javadoc.author}"
	     windowtitle="ArgoUML Documentation"
	     overview="org/argouml/overview-argo.html"
             bottom="&lt;table width='100%'&gt;&lt;tr&gt;&lt;td width='20%'&gt;ArgoUML (c) 1996-2002&lt;/td&gt;&lt;td width='20%'&gt;&lt;center&gt;&lt;a href='http://argouml.tigris.org/' target='_blank'&gt;ArgoUML Project Home&lt;/a&gt;&lt;/center&gt;&lt;/td&gt;&lt;td width='20%'&gt;&lt;center&gt;&lt;a href='http://argouml.tigris.org/documentation/defaulthtml/cookbook/index.html' target='_blank'&gt;ArgoUML Cookbook&lt;/a&gt;&lt;/center&gt;&lt;/td&gt;&lt;td width='20%'&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;">
      <classpath>
          <pathelement path="${java.home}/../lib/tools.jar"/>
          <pathelement path="${lib.dir}/nsuml.jar"/>
          <pathelement path="${lib.dir}/ocl-argo.jar"/>
          <pathelement path="${lib.dir}/${gef.jar}"/>
          <pathelement path="${lib.dir}/antlrall.jar"/>
          <pathelement path="${lib.dir}/log4j.jar"/>
          <pathelement path="${lib.dir}/xerces.jar"/>
      </classpath>
      <link offline="true"
            href="${jdk.javadoc.link}"
            packagelistLoc="${jdk.javadoc.link}"/>
      <link offline="true"
            href="${log4j.javadoc.link}"
            packagelistLoc="${log4j.javadoc.link}"/>
      <link offline="true"
            href="${xerces.javadoc.link}"
            packagelistLoc="${xerces.javadoc.link}"/>

    </javadoc>

    <copy todir="${docs.dir}/org/argouml/doc-files">
      <fileset dir="${build.src}/org/argouml/doc-files" includes="**/**" excludes="CVS/**" />
    </copy>

  </target>

  <!-- =================================================================== -->
  <!-- Zips the javadocs                                                   -->
  <!-- Coincidentally (not) this file is suitable for adding to NetBeans   -->
  <!-- =================================================================== -->
  <target name="zip-docs" depends="prepare-docs">
      <zip zipfile="${build.dir}/argo-javadocs.zip"
           basedir="${docs.dir}">
      </zip> 
  </target>

  <!-- =================================================================== -->
  <!-- Creates the distribution                                            -->
  <!-- =================================================================== -->
  <target name="dist" depends="package">
    <echo message="Building the distribution files (zip,tar)"/>
    <zip zipfile="../${Name}-${version}.zip" basedir="${build.dir}" includes="${gef.jar} log4j.jar nsuml.jar xerces.jar ocl-argo.jar antlrall.jar argouml.jar README.txt"/>
    <tar tarfile="../${Name}-${version}.tar" basedir="${build.dir}" includes="${gef.jar} log4j.jar nsuml.jar xerces.jar ocl-argo.jar antlrall.jar argouml.jar README.txt">
    <!--
      <tarfileset mode="555">
	<include name="argouml.sh">
      </tarfileset>
    -->
    </tar>
    <gzip zipfile="../${Name}-${version}.tar.gz" src="../${Name}-${version}.tar" />
    <delete file="../${Name}-${version}.tar"/>
  </target>

  <!-- =================================================================== -->
  <!-- Creates the source distribution                                            -->
  <!-- =================================================================== -->
  <target name="dist-src" depends="init">
    <echo message="Building the source distribution files (zip,tar)"/>
    <chmod file="${src.dir}/build.sh" perm="ugo+rx" />
    <zip zipfile="../${Name}-${version}-src.zip" basedir="${src.dir}/.." excludes="**/.*/** **/.* **/*% **/*~ **/*.shared* **/*.proj* **/*.ref.* **/*.bak" includes="src_new/**"/>
    <tar tarfile="../${Name}-${version}-src.tar" basedir="${src.dir}/.." excludes="**/.*/** **/.* **/*% **/*~ **/*.shared* **/*.proj* **/*.ref.* **/*.bak" includes="src_new/**"/>
    <gzip zipfile="../${Name}-${version}-src.tar.gz" src="../${Name}-${version}-src.tar" />
    <delete file="../${Name}-${version}-src.tar"/>
  </target>

  <!-- =================================================================== -->
  <!-- Creates the lib distribution                                            -->
  <!-- =================================================================== -->
  <target name="dist-lib" depends="init">
    <echo message="Building the library distribution files (zip,tar)"/>
    <zip zipfile="../${Name}-${version}-libs.zip" basedir="${lib.dir}/.." includes="lib/${gef.jar} lib/log4j.jar lib/nsuml.jar lib/xerces.jar lib/ocl-argo.jar lib/antlrall.jar" />
    <tar tarfile="../${Name}-${version}-libs.tar" basedir="${lib.dir}/.." includes="lib/${gef.jar} lib/log4j.jar lib/nsuml.jar lib/xerces.jar lib/ocl-argo.jar lib/antlrall.jar" />
    <gzip zipfile="../${Name}-${version}-libs.tar.gz" src="../${Name}-${version}-libs.tar" />
    <delete file="../${Name}-${version}-libs.tar"/>
  </target>
  <!-- =================================================================== -->
  <!-- Creates the whole distribution                                            -->
  <!-- =================================================================== -->
  <target name="dist-all" depends="dist,dist-src,dist-lib"/>

  <!-- =================================================================== -->
  <!-- Creates the whole distribution with adjusted version number         -->
  <!-- =================================================================== -->
  <target name="dist-release" depends="setversion">
  	<property name="version" value="${argo.release.version}"/>
  	<antcall target="dist-all">
  	</antcall>
  </target>

  <!-- =================================================================== -->
  <!-- Clean targets                                                       -->
  <!-- =================================================================== -->
  <target name="clean" depends="init">
    <delete dir="${build.dir}/src_new"/>
    <delete dir="${build.dir}/javadocs"/>
    <delete dir="${build.dir}/ext"/>
    <delete dir="${build.dir}/classes"/>
    <delete dir="${build.dir}/bin"/>
    <delete file="${build.src}/${version.package}/ArgoVersion.java"/>
    <delete>
        <fileset dir="${build.dir}">
            <include name="*.jar"/>
            <include name="Fop.java"/>
            <include name="Fop.class"/>
            <include name="README.txt"/>
            <include name="argouml.sh"/>
        </fileset>
    </delete>
  </target>

  <target name="distclean" depends="clean">
    <delete dir="${dist.dir}"/>
    <delete>
       <fileset dir=".." includes="${Name}-${version}*" />
    </delete>
  </target>


  <!-- =================================================================== -->
  <!-- Run ArgoUML from compiled sources                                   -->
  <!-- =================================================================== -->
  <target name="run" depends="compile">
    <echo message="--- Executing ${Name} ---"/>
    <!-- Uncomment the sysproperty and change the value if you want -->
    <java classname="org.argouml.application.Main"
          fork="yes"
          classpath="${build.dest};${classpath}">
      <!-- sysproperty key="log4j.configuration"
                   value="org/argouml/resource/configuration.lcf"/-->
    </java>
  </target>

  <!-- =================================================================== -->
  <!-- Move the jar file into the user execution directory.                -->
  <!-- =================================================================== -->
  <target name="developer_snapshot" depends="package">
    <copy file="${build.dir}/${name}.jar" todir="${developer.lib.dir}"/>

    <filter token="argojarfile" value="${developer.lib.dir}/${name}.jar"/>
    <copy todir="${argo.bin.dir}" filtering="on" >
        <fileset dir="${developer.bin.dir}">
	    <include name="argouml.bat"/>
	    <include name="argouml.sh"/>
        </fileset>
    </copy>
  </target>

  <!-- =================================================================== -->
  <!-- Perform JDepend to find about the structure in ArgoUML.             -->
  <!-- =================================================================== -->
  <target name="jdepend" depends="init">
    <echo>
CC - Concrete Class Count 
AC - Abstract Class (and Interface) Count 
Ca - Afferent Couplings (Ca) 
Ce - Efferent Couplings (Ce) 
A - Abstractness (0-1) 
I - Instability (0-1) 
D - Distance from the Main Sequence (0-1) 
Cyclic - If the package contains a dependency cycle 

For details see http://www.clarkware.com/software/JDepend.html.
    </echo>
    <java classname="jdepend.swingui.JDepend" 
          fork="true"
          failonerror="true">
      <arg value="."/> 
      <classpath>
	<pathelement location="../tools/lib/jdepend.jar"/>
      </classpath>
    </java>
  </target>

</project>

<!-- End of file -->

