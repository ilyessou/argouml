<?xml version="1.0" encoding="UTF-8"?>
<xmi:XMI xmi:version="2.1" xmlns:xmi="http://schema.omg.org/spec/XMI/2.1" xmlns:cmof="http://schema.omg.org/spec/MOF/2.0/cmof.xml">
  <cmof:Package xmi:id="_0" name="L1" uri="http://schema.omg.org/spec/UML/2.1.1/uml.xml">
    <ownedMember xmi:type="cmof:PrimitiveType" xmi:id="Integer" name="Integer">
      <ownedComment xmi:type="cmof:Comment" xmi:id="Integer-_ownedComment.0" annotatedElement="Integer">
        <body>An integer is a primitive type representing integer values.</body>
      </ownedComment>
    </ownedMember>
    <ownedMember xmi:type="cmof:PrimitiveType" xmi:id="Boolean" name="Boolean">
      <ownedComment xmi:type="cmof:Comment" xmi:id="Boolean-_ownedComment.0" annotatedElement="Boolean">
        <body>A Boolean type is used for logical expression, consisting of the predefined values true and false.</body>
      </ownedComment>
    </ownedMember>
    <ownedMember xmi:type="cmof:PrimitiveType" xmi:id="String" name="String">
      <ownedComment xmi:type="cmof:Comment" xmi:id="String-_ownedComment.0" annotatedElement="String">
        <body>A string is a sequence of characters in some suitable character set used to display information about the model. Character sets may include non-Roman alphabets and characters.</body>
      </ownedComment>
    </ownedMember>
    <ownedMember xmi:type="cmof:PrimitiveType" xmi:id="UnlimitedNatural" name="UnlimitedNatural">
      <ownedComment xmi:type="cmof:Comment" xmi:id="UnlimitedNatural-_ownedComment.0" annotatedElement="UnlimitedNatural">
        <body>An unlimited natural is a primitive type representing unlimited natural values.</body>
      </ownedComment>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="Element" name="Element" isAbstract="true">
      <ownedComment xmi:type="cmof:Comment" xmi:id="Element-_ownedComment.0" annotatedElement="Element">
        <body>An element is a constituent of a model. As such, it has the capability of owning other elements.</body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="Element-not_own_self" name="not_own_self" constrainedElement="Element">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Element-not_own_self-_ownedComment.0" annotatedElement="Element-not_own_self">
          <body>An element may not directly or indirectly own itself.</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="Element-not_own_self-_specification">
          <language>OCL</language>
          <body>not self.allOwnedElements()->includes(self)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="Element-has_owner" name="has_owner" constrainedElement="Element">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Element-has_owner-_ownedComment.0" annotatedElement="Element-has_owner">
          <body>Elements that must be owned must have an owner.</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="Element-has_owner-_specification">
          <language>OCL</language>
          <body>self.mustBeOwned() implies owner->notEmpty()</body>
        </specification>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Element-ownedElement" name="ownedElement" lower="0" upper="*" type="Element" isDerivedUnion="true" association="A_ownedElement_owner" isReadOnly="true" isComposite="true" isDerived="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Element-ownedElement-_ownedComment.0" annotatedElement="Element-ownedElement">
          <body>The Elements owned by this element.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Element-owner" name="owner" lower="0" type="Element" isDerivedUnion="true" association="A_ownedElement_owner" isReadOnly="true" isDerived="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Element-owner-_ownedComment.0" annotatedElement="Element-owner">
          <body>The Element that owns this element.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Element-ownedComment" name="ownedComment" lower="0" upper="*" type="Comment" association="A_ownedComment_owningElement" subsettedProperty="Element-ownedElement" isComposite="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Element-ownedComment-_ownedComment.0" annotatedElement="Element-ownedComment">
          <body>The Comments owned by this element.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="Element-allOwnedElements" name="allOwnedElements" isQuery="true" bodyCondition="Element-allOwnedElements-spec">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Element-allOwnedElements-_ownedComment.0" annotatedElement="Element-allOwnedElements">
          <body>The query allOwnedElements() gives all of the direct and indirect owned elements of an element.</body>
        </ownedComment>
        <ownedRule xmi:type="cmof:Constraint" xmi:id="Element-allOwnedElements-spec" name="spec" constrainedElement="Element-allOwnedElements">
          <specification xmi:type="cmof:OpaqueExpression" xmi:id="Element-allOwnedElements-spec-_specification">
            <language>OCL</language>
            <body>result = ownedElement->union(ownedElement->collect(e | e.allOwnedElements()))</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="Element-allOwnedElements-_member.1" lower="0" upper="*" type="Element" direction="return"/>
      </ownedOperation>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="Element-mustBeOwned" name="mustBeOwned" isQuery="true" bodyCondition="Element-mustBeOwned-spec">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Element-mustBeOwned-_ownedComment.0" annotatedElement="Element-mustBeOwned">
          <body>The query mustBeOwned() indicates whether elements of this type must have an owner. Subclasses of Element that do not require an owner must override this operation.</body>
        </ownedComment>
        <ownedRule xmi:type="cmof:Constraint" xmi:id="Element-mustBeOwned-spec" name="spec" constrainedElement="Element-mustBeOwned">
          <specification xmi:type="cmof:OpaqueExpression" xmi:id="Element-mustBeOwned-spec-_specification">
            <language>OCL</language>
            <body>result = true</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="Element-mustBeOwned-_member.1" type="Boolean" direction="return"/>
      </ownedOperation>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="Comment" name="Comment" superClass="Element">
      <ownedComment xmi:type="cmof:Comment" xmi:id="Comment-_ownedComment.0" annotatedElement="Comment">
        <body>A comment is a textual annotation that can be attached to a set of elements.</body>
      </ownedComment>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Comment-body" name="body" lower="0" type="String">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Comment-body-_ownedComment.0" annotatedElement="Comment-body">
          <body>Specifies a string that is the comment.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Comment-annotatedElement" name="annotatedElement" lower="0" upper="*" type="Element" association="A_annotatedElement_comment">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Comment-annotatedElement-_ownedComment.0" annotatedElement="Comment-annotatedElement">
          <body>References the Element(s) being commented.</body>
        </ownedComment>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="DirectedRelationship" name="DirectedRelationship" isAbstract="true" superClass="Relationship">
      <ownedComment xmi:type="cmof:Comment" xmi:id="DirectedRelationship-_ownedComment.0" annotatedElement="DirectedRelationship">
        <body>A directed relationship represents a relationship between a collection of source model elements and a collection of target model elements.</body>
      </ownedComment>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="DirectedRelationship-source" name="source" upper="*" type="Element" isDerivedUnion="true" association="A_source_directedRelationship" subsettedProperty="Relationship-relatedElement" isReadOnly="true" isDerived="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="DirectedRelationship-source-_ownedComment.0" annotatedElement="DirectedRelationship-source">
          <body>Specifies the sources of the DirectedRelationship.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="DirectedRelationship-target" name="target" upper="*" type="Element" isDerivedUnion="true" association="A_target_directedRelationship" subsettedProperty="Relationship-relatedElement" isReadOnly="true" isDerived="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="DirectedRelationship-target-_ownedComment.0" annotatedElement="DirectedRelationship-target">
          <body>Specifies the targets of the DirectedRelationship.</body>
        </ownedComment>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="LiteralSpecification" name="LiteralSpecification" isAbstract="true" superClass="ValueSpecification">
      <ownedComment xmi:type="cmof:Comment" xmi:id="LiteralSpecification-_ownedComment.0" annotatedElement="LiteralSpecification">
        <body>A literal specification identifies a literal constant being modeled.</body>
      </ownedComment>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="LiteralInteger" name="LiteralInteger" superClass="LiteralSpecification">
      <ownedComment xmi:type="cmof:Comment" xmi:id="LiteralInteger-_ownedComment.0" annotatedElement="LiteralInteger">
        <body>A literal integer is a specification of an integer value.</body>
      </ownedComment>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="LiteralInteger-value" name="value" type="Integer" default="0">
        <ownedComment xmi:type="cmof:Comment" xmi:id="LiteralInteger-value-_ownedComment.0" annotatedElement="LiteralInteger-value">
          <body>The specified Integer value.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="LiteralInteger-isComputable" name="isComputable" isQuery="true" redefinedOperation="ValueSpecification-isComputable" bodyCondition="LiteralInteger-isComputable-spec">
        <ownedComment xmi:type="cmof:Comment" xmi:id="LiteralInteger-isComputable-_ownedComment.0" annotatedElement="LiteralInteger-isComputable">
          <body>The query isComputable() is redefined to be true.</body>
        </ownedComment>
        <ownedRule xmi:type="cmof:Constraint" xmi:id="LiteralInteger-isComputable-spec" name="spec" constrainedElement="LiteralInteger-isComputable">
          <specification xmi:type="cmof:OpaqueExpression" xmi:id="LiteralInteger-isComputable-spec-_specification">
            <language>OCL</language>
            <body>result = true</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="LiteralInteger-isComputable-_member.1" type="Boolean" direction="return"/>
      </ownedOperation>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="LiteralInteger-integerValue" name="integerValue" isQuery="true" redefinedOperation="ValueSpecification-integerValue" bodyCondition="LiteralInteger-integerValue-spec">
        <ownedComment xmi:type="cmof:Comment" xmi:id="LiteralInteger-integerValue-_ownedComment.0" annotatedElement="LiteralInteger-integerValue">
          <body>The query integerValue() gives the value.</body>
        </ownedComment>
        <ownedRule xmi:type="cmof:Constraint" xmi:id="LiteralInteger-integerValue-spec" name="spec" constrainedElement="LiteralInteger-integerValue">
          <specification xmi:type="cmof:OpaqueExpression" xmi:id="LiteralInteger-integerValue-spec-_specification">
            <language>OCL</language>
            <body>result = value</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="LiteralInteger-integerValue-_member.1" type="Integer" direction="return"/>
      </ownedOperation>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="LiteralString" name="LiteralString" superClass="LiteralSpecification">
      <ownedComment xmi:type="cmof:Comment" xmi:id="LiteralString-_ownedComment.0" annotatedElement="LiteralString">
        <body>A literal string is a specification of a string value.</body>
      </ownedComment>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="LiteralString-value" name="value" lower="0" type="String">
        <ownedComment xmi:type="cmof:Comment" xmi:id="LiteralString-value-_ownedComment.0" annotatedElement="LiteralString-value">
          <body>The specified String value.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="LiteralString-isComputable" name="isComputable" isQuery="true" redefinedOperation="ValueSpecification-isComputable" bodyCondition="LiteralString-isComputable-spec">
        <ownedComment xmi:type="cmof:Comment" xmi:id="LiteralString-isComputable-_ownedComment.0" annotatedElement="LiteralString-isComputable">
          <body>The query isComputable() is redefined to be true.</body>
        </ownedComment>
        <ownedRule xmi:type="cmof:Constraint" xmi:id="LiteralString-isComputable-spec" name="spec" constrainedElement="LiteralString-isComputable">
          <specification xmi:type="cmof:OpaqueExpression" xmi:id="LiteralString-isComputable-spec-_specification">
            <language>OCL</language>
            <body>result = true</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="LiteralString-isComputable-_member.1" type="Boolean" direction="return"/>
      </ownedOperation>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="LiteralString-stringValue" name="stringValue" isQuery="true" redefinedOperation="ValueSpecification-stringValue" bodyCondition="LiteralString-stringValue-spec">
        <ownedComment xmi:type="cmof:Comment" xmi:id="LiteralString-stringValue-_ownedComment.0" annotatedElement="LiteralString-stringValue">
          <body>The query stringValue() gives the value.</body>
        </ownedComment>
        <ownedRule xmi:type="cmof:Constraint" xmi:id="LiteralString-stringValue-spec" name="spec" constrainedElement="LiteralString-stringValue">
          <specification xmi:type="cmof:OpaqueExpression" xmi:id="LiteralString-stringValue-spec-_specification">
            <language>OCL</language>
            <body>result = value</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="LiteralString-stringValue-_member.1" type="String" direction="return"/>
      </ownedOperation>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="LiteralBoolean" name="LiteralBoolean" superClass="LiteralSpecification">
      <ownedComment xmi:type="cmof:Comment" xmi:id="LiteralBoolean-_ownedComment.0" annotatedElement="LiteralBoolean">
        <body>A literal Boolean is a specification of a Boolean value.</body>
      </ownedComment>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="LiteralBoolean-value" name="value" type="Boolean" default="false">
        <ownedComment xmi:type="cmof:Comment" xmi:id="LiteralBoolean-value-_ownedComment.0" annotatedElement="LiteralBoolean-value">
          <body>The specified Boolean value.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="LiteralBoolean-isComputable" name="isComputable" isQuery="true" redefinedOperation="ValueSpecification-isComputable" bodyCondition="LiteralBoolean-isComputable-spec">
        <ownedComment xmi:type="cmof:Comment" xmi:id="LiteralBoolean-isComputable-_ownedComment.0" annotatedElement="LiteralBoolean-isComputable">
          <body>The query isComputable() is redefined to be true.</body>
        </ownedComment>
        <ownedRule xmi:type="cmof:Constraint" xmi:id="LiteralBoolean-isComputable-spec" name="spec" constrainedElement="LiteralBoolean-isComputable">
          <specification xmi:type="cmof:OpaqueExpression" xmi:id="LiteralBoolean-isComputable-spec-_specification">
            <language>OCL</language>
            <body>result = true</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="LiteralBoolean-isComputable-_member.1" type="Boolean" direction="return"/>
      </ownedOperation>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="LiteralBoolean-booleanValue" name="booleanValue" isQuery="true" redefinedOperation="ValueSpecification-booleanValue" bodyCondition="LiteralBoolean-booleanValue-spec">
        <ownedComment xmi:type="cmof:Comment" xmi:id="LiteralBoolean-booleanValue-_ownedComment.0" annotatedElement="LiteralBoolean-booleanValue">
          <body>The query booleanValue() gives the value.</body>
        </ownedComment>
        <ownedRule xmi:type="cmof:Constraint" xmi:id="LiteralBoolean-booleanValue-spec" name="spec" constrainedElement="LiteralBoolean-booleanValue">
          <specification xmi:type="cmof:OpaqueExpression" xmi:id="LiteralBoolean-booleanValue-spec-_specification">
            <language>OCL</language>
            <body>result = value</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="LiteralBoolean-booleanValue-_member.1" type="Boolean" direction="return"/>
      </ownedOperation>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="LiteralNull" name="LiteralNull" superClass="LiteralSpecification">
      <ownedComment xmi:type="cmof:Comment" xmi:id="LiteralNull-_ownedComment.0" annotatedElement="LiteralNull">
        <body>A literal null specifies the lack of a value.</body>
      </ownedComment>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="LiteralNull-isComputable" name="isComputable" isQuery="true" redefinedOperation="ValueSpecification-isComputable" bodyCondition="LiteralNull-isComputable-spec">
        <ownedComment xmi:type="cmof:Comment" xmi:id="LiteralNull-isComputable-_ownedComment.0" annotatedElement="LiteralNull-isComputable">
          <body>The query isComputable() is redefined to be true.</body>
        </ownedComment>
        <ownedRule xmi:type="cmof:Constraint" xmi:id="LiteralNull-isComputable-spec" name="spec" constrainedElement="LiteralNull-isComputable">
          <specification xmi:type="cmof:OpaqueExpression" xmi:id="LiteralNull-isComputable-spec-_specification">
            <language>OCL</language>
            <body>result = true</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="LiteralNull-isComputable-_member.1" type="Boolean" direction="return"/>
      </ownedOperation>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="LiteralNull-isNull" name="isNull" isQuery="true" redefinedOperation="ValueSpecification-isNull" bodyCondition="LiteralNull-isNull-spec">
        <ownedComment xmi:type="cmof:Comment" xmi:id="LiteralNull-isNull-_ownedComment.0" annotatedElement="LiteralNull-isNull">
          <body>The query isNull() returns true.</body>
        </ownedComment>
        <ownedRule xmi:type="cmof:Constraint" xmi:id="LiteralNull-isNull-spec" name="spec" constrainedElement="LiteralNull-isNull">
          <specification xmi:type="cmof:OpaqueExpression" xmi:id="LiteralNull-isNull-spec-_specification">
            <language>OCL</language>
            <body>result = true</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="LiteralNull-isNull-_member.1" type="Boolean" direction="return"/>
      </ownedOperation>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="Constraint" name="Constraint" superClass="PackageableElement">
      <ownedComment xmi:type="cmof:Comment" xmi:id="Constraint-_ownedComment.0" annotatedElement="Constraint">
        <body>A constraint is a condition or restriction expressed in natural language text or in a machine readable language for the purpose of declaring some of the semantics of an element.</body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="Constraint-not_apply_to_self" name="not_apply_to_self" constrainedElement="Constraint">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Constraint-not_apply_to_self-_ownedComment.0" annotatedElement="Constraint-not_apply_to_self">
          <body>A constraint cannot be applied to itself.</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="Constraint-not_apply_to_self-_specification">
          <language>OCL</language>
          <body>not constrainedElement->includes(self)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="Constraint-value_specification_boolean" name="value_specification_boolean" constrainedElement="Constraint">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Constraint-value_specification_boolean-_ownedComment.0" annotatedElement="Constraint-value_specification_boolean">
          <body>The value specification for a constraint must evaluate to a Boolean value.</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="Constraint-value_specification_boolean-_specification">
          <language>OCL</language>
          <body>self.specification().booleanValue().isOclKindOf(Boolean)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="Constraint-boolean_value" name="boolean_value" constrainedElement="Constraint">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Constraint-boolean_value-_ownedComment.0" annotatedElement="Constraint-boolean_value">
          <body>The value specification for a constraint must evaluate to a Boolean value.</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="Constraint-boolean_value-_specification">
          <language>OCL</language>
          <body>true</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="Constraint-no_side_effects" name="no_side_effects" constrainedElement="Constraint">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Constraint-no_side_effects-_ownedComment.0" annotatedElement="Constraint-no_side_effects">
          <body>Evaluating the value specification for a constraint must not have side effects.</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="Constraint-no_side_effects-_specification">
          <language>OCL</language>
          <body>true</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="Constraint-not_applied_to_self" name="not_applied_to_self" constrainedElement="Constraint">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Constraint-not_applied_to_self-_ownedComment.0" annotatedElement="Constraint-not_applied_to_self">
          <body>A constraint cannot be applied to itself.</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="Constraint-not_applied_to_self-_specification">
          <language>OCL</language>
          <body>not constrainedElement->includes(self)</body>
        </specification>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Constraint-constrainedElement" name="constrainedElement" isOrdered="true" lower="0" upper="*" type="Element" association="A_constrainedElement_constraint">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Constraint-constrainedElement-_ownedComment.0" annotatedElement="Constraint-constrainedElement">
          <body>The ordered set of Elements referenced by this Constraint.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Constraint-specification" name="specification" type="ValueSpecification" association="A_specification_owningConstraint" subsettedProperty="Element-ownedElement" isComposite="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Constraint-specification-_ownedComment.0" annotatedElement="Constraint-specification">
          <body>A condition that must be true when evaluated in order for the constraint to be satisfied.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Constraint-context" name="context" lower="0" type="Namespace" association="A_ownedRule_context" subsettedProperty="NamedElement-namespace">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Constraint-context-_ownedComment.0" annotatedElement="Constraint-context">
          <body>Specifies the namespace that owns the NamedElement.</body>
        </ownedComment>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="ElementImport" name="ElementImport" superClass="DirectedRelationship">
      <ownedComment xmi:type="cmof:Comment" xmi:id="ElementImport-_ownedComment.0" annotatedElement="ElementImport">
        <body>An element import identifies an element in another package, and allows the element to be referenced using its name without a qualifier.</body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="ElementImport-visibility_public_or_private" name="visibility_public_or_private" constrainedElement="ElementImport">
        <ownedComment xmi:type="cmof:Comment" xmi:id="ElementImport-visibility_public_or_private-_ownedComment.0" annotatedElement="ElementImport-visibility_public_or_private">
          <body>The visibility of an ElementImport is either public or private.</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="ElementImport-visibility_public_or_private-_specification">
          <language>OCL</language>
          <body>self.visibility = #public or self.visibility = #private</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="ElementImport-imported_element_is_public" name="imported_element_is_public" constrainedElement="ElementImport">
        <ownedComment xmi:type="cmof:Comment" xmi:id="ElementImport-imported_element_is_public-_ownedComment.0" annotatedElement="ElementImport-imported_element_is_public">
          <body>An importedElement has either public visibility or no visibility at all.</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="ElementImport-imported_element_is_public-_specification">
          <language>OCL</language>
          <body>self.importedElement.visibility.notEmpty() implies self.importedElement.visibility = #public</body>
        </specification>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="ElementImport-visibility" name="visibility" type="VisibilityKind" default="public">
        <ownedComment xmi:type="cmof:Comment" xmi:id="ElementImport-visibility-_ownedComment.0" annotatedElement="ElementImport-visibility">
          <body>Specifies the visibility of the imported PackageableElement within the importing Package. The default visibility is the same as that of the imported element. If the imported element does not have a visibility, it is possible to add visibility to the element import.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="ElementImport-alias" name="alias" lower="0" type="String">
        <ownedComment xmi:type="cmof:Comment" xmi:id="ElementImport-alias-_ownedComment.0" annotatedElement="ElementImport-alias">
          <body>Specifies the name that should be added to the namespace of the importing package in lieu of the name of the imported packagable element. The aliased name must not clash with any other member name in the importing package. By default, no alias is used.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="ElementImport-importedElement" name="importedElement" type="PackageableElement" association="A_importedElement_elementImport" subsettedProperty="DirectedRelationship-target">
        <ownedComment xmi:type="cmof:Comment" xmi:id="ElementImport-importedElement-_ownedComment.0" annotatedElement="ElementImport-importedElement">
          <body>Specifies the PackageableElement whose name is to be added to a Namespace.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="ElementImport-importingNamespace" name="importingNamespace" type="Namespace" association="A_elementImport_importingNamespace" subsettedProperty="DirectedRelationship-source Element-owner">
        <ownedComment xmi:type="cmof:Comment" xmi:id="ElementImport-importingNamespace-_ownedComment.0" annotatedElement="ElementImport-importingNamespace">
          <body>Specifies the Namespace that imports a PackageableElement from another Package.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="ElementImport-getName" name="getName" isQuery="true" bodyCondition="ElementImport-getName-spec">
        <ownedComment xmi:type="cmof:Comment" xmi:id="ElementImport-getName-_ownedComment.0" annotatedElement="ElementImport-getName">
          <body>The query getName() returns the name under which the imported PackageableElement will be known in the importing namespace.</body>
        </ownedComment>
        <ownedRule xmi:type="cmof:Constraint" xmi:id="ElementImport-getName-spec" name="spec" constrainedElement="ElementImport-getName">
          <specification xmi:type="cmof:OpaqueExpression" xmi:id="ElementImport-getName-spec-_specification">
            <language>OCL</language>
            <body>result = if self.alias->notEmpty() then&#xA;  self.alias&#xA;else&#xA;  self.importedElement.name&#xA;endif</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="ElementImport-getName-_member.1" type="String" direction="return"/>
      </ownedOperation>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="TypedElement" name="TypedElement" isAbstract="true" superClass="NamedElement">
      <ownedComment xmi:type="cmof:Comment" xmi:id="TypedElement-_ownedComment.0" annotatedElement="TypedElement">
        <body>A typed element is a kind of named element that represents an element with a type.</body>
      </ownedComment>
      <ownedComment xmi:type="cmof:Comment" xmi:id="TypedElement-_ownedComment.1" annotatedElement="TypedElement">
        <body>A typed element has a type.</body>
      </ownedComment>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="TypedElement-type" name="type" lower="0" type="Type" association="A_type_typedElement">
        <ownedComment xmi:type="cmof:Comment" xmi:id="TypedElement-type-_ownedComment.0" annotatedElement="TypedElement-type">
          <body>This information is derived from the return result for this Operation.</body>
        </ownedComment>
        <ownedComment xmi:type="cmof:Comment" xmi:id="TypedElement-type-_ownedComment.1" annotatedElement="TypedElement-type">
          <body>The type of the TypedElement.</body>
        </ownedComment>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="Feature" name="Feature" isAbstract="true" superClass="RedefinableElement">
      <ownedComment xmi:type="cmof:Comment" xmi:id="Feature-_ownedComment.0" annotatedElement="Feature">
        <body>A feature declares a behavioral or structural characteristic of instances of classifiers.</body>
      </ownedComment>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Feature-isStatic" name="isStatic" type="Boolean" default="false">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Feature-isStatic-_ownedComment.0" annotatedElement="Feature-isStatic">
          <body>Specifies whether this feature characterizes individual instances classified by the classifier (false) or the classifier itself (true).</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Feature-featuringClassifier" name="featuringClassifier" lower="0" upper="*" type="Classifier" isDerivedUnion="true" association="A_feature_featuringClassifier" isReadOnly="true" isDerived="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Feature-featuringClassifier-_ownedComment.0" annotatedElement="Feature-featuringClassifier">
          <body>The Classifiers that have this Feature as a feature.</body>
        </ownedComment>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="RedefinableElement" name="RedefinableElement" isAbstract="true" superClass="NamedElement">
      <ownedComment xmi:type="cmof:Comment" xmi:id="RedefinableElement-_ownedComment.0" annotatedElement="RedefinableElement">
        <body>A redefinable element is an element that, when defined in the context of a classifier, can be redefined more specifically or differently in the context of another classifier that specializes (directly or indirectly) the context classifier.</body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="RedefinableElement-redefinition_context_valid" name="redefinition_context_valid" constrainedElement="RedefinableElement">
        <ownedComment xmi:type="cmof:Comment" xmi:id="RedefinableElement-redefinition_context_valid-_ownedComment.0" annotatedElement="RedefinableElement-redefinition_context_valid">
          <body>At least one of the redefinition contexts of the redefining element must be a specialization of at least one of the redefinition contexts for each redefined element.</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="RedefinableElement-redefinition_context_valid-_specification">
          <language>OCL</language>
          <body>self.redefinedElement->forAll(e | self.isRedefinitionContextValid(e))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="RedefinableElement-redefinition_consistent" name="redefinition_consistent" constrainedElement="RedefinableElement">
        <ownedComment xmi:type="cmof:Comment" xmi:id="RedefinableElement-redefinition_consistent-_ownedComment.0" annotatedElement="RedefinableElement-redefinition_consistent">
          <body>A redefining element must be consistent with each redefined element.</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="RedefinableElement-redefinition_consistent-_specification">
          <language>OCL</language>
          <body>self.redefinedElement->forAll(re | re.isConsistentWith(self))</body>
        </specification>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="RedefinableElement-isLeaf" name="isLeaf" type="Boolean" default="false">
        <ownedComment xmi:type="cmof:Comment" xmi:id="RedefinableElement-isLeaf-_ownedComment.0" annotatedElement="RedefinableElement-isLeaf">
          <body>Indicates whether it is possible to further specialize a RedefinableElement. If the value is true, then it is not possible to further specialize the RedefinableElement.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="RedefinableElement-redefinedElement" name="redefinedElement" lower="0" upper="*" type="RedefinableElement" isDerivedUnion="true" association="A_redefinedElement_redefinableElement" isReadOnly="true" isDerived="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="RedefinableElement-redefinedElement-_ownedComment.0" annotatedElement="RedefinableElement-redefinedElement">
          <body>The redefinable element that is being redefined by this element.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="RedefinableElement-redefinitionContext" name="redefinitionContext" lower="0" upper="*" type="Classifier" isDerivedUnion="true" association="A_redefinitionContext_redefinableElement" isReadOnly="true" isDerived="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="RedefinableElement-redefinitionContext-_ownedComment.0" annotatedElement="RedefinableElement-redefinitionContext">
          <body>References the contexts that this element may be redefined from.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="RedefinableElement-isConsistentWith" name="isConsistentWith" isQuery="true" precondition="RedefinableElement-isConsistentWith-_ownedRule.0" bodyCondition="RedefinableElement-isConsistentWith-spec">
        <ownedComment xmi:type="cmof:Comment" xmi:id="RedefinableElement-isConsistentWith-_ownedComment.0" annotatedElement="RedefinableElement-isConsistentWith">
          <body>The query isConsistentWith() specifies, for any two RedefinableElements in a context in which redefinition is possible, whether redefinition would be logically consistent. By default, this is false; this operation must be overridden for subclasses of RedefinableElement to define the consistency conditions.</body>
        </ownedComment>
        <ownedRule xmi:type="cmof:Constraint" xmi:id="RedefinableElement-isConsistentWith-_ownedRule.0" constrainedElement="RedefinableElement-isConsistentWith">
          <specification xmi:type="cmof:OpaqueExpression" xmi:id="RedefinableElement-isConsistentWith-_ownedRule.0-_specification">
            <language>OCL</language>
            <body>redefinee.isRedefinitionContextValid(self)</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="cmof:Constraint" xmi:id="RedefinableElement-isConsistentWith-spec" name="spec" constrainedElement="RedefinableElement-isConsistentWith">
          <specification xmi:type="cmof:OpaqueExpression" xmi:id="RedefinableElement-isConsistentWith-spec-_specification">
            <language>OCL</language>
            <body>result = false</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="RedefinableElement-isConsistentWith-_member.2" type="Boolean" direction="return"/>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="RedefinableElement-isConsistentWith-redefinee" name="redefinee" type="RedefinableElement"/>
      </ownedOperation>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="RedefinableElement-isRedefinitionContextValid" name="isRedefinitionContextValid" isQuery="true" bodyCondition="RedefinableElement-isRedefinitionContextValid-spec">
        <ownedComment xmi:type="cmof:Comment" xmi:id="RedefinableElement-isRedefinitionContextValid-_ownedComment.0" annotatedElement="RedefinableElement-isRedefinitionContextValid">
          <body>The query isRedefinitionContextValid() specifies whether the redefinition contexts of this RedefinableElement are properly related to the redefinition contexts of the specified RedefinableElement to allow this element to redefine the other. By default at least one of the redefinition contexts of this element must be a specialization of at least one of the redefinition contexts of the specified element.</body>
        </ownedComment>
        <ownedRule xmi:type="cmof:Constraint" xmi:id="RedefinableElement-isRedefinitionContextValid-spec" name="spec" constrainedElement="RedefinableElement-isRedefinitionContextValid">
          <specification xmi:type="cmof:OpaqueExpression" xmi:id="RedefinableElement-isRedefinitionContextValid-spec-_specification">
            <language>OCL</language>
            <body>result = redefinitionContext->exists(c | c.allParents()->includes(redefined.redefinitionContext)))</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="RedefinableElement-isRedefinitionContextValid-_member.1" type="Boolean" direction="return"/>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="RedefinableElement-isRedefinitionContextValid-redefined" name="redefined" type="RedefinableElement"/>
      </ownedOperation>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="Generalization" name="Generalization" superClass="DirectedRelationship">
      <ownedComment xmi:type="cmof:Comment" xmi:id="Generalization-_ownedComment.0" annotatedElement="Generalization">
        <body>A generalization is a taxonomic relationship between a more general classifier and a more specific classifier. Each instance of the specific classifier is also an indirect instance of the general classifier. Thus, the specific classifier inherits the features of the more general classifier.</body>
      </ownedComment>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Generalization-isSubstitutable" name="isSubstitutable" lower="0" type="Boolean">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Generalization-isSubstitutable-_ownedComment.0" annotatedElement="Generalization-isSubstitutable">
          <body>Indicates whether the specific classifier can be used wherever the general classifier can be used. If true, the execution traces of the specific classifier will be a superset of the execution traces of the general classifier.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Generalization-specific" name="specific" type="Classifier" association="A_generalization_specific" subsettedProperty="DirectedRelationship-source Element-owner">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Generalization-specific-_ownedComment.0" annotatedElement="Generalization-specific">
          <body>References the specializing classifier in the Generalization relationship.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Generalization-general" name="general" type="Classifier" association="A_general_generalization" subsettedProperty="DirectedRelationship-target">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Generalization-general-_ownedComment.0" annotatedElement="Generalization-general">
          <body>References the general classifier in the Generalization relationship.</body>
        </ownedComment>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="Parameter" name="Parameter" superClass="TypedElement MultiplicityElement">
      <ownedComment xmi:type="cmof:Comment" xmi:id="Parameter-_ownedComment.0" annotatedElement="Parameter">
        <body>A parameter is a specification of an argument used to pass information into or out of an invocation of a behavioral feature.</body>
      </ownedComment>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Parameter-direction" name="direction" type="ParameterDirectionKind" default="in">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Parameter-direction-_ownedComment.0" annotatedElement="Parameter-direction">
          <body>Indicates whether a parameter is being sent into or out of a behavioral element.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Parameter-default" name="default" lower="0" type="String" isDerived="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Parameter-default-_ownedComment.0" annotatedElement="Parameter-default">
          <body>Specifies a String that represents a value to be used when no argument is supplied for the Parameter.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Parameter-defaultValue" name="defaultValue" lower="0" type="ValueSpecification" association="A_defaultValue_owningParameter" subsettedProperty="Element-ownedElement" isComposite="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Parameter-defaultValue-_ownedComment.0" annotatedElement="Parameter-defaultValue">
          <body>Specifies a ValueSpecification that represents a value to be used when no argument is supplied for the Parameter.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Parameter-operation" name="operation" lower="0" type="Operation" association="A_ownedParameter_operation" subsettedProperty="NamedElement-namespace">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Parameter-operation-_ownedComment.0" annotatedElement="Parameter-operation">
          <body>References the Operation owning this parameter.</body>
        </ownedComment>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="StructuralFeature" name="StructuralFeature" isAbstract="true" superClass="Feature TypedElement MultiplicityElement">
      <ownedComment xmi:type="cmof:Comment" xmi:id="StructuralFeature-_ownedComment.0" annotatedElement="StructuralFeature">
        <body>A structural feature is a typed feature of a classifier that specifies the structure of instances of the classifier.</body>
      </ownedComment>
      <ownedComment xmi:type="cmof:Comment" xmi:id="StructuralFeature-_ownedComment.1" annotatedElement="StructuralFeature">
        <body>By specializing multiplicity element, it supports a multiplicity that specifies valid cardinalities for the collection of values associated with an instantiation of the structural feature.</body>
      </ownedComment>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="StructuralFeature-isReadOnly" name="isReadOnly" type="Boolean" default="false">
        <ownedComment xmi:type="cmof:Comment" xmi:id="StructuralFeature-isReadOnly-_ownedComment.0" annotatedElement="StructuralFeature-isReadOnly">
          <body>States whether the feature's value may be modified by a client.</body>
        </ownedComment>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="InstanceSpecification" name="InstanceSpecification" superClass="PackageableElement">
      <ownedComment xmi:type="cmof:Comment" xmi:id="InstanceSpecification-_ownedComment.0" annotatedElement="InstanceSpecification">
        <body>An instance specification is a model element that represents an instance in a modeled system.</body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="InstanceSpecification-defining_feature" name="defining_feature" constrainedElement="InstanceSpecification">
        <ownedComment xmi:type="cmof:Comment" xmi:id="InstanceSpecification-defining_feature-_ownedComment.0" annotatedElement="InstanceSpecification-defining_feature">
          <body>The defining feature of each slot is a structural feature (directly or inherited) of a classifier of the instance specification.</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="InstanceSpecification-defining_feature-_specification">
          <language>OCL</language>
          <body>slot->forAll(s | classifier->exists (c | c.allFeatures()->includes (s.definingFeature)))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="InstanceSpecification-structural_feature" name="structural_feature" constrainedElement="InstanceSpecification">
        <ownedComment xmi:type="cmof:Comment" xmi:id="InstanceSpecification-structural_feature-_ownedComment.0" annotatedElement="InstanceSpecification-structural_feature">
          <body>One structural feature (including the same feature inherited from multiple classifiers) is the defining feature of at most one slot in an instance specification.</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="InstanceSpecification-structural_feature-_specification">
          <language>OCL</language>
          <body>classifier->forAll(c | (c.allFeatures()->forAll(f | slot->select(s | s.definingFeature = f)->size() &lt;= 1)))</body>
        </specification>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="InstanceSpecification-classifier" name="classifier" lower="0" upper="*" type="Classifier" association="A_classifier_instanceSpecification">
        <ownedComment xmi:type="cmof:Comment" xmi:id="InstanceSpecification-classifier-_ownedComment.0" annotatedElement="InstanceSpecification-classifier">
          <body>The classifier or classifiers of the represented instance. If multiple classifiers are specified, the instance is classified by all of them.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="InstanceSpecification-slot" name="slot" lower="0" upper="*" type="Slot" association="A_slot_owningInstance" subsettedProperty="Element-ownedElement" isComposite="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="InstanceSpecification-slot-_ownedComment.0" annotatedElement="InstanceSpecification-slot">
          <body>A slot giving the value or values of a structural feature of the instance. An instance specification can have one slot per structural feature of its classifiers, including inherited features. It is not necessary to model a slot for each structural feature, in which case the instance specification is a partial description.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="InstanceSpecification-specification" name="specification" lower="0" type="ValueSpecification" association="A_specification_owningInstanceSpec" subsettedProperty="Element-ownedElement" isComposite="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="InstanceSpecification-specification-_ownedComment.0" annotatedElement="InstanceSpecification-specification">
          <body>A specification of how to compute, derive, or construct the instance.</body>
        </ownedComment>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="Slot" name="Slot" superClass="Element">
      <ownedComment xmi:type="cmof:Comment" xmi:id="Slot-_ownedComment.0" annotatedElement="Slot">
        <body>A slot specifies that an entity modeled by an instance specification has a value or values for a specific structural feature.</body>
      </ownedComment>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Slot-owningInstance" name="owningInstance" type="InstanceSpecification" association="A_slot_owningInstance" subsettedProperty="Element-owner">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Slot-owningInstance-_ownedComment.0" annotatedElement="Slot-owningInstance">
          <body>The instance specification that owns this slot.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Slot-definingFeature" name="definingFeature" type="StructuralFeature" association="A_definingFeature_slot">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Slot-definingFeature-_ownedComment.0" annotatedElement="Slot-definingFeature">
          <body>The structural feature that specifies the values that may be held by the slot.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Slot-value" name="value" isOrdered="true" lower="0" upper="*" type="ValueSpecification" association="A_value_owningSlot" subsettedProperty="Element-ownedElement" isComposite="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Slot-value-_ownedComment.0" annotatedElement="Slot-value">
          <body>The value or values corresponding to the defining feature for the owning instance specification.</body>
        </ownedComment>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="Package" name="Package" superClass="PackageableElement Namespace">
      <ownedComment xmi:type="cmof:Comment" xmi:id="Package-_ownedComment.0" annotatedElement="Package">
        <body>A package is used to group elements, and provides a namespace for the grouped elements.</body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="Package-elements_public_or_private" name="elements_public_or_private" constrainedElement="Package">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Package-elements_public_or_private-_ownedComment.0" annotatedElement="Package-elements_public_or_private">
          <body>If an element that is owned by a package has visibility, it is public or private.</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="Package-elements_public_or_private-_specification">
          <language>OCL</language>
          <body>self.ownedElements->forAll(e | e.visibility->notEmpty() implies e.visbility = #public or e.visibility = #private)</body>
        </specification>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Package-packageMerge" name="packageMerge" lower="0" upper="*" type="PackageMerge" association="A_receivingPackage_packageMerge" subsettedProperty="Element-ownedElement" isComposite="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Package-packageMerge-_ownedComment.0" annotatedElement="Package-packageMerge">
          <body>References the PackageMerges that are owned by this Package.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Package-packagedElement" name="packagedElement" lower="0" upper="*" type="PackageableElement" association="A_packagedElement_owningPackage" subsettedProperty="Namespace-ownedMember" isComposite="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Package-packagedElement-_ownedComment.0" annotatedElement="Package-packagedElement">
          <body>Specifies the packageable elements that are owned by this Package.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Package-ownedType" name="ownedType" lower="0" upper="*" type="Type" association="A_ownedType_package" subsettedProperty="Package-packagedElement" isComposite="true" isDerived="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Package-ownedType-_ownedComment.0" annotatedElement="Package-ownedType">
          <body>References the packaged elements that are Types.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Package-nestedPackage" name="nestedPackage" lower="0" upper="*" type="Package" association="A_nestedPackage_nestingPackage" subsettedProperty="Package-packagedElement" isComposite="true" isDerived="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Package-nestedPackage-_ownedComment.0" annotatedElement="Package-nestedPackage">
          <body>References the packaged elements that are Packages.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Package-nestingPackage" name="nestingPackage" lower="0" type="Package" association="A_nestedPackage_nestingPackage" subsettedProperty="NamedElement-namespace">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Package-nestingPackage-_ownedComment.0" annotatedElement="Package-nestingPackage">
          <body>References the Package that owns this Package.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="Package-mustBeOwned" name="mustBeOwned" isQuery="true" redefinedOperation="Element-mustBeOwned" bodyCondition="Package-mustBeOwned-spec">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Package-mustBeOwned-_ownedComment.0" annotatedElement="Package-mustBeOwned">
          <body>The query mustBeOwned() indicates whether elements of this type must have an owner.</body>
        </ownedComment>
        <ownedRule xmi:type="cmof:Constraint" xmi:id="Package-mustBeOwned-spec" name="spec" constrainedElement="Package-mustBeOwned">
          <specification xmi:type="cmof:OpaqueExpression" xmi:id="Package-mustBeOwned-spec-_specification">
            <language>OCL</language>
            <body>result = false</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="Package-mustBeOwned-_member.1" type="Boolean" direction="return"/>
      </ownedOperation>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="Package-visibleMembers" name="visibleMembers" isQuery="true" bodyCondition="Package-visibleMembers-spec">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Package-visibleMembers-_ownedComment.0" annotatedElement="Package-visibleMembers">
          <body>The query visibleMembers() defines which members of a Package can be accessed outside it.</body>
        </ownedComment>
        <ownedRule xmi:type="cmof:Constraint" xmi:id="Package-visibleMembers-spec" name="spec" constrainedElement="Package-visibleMembers">
          <specification xmi:type="cmof:OpaqueExpression" xmi:id="Package-visibleMembers-spec-_specification">
            <language>OCL</language>
            <body>result = member->select( m | self.makesVisible(m))</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="Package-visibleMembers-_member.1" lower="0" upper="*" type="PackageableElement" direction="return"/>
      </ownedOperation>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="Package-makesVisible" name="makesVisible" isQuery="true" precondition="Package-makesVisible-_ownedRule.0" bodyCondition="Package-makesVisible-spec">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Package-makesVisible-_ownedComment.0" annotatedElement="Package-makesVisible">
          <body>The query makesVisible() defines whether a Package makes an element visible outside itself. Elements with no visibility and elements with public visibility are made visible.</body>
        </ownedComment>
        <ownedRule xmi:type="cmof:Constraint" xmi:id="Package-makesVisible-_ownedRule.0" constrainedElement="Package-makesVisible">
          <specification xmi:type="cmof:OpaqueExpression" xmi:id="Package-makesVisible-_ownedRule.0-_specification">
            <language>OCL</language>
            <body>self.member->includes(el)</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="cmof:Constraint" xmi:id="Package-makesVisible-spec" name="spec" constrainedElement="Package-makesVisible">
          <specification xmi:type="cmof:OpaqueExpression" xmi:id="Package-makesVisible-spec-_specification">
            <language>OCL</language>
            <body>result = (ownedMember->includes(el)) or&#xA;(elementImport->select(ei|ei.importedElement = #public)->collect(ei|ei.importedElement)->includes(el)) or&#xA;(packageImport->select(pi|pi.visibility = #public)->collect(pi|pi.importedPackage.member->includes(el))->notEmpty())</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="Package-makesVisible-_member.2" type="Boolean" direction="return"/>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="Package-makesVisible-el" name="el" type="NamedElement"/>
      </ownedOperation>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="PackageImport" name="PackageImport" superClass="DirectedRelationship">
      <ownedComment xmi:type="cmof:Comment" xmi:id="PackageImport-_ownedComment.0" annotatedElement="PackageImport">
        <body>A package import is a relationship that allows the use of unqualified names to refer to package members from other namespaces.</body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="PackageImport-public_or_private" name="public_or_private" constrainedElement="PackageImport">
        <ownedComment xmi:type="cmof:Comment" xmi:id="PackageImport-public_or_private-_ownedComment.0" annotatedElement="PackageImport-public_or_private">
          <body>The visibility of a PackageImport is either public or private.</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="PackageImport-public_or_private-_specification">
          <language>OCL</language>
          <body>self.visibility = #public or self.visibility = #private</body>
        </specification>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="PackageImport-visibility" name="visibility" type="VisibilityKind" default="public">
        <ownedComment xmi:type="cmof:Comment" xmi:id="PackageImport-visibility-_ownedComment.0" annotatedElement="PackageImport-visibility">
          <body>Specifies the visibility of the imported PackageableElements within the importing Namespace, i.e., whether imported elements will in turn be visible to other packages that use that importingPackage as an importedPackage. If the PackageImport is public, the imported elements will be visible outside the package, while if it is private they will not.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="PackageImport-importingNamespace" name="importingNamespace" type="Namespace" association="A_packageImport_importingNamespace" subsettedProperty="DirectedRelationship-source Element-owner">
        <ownedComment xmi:type="cmof:Comment" xmi:id="PackageImport-importingNamespace-_ownedComment.0" annotatedElement="PackageImport-importingNamespace">
          <body>Specifies the Namespace that imports the members from a Package.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="PackageImport-importedPackage" name="importedPackage" type="Package" association="A_importedPackage_packageImport" subsettedProperty="DirectedRelationship-target">
        <ownedComment xmi:type="cmof:Comment" xmi:id="PackageImport-importedPackage-_ownedComment.0" annotatedElement="PackageImport-importedPackage">
          <body>Specifies the Package whose members are imported into a Namespace.</body>
        </ownedComment>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="DataType" name="DataType" superClass="Classifier">
      <ownedComment xmi:type="cmof:Comment" xmi:id="DataType-_ownedComment.0" annotatedElement="DataType">
        <body>A data type is a type whose instances are identified only by their value. A data type may contain attributes to support the modeling of structured data types.</body>
      </ownedComment>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="DataType-ownedAttribute" name="ownedAttribute" isOrdered="true" lower="0" upper="*" type="Property" association="A_ownedAttribute_datatype" subsettedProperty="Classifier-attribute Namespace-ownedMember" isComposite="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="DataType-ownedAttribute-_ownedComment.0" annotatedElement="DataType-ownedAttribute">
          <body>The Attributes owned by the DataType.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="DataType-ownedOperation" name="ownedOperation" isOrdered="true" lower="0" upper="*" type="Operation" association="A_ownedOperation_datatype" subsettedProperty="Classifier-feature Namespace-ownedMember" isComposite="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="DataType-ownedOperation-_ownedComment.0" annotatedElement="DataType-ownedOperation">
          <body>The Operations owned by the DataType.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="DataType-inherit" name="inherit" isQuery="true" redefinedOperation="Classifier-inherit" bodyCondition="DataType-inherit-spec">
        <ownedComment xmi:type="cmof:Comment" xmi:id="DataType-inherit-_ownedComment.0" annotatedElement="DataType-inherit">
          <body>The inherit operation is overridden to exclude redefined properties.</body>
        </ownedComment>
        <ownedRule xmi:type="cmof:Constraint" xmi:id="DataType-inherit-spec" name="spec" constrainedElement="DataType-inherit">
          <specification xmi:type="cmof:OpaqueExpression" xmi:id="DataType-inherit-spec-_specification">
            <language>OCL</language>
            <body>result = inhs->excluding(inh | ownedMember->select(oclIsKindOf(RedefinableElement))->select(redefinedElement->includes(inh)))</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="DataType-inherit-_member.1" lower="0" upper="*" type="NamedElement" direction="return"/>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="DataType-inherit-inhs" lower="0" upper="*" name="inhs" type="NamedElement"/>
      </ownedOperation>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="Enumeration" name="Enumeration" superClass="DataType">
      <ownedComment xmi:type="cmof:Comment" xmi:id="Enumeration-_ownedComment.0" annotatedElement="Enumeration">
        <body>An enumeration is a data type whose values are enumerated in the model as enumeration literals.</body>
      </ownedComment>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Enumeration-ownedLiteral" name="ownedLiteral" isOrdered="true" lower="0" upper="*" type="EnumerationLiteral" association="A_ownedLiteral_enumeration" subsettedProperty="Namespace-ownedMember" isComposite="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Enumeration-ownedLiteral-_ownedComment.0" annotatedElement="Enumeration-ownedLiteral">
          <body>The ordered set of literals for this Enumeration.</body>
        </ownedComment>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="EnumerationLiteral" name="EnumerationLiteral" superClass="InstanceSpecification">
      <ownedComment xmi:type="cmof:Comment" xmi:id="EnumerationLiteral-_ownedComment.0" annotatedElement="EnumerationLiteral">
        <body>An enumeration literal is a user-defined data value for an enumeration.</body>
      </ownedComment>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="EnumerationLiteral-enumeration" name="enumeration" lower="0" type="Enumeration" association="A_ownedLiteral_enumeration" subsettedProperty="NamedElement-namespace">
        <ownedComment xmi:type="cmof:Comment" xmi:id="EnumerationLiteral-enumeration-_ownedComment.0" annotatedElement="EnumerationLiteral-enumeration">
          <body>The Enumeration that this EnumerationLiteral is a member of.</body>
        </ownedComment>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="PrimitiveType" name="PrimitiveType" superClass="DataType">
      <ownedComment xmi:type="cmof:Comment" xmi:id="PrimitiveType-_ownedComment.0" annotatedElement="PrimitiveType">
        <body>A primitive type defines a predefined data type, without any relevant substructure (i.e., it has no parts in the context of UML). A primitive datatype may have an algebra and operations defined outside of UML, for example, mathematically.</body>
      </ownedComment>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="Association" name="Association" superClass="Relationship Classifier">
      <ownedComment xmi:type="cmof:Comment" xmi:id="Association-_ownedComment.0" annotatedElement="Association">
        <body>An association describes a set of tuples whose values refer to typed instances. An instance of an association is called a link.</body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="Association-specialized_end_number" name="specialized_end_number" constrainedElement="Association">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Association-specialized_end_number-_ownedComment.0" annotatedElement="Association-specialized_end_number">
          <body>An association specializing another association has the same number of ends as the other association.</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="Association-specialized_end_number-_specification">
          <language>OCL</language>
          <body>self.parents()->forAll(p | p.memberEnd.size() = self.memberEnd.size())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="Association-specialized_end_types" name="specialized_end_types" constrainedElement="Association">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Association-specialized_end_types-_ownedComment.0" annotatedElement="Association-specialized_end_types">
          <body>When an association specializes another association, every end of the specific association corresponds to an end of the general association, and the specific end reaches the same type or a subtype of the more general end.</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="Association-specialized_end_types-_specification">
          <language>OCL</language>
          <body>true</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="Association-binary_associations" name="binary_associations" constrainedElement="Association">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Association-binary_associations-_ownedComment.0" annotatedElement="Association-binary_associations">
          <body>Only binary associations can be aggregations.</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="Association-binary_associations-_specification">
          <language>OCL</language>
          <body>self.memberEnd->exists(aggregation &lt;> Aggregation::none) implies self.memberEnd->size() = 2</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="Association-association_ends" name="association_ends" constrainedElement="Association">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Association-association_ends-_ownedComment.0" annotatedElement="Association-association_ends">
          <body>Association ends of associations with more than two ends must be owned by the association.</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="Association-association_ends-_specification">
          <language>OCL</language>
          <body>if memberEnd->size() > 2 then ownedEnd->includesAll(memberEnd)</body>
        </specification>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Association-isDerived" name="isDerived" type="Boolean" default="false">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Association-isDerived-_ownedComment.0" annotatedElement="Association-isDerived">
          <body>Specifies whether the association is derived from other model elements such as other associations or constraints.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Association-ownedEnd" name="ownedEnd" isOrdered="true" lower="0" upper="*" type="Property" association="A_ownedEnd_owningAssociation" subsettedProperty="Association-memberEnd Classifier-feature Namespace-ownedMember" isComposite="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Association-ownedEnd-_ownedComment.0" annotatedElement="Association-ownedEnd">
          <body>The ends that are owned by the association itself.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Association-endType" name="endType" isOrdered="true" upper="*" type="Type" association="A_endType_association" subsettedProperty="Relationship-relatedElement" isReadOnly="true" isDerived="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Association-endType-_ownedComment.0" annotatedElement="Association-endType">
          <body>References the classifiers that are used as types of the ends of the association.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Association-memberEnd" name="memberEnd" isOrdered="true" lower="2" upper="*" type="Property" association="A_memberEnd_association" subsettedProperty="Namespace-member">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Association-memberEnd-_ownedComment.0" annotatedElement="Association-memberEnd">
          <body>Each end represents participation of instances of the classifier connected to the end in links of the association.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Association-navigableOwnedEnd" name="navigableOwnedEnd" lower="0" upper="*" type="Property" association="A_navigableOwnedEnd_association" subsettedProperty="Association-ownedEnd">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Association-navigableOwnedEnd-_ownedComment.0" annotatedElement="Association-navigableOwnedEnd">
          <body>The navigable ends that are owned by the association itself.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="Association-endType.1" name="endType" isQuery="true" bodyCondition="Association-endType.1-spec">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Association-endType.1-_ownedComment.0" annotatedElement="Association-endType.1">
          <body>endType is derived from the types of the member ends.</body>
        </ownedComment>
        <ownedRule xmi:type="cmof:Constraint" xmi:id="Association-endType.1-spec" name="spec" constrainedElement="Association-endType.1 Association-endType">
          <specification xmi:type="cmof:OpaqueExpression" xmi:id="Association-endType.1-spec-_specification">
            <language>OCL</language>
            <body>result = self.memberEnd->collect(e | e.type)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="Association-endType.1-_member.1" isOrdered="true" lower="0" upper="*" type="Type" direction="return"/>
      </ownedOperation>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="ValueSpecification" name="ValueSpecification" isAbstract="true" superClass="TypedElement PackageableElement">
      <ownedComment xmi:type="cmof:Comment" xmi:id="ValueSpecification-_ownedComment.0" annotatedElement="ValueSpecification">
        <body>A value specification is the specification of a (possibly empty) set of instances, including both objects and data values.</body>
      </ownedComment>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="ValueSpecification-isComputable" name="isComputable" isQuery="true" bodyCondition="ValueSpecification-isComputable-spec">
        <ownedComment xmi:type="cmof:Comment" xmi:id="ValueSpecification-isComputable-_ownedComment.0" annotatedElement="ValueSpecification-isComputable">
          <body>The query isComputable() determines whether a value specification can be computed in a model. This operation cannot be fully defined in OCL. A conforming implementation is expected to deliver true for this operation for all value specifications that it can compute, and to compute all of those for which the operation is true. A conforming implementation is expected to be able to compute the value of all literals.</body>
        </ownedComment>
        <ownedRule xmi:type="cmof:Constraint" xmi:id="ValueSpecification-isComputable-spec" name="spec" constrainedElement="ValueSpecification-isComputable">
          <specification xmi:type="cmof:OpaqueExpression" xmi:id="ValueSpecification-isComputable-spec-_specification">
            <language>OCL</language>
            <body>result = false</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="ValueSpecification-isComputable-_member.1" type="Boolean" direction="return"/>
      </ownedOperation>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="ValueSpecification-integerValue" name="integerValue" isQuery="true" bodyCondition="ValueSpecification-integerValue-spec">
        <ownedComment xmi:type="cmof:Comment" xmi:id="ValueSpecification-integerValue-_ownedComment.0" annotatedElement="ValueSpecification-integerValue">
          <body>The query integerValue() gives a single Integer value when one can be computed.</body>
        </ownedComment>
        <ownedRule xmi:type="cmof:Constraint" xmi:id="ValueSpecification-integerValue-spec" name="spec" constrainedElement="ValueSpecification-integerValue">
          <specification xmi:type="cmof:OpaqueExpression" xmi:id="ValueSpecification-integerValue-spec-_specification">
            <language>OCL</language>
            <body>result = Set{}</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="ValueSpecification-integerValue-_member.1" type="Integer" direction="return"/>
      </ownedOperation>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="ValueSpecification-booleanValue" name="booleanValue" isQuery="true" bodyCondition="ValueSpecification-booleanValue-spec">
        <ownedComment xmi:type="cmof:Comment" xmi:id="ValueSpecification-booleanValue-_ownedComment.0" annotatedElement="ValueSpecification-booleanValue">
          <body>The query booleanValue() gives a single Boolean value when one can be computed.</body>
        </ownedComment>
        <ownedRule xmi:type="cmof:Constraint" xmi:id="ValueSpecification-booleanValue-spec" name="spec" constrainedElement="ValueSpecification-booleanValue">
          <specification xmi:type="cmof:OpaqueExpression" xmi:id="ValueSpecification-booleanValue-spec-_specification">
            <language>OCL</language>
            <body>result = Set{}</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="ValueSpecification-booleanValue-_member.1" type="Boolean" direction="return"/>
      </ownedOperation>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="ValueSpecification-stringValue" name="stringValue" isQuery="true" bodyCondition="ValueSpecification-stringValue-spec">
        <ownedComment xmi:type="cmof:Comment" xmi:id="ValueSpecification-stringValue-_ownedComment.0" annotatedElement="ValueSpecification-stringValue">
          <body>The query stringValue() gives a single String value when one can be computed.</body>
        </ownedComment>
        <ownedRule xmi:type="cmof:Constraint" xmi:id="ValueSpecification-stringValue-spec" name="spec" constrainedElement="ValueSpecification-stringValue">
          <specification xmi:type="cmof:OpaqueExpression" xmi:id="ValueSpecification-stringValue-spec-_specification">
            <language>OCL</language>
            <body>result = Set{}</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="ValueSpecification-stringValue-_member.1" type="String" direction="return"/>
      </ownedOperation>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="ValueSpecification-unlimitedValue" name="unlimitedValue" isQuery="true" bodyCondition="ValueSpecification-unlimitedValue-spec">
        <ownedComment xmi:type="cmof:Comment" xmi:id="ValueSpecification-unlimitedValue-_ownedComment.0" annotatedElement="ValueSpecification-unlimitedValue">
          <body>The query unlimitedValue() gives a single UnlimitedNatural value when one can be computed.</body>
        </ownedComment>
        <ownedRule xmi:type="cmof:Constraint" xmi:id="ValueSpecification-unlimitedValue-spec" name="spec" constrainedElement="ValueSpecification-unlimitedValue">
          <specification xmi:type="cmof:OpaqueExpression" xmi:id="ValueSpecification-unlimitedValue-spec-_specification">
            <language>OCL</language>
            <body>result = Set{}</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="ValueSpecification-unlimitedValue-_member.1" type="UnlimitedNatural" direction="return"/>
      </ownedOperation>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="ValueSpecification-isNull" name="isNull" isQuery="true" bodyCondition="ValueSpecification-isNull-spec">
        <ownedComment xmi:type="cmof:Comment" xmi:id="ValueSpecification-isNull-_ownedComment.0" annotatedElement="ValueSpecification-isNull">
          <body>The query isNull() returns true when it can be computed that the value is null.</body>
        </ownedComment>
        <ownedRule xmi:type="cmof:Constraint" xmi:id="ValueSpecification-isNull-spec" name="spec" constrainedElement="ValueSpecification-isNull">
          <specification xmi:type="cmof:OpaqueExpression" xmi:id="ValueSpecification-isNull-spec-_specification">
            <language>OCL</language>
            <body>result = false</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="ValueSpecification-isNull-_member.1" type="Boolean" direction="return"/>
      </ownedOperation>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="Relationship" name="Relationship" isAbstract="true" superClass="Element">
      <ownedComment xmi:type="cmof:Comment" xmi:id="Relationship-_ownedComment.0" annotatedElement="Relationship">
        <body>Relationship is an abstract concept that specifies some kind of relationship between elements.</body>
      </ownedComment>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Relationship-relatedElement" name="relatedElement" upper="*" type="Element" isDerivedUnion="true" association="A_relatedElement_relationship" isReadOnly="true" isDerived="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Relationship-relatedElement-_ownedComment.0" annotatedElement="Relationship-relatedElement">
          <body>Specifies the elements related by the Relationship.</body>
        </ownedComment>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="PackageMerge" name="PackageMerge" superClass="DirectedRelationship">
      <ownedComment xmi:type="cmof:Comment" xmi:id="PackageMerge-_ownedComment.0" annotatedElement="PackageMerge">
        <body>A package merge defines how the contents of one package are extended by the contents of another package.</body>
      </ownedComment>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="PackageMerge-receivingPackage" name="receivingPackage" type="Package" association="A_receivingPackage_packageMerge" subsettedProperty="DirectedRelationship-source Element-owner">
        <ownedComment xmi:type="cmof:Comment" xmi:id="PackageMerge-receivingPackage-_ownedComment.0" annotatedElement="PackageMerge-receivingPackage">
          <body>References the Package that is being extended with the contents of the merged package of the PackageMerge.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="PackageMerge-mergedPackage" name="mergedPackage" type="Package" association="A_mergedPackage_packageMerge" subsettedProperty="DirectedRelationship-target">
        <ownedComment xmi:type="cmof:Comment" xmi:id="PackageMerge-mergedPackage-_ownedComment.0" annotatedElement="PackageMerge-mergedPackage">
          <body>References the Package that is to be merged with the receiving package of the PackageMerge.</body>
        </ownedComment>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="InstanceValue" name="InstanceValue" superClass="ValueSpecification">
      <ownedComment xmi:type="cmof:Comment" xmi:id="InstanceValue-_ownedComment.0" annotatedElement="InstanceValue">
        <body>An instance value is a value specification that identifies an instance.</body>
      </ownedComment>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="InstanceValue-instance" name="instance" type="InstanceSpecification" association="A_instance_instanceValue">
        <ownedComment xmi:type="cmof:Comment" xmi:id="InstanceValue-instance-_ownedComment.0" annotatedElement="InstanceValue-instance">
          <body>The instance that is the specified value.</body>
        </ownedComment>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="LiteralUnlimitedNatural" name="LiteralUnlimitedNatural" superClass="LiteralSpecification">
      <ownedComment xmi:type="cmof:Comment" xmi:id="LiteralUnlimitedNatural-_ownedComment.0" annotatedElement="LiteralUnlimitedNatural">
        <body>A literal unlimited natural is a specification of an unlimited natural number.</body>
      </ownedComment>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="LiteralUnlimitedNatural-value" name="value" type="UnlimitedNatural" default="0">
        <ownedComment xmi:type="cmof:Comment" xmi:id="LiteralUnlimitedNatural-value-_ownedComment.0" annotatedElement="LiteralUnlimitedNatural-value">
          <body>The specified UnlimitedNatural value.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="LiteralUnlimitedNatural-isComputable" name="isComputable" isQuery="true" redefinedOperation="ValueSpecification-isComputable" bodyCondition="LiteralUnlimitedNatural-isComputable-spec">
        <ownedComment xmi:type="cmof:Comment" xmi:id="LiteralUnlimitedNatural-isComputable-_ownedComment.0" annotatedElement="LiteralUnlimitedNatural-isComputable">
          <body>The query isComputable() is redefined to be true.</body>
        </ownedComment>
        <ownedRule xmi:type="cmof:Constraint" xmi:id="LiteralUnlimitedNatural-isComputable-spec" name="spec" constrainedElement="LiteralUnlimitedNatural-isComputable">
          <specification xmi:type="cmof:OpaqueExpression" xmi:id="LiteralUnlimitedNatural-isComputable-spec-_specification">
            <language>OCL</language>
            <body>result = true</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="LiteralUnlimitedNatural-isComputable-_member.1" type="Boolean" direction="return"/>
      </ownedOperation>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="LiteralUnlimitedNatural-unlimitedValue" name="unlimitedValue" isQuery="true" redefinedOperation="ValueSpecification-unlimitedValue" bodyCondition="LiteralUnlimitedNatural-unlimitedValue-spec">
        <ownedComment xmi:type="cmof:Comment" xmi:id="LiteralUnlimitedNatural-unlimitedValue-_ownedComment.0" annotatedElement="LiteralUnlimitedNatural-unlimitedValue">
          <body>The query unlimitedValue() gives the value.</body>
        </ownedComment>
        <ownedRule xmi:type="cmof:Constraint" xmi:id="LiteralUnlimitedNatural-unlimitedValue-spec" name="spec" constrainedElement="LiteralUnlimitedNatural-unlimitedValue">
          <specification xmi:type="cmof:OpaqueExpression" xmi:id="LiteralUnlimitedNatural-unlimitedValue-spec-_specification">
            <language>OCL</language>
            <body>result = value</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="LiteralUnlimitedNatural-unlimitedValue-_member.1" type="UnlimitedNatural" direction="return"/>
      </ownedOperation>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="Type" name="Type" isAbstract="true" superClass="PackageableElement">
      <ownedComment xmi:type="cmof:Comment" xmi:id="Type-_ownedComment.0" annotatedElement="Type">
        <body>A type is a named element that is used as the type for a typed element. A type can be contained in a package.</body>
      </ownedComment>
      <ownedComment xmi:type="cmof:Comment" xmi:id="Type-_ownedComment.1" annotatedElement="Type">
        <body>A type constrains the values represented by a typed element.</body>
      </ownedComment>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Type-package" name="package" lower="0" type="Package" association="A_ownedType_package" subsettedProperty="NamedElement-namespace">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Type-package-_ownedComment.0" annotatedElement="Type-package">
          <body>Specifies the owning package of this classifier, if any.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="Type-conformsTo" name="conformsTo" isQuery="true" bodyCondition="Type-conformsTo-spec">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Type-conformsTo-_ownedComment.0" annotatedElement="Type-conformsTo">
          <body>The query conformsTo() gives true for a type that conforms to another. By default, two types do not conform to each other. This query is intended to be redefined for specific conformance situations.</body>
        </ownedComment>
        <ownedRule xmi:type="cmof:Constraint" xmi:id="Type-conformsTo-spec" name="spec" constrainedElement="Type-conformsTo">
          <specification xmi:type="cmof:OpaqueExpression" xmi:id="Type-conformsTo-spec-_specification">
            <language>OCL</language>
            <body>result = false</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="Type-conformsTo-_member.1" type="Boolean" direction="return"/>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="Type-conformsTo-other" name="other" type="Type"/>
      </ownedOperation>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="Expression" name="Expression" superClass="ValueSpecification">
      <ownedComment xmi:type="cmof:Comment" xmi:id="Expression-_ownedComment.0" annotatedElement="Expression">
        <body>An expression is a structured tree of symbols that denotes a (possibly empty) set of values when evaluated in a context.</body>
      </ownedComment>
      <ownedComment xmi:type="cmof:Comment" xmi:id="Expression-_ownedComment.1" annotatedElement="Expression">
        <body>An expression represents a node in an expression tree, which may be non-terminal or terminal. It defines a symbol, and has a possibly empty sequence of operands which are value specifications.</body>
      </ownedComment>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Expression-symbol" name="symbol" lower="0" type="String">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Expression-symbol-_ownedComment.0" annotatedElement="Expression-symbol">
          <body>The symbol associated with the node in the expression tree.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Expression-operand" name="operand" isOrdered="true" lower="0" upper="*" type="ValueSpecification" association="A_operand_expression" subsettedProperty="Element-ownedElement" isComposite="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Expression-operand-_ownedComment.0" annotatedElement="Expression-operand">
          <body>Specifies a sequence of operands.</body>
        </ownedComment>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Enumeration" xmi:id="AggregationKind" name="AggregationKind">
      <ownedComment xmi:type="cmof:Comment" xmi:id="AggregationKind-_ownedComment.0" annotatedElement="AggregationKind">
        <body>AggregationKind is an enumeration type that specifies the literals for defining the kind of aggregation of a property.</body>
      </ownedComment>
      <ownedLiteral xmi:type="cmof:EnumerationLiteral" xmi:id="AggregationKind-none" name="none">
        <ownedComment xmi:type="cmof:Comment" xmi:id="AggregationKind-none-_ownedComment.0" annotatedElement="AggregationKind-none">
          <body>Indicates that the property has no aggregation.</body>
        </ownedComment>
      </ownedLiteral>
      <ownedLiteral xmi:type="cmof:EnumerationLiteral" xmi:id="AggregationKind-shared" name="shared">
        <ownedComment xmi:type="cmof:Comment" xmi:id="AggregationKind-shared-_ownedComment.0" annotatedElement="AggregationKind-shared">
          <body>Indicates that the property has a shared aggregation.</body>
        </ownedComment>
      </ownedLiteral>
      <ownedLiteral xmi:type="cmof:EnumerationLiteral" xmi:id="AggregationKind-composite" name="composite">
        <ownedComment xmi:type="cmof:Comment" xmi:id="AggregationKind-composite-_ownedComment.0" annotatedElement="AggregationKind-composite">
          <body>Indicates that the property is aggregated compositely, i.e., the composite object has responsibility for the existence and storage of the composed objects (parts).</body>
        </ownedComment>
      </ownedLiteral>
    </ownedMember>
    <ownedMember xmi:type="cmof:Enumeration" xmi:id="ParameterDirectionKind" name="ParameterDirectionKind">
      <ownedComment xmi:type="cmof:Comment" xmi:id="ParameterDirectionKind-_ownedComment.0" annotatedElement="ParameterDirectionKind">
        <body>Parameter direction kind is an enumeration type that defines literals used to specify direction of parameters.</body>
      </ownedComment>
      <ownedLiteral xmi:type="cmof:EnumerationLiteral" xmi:id="ParameterDirectionKind-in" name="in">
        <ownedComment xmi:type="cmof:Comment" xmi:id="ParameterDirectionKind-in-_ownedComment.0" annotatedElement="ParameterDirectionKind-in">
          <body>Indicates that parameter values are passed into the behavioral element by the caller.</body>
        </ownedComment>
      </ownedLiteral>
      <ownedLiteral xmi:type="cmof:EnumerationLiteral" xmi:id="ParameterDirectionKind-inout" name="inout">
        <ownedComment xmi:type="cmof:Comment" xmi:id="ParameterDirectionKind-inout-_ownedComment.0" annotatedElement="ParameterDirectionKind-inout">
          <body>Indicates that parameter values are passed into a behavioral element by the caller and then back out to the caller from the behavioral element.</body>
        </ownedComment>
      </ownedLiteral>
      <ownedLiteral xmi:type="cmof:EnumerationLiteral" xmi:id="ParameterDirectionKind-out" name="out">
        <ownedComment xmi:type="cmof:Comment" xmi:id="ParameterDirectionKind-out-_ownedComment.0" annotatedElement="ParameterDirectionKind-out">
          <body>Indicates that parameter values are passed from a behavioral element out to the caller.</body>
        </ownedComment>
      </ownedLiteral>
      <ownedLiteral xmi:type="cmof:EnumerationLiteral" xmi:id="ParameterDirectionKind-return" name="return">
        <ownedComment xmi:type="cmof:Comment" xmi:id="ParameterDirectionKind-return-_ownedComment.0" annotatedElement="ParameterDirectionKind-return">
          <body>Indicates that parameter values are passed as return values from a behavioral element back to the caller.</body>
        </ownedComment>
      </ownedLiteral>
    </ownedMember>
    <ownedMember xmi:type="cmof:Enumeration" xmi:id="VisibilityKind" name="VisibilityKind">
      <ownedComment xmi:type="cmof:Comment" xmi:id="VisibilityKind-_ownedComment.0" annotatedElement="VisibilityKind">
        <body>VisibilityKind is an enumeration type that defines literals to determine the visibility of elements in a model.</body>
      </ownedComment>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="VisibilityKind-bestVisibility" name="bestVisibility" isQuery="true" precondition="VisibilityKind-bestVisibility-_ownedRule.0" bodyCondition="VisibilityKind-bestVisibility-spec">
        <ownedComment xmi:type="cmof:Comment" xmi:id="VisibilityKind-bestVisibility-_ownedComment.0" annotatedElement="VisibilityKind-bestVisibility">
          <body>The query bestVisibility() examines a set of VisibilityKinds, and returns public as the preferred visibility.</body>
        </ownedComment>
        <ownedRule xmi:type="cmof:Constraint" xmi:id="VisibilityKind-bestVisibility-_ownedRule.0" constrainedElement="VisibilityKind-bestVisibility">
          <specification xmi:type="cmof:OpaqueExpression" xmi:id="VisibilityKind-bestVisibility-_ownedRule.0-_specification">
            <language>OCL</language>
            <body>pre: not vis->includes(#protected) and not vis->includes(#package)</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="cmof:Constraint" xmi:id="VisibilityKind-bestVisibility-spec" name="spec" constrainedElement="VisibilityKind-bestVisibility">
          <specification xmi:type="cmof:OpaqueExpression" xmi:id="VisibilityKind-bestVisibility-spec-_specification">
            <language>OCL</language>
            <body>result = if vis->includes(#public) then #public else #private endif</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="VisibilityKind-bestVisibility-_member.2" type="VisibilityKind" direction="return"/>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="VisibilityKind-bestVisibility-vis" lower="0" upper="*" name="vis" type="VisibilityKind"/>
      </ownedOperation>
      <ownedLiteral xmi:type="cmof:EnumerationLiteral" xmi:id="VisibilityKind-public" name="public">
        <ownedComment xmi:type="cmof:Comment" xmi:id="VisibilityKind-public-_ownedComment.0" annotatedElement="VisibilityKind-public">
          <body>A public element is visible to all elements that can access the contents of the namespace that owns it.</body>
        </ownedComment>
      </ownedLiteral>
      <ownedLiteral xmi:type="cmof:EnumerationLiteral" xmi:id="VisibilityKind-private" name="private">
        <ownedComment xmi:type="cmof:Comment" xmi:id="VisibilityKind-private-_ownedComment.0" annotatedElement="VisibilityKind-private">
          <body>A private element is only visible inside the namespace that owns it.</body>
        </ownedComment>
      </ownedLiteral>
      <ownedLiteral xmi:type="cmof:EnumerationLiteral" xmi:id="VisibilityKind-protected" name="protected">
        <ownedComment xmi:type="cmof:Comment" xmi:id="VisibilityKind-protected-_ownedComment.0" annotatedElement="VisibilityKind-protected">
          <body>A protected element is visible to elements that have a generalization relationship to the namespace that owns it.</body>
        </ownedComment>
      </ownedLiteral>
      <ownedLiteral xmi:type="cmof:EnumerationLiteral" xmi:id="VisibilityKind-package" name="package">
        <ownedComment xmi:type="cmof:Comment" xmi:id="VisibilityKind-package-_ownedComment.0" annotatedElement="VisibilityKind-package">
          <body>A package element is owned by a namespace that is not a package, and is visible to elements that are in the same package as its owning namespace. Only named elements that are not owned by packages can be marked as having package visibility.  Any element marked as having package visibility is visible to all elements within the nearest enclosing package (given that other owning elements have proper visibility).  Outside the nearest enclosing package, an element marked as having package visibility is not visible.</body>
        </ownedComment>
      </ownedLiteral>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_ownedElement_owner" name="A_ownedElement_owner" memberEnd="Element-ownedElement Element-owner"/>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_source_directedRelationship" name="A_source_directedRelationship" memberEnd="DirectedRelationship-source A_source_directedRelationship-directedRelationship">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_source_directedRelationship-directedRelationship" name="directedRelationship" lower="0" upper="*" type="DirectedRelationship" association="A_source_directedRelationship"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_target_directedRelationship" name="A_target_directedRelationship" memberEnd="DirectedRelationship-target A_target_directedRelationship-directedRelationship">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_target_directedRelationship-directedRelationship" name="directedRelationship" lower="0" upper="*" type="DirectedRelationship" association="A_target_directedRelationship"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_constrainedElement_constraint" name="A_constrainedElement_constraint" memberEnd="Constraint-constrainedElement A_constrainedElement_constraint-constraint">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_constrainedElement_constraint-constraint" name="constraint" lower="0" upper="*" type="Constraint" association="A_constrainedElement_constraint"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_type_typedElement" name="A_type_typedElement" memberEnd="TypedElement-type A_type_typedElement-typedElement">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_type_typedElement-typedElement" name="typedElement" lower="0" upper="*" type="TypedElement" association="A_type_typedElement"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_generalization_specific" name="A_generalization_specific" memberEnd="Classifier-generalization Generalization-specific"/>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_general_generalization" name="A_general_generalization" memberEnd="Generalization-general A_general_generalization-generalization">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_general_generalization-generalization" name="generalization" lower="0" upper="*" type="Generalization" association="A_general_generalization"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_feature_featuringClassifier" name="A_feature_featuringClassifier" memberEnd="Classifier-feature Feature-featuringClassifier"/>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_ownedParameter_ownerFormalParam" name="A_ownedParameter_ownerFormalParam" memberEnd="BehavioralFeature-ownedParameter A_ownedParameter_ownerFormalParam-ownerFormalParam">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_ownedParameter_ownerFormalParam-ownerFormalParam" name="ownerFormalParam" lower="0" type="BehavioralFeature" association="A_ownedParameter_ownerFormalParam" subsettedProperty="NamedElement-namespace"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_classifier_instanceSpecification" name="A_classifier_instanceSpecification" memberEnd="InstanceSpecification-classifier A_classifier_instanceSpecification-instanceSpecification">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_classifier_instanceSpecification-instanceSpecification" name="instanceSpecification" lower="0" upper="*" type="InstanceSpecification" association="A_classifier_instanceSpecification"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_slot_owningInstance" name="A_slot_owningInstance" memberEnd="InstanceSpecification-slot Slot-owningInstance"/>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_definingFeature_slot" name="A_definingFeature_slot" memberEnd="Slot-definingFeature A_definingFeature_slot-slot">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_definingFeature_slot-slot" name="slot" lower="0" upper="*" type="Slot" association="A_definingFeature_slot"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_annotatedElement_comment" name="A_annotatedElement_comment" memberEnd="Comment-annotatedElement A_annotatedElement_comment-comment">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_annotatedElement_comment-comment" name="comment" lower="0" upper="*" type="Comment" association="A_annotatedElement_comment"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_ownedComment_owningElement" name="A_ownedComment_owningElement" memberEnd="Element-ownedComment A_ownedComment_owningElement-owningElement">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_ownedComment_owningElement-owningElement" name="owningElement" lower="0" type="Element" association="A_ownedComment_owningElement" subsettedProperty="Element-owner"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_importedElement_elementImport" name="A_importedElement_elementImport" memberEnd="ElementImport-importedElement A_importedElement_elementImport-elementImport">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_importedElement_elementImport-elementImport" name="elementImport" lower="0" upper="*" type="ElementImport" association="A_importedElement_elementImport"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_inheritedMember_classifier" name="A_inheritedMember_classifier" memberEnd="Classifier-inheritedMember A_inheritedMember_classifier-classifier">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_inheritedMember_classifier-classifier" name="classifier" lower="0" upper="*" type="Classifier" association="A_inheritedMember_classifier"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_nestedClassifier_class" name="A_nestedClassifier_class" memberEnd="Class-nestedClassifier A_nestedClassifier_class-class">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_nestedClassifier_class-class" name="class" lower="0" type="Class" association="A_nestedClassifier_class" subsettedProperty="NamedElement-namespace RedefinableElement-redefinitionContext"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_ownedAttribute_class" name="A_ownedAttribute_class" memberEnd="Class-ownedAttribute Property-class"/>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_ownedOperation_class" name="A_ownedOperation_class" memberEnd="Class-ownedOperation Operation-class"/>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_precondition_preContext" name="A_precondition_preContext" memberEnd="Operation-precondition A_precondition_preContext-preContext">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_precondition_preContext-preContext" name="preContext" lower="0" type="Operation" association="A_precondition_preContext" subsettedProperty="Constraint-context"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_postcondition_postContext" name="A_postcondition_postContext" memberEnd="Operation-postcondition A_postcondition_postContext-postContext">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_postcondition_postContext-postContext" name="postContext" lower="0" type="Operation" association="A_postcondition_postContext" subsettedProperty="Constraint-context"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_redefinedOperation_operation" name="A_redefinedOperation_operation" memberEnd="Operation-redefinedOperation A_redefinedOperation_operation-operation">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_redefinedOperation_operation-operation" name="operation" lower="0" upper="*" type="Operation" association="A_redefinedOperation_operation"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_redefinedProperty_property" name="A_redefinedProperty_property" memberEnd="Property-redefinedProperty A_redefinedProperty_property-property">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_redefinedProperty_property-property" name="property" lower="0" upper="*" type="Property" association="A_redefinedProperty_property"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_ownedEnd_owningAssociation" name="A_ownedEnd_owningAssociation" memberEnd="Association-ownedEnd Property-owningAssociation"/>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_ownedAttribute_datatype" name="A_ownedAttribute_datatype" memberEnd="DataType-ownedAttribute Property-datatype"/>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_ownedOperation_datatype" name="A_ownedOperation_datatype" memberEnd="DataType-ownedOperation Operation-datatype"/>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_ownedLiteral_enumeration" name="A_ownedLiteral_enumeration" memberEnd="Enumeration-ownedLiteral EnumerationLiteral-enumeration"/>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_elementImport_importingNamespace" name="A_elementImport_importingNamespace" memberEnd="Namespace-elementImport ElementImport-importingNamespace"/>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_packageImport_importingNamespace" name="A_packageImport_importingNamespace" memberEnd="Namespace-packageImport PackageImport-importingNamespace"/>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_importedPackage_packageImport" name="A_importedPackage_packageImport" memberEnd="PackageImport-importedPackage A_importedPackage_packageImport-packageImport">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_importedPackage_packageImport-packageImport" name="packageImport" lower="0" upper="*" type="PackageImport" association="A_importedPackage_packageImport"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_redefinedClassifier_classifier" name="A_redefinedClassifier_classifier" memberEnd="Classifier-redefinedClassifier A_redefinedClassifier_classifier-classifier">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_redefinedClassifier_classifier-classifier" name="classifier" lower="0" upper="*" type="Classifier" association="A_redefinedClassifier_classifier"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_specification_owningConstraint" name="A_specification_owningConstraint" memberEnd="Constraint-specification A_specification_owningConstraint-owningConstraint">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_specification_owningConstraint-owningConstraint" name="owningConstraint" lower="0" type="Constraint" association="A_specification_owningConstraint" subsettedProperty="Element-owner"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_defaultValue_owningParameter" name="A_defaultValue_owningParameter" memberEnd="Parameter-defaultValue A_defaultValue_owningParameter-owningParameter">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_defaultValue_owningParameter-owningParameter" name="owningParameter" lower="0" type="Parameter" association="A_defaultValue_owningParameter" subsettedProperty="Element-owner"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_defaultValue_owningProperty" name="A_defaultValue_owningProperty" memberEnd="Property-defaultValue A_defaultValue_owningProperty-owningProperty">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_defaultValue_owningProperty-owningProperty" name="owningProperty" lower="0" type="Property" association="A_defaultValue_owningProperty" subsettedProperty="Element-owner"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_ownedRule_context" name="A_ownedRule_context" memberEnd="Namespace-ownedRule Constraint-context"/>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_member_namespace" name="A_member_namespace" memberEnd="Namespace-member A_member_namespace-namespace">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_member_namespace-namespace" name="namespace" lower="0" upper="*" type="Namespace" association="A_member_namespace"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_relatedElement_relationship" name="A_relatedElement_relationship" memberEnd="Relationship-relatedElement A_relatedElement_relationship-relationship">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_relatedElement_relationship-relationship" name="relationship" lower="0" upper="*" type="Relationship" association="A_relatedElement_relationship"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_endType_association" name="A_endType_association" memberEnd="Association-endType A_endType_association-association">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_endType_association-association" name="association" lower="0" upper="*" type="Association" association="A_endType_association"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_upperValue_owningUpper" name="A_upperValue_owningUpper" memberEnd="MultiplicityElement-upperValue A_upperValue_owningUpper-owningUpper">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_upperValue_owningUpper-owningUpper" name="owningUpper" lower="0" type="MultiplicityElement" association="A_upperValue_owningUpper" subsettedProperty="Element-owner"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_lowerValue_owningLower" name="A_lowerValue_owningLower" memberEnd="MultiplicityElement-lowerValue A_lowerValue_owningLower-owningLower">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_lowerValue_owningLower-owningLower" name="owningLower" lower="0" type="MultiplicityElement" association="A_lowerValue_owningLower" subsettedProperty="Element-owner"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_receivingPackage_packageMerge" name="A_receivingPackage_packageMerge" memberEnd="PackageMerge-receivingPackage Package-packageMerge"/>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_mergedPackage_packageMerge" name="A_mergedPackage_packageMerge" memberEnd="PackageMerge-mergedPackage A_mergedPackage_packageMerge-packageMerge">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_mergedPackage_packageMerge-packageMerge" name="packageMerge" lower="0" upper="*" type="PackageMerge" association="A_mergedPackage_packageMerge"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_instance_instanceValue" name="A_instance_instanceValue" memberEnd="InstanceValue-instance A_instance_instanceValue-instanceValue">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_instance_instanceValue-instanceValue" name="instanceValue" lower="0" upper="*" type="InstanceValue" association="A_instance_instanceValue"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_value_owningSlot" name="A_value_owningSlot" memberEnd="Slot-value A_value_owningSlot-owningSlot">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_value_owningSlot-owningSlot" name="owningSlot" lower="0" type="Slot" association="A_value_owningSlot" subsettedProperty="Element-owner"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_specification_owningInstanceSpec" name="A_specification_owningInstanceSpec" memberEnd="InstanceSpecification-specification A_specification_owningInstanceSpec-owningInstanceSpec">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_specification_owningInstanceSpec-owningInstanceSpec" name="owningInstanceSpec" lower="0" type="InstanceSpecification" association="A_specification_owningInstanceSpec" subsettedProperty="Element-owner"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_packagedElement_owningPackage" name="A_packagedElement_owningPackage" memberEnd="Package-packagedElement A_packagedElement_owningPackage-owningPackage">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_packagedElement_owningPackage-owningPackage" name="owningPackage" lower="0" type="Package" association="A_packagedElement_owningPackage" subsettedProperty="NamedElement-namespace"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_importedMember_namespace" name="A_importedMember_namespace" memberEnd="Namespace-importedMember A_importedMember_namespace-namespace">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_importedMember_namespace-namespace" name="namespace" lower="0" upper="*" type="Namespace" association="A_importedMember_namespace"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_opposite_property" name="A_opposite_property" memberEnd="Property-opposite A_opposite_property-property">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_opposite_property-property" name="property" lower="0" type="Property" association="A_opposite_property"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_subsettedProperty_property" name="A_subsettedProperty_property" memberEnd="Property-subsettedProperty A_subsettedProperty_property-property">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_subsettedProperty_property-property" name="property" lower="0" upper="*" type="Property" association="A_subsettedProperty_property"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_memberEnd_association" name="A_memberEnd_association" memberEnd="Association-memberEnd Property-association"/>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_ownedType_package" name="A_ownedType_package" memberEnd="Package-ownedType Type-package"/>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_nestedPackage_nestingPackage" name="A_nestedPackage_nestingPackage" memberEnd="Package-nestedPackage Package-nestingPackage"/>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_redefinedElement_redefinableElement" name="A_redefinedElement_redefinableElement" memberEnd="RedefinableElement-redefinedElement A_redefinedElement_redefinableElement-redefinableElement">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_redefinedElement_redefinableElement-redefinableElement" name="redefinableElement" lower="0" upper="*" type="RedefinableElement" association="A_redefinedElement_redefinableElement"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_redefinitionContext_redefinableElement" name="A_redefinitionContext_redefinableElement" memberEnd="RedefinableElement-redefinitionContext A_redefinitionContext_redefinableElement-redefinableElement">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_redefinitionContext_redefinableElement-redefinableElement" name="redefinableElement" lower="0" upper="*" type="RedefinableElement" association="A_redefinitionContext_redefinableElement"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_general_classifier" name="A_general_classifier" memberEnd="Classifier-general A_general_classifier-classifier">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_general_classifier-classifier" name="classifier" lower="0" upper="*" type="Classifier" association="A_general_classifier"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_superClass_class" name="A_superClass_class" memberEnd="Class-superClass A_superClass_class-class">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_superClass_class-class" name="class" lower="0" upper="*" type="Class" association="A_superClass_class"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_bodyCondition_bodyContext" name="A_bodyCondition_bodyContext" memberEnd="Operation-bodyCondition A_bodyCondition_bodyContext-bodyContext">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_bodyCondition_bodyContext-bodyContext" name="bodyContext" lower="0" type="Operation" association="A_bodyCondition_bodyContext" subsettedProperty="Constraint-context"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_type_operation" name="A_type_operation" memberEnd="Operation-type A_type_operation-operation">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_type_operation-operation" name="operation" lower="0" upper="*" type="Operation" association="A_type_operation"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_ownedParameter_operation" name="A_ownedParameter_operation" memberEnd="Operation-ownedParameter Parameter-operation"/>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_operand_expression" name="A_operand_expression" memberEnd="Expression-operand A_operand_expression-expression">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_operand_expression-expression" name="expression" lower="0" type="Expression" association="A_operand_expression" subsettedProperty="Element-owner"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_raisedException_operation" name="A_raisedException_operation" memberEnd="Operation-raisedException A_raisedException_operation-operation">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_raisedException_operation-operation" name="operation" lower="0" upper="*" type="Operation" association="A_raisedException_operation"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_navigableOwnedEnd_association" name="A_navigableOwnedEnd_association" memberEnd="Association-navigableOwnedEnd A_navigableOwnedEnd_association-association">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_navigableOwnedEnd_association-association" name="association" lower="0" type="Association" association="A_navigableOwnedEnd_association"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="Behavior" name="Behavior" isAbstract="true" superClass="Class">
      <ownedComment xmi:type="cmof:Comment" xmi:id="Behavior-_ownedComment.0" annotatedElement="Behavior">
        <body>Behavior is a specification of how its context classifier changes state over time. This specification may be either a definition of possible behavior execution or emergent behavior, or a selective illustration of an interesting subset of possible executions. The latter form is typically used for capturing examples, such as a trace of a particular execution.</body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="Behavior-parameters_match" name="parameters_match" constrainedElement="Behavior">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Behavior-parameters_match-_ownedComment.0" annotatedElement="Behavior-parameters_match">
          <body>The parameters of the behavior must match the parameters of the implemented behavioral feature.</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="Behavior-parameters_match-_specification">
          <language>OCL</language>
          <body>true</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="Behavior-feature_of_context_classifier" name="feature_of_context_classifier" constrainedElement="Behavior">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Behavior-feature_of_context_classifier-_ownedComment.0" annotatedElement="Behavior-feature_of_context_classifier">
          <body>The implemented behavioral feature must be a feature (possibly inherited) of the context classifier of the behavior.</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="Behavior-feature_of_context_classifier-_specification">
          <language>OCL</language>
          <body>true</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="Behavior-must_realize" name="must_realize" constrainedElement="Behavior">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Behavior-must_realize-_ownedComment.0" annotatedElement="Behavior-must_realize">
          <body>If the implemented behavioral feature has been redefined in the ancestors of the owner of the behavior, then the behavior must realize the latest redefining behavioral feature.</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="Behavior-must_realize-_specification">
          <language>OCL</language>
          <body>true</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="Behavior-most_one_behaviour" name="most_one_behaviour" constrainedElement="Behavior">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Behavior-most_one_behaviour-_ownedComment.0" annotatedElement="Behavior-most_one_behaviour">
          <body>There may be at most one behavior for a given pairing of classifier (as owner of the behavior) and behavioral feature (as specification of the behavior).</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="Behavior-most_one_behaviour-_specification">
          <language>OCL</language>
          <body>true</body>
        </specification>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Behavior-isReentrant" name="isReentrant" type="Boolean" default="false">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Behavior-isReentrant-_ownedComment.0" annotatedElement="Behavior-isReentrant">
          <body>Tells whether the behavior can be invoked while it is still executing from a previous invocation.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Behavior-redefinedBehavior" name="redefinedBehavior" lower="0" upper="*" type="Behavior" association="A_redefinedBehavior_behavior" subsettedProperty="RedefinableElement-redefinedElement">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Behavior-redefinedBehavior-_ownedComment.0" annotatedElement="Behavior-redefinedBehavior">
          <body>References a behavior that this behavior redefines. A subtype of Behavior may redefine any other subtype of Behavior. If the behavior implements a behavioral feature, it replaces the redefined behavior. If the behavior is a classifier behavior, it extends the redefined behavior.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Behavior-specification" name="specification" lower="0" type="BehavioralFeature" association="A_method_specification">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Behavior-specification-_ownedComment.0" annotatedElement="Behavior-specification">
          <body>Designates a behavioral feature that the behavior implements. The behavioral feature must be owned by the classifier that owns the behavior or be inherited by it. The parameters of the behavioral feature and the implementing behavior must match. If a behavior does not have a specification, it is directly associated with a classifier (i.e., it is the behavior of the classifier as a whole).</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Behavior-ownedParameter" name="ownedParameter" isOrdered="true" lower="0" upper="*" type="Parameter" association="A_behavior_ownedParameter" subsettedProperty="Namespace-ownedMember" isComposite="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Behavior-ownedParameter-_ownedComment.0" annotatedElement="Behavior-ownedParameter">
          <body>References a list of parameters to the behavior which describes the order and type of arguments that can be given when the behavior is invoked and of the values which will be returned when the behavior completes its execution.&#xD;
</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Behavior-context" name="context" lower="0" type="BehavioredClassifier" association="A_context_behavior" subsettedProperty="RedefinableElement-redefinitionContext" isReadOnly="true" isDerived="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Behavior-context-_ownedComment.0" annotatedElement="Behavior-context">
          <body>The classifier that is the context for the execution of the behavior. If the behavior is owned by a BehavioredClassifier, that classifier is the context. Otherwise, the context is the first BehavioredClassifier reached by following the chain of owner relationships. For example, following this algorithm, the context of an entry action in a state machine is the classifier that owns the state machine. The features of the context classifier as well as the elements visible to the context classifier are visible to the behavior.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Behavior-precondition" name="precondition" lower="0" upper="*" type="Constraint" association="A_precondition_behavior" isComposite="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Behavior-precondition-_ownedComment.0" annotatedElement="Behavior-precondition">
          <body>An optional set of Constraints specifying what must be fulfilled when the behavior is invoked.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Behavior-postcondition" name="postcondition" lower="0" upper="*" type="Constraint" association="A_postcondition_behavior" isComposite="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Behavior-postcondition-_ownedComment.0" annotatedElement="Behavior-postcondition">
          <body>An optional set of Constraints specifying what is fulfilled after the execution of the behavior is completed, if its precondition was fulfilled before its invocation.</body>
        </ownedComment>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="OpaqueExpression" name="OpaqueExpression" superClass="ValueSpecification">
      <ownedComment xmi:type="cmof:Comment" xmi:id="OpaqueExpression-_ownedComment.0" annotatedElement="OpaqueExpression">
        <body>An opaque expression is an uninterpreted textual statement that denotes a (possibly empty) set of values when evaluated in a context.</body>
      </ownedComment>
      <ownedComment xmi:type="cmof:Comment" xmi:id="OpaqueExpression-_ownedComment.1" annotatedElement="OpaqueExpression">
        <body>Provides a mechanism for precisely defining the behavior of an opaque expression. An opaque expression is defined by a behavior restricted to return one result.</body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="OpaqueExpression-language_body_size" name="language_body_size" constrainedElement="OpaqueExpression">
        <ownedComment xmi:type="cmof:Comment" xmi:id="OpaqueExpression-language_body_size-_ownedComment.0" annotatedElement="OpaqueExpression-language_body_size">
          <body>If the language attribute is not empty, then the size of the body and language arrays must be the same.</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="OpaqueExpression-language_body_size-_specification">
          <language>OCL</language>
          <body>language->notEmpty() implies (body->size() = language->size())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="OpaqueExpression-only_return_result_parameters" name="only_return_result_parameters" constrainedElement="OpaqueExpression">
        <ownedComment xmi:type="cmof:Comment" xmi:id="OpaqueExpression-only_return_result_parameters-_ownedComment.0" annotatedElement="OpaqueExpression-only_return_result_parameters">
          <body>The behavior may only have return result parameters.</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="OpaqueExpression-only_return_result_parameters-_specification">
          <language>OCL</language>
          <body>self.behavior.notEmpty() implies&#xD;&#xA;  self.behavior.ownedParameters->select(p | p.direction&lt;>#return)->isEmpty()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="OpaqueExpression-one_return_result_parameter" name="one_return_result_parameter" constrainedElement="OpaqueExpression">
        <ownedComment xmi:type="cmof:Comment" xmi:id="OpaqueExpression-one_return_result_parameter-_ownedComment.0" annotatedElement="OpaqueExpression-one_return_result_parameter">
          <body>The behavior must have exactly one return result parameter.</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="OpaqueExpression-one_return_result_parameter-_specification">
          <language>OCL</language>
          <body>self.behavior.notEmpty() implies&#xD;&#xA;  self.behavior.ownedParameter->select(p | p.direction=#return)->size() = 1</body>
        </specification>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="OpaqueExpression-body" name="body" isOrdered="true" lower="0" upper="*" type="String" isComposite="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="OpaqueExpression-body-_ownedComment.0" annotatedElement="OpaqueExpression-body">
          <body>The text of the expression, possibly in multiple languages.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="OpaqueExpression-language" name="language" isOrdered="true" lower="0" upper="*" type="String" isComposite="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="OpaqueExpression-language-_ownedComment.0" annotatedElement="OpaqueExpression-language">
          <body>Specifies the languages in which the expression is stated. The interpretation of the expression body depends on the languages. If the languages are unspecified, they might be implicit from the expression body or the context. Languages are matched to body strings by order.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="OpaqueExpression-result" name="result" lower="0" type="Parameter" association="A_result_opaqueExpression" isReadOnly="true" isDerived="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="OpaqueExpression-result-_ownedComment.0" annotatedElement="OpaqueExpression-result">
          <body>Restricts an opaque expression to return exactly one return result. When the invocation of the opaque expression completes, a single set of values is returned to its owner. This association is derived from the single return result parameter of the associated behavior.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="OpaqueExpression-behavior" name="behavior" lower="0" type="Behavior" association="A_behavior_opaqueExpression">
        <ownedComment xmi:type="cmof:Comment" xmi:id="OpaqueExpression-behavior-_ownedComment.0" annotatedElement="OpaqueExpression-behavior">
          <body>Specifies the behavior of the opaque expression.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="OpaqueExpression-value" name="value" isQuery="true" precondition="OpaqueExpression-value-_ownedRule.0" bodyCondition="OpaqueExpression-value-spec">
        <ownedComment xmi:type="cmof:Comment" xmi:id="OpaqueExpression-value-_ownedComment.0" annotatedElement="OpaqueExpression-value">
          <body>The query value() gives an integer value for an expression intended to produce one.</body>
        </ownedComment>
        <ownedRule xmi:type="cmof:Constraint" xmi:id="OpaqueExpression-value-_ownedRule.0" constrainedElement="OpaqueExpression-value">
          <specification xmi:type="cmof:OpaqueExpression" xmi:id="OpaqueExpression-value-_ownedRule.0-_specification">
            <language>OCL</language>
            <body>self.isIntegral()</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="cmof:Constraint" xmi:id="OpaqueExpression-value-spec" name="spec" constrainedElement="OpaqueExpression-value">
          <specification xmi:type="cmof:OpaqueExpression" xmi:id="OpaqueExpression-value-spec-_specification">
            <language>OCL</language>
            <body>true</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="OpaqueExpression-value-_member.2" type="Integer" direction="return"/>
      </ownedOperation>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="OpaqueExpression-isIntegral" name="isIntegral" isQuery="true" bodyCondition="OpaqueExpression-isIntegral-spec">
        <ownedComment xmi:type="cmof:Comment" xmi:id="OpaqueExpression-isIntegral-_ownedComment.0" annotatedElement="OpaqueExpression-isIntegral">
          <body>The query isIntegral() tells whether an expression is intended to produce an integer.</body>
        </ownedComment>
        <ownedRule xmi:type="cmof:Constraint" xmi:id="OpaqueExpression-isIntegral-spec" name="spec" constrainedElement="OpaqueExpression-isIntegral">
          <specification xmi:type="cmof:OpaqueExpression" xmi:id="OpaqueExpression-isIntegral-spec-_specification">
            <language>OCL</language>
            <body>result = false</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="OpaqueExpression-isIntegral-_member.1" type="Boolean" direction="return"/>
      </ownedOperation>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="OpaqueExpression-isPositive" name="isPositive" isQuery="true" precondition="OpaqueExpression-isPositive-_ownedRule.0" bodyCondition="OpaqueExpression-isPositive-spec">
        <ownedComment xmi:type="cmof:Comment" xmi:id="OpaqueExpression-isPositive-_ownedComment.0" annotatedElement="OpaqueExpression-isPositive">
          <body>The query isPositive() tells whether an integer expression has a positive value.</body>
        </ownedComment>
        <ownedRule xmi:type="cmof:Constraint" xmi:id="OpaqueExpression-isPositive-_ownedRule.0" constrainedElement="OpaqueExpression-isPositive">
          <specification xmi:type="cmof:OpaqueExpression" xmi:id="OpaqueExpression-isPositive-_ownedRule.0-_specification">
            <language>OCL</language>
            <body>self.isIntegral()</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="cmof:Constraint" xmi:id="OpaqueExpression-isPositive-spec" name="spec" constrainedElement="OpaqueExpression-isPositive">
          <specification xmi:type="cmof:OpaqueExpression" xmi:id="OpaqueExpression-isPositive-spec-_specification">
            <language>OCL</language>
            <body>result = false</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="OpaqueExpression-isPositive-_member.2" type="Boolean" direction="return"/>
      </ownedOperation>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="OpaqueExpression-isNonNegative" name="isNonNegative" isQuery="true" precondition="OpaqueExpression-isNonNegative-_ownedRule.0" bodyCondition="OpaqueExpression-isNonNegative-spec">
        <ownedComment xmi:type="cmof:Comment" xmi:id="OpaqueExpression-isNonNegative-_ownedComment.0" annotatedElement="OpaqueExpression-isNonNegative">
          <body>The query isNonNegative() tells whether an integer expression has a non-negative value.</body>
        </ownedComment>
        <ownedRule xmi:type="cmof:Constraint" xmi:id="OpaqueExpression-isNonNegative-_ownedRule.0" constrainedElement="OpaqueExpression-isNonNegative">
          <specification xmi:type="cmof:OpaqueExpression" xmi:id="OpaqueExpression-isNonNegative-_ownedRule.0-_specification">
            <language>OCL</language>
            <body>self.isIntegral()</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="cmof:Constraint" xmi:id="OpaqueExpression-isNonNegative-spec" name="spec" constrainedElement="OpaqueExpression-isNonNegative">
          <specification xmi:type="cmof:OpaqueExpression" xmi:id="OpaqueExpression-isNonNegative-spec-_specification">
            <language>OCL</language>
            <body>result = false</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="OpaqueExpression-isNonNegative-_member.2" type="Boolean" direction="return"/>
      </ownedOperation>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="OpaqueBehavior" name="OpaqueBehavior" superClass="Behavior">
      <ownedComment xmi:type="cmof:Comment" xmi:id="OpaqueBehavior-_ownedComment.0" annotatedElement="OpaqueBehavior">
        <body>An behavior with implementation-specific semantics.</body>
      </ownedComment>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="OpaqueBehavior-body" name="body" isOrdered="true" lower="0" upper="*" type="String" isComposite="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="OpaqueBehavior-body-_ownedComment.0" annotatedElement="OpaqueBehavior-body">
          <body>Specifies the behavior in one or more languages.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="OpaqueBehavior-language" name="language" isOrdered="true" lower="0" upper="*" type="String" isComposite="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="OpaqueBehavior-language-_ownedComment.0" annotatedElement="OpaqueBehavior-language">
          <body>Languages the body strings use in the same order as the body strings.</body>
        </ownedComment>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="FunctionBehavior" name="FunctionBehavior" superClass="OpaqueBehavior">
      <ownedComment xmi:type="cmof:Comment" xmi:id="FunctionBehavior-_ownedComment.0" annotatedElement="FunctionBehavior">
        <body>A function behavior is an opaque behavior that does not access or modify any objects or other external data.</body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="FunctionBehavior-one_output_parameter" name="one_output_parameter" constrainedElement="FunctionBehavior">
        <ownedComment xmi:type="cmof:Comment" xmi:id="FunctionBehavior-one_output_parameter-_ownedComment.0" annotatedElement="FunctionBehavior-one_output_parameter">
          <body>A function behavior has at least one output parameter.</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="FunctionBehavior-one_output_parameter-_specification">
          <language>OCL</language>
          <body>self.ownedParameters->&#xD;&#xA;  select(p | p.direction=#out or p.direction=#inout or p.direction=#return)->size() >= 1</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="FunctionBehavior-types_of_parameters" name="types_of_parameters" constrainedElement="FunctionBehavior">
        <ownedComment xmi:type="cmof:Comment" xmi:id="FunctionBehavior-types_of_parameters-_ownedComment.0" annotatedElement="FunctionBehavior-types_of_parameters">
          <body>The types of parameters are all data types, which may not nest anything but other datatypes.</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="FunctionBehavior-types_of_parameters-_specification">
          <language>OCL</language>
          <body>def: hasAllDataTypeAttributes(d : DataType) : Boolean =&#xD;&#xA;  d.ownedAttribute->forAll(a |&#xD;&#xA;    a.type.oclIsTypeOf(DataType) and&#xD;&#xA;      hasAllDataTypeAttributes(a.type))&#xD;&#xA;self.ownedParameters->forAll(p | p.type.notEmpty() and&#xD;&#xA;  p.oclIsTypeOf(DataType) and hasAllDataTypeAttributes(p))</body>
        </specification>
      </ownedRule>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_behavioredClassifier_ownedBehavior" name="A_behavioredClassifier_ownedBehavior" memberEnd="A_behavioredClassifier_ownedBehavior-behavioredClassifier BehavioredClassifier-ownedBehavior">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_behavioredClassifier_ownedBehavior-behavioredClassifier" name="behavioredClassifier" lower="0" type="BehavioredClassifier" association="A_behavioredClassifier_ownedBehavior"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_classifierBehavior_behavioredClassifier" name="A_classifierBehavior_behavioredClassifier" memberEnd="BehavioredClassifier-classifierBehavior A_classifierBehavior_behavioredClassifier-behavioredClassifier">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_classifierBehavior_behavioredClassifier-behavioredClassifier" name="behavioredClassifier" lower="0" type="BehavioredClassifier" association="A_classifierBehavior_behavioredClassifier"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_redefinedBehavior_behavior" name="A_redefinedBehavior_behavior" memberEnd="Behavior-redefinedBehavior A_redefinedBehavior_behavior-behavior">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_redefinedBehavior_behavior-behavior" name="behavior" lower="0" upper="*" type="Behavior" association="A_redefinedBehavior_behavior"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_method_specification" name="A_method_specification" memberEnd="BehavioralFeature-method Behavior-specification"/>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_behavior_ownedParameter" name="A_behavior_ownedParameter" memberEnd="A_behavior_ownedParameter-behavior Behavior-ownedParameter">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_behavior_ownedParameter-behavior" name="behavior" lower="0" type="Behavior" association="A_behavior_ownedParameter"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_result_opaqueExpression" name="A_result_opaqueExpression" memberEnd="OpaqueExpression-result A_result_opaqueExpression-opaqueExpression">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_result_opaqueExpression-opaqueExpression" name="opaqueExpression" lower="0" upper="*" type="OpaqueExpression" association="A_result_opaqueExpression"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_behavior_opaqueExpression" name="A_behavior_opaqueExpression" memberEnd="OpaqueExpression-behavior A_behavior_opaqueExpression-opaqueExpression">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_behavior_opaqueExpression-opaqueExpression" name="opaqueExpression" lower="0" upper="*" type="OpaqueExpression" association="A_behavior_opaqueExpression"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_context_behavior" name="A_context_behavior" memberEnd="Behavior-context A_context_behavior-behavior">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_context_behavior-behavior" name="behavior" lower="0" upper="*" type="Behavior" association="A_context_behavior"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_precondition_behavior" name="A_precondition_behavior" memberEnd="Behavior-precondition A_precondition_behavior-behavior">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_precondition_behavior-behavior" name="behavior" lower="0" type="Behavior" association="A_precondition_behavior" subsettedProperty="Constraint-context"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_postcondition_behavior" name="A_postcondition_behavior" memberEnd="Behavior-postcondition A_postcondition_behavior-behavior">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_postcondition_behavior-behavior" name="behavior" lower="0" type="Behavior" association="A_postcondition_behavior" subsettedProperty="Constraint-context"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="OpaqueAction" name="OpaqueAction" superClass="Action">
      <ownedComment xmi:type="cmof:Comment" xmi:id="OpaqueAction-_ownedComment.0" annotatedElement="OpaqueAction">
        <body>An action with implementation-specific semantics.</body>
      </ownedComment>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="OpaqueAction-body" name="body" isOrdered="true" lower="0" upper="*" type="String" isComposite="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="OpaqueAction-body-_ownedComment.0" annotatedElement="OpaqueAction-body">
          <body>Specifies the action in one or more languages.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="OpaqueAction-language" name="language" isOrdered="true" lower="0" upper="*" type="String" isComposite="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="OpaqueAction-language-_ownedComment.0" annotatedElement="OpaqueAction-language">
          <body>Languages the body strings use, in the same order as the body strings</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="OpaqueAction-inputValue" name="inputValue" lower="0" upper="*" type="InputPin" association="A_inputValue_opaqueAction" subsettedProperty="Action-input" isComposite="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="OpaqueAction-inputValue-_ownedComment.0" annotatedElement="OpaqueAction-inputValue">
          <body>Provides input to the action.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="OpaqueAction-outputValue" name="outputValue" lower="0" upper="*" type="OutputPin" association="A_outputValue_opaqueAction" subsettedProperty="Action-output" isComposite="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="OpaqueAction-outputValue-_ownedComment.0" annotatedElement="OpaqueAction-outputValue">
          <body>Takes output from the action.</body>
        </ownedComment>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="OutputPin" name="OutputPin" superClass="Pin">
      <ownedComment xmi:type="cmof:Comment" xmi:id="OutputPin-_ownedComment.0" annotatedElement="OutputPin">
        <body>An output pin is a pin that holds output values produced by an action.</body>
      </ownedComment>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="InputPin" name="InputPin" superClass="Pin">
      <ownedComment xmi:type="cmof:Comment" xmi:id="InputPin-_ownedComment.0" annotatedElement="InputPin">
        <body>An input pin is a pin that holds input values to be consumed by an action.</body>
      </ownedComment>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="InvocationAction" name="InvocationAction" isAbstract="true" superClass="Action">
      <ownedComment xmi:type="cmof:Comment" xmi:id="InvocationAction-_ownedComment.0" annotatedElement="InvocationAction">
        <body>InvocationAction is an abstract class for the various actions that invoke behavior.</body>
      </ownedComment>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="InvocationAction-argument" name="argument" isOrdered="true" lower="0" upper="*" type="InputPin" association="A_argument_invocationAction" subsettedProperty="Action-input" isComposite="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="InvocationAction-argument-_ownedComment.0" annotatedElement="InvocationAction-argument">
          <body>Specification of the ordered set of argument values that appears during execution.</body>
        </ownedComment>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="CallAction" name="CallAction" isAbstract="true" superClass="InvocationAction">
      <ownedComment xmi:type="cmof:Comment" xmi:id="CallAction-_ownedComment.0" annotatedElement="CallAction">
        <body>CallAction is an abstract class for actions that invoke behavior and receive return values.</body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="CallAction-synchronous_call" name="synchronous_call" constrainedElement="CallAction">
        <ownedComment xmi:type="cmof:Comment" xmi:id="CallAction-synchronous_call-_ownedComment.0" annotatedElement="CallAction-synchronous_call">
          <body>Only synchronous call actions can have result pins.</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="CallAction-synchronous_call-_specification">
          <language>OCL</language>
          <body>true</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="CallAction-number_and_order" name="number_and_order" constrainedElement="CallAction">
        <ownedComment xmi:type="cmof:Comment" xmi:id="CallAction-number_and_order-_ownedComment.0" annotatedElement="CallAction-number_and_order">
          <body>The number and order of argument pins must be the same as the number and order of parameters of the invoked behavior or behavioral feature. Pins are matched to parameters by order.</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="CallAction-number_and_order-_specification">
          <language>OCL</language>
          <body>true</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="CallAction-type_ordering_multiplicity" name="type_ordering_multiplicity" constrainedElement="CallAction">
        <ownedComment xmi:type="cmof:Comment" xmi:id="CallAction-type_ordering_multiplicity-_ownedComment.0" annotatedElement="CallAction-type_ordering_multiplicity">
          <body>The type, ordering, and multiplicity of an argument pin must be the same as the corresponding parameter of the behavior or behavioral feature.</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="CallAction-type_ordering_multiplicity-_specification">
          <language>OCL</language>
          <body>true</body>
        </specification>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="CallAction-isSynchronous" name="isSynchronous" type="Boolean" default="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="CallAction-isSynchronous-_ownedComment.0" annotatedElement="CallAction-isSynchronous">
          <body>If true, the call is synchronous and the caller waits for completion of the invoked behavior.&#xD;
If false, the call is asynchronous and the caller proceeds immediately and does not expect a return values.&#xD;
</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="CallAction-result" name="result" isOrdered="true" lower="0" upper="*" type="OutputPin" association="A_result_callAction" subsettedProperty="Action-output" isComposite="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="CallAction-result-_ownedComment.0" annotatedElement="CallAction-result">
          <body>A list of output pins where the results of performing the invocation are placed.</body>
        </ownedComment>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="SendSignalAction" name="SendSignalAction" superClass="InvocationAction">
      <ownedComment xmi:type="cmof:Comment" xmi:id="SendSignalAction-_ownedComment.0" annotatedElement="SendSignalAction">
        <body>A send signal action is an action that creates a signal instance from its inputs, and transmits it to the target object, where it may cause the firing of a state machine transition or the execution of an activity. The argument values are available to the execution of associated behaviors. The requestor continues execution immediately. Any reply message is ignored and is not transmitted to the requestor. If the input is already a signal instance, use a send object action.</body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="SendSignalAction-number_order" name="number_order" constrainedElement="SendSignalAction">
        <ownedComment xmi:type="cmof:Comment" xmi:id="SendSignalAction-number_order-_ownedComment.0" annotatedElement="SendSignalAction-number_order">
          <body>The number and order of argument pins must be the same as the number and order of attributes in the signal.</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="SendSignalAction-number_order-_specification">
          <language>OCL</language>
          <body>true</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="SendSignalAction-type_ordering_multiplicity" name="type_ordering_multiplicity" constrainedElement="SendSignalAction">
        <ownedComment xmi:type="cmof:Comment" xmi:id="SendSignalAction-type_ordering_multiplicity-_ownedComment.0" annotatedElement="SendSignalAction-type_ordering_multiplicity">
          <body>The type, ordering, and multiplicity of an argument pin must be the same as the corresponding attribute of the signal.</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="SendSignalAction-type_ordering_multiplicity-_specification">
          <language>OCL</language>
          <body>true</body>
        </specification>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="SendSignalAction-target" name="target" type="InputPin" association="A_target_sendSignalAction" subsettedProperty="Action-input" isComposite="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="SendSignalAction-target-_ownedComment.0" annotatedElement="SendSignalAction-target">
          <body>The target object to which the signal is sent.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="SendSignalAction-signal" name="signal" type="Signal" association="A_signal_sendSignalAction">
        <ownedComment xmi:type="cmof:Comment" xmi:id="SendSignalAction-signal-_ownedComment.0" annotatedElement="SendSignalAction-signal">
          <body>The type of signal transmitted to the target object.</body>
        </ownedComment>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="CallOperationAction" name="CallOperationAction" superClass="CallAction">
      <ownedComment xmi:type="cmof:Comment" xmi:id="CallOperationAction-_ownedComment.0" annotatedElement="CallOperationAction">
        <body>A call operation action is an action that transmits an operation call request to the target object, where it may cause the invocation of associated behavior. The argument values of the action are available to the execution of the invoked behavior. If the action is marked synchronous, the execution of the call operation action waits until the execution of the invoked behavior completes and a reply transmission is returned to the caller; otherwise execution of the action is complete when the invocation of the operation is established and the execution of the invoked operation proceeds concurrently with the execution of the calling behavior. Any values returned as part of the reply transmission are put on the result output pins of the call operation action. Upon receipt of the reply transmission, execution of the call operation action is complete.</body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="CallOperationAction-argument_pin_equal_parameter" name="argument_pin_equal_parameter" constrainedElement="CallOperationAction">
        <ownedComment xmi:type="cmof:Comment" xmi:id="CallOperationAction-argument_pin_equal_parameter-_ownedComment.0" annotatedElement="CallOperationAction-argument_pin_equal_parameter">
          <body>The number of argument pins and the number of owned parameters of the operation of type in and in-out must be equal.</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="CallOperationAction-argument_pin_equal_parameter-_specification">
          <language>OCL</language>
          <body>true</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="CallOperationAction-result_pin_equal_parameter" name="result_pin_equal_parameter" constrainedElement="CallOperationAction">
        <ownedComment xmi:type="cmof:Comment" xmi:id="CallOperationAction-result_pin_equal_parameter-_ownedComment.0" annotatedElement="CallOperationAction-result_pin_equal_parameter">
          <body>The number of result pins and the number of owned parameters of the operation of type return, out, and in-out must be equal.</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="CallOperationAction-result_pin_equal_parameter-_specification">
          <language>OCL</language>
          <body>true</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="CallOperationAction-type_ordering_multiplicity" name="type_ordering_multiplicity" constrainedElement="CallOperationAction">
        <ownedComment xmi:type="cmof:Comment" xmi:id="CallOperationAction-type_ordering_multiplicity-_ownedComment.0" annotatedElement="CallOperationAction-type_ordering_multiplicity">
          <body>The type, ordering, and multiplicity of an argument or result pin is derived from the corresponding owned parameter of the operation.&#xD;
</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="CallOperationAction-type_ordering_multiplicity-_specification">
          <language>OCL</language>
          <body>true</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="CallOperationAction-type_target_pin" name="type_target_pin" constrainedElement="CallOperationAction">
        <ownedComment xmi:type="cmof:Comment" xmi:id="CallOperationAction-type_target_pin-_ownedComment.0" annotatedElement="CallOperationAction-type_target_pin">
          <body>The type of the target pin must be the same as the type that owns the operation.</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="CallOperationAction-type_target_pin-_specification">
          <language>OCL</language>
          <body>true</body>
        </specification>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="CallOperationAction-operation" name="operation" type="Operation" association="A_operation_callOperationAction">
        <ownedComment xmi:type="cmof:Comment" xmi:id="CallOperationAction-operation-_ownedComment.0" annotatedElement="CallOperationAction-operation">
          <body>The operation to be invoked by the action execution.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="CallOperationAction-target" name="target" type="InputPin" association="A_target_callOperationAction" subsettedProperty="Action-input" isComposite="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="CallOperationAction-target-_ownedComment.0" annotatedElement="CallOperationAction-target">
          <body>The target object to which the request is sent. The classifier of the target object is used to dynamically determine a behavior to invoke. This object constitutes the context of the execution of the operation.</body>
        </ownedComment>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="CallBehaviorAction" name="CallBehaviorAction" superClass="CallAction">
      <ownedComment xmi:type="cmof:Comment" xmi:id="CallBehaviorAction-_ownedComment.0" annotatedElement="CallBehaviorAction">
        <body>A call behavior action is a call action that invokes a behavior directly rather than invoking a behavioral feature that, in turn, results in the invocation of that behavior. The argument values of the action are available to the execution of the invoked behavior. For synchronous calls the execution of the call behavior action waits until the execution of the invoked behavior completes and a result is returned on its output pin. The action completes immediately without a result, if the call is asynchronous. In particular, the invoked behavior may be an activity.</body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="CallBehaviorAction-argument_pin_equal_parameter" name="argument_pin_equal_parameter" constrainedElement="CallBehaviorAction">
        <ownedComment xmi:type="cmof:Comment" xmi:id="CallBehaviorAction-argument_pin_equal_parameter-_ownedComment.0" annotatedElement="CallBehaviorAction-argument_pin_equal_parameter">
          <body>The number of argument pins and the number of parameters of the behavior of type in and in-out must be equal.</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="CallBehaviorAction-argument_pin_equal_parameter-_specification">
          <language>OCL</language>
          <body>true</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="CallBehaviorAction-result_pin_equal_parameter" name="result_pin_equal_parameter" constrainedElement="CallBehaviorAction">
        <ownedComment xmi:type="cmof:Comment" xmi:id="CallBehaviorAction-result_pin_equal_parameter-_ownedComment.0" annotatedElement="CallBehaviorAction-result_pin_equal_parameter">
          <body>The number of result pins and the number of parameters of the behavior of type return, out, and in-out must be equal.</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="CallBehaviorAction-result_pin_equal_parameter-_specification">
          <language>OCL</language>
          <body>true</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="CallBehaviorAction-type_ordering_multiplicity" name="type_ordering_multiplicity" constrainedElement="CallBehaviorAction">
        <ownedComment xmi:type="cmof:Comment" xmi:id="CallBehaviorAction-type_ordering_multiplicity-_ownedComment.0" annotatedElement="CallBehaviorAction-type_ordering_multiplicity">
          <body>The type, ordering, and multiplicity of an argument or result pin is derived from the corresponding parameter of the behavior.&#xD;
</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="CallBehaviorAction-type_ordering_multiplicity-_specification">
          <language>OCL</language>
          <body>true</body>
        </specification>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="CallBehaviorAction-behavior" name="behavior" type="Behavior" association="A_behavior_callBehaviorAction">
        <ownedComment xmi:type="cmof:Comment" xmi:id="CallBehaviorAction-behavior-_ownedComment.0" annotatedElement="CallBehaviorAction-behavior">
          <body>The invoked behavior. It must be capable of accepting and returning control.</body>
        </ownedComment>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="MultiplicityElement" name="MultiplicityElement" isAbstract="true" superClass="Element">
      <ownedComment xmi:type="cmof:Comment" xmi:id="MultiplicityElement-_ownedComment.0" annotatedElement="MultiplicityElement">
        <body>A multiplicity is a definition of an inclusive interval of non-negative integers beginning with a lower bound and ending with a (possibly infinite) upper bound. A multiplicity element embeds this information to specify the allowable cardinalities for an instantiation of this element.</body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="MultiplicityElement-upper_gt_0" name="upper_gt_0" constrainedElement="MultiplicityElement">
        <ownedComment xmi:type="cmof:Comment" xmi:id="MultiplicityElement-upper_gt_0-_ownedComment.0" annotatedElement="MultiplicityElement-upper_gt_0">
          <body>A multiplicity must define at least one valid cardinality that is greater than zero.</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="MultiplicityElement-upper_gt_0-_specification">
          <language>OCL</language>
          <body>upperBound()->notEmpty() implies upperBound() > 0</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="MultiplicityElement-lower_ge_0" name="lower_ge_0" constrainedElement="MultiplicityElement">
        <ownedComment xmi:type="cmof:Comment" xmi:id="MultiplicityElement-lower_ge_0-_ownedComment.0" annotatedElement="MultiplicityElement-lower_ge_0">
          <body>The lower bound must be a non-negative integer literal.</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="MultiplicityElement-lower_ge_0-_specification">
          <language>OCL</language>
          <body>lowerBound()->notEmpty() implies lowerBound() >= 0</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="MultiplicityElement-upper_ge_lower" name="upper_ge_lower" constrainedElement="MultiplicityElement">
        <ownedComment xmi:type="cmof:Comment" xmi:id="MultiplicityElement-upper_ge_lower-_ownedComment.0" annotatedElement="MultiplicityElement-upper_ge_lower">
          <body>The upper bound must be greater than or equal to the lower bound.</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="MultiplicityElement-upper_ge_lower-_specification">
          <language>OCL</language>
          <body>(upperBound()->notEmpty() and lowerBound()->notEmpty()) implies upperBound() >= lowerBound()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="MultiplicityElement-value_specification_no_side_effects" name="value_specification_no_side_effects" constrainedElement="MultiplicityElement">
        <ownedComment xmi:type="cmof:Comment" xmi:id="MultiplicityElement-value_specification_no_side_effects-_ownedComment.0" annotatedElement="MultiplicityElement-value_specification_no_side_effects">
          <body>If a non-literal ValueSpecification is used for the lower or upper bound, then evaluating that specification must not have side effects.</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="MultiplicityElement-value_specification_no_side_effects-_specification">
          <language>OCL</language>
          <body>true</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="MultiplicityElement-value_specification_constant" name="value_specification_constant" constrainedElement="MultiplicityElement">
        <ownedComment xmi:type="cmof:Comment" xmi:id="MultiplicityElement-value_specification_constant-_ownedComment.0" annotatedElement="MultiplicityElement-value_specification_constant">
          <body>If a non-literal ValueSpecification is used for the lower or upper bound, then that specification must be a constant expression.</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="MultiplicityElement-value_specification_constant-_specification">
          <language>OCL</language>
          <body>true</body>
        </specification>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="MultiplicityElement-isOrdered" name="isOrdered" type="Boolean" default="false">
        <ownedComment xmi:type="cmof:Comment" xmi:id="MultiplicityElement-isOrdered-_ownedComment.0" annotatedElement="MultiplicityElement-isOrdered">
          <body>For a multivalued multiplicity, this attribute specifies whether the values in an instantiation of this element are sequentially ordered.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="MultiplicityElement-isUnique" name="isUnique" type="Boolean" default="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="MultiplicityElement-isUnique-_ownedComment.0" annotatedElement="MultiplicityElement-isUnique">
          <body>For a multivalued multiplicity, this attributes specifies whether the values in an instantiation of this element are unique.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="MultiplicityElement-upper" name="upper" lower="0" type="UnlimitedNatural" default="1" isDerived="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="MultiplicityElement-upper-_ownedComment.0" annotatedElement="MultiplicityElement-upper">
          <body>Specifies the upper bound of the multiplicity interval.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="MultiplicityElement-lower" name="lower" lower="0" type="Integer" default="1" isDerived="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="MultiplicityElement-lower-_ownedComment.0" annotatedElement="MultiplicityElement-lower">
          <body>Specifies the lower bound of the multiplicity interval.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="MultiplicityElement-upperValue" name="upperValue" lower="0" type="ValueSpecification" association="A_upperValue_owningUpper" subsettedProperty="Element-ownedElement" isComposite="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="MultiplicityElement-upperValue-_ownedComment.0" annotatedElement="MultiplicityElement-upperValue">
          <body>The specification of the upper bound for this multiplicity.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="MultiplicityElement-lowerValue" name="lowerValue" lower="0" type="ValueSpecification" association="A_lowerValue_owningLower" subsettedProperty="Element-ownedElement" isComposite="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="MultiplicityElement-lowerValue-_ownedComment.0" annotatedElement="MultiplicityElement-lowerValue">
          <body>The specification of the lower bound for this multiplicity.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="MultiplicityElement-lower.1" name="lower" isQuery="true" bodyCondition="MultiplicityElement-lower.1-spec">
        <ownedComment xmi:type="cmof:Comment" xmi:id="MultiplicityElement-lower.1-_ownedComment.0" annotatedElement="MultiplicityElement-lower.1">
          <body>The derived lower attribute must equal the lowerBound.</body>
        </ownedComment>
        <ownedRule xmi:type="cmof:Constraint" xmi:id="MultiplicityElement-lower.1-spec" name="spec" constrainedElement="MultiplicityElement-lower.1 MultiplicityElement-lower">
          <specification xmi:type="cmof:OpaqueExpression" xmi:id="MultiplicityElement-lower.1-spec-_specification">
            <language>OCL</language>
            <body>result = lowerBound()</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="MultiplicityElement-lower.1-_member.1" type="Integer" direction="return"/>
      </ownedOperation>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="MultiplicityElement-upper.1" name="upper" isQuery="true" bodyCondition="MultiplicityElement-upper.1-spec">
        <ownedComment xmi:type="cmof:Comment" xmi:id="MultiplicityElement-upper.1-_ownedComment.0" annotatedElement="MultiplicityElement-upper.1">
          <body>The derived upper attribute must equal the upperBound.</body>
        </ownedComment>
        <ownedRule xmi:type="cmof:Constraint" xmi:id="MultiplicityElement-upper.1-spec" name="spec" constrainedElement="MultiplicityElement-upper.1 MultiplicityElement-upper">
          <specification xmi:type="cmof:OpaqueExpression" xmi:id="MultiplicityElement-upper.1-spec-_specification">
            <language>OCL</language>
            <body>result = upperBound()</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="MultiplicityElement-upper.1-_member.1" type="UnlimitedNatural" direction="return"/>
      </ownedOperation>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="MultiplicityElement-isMultivalued" name="isMultivalued" isQuery="true" precondition="MultiplicityElement-isMultivalued-_ownedRule.0" bodyCondition="MultiplicityElement-isMultivalued-spec">
        <ownedComment xmi:type="cmof:Comment" xmi:id="MultiplicityElement-isMultivalued-_ownedComment.0" annotatedElement="MultiplicityElement-isMultivalued">
          <body>The query isMultivalued() checks whether this multiplicity has an upper bound greater than one.</body>
        </ownedComment>
        <ownedRule xmi:type="cmof:Constraint" xmi:id="MultiplicityElement-isMultivalued-_ownedRule.0" constrainedElement="MultiplicityElement-isMultivalued">
          <specification xmi:type="cmof:OpaqueExpression" xmi:id="MultiplicityElement-isMultivalued-_ownedRule.0-_specification">
            <language>OCL</language>
            <body>upperBound()->notEmpty()</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="cmof:Constraint" xmi:id="MultiplicityElement-isMultivalued-spec" name="spec" constrainedElement="MultiplicityElement-isMultivalued">
          <specification xmi:type="cmof:OpaqueExpression" xmi:id="MultiplicityElement-isMultivalued-spec-_specification">
            <language>OCL</language>
            <body>result = upperBound() > 1</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="MultiplicityElement-isMultivalued-_member.2" type="Boolean" direction="return"/>
      </ownedOperation>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="MultiplicityElement-includesCardinality" name="includesCardinality" isQuery="true" precondition="MultiplicityElement-includesCardinality-_ownedRule.0" bodyCondition="MultiplicityElement-includesCardinality-spec">
        <ownedComment xmi:type="cmof:Comment" xmi:id="MultiplicityElement-includesCardinality-_ownedComment.0" annotatedElement="MultiplicityElement-includesCardinality">
          <body>The query includesCardinality() checks whether the specified cardinality is valid for this multiplicity.</body>
        </ownedComment>
        <ownedRule xmi:type="cmof:Constraint" xmi:id="MultiplicityElement-includesCardinality-_ownedRule.0" constrainedElement="MultiplicityElement-includesCardinality">
          <specification xmi:type="cmof:OpaqueExpression" xmi:id="MultiplicityElement-includesCardinality-_ownedRule.0-_specification">
            <language>OCL</language>
            <body>upperBound()->notEmpty() and lowerBound()->notEmpty()</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="cmof:Constraint" xmi:id="MultiplicityElement-includesCardinality-spec" name="spec" constrainedElement="MultiplicityElement-includesCardinality">
          <specification xmi:type="cmof:OpaqueExpression" xmi:id="MultiplicityElement-includesCardinality-spec-_specification">
            <language>OCL</language>
            <body>result = (lowerBound() &lt;= C) and (upperBound() >= C)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="MultiplicityElement-includesCardinality-_member.2" type="Boolean" direction="return"/>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="MultiplicityElement-includesCardinality-C" name="C" type="Integer"/>
      </ownedOperation>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="MultiplicityElement-includesMultiplicity" name="includesMultiplicity" isQuery="true" precondition="MultiplicityElement-includesMultiplicity-_ownedRule.0" bodyCondition="MultiplicityElement-includesMultiplicity-spec">
        <ownedComment xmi:type="cmof:Comment" xmi:id="MultiplicityElement-includesMultiplicity-_ownedComment.0" annotatedElement="MultiplicityElement-includesMultiplicity">
          <body>The query includesMultiplicity() checks whether this multiplicity includes all the cardinalities allowed by the specified multiplicity.</body>
        </ownedComment>
        <ownedRule xmi:type="cmof:Constraint" xmi:id="MultiplicityElement-includesMultiplicity-_ownedRule.0" constrainedElement="MultiplicityElement-includesMultiplicity">
          <specification xmi:type="cmof:OpaqueExpression" xmi:id="MultiplicityElement-includesMultiplicity-_ownedRule.0-_specification">
            <language>OCL</language>
            <body>self.upperBound()->notEmpty() and self.lowerBound()->notEmpty() and M.upperBound()->notEmpty() and M.lowerBound()->notEmpty()</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="cmof:Constraint" xmi:id="MultiplicityElement-includesMultiplicity-spec" name="spec" constrainedElement="MultiplicityElement-includesMultiplicity">
          <specification xmi:type="cmof:OpaqueExpression" xmi:id="MultiplicityElement-includesMultiplicity-spec-_specification">
            <language>OCL</language>
            <body>result = (self.lowerBound() &lt;= M.lowerBound()) and (self.upperBound() >= M.upperBound())</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="MultiplicityElement-includesMultiplicity-_member.2" type="Boolean" direction="return"/>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="MultiplicityElement-includesMultiplicity-M" name="M" type="MultiplicityElement"/>
      </ownedOperation>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="MultiplicityElement-lowerBound" name="lowerBound" isQuery="true" bodyCondition="MultiplicityElement-lowerBound-spec">
        <ownedComment xmi:type="cmof:Comment" xmi:id="MultiplicityElement-lowerBound-_ownedComment.0" annotatedElement="MultiplicityElement-lowerBound">
          <body>The query lowerBound() returns the lower bound of the multiplicity as an integer.</body>
        </ownedComment>
        <ownedRule xmi:type="cmof:Constraint" xmi:id="MultiplicityElement-lowerBound-spec" name="spec" constrainedElement="MultiplicityElement-lowerBound">
          <specification xmi:type="cmof:OpaqueExpression" xmi:id="MultiplicityElement-lowerBound-spec-_specification">
            <language>OCL</language>
            <body>result = if lowerValue->isEmpty() then 1 else lowerValue.integerValue() endif</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="MultiplicityElement-lowerBound-_member.1" type="Integer" direction="return"/>
      </ownedOperation>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="MultiplicityElement-upperBound" name="upperBound" isQuery="true" bodyCondition="MultiplicityElement-upperBound-spec">
        <ownedComment xmi:type="cmof:Comment" xmi:id="MultiplicityElement-upperBound-_ownedComment.0" annotatedElement="MultiplicityElement-upperBound">
          <body>The query upperBound() returns the upper bound of the multiplicity for a bounded multiplicity as an unlimited natural.</body>
        </ownedComment>
        <ownedRule xmi:type="cmof:Constraint" xmi:id="MultiplicityElement-upperBound-spec" name="spec" constrainedElement="MultiplicityElement-upperBound">
          <specification xmi:type="cmof:OpaqueExpression" xmi:id="MultiplicityElement-upperBound-spec-_specification">
            <language>OCL</language>
            <body>result = if upperValue->isEmpty() then 1 else upperValue.unlimitedValue() endif</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="MultiplicityElement-upperBound-_member.1" type="UnlimitedNatural" direction="return"/>
      </ownedOperation>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="MultiplicityElement-compatibleWith" name="compatibleWith" isQuery="true" bodyCondition="MultiplicityElement-compatibleWith-spec">
        <ownedComment xmi:type="cmof:Comment" xmi:id="MultiplicityElement-compatibleWith-_ownedComment.0" annotatedElement="MultiplicityElement-compatibleWith">
          <body>The operation compatibleWith takes another multiplicity as input. It checks if one multiplicity is compatible with another.</body>
        </ownedComment>
        <ownedRule xmi:type="cmof:Constraint" xmi:id="MultiplicityElement-compatibleWith-spec" name="spec" constrainedElement="MultiplicityElement-compatibleWith">
          <specification xmi:type="cmof:OpaqueExpression" xmi:id="MultiplicityElement-compatibleWith-spec-_specification">
            <language>OCL</language>
            <body>result = Integer.allInstances()->forAll(i : Integer | self.includesCardinality(i) implies other.includesCardinality(i))</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="MultiplicityElement-compatibleWith-_member.1" type="Boolean" direction="return"/>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="MultiplicityElement-compatibleWith-other" name="other" type="MultiplicityElement"/>
      </ownedOperation>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="MultiplicityElement-is" name="is" isQuery="true" bodyCondition="MultiplicityElement-is-spec">
        <ownedComment xmi:type="cmof:Comment" xmi:id="MultiplicityElement-is-_ownedComment.0" annotatedElement="MultiplicityElement-is">
          <body>The operation is determines if the upper and lower bound of the ranges are the ones given.</body>
        </ownedComment>
        <ownedRule xmi:type="cmof:Constraint" xmi:id="MultiplicityElement-is-spec" name="spec" constrainedElement="MultiplicityElement-is">
          <specification xmi:type="cmof:OpaqueExpression" xmi:id="MultiplicityElement-is-spec-_specification">
            <language>OCL</language>
            <body>result = (lowerbound = self.lowerbound and upperbound = self.upperbound)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="MultiplicityElement-is-_member.1" type="Boolean" direction="return"/>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="MultiplicityElement-is-lowerbound" name="lowerbound" type="Integer"/>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="MultiplicityElement-is-upperbound" name="upperbound" type="Integer"/>
      </ownedOperation>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_behavior_callBehaviorAction" name="A_behavior_callBehaviorAction" memberEnd="CallBehaviorAction-behavior A_behavior_callBehaviorAction-callBehaviorAction">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_behavior_callBehaviorAction-callBehaviorAction" name="callBehaviorAction" lower="0" upper="*" type="CallBehaviorAction" association="A_behavior_callBehaviorAction"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_operation_callOperationAction" name="A_operation_callOperationAction" memberEnd="CallOperationAction-operation A_operation_callOperationAction-callOperationAction">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_operation_callOperationAction-callOperationAction" name="callOperationAction" lower="0" upper="*" type="CallOperationAction" association="A_operation_callOperationAction"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_target_callOperationAction" name="A_target_callOperationAction" memberEnd="CallOperationAction-target A_target_callOperationAction-callOperationAction">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_target_callOperationAction-callOperationAction" name="callOperationAction" lower="0" type="CallOperationAction" association="A_target_callOperationAction"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_target_sendSignalAction" name="A_target_sendSignalAction" memberEnd="SendSignalAction-target A_target_sendSignalAction-sendSignalAction">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_target_sendSignalAction-sendSignalAction" name="sendSignalAction" lower="0" type="SendSignalAction" association="A_target_sendSignalAction"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_signal_sendSignalAction" name="A_signal_sendSignalAction" memberEnd="SendSignalAction-signal A_signal_sendSignalAction-sendSignalAction">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_signal_sendSignalAction-sendSignalAction" name="sendSignalAction" lower="0" upper="*" type="SendSignalAction" association="A_signal_sendSignalAction"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_result_callAction" name="A_result_callAction" memberEnd="CallAction-result A_result_callAction-callAction">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_result_callAction-callAction" name="callAction" lower="0" type="CallAction" association="A_result_callAction"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_argument_invocationAction" name="A_argument_invocationAction" memberEnd="InvocationAction-argument A_argument_invocationAction-invocationAction">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_argument_invocationAction-invocationAction" name="invocationAction" lower="0" type="InvocationAction" association="A_argument_invocationAction"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_action_output" name="A_action_output" memberEnd="A_action_output-action Action-output">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_action_output-action" name="action" lower="0" type="Action" association="A_action_output"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_action_input" name="A_action_input" memberEnd="A_action_input-action Action-input">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_action_input-action" name="action" lower="0" type="Action" association="A_action_input"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_value_valuePin" name="A_value_valuePin" memberEnd="ValuePin-value A_value_valuePin-valuePin">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_value_valuePin-valuePin" name="valuePin" lower="0" type="ValuePin" association="A_value_valuePin"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_context_action" name="A_context_action" isDerived="true" memberEnd="Action-context A_context_action-action">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_context_action-action" name="action" lower="0" upper="*" type="Action" association="A_context_action"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_inputValue_opaqueAction" name="A_inputValue_opaqueAction" memberEnd="OpaqueAction-inputValue A_inputValue_opaqueAction-opaqueAction">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_inputValue_opaqueAction-opaqueAction" name="opaqueAction" lower="0" type="OpaqueAction" association="A_inputValue_opaqueAction"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_outputValue_opaqueAction" name="A_outputValue_opaqueAction" memberEnd="OpaqueAction-outputValue A_outputValue_opaqueAction-opaqueAction">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_outputValue_opaqueAction-opaqueAction" name="opaqueAction" lower="0" type="OpaqueAction" association="A_outputValue_opaqueAction"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="Action" name="Action" isAbstract="true" superClass="ActivityNode">
      <ownedComment xmi:type="cmof:Comment" xmi:id="Action-_ownedComment.0" annotatedElement="Action">
        <body>An action is a named element that is the fundamental unit of executable functionality. The execution of an action represents some transformation or processing in the modeled system, be it a computer system or otherwise.</body>
      </ownedComment>
      <ownedComment xmi:type="cmof:Comment" xmi:id="Action-_ownedComment.1" annotatedElement="Action">
        <body>An action represents a single step within an activity, that is, one that is not further decomposed within the activity.</body>
      </ownedComment>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Action-output" name="output" isOrdered="true" lower="0" upper="*" type="OutputPin" isDerivedUnion="true" association="A_action_output" subsettedProperty="Element-ownedElement" isReadOnly="true" isComposite="true" isDerived="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Action-output-_ownedComment.0" annotatedElement="Action-output">
          <body>The ordered set of output pins connected to the Action. The action places its results onto pins in this set.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Action-input" name="input" isOrdered="true" lower="0" upper="*" type="InputPin" isDerivedUnion="true" association="A_action_input" subsettedProperty="Element-ownedElement" isReadOnly="true" isComposite="true" isDerived="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Action-input-_ownedComment.0" annotatedElement="Action-input">
          <body>The ordered set of input pins connected to the Action. These are among the total set of inputs.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Action-context" name="context" lower="0" type="Classifier" association="A_context_action" isReadOnly="true" isDerived="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Action-context-_ownedComment.0" annotatedElement="Action-context">
          <body>The classifier that owns the behavior of which this action is a part.</body>
        </ownedComment>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_node_activity" name="A_node_activity" memberEnd="Activity-node ActivityNode-activity"/>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_containedNode_inGroup" name="A_containedNode_inGroup" memberEnd="ActivityGroup-containedNode ActivityNode-inGroup"/>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_group_inActivity" name="A_group_inActivity" memberEnd="Activity-group ActivityGroup-inActivity"/>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_subgroup_superGroup" name="A_subgroup_superGroup" memberEnd="ActivityGroup-subgroup ActivityGroup-superGroup"/>
    <ownedMember xmi:type="cmof:Class" xmi:id="ObjectNode" name="ObjectNode" isAbstract="true" superClass="ActivityNode TypedElement">
      <ownedComment xmi:type="cmof:Comment" xmi:id="ObjectNode-_ownedComment.0" annotatedElement="ObjectNode">
        <body>An object node is an abstract activity node that is part of defining object flow in an activity.</body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="ObjectNode-object_flow_edges" name="object_flow_edges" constrainedElement="ObjectNode">
        <ownedComment xmi:type="cmof:Comment" xmi:id="ObjectNode-object_flow_edges-_ownedComment.0" annotatedElement="ObjectNode-object_flow_edges">
          <body>All edges coming into or going out of object nodes must be object flow edges.</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="ObjectNode-object_flow_edges-_specification">
          <language>OCL</language>
          <body>true</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="ObjectNode-not_unique" name="not_unique" constrainedElement="ObjectNode">
        <ownedComment xmi:type="cmof:Comment" xmi:id="ObjectNode-not_unique-_ownedComment.0" annotatedElement="ObjectNode-not_unique">
          <body>Object nodes are not unique typed elements</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="ObjectNode-not_unique-_specification">
          <language>OCL</language>
          <body>isUnique = false</body>
        </specification>
      </ownedRule>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="ControlNode" name="ControlNode" isAbstract="true" superClass="ActivityNode">
      <ownedComment xmi:type="cmof:Comment" xmi:id="ControlNode-_ownedComment.0" annotatedElement="ControlNode">
        <body>A control node is an abstract activity node that coordinates flows in an activity.</body>
      </ownedComment>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="ActivityEdge" name="ActivityEdge" isAbstract="true" superClass="RedefinableElement">
      <ownedComment xmi:type="cmof:Comment" xmi:id="ActivityEdge-_ownedComment.0" annotatedElement="ActivityEdge">
        <body>An activity edge is an abstract class for directed connections between two activity nodes.</body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="ActivityEdge-source_and_target" name="source_and_target" constrainedElement="ActivityEdge">
        <ownedComment xmi:type="cmof:Comment" xmi:id="ActivityEdge-source_and_target-_ownedComment.0" annotatedElement="ActivityEdge-source_and_target">
          <body>The source and target of an edge must be in the same activity as the edge.</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="ActivityEdge-source_and_target-_specification">
          <language>OCL</language>
          <body>true</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="ActivityEdge-owned" name="owned" constrainedElement="ActivityEdge">
        <ownedComment xmi:type="cmof:Comment" xmi:id="ActivityEdge-owned-_ownedComment.0" annotatedElement="ActivityEdge-owned">
          <body>Activity edges may be owned only by activities or groups.</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="ActivityEdge-owned-_specification">
          <language>OCL</language>
          <body>true</body>
        </specification>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="ActivityEdge-activity" name="activity" lower="0" type="Activity" association="A_activity_edge" subsettedProperty="Element-owner">
        <ownedComment xmi:type="cmof:Comment" xmi:id="ActivityEdge-activity-_ownedComment.0" annotatedElement="ActivityEdge-activity">
          <body>Activity containing the edge.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="ActivityEdge-source" name="source" type="ActivityNode" association="A_outgoing_source">
        <ownedComment xmi:type="cmof:Comment" xmi:id="ActivityEdge-source-_ownedComment.0" annotatedElement="ActivityEdge-source">
          <body>Node from which tokens are taken when they traverse the edge.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="ActivityEdge-target" name="target" type="ActivityNode" association="A_target_incoming">
        <ownedComment xmi:type="cmof:Comment" xmi:id="ActivityEdge-target-_ownedComment.0" annotatedElement="ActivityEdge-target">
          <body>Node to which tokens are put when they traverse the edge.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="ActivityEdge-inGroup" name="inGroup" lower="0" upper="*" type="ActivityGroup" association="A_containedEdge_inGroup" isReadOnly="true" isDerived="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="ActivityEdge-inGroup-_ownedComment.0" annotatedElement="ActivityEdge-inGroup">
          <body>Groups containing the edge.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="ActivityEdge-redefinedEdge" name="redefinedEdge" lower="0" upper="*" type="ActivityEdge" association="A_redefinedEdge_activityEdge" subsettedProperty="RedefinableElement-redefinedElement">
        <ownedComment xmi:type="cmof:Comment" xmi:id="ActivityEdge-redefinedEdge-_ownedComment.0" annotatedElement="ActivityEdge-redefinedEdge">
          <body>Inherited edges replaced by this edge in a specialization of the activity.</body>
        </ownedComment>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="ControlFlow" name="ControlFlow" superClass="ActivityEdge">
      <ownedComment xmi:type="cmof:Comment" xmi:id="ControlFlow-_ownedComment.0" annotatedElement="ControlFlow">
        <body>A control flow is an edge that starts an activity node after the previous one is finished.</body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="ControlFlow-object_nodes" name="object_nodes" constrainedElement="ControlFlow">
        <ownedComment xmi:type="cmof:Comment" xmi:id="ControlFlow-object_nodes-_ownedComment.0" annotatedElement="ControlFlow-object_nodes">
          <body>Control flows may not have object nodes at either end, except for object nodes with control type.</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="ControlFlow-object_nodes-_specification">
          <language>OCL</language>
          <body>true</body>
        </specification>
      </ownedRule>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="ObjectFlow" name="ObjectFlow" superClass="ActivityEdge">
      <ownedComment xmi:type="cmof:Comment" xmi:id="ObjectFlow-_ownedComment.0" annotatedElement="ObjectFlow">
        <body>An object flow is an activity edge that can have objects or data passing along it.</body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="ObjectFlow-no_actions" name="no_actions" constrainedElement="ObjectFlow">
        <ownedComment xmi:type="cmof:Comment" xmi:id="ObjectFlow-no_actions-_ownedComment.0" annotatedElement="ObjectFlow-no_actions">
          <body>Object flows may not have actions at either end.</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="ObjectFlow-no_actions-_specification">
          <language>OCL</language>
          <body>true</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="ObjectFlow-compatible_types" name="compatible_types" constrainedElement="ObjectFlow">
        <ownedComment xmi:type="cmof:Comment" xmi:id="ObjectFlow-compatible_types-_ownedComment.0" annotatedElement="ObjectFlow-compatible_types">
          <body>Object nodes connected by an object flow, with optionally intervening control nodes, must have compatible types. In particular, the downstream object node type must be the same or a supertype of the upstream object node type.&#xD;
</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="ObjectFlow-compatible_types-_specification">
          <language>OCL</language>
          <body>true</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="ObjectFlow-same_upper_bounds" name="same_upper_bounds" constrainedElement="ObjectFlow">
        <ownedComment xmi:type="cmof:Comment" xmi:id="ObjectFlow-same_upper_bounds-_ownedComment.0" annotatedElement="ObjectFlow-same_upper_bounds">
          <body>Object nodes connected by an object flow, with optionally intervening control nodes, must have the same upper bounds.</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="ObjectFlow-same_upper_bounds-_specification">
          <language>OCL</language>
          <body>true</body>
        </specification>
      </ownedRule>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="InitialNode" name="InitialNode" superClass="ControlNode">
      <ownedComment xmi:type="cmof:Comment" xmi:id="InitialNode-_ownedComment.0" annotatedElement="InitialNode">
        <body>An initial node is a control node at which flow starts when the activity is invoked.</body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="InitialNode-no_incoming_edges" name="no_incoming_edges" constrainedElement="InitialNode">
        <ownedComment xmi:type="cmof:Comment" xmi:id="InitialNode-no_incoming_edges-_ownedComment.0" annotatedElement="InitialNode-no_incoming_edges">
          <body>An initial node has no incoming edges.</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="InitialNode-no_incoming_edges-_specification">
          <language>OCL</language>
          <body>true</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="InitialNode-control_edges" name="control_edges" constrainedElement="InitialNode">
        <ownedComment xmi:type="cmof:Comment" xmi:id="InitialNode-control_edges-_ownedComment.0" annotatedElement="InitialNode-control_edges">
          <body>Only control edges can have initial nodes as source.</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="InitialNode-control_edges-_specification">
          <language>OCL</language>
          <body>true</body>
        </specification>
      </ownedRule>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="ActivityFinalNode" name="ActivityFinalNode" superClass="ControlNode">
      <ownedComment xmi:type="cmof:Comment" xmi:id="ActivityFinalNode-_ownedComment.0" annotatedElement="ActivityFinalNode">
        <body>An activity final node is a final node that stops all flows in an activity.</body>
      </ownedComment>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="ActivityGroup" name="ActivityGroup" isAbstract="true" superClass="Element">
      <ownedComment xmi:type="cmof:Comment" xmi:id="ActivityGroup-_ownedComment.0" annotatedElement="ActivityGroup">
        <body>ActivityGroup is an abstract class for defining sets of nodes and edges in an activity.</body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="ActivityGroup-nodes_and_edges" name="nodes_and_edges" constrainedElement="ActivityGroup">
        <ownedComment xmi:type="cmof:Comment" xmi:id="ActivityGroup-nodes_and_edges-_ownedComment.0" annotatedElement="ActivityGroup-nodes_and_edges">
          <body>All nodes and edges of the group must be in the same activity as the group.</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="ActivityGroup-nodes_and_edges-_specification">
          <language>OCL</language>
          <body>true</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="ActivityGroup-not_contained" name="not_contained" constrainedElement="ActivityGroup">
        <ownedComment xmi:type="cmof:Comment" xmi:id="ActivityGroup-not_contained-_ownedComment.0" annotatedElement="ActivityGroup-not_contained">
          <body>No node or edge in a group may be contained by its subgroups or its containing groups, transitively.</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="ActivityGroup-not_contained-_specification">
          <language>OCL</language>
          <body>true</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="ActivityGroup-group_owned" name="group_owned" constrainedElement="ActivityGroup">
        <ownedComment xmi:type="cmof:Comment" xmi:id="ActivityGroup-group_owned-_ownedComment.0" annotatedElement="ActivityGroup-group_owned">
          <body>Groups may only be owned by activities or groups.</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="ActivityGroup-group_owned-_specification">
          <language>OCL</language>
          <body>true</body>
        </specification>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="ActivityGroup-containedNode" name="containedNode" lower="0" upper="*" type="ActivityNode" association="A_containedNode_inGroup" isReadOnly="true" isDerived="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="ActivityGroup-containedNode-_ownedComment.0" annotatedElement="ActivityGroup-containedNode">
          <body>Nodes immediately contained in the group.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="ActivityGroup-inActivity" name="inActivity" lower="0" type="Activity" association="A_group_inActivity" subsettedProperty="Element-owner">
        <ownedComment xmi:type="cmof:Comment" xmi:id="ActivityGroup-inActivity-_ownedComment.0" annotatedElement="ActivityGroup-inActivity">
          <body>Activity containing the group.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="ActivityGroup-subgroup" name="subgroup" lower="0" upper="*" type="ActivityGroup" association="A_subgroup_superGroup" subsettedProperty="Element-ownedElement" isReadOnly="true" isComposite="true" isDerived="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="ActivityGroup-subgroup-_ownedComment.0" annotatedElement="ActivityGroup-subgroup">
          <body>Groups immediately contained in the group.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="ActivityGroup-superGroup" name="superGroup" lower="0" type="ActivityGroup" association="A_subgroup_superGroup" subsettedProperty="Element-owner" isReadOnly="true" isDerived="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="ActivityGroup-superGroup-_ownedComment.0" annotatedElement="ActivityGroup-superGroup">
          <body>Group immediately containing the group.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="ActivityGroup-containedEdge" name="containedEdge" lower="0" upper="*" type="ActivityEdge" association="A_containedEdge_inGroup" isReadOnly="true" isDerived="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="ActivityGroup-containedEdge-_ownedComment.0" annotatedElement="ActivityGroup-containedEdge">
          <body>Edges immediately contained in the group.</body>
        </ownedComment>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="ActivityParameterNode" name="ActivityParameterNode" superClass="ObjectNode">
      <ownedComment xmi:type="cmof:Comment" xmi:id="ActivityParameterNode-_ownedComment.0" annotatedElement="ActivityParameterNode">
        <body>An activity parameter node is an object node for inputs and outputs to activities.</body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="ActivityParameterNode-has_parameters" name="has_parameters" constrainedElement="ActivityParameterNode">
        <ownedComment xmi:type="cmof:Comment" xmi:id="ActivityParameterNode-has_parameters-_ownedComment.0" annotatedElement="ActivityParameterNode-has_parameters">
          <body>Activity parameter nodes must have parameters from the containing activity.</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="ActivityParameterNode-has_parameters-_specification">
          <language>OCL</language>
          <body>true</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="ActivityParameterNode-same_type" name="same_type" constrainedElement="ActivityParameterNode">
        <ownedComment xmi:type="cmof:Comment" xmi:id="ActivityParameterNode-same_type-_ownedComment.0" annotatedElement="ActivityParameterNode-same_type">
          <body>The type of an activity parameter node is the same as the type of its parameter.</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="ActivityParameterNode-same_type-_specification">
          <language>OCL</language>
          <body>true</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="ActivityParameterNode-no_edges" name="no_edges" constrainedElement="ActivityParameterNode">
        <ownedComment xmi:type="cmof:Comment" xmi:id="ActivityParameterNode-no_edges-_ownedComment.0" annotatedElement="ActivityParameterNode-no_edges">
          <body>An activity parameter node may have all incoming edges or all outgoing edges, but it must not have both incoming and outgoing edges.</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="ActivityParameterNode-no_edges-_specification">
          <language>OCL</language>
          <body>true</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="ActivityParameterNode-no_incoming_edges" name="no_incoming_edges" constrainedElement="ActivityParameterNode">
        <ownedComment xmi:type="cmof:Comment" xmi:id="ActivityParameterNode-no_incoming_edges-_ownedComment.0" annotatedElement="ActivityParameterNode-no_incoming_edges">
          <body>Activity parameter object nodes with no incoming edges and one or more outgoing edges must have a parameter with in or inout direction.&#xD;
</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="ActivityParameterNode-no_incoming_edges-_specification">
          <language>OCL</language>
          <body>true</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="ActivityParameterNode-no_outgoing_edges" name="no_outgoing_edges" constrainedElement="ActivityParameterNode">
        <ownedComment xmi:type="cmof:Comment" xmi:id="ActivityParameterNode-no_outgoing_edges-_ownedComment.0" annotatedElement="ActivityParameterNode-no_outgoing_edges">
          <body>Activity parameter object nodes with no outgoing edges and one or more incoming edges must have a parameter with out, inout, or return direction.&#xD;
</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="ActivityParameterNode-no_outgoing_edges-_specification">
          <language>OCL</language>
          <body>true</body>
        </specification>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="ActivityParameterNode-parameter" name="parameter" type="Parameter" association="A_parameter_activityParameterNode">
        <ownedComment xmi:type="cmof:Comment" xmi:id="ActivityParameterNode-parameter-_ownedComment.0" annotatedElement="ActivityParameterNode-parameter">
          <body>The parameter the object node will be accepting or providing values for.</body>
        </ownedComment>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="ActivityNode" name="ActivityNode" isAbstract="true" superClass="RedefinableElement">
      <ownedComment xmi:type="cmof:Comment" xmi:id="ActivityNode-_ownedComment.0" annotatedElement="ActivityNode">
        <body>ActivityNode is an abstract class for points in the flow of an activity connected by edges.</body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="ActivityNode-owned" name="owned" constrainedElement="ActivityNode">
        <ownedComment xmi:type="cmof:Comment" xmi:id="ActivityNode-owned-_ownedComment.0" annotatedElement="ActivityNode-owned">
          <body>Activity nodes can only be owned by activities or groups.</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="ActivityNode-owned-_specification">
          <language>OCL</language>
          <body>true</body>
        </specification>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="ActivityNode-activity" name="activity" lower="0" type="Activity" association="A_node_activity" subsettedProperty="Element-owner">
        <ownedComment xmi:type="cmof:Comment" xmi:id="ActivityNode-activity-_ownedComment.0" annotatedElement="ActivityNode-activity">
          <body>Activity containing the node.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="ActivityNode-inGroup" name="inGroup" lower="0" upper="*" type="ActivityGroup" association="A_containedNode_inGroup" isReadOnly="true" isDerived="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="ActivityNode-inGroup-_ownedComment.0" annotatedElement="ActivityNode-inGroup">
          <body>Groups containing the node.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="ActivityNode-outgoing" name="outgoing" lower="0" upper="*" type="ActivityEdge" association="A_outgoing_source">
        <ownedComment xmi:type="cmof:Comment" xmi:id="ActivityNode-outgoing-_ownedComment.0" annotatedElement="ActivityNode-outgoing">
          <body>Edges that have the node as source.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="ActivityNode-incoming" name="incoming" lower="0" upper="*" type="ActivityEdge" association="A_target_incoming">
        <ownedComment xmi:type="cmof:Comment" xmi:id="ActivityNode-incoming-_ownedComment.0" annotatedElement="ActivityNode-incoming">
          <body>Edges that have the node as target.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="ActivityNode-redefinedNode" name="redefinedNode" lower="0" upper="*" type="ActivityNode" association="A_redefinedNode_activityNode" subsettedProperty="RedefinableElement-redefinedElement">
        <ownedComment xmi:type="cmof:Comment" xmi:id="ActivityNode-redefinedNode-_ownedComment.0" annotatedElement="ActivityNode-redefinedNode">
          <body>Inherited nodes replaced by this node in a specialization of the activity.</body>
        </ownedComment>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="Pin" name="Pin" superClass="MultiplicityElement ObjectNode">
      <ownedComment xmi:type="cmof:Comment" xmi:id="Pin-_ownedComment.0" annotatedElement="Pin">
        <body>A pin is a typed element and multiplicity element that provides values to actions and accept result values from them.</body>
      </ownedComment>
      <ownedComment xmi:type="cmof:Comment" xmi:id="Pin-_ownedComment.1" annotatedElement="Pin">
        <body>A pin is an object node for inputs and outputs to actions.</body>
      </ownedComment>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="Activity" name="Activity" superClass="Behavior">
      <ownedComment xmi:type="cmof:Comment" xmi:id="Activity-_ownedComment.0" annotatedElement="Activity">
        <body>An activity is the specification of parameterized behavior as the coordinated sequencing of subordinate units whose individual elements are actions.</body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="Activity-no_supergroups" name="no_supergroups" constrainedElement="Activity">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Activity-no_supergroups-_ownedComment.0" annotatedElement="Activity-no_supergroups">
          <body>The groups of an activity have no supergroups.</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="Activity-no_supergroups-_specification">
          <language>OCL</language>
          <body>true</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="Activity-activity_parameter_node" name="activity_parameter_node" constrainedElement="Activity">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Activity-activity_parameter_node-_ownedComment.0" annotatedElement="Activity-activity_parameter_node">
          <body>The nodes of the activity must include one ActivityParameterNode for each parameter.</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="Activity-activity_parameter_node-_specification">
          <language>OCL</language>
          <body>true</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="Activity-autonomous" name="autonomous" constrainedElement="Activity">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Activity-autonomous-_ownedComment.0" annotatedElement="Activity-autonomous">
          <body>An activity cannot be autonomous and have a classifier or behavioral feature context at the same time.</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="Activity-autonomous-_specification">
          <language>OCL</language>
          <body>true</body>
        </specification>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Activity-node" name="node" lower="0" upper="*" type="ActivityNode" association="A_node_activity" subsettedProperty="Element-ownedElement" isComposite="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Activity-node-_ownedComment.0" annotatedElement="Activity-node">
          <body>Nodes coordinated by the activity.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Activity-group" name="group" lower="0" upper="*" type="ActivityGroup" association="A_group_inActivity" subsettedProperty="Element-ownedElement" isComposite="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Activity-group-_ownedComment.0" annotatedElement="Activity-group">
          <body>Top-level groups in the activity.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Activity-isReadOnly" name="isReadOnly" type="Boolean" default="false">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Activity-isReadOnly-_ownedComment.0" annotatedElement="Activity-isReadOnly">
          <body>If true, this activity must not make any changes to variables outside the activity or to objects. (This is an assertion, not an executable property. It may be used by an execution engine to optimize model execution. If the assertion is violated by the action, then the model is ill-formed.) The default is false (an activity may make nonlocal changes).</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Activity-edge" name="edge" lower="0" upper="*" type="ActivityEdge" association="A_activity_edge" subsettedProperty="Element-ownedElement" isComposite="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Activity-edge-_ownedComment.0" annotatedElement="Activity-edge">
          <body>Edges expressing flow between nodes of the activity.</body>
        </ownedComment>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="ValuePin" name="ValuePin" superClass="InputPin">
      <ownedComment xmi:type="cmof:Comment" xmi:id="ValuePin-_ownedComment.0" annotatedElement="ValuePin">
        <body>A value pin is an input pin that provides a value by evaluating a value specification.</body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="ValuePin-compatible_type" name="compatible_type" constrainedElement="ValuePin">
        <ownedComment xmi:type="cmof:Comment" xmi:id="ValuePin-compatible_type-_ownedComment.0" annotatedElement="ValuePin-compatible_type">
          <body>The type of value specification must be compatible with the type of the value pin.</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="ValuePin-compatible_type-_specification">
          <language>OCL</language>
          <body>true</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="ValuePin-no_incoming_edges" name="no_incoming_edges" constrainedElement="ValuePin">
        <ownedComment xmi:type="cmof:Comment" xmi:id="ValuePin-no_incoming_edges-_ownedComment.0" annotatedElement="ValuePin-no_incoming_edges">
          <body>Value pins have no incoming edges.</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="ValuePin-no_incoming_edges-_specification">
          <language>OCL</language>
          <body>true</body>
        </specification>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="ValuePin-value" name="value" type="ValueSpecification" association="A_value_valuePin" isComposite="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="ValuePin-value-_ownedComment.0" annotatedElement="ValuePin-value">
          <body>Value that the pin will provide.</body>
        </ownedComment>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_activity_edge" name="A_activity_edge" memberEnd="ActivityEdge-activity Activity-edge"/>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_outgoing_source" name="A_outgoing_source" memberEnd="ActivityNode-outgoing ActivityEdge-source"/>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_target_incoming" name="A_target_incoming" memberEnd="ActivityEdge-target ActivityNode-incoming"/>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_containedEdge_inGroup" name="A_containedEdge_inGroup" isDerived="true" memberEnd="ActivityGroup-containedEdge ActivityEdge-inGroup"/>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_parameter_activityParameterNode" name="A_parameter_activityParameterNode" memberEnd="ActivityParameterNode-parameter A_parameter_activityParameterNode-activityParameterNode">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_parameter_activityParameterNode-activityParameterNode" name="activityParameterNode" lower="0" upper="*" type="ActivityParameterNode" association="A_parameter_activityParameterNode"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_redefinedNode_activityNode" name="A_redefinedNode_activityNode" memberEnd="ActivityNode-redefinedNode A_redefinedNode_activityNode-activityNode">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_redefinedNode_activityNode-activityNode" name="activityNode" lower="0" upper="*" type="ActivityNode" association="A_redefinedNode_activityNode"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_redefinedEdge_activityEdge" name="A_redefinedEdge_activityEdge" memberEnd="ActivityEdge-redefinedEdge A_redefinedEdge_activityEdge-activityEdge">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_redefinedEdge_activityEdge-activityEdge" name="activityEdge" lower="0" upper="*" type="ActivityEdge" association="A_redefinedEdge_activityEdge"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="Usage" name="Usage" superClass="Dependency">
      <ownedComment xmi:type="cmof:Comment" xmi:id="Usage-_ownedComment.0" annotatedElement="Usage">
        <body>A usage is a relationship in which one element requires another element (or set of elements) for its full implementation or operation. A usage is a dependency in which the client requires the presence of the supplier.</body>
      </ownedComment>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="Abstraction" name="Abstraction" superClass="Dependency">
      <ownedComment xmi:type="cmof:Comment" xmi:id="Abstraction-_ownedComment.0" annotatedElement="Abstraction">
        <body>An abstraction is a relationship that relates two elements or sets of elements that represent the same concept at different levels of abstraction or from different viewpoints.</body>
      </ownedComment>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Abstraction-mapping" name="mapping" lower="0" type="OpaqueExpression" association="A_mapping_abstraction" subsettedProperty="Element-ownedElement" isComposite="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Abstraction-mapping-_ownedComment.0" annotatedElement="Abstraction-mapping">
          <body>An composition of an Expression that states the abstraction relationship between the supplier and the client. In some cases, such as Derivation, it is usually formal and unidirectional; in other cases, such as Trace, it is usually informal and bidirectional. The mapping expression is optional and may be omitted if the precise relationship between the elements is not specified.</body>
        </ownedComment>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="Dependency" name="Dependency" superClass="DirectedRelationship PackageableElement">
      <ownedComment xmi:type="cmof:Comment" xmi:id="Dependency-_ownedComment.0" annotatedElement="Dependency">
        <body>A dependency is a relationship that signifies that a single or a set of model elements requires other model elements for their specification or implementation. This means that the complete semantics of the depending elements is either semantically or structurally dependent on the definition of the supplier element(s).</body>
      </ownedComment>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Dependency-supplier" name="supplier" upper="*" type="NamedElement" association="A_supplierDependency_supplier" subsettedProperty="DirectedRelationship-target">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Dependency-supplier-_ownedComment.0" annotatedElement="Dependency-supplier">
          <body>The element(s) independent of the client element(s), in the same respect and the same dependency relationship. In some directed dependency relationships (such as Refinement Abstractions), a common convention in the domain of class-based OO software is to put the more abstract element in this role. Despite this convention, users of UML may stipulate a sense of dependency suitable for their domain, which makes a more abstract element dependent on that which is more specific.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Dependency-client" name="client" upper="*" type="NamedElement" association="A_clientDependency_client" subsettedProperty="DirectedRelationship-source">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Dependency-client-_ownedComment.0" annotatedElement="Dependency-client">
          <body>The element(s) dependent on the supplier element(s). In some cases (such as a Trace Abstraction) the assignment of direction (that is, the designation of the client element) is at the discretion of the modeler, and is a stipulation.</body>
        </ownedComment>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="Realization" name="Realization" superClass="Abstraction">
      <ownedComment xmi:type="cmof:Comment" xmi:id="Realization-_ownedComment.0" annotatedElement="Realization">
        <body>Realization is a specialized abstraction relationship between two sets of model elements, one representing a specification (the supplier) and the other represents an implementation of the latter (the client). Realization can be used to model stepwise refinement, optimizations, transformations, templates, model synthesis, framework composition, etc.</body>
      </ownedComment>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="Substitution" name="Substitution" superClass="Realization">
      <ownedComment xmi:type="cmof:Comment" xmi:id="Substitution-_ownedComment.0" annotatedElement="Substitution">
        <body>A substitution is a relationship between two classifiers signifies that the substituting classifier complies with the contract specified by the contract classifier. This implies that instances of the substituting classifier are runtime substitutable where instances of the contract classifier are expected.</body>
      </ownedComment>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Substitution-contract" name="contract" type="Classifier" association="A_contract_substitution" subsettedProperty="Dependency-supplier">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Substitution-contract-_ownedComment.0" annotatedElement="Substitution-contract">
          <body>The contract with which the substituting classifier complies.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Substitution-substitutingClassifier" name="substitutingClassifier" type="Classifier" association="A_substitution_substitutingClassifier" subsettedProperty="Dependency-client">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Substitution-substitutingClassifier-_ownedComment.0" annotatedElement="Substitution-substitutingClassifier">
          <body>Instances of the substituting classifier are runtime substitutable where instances of the contract classifier are expected.</body>
        </ownedComment>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="NamedElement" name="NamedElement" isAbstract="true" superClass="Element">
      <ownedComment xmi:type="cmof:Comment" xmi:id="NamedElement-_ownedComment.0" annotatedElement="NamedElement">
        <body>A named element is an element in a model that may have a name.</body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="NamedElement-has_no_qualified_name" name="has_no_qualified_name" constrainedElement="NamedElement">
        <ownedComment xmi:type="cmof:Comment" xmi:id="NamedElement-has_no_qualified_name-_ownedComment.0" annotatedElement="NamedElement-has_no_qualified_name">
          <body>If there is no name, or one of the containing namespaces has no name, there is no qualified name.</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="NamedElement-has_no_qualified_name-_specification">
          <language>OCL</language>
          <body>(self.name->isEmpty() or self.allNamespaces()->select(ns | ns.name->isEmpty())->notEmpty())&#xD;&#xA;  implies self.qualifiedName->isEmpty()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="NamedElement-has_qualified_name" name="has_qualified_name" constrainedElement="NamedElement">
        <ownedComment xmi:type="cmof:Comment" xmi:id="NamedElement-has_qualified_name-_ownedComment.0" annotatedElement="NamedElement-has_qualified_name">
          <body>When there is a name, and all of the containing namespaces have a name, the qualified name is constructed from the names of the containing namespaces.</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="NamedElement-has_qualified_name-_specification">
          <language>OCL</language>
          <body>(self.name->notEmpty() and self.allNamespaces()->select(ns | ns.name->isEmpty())->isEmpty()) implies&#xA;  self.qualifiedName = self.allNamespaces()->iterate( ns : Namespace; result: String = self.name | ns.name->union(self.separator())->union(result))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="NamedElement-visibility_needs_ownership" name="visibility_needs_ownership" constrainedElement="NamedElement">
        <ownedComment xmi:type="cmof:Comment" xmi:id="NamedElement-visibility_needs_ownership-_ownedComment.0" annotatedElement="NamedElement-visibility_needs_ownership">
          <body>If a NamedElement is not owned by a Namespace, it does not have a visibility.</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="NamedElement-visibility_needs_ownership-_specification">
          <language>OCL</language>
          <body>namespace->isEmpty() implies visibility->isEmpty()</body>
        </specification>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="NamedElement-name" name="name" lower="0" type="String">
        <ownedComment xmi:type="cmof:Comment" xmi:id="NamedElement-name-_ownedComment.0" annotatedElement="NamedElement-name">
          <body>The name of the NamedElement.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="NamedElement-visibility" name="visibility" lower="0" type="VisibilityKind">
        <ownedComment xmi:type="cmof:Comment" xmi:id="NamedElement-visibility-_ownedComment.0" annotatedElement="NamedElement-visibility">
          <body>Determines where the NamedElement appears within different Namespaces within the overall model, and its accessibility.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="NamedElement-qualifiedName" name="qualifiedName" lower="0" type="String" isReadOnly="true" isDerived="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="NamedElement-qualifiedName-_ownedComment.0" annotatedElement="NamedElement-qualifiedName">
          <body>A name which allows the NamedElement to be identified within a hierarchy of nested Namespaces. It is constructed from the names of the containing namespaces starting at the root of the hierarchy and ending with the name of the NamedElement itself.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="NamedElement-clientDependency" name="clientDependency" lower="0" upper="*" type="Dependency" association="A_clientDependency_client">
        <ownedComment xmi:type="cmof:Comment" xmi:id="NamedElement-clientDependency-_ownedComment.0" annotatedElement="NamedElement-clientDependency">
          <body>Indicates the dependencies that reference the client.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="NamedElement-namespace" name="namespace" lower="0" type="Namespace" isDerivedUnion="true" association="A_ownedMember_namespace" subsettedProperty="Element-owner" isReadOnly="true" isDerived="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="NamedElement-namespace-_ownedComment.0" annotatedElement="NamedElement-namespace">
          <body>Specifies the namespace that owns the NamedElement.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="NamedElement-qualifiedName.1" name="qualifiedName" isQuery="true" bodyCondition="NamedElement-qualifiedName.1-spec">
        <ownedComment xmi:type="cmof:Comment" xmi:id="NamedElement-qualifiedName.1-_ownedComment.0" annotatedElement="NamedElement-qualifiedName.1">
          <body>When there is a name, and all of the containing namespaces have a name, the qualified name is constructed from the names of the containing namespaces.</body>
        </ownedComment>
        <ownedRule xmi:type="cmof:Constraint" xmi:id="NamedElement-qualifiedName.1-spec" name="spec" constrainedElement="NamedElement-qualifiedName.1">
          <specification xmi:type="cmof:OpaqueExpression" xmi:id="NamedElement-qualifiedName.1-spec-_specification">
            <language>OCL</language>
            <body>result = if self.name->notEmpty() and self.allNamespaces()->select(ns | ns.name->isEmpty())->isEmpty()&#xA;then &#xA;    self.allNamespaces()->iterate( ns : Namespace; result: String = self.name | ns.name->union(self.separator())->union(result))&#xA;else&#xA;    Set{}&#xA;endif</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="NamedElement-qualifiedName.1-_member.1" type="String" direction="return"/>
      </ownedOperation>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="NamedElement-allNamespaces" name="allNamespaces" isQuery="true" bodyCondition="NamedElement-allNamespaces-spec">
        <ownedComment xmi:type="cmof:Comment" xmi:id="NamedElement-allNamespaces-_ownedComment.0" annotatedElement="NamedElement-allNamespaces">
          <body>The query allNamespaces() gives the sequence of namespaces in which the NamedElement is nested, working outwards.</body>
        </ownedComment>
        <ownedRule xmi:type="cmof:Constraint" xmi:id="NamedElement-allNamespaces-spec" name="spec" constrainedElement="NamedElement-allNamespaces">
          <specification xmi:type="cmof:OpaqueExpression" xmi:id="NamedElement-allNamespaces-spec-_specification">
            <language>OCL</language>
            <body>result = if self.namespace->isEmpty()&#xA;then Sequence{}&#xA;else self.namespace.allNamespaces()->prepend(self.namespace)&#xA;endif</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="NamedElement-allNamespaces-_member.1" isOrdered="true" lower="0" upper="*" type="Namespace" direction="return"/>
      </ownedOperation>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="NamedElement-isDistinguishableFrom" name="isDistinguishableFrom" isQuery="true" bodyCondition="NamedElement-isDistinguishableFrom-spec">
        <ownedComment xmi:type="cmof:Comment" xmi:id="NamedElement-isDistinguishableFrom-_ownedComment.0" annotatedElement="NamedElement-isDistinguishableFrom">
          <body>The query isDistinguishableFrom() determines whether two NamedElements may logically co-exist within a Namespace. By default, two named elements are distinguishable if (a) they have unrelated types or (b) they have related types but different names.</body>
        </ownedComment>
        <ownedRule xmi:type="cmof:Constraint" xmi:id="NamedElement-isDistinguishableFrom-spec" name="spec" constrainedElement="NamedElement-isDistinguishableFrom">
          <specification xmi:type="cmof:OpaqueExpression" xmi:id="NamedElement-isDistinguishableFrom-spec-_specification">
            <language>OCL</language>
            <body>result = if self.oclIsKindOf(n.oclType) or n.oclIsKindOf(self.oclType)&#xA;then ns.getNamesOfMember(self)->intersection(ns.getNamesOfMember(n))->isEmpty()&#xA;else true&#xA;endif</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="NamedElement-isDistinguishableFrom-_member.1" type="Boolean" direction="return"/>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="NamedElement-isDistinguishableFrom-n" name="n" type="NamedElement"/>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="NamedElement-isDistinguishableFrom-ns" name="ns" type="Namespace"/>
      </ownedOperation>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="NamedElement-separator" name="separator" isQuery="true" bodyCondition="NamedElement-separator-spec">
        <ownedComment xmi:type="cmof:Comment" xmi:id="NamedElement-separator-_ownedComment.0" annotatedElement="NamedElement-separator">
          <body>The query separator() gives the string that is used to separate names when constructing a qualified name.</body>
        </ownedComment>
        <ownedRule xmi:type="cmof:Constraint" xmi:id="NamedElement-separator-spec" name="spec" constrainedElement="NamedElement-separator">
          <specification xmi:type="cmof:OpaqueExpression" xmi:id="NamedElement-separator-spec-_specification">
            <language>OCL</language>
            <body>result = '::'</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="NamedElement-separator-_member.1" type="String" direction="return"/>
      </ownedOperation>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="PackageableElement" name="PackageableElement" isAbstract="true" superClass="NamedElement">
      <ownedComment xmi:type="cmof:Comment" xmi:id="PackageableElement-_ownedComment.0" annotatedElement="PackageableElement">
        <body>A packageable element indicates a named element that may be owned directly by a package.</body>
      </ownedComment>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="PackageableElement-visibility" name="visibility" type="VisibilityKind" redefinedProperty="NamedElement-visibility" default="public">
        <ownedComment xmi:type="cmof:Comment" xmi:id="PackageableElement-visibility-_ownedComment.0" annotatedElement="PackageableElement-visibility">
          <body>Indicates that packageable elements must always have a visibility, i.e., visibility is not optional.</body>
        </ownedComment>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="Namespace" name="Namespace" isAbstract="true" superClass="NamedElement">
      <ownedComment xmi:type="cmof:Comment" xmi:id="Namespace-_ownedComment.0" annotatedElement="Namespace">
        <body>A namespace is an element in a model that contains a set of named elements that can be identified by name.</body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="Namespace-members_distinguishable" name="members_distinguishable" constrainedElement="Namespace">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Namespace-members_distinguishable-_ownedComment.0" annotatedElement="Namespace-members_distinguishable">
          <body>All the members of a Namespace are distinguishable within it.</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="Namespace-members_distinguishable-_specification">
          <language>OCL</language>
          <body>membersAreDistinguishable()</body>
        </specification>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Namespace-elementImport" name="elementImport" lower="0" upper="*" type="ElementImport" association="A_elementImport_importingNamespace" subsettedProperty="Element-ownedElement" isComposite="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Namespace-elementImport-_ownedComment.0" annotatedElement="Namespace-elementImport">
          <body>References the ElementImports owned by the Namespace.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Namespace-packageImport" name="packageImport" lower="0" upper="*" type="PackageImport" association="A_packageImport_importingNamespace" subsettedProperty="Element-ownedElement" isComposite="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Namespace-packageImport-_ownedComment.0" annotatedElement="Namespace-packageImport">
          <body>References the PackageImports owned by the Namespace.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Namespace-ownedRule" name="ownedRule" lower="0" upper="*" type="Constraint" association="A_ownedRule_context" subsettedProperty="Namespace-ownedMember" isComposite="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Namespace-ownedRule-_ownedComment.0" annotatedElement="Namespace-ownedRule">
          <body>Specifies a set of Constraints owned by this Namespace.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Namespace-member" name="member" lower="0" upper="*" type="NamedElement" isDerivedUnion="true" association="A_member_namespace" isReadOnly="true" isDerived="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Namespace-member-_ownedComment.0" annotatedElement="Namespace-member">
          <body>A collection of NamedElements identifiable within the Namespace, either by being owned or by being introduced by importing or inheritance.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Namespace-importedMember" name="importedMember" lower="0" upper="*" type="PackageableElement" association="A_importedMember_namespace" subsettedProperty="Namespace-member" isReadOnly="true" isDerived="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Namespace-importedMember-_ownedComment.0" annotatedElement="Namespace-importedMember">
          <body>References the PackageableElements that are members of this Namespace as a result of either PackageImports or ElementImports.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Namespace-ownedMember" name="ownedMember" lower="0" upper="*" type="NamedElement" isDerivedUnion="true" association="A_ownedMember_namespace" subsettedProperty="Namespace-member Element-ownedElement" isReadOnly="true" isComposite="true" isDerived="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Namespace-ownedMember-_ownedComment.0" annotatedElement="Namespace-ownedMember">
          <body>A collection of NamedElements owned by the Namespace.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="Namespace-importedMember.1" name="importedMember" isQuery="true" bodyCondition="Namespace-importedMember.1-spec">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Namespace-importedMember.1-_ownedComment.0" annotatedElement="Namespace-importedMember.1">
          <body>The importedMember property is derived from the ElementImports and the PackageImports. References the PackageableElements that are members of this Namespace as a result of either PackageImports or ElementImports.</body>
        </ownedComment>
        <ownedRule xmi:type="cmof:Constraint" xmi:id="Namespace-importedMember.1-spec" name="spec" constrainedElement="Namespace-importedMember.1 Namespace-importedMember">
          <specification xmi:type="cmof:OpaqueExpression" xmi:id="Namespace-importedMember.1-spec-_specification">
            <language>OCL</language>
            <body>result = self.importMembers(self.elementImport.importedElement.asSet()-&#xA;>union(self.packageImport.importedPackage->collect(p | p.visibleMembers())))</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="Namespace-importedMember.1-_member.1" lower="0" upper="*" type="PackageableElement" direction="return"/>
      </ownedOperation>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="Namespace-getNamesOfMember" name="getNamesOfMember" isQuery="true" bodyCondition="Namespace-getNamesOfMember-spec">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Namespace-getNamesOfMember-_ownedComment.0" annotatedElement="Namespace-getNamesOfMember">
          <body>The query getNamesOfMember() takes importing into account. It gives back the set of names that an element would have in an importing namespace, either because it is owned, or if not owned then imported individually, or if not individually then from a package.</body>
        </ownedComment>
        <ownedComment xmi:type="cmof:Comment" xmi:id="Namespace-getNamesOfMember-_ownedComment.1" annotatedElement="Namespace-getNamesOfMember">
          <body>The query getNamesOfMember() gives a set of all of the names that a member would have in a Namespace. In general a member can have multiple names in a Namespace if it is imported more than once with different aliases. The query takes account of importing. It gives back the set of names that an element would have in an importing namespace, either because it is owned, or if not owned then imported individually, or if not individually then from a package.</body>
        </ownedComment>
        <ownedRule xmi:type="cmof:Constraint" xmi:id="Namespace-getNamesOfMember-spec" name="spec" constrainedElement="Namespace-getNamesOfMember">
          <specification xmi:type="cmof:OpaqueExpression" xmi:id="Namespace-getNamesOfMember-spec-_specification">
            <language>OCL</language>
            <body>result = if self.ownedMember ->includes(element)&#xA;then Set{}->include(element.name)&#xA;else let elementImports: ElementImport = self.elementImport->select(ei | ei.importedElement = element) in&#xA;  if elementImports->notEmpty()&#xA;  then elementImports->collect(el | el.getName())&#xA;  else self.packageImport->select(pi | pi.importedPackage.visibleMembers()->includes(element))-> collect(pi | pi.importedPackage.getNamesOfMember(element))&#xA;  endif&#xA;endif</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="Namespace-getNamesOfMember-_member.1" lower="0" upper="*" type="String" direction="return"/>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="Namespace-getNamesOfMember-element" name="element" type="NamedElement"/>
      </ownedOperation>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="Namespace-membersAreDistinguishable" name="membersAreDistinguishable" isQuery="true" bodyCondition="Namespace-membersAreDistinguishable-spec">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Namespace-membersAreDistinguishable-_ownedComment.0" annotatedElement="Namespace-membersAreDistinguishable">
          <body>The Boolean query membersAreDistinguishable() determines whether all of the namespace's members are distinguishable within it.</body>
        </ownedComment>
        <ownedRule xmi:type="cmof:Constraint" xmi:id="Namespace-membersAreDistinguishable-spec" name="spec" constrainedElement="Namespace-membersAreDistinguishable">
          <specification xmi:type="cmof:OpaqueExpression" xmi:id="Namespace-membersAreDistinguishable-spec-_specification">
            <language>OCL</language>
            <body>result = self.member->forAll( memb |&#xA;self.member->excluding(memb)->forAll(other |&#xA;memb.isDistinguishableFrom(other, self)))</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="Namespace-membersAreDistinguishable-_member.1" type="Boolean" direction="return"/>
      </ownedOperation>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="Namespace-importMembers" name="importMembers" isQuery="true" bodyCondition="Namespace-importMembers-spec">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Namespace-importMembers-_ownedComment.0" annotatedElement="Namespace-importMembers">
          <body>The query importMembers() defines which of a set of PackageableElements are actually imported into the namespace. This excludes hidden ones, i.e., those which have names that conflict with names of owned members, and also excludes elements which would have the same name when imported.</body>
        </ownedComment>
        <ownedRule xmi:type="cmof:Constraint" xmi:id="Namespace-importMembers-spec" name="spec" constrainedElement="Namespace-importMembers">
          <specification xmi:type="cmof:OpaqueExpression" xmi:id="Namespace-importMembers-spec-_specification">
            <language>OCL</language>
            <body>result = self.excludeCollisions(imps)->select(imp | self.ownedMember->forAll(mem |&#xA;mem.imp.isDistinguishableFrom(mem, self)))</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="Namespace-importMembers-_member.1" lower="0" upper="*" type="PackageableElement" direction="return"/>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="Namespace-importMembers-imps" lower="0" upper="*" name="imps" type="PackageableElement"/>
      </ownedOperation>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="Namespace-excludeCollisions" name="excludeCollisions" isQuery="true" bodyCondition="Namespace-excludeCollisions-spec">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Namespace-excludeCollisions-_ownedComment.0" annotatedElement="Namespace-excludeCollisions">
          <body>The query excludeCollisions() excludes from a set of PackageableElements any that would not be distinguishable from each other in this namespace.</body>
        </ownedComment>
        <ownedRule xmi:type="cmof:Constraint" xmi:id="Namespace-excludeCollisions-spec" name="spec" constrainedElement="Namespace-excludeCollisions">
          <specification xmi:type="cmof:OpaqueExpression" xmi:id="Namespace-excludeCollisions-spec-_specification">
            <language>OCL</language>
            <body>result = imps->reject(imp1 | imps.exists(imp2 | not imp1.isDistinguishableFrom(imp2, self)))</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="Namespace-excludeCollisions-_member.1" lower="0" upper="*" type="PackageableElement" direction="return"/>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="Namespace-excludeCollisions-imps" lower="0" upper="*" name="imps" type="PackageableElement"/>
      </ownedOperation>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_mapping_abstraction" name="A_mapping_abstraction" memberEnd="Abstraction-mapping A_mapping_abstraction-abstraction">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_mapping_abstraction-abstraction" name="abstraction" lower="0" type="Abstraction" association="A_mapping_abstraction"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_contract_substitution" name="A_contract_substitution" memberEnd="Substitution-contract A_contract_substitution-substitution">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_contract_substitution-substitution" name="substitution" lower="0" upper="*" type="Substitution" association="A_contract_substitution"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_substitution_substitutingClassifier" name="A_substitution_substitutingClassifier" memberEnd="Classifier-substitution Substitution-substitutingClassifier"/>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_supplierDependency_supplier" name="A_supplierDependency_supplier" memberEnd="A_supplierDependency_supplier-supplierDependency Dependency-supplier">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_supplierDependency_supplier-supplierDependency" name="supplierDependency" lower="0" upper="*" type="Dependency" association="A_supplierDependency_supplier">
        <ownedComment xmi:type="cmof:Comment" xmi:id="A_supplierDependency_supplier-supplierDependency-_ownedComment.0" annotatedElement="A_supplierDependency_supplier-supplierDependency">
          <body>Indicates the dependencies that reference the supplier.</body>
        </ownedComment>
      </ownedEnd>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_clientDependency_client" name="A_clientDependency_client" memberEnd="NamedElement-clientDependency Dependency-client"/>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_ownedMember_namespace" name="A_ownedMember_namespace" memberEnd="Namespace-ownedMember NamedElement-namespace"/>
    <ownedMember xmi:type="cmof:Class" xmi:id="InterfaceRealization" name="InterfaceRealization" superClass="Realization">
      <ownedComment xmi:type="cmof:Comment" xmi:id="InterfaceRealization-_ownedComment.0" annotatedElement="InterfaceRealization">
        <body>An interface realization is a specialized realization relationship between a classifier and an interface. This relationship signifies that the realizing classifier conforms to the contract specified by the interface.</body>
      </ownedComment>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="InterfaceRealization-contract" name="contract" type="Interface" association="A_contract_interfaceRealization" subsettedProperty="Dependency-supplier">
        <ownedComment xmi:type="cmof:Comment" xmi:id="InterfaceRealization-contract-_ownedComment.0" annotatedElement="InterfaceRealization-contract">
          <body>References the Interface specifying the conformance contract.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="InterfaceRealization-implementingClassifier" name="implementingClassifier" type="BehavioredClassifier" association="A_interfaceRealization_implementingClassifier" subsettedProperty="Dependency-client">
        <ownedComment xmi:type="cmof:Comment" xmi:id="InterfaceRealization-implementingClassifier-_ownedComment.0" annotatedElement="InterfaceRealization-implementingClassifier">
          <body>References the BehavioredClassifier that owns this Interfacerealization (i.e., the classifier that realizes the Interface to which it points).</body>
        </ownedComment>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_interface_ownedAttribute" name="A_interface_ownedAttribute" memberEnd="A_interface_ownedAttribute-interface Interface-ownedAttribute">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_interface_ownedAttribute-interface" name="interface" lower="0" type="Interface" association="A_interface_ownedAttribute" subsettedProperty="A_attribute_classifier-classifier NamedElement-namespace Feature-featuringClassifier"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_interface_ownedOperation" name="A_interface_ownedOperation" memberEnd="Operation-interface Interface-ownedOperation"/>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_contract_interfaceRealization" name="A_contract_interfaceRealization" memberEnd="InterfaceRealization-contract A_contract_interfaceRealization-interfaceRealization">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_contract_interfaceRealization-interfaceRealization" name="interfaceRealization" lower="0" upper="*" type="InterfaceRealization" association="A_contract_interfaceRealization"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_interfaceRealization_implementingClassifier" name="A_interfaceRealization_implementingClassifier" memberEnd="BehavioredClassifier-interfaceRealization InterfaceRealization-implementingClassifier"/>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_nestedClassifier_interface" name="A_nestedClassifier_interface" memberEnd="Interface-nestedClassifier A_nestedClassifier_interface-interface">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_nestedClassifier_interface-interface" name="interface" lower="0" type="Interface" association="A_nestedClassifier_interface" subsettedProperty="NamedElement-namespace RedefinableElement-redefinitionContext"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_interface_redefinedInterface" name="A_interface_redefinedInterface" memberEnd="A_interface_redefinedInterface-interface Interface-redefinedInterface">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_interface_redefinedInterface-interface" name="interface" lower="0" upper="*" type="Interface" association="A_interface_redefinedInterface"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="ConnectorEnd" name="ConnectorEnd" superClass="MultiplicityElement">
      <ownedComment xmi:type="cmof:Comment" xmi:id="ConnectorEnd-_ownedComment.0" annotatedElement="ConnectorEnd">
        <body>A connector end is an endpoint of a connector, which attaches the connector to a connectable element. Each connector end is part of one connector.</body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="ConnectorEnd-multiplicity" name="multiplicity" constrainedElement="ConnectorEnd">
        <ownedComment xmi:type="cmof:Comment" xmi:id="ConnectorEnd-multiplicity-_ownedComment.0" annotatedElement="ConnectorEnd-multiplicity">
          <body>The multiplicity of the connector end may not be more general than the multiplicity of the association typing the owning connector.</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="ConnectorEnd-multiplicity-_specification">
          <language>OCL</language>
          <body>true</body>
        </specification>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="ConnectorEnd-definingEnd" name="definingEnd" lower="0" type="Property" association="A_definingEnd_connectorEnd" isReadOnly="true" isDerived="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="ConnectorEnd-definingEnd-_ownedComment.0" annotatedElement="ConnectorEnd-definingEnd">
          <body>A derived association referencing the corresponding association end on the association which types the connector owing this connector end. This association is derived by selecting the association end at the same place in the ordering of association ends as this connector end.&#xD;
</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="ConnectorEnd-role" name="role" type="ConnectableElement" association="A_end_role">
        <ownedComment xmi:type="cmof:Comment" xmi:id="ConnectorEnd-role-_ownedComment.0" annotatedElement="ConnectorEnd-role">
          <body>The connectable element attached at this connector end. When an instance of the containing classifier is created, a link may (depending on the multiplicities) be created to an instance of the classifier that types this connectable element.&#xD;
</body>
        </ownedComment>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="Connector" name="Connector" superClass="Feature">
      <ownedComment xmi:type="cmof:Comment" xmi:id="Connector-_ownedComment.0" annotatedElement="Connector">
        <body>Specifies a link that enables communication between two or more instances. This link may be an instance of an association, or it may represent the possibility of the instances being able to communicate because their identities are known by virtue of being passed in as parameters, held in variables or slots, or because the communicating instances are the same instance. The link may be realized by something as simple as a pointer or by something as complex as a network connection. In contrast to associations, which specify links between any instance of the associated classifiers, connectors specify links between instances playing the connected parts only.</body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="Connector-types" name="types" constrainedElement="Connector">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Connector-types-_ownedComment.0" annotatedElement="Connector-types">
          <body>The types of the connectable elements that the ends of a connector are attached to must conform to the types of the association ends of the association that types the connector, if any.</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="Connector-types-_specification">
          <language>OCL</language>
          <body>true</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="Connector-compatible" name="compatible" constrainedElement="Connector">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Connector-compatible-_ownedComment.0" annotatedElement="Connector-compatible">
          <body>The connectable elements attached to the ends of a connector must be compatible.</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="Connector-compatible-_specification">
          <language>OCL</language>
          <body>true</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="Connector-roles" name="roles" constrainedElement="Connector">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Connector-roles-_ownedComment.0" annotatedElement="Connector-roles">
          <body>The ConnectableElements attached as roles to each ConnectorEnd owned by a Connector must be roles of the Classifier that owned the Connector, or they must be ports of such roles.</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="Connector-roles-_specification">
          <language>OCL</language>
          <body>true</body>
        </specification>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Connector-type" name="type" lower="0" type="Association" association="A_type_connector">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Connector-type-_ownedComment.0" annotatedElement="Connector-type">
          <body>An optional association that specifies the link corresponding to this connector.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Connector-redefinedConnector" name="redefinedConnector" lower="0" upper="*" type="Connector" association="A_redefinedConnector_connector" subsettedProperty="RedefinableElement-redefinedElement">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Connector-redefinedConnector-_ownedComment.0" annotatedElement="Connector-redefinedConnector">
          <body>A connector may be redefined when its containing classifier is specialized. The redefining connector may have a type that specializes the type of the redefined connector. The types of the connector ends of the redefining connector may specialize the types of the connector ends of the redefined connector. The properties of the connector ends of the redefining connector may be replaced.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Connector-end" name="end" isOrdered="true" lower="2" upper="*" type="ConnectorEnd" association="A_end_connector" subsettedProperty="Element-ownedElement" isComposite="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Connector-end-_ownedComment.0" annotatedElement="Connector-end">
          <body>A connector consists of at least two connector ends, each representing the participation of instances of the classifiers typing the connectable elements attached to this end. The set of connector ends is ordered.</body>
        </ownedComment>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="Property" name="Property" superClass="ConnectableElement StructuralFeature">
      <ownedComment xmi:type="cmof:Comment" xmi:id="Property-_ownedComment.0" annotatedElement="Property">
        <body>A property is a structural feature of a classifier that characterizes instances of the classifier. A property related by ownedAttribute to a classifier (other than an association) represents an attribute and might also represent an association end. It relates an instance of the class to a value or set of values of the type of the attribute. A property related by memberEnd or its specializations to an association represents an end of the association. The type of the property is the type of the end of the association.</body>
      </ownedComment>
      <ownedComment xmi:type="cmof:Comment" xmi:id="Property-_ownedComment.1" annotatedElement="Property">
        <body>A property represents a set of instances that are owned by a containing classifier instance.</body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="Property-multiplicity_of_composite" name="multiplicity_of_composite" constrainedElement="Property">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Property-multiplicity_of_composite-_ownedComment.0" annotatedElement="Property-multiplicity_of_composite">
          <body>A multiplicity of a composite aggregation must not have an upper bound greater than 1.</body>
        </ownedComment>
        <ownedComment xmi:type="cmof:Comment" xmi:id="Property-multiplicity_of_composite-_ownedComment.1" annotatedElement="Property-multiplicity_of_composite">
          <body>A multiplicity on an aggregate end of a composite aggregation must not have an upper bound greater than 1.</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="Property-multiplicity_of_composite-_specification">
          <language>OCL</language>
          <body>isComposite implies (upperBound()->isEmpty() or upperBound() &lt;= 1)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="Property-subsetting_context_conforms" name="subsetting_context_conforms" constrainedElement="Property">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Property-subsetting_context_conforms-_ownedComment.0" annotatedElement="Property-subsetting_context_conforms">
          <body>Subsetting may only occur when the context of the subsetting property conforms to the context of the subsetted property.</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="Property-subsetting_context_conforms-_specification">
          <language>OCL</language>
          <body>self.subsettedProperty->notEmpty() implies&#xA;  (self.subsettingContext()->notEmpty() and self.subsettingContext()->forAll (sc |&#xA;    self.subsettedProperty->forAll(sp |&#xA;      sp.subsettingContext()->exists(c | sc.conformsTo(c)))))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="Property-redefined_property_inherited" name="redefined_property_inherited" constrainedElement="Property">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Property-redefined_property_inherited-_ownedComment.0" annotatedElement="Property-redefined_property_inherited">
          <body>A redefined property must be inherited from a more general classifier containing the redefining property.</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="Property-redefined_property_inherited-_specification">
          <language>OCL</language>
          <body>if (redefinedProperty->notEmpty()) then&#xD;&#xA;  (redefinitionContext->notEmpty() and&#xD;&#xA;      redefinedProperty->forAll(rp|&#xD;&#xA;        ((redefinitionContext->collect(fc|&#xD;&#xA;          fc.allParents()))->asSet())->collect(c| c.allFeatures())->asSet()->includes(rp))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="Property-subsetting_rules" name="subsetting_rules" constrainedElement="Property">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Property-subsetting_rules-_ownedComment.0" annotatedElement="Property-subsetting_rules">
          <body>A subsetting property may strengthen the type of the subsetted property, and its upper bound may be less.</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="Property-subsetting_rules-_specification">
          <language>OCL</language>
          <body>self.subsettedProperty->forAll(sp |&#xA;  self.type.conformsTo(sp.type) and&#xA;    ((self.upperBound()->notEmpty() and sp.upperBound()->notEmpty()) implies&#xA;      self.upperBound()&lt;=sp.upperBound() ))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="Property-navigable_readonly" name="navigable_readonly" constrainedElement="Property">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Property-navigable_readonly-_ownedComment.0" annotatedElement="Property-navigable_readonly">
          <body>Only a navigable property can be marked as readOnly.</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="Property-navigable_readonly-_specification">
          <language>OCL</language>
          <body>isReadOnly implies isNavigable()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="Property-derived_union_is_derived" name="derived_union_is_derived" constrainedElement="Property">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Property-derived_union_is_derived-_ownedComment.0" annotatedElement="Property-derived_union_is_derived">
          <body>A derived union is derived.</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="Property-derived_union_is_derived-_specification">
          <language>OCL</language>
          <body>isDerivedUnion implies isDerived</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="Property-derived_union_is_read_only" name="derived_union_is_read_only" constrainedElement="Property">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Property-derived_union_is_read_only-_ownedComment.0" annotatedElement="Property-derived_union_is_read_only">
          <body>A derived union is read only.</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="Property-derived_union_is_read_only-_specification">
          <language>OCL</language>
          <body>isDerivedUnion implies isReadOnly</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="Property-subsetted_property_names" name="subsetted_property_names" constrainedElement="Property">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Property-subsetted_property_names-_ownedComment.0" annotatedElement="Property-subsetted_property_names">
          <body>A property may not subset a property with the same name.</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="Property-subsetted_property_names-_specification">
          <language>OCL</language>
          <body>true</body>
        </specification>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Property-isDerived" name="isDerived" type="Boolean" default="false">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Property-isDerived-_ownedComment.0" annotatedElement="Property-isDerived">
          <body>If isDerived is true, the value of the attribute is derived from information elsewhere.</body>
        </ownedComment>
        <ownedComment xmi:type="cmof:Comment" xmi:id="Property-isDerived-_ownedComment.1" annotatedElement="Property-isDerived">
          <body>Specifies whether the Property is derived, i.e., whether its value or values can be computed from other information.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Property-isReadOnly" name="isReadOnly" type="Boolean" redefinedProperty="StructuralFeature-isReadOnly" default="false">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Property-isReadOnly-_ownedComment.0" annotatedElement="Property-isReadOnly">
          <body>If isReadOnly is true, the attribute may not be written to after initialization.</body>
        </ownedComment>
        <ownedComment xmi:type="cmof:Comment" xmi:id="Property-isReadOnly-_ownedComment.1" annotatedElement="Property-isReadOnly">
          <body>If true, the attribute may only be read, and not written.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Property-isDerivedUnion" name="isDerivedUnion" type="Boolean" default="false">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Property-isDerivedUnion-_ownedComment.0" annotatedElement="Property-isDerivedUnion">
          <body>Specifies whether the property is derived as the union of all of the properties that are constrained to subset it.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Property-default" name="default" lower="0" type="String" isDerived="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Property-default-_ownedComment.0" annotatedElement="Property-default">
          <body>Specifies a String that represents a value to be used when no argument is supplied for the Property.</body>
        </ownedComment>
        <ownedComment xmi:type="cmof:Comment" xmi:id="Property-default-_ownedComment.1" annotatedElement="Property-default">
          <body>A String that is evaluated to give a default value for the Property when an object of the owning Classifier is instantiated.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Property-aggregation" name="aggregation" type="AggregationKind" default="none">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Property-aggregation-_ownedComment.0" annotatedElement="Property-aggregation">
          <body>Specifies the kind of aggregation that applies to the Property.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Property-isComposite" name="isComposite" type="Boolean" default="false" isDerived="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Property-isComposite-_ownedComment.0" annotatedElement="Property-isComposite">
          <body>If isComposite is true, the object containing the attribute is a container for the object or value contained in the attribute.</body>
        </ownedComment>
        <ownedComment xmi:type="cmof:Comment" xmi:id="Property-isComposite-_ownedComment.1" annotatedElement="Property-isComposite">
          <body>This is a derived value, indicating whether the aggregation of the Property is composite or not.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Property-class" name="class" lower="0" type="Class" association="A_ownedAttribute_class" subsettedProperty="NamedElement-namespace Feature-featuringClassifier A_attribute_classifier-classifier">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Property-class-_ownedComment.0" annotatedElement="Property-class">
          <body>References the Class that owns the Property.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Property-redefinedProperty" name="redefinedProperty" lower="0" upper="*" type="Property" association="A_redefinedProperty_property" subsettedProperty="RedefinableElement-redefinedElement">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Property-redefinedProperty-_ownedComment.0" annotatedElement="Property-redefinedProperty">
          <body>References the properties that are redefined by this property.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Property-owningAssociation" name="owningAssociation" lower="0" type="Association" association="A_ownedEnd_owningAssociation" subsettedProperty="Property-association NamedElement-namespace Feature-featuringClassifier">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Property-owningAssociation-_ownedComment.0" annotatedElement="Property-owningAssociation">
          <body>References the owning association of this property, if any.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Property-datatype" name="datatype" lower="0" type="DataType" association="A_ownedAttribute_datatype" subsettedProperty="NamedElement-namespace Feature-featuringClassifier A_attribute_classifier-classifier">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Property-datatype-_ownedComment.0" annotatedElement="Property-datatype">
          <body>The DataType that owns this Property.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Property-defaultValue" name="defaultValue" lower="0" type="ValueSpecification" association="A_defaultValue_owningProperty" subsettedProperty="Element-ownedElement" isComposite="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Property-defaultValue-_ownedComment.0" annotatedElement="Property-defaultValue">
          <body>A ValueSpecification that is evaluated to give a default value for the Property when an object of the owning Classifier is instantiated.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Property-opposite" name="opposite" lower="0" type="Property" association="A_opposite_property" isDerived="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Property-opposite-_ownedComment.0" annotatedElement="Property-opposite">
          <body>In the case where the property is one navigable end of a binary association with both ends navigable, this gives the other end.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Property-subsettedProperty" name="subsettedProperty" lower="0" upper="*" type="Property" association="A_subsettedProperty_property">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Property-subsettedProperty-_ownedComment.0" annotatedElement="Property-subsettedProperty">
          <body>References the properties of which this property is constrained to be a subset.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Property-association" name="association" lower="0" type="Association" association="A_memberEnd_association">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Property-association-_ownedComment.0" annotatedElement="Property-association">
          <body>References the association of which this property is a member, if any.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="Property-isAttribute" name="isAttribute" isQuery="true" bodyCondition="Property-isAttribute-spec">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Property-isAttribute-_ownedComment.0" annotatedElement="Property-isAttribute">
          <body>The query isAttribute() is true if the Property is defined as an attribute of some classifier.</body>
        </ownedComment>
        <ownedRule xmi:type="cmof:Constraint" xmi:id="Property-isAttribute-spec" name="spec" constrainedElement="Property-isAttribute">
          <specification xmi:type="cmof:OpaqueExpression" xmi:id="Property-isAttribute-spec-_specification">
            <language>OCL</language>
            <body>result = Classifier.allInstances->exists(c | c.attribute->includes(p))</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="Property-isAttribute-_member.1" type="Boolean" direction="return"/>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="Property-isAttribute-p" name="p" type="Property"/>
      </ownedOperation>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="Property-opposite.1" name="opposite" isQuery="true" bodyCondition="Property-opposite.1-spec">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Property-opposite.1-_ownedComment.0" annotatedElement="Property-opposite.1">
          <body>If this property is owned by a class, associated with a binary association, and the other end of the association is also owned by a class, then opposite gives the other end.</body>
        </ownedComment>
        <ownedRule xmi:type="cmof:Constraint" xmi:id="Property-opposite.1-spec" name="spec" constrainedElement="Property-opposite.1 Property-opposite">
          <specification xmi:type="cmof:OpaqueExpression" xmi:id="Property-opposite.1-spec-_specification">
            <language>OCL</language>
            <body>result = if owningAssociation->isEmpty() and association.memberEnd->size() = 2&#xA;  then&#xA;    let otherEnd = (association.memberEnd - self)->any() in&#xA;      if otherEnd.owningAssociation->isEmpty() then otherEnd else Set{} endif&#xA;    else Set {}&#xA;    endif</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="Property-opposite.1-_member.1" type="Property" direction="return"/>
      </ownedOperation>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="Property-isComposite.1" name="isComposite" isQuery="true" bodyCondition="Property-isComposite.1-spec">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Property-isComposite.1-_ownedComment.0" annotatedElement="Property-isComposite.1">
          <body>The value of isComposite is true only if aggregation is composite.</body>
        </ownedComment>
        <ownedRule xmi:type="cmof:Constraint" xmi:id="Property-isComposite.1-spec" name="spec" constrainedElement="Property-isComposite.1 Property-isComposite">
          <specification xmi:type="cmof:OpaqueExpression" xmi:id="Property-isComposite.1-spec-_specification">
            <language>OCL</language>
            <body>result = (self.aggregation = #composite)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="Property-isComposite.1-_member.1" type="Boolean" direction="return"/>
      </ownedOperation>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="Property-isConsistentWith" name="isConsistentWith" isQuery="true" redefinedOperation="RedefinableElement-isConsistentWith" precondition="Property-isConsistentWith-_ownedRule.0" bodyCondition="Property-isConsistentWith-spec">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Property-isConsistentWith-_ownedComment.0" annotatedElement="Property-isConsistentWith">
          <body>The query isConsistentWith() specifies, for any two Properties in a context in which redefinition is possible, whether redefinition would be logically consistent. A redefining property is consistent with a redefined property if the type of the redefining property conforms to the type of the redefined property, the multiplicity of the redefining property (if specified) is contained in the multiplicity of the redefined property, and the redefining property is derived if the redefined property is derived.</body>
        </ownedComment>
        <ownedRule xmi:type="cmof:Constraint" xmi:id="Property-isConsistentWith-_ownedRule.0" constrainedElement="Property-isConsistentWith">
          <specification xmi:type="cmof:OpaqueExpression" xmi:id="Property-isConsistentWith-_ownedRule.0-_specification">
            <language>OCL</language>
            <body>redefinee.isRedefinitionContextValid(self)</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="cmof:Constraint" xmi:id="Property-isConsistentWith-spec" name="spec" constrainedElement="Property-isConsistentWith">
          <specification xmi:type="cmof:OpaqueExpression" xmi:id="Property-isConsistentWith-spec-_specification">
            <language>OCL</language>
            <body>result = redefinee.oclIsKindOf(Property) and &#xA;  let prop : Property = redefinee.oclAsType(Property) in &#xA;  (prop.type.conformsTo(self.type) and &#xA;  ((prop.lowerBound()->notEmpty() and self.lowerBound()->notEmpty()) implies prop.lowerBound() >= self.lowerBound()) and &#xA;  ((prop.upperBound()->notEmpty() and self.upperBound()->notEmpty()) implies prop.lowerBound() &lt;= self.lowerBound()) and &#xA;  (self.isDerived implies prop.isDerived) and&#xA;  (self.isComposite implies prop.isComposite))</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="Property-isConsistentWith-_member.2" type="Boolean" direction="return"/>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="Property-isConsistentWith-redefinee" name="redefinee" type="RedefinableElement"/>
      </ownedOperation>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="Property-subsettingContext" name="subsettingContext" isQuery="true" bodyCondition="Property-subsettingContext-spec">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Property-subsettingContext-_ownedComment.0" annotatedElement="Property-subsettingContext">
          <body>The query subsettingContext() gives the context for subsetting a property. It consists, in the case of an attribute, of the corresponding classifier, and in the case of an association end, all of the classifiers at the other ends.</body>
        </ownedComment>
        <ownedRule xmi:type="cmof:Constraint" xmi:id="Property-subsettingContext-spec" name="spec" constrainedElement="Property-subsettingContext">
          <specification xmi:type="cmof:OpaqueExpression" xmi:id="Property-subsettingContext-spec-_specification">
            <language>OCL</language>
            <body>result = if association->notEmpty()&#xA;then association.endType-type&#xA;else if classifier->notEmpty() then Set{classifier} else Set{} endif&#xA;endif</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="Property-subsettingContext-_member.1" lower="0" upper="*" type="Type" direction="return"/>
      </ownedOperation>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="Property-isNavigable" name="isNavigable" isQuery="true" bodyCondition="Property-isNavigable-spec">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Property-isNavigable-_ownedComment.0" annotatedElement="Property-isNavigable">
          <body>The query isNavigable() indicates whether it is possible to navigate across the property.</body>
        </ownedComment>
        <ownedRule xmi:type="cmof:Constraint" xmi:id="Property-isNavigable-spec" name="spec" constrainedElement="Property-isNavigable">
          <specification xmi:type="cmof:OpaqueExpression" xmi:id="Property-isNavigable-spec-_specification">
            <language>OCL</language>
            <body>result = not classifier->isEmpty() or association.owningAssociation.navigableOwnedEnd->includes(self)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="Property-isNavigable-_member.1" type="Boolean" direction="return"/>
      </ownedOperation>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="StructuredClassifier" name="StructuredClassifier" isAbstract="true" superClass="Classifier">
      <ownedComment xmi:type="cmof:Comment" xmi:id="StructuredClassifier-_ownedComment.0" annotatedElement="StructuredClassifier">
        <body>A structured classifier is an abstract metaclass that represents any classifier whose behavior can be fully or partly described by the collaboration of owned or referenced instances.</body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="StructuredClassifier-multiplicities" name="multiplicities" constrainedElement="StructuredClassifier">
        <ownedComment xmi:type="cmof:Comment" xmi:id="StructuredClassifier-multiplicities-_ownedComment.0" annotatedElement="StructuredClassifier-multiplicities">
          <body>The multiplicities on connected elements must be consistent.</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="StructuredClassifier-multiplicities-_specification">
          <language>OCL</language>
          <body>true</body>
        </specification>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="StructuredClassifier-ownedAttribute" name="ownedAttribute" isOrdered="true" lower="0" upper="*" type="Property" association="A_ownedAttribute_structuredClassifier" subsettedProperty="StructuredClassifier-role Namespace-ownedMember Classifier-attribute" isComposite="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="StructuredClassifier-ownedAttribute-_ownedComment.0" annotatedElement="StructuredClassifier-ownedAttribute">
          <body>References the properties owned by the classifier.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="StructuredClassifier-part" name="part" lower="0" upper="*" type="Property" association="A_part_structuredClassifier" isReadOnly="true" isDerived="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="StructuredClassifier-part-_ownedComment.0" annotatedElement="StructuredClassifier-part">
          <body>References the properties specifying instances that the classifier owns by composition. This association is derived, selecting those owned properties where isComposite is true.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="StructuredClassifier-role" name="role" lower="0" upper="*" type="ConnectableElement" isDerivedUnion="true" association="A_role_structuredClassifier" subsettedProperty="Namespace-member" isReadOnly="true" isDerived="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="StructuredClassifier-role-_ownedComment.0" annotatedElement="StructuredClassifier-role">
          <body>References the roles that instances may play in this classifier.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="StructuredClassifier-ownedConnector" name="ownedConnector" lower="0" upper="*" type="Connector" association="A_ownedConnector_structuredClassifier" subsettedProperty="Classifier-feature Namespace-ownedMember" isComposite="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="StructuredClassifier-ownedConnector-_ownedComment.0" annotatedElement="StructuredClassifier-ownedConnector">
          <body>References the connectors owned by the classifier.</body>
        </ownedComment>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="ConnectableElement" name="ConnectableElement" isAbstract="true" superClass="TypedElement">
      <ownedComment xmi:type="cmof:Comment" xmi:id="ConnectableElement-_ownedComment.0" annotatedElement="ConnectableElement">
        <body>ConnectableElement is an abstract metaclass representing a set of instances that play roles of a classifier. Connectable elements may be joined by attached connectors and specify configurations of linked instances to be created within an instance of the containing classifier.</body>
      </ownedComment>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="ConnectableElement-end" name="end" isOrdered="true" lower="0" upper="*" type="ConnectorEnd" association="A_end_role">
        <ownedComment xmi:type="cmof:Comment" xmi:id="ConnectableElement-end-_ownedComment.0" annotatedElement="ConnectableElement-end">
          <body>Denotes a connector that attaches to this connectable element.</body>
        </ownedComment>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_type_connector" name="A_type_connector" memberEnd="Connector-type A_type_connector-connector">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_type_connector-connector" name="connector" lower="0" upper="*" type="Connector" association="A_type_connector"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_ownedAttribute_structuredClassifier" name="A_ownedAttribute_structuredClassifier" memberEnd="StructuredClassifier-ownedAttribute A_ownedAttribute_structuredClassifier-structuredClassifier">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_ownedAttribute_structuredClassifier-structuredClassifier" name="structuredClassifier" lower="0" type="StructuredClassifier" association="A_ownedAttribute_structuredClassifier"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_part_structuredClassifier" name="A_part_structuredClassifier" memberEnd="StructuredClassifier-part A_part_structuredClassifier-structuredClassifier">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_part_structuredClassifier-structuredClassifier" name="structuredClassifier" lower="0" type="StructuredClassifier" association="A_part_structuredClassifier"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_role_structuredClassifier" name="A_role_structuredClassifier" memberEnd="StructuredClassifier-role A_role_structuredClassifier-structuredClassifier">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_role_structuredClassifier-structuredClassifier" name="structuredClassifier" lower="0" upper="*" type="StructuredClassifier" association="A_role_structuredClassifier"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_ownedConnector_structuredClassifier" name="A_ownedConnector_structuredClassifier" memberEnd="StructuredClassifier-ownedConnector A_ownedConnector_structuredClassifier-structuredClassifier">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_ownedConnector_structuredClassifier-structuredClassifier" name="structuredClassifier" lower="0" type="StructuredClassifier" association="A_ownedConnector_structuredClassifier" subsettedProperty="RedefinableElement-redefinitionContext"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_redefinedConnector_connector" name="A_redefinedConnector_connector" memberEnd="Connector-redefinedConnector A_redefinedConnector_connector-connector">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_redefinedConnector_connector-connector" name="connector" lower="0" upper="*" type="Connector" association="A_redefinedConnector_connector"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_end_connector" name="A_end_connector" memberEnd="Connector-end A_end_connector-connector">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_end_connector-connector" name="connector" type="Connector" association="A_end_connector"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_definingEnd_connectorEnd" name="A_definingEnd_connectorEnd" memberEnd="ConnectorEnd-definingEnd A_definingEnd_connectorEnd-connectorEnd">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_definingEnd_connectorEnd-connectorEnd" name="connectorEnd" lower="0" upper="*" type="ConnectorEnd" association="A_definingEnd_connectorEnd"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_end_role" name="A_end_role" memberEnd="ConnectableElement-end ConnectorEnd-role"/>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_attribute_classifier" name="A_attribute_classifier" memberEnd="Classifier-attribute A_attribute_classifier-classifier">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_attribute_classifier-classifier" name="classifier" lower="0" type="Classifier" association="A_attribute_classifier" subsettedProperty="RedefinableElement-redefinitionContext"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="Interaction" name="Interaction" superClass="InteractionFragment Behavior">
      <ownedComment xmi:type="cmof:Comment" xmi:id="Interaction-_ownedComment.0" annotatedElement="Interaction">
        <body>An interaction is a unit of behavior that focuses on the observable exchange of information between connectable elements.</body>
      </ownedComment>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Interaction-lifeline" name="lifeline" lower="0" upper="*" type="Lifeline" association="A_lifeline_interaction" subsettedProperty="Namespace-ownedMember" isComposite="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Interaction-lifeline-_ownedComment.0" annotatedElement="Interaction-lifeline">
          <body>Specifies the participants in this Interaction.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Interaction-message" name="message" lower="0" upper="*" type="Message" association="A_message_interaction" subsettedProperty="Namespace-ownedMember" isComposite="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Interaction-message-_ownedComment.0" annotatedElement="Interaction-message">
          <body>The Messages contained in this Interaction.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Interaction-fragment" name="fragment" isOrdered="true" lower="0" upper="*" type="InteractionFragment" association="A_enclosingInteraction_fragment" subsettedProperty="Namespace-ownedMember" isComposite="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Interaction-fragment-_ownedComment.0" annotatedElement="Interaction-fragment">
          <body>The ordered set of fragments in the Interaction.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Interaction-action" name="action" lower="0" upper="*" type="Action" association="A_action_interaction" subsettedProperty="Element-ownedElement" isComposite="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Interaction-action-_ownedComment.0" annotatedElement="Interaction-action">
          <body>Actions owned by the Interaction.</body>
        </ownedComment>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="Lifeline" name="Lifeline" superClass="NamedElement">
      <ownedComment xmi:type="cmof:Comment" xmi:id="Lifeline-_ownedComment.0" annotatedElement="Lifeline">
        <body>A lifeline represents an individual participant in the interaction. While parts and structural features may have multiplicity greater than 1, lifelines represent only one interacting entity.</body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="Lifeline-interaction_uses_share_lifeline" name="interaction_uses_share_lifeline" constrainedElement="Lifeline">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Lifeline-interaction_uses_share_lifeline-_ownedComment.0" annotatedElement="Lifeline-interaction_uses_share_lifeline">
          <body>If two (or more) InteractionUses within one Interaction, refer to Interactions with 'common Lifelines,' those Lifelines must also appear in the Interaction with the InteractionUses. By common Lifelines we mean Lifelines with the same selector and represents associations.</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="Lifeline-interaction_uses_share_lifeline-_specification">
          <language>OCL</language>
          <body>true</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="Lifeline-selector_specified" name="selector_specified" constrainedElement="Lifeline">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Lifeline-selector_specified-_ownedComment.0" annotatedElement="Lifeline-selector_specified">
          <body>The selector for a Lifeline must only be specified if the referenced Part is multivalued.</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="Lifeline-selector_specified-_specification">
          <language>OCL</language>
          <body>(self.selector->isEmpty() implies not self.represents.isMultivalued()) or&#xA;(not self.selector->isEmpty() implies self.represents.isMultivalued())&#xA;</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="Lifeline-same_classifier" name="same_classifier" constrainedElement="Lifeline">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Lifeline-same_classifier-_ownedComment.0" annotatedElement="Lifeline-same_classifier">
          <body>The classifier containing the referenced ConnectableElement must be the same classifier, or an ancestor, of the classifier that contains the interaction enclosing this lifeline.</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="Lifeline-same_classifier-_specification">
          <language>OCL</language>
          <body>if (represents->notEmpty()) then&#xA;(if selector->notEmpty() then represents.isMultivalued() else not represents.isMultivalued())&#xA;</body>
        </specification>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Lifeline-coveredBy" name="coveredBy" lower="0" upper="*" type="InteractionFragment" association="A_covered_coveredBy">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Lifeline-coveredBy-_ownedComment.0" annotatedElement="Lifeline-coveredBy">
          <body>References the InteractionFragments in which this Lifeline takes part.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Lifeline-represents" name="represents" lower="0" type="ConnectableElement" association="A_lifeline_represents">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Lifeline-represents-_ownedComment.0" annotatedElement="Lifeline-represents">
          <body>References the ConnectableElement within the classifier that contains the enclosing interaction.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Lifeline-interaction" name="interaction" type="Interaction" association="A_lifeline_interaction" subsettedProperty="NamedElement-namespace">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Lifeline-interaction-_ownedComment.0" annotatedElement="Lifeline-interaction">
          <body>References the Interaction enclosing this Lifeline.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Lifeline-selector" name="selector" lower="0" type="ValueSpecification" association="A_selector_lifeline" subsettedProperty="Element-ownedElement" isComposite="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Lifeline-selector-_ownedComment.0" annotatedElement="Lifeline-selector">
          <body>If the referenced ConnectableElement is multivalued, then this specifies the specific individual part within that set.</body>
        </ownedComment>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="InteractionFragment" name="InteractionFragment" isAbstract="true" superClass="NamedElement">
      <ownedComment xmi:type="cmof:Comment" xmi:id="InteractionFragment-_ownedComment.0" annotatedElement="InteractionFragment">
        <body>InteractionFragment is an abstract notion of the most general interaction unit. An interaction fragment is a piece of an interaction. Each interaction fragment is conceptually like an interaction by itself.</body>
      </ownedComment>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="InteractionFragment-covered" name="covered" lower="0" upper="*" type="Lifeline" association="A_covered_coveredBy">
        <ownedComment xmi:type="cmof:Comment" xmi:id="InteractionFragment-covered-_ownedComment.0" annotatedElement="InteractionFragment-covered">
          <body>References the Lifelines that the InteractionFragment involves.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="InteractionFragment-generalOrdering" name="generalOrdering" lower="0" upper="*" type="GeneralOrdering" association="A_generalOrdering_interactionFragment" subsettedProperty="Element-ownedElement" isComposite="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="InteractionFragment-generalOrdering-_ownedComment.0" annotatedElement="InteractionFragment-generalOrdering">
          <body>The general ordering relationships contained in this fragment.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="InteractionFragment-enclosingInteraction" name="enclosingInteraction" lower="0" type="Interaction" association="A_enclosingInteraction_fragment">
        <ownedComment xmi:type="cmof:Comment" xmi:id="InteractionFragment-enclosingInteraction-_ownedComment.0" annotatedElement="InteractionFragment-enclosingInteraction">
          <body>The Interaction enclosing this InteractionFragment.</body>
        </ownedComment>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="Message" name="Message" superClass="NamedElement">
      <ownedComment xmi:type="cmof:Comment" xmi:id="Message-_ownedComment.0" annotatedElement="Message">
        <body>A message defines a particular communication between lifelines of an interaction.</body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="Message-sending_receiving_message_event" name="sending_receiving_message_event" constrainedElement="Message">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Message-sending_receiving_message_event-_ownedComment.0" annotatedElement="Message-sending_receiving_message_event">
          <body>If the sending MessageEvent and the receiving MessageEvent of the same Message are on the same Lifeline, the sending MessageEvent must be ordered before the receiving MessageEvent.</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="Message-sending_receiving_message_event-_specification">
          <language>OCL</language>
          <body>true</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="Message-signature_refer_to" name="signature_refer_to" constrainedElement="Message">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Message-signature_refer_to-_ownedComment.0" annotatedElement="Message-signature_refer_to">
          <body>The signature must either refer an Operation (in which case messageSort is either synchCall or asynchCall) or a Signal (in which case messageSort is asynchSignal). The name of the NamedElement referenced by signature must be the same as that of the Message.</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="Message-signature_refer_to-_specification">
          <language>OCL</language>
          <body>true</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="Message-signature_is_operation" name="signature_is_operation" constrainedElement="Message">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Message-signature_is_operation-_ownedComment.0" annotatedElement="Message-signature_is_operation">
          <body>In the case when the Message signature is an Operation, the arguments of the Message must correspond to the parameters of the Operation. A Parameter corresponds to an Argument if the Argument is of the same Class or a specialization of that of the Parameter.</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="Message-signature_is_operation-_specification">
          <language>OCL</language>
          <body>true</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="Message-signature_is_signal" name="signature_is_signal" constrainedElement="Message">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Message-signature_is_signal-_ownedComment.0" annotatedElement="Message-signature_is_signal">
          <body>In the case when the Message signature is a Signal, the arguments of the Message must correspond to the attributes of the Signal. A Message Argument corresponds to a Signal Attribute if the Arguement is of the same Class or a specialization of that of the Attribute.</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="Message-signature_is_signal-_specification">
          <language>OCL</language>
          <body>true</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="Message-arguments" name="arguments" constrainedElement="Message">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Message-arguments-_ownedComment.0" annotatedElement="Message-arguments">
          <body>Arguments of a Message must only be:
i) attributes of the sending lifeline
ii) constants
iii) symbolic values (which are wildcard values representing any legal value)
iv) explicit parameters of the enclosing Interaction
v) attributes of the class owning the Interaction
</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="Message-arguments-_specification">
          <language>OCL</language>
          <body>true</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="Message-cannot_cross_boundaries" name="cannot_cross_boundaries" constrainedElement="Message">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Message-cannot_cross_boundaries-_ownedComment.0" annotatedElement="Message-cannot_cross_boundaries">
          <body>Messages cannot cross bounderies of CombinedFragments or their operands.</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="Message-cannot_cross_boundaries-_specification">
          <language>OCL</language>
          <body>true</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="Message-occurrence_specifications" name="occurrence_specifications" constrainedElement="Message">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Message-occurrence_specifications-_ownedComment.0" annotatedElement="Message-occurrence_specifications">
          <body>If the MessageEnds are both OccurrenceSpecifications then the connector must go between the Parts represented by the Lifelines of the two MessageEnds.</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="Message-occurrence_specifications-_specification">
          <language>OCL</language>
          <body>true</body>
        </specification>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Message-messageKind" name="messageKind" type="MessageKind" isReadOnly="true" default="unknown" isDerived="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Message-messageKind-_ownedComment.0" annotatedElement="Message-messageKind">
          <body>The derived kind of the Message (complete, lost, found or unknown)</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Message-messageSort" name="messageSort" type="MessageSort" default="synchCall">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Message-messageSort-_ownedComment.0" annotatedElement="Message-messageSort">
          <body>The sort of communication reflected by the Message</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Message-receiveEvent" name="receiveEvent" lower="0" type="MessageEnd" association="A_receiveEvent_message">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Message-receiveEvent-_ownedComment.0" annotatedElement="Message-receiveEvent">
          <body>References the Receiving of the Message</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Message-sendEvent" name="sendEvent" lower="0" type="MessageEnd" association="A_sendEvent_message">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Message-sendEvent-_ownedComment.0" annotatedElement="Message-sendEvent">
          <body>References the Sending of the Message.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Message-connector" name="connector" lower="0" type="Connector" association="A_connector_message">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Message-connector-_ownedComment.0" annotatedElement="Message-connector">
          <body>The Connector on which this Message is sent.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Message-interaction" name="interaction" type="Interaction" association="A_message_interaction" subsettedProperty="NamedElement-namespace">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Message-interaction-_ownedComment.0" annotatedElement="Message-interaction">
          <body>The enclosing Interaction owning the Message</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Message-argument" name="argument" isOrdered="true" lower="0" upper="*" type="ValueSpecification" association="A_argument_message" subsettedProperty="Element-ownedElement" isComposite="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Message-argument-_ownedComment.0" annotatedElement="Message-argument">
          <body>The arguments of the Message</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Message-signature" name="signature" lower="0" type="NamedElement" association="A_signature_message" isReadOnly="true" isDerived="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Message-signature-_ownedComment.0" annotatedElement="Message-signature">
          <body>The definition of the type or signature of the Message (depending on its kind). The associated named element is derived from the message end that constitutes the sending or receiving message event. If both a sending event and a receiving message event are present, the signature is obtained from the sending event.</body>
        </ownedComment>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="GeneralOrdering" name="GeneralOrdering" superClass="NamedElement">
      <ownedComment xmi:type="cmof:Comment" xmi:id="GeneralOrdering-_ownedComment.0" annotatedElement="GeneralOrdering">
        <body>A general ordering represents a binary relation between two occurrence specifications, to describe that one occurrence specification must occur before the other in a valid trace. This mechanism provides the ability to define partial orders of occurrence cpecifications that may otherwise not have a specified order.</body>
      </ownedComment>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="GeneralOrdering-before" name="before" type="OccurrenceSpecification" association="A_before_toAfter">
        <ownedComment xmi:type="cmof:Comment" xmi:id="GeneralOrdering-before-_ownedComment.0" annotatedElement="GeneralOrdering-before">
          <body>The OccurrenceSpecification referenced comes before the OccurrenceSpecification referenced by after.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="GeneralOrdering-after" name="after" type="OccurrenceSpecification" association="A_toBefore_after">
        <ownedComment xmi:type="cmof:Comment" xmi:id="GeneralOrdering-after-_ownedComment.0" annotatedElement="GeneralOrdering-after">
          <body>The OccurrenceSpecification referenced comes after the OccurrenceSpecification referenced by before.</body>
        </ownedComment>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="ExecutionSpecification" name="ExecutionSpecification" isAbstract="true" superClass="InteractionFragment">
      <ownedComment xmi:type="cmof:Comment" xmi:id="ExecutionSpecification-_ownedComment.0" annotatedElement="ExecutionSpecification">
        <body>An execution specification is a specification of the execution of a unit of behavior or action within the lifeline. The duration of an execution specification is represented by two cccurrence specifications, the start occurrence specification and the finish occurrence specification.</body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="ExecutionSpecification-same_lifeline" name="same_lifeline" constrainedElement="ExecutionSpecification">
        <ownedComment xmi:type="cmof:Comment" xmi:id="ExecutionSpecification-same_lifeline-_ownedComment.0" annotatedElement="ExecutionSpecification-same_lifeline">
          <body>The startEvent and the finishEvent must be on the same Lifeline</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="ExecutionSpecification-same_lifeline-_specification">
          <language>OCL</language>
          <body>start.lifeline = finish.lifeline</body>
        </specification>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="ExecutionSpecification-start" name="start" type="OccurrenceSpecification" association="A_executionSpecification_start">
        <ownedComment xmi:type="cmof:Comment" xmi:id="ExecutionSpecification-start-_ownedComment.0" annotatedElement="ExecutionSpecification-start">
          <body>References the OccurrenceSpecification that designates the start of the Action or Behavior</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="ExecutionSpecification-finish" name="finish" type="OccurrenceSpecification" association="A_executionSpecification_finish">
        <ownedComment xmi:type="cmof:Comment" xmi:id="ExecutionSpecification-finish-_ownedComment.0" annotatedElement="ExecutionSpecification-finish">
          <body>References the OccurrenceSpecification that designates the finish of the Action or Behavior.</body>
        </ownedComment>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="OccurrenceSpecification" name="OccurrenceSpecification" superClass="InteractionFragment">
      <ownedComment xmi:type="cmof:Comment" xmi:id="OccurrenceSpecification-_ownedComment.0" annotatedElement="OccurrenceSpecification">
        <body>An occurrence specification is the basic semantic unit of interactions. The sequences of occurrences specified by them are the meanings of interactions.</body>
      </ownedComment>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="OccurrenceSpecification-covered" name="covered" type="Lifeline" association="A_events_covered" redefinedProperty="InteractionFragment-covered">
        <ownedComment xmi:type="cmof:Comment" xmi:id="OccurrenceSpecification-covered-_ownedComment.0" annotatedElement="OccurrenceSpecification-covered">
          <body>References the Lifeline on which the OccurrenceSpecification appears.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="OccurrenceSpecification-toAfter" name="toAfter" lower="0" upper="*" type="GeneralOrdering" association="A_before_toAfter">
        <ownedComment xmi:type="cmof:Comment" xmi:id="OccurrenceSpecification-toAfter-_ownedComment.0" annotatedElement="OccurrenceSpecification-toAfter">
          <body>References the GeneralOrderings that specify EventOcurrences that must occur after this OccurrenceSpecification&#xD;
</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="OccurrenceSpecification-toBefore" name="toBefore" lower="0" upper="*" type="GeneralOrdering" association="A_toBefore_after">
        <ownedComment xmi:type="cmof:Comment" xmi:id="OccurrenceSpecification-toBefore-_ownedComment.0" annotatedElement="OccurrenceSpecification-toBefore">
          <body>References the GeneralOrderings that specify EventOcurrences that must occur before this OccurrenceSpecification&#xD;
</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="OccurrenceSpecification-event" name="event" type="Event" association="A_event_occurrenceSpecification">
        <ownedComment xmi:type="cmof:Comment" xmi:id="OccurrenceSpecification-event-_ownedComment.0" annotatedElement="OccurrenceSpecification-event">
          <body>References a specification of the occurring event.</body>
        </ownedComment>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="MessageEnd" name="MessageEnd" isAbstract="true" superClass="NamedElement">
      <ownedComment xmi:type="cmof:Comment" xmi:id="MessageEnd-_ownedComment.0" annotatedElement="MessageEnd">
        <body>MessageEnd is an abstract specialization of NamedElement that represents what can occur at the end of a message.</body>
      </ownedComment>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="MessageEnd-message" name="message" lower="0" type="Message" association="A_message_messageEnd">
        <ownedComment xmi:type="cmof:Comment" xmi:id="MessageEnd-message-_ownedComment.0" annotatedElement="MessageEnd-message">
          <body>References a Message.</body>
        </ownedComment>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="StateInvariant" name="StateInvariant" superClass="InteractionFragment">
      <ownedComment xmi:type="cmof:Comment" xmi:id="StateInvariant-_ownedComment.0" annotatedElement="StateInvariant">
        <body>A state invariant is a runtime constraint on the participants of the interaction. It may be used to specify a variety of different kinds of constraints, such as values of attributes or variables, internal or external states, and so on. A state invariant is an interaction fragment and it is placed on a lifeline.</body>
      </ownedComment>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="StateInvariant-invariant" name="invariant" type="Constraint" association="A_invariant_stateInvariant" subsettedProperty="Element-ownedElement" isComposite="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="StateInvariant-invariant-_ownedComment.0" annotatedElement="StateInvariant-invariant">
          <body>A Constraint that should hold at runtime for this StateInvariant</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="StateInvariant-covered" name="covered" type="Lifeline" association="A_stateInvariant_covered" redefinedProperty="InteractionFragment-covered">
        <ownedComment xmi:type="cmof:Comment" xmi:id="StateInvariant-covered-_ownedComment.0" annotatedElement="StateInvariant-covered">
          <body>References the Lifeline on which the StateInvariant appears.</body>
        </ownedComment>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="ActionExecutionSpecification" name="ActionExecutionSpecification" superClass="ExecutionSpecification">
      <ownedComment xmi:type="cmof:Comment" xmi:id="ActionExecutionSpecification-_ownedComment.0" annotatedElement="ActionExecutionSpecification">
        <body>An action execution specification is a kind of execution specification representing the execution of an action.</body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="ActionExecutionSpecification-action_referenced" name="action_referenced" constrainedElement="ActionExecutionSpecification">
        <ownedComment xmi:type="cmof:Comment" xmi:id="ActionExecutionSpecification-action_referenced-_ownedComment.0" annotatedElement="ActionExecutionSpecification-action_referenced">
          <body>The Action referenced by the ActionExecutionSpecification, if any, must be owned by the Interaction owning the ActionExecutionOccurrence.</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="ActionExecutionSpecification-action_referenced-_specification">
          <language>OCL</language>
          <body>true</body>
        </specification>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="ActionExecutionSpecification-action" name="action" type="Action" association="A_action_actionExecutionSpecification">
        <ownedComment xmi:type="cmof:Comment" xmi:id="ActionExecutionSpecification-action-_ownedComment.0" annotatedElement="ActionExecutionSpecification-action">
          <body>Action whose execution is occurring.</body>
        </ownedComment>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="BehaviorExecutionSpecification" name="BehaviorExecutionSpecification" superClass="ExecutionSpecification">
      <ownedComment xmi:type="cmof:Comment" xmi:id="BehaviorExecutionSpecification-_ownedComment.0" annotatedElement="BehaviorExecutionSpecification">
        <body>A behavior execution specification is a kind of execution specification representing the execution of a behavior.</body>
      </ownedComment>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="BehaviorExecutionSpecification-behavior" name="behavior" lower="0" type="Behavior" association="A_behavior_behaviorExecutionSpecification">
        <ownedComment xmi:type="cmof:Comment" xmi:id="BehaviorExecutionSpecification-behavior-_ownedComment.0" annotatedElement="BehaviorExecutionSpecification-behavior">
          <body>Behavior whose execution is occurring.</body>
        </ownedComment>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="ExecutionEvent" name="ExecutionEvent" superClass="Event">
      <ownedComment xmi:type="cmof:Comment" xmi:id="ExecutionEvent-_ownedComment.0" annotatedElement="ExecutionEvent">
        <body>An execution event models the start or finish of an execution occurrence.</body>
      </ownedComment>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="CreationEvent" name="CreationEvent" superClass="Event">
      <ownedComment xmi:type="cmof:Comment" xmi:id="CreationEvent-_ownedComment.0" annotatedElement="CreationEvent">
        <body>A creation event models the creation of an object.</body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="CreationEvent-no_occurrence_above" name="no_occurrence_above" constrainedElement="CreationEvent">
        <ownedComment xmi:type="cmof:Comment" xmi:id="CreationEvent-no_occurrence_above-_ownedComment.0" annotatedElement="CreationEvent-no_occurrence_above">
          <body>No othet OccurrenceSpecification may appear above an OccurrenceSpecification which references a CreationEvent on a given Lifeline in an InteractionOperand.</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="CreationEvent-no_occurrence_above-_specification">
          <language>OCL</language>
          <body>true</body>
        </specification>
      </ownedRule>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="DestructionEvent" name="DestructionEvent" superClass="Event">
      <ownedComment xmi:type="cmof:Comment" xmi:id="DestructionEvent-_ownedComment.0" annotatedElement="DestructionEvent">
        <body>A destruction event models the destruction of an object.</body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="DestructionEvent-no_occurrence_specifications_below" name="no_occurrence_specifications_below" constrainedElement="DestructionEvent">
        <ownedComment xmi:type="cmof:Comment" xmi:id="DestructionEvent-no_occurrence_specifications_below-_ownedComment.0" annotatedElement="DestructionEvent-no_occurrence_specifications_below">
          <body>No other OccurrenceSpecifications may appear below an OccurrenceSpecification which references a DestructionEvent on a given Lifeline in an InteractionOperand.</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="DestructionEvent-no_occurrence_specifications_below-_specification">
          <language>OCL</language>
          <body>true</body>
        </specification>
      </ownedRule>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="SendOperationEvent" name="SendOperationEvent" superClass="MessageEvent">
      <ownedComment xmi:type="cmof:Comment" xmi:id="SendOperationEvent-_ownedComment.0" annotatedElement="SendOperationEvent">
        <body>A send operation event models the invocation of an operation call.</body>
      </ownedComment>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="SendOperationEvent-operation" name="operation" type="Operation" association="A_operation_sendOperationEvent">
        <ownedComment xmi:type="cmof:Comment" xmi:id="SendOperationEvent-operation-_ownedComment.0" annotatedElement="SendOperationEvent-operation">
          <body>The operation associated with this event.</body>
        </ownedComment>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="SendSignalEvent" name="SendSignalEvent" superClass="MessageEvent">
      <ownedComment xmi:type="cmof:Comment" xmi:id="SendSignalEvent-_ownedComment.0" annotatedElement="SendSignalEvent">
        <body>A send signal event models the sending of a signal.</body>
      </ownedComment>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="SendSignalEvent-signal" name="signal" type="Signal" association="A_signal_sendSignalEvent">
        <ownedComment xmi:type="cmof:Comment" xmi:id="SendSignalEvent-signal-_ownedComment.0" annotatedElement="SendSignalEvent-signal">
          <body>The signal associated with this event.</body>
        </ownedComment>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="MessageOccurrenceSpecification" name="MessageOccurrenceSpecification" superClass="MessageEnd OccurrenceSpecification">
      <ownedComment xmi:type="cmof:Comment" xmi:id="MessageOccurrenceSpecification-_ownedComment.0" annotatedElement="MessageOccurrenceSpecification">
        <body>A message occurrence specification pecifies the occurrence of message events, such as sending and receiving of signals or invoking or receiving of operation calls. A message occurrence specification is a kind of message end. Messages are generated either by synchronous operation calls or asynchronous signal sends. They are received by the execution of corresponding accept event actions.</body>
      </ownedComment>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="ExecutionOccurrenceSpecification" name="ExecutionOccurrenceSpecification" superClass="OccurrenceSpecification">
      <ownedComment xmi:type="cmof:Comment" xmi:id="ExecutionOccurrenceSpecification-_ownedComment.0" annotatedElement="ExecutionOccurrenceSpecification">
        <body>An execution occurrence specification represents moments in time at which actions or behaviors start or finish.</body>
      </ownedComment>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="ExecutionOccurrenceSpecification-execution" name="execution" type="ExecutionSpecification" association="A_execution_executionOccurrenceSpecification">
        <ownedComment xmi:type="cmof:Comment" xmi:id="ExecutionOccurrenceSpecification-execution-_ownedComment.0" annotatedElement="ExecutionOccurrenceSpecification-execution">
          <body>References the execution specification describing the execution that is started or finished at this execution event.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="ExecutionOccurrenceSpecification-event" name="event" type="ExecutionEvent" association="A_event_executionOccurrenceSpecification" redefinedProperty="OccurrenceSpecification-event">
        <ownedComment xmi:type="cmof:Comment" xmi:id="ExecutionOccurrenceSpecification-event-_ownedComment.0" annotatedElement="ExecutionOccurrenceSpecification-event">
          <body>The event referenced is restricted to an execution event.</body>
        </ownedComment>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="ReceiveOperationEvent" name="ReceiveOperationEvent" superClass="MessageEvent">
      <ownedComment xmi:type="cmof:Comment" xmi:id="ReceiveOperationEvent-_ownedComment.0" annotatedElement="ReceiveOperationEvent">
        <body>A receive operation event specifies the event of receiving an operation invocation for a particular operation by the target entity.</body>
      </ownedComment>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="ReceiveOperationEvent-operation" name="operation" type="Operation" association="A_operation_receiveOperationEvent">
        <ownedComment xmi:type="cmof:Comment" xmi:id="ReceiveOperationEvent-operation-_ownedComment.0" annotatedElement="ReceiveOperationEvent-operation">
          <body>The operation associated with this event.</body>
        </ownedComment>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="ReceiveSignalEvent" name="ReceiveSignalEvent" superClass="MessageEvent">
      <ownedComment xmi:type="cmof:Comment" xmi:id="ReceiveSignalEvent-_ownedComment.0" annotatedElement="ReceiveSignalEvent">
        <body>A receive signal event specifies the event of receiving a signal by the target entity.</body>
      </ownedComment>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="ReceiveSignalEvent-signal" name="signal" type="Signal" association="A_signal_receiveSignalEvent">
        <ownedComment xmi:type="cmof:Comment" xmi:id="ReceiveSignalEvent-signal-_ownedComment.0" annotatedElement="ReceiveSignalEvent-signal">
          <body>The signal associated with this event.</body>
        </ownedComment>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Enumeration" xmi:id="MessageKind" name="MessageKind">
      <ownedComment xmi:type="cmof:Comment" xmi:id="MessageKind-_ownedComment.0" annotatedElement="MessageKind">
        <body>This is an enumerated type that identifies the type of message.</body>
      </ownedComment>
      <ownedLiteral xmi:type="cmof:EnumerationLiteral" xmi:id="MessageKind-complete" name="complete">
        <ownedComment xmi:type="cmof:Comment" xmi:id="MessageKind-complete-_ownedComment.0" annotatedElement="MessageKind-complete">
          <body>sendEvent and receiveEvent are present</body>
        </ownedComment>
      </ownedLiteral>
      <ownedLiteral xmi:type="cmof:EnumerationLiteral" xmi:id="MessageKind-lost" name="lost">
        <ownedComment xmi:type="cmof:Comment" xmi:id="MessageKind-lost-_ownedComment.0" annotatedElement="MessageKind-lost">
          <body>sendEvent present and receiveEvent absent</body>
        </ownedComment>
      </ownedLiteral>
      <ownedLiteral xmi:type="cmof:EnumerationLiteral" xmi:id="MessageKind-found" name="found">
        <ownedComment xmi:type="cmof:Comment" xmi:id="MessageKind-found-_ownedComment.0" annotatedElement="MessageKind-found">
          <body>sendEvent absent and receiveEvent present</body>
        </ownedComment>
      </ownedLiteral>
      <ownedLiteral xmi:type="cmof:EnumerationLiteral" xmi:id="MessageKind-unknown" name="unknown">
        <ownedComment xmi:type="cmof:Comment" xmi:id="MessageKind-unknown-_ownedComment.0" annotatedElement="MessageKind-unknown">
          <body>sendEvent and receiveEvent absent (should not appear)</body>
        </ownedComment>
      </ownedLiteral>
    </ownedMember>
    <ownedMember xmi:type="cmof:Enumeration" xmi:id="MessageSort" name="MessageSort">
      <ownedComment xmi:type="cmof:Comment" xmi:id="MessageSort-_ownedComment.0" annotatedElement="MessageSort">
        <body>This is an enumerated type that identifies the type of communication action that was used to generate the message.</body>
      </ownedComment>
      <ownedLiteral xmi:type="cmof:EnumerationLiteral" xmi:id="MessageSort-synchCall" name="synchCall">
        <ownedComment xmi:type="cmof:Comment" xmi:id="MessageSort-synchCall-_ownedComment.0" annotatedElement="MessageSort-synchCall">
          <body>The message was generated by a synchronous call to an operation.</body>
        </ownedComment>
      </ownedLiteral>
      <ownedLiteral xmi:type="cmof:EnumerationLiteral" xmi:id="MessageSort-asynchCall" name="asynchCall">
        <ownedComment xmi:type="cmof:Comment" xmi:id="MessageSort-asynchCall-_ownedComment.0" annotatedElement="MessageSort-asynchCall">
          <body>The message was generated by an asynchronous call to an operation; i.e., a CallAction with isSynchronous&#xD;
= false.&#xD;
</body>
        </ownedComment>
      </ownedLiteral>
      <ownedLiteral xmi:type="cmof:EnumerationLiteral" xmi:id="MessageSort-asynchSignal" name="asynchSignal">
        <ownedComment xmi:type="cmof:Comment" xmi:id="MessageSort-asynchSignal-_ownedComment.0" annotatedElement="MessageSort-asynchSignal">
          <body>The message was generated by an asynchronous send action.</body>
        </ownedComment>
      </ownedLiteral>
      <ownedLiteral xmi:type="cmof:EnumerationLiteral" xmi:id="MessageSort-createMessage" name="createMessage">
        <ownedComment xmi:type="cmof:Comment" xmi:id="MessageSort-createMessage-_ownedComment.0" annotatedElement="MessageSort-createMessage">
          <body>The message designating the creation of another lifeline object.</body>
        </ownedComment>
      </ownedLiteral>
      <ownedLiteral xmi:type="cmof:EnumerationLiteral" xmi:id="MessageSort-deleteMessage" name="deleteMessage">
        <ownedComment xmi:type="cmof:Comment" xmi:id="MessageSort-deleteMessage-_ownedComment.0" annotatedElement="MessageSort-deleteMessage">
          <body>The message designating the termination of another lifeline.</body>
        </ownedComment>
      </ownedLiteral>
      <ownedLiteral xmi:type="cmof:EnumerationLiteral" xmi:id="MessageSort-reply" name="reply">
        <ownedComment xmi:type="cmof:Comment" xmi:id="MessageSort-reply-_ownedComment.0" annotatedElement="MessageSort-reply">
          <body>The message is a reply message to an operation call.</body>
        </ownedComment>
      </ownedLiteral>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_covered_coveredBy" name="A_covered_coveredBy" memberEnd="InteractionFragment-covered Lifeline-coveredBy">
      <ownedComment xmi:type="cmof:Comment" xmi:id="A_covered_coveredBy-_ownedComment.0" annotatedElement="A_covered_coveredBy">
        <body>This association shows the lifelines that make up an interaction. A lifeline may be part of more than one interaction use.</body>
      </ownedComment>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_executionSpecification_start" name="A_executionSpecification_start" memberEnd="A_executionSpecification_start-executionSpecification ExecutionSpecification-start">
      <ownedComment xmi:type="cmof:Comment" xmi:id="A_executionSpecification_start-_ownedComment.0" annotatedElement="A_executionSpecification_start">
        <body>The event shows the time point at which the action begins execution.</body>
      </ownedComment>
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_executionSpecification_start-executionSpecification" name="executionSpecification" lower="0" upper="*" type="ExecutionSpecification" association="A_executionSpecification_start"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_executionSpecification_finish" name="A_executionSpecification_finish" memberEnd="A_executionSpecification_finish-executionSpecification ExecutionSpecification-finish">
      <ownedComment xmi:type="cmof:Comment" xmi:id="A_executionSpecification_finish-_ownedComment.0" annotatedElement="A_executionSpecification_finish">
        <body>The event shows the time point at which the action completes execution.</body>
      </ownedComment>
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_executionSpecification_finish-executionSpecification" name="executionSpecification" lower="0" upper="*" type="ExecutionSpecification" association="A_executionSpecification_finish"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_lifeline_represents" name="A_lifeline_represents" memberEnd="A_lifeline_represents-lifeline Lifeline-represents">
      <ownedComment xmi:type="cmof:Comment" xmi:id="A_lifeline_represents-_ownedComment.0" annotatedElement="A_lifeline_represents">
        <body>If a Part has multiplicity, multiple lifelines might be used to show it.</body>
      </ownedComment>
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_lifeline_represents-lifeline" name="lifeline" lower="0" upper="*" type="Lifeline" association="A_lifeline_represents"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_lifeline_interaction" name="A_lifeline_interaction" memberEnd="Interaction-lifeline Lifeline-interaction"/>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_receiveEvent_message" name="A_receiveEvent_message" memberEnd="Message-receiveEvent A_receiveEvent_message-message">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_receiveEvent_message-message" name="message" lower="0" type="Message" association="A_receiveEvent_message"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_sendEvent_message" name="A_sendEvent_message" memberEnd="Message-sendEvent A_sendEvent_message-message">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_sendEvent_message-message" name="message" lower="0" type="Message" association="A_sendEvent_message"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_events_covered" name="A_events_covered" memberEnd="A_events_covered-events OccurrenceSpecification-covered">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_events_covered-events" name="events" isOrdered="true" lower="0" upper="*" type="OccurrenceSpecification" association="A_events_covered"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_selector_lifeline" name="A_selector_lifeline" memberEnd="Lifeline-selector A_selector_lifeline-lifeline">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_selector_lifeline-lifeline" name="lifeline" lower="0" type="Lifeline" association="A_selector_lifeline"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_connector_message" name="A_connector_message" memberEnd="Message-connector A_connector_message-message">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_connector_message-message" name="message" lower="0" upper="*" type="Message" association="A_connector_message"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_message_interaction" name="A_message_interaction" memberEnd="Interaction-message Message-interaction"/>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_before_toAfter" name="A_before_toAfter" memberEnd="GeneralOrdering-before OccurrenceSpecification-toAfter"/>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_toBefore_after" name="A_toBefore_after" memberEnd="OccurrenceSpecification-toBefore GeneralOrdering-after"/>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_argument_message" name="A_argument_message" memberEnd="Message-argument A_argument_message-message">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_argument_message-message" name="message" lower="0" type="Message" association="A_argument_message"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_invariant_stateInvariant" name="A_invariant_stateInvariant" memberEnd="StateInvariant-invariant A_invariant_stateInvariant-stateInvariant">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_invariant_stateInvariant-stateInvariant" name="stateInvariant" lower="0" type="StateInvariant" association="A_invariant_stateInvariant"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_stateInvariant_covered" name="A_stateInvariant_covered" memberEnd="A_stateInvariant_covered-stateInvariant StateInvariant-covered">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_stateInvariant_covered-stateInvariant" name="stateInvariant" lower="0" upper="*" type="StateInvariant" association="A_stateInvariant_covered"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_generalOrdering_interactionFragment" name="A_generalOrdering_interactionFragment" memberEnd="InteractionFragment-generalOrdering A_generalOrdering_interactionFragment-interactionFragment">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_generalOrdering_interactionFragment-interactionFragment" name="interactionFragment" lower="0" type="InteractionFragment" association="A_generalOrdering_interactionFragment"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_enclosingInteraction_fragment" name="A_enclosingInteraction_fragment" memberEnd="InteractionFragment-enclosingInteraction Interaction-fragment"/>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_behavior_behaviorExecutionSpecification" name="A_behavior_behaviorExecutionSpecification" memberEnd="BehaviorExecutionSpecification-behavior A_behavior_behaviorExecutionSpecification-behaviorExecutionSpecification">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_behavior_behaviorExecutionSpecification-behaviorExecutionSpecification" name="behaviorExecutionSpecification" lower="0" upper="*" type="BehaviorExecutionSpecification" association="A_behavior_behaviorExecutionSpecification"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_action_actionExecutionSpecification" name="A_action_actionExecutionSpecification" memberEnd="ActionExecutionSpecification-action A_action_actionExecutionSpecification-actionExecutionSpecification">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_action_actionExecutionSpecification-actionExecutionSpecification" name="actionExecutionSpecification" lower="0" upper="*" type="ActionExecutionSpecification" association="A_action_actionExecutionSpecification"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_signature_message" name="A_signature_message" memberEnd="Message-signature A_signature_message-message">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_signature_message-message" name="message" lower="0" upper="*" type="Message" association="A_signature_message"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_operation_sendOperationEvent" name="A_operation_sendOperationEvent" memberEnd="SendOperationEvent-operation A_operation_sendOperationEvent-sendOperationEvent">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_operation_sendOperationEvent-sendOperationEvent" name="sendOperationEvent" lower="0" upper="*" type="SendOperationEvent" association="A_operation_sendOperationEvent"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_signal_sendSignalEvent" name="A_signal_sendSignalEvent" memberEnd="SendSignalEvent-signal A_signal_sendSignalEvent-sendSignalEvent">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_signal_sendSignalEvent-sendSignalEvent" name="sendSignalEvent" lower="0" upper="*" type="SendSignalEvent" association="A_signal_sendSignalEvent"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_message_messageEnd" name="A_message_messageEnd" memberEnd="MessageEnd-message A_message_messageEnd-messageEnd">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_message_messageEnd-messageEnd" name="messageEnd" lower="0" type="MessageEnd" association="A_message_messageEnd"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_event_occurrenceSpecification" name="A_event_occurrenceSpecification" memberEnd="OccurrenceSpecification-event A_event_occurrenceSpecification-occurrenceSpecification">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_event_occurrenceSpecification-occurrenceSpecification" name="occurrenceSpecification" lower="0" upper="*" type="OccurrenceSpecification" association="A_event_occurrenceSpecification"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_action_interaction" name="A_action_interaction" memberEnd="Interaction-action A_action_interaction-interaction">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_action_interaction-interaction" name="interaction" lower="0" type="Interaction" association="A_action_interaction" subsettedProperty="Element-owner"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_execution_executionOccurrenceSpecification" name="A_execution_executionOccurrenceSpecification" memberEnd="ExecutionOccurrenceSpecification-execution A_execution_executionOccurrenceSpecification-executionOccurrenceSpecification">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_execution_executionOccurrenceSpecification-executionOccurrenceSpecification" name="executionOccurrenceSpecification" type="ExecutionOccurrenceSpecification" association="A_execution_executionOccurrenceSpecification"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_event_executionOccurrenceSpecification" name="A_event_executionOccurrenceSpecification" memberEnd="ExecutionOccurrenceSpecification-event A_event_executionOccurrenceSpecification-executionOccurrenceSpecification">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_event_executionOccurrenceSpecification-executionOccurrenceSpecification" name="executionOccurrenceSpecification" lower="0" upper="*" type="ExecutionOccurrenceSpecification" association="A_event_executionOccurrenceSpecification"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_operation_receiveOperationEvent" name="A_operation_receiveOperationEvent" memberEnd="ReceiveOperationEvent-operation A_operation_receiveOperationEvent-receiveOperationEvent">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_operation_receiveOperationEvent-receiveOperationEvent" name="receiveOperationEvent" lower="0" upper="*" type="ReceiveOperationEvent" association="A_operation_receiveOperationEvent"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_signal_receiveSignalEvent" name="A_signal_receiveSignalEvent" memberEnd="ReceiveSignalEvent-signal A_signal_receiveSignalEvent-receiveSignalEvent">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_signal_receiveSignalEvent-receiveSignalEvent" name="receiveSignalEvent" lower="0" upper="*" type="ReceiveSignalEvent" association="A_signal_receiveSignalEvent"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="Actor" name="Actor" superClass="BehavioredClassifier">
      <ownedComment xmi:type="cmof:Comment" xmi:id="Actor-_ownedComment.0" annotatedElement="Actor">
        <body>An actor specifies a role played by a user or any other system that interacts with the subject.</body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="Actor-associations" name="associations" constrainedElement="Actor">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Actor-associations-_ownedComment.0" annotatedElement="Actor-associations">
          <body>An actor can only have associations to use cases, components and classes. Furthermore these associations must be binary.</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="Actor-associations-_specification">
          <language>OCL</language>
          <body>self.ownedAttribute->forAll ( a |&#xA;(a.association->notEmpty()) implies&#xA;((a.association.memberEnd.size() = 2) and&#xA;(a.opposite.class.oclIsKindOf(UseCase) or&#xA;(a.opposite.class.oclIsKindOf(Class) and not a.opposite.class.oclIsKindOf(Behavior))))&#xA;</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="Actor-must_have_name" name="must_have_name" constrainedElement="Actor">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Actor-must_have_name-_ownedComment.0" annotatedElement="Actor-must_have_name">
          <body>An actor must have a name.</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="Actor-must_have_name-_specification">
          <language>OCL</language>
          <body>name->notEmpty()</body>
        </specification>
      </ownedRule>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="Extend" name="Extend" superClass="DirectedRelationship NamedElement">
      <ownedComment xmi:type="cmof:Comment" xmi:id="Extend-_ownedComment.0" annotatedElement="Extend">
        <body>A relationship from an extending use case to an extended use case that specifies how and when the behavior defined in the extending use case can be inserted into the behavior defined in the extended use case.</body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="Extend-extension_points" name="extension_points" constrainedElement="Extend">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Extend-extension_points-_ownedComment.0" annotatedElement="Extend-extension_points">
          <body>The extension points referenced by the extend relationship must belong to the use case that is being extended.&#xD;
&#xD;
</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="Extend-extension_points-_specification">
          <language>OCL</language>
          <body>extensionLocation->forAll (xp | extendedCase.extensionPoint->includes(xp))</body>
        </specification>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Extend-extendedCase" name="extendedCase" type="UseCase" association="A_extendedCase_extend" subsettedProperty="DirectedRelationship-target">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Extend-extendedCase-_ownedComment.0" annotatedElement="Extend-extendedCase">
          <body>References the use case that is being extended.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Extend-extension" name="extension" type="UseCase" association="A_extension_extend" subsettedProperty="DirectedRelationship-source">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Extend-extension-_ownedComment.0" annotatedElement="Extend-extension">
          <body>References the use case that represents the extension and owns the extend relationship.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Extend-condition" name="condition" lower="0" type="Constraint" association="A_condition_extend" subsettedProperty="Element-ownedElement" isComposite="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Extend-condition-_ownedComment.0" annotatedElement="Extend-condition">
          <body>References the condition that must hold when the first extension point is reached for the extension to take place. If no constraint is associated with the extend relationship, the extension is unconditional.&#xD;
</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Extend-extensionLocation" name="extensionLocation" isOrdered="true" upper="*" type="ExtensionPoint" association="A_extensionLocation_extension">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Extend-extensionLocation-_ownedComment.0" annotatedElement="Extend-extensionLocation">
          <body>An ordered list of extension points belonging to the extended use case, specifying where the respective behavioral fragments of the extending use case are to be inserted. The first fragment in the extending use case is associated with the first extension point in the list, the second fragment with the second point, and so on. (Note that, in most practical cases, the extending use case has just a single behavior fragment, so that the list of extension points is trivial.)&#xD;
</body>
        </ownedComment>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="Include" name="Include" superClass="DirectedRelationship NamedElement">
      <ownedComment xmi:type="cmof:Comment" xmi:id="Include-_ownedComment.0" annotatedElement="Include">
        <body>An include relationship defines that a use case contains the behavior defined in another use case.</body>
      </ownedComment>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Include-includingCase" name="includingCase" type="UseCase" association="A_includingCase_include" subsettedProperty="DirectedRelationship-source">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Include-includingCase-_ownedComment.0" annotatedElement="Include-includingCase">
          <body>References the use case which will include the addition and owns the include relationship.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Include-addition" name="addition" type="UseCase" association="A_addition_include" subsettedProperty="DirectedRelationship-target">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Include-addition-_ownedComment.0" annotatedElement="Include-addition">
          <body>References the use case that is to be included.&#xD;
</body>
        </ownedComment>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="UseCase" name="UseCase" superClass="BehavioredClassifier">
      <ownedComment xmi:type="cmof:Comment" xmi:id="UseCase-_ownedComment.0" annotatedElement="UseCase">
        <body>A use case is the specification of a set of actions performed by a system, which yields an observable result that is, typically, of value for one or more actors or other stakeholders of the system.</body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="UseCase-must_have_name" name="must_have_name" constrainedElement="UseCase">
        <ownedComment xmi:type="cmof:Comment" xmi:id="UseCase-must_have_name-_ownedComment.0" annotatedElement="UseCase-must_have_name">
          <body>A UseCase must have a name.</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="UseCase-must_have_name-_specification">
          <language>OCL</language>
          <body>self.name -> notEmpty ()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="UseCase-binary_associations" name="binary_associations" constrainedElement="UseCase">
        <ownedComment xmi:type="cmof:Comment" xmi:id="UseCase-binary_associations-_ownedComment.0" annotatedElement="UseCase-binary_associations">
          <body>UseCases can only be involved in binary Associations.</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="UseCase-binary_associations-_specification">
          <language>OCL</language>
          <body>true</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="UseCase-no_association_to_use_case" name="no_association_to_use_case" constrainedElement="UseCase">
        <ownedComment xmi:type="cmof:Comment" xmi:id="UseCase-no_association_to_use_case-_ownedComment.0" annotatedElement="UseCase-no_association_to_use_case">
          <body>UseCases can not have Associations to UseCases specifying the same subject.</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="UseCase-no_association_to_use_case-_specification">
          <language>OCL</language>
          <body>true</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="UseCase-cannot_include_self" name="cannot_include_self" constrainedElement="UseCase">
        <ownedComment xmi:type="cmof:Comment" xmi:id="UseCase-cannot_include_self-_ownedComment.0" annotatedElement="UseCase-cannot_include_self">
          <body>A use case cannot include use cases that directly or indirectly include it.</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="UseCase-cannot_include_self-_specification">
          <language>OCL</language>
          <body>not self.allIncludedUseCases()->includes(self)</body>
        </specification>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="UseCase-include" name="include" lower="0" upper="*" type="Include" association="A_includingCase_include" subsettedProperty="Namespace-ownedMember" isComposite="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="UseCase-include-_ownedComment.0" annotatedElement="UseCase-include">
          <body>References the Include relationships owned by this use case.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="UseCase-extend" name="extend" lower="0" upper="*" type="Extend" association="A_extension_extend" subsettedProperty="Namespace-ownedMember" isComposite="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="UseCase-extend-_ownedComment.0" annotatedElement="UseCase-extend">
          <body>References the Extend relationships owned by this use case.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="UseCase-extensionPoint" name="extensionPoint" lower="0" upper="*" type="ExtensionPoint" association="A_extensionPoint_useCase" subsettedProperty="Namespace-ownedMember" isComposite="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="UseCase-extensionPoint-_ownedComment.0" annotatedElement="UseCase-extensionPoint">
          <body>References the ExtensionPoints owned by the use case.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="UseCase-subject" name="subject" lower="0" upper="*" type="Classifier" association="A_subject_useCase">
        <ownedComment xmi:type="cmof:Comment" xmi:id="UseCase-subject-_ownedComment.0" annotatedElement="UseCase-subject">
          <body>References the subjects to which this use case applies. The subject or its parts realize all the use cases that apply to this subject. Use cases need not be attached to any specific subject, however. The subject may, but need not, own the use cases that apply to it.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="UseCase-allIncludedUseCases" name="allIncludedUseCases" isQuery="true" bodyCondition="UseCase-allIncludedUseCases-spec">
        <ownedComment xmi:type="cmof:Comment" xmi:id="UseCase-allIncludedUseCases-_ownedComment.0" annotatedElement="UseCase-allIncludedUseCases">
          <body>The query allIncludedUseCases() returns the transitive closure of all use cases (directly or indirectly) included by this use case.</body>
        </ownedComment>
        <ownedRule xmi:type="cmof:Constraint" xmi:id="UseCase-allIncludedUseCases-spec" name="spec" constrainedElement="UseCase-allIncludedUseCases">
          <specification xmi:type="cmof:OpaqueExpression" xmi:id="UseCase-allIncludedUseCases-spec-_specification">
            <language>OCL</language>
            <body>result = self.include->union(self.include->collect(in | in.allIncludedUseCases()))</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="UseCase-allIncludedUseCases-_member.1" lower="0" upper="*" type="UseCase" direction="return"/>
      </ownedOperation>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="ExtensionPoint" name="ExtensionPoint" superClass="RedefinableElement">
      <ownedComment xmi:type="cmof:Comment" xmi:id="ExtensionPoint-_ownedComment.0" annotatedElement="ExtensionPoint">
        <body>An extension point identifies a point in the behavior of a use case where that behavior can be extended by the behavior of some other (extending) use case, as specified by an extend relationship.</body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="ExtensionPoint-must_have_name" name="must_have_name" constrainedElement="ExtensionPoint">
        <ownedComment xmi:type="cmof:Comment" xmi:id="ExtensionPoint-must_have_name-_ownedComment.0" annotatedElement="ExtensionPoint-must_have_name">
          <body>An ExtensionPoint must have a name.</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="ExtensionPoint-must_have_name-_specification">
          <language>OCL</language>
          <body>self.name->notEmpty ()</body>
        </specification>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="ExtensionPoint-useCase" name="useCase" type="UseCase" association="A_extensionPoint_useCase">
        <ownedComment xmi:type="cmof:Comment" xmi:id="ExtensionPoint-useCase-_ownedComment.0" annotatedElement="ExtensionPoint-useCase">
          <body>References the use case that owns this extension point.</body>
        </ownedComment>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="Classifier" name="Classifier" isAbstract="true" superClass="RedefinableElement Type Namespace">
      <ownedComment xmi:type="cmof:Comment" xmi:id="Classifier-_ownedComment.0" annotatedElement="Classifier">
        <body>A classifier is a classification of instances - it describes a set of instances that have features in common. A classifier can specify a generalization hierarchy by referencing its general classifiers.</body>
      </ownedComment>
      <ownedComment xmi:type="cmof:Comment" xmi:id="Classifier-_ownedComment.1" annotatedElement="Classifier">
        <body>A classifier has the capability to own collaboration uses. These collaboration uses link a collaboration with the classifier to give a description of the workings of the classifier.</body>
      </ownedComment>
      <ownedComment xmi:type="cmof:Comment" xmi:id="Classifier-_ownedComment.2" annotatedElement="Classifier">
        <body>A classifier has the capability to own use cases. Although the owning classifier typically represents the subject to which the owned use cases apply, this is not necessarily the case. In principle, the same use case can be applied to multiple subjects, as identified by the subject association role of a use case.</body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="Classifier-no_cycles_in_generalization" name="no_cycles_in_generalization" constrainedElement="Classifier">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Classifier-no_cycles_in_generalization-_ownedComment.0" annotatedElement="Classifier-no_cycles_in_generalization">
          <body>Generalization hierarchies must be directed and acyclical. A classifier can not be both a transitively general and transitively specific classifier of the same classifier.</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="Classifier-no_cycles_in_generalization-_specification">
          <language>OCL</language>
          <body>not self.allParents()->includes(self)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="Classifier-generalization_hierarchies" name="generalization_hierarchies" constrainedElement="Classifier">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Classifier-generalization_hierarchies-_ownedComment.0" annotatedElement="Classifier-generalization_hierarchies">
          <body>Generalization hierarchies must be directed and acyclical. A classifier can not be both a transitively general and transitively specific classifier of the same classifier.</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="Classifier-generalization_hierarchies-_specification">
          <language>OCL</language>
          <body>not self.allParents()->includes(self)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="Classifier-specialize_type" name="specialize_type" constrainedElement="Classifier">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Classifier-specialize_type-_ownedComment.0" annotatedElement="Classifier-specialize_type">
          <body>A classifier may only specialize classifiers of a valid type.</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="Classifier-specialize_type-_specification">
          <language>OCL</language>
          <body>self.parents()->forAll(c | self.maySpecializeType(c))</body>
        </specification>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Classifier-isAbstract" name="isAbstract" type="Boolean" default="false">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Classifier-isAbstract-_ownedComment.0" annotatedElement="Classifier-isAbstract">
          <body>If true, the Classifier does not provide a complete declaration and can typically not be instantiated. An abstract classifier is intended to be used by other classifiers e.g. as the target of general metarelationships or generalization relationships.&#xD;
</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Classifier-generalization" name="generalization" lower="0" upper="*" type="Generalization" association="A_generalization_specific" subsettedProperty="Element-ownedElement" isComposite="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Classifier-generalization-_ownedComment.0" annotatedElement="Classifier-generalization">
          <body>Specifies the Generalization relationships for this Classifier. These Generalizations navigaten to more general classifiers in the generalization hierarchy.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Classifier-feature" name="feature" lower="0" upper="*" type="Feature" isDerivedUnion="true" association="A_feature_featuringClassifier" subsettedProperty="Namespace-member" isReadOnly="true" isDerived="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Classifier-feature-_ownedComment.0" annotatedElement="Classifier-feature">
          <body>Note that there may be members of the Classifier that are of the type Feature but are not included in this association, e.g. inherited features.</body>
        </ownedComment>
        <ownedComment xmi:type="cmof:Comment" xmi:id="Classifier-feature-_ownedComment.1" annotatedElement="Classifier-feature">
          <body>Specifies each feature defined in the classifier.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Classifier-inheritedMember" name="inheritedMember" lower="0" upper="*" type="NamedElement" association="A_inheritedMember_classifier" subsettedProperty="Namespace-member" isReadOnly="true" isDerived="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Classifier-inheritedMember-_ownedComment.0" annotatedElement="Classifier-inheritedMember">
          <body>Specifies all elements inherited by this classifier from the general classifiers.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Classifier-redefinedClassifier" name="redefinedClassifier" lower="0" upper="*" type="Classifier" association="A_redefinedClassifier_classifier" subsettedProperty="RedefinableElement-redefinedElement">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Classifier-redefinedClassifier-_ownedComment.0" annotatedElement="Classifier-redefinedClassifier">
          <body>References the Classifiers that are redefined by this Classifier.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Classifier-general" name="general" lower="0" upper="*" type="Classifier" association="A_general_classifier" isDerived="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Classifier-general-_ownedComment.0" annotatedElement="Classifier-general">
          <body>References the general classifier in the Generalization relationship.</body>
        </ownedComment>
        <ownedComment xmi:type="cmof:Comment" xmi:id="Classifier-general-_ownedComment.1" annotatedElement="Classifier-general">
          <body>Specifies the general Classifiers for this Classifier.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Classifier-substitution" name="substitution" lower="0" upper="*" type="Substitution" association="A_substitution_substitutingClassifier" subsettedProperty="Element-ownedElement NamedElement-clientDependency" isComposite="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Classifier-substitution-_ownedComment.0" annotatedElement="Classifier-substitution">
          <body>References the substitutions that are owned by this Classifier.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Classifier-attribute" name="attribute" lower="0" upper="*" type="Property" isDerivedUnion="true" association="A_attribute_classifier" subsettedProperty="Classifier-feature" isReadOnly="true" isDerived="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Classifier-attribute-_ownedComment.0" annotatedElement="Classifier-attribute">
          <body>Refers to all of the Properties that are direct (i.e. not inherited or imported) attributes of the classifier.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Classifier-ownedUseCase" name="ownedUseCase" lower="0" upper="*" type="UseCase" association="A_ownedUseCase_classifier" subsettedProperty="Namespace-ownedMember" isComposite="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Classifier-ownedUseCase-_ownedComment.0" annotatedElement="Classifier-ownedUseCase">
          <body>References the use cases owned by this classifier.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Classifier-useCase" name="useCase" lower="0" upper="*" type="UseCase" association="A_subject_useCase">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Classifier-useCase-_ownedComment.0" annotatedElement="Classifier-useCase">
          <body>The set of use cases for which this Classifier is the subject.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="Classifier-general.1" name="general" isQuery="true" bodyCondition="Classifier-general.1-spec">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Classifier-general.1-_ownedComment.0" annotatedElement="Classifier-general.1">
          <body>The general classifiers are the classifiers referenced by the generalization relationships.</body>
        </ownedComment>
        <ownedRule xmi:type="cmof:Constraint" xmi:id="Classifier-general.1-spec" name="spec" constrainedElement="Classifier-general.1 Classifier-general">
          <specification xmi:type="cmof:OpaqueExpression" xmi:id="Classifier-general.1-spec-_specification">
            <language>OCL</language>
            <body>result = self.parents()</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="Classifier-general.1-_member.1" lower="0" upper="*" type="Classifier" direction="return"/>
      </ownedOperation>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="Classifier-inheritedMember.1" name="inheritedMember" isQuery="true" bodyCondition="Classifier-inheritedMember.1-spec">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Classifier-inheritedMember.1-_ownedComment.0" annotatedElement="Classifier-inheritedMember.1">
          <body>The inheritedMember association is derived by inheriting the inheritable members of the parents.</body>
        </ownedComment>
        <ownedRule xmi:type="cmof:Constraint" xmi:id="Classifier-inheritedMember.1-spec" name="spec" constrainedElement="Classifier-inheritedMember.1 Classifier-inheritedMember">
          <specification xmi:type="cmof:OpaqueExpression" xmi:id="Classifier-inheritedMember.1-spec-_specification">
            <language>OCL</language>
            <body>result = self.inherit(self.parents()->collect(p | p.inheritableMembers(self))</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="Classifier-inheritedMember.1-_member.1" lower="0" upper="*" type="NamedElement" direction="return"/>
      </ownedOperation>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="Classifier-allFeatures" name="allFeatures" isQuery="true" bodyCondition="Classifier-allFeatures-spec">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Classifier-allFeatures-_ownedComment.0" annotatedElement="Classifier-allFeatures">
          <body>The query allFeatures() gives all of the features in the namespace of the classifier. In general, through mechanisms such as inheritance, this will be a larger set than feature.</body>
        </ownedComment>
        <ownedRule xmi:type="cmof:Constraint" xmi:id="Classifier-allFeatures-spec" name="spec" constrainedElement="Classifier-allFeatures">
          <specification xmi:type="cmof:OpaqueExpression" xmi:id="Classifier-allFeatures-spec-_specification">
            <language>OCL</language>
            <body>result = member->select(oclIsKindOf(Feature))</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="Classifier-allFeatures-_member.1" lower="0" upper="*" type="Feature" direction="return"/>
      </ownedOperation>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="Classifier-parents" name="parents" isQuery="true" bodyCondition="Classifier-parents-spec">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Classifier-parents-_ownedComment.0" annotatedElement="Classifier-parents">
          <body>The query parents() gives all of the immediate ancestors of a generalized Classifier.</body>
        </ownedComment>
        <ownedRule xmi:type="cmof:Constraint" xmi:id="Classifier-parents-spec" name="spec" constrainedElement="Classifier-parents">
          <specification xmi:type="cmof:OpaqueExpression" xmi:id="Classifier-parents-spec-_specification">
            <language>OCL</language>
            <body>result = generalization.general</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="Classifier-parents-_member.1" lower="0" upper="*" type="Classifier" direction="return"/>
      </ownedOperation>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="Classifier-inheritableMembers" name="inheritableMembers" isQuery="true" precondition="Classifier-inheritableMembers-_ownedRule.0" postcondition="Classifier-inheritableMembers-_ownedRule.0" bodyCondition="Classifier-inheritableMembers-spec">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Classifier-inheritableMembers-_ownedComment.0" annotatedElement="Classifier-inheritableMembers">
          <body>The query inheritableMembers() gives all of the members of a classifier that may be inherited in one of its descendants, subject to whatever visibility restrictions apply.</body>
        </ownedComment>
        <ownedRule xmi:type="cmof:Constraint" xmi:id="Classifier-inheritableMembers-_ownedRule.0" constrainedElement="Classifier-inheritableMembers">
          <specification xmi:type="cmof:OpaqueExpression" xmi:id="Classifier-inheritableMembers-_ownedRule.0-_specification">
            <language>OCL</language>
            <body>c.allParents()->includes(self)</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="cmof:Constraint" xmi:id="Classifier-inheritableMembers-spec" name="spec" constrainedElement="Classifier-inheritableMembers">
          <specification xmi:type="cmof:OpaqueExpression" xmi:id="Classifier-inheritableMembers-spec-_specification">
            <language>OCL</language>
            <body>result = member->select(m | c.hasVisibilityOf(m))</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="Classifier-inheritableMembers-_member.2" lower="0" upper="*" type="NamedElement" direction="return"/>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="Classifier-inheritableMembers-c" name="c" type="Classifier"/>
      </ownedOperation>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="Classifier-hasVisibilityOf" name="hasVisibilityOf" isQuery="true" precondition="Classifier-hasVisibilityOf-_ownedRule.0" bodyCondition="Classifier-hasVisibilityOf-spec">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Classifier-hasVisibilityOf-_ownedComment.0" annotatedElement="Classifier-hasVisibilityOf">
          <body>The query hasVisibilityOf() determines whether a named element is visible in the classifier. By default all are visible. It is only called when the argument is something owned by a parent.</body>
        </ownedComment>
        <ownedRule xmi:type="cmof:Constraint" xmi:id="Classifier-hasVisibilityOf-_ownedRule.0" constrainedElement="Classifier-hasVisibilityOf">
          <specification xmi:type="cmof:OpaqueExpression" xmi:id="Classifier-hasVisibilityOf-_ownedRule.0-_specification">
            <language>OCL</language>
            <body>self.allParents()->collect(c | c.member)->includes(n)</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="cmof:Constraint" xmi:id="Classifier-hasVisibilityOf-spec" name="spec" constrainedElement="Classifier-hasVisibilityOf">
          <specification xmi:type="cmof:OpaqueExpression" xmi:id="Classifier-hasVisibilityOf-spec-_specification">
            <language>OCL</language>
            <body>result = if (self.inheritedMember->includes(n)) then (n.visibility &lt;> #private) else true</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="Classifier-hasVisibilityOf-_member.2" type="Boolean" direction="return"/>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="Classifier-hasVisibilityOf-n" name="n" type="NamedElement"/>
      </ownedOperation>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="Classifier-conformsTo" name="conformsTo" isQuery="true" redefinedOperation="Type-conformsTo" bodyCondition="Classifier-conformsTo-spec">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Classifier-conformsTo-_ownedComment.0" annotatedElement="Classifier-conformsTo">
          <body>The query conformsTo() gives true for a classifier that defines a type that conforms to another. This is used, for example, in the specification of signature conformance for operations.</body>
        </ownedComment>
        <ownedRule xmi:type="cmof:Constraint" xmi:id="Classifier-conformsTo-spec" name="spec" constrainedElement="Classifier-conformsTo">
          <specification xmi:type="cmof:OpaqueExpression" xmi:id="Classifier-conformsTo-spec-_specification">
            <language>OCL</language>
            <body>result = (self=other) or (self.allParents()->includes(other))</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="Classifier-conformsTo-_member.1" type="Boolean" direction="return"/>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="Classifier-conformsTo-other" name="other" type="Classifier"/>
      </ownedOperation>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="Classifier-inherit" name="inherit" isQuery="true" bodyCondition="Classifier-inherit-spec">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Classifier-inherit-_ownedComment.0" annotatedElement="Classifier-inherit">
          <body>The inherit operation is overridden to exclude redefined properties.</body>
        </ownedComment>
        <ownedComment xmi:type="cmof:Comment" xmi:id="Classifier-inherit-_ownedComment.1" annotatedElement="Classifier-inherit">
          <body>The query inherit() defines how to inherit a set of elements. Here the operation is defined to inherit them all. It is intended to be redefined in circumstances where inheritance is affected by redefinition.</body>
        </ownedComment>
        <ownedRule xmi:type="cmof:Constraint" xmi:id="Classifier-inherit-spec" name="spec" constrainedElement="Classifier-inherit">
          <specification xmi:type="cmof:OpaqueExpression" xmi:id="Classifier-inherit-spec-_specification">
            <language>OCL</language>
            <body>result = inhs</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="Classifier-inherit-_member.1" lower="0" upper="*" type="NamedElement" direction="return"/>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="Classifier-inherit-inhs" lower="0" upper="*" name="inhs" type="NamedElement"/>
      </ownedOperation>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="Classifier-maySpecializeType" name="maySpecializeType" isQuery="true" bodyCondition="Classifier-maySpecializeType-spec">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Classifier-maySpecializeType-_ownedComment.0" annotatedElement="Classifier-maySpecializeType">
          <body>The query maySpecializeType() determines whether this classifier may have a generalization relationship to classifiers of the specified type. By default a classifier may specialize classifiers of the same or a more general type. It is intended to be redefined by classifiers that have different specialization constraints.</body>
        </ownedComment>
        <ownedRule xmi:type="cmof:Constraint" xmi:id="Classifier-maySpecializeType-spec" name="spec" constrainedElement="Classifier-maySpecializeType">
          <specification xmi:type="cmof:OpaqueExpression" xmi:id="Classifier-maySpecializeType-spec-_specification">
            <language>OCL</language>
            <body>result = self.oclIsKindOf(c.oclType)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="Classifier-maySpecializeType-_member.1" type="Boolean" direction="return"/>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="Classifier-maySpecializeType-c" name="c" type="Classifier"/>
      </ownedOperation>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="Classifier-allParents" name="allParents" isQuery="true" bodyCondition="Classifier-allParents-spec">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Classifier-allParents-_ownedComment.0" annotatedElement="Classifier-allParents">
          <body>The query allParents() gives all of the direct and indirect ancestors of a generalized Classifier.</body>
        </ownedComment>
        <ownedRule xmi:type="cmof:Constraint" xmi:id="Classifier-allParents-spec" name="spec" constrainedElement="Classifier-allParents">
          <specification xmi:type="cmof:OpaqueExpression" xmi:id="Classifier-allParents-spec-_specification">
            <language>OCL</language>
            <body>result = self.parents()->union(self.parents()->collect(p | p.allParents())</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="Classifier-allParents-_member.1" lower="0" upper="*" type="Classifier" direction="return"/>
      </ownedOperation>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_includingCase_include" name="A_includingCase_include" memberEnd="Include-includingCase UseCase-include"/>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_addition_include" name="A_addition_include" memberEnd="Include-addition A_addition_include-include">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_addition_include-include" name="include" lower="0" upper="*" type="Include" association="A_addition_include"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_extendedCase_extend" name="A_extendedCase_extend" memberEnd="Extend-extendedCase A_extendedCase_extend-extend">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_extendedCase_extend-extend" name="extend" lower="0" upper="*" type="Extend" association="A_extendedCase_extend"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_extension_extend" name="A_extension_extend" memberEnd="Extend-extension UseCase-extend"/>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_extensionPoint_useCase" name="A_extensionPoint_useCase" memberEnd="UseCase-extensionPoint ExtensionPoint-useCase"/>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_condition_extend" name="A_condition_extend" memberEnd="Extend-condition A_condition_extend-extend">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_condition_extend-extend" name="extend" lower="0" type="Extend" association="A_condition_extend"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_extensionLocation_extension" name="A_extensionLocation_extension" memberEnd="Extend-extensionLocation A_extensionLocation_extension-extension">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_extensionLocation_extension-extension" name="extension" lower="0" upper="*" type="Extend" association="A_extensionLocation_extension"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_ownedUseCase_classifier" name="A_ownedUseCase_classifier" memberEnd="Classifier-ownedUseCase A_ownedUseCase_classifier-classifier">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_ownedUseCase_classifier-classifier" name="classifier" lower="0" type="Classifier" association="A_ownedUseCase_classifier"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_subject_useCase" name="A_subject_useCase" memberEnd="UseCase-subject Classifier-useCase"/>
    <ownedMember xmi:type="cmof:Class" xmi:id="BehavioralFeature" name="BehavioralFeature" isAbstract="true" superClass="Feature Namespace">
      <ownedComment xmi:type="cmof:Comment" xmi:id="BehavioralFeature-_ownedComment.0" annotatedElement="BehavioralFeature">
        <body>A behavioral feature is a feature of a classifier that specifies an aspect of the behavior of its instances.</body>
      </ownedComment>
      <ownedComment xmi:type="cmof:Comment" xmi:id="BehavioralFeature-_ownedComment.1" annotatedElement="BehavioralFeature">
        <body>A behavioral feature is implemented (realized) by a behavior. A behavioral feature specifies that a classifier will respond to a designated request by invoking its implementing method.</body>
      </ownedComment>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="BehavioralFeature-ownedParameter" name="ownedParameter" isOrdered="true" lower="0" upper="*" type="Parameter" association="A_ownedParameter_ownerFormalParam" subsettedProperty="Namespace-ownedMember" isComposite="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="BehavioralFeature-ownedParameter-_ownedComment.0" annotatedElement="BehavioralFeature-ownedParameter">
          <body>Specifies the ordered set of formal parameters of this BehavioralFeature.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="BehavioralFeature-isAbstract" name="isAbstract" type="Boolean" default="false">
        <ownedComment xmi:type="cmof:Comment" xmi:id="BehavioralFeature-isAbstract-_ownedComment.0" annotatedElement="BehavioralFeature-isAbstract">
          <body>If true, then the behavioral feature does not have an implementation, and one must be supplied by a more specific element. If false, the behavioral feature must have an implementation in the classifier or one must be inherited from a more general element.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="BehavioralFeature-method" name="method" lower="0" upper="*" type="Behavior" association="A_method_specification">
        <ownedComment xmi:type="cmof:Comment" xmi:id="BehavioralFeature-method-_ownedComment.0" annotatedElement="BehavioralFeature-method">
          <body>A behavioral description that implements the behavioral feature. There may be at most one behavior for a particular pairing of a classifier (as owner of the behavior) and a behavioral feature (as specification of the behavior).</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="BehavioralFeature-concurrency" name="concurrency" type="CallConcurrencyKind" default="sequential">
        <ownedComment xmi:type="cmof:Comment" xmi:id="BehavioralFeature-concurrency-_ownedComment.0" annotatedElement="BehavioralFeature-concurrency">
          <body>Specifies the semantics of concurrent calls to the same passive instance (i.e., an instance originating from a class with isActive being false). Active instances control access to their own behavioral features.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="BehavioralFeature-raisedException" name="raisedException" lower="0" upper="*" type="Type" association="A_raisedException_behavioralFeature">
        <ownedComment xmi:type="cmof:Comment" xmi:id="BehavioralFeature-raisedException-_ownedComment.0" annotatedElement="BehavioralFeature-raisedException">
          <body>References the Types representing exceptions that may be raised during an invocation of this feature.</body>
        </ownedComment>
        <ownedComment xmi:type="cmof:Comment" xmi:id="BehavioralFeature-raisedException-_ownedComment.1" annotatedElement="BehavioralFeature-raisedException">
          <body>The signals that the behavioral feature raises as exceptions.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="BehavioralFeature-isDistinguishableFrom" name="isDistinguishableFrom" isQuery="true" redefinedOperation="NamedElement-isDistinguishableFrom" bodyCondition="BehavioralFeature-isDistinguishableFrom-spec">
        <ownedComment xmi:type="cmof:Comment" xmi:id="BehavioralFeature-isDistinguishableFrom-_ownedComment.0" annotatedElement="BehavioralFeature-isDistinguishableFrom">
          <body>The query isDistinguishableFrom() determines whether two BehavioralFeatures may coexist in the same Namespace. It specifies that they have to have different signatures.</body>
        </ownedComment>
        <ownedRule xmi:type="cmof:Constraint" xmi:id="BehavioralFeature-isDistinguishableFrom-spec" name="spec" constrainedElement="BehavioralFeature-isDistinguishableFrom">
          <specification xmi:type="cmof:OpaqueExpression" xmi:id="BehavioralFeature-isDistinguishableFrom-spec-_specification">
            <language>OCL</language>
            <body>result = if n.oclIsKindOf(BehavioralFeature)&#xA;then&#xA;  if ns.getNamesOfMember(self)->intersection(ns.getNamesOfMember(n))->notEmpty()&#xA;  then Set{}->including(self)->including(n)->isUnique(bf | bf.ownedParameter->collect(type))&#xA;  else true&#xA;  endif&#xA;else true&#xA;endif</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="BehavioralFeature-isDistinguishableFrom-_member.1" type="Boolean" direction="return"/>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="BehavioralFeature-isDistinguishableFrom-n" name="n" type="NamedElement"/>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="BehavioralFeature-isDistinguishableFrom-ns" name="ns" type="Namespace"/>
      </ownedOperation>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="CallEvent" name="CallEvent" superClass="MessageEvent">
      <ownedComment xmi:type="cmof:Comment" xmi:id="CallEvent-_ownedComment.0" annotatedElement="CallEvent">
        <body>A call event models the receipt by an object of a message invoking a call of an operation.</body>
      </ownedComment>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="CallEvent-operation" name="operation" type="Operation" association="A_operation_callEvent">
        <ownedComment xmi:type="cmof:Comment" xmi:id="CallEvent-operation-_ownedComment.0" annotatedElement="CallEvent-operation">
          <body>Designates the operation whose invocation raised the call event.</body>
        </ownedComment>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="ChangeEvent" name="ChangeEvent" superClass="Event">
      <ownedComment xmi:type="cmof:Comment" xmi:id="ChangeEvent-_ownedComment.0" annotatedElement="ChangeEvent">
        <body>A change event models a change in the system configuration that makes a condition true.</body>
      </ownedComment>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="ChangeEvent-changeExpression" name="changeExpression" type="ValueSpecification" association="A_changeExpression_changeEvent" subsettedProperty="Element-ownedElement" isComposite="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="ChangeEvent-changeExpression-_ownedComment.0" annotatedElement="ChangeEvent-changeExpression">
          <body>A Boolean-valued expression that will result in a change event whenever its value changes from false to true.</body>
        </ownedComment>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="Class" name="Class" superClass="BehavioredClassifier">
      <ownedComment xmi:type="cmof:Comment" xmi:id="Class-_ownedComment.0" annotatedElement="Class">
        <body>A class describes a set of objects that share the same specifications of features, constraints, and semantics.</body>
      </ownedComment>
      <ownedComment xmi:type="cmof:Comment" xmi:id="Class-_ownedComment.1" annotatedElement="Class">
        <body>A class may be designated as active (i.e., each of its instances having its own thread of control) or passive (i.e., each of its instances executing within the context of some other object). A class may also specify which signals the instances of this class handle.</body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="Class-passive_class" name="passive_class" constrainedElement="Class">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Class-passive_class-_ownedComment.0" annotatedElement="Class-passive_class">
          <body>A passive class may not own receptions.</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="Class-passive_class-_specification">
          <language>OCL</language>
          <body>not self.isActive implies self.ownedReception.isEmpty()</body>
        </specification>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Class-isAbstract" name="isAbstract" type="Boolean" redefinedProperty="Classifier-isAbstract" default="false">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Class-isAbstract-_ownedComment.0" annotatedElement="Class-isAbstract">
          <body>True when a class is abstract.</body>
        </ownedComment>
        <ownedComment xmi:type="cmof:Comment" xmi:id="Class-isAbstract-_ownedComment.1" annotatedElement="Class-isAbstract">
          <body>If true, the Classifier does not provide a complete declaration and can typically not be instantiated. An abstract classifier is intended to be used by other classifiers e.g. as the target of general metarelationships or generalization relationships.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Class-nestedClassifier" name="nestedClassifier" isOrdered="true" lower="0" upper="*" type="Classifier" association="A_nestedClassifier_class" subsettedProperty="Namespace-ownedMember" isComposite="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Class-nestedClassifier-_ownedComment.0" annotatedElement="Class-nestedClassifier">
          <body>References all the Classifiers that are defined (nested) within the Class.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Class-ownedAttribute" name="ownedAttribute" isOrdered="true" lower="0" upper="*" type="Property" association="A_ownedAttribute_class" subsettedProperty="Classifier-attribute Namespace-ownedMember" isComposite="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Class-ownedAttribute-_ownedComment.0" annotatedElement="Class-ownedAttribute">
          <body>The attributes (i.e. the properties) owned by the class.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Class-ownedOperation" name="ownedOperation" isOrdered="true" lower="0" upper="*" type="Operation" association="A_ownedOperation_class" subsettedProperty="Classifier-feature Namespace-ownedMember" isComposite="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Class-ownedOperation-_ownedComment.0" annotatedElement="Class-ownedOperation">
          <body>The operations owned by the class.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Class-superClass" name="superClass" lower="0" upper="*" type="Class" association="A_superClass_class" redefinedProperty="Classifier-general" isDerived="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Class-superClass-_ownedComment.0" annotatedElement="Class-superClass">
          <body>This gives the superclasses of a class.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Class-isActive" name="isActive" type="Boolean" default="false">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Class-isActive-_ownedComment.0" annotatedElement="Class-isActive">
          <body>Determines whether an object specified by this class is active or not. If true, then the owning class is referred to as an active class. If false, then such a class is referred to as a passive class.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Class-ownedReception" name="ownedReception" lower="0" upper="*" type="Reception" association="A_ownedReception_class" subsettedProperty="Namespace-ownedMember Classifier-feature" isComposite="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Class-ownedReception-_ownedComment.0" annotatedElement="Class-ownedReception">
          <body>Receptions that objects of this class are willing to accept.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="Class-inherit" name="inherit" isQuery="true" redefinedOperation="Classifier-inherit" bodyCondition="Class-inherit-spec">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Class-inherit-_ownedComment.0" annotatedElement="Class-inherit">
          <body>The inherit operation is overridden to exclude redefined properties.</body>
        </ownedComment>
        <ownedRule xmi:type="cmof:Constraint" xmi:id="Class-inherit-spec" name="spec" constrainedElement="Class-inherit">
          <specification xmi:type="cmof:OpaqueExpression" xmi:id="Class-inherit-spec-_specification">
            <language>OCL</language>
            <body>result = inhs->excluding(inh | ownedMember->select(oclIsKindOf(RedefinableElement))->select(redefinedElement->includes(inh)))</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="Class-inherit-_member.1" lower="0" upper="*" type="NamedElement" direction="return"/>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="Class-inherit-inhs" lower="0" upper="*" name="inhs" type="NamedElement"/>
      </ownedOperation>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="Trigger" name="Trigger" superClass="NamedElement">
      <ownedComment xmi:type="cmof:Comment" xmi:id="Trigger-_ownedComment.0" annotatedElement="Trigger">
        <body>A trigger relates an event to a behavior that may affect an instance of the classifier.</body>
      </ownedComment>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Trigger-event" name="event" type="Event" association="A_event_trigger">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Trigger-event-_ownedComment.0" annotatedElement="Trigger-event">
          <body>The event that causes the trigger.</body>
        </ownedComment>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="Interface" name="Interface" superClass="Classifier">
      <ownedComment xmi:type="cmof:Comment" xmi:id="Interface-_ownedComment.0" annotatedElement="Interface">
        <body>An interface is a kind of classifier that represents a declaration of a set of coherent public features and obligations. An interface specifies a contract; any instance of a classifier that realizes the interface must fulfill that contract. The obligations that may be associated with an interface are in the form of various kinds of constraints (such as pre- and post-conditions) or protocol specifications, which may impose ordering restrictions on interactions through the interface.</body>
      </ownedComment>
      <ownedComment xmi:type="cmof:Comment" xmi:id="Interface-_ownedComment.1" annotatedElement="Interface">
        <body>Interfaces may include receptions (in addition to operations).</body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="Interface-visibility" name="visibility" constrainedElement="Interface">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Interface-visibility-_ownedComment.0" annotatedElement="Interface-visibility">
          <body>The visibility of all features owned by an interface must be public.</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="Interface-visibility-_specification">
          <language>OCL</language>
          <body>self.feature->forAll(f | f.visibility = #public)</body>
        </specification>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Interface-ownedAttribute" name="ownedAttribute" isOrdered="true" lower="0" upper="*" type="Property" association="A_interface_ownedAttribute" subsettedProperty="Classifier-attribute Namespace-ownedMember" isComposite="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Interface-ownedAttribute-_ownedComment.0" annotatedElement="Interface-ownedAttribute">
          <body>The attributes (i.e. the properties) owned by the class.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Interface-ownedOperation" name="ownedOperation" isOrdered="true" lower="0" upper="*" type="Operation" association="A_interface_ownedOperation" subsettedProperty="Classifier-feature Namespace-ownedMember" isComposite="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Interface-ownedOperation-_ownedComment.0" annotatedElement="Interface-ownedOperation">
          <body>The operations owned by the class.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Interface-nestedClassifier" name="nestedClassifier" isOrdered="true" lower="0" upper="*" type="Classifier" association="A_nestedClassifier_interface" subsettedProperty="Namespace-ownedMember" isComposite="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Interface-nestedClassifier-_ownedComment.0" annotatedElement="Interface-nestedClassifier">
          <body>References all the Classifiers that are defined (nested) within the Class.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Interface-redefinedInterface" name="redefinedInterface" lower="0" upper="*" type="Interface" association="A_interface_redefinedInterface" subsettedProperty="RedefinableElement-redefinedElement">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Interface-redefinedInterface-_ownedComment.0" annotatedElement="Interface-redefinedInterface">
          <body>References all the Interfaces redefined by this Interface.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Interface-ownedReception" name="ownedReception" lower="0" upper="*" type="Reception" association="A_ownedReception_interface" subsettedProperty="Classifier-feature Namespace-ownedMember" isComposite="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Interface-ownedReception-_ownedComment.0" annotatedElement="Interface-ownedReception">
          <body>Receptions that objects providing this interface are willing to accept.</body>
        </ownedComment>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="Reception" name="Reception" superClass="BehavioralFeature">
      <ownedComment xmi:type="cmof:Comment" xmi:id="Reception-_ownedComment.0" annotatedElement="Reception">
        <body>A reception is a declaration stating that a classifier is prepared to react to the receipt of a signal. A reception designates a signal and specifies the expected behavioral response. The details of handling a signal are specified by the behavior associated with the reception or the classifier itself.</body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="Reception-not_query" name="not_query" constrainedElement="Reception">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Reception-not_query-_ownedComment.0" annotatedElement="Reception-not_query">
          <body>A Reception can not be a query.</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="Reception-not_query-_specification">
          <language>OCL</language>
          <body>not self.isQuery</body>
        </specification>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Reception-signal" name="signal" lower="0" type="Signal" association="A_reception_signal">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Reception-signal-_ownedComment.0" annotatedElement="Reception-signal">
          <body>The signal that this reception handles.</body>
        </ownedComment>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="Signal" name="Signal" superClass="Classifier">
      <ownedComment xmi:type="cmof:Comment" xmi:id="Signal-_ownedComment.0" annotatedElement="Signal">
        <body>A signal is a specification of send request instances communicated between objects. The receiving object handles the received request instances as specified by its receptions. The data carried by a send request (which was passed to it by the send invocation occurrence that caused that request) are represented as attributes of the signal. A signal is defined independently of the classifiers handling the signal occurrence.</body>
      </ownedComment>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Signal-ownedAttribute" name="ownedAttribute" isOrdered="true" lower="0" upper="*" type="Property" association="A_ownedAttribute_owningSignal" subsettedProperty="Classifier-attribute Namespace-ownedMember" isComposite="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Signal-ownedAttribute-_ownedComment.0" annotatedElement="Signal-ownedAttribute">
          <body>The attributes owned by the signal.</body>
        </ownedComment>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="SignalEvent" name="SignalEvent" superClass="MessageEvent">
      <ownedComment xmi:type="cmof:Comment" xmi:id="SignalEvent-_ownedComment.0" annotatedElement="SignalEvent">
        <body>A signal event represents the receipt of an asynchronous signal instance. A signal event may, for example, cause a state machine to trigger a transition.</body>
      </ownedComment>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="SignalEvent-signal" name="signal" type="Signal" association="A_signal_signalEvent">
        <ownedComment xmi:type="cmof:Comment" xmi:id="SignalEvent-signal-_ownedComment.0" annotatedElement="SignalEvent-signal">
          <body>The specific signal that is associated with this event.</body>
        </ownedComment>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="TimeEvent" name="TimeEvent" superClass="Event">
      <ownedComment xmi:type="cmof:Comment" xmi:id="TimeEvent-_ownedComment.0" annotatedElement="TimeEvent">
        <body>A time event specifies a point in time. At the specified time, the event occurs.</body>
      </ownedComment>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="TimeEvent-isRelative" name="isRelative" type="Boolean" default="false">
        <ownedComment xmi:type="cmof:Comment" xmi:id="TimeEvent-isRelative-_ownedComment.0" annotatedElement="TimeEvent-isRelative">
          <body>Specifies whether it is relative or absolute time.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="TimeEvent-when" name="when" type="ValueSpecification" association="A_when_timeEvent" subsettedProperty="Element-ownedElement" isComposite="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="TimeEvent-when-_ownedComment.0" annotatedElement="TimeEvent-when">
          <body>Specifies the corresponding time deadline.</body>
        </ownedComment>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="MessageEvent" name="MessageEvent" isAbstract="true" superClass="Event">
      <ownedComment xmi:type="cmof:Comment" xmi:id="MessageEvent-_ownedComment.0" annotatedElement="MessageEvent">
        <body>A message event specifies the receipt by an object of either a call or a signal.</body>
      </ownedComment>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="AnyReceiveEvent" name="AnyReceiveEvent" superClass="MessageEvent">
      <ownedComment xmi:type="cmof:Comment" xmi:id="AnyReceiveEvent-_ownedComment.0" annotatedElement="AnyReceiveEvent">
        <body>A transition trigger associated with an any receive event specifies that the transition is to be triggered by the receipt of any message that is not explicitly referenced in another transition from the same vertex.</body>
      </ownedComment>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="BehavioredClassifier" name="BehavioredClassifier" isAbstract="true" superClass="Classifier">
      <ownedComment xmi:type="cmof:Comment" xmi:id="BehavioredClassifier-_ownedComment.0" annotatedElement="BehavioredClassifier">
        <body>A behaviored classifier may have an interface realization.</body>
      </ownedComment>
      <ownedComment xmi:type="cmof:Comment" xmi:id="BehavioredClassifier-_ownedComment.1" annotatedElement="BehavioredClassifier">
        <body>A classifier can have behavior specifications defined in its namespace. One of these may specify the behavior of the classifier itself.</body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="BehavioredClassifier-class_behavior" name="class_behavior" constrainedElement="BehavioredClassifier">
        <ownedComment xmi:type="cmof:Comment" xmi:id="BehavioredClassifier-class_behavior-_ownedComment.0" annotatedElement="BehavioredClassifier-class_behavior">
          <body>If a behavior is classifier behavior, it does not have a specification.</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="BehavioredClassifier-class_behavior-_specification">
          <language>OCL</language>
          <body>self.classifierBehavior.notEmpty() implies self.specification.isEmpty()</body>
        </specification>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="BehavioredClassifier-ownedBehavior" name="ownedBehavior" lower="0" upper="*" type="Behavior" association="A_behavioredClassifier_ownedBehavior" subsettedProperty="Namespace-ownedMember" isComposite="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="BehavioredClassifier-ownedBehavior-_ownedComment.0" annotatedElement="BehavioredClassifier-ownedBehavior">
          <body>References behavior specifications owned by a classifier.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="BehavioredClassifier-classifierBehavior" name="classifierBehavior" lower="0" type="Behavior" association="A_classifierBehavior_behavioredClassifier" subsettedProperty="BehavioredClassifier-ownedBehavior">
        <ownedComment xmi:type="cmof:Comment" xmi:id="BehavioredClassifier-classifierBehavior-_ownedComment.0" annotatedElement="BehavioredClassifier-classifierBehavior">
          <body>A behavior specification that specifies the behavior of the classifier itself.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="BehavioredClassifier-interfaceRealization" name="interfaceRealization" lower="0" upper="*" type="InterfaceRealization" association="A_interfaceRealization_implementingClassifier" subsettedProperty="Element-ownedElement NamedElement-clientDependency" isComposite="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="BehavioredClassifier-interfaceRealization-_ownedComment.0" annotatedElement="BehavioredClassifier-interfaceRealization">
          <body>The set of InterfaceRealizations owned by the BehavioredClassifier. Interface realizations reference the Interfaces of which the BehavioredClassifier is an implementation.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="BehavioredClassifier-ownedTrigger" name="ownedTrigger" lower="0" upper="*" type="Trigger" association="A_ownedTrigger_behavioredClassifier" subsettedProperty="Namespace-ownedMember" isComposite="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="BehavioredClassifier-ownedTrigger-_ownedComment.0" annotatedElement="BehavioredClassifier-ownedTrigger">
          <body>References Trigger descriptions owned by a Classifier.</body>
        </ownedComment>
      </ownedAttribute>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="Event" name="Event" isAbstract="true" superClass="PackageableElement">
      <ownedComment xmi:type="cmof:Comment" xmi:id="Event-_ownedComment.0" annotatedElement="Event">
        <body>An event is the specification of some occurrence that may potentially trigger effects by an object.</body>
      </ownedComment>
    </ownedMember>
    <ownedMember xmi:type="cmof:Class" xmi:id="Operation" name="Operation" superClass="BehavioralFeature">
      <ownedComment xmi:type="cmof:Comment" xmi:id="Operation-_ownedComment.0" annotatedElement="Operation">
        <body>An operation is a behavioral feature of a classifier that specifies the name, type, parameters, and constraints for invoking an associated behavior.</body>
      </ownedComment>
      <ownedComment xmi:type="cmof:Comment" xmi:id="Operation-_ownedComment.1" annotatedElement="Operation">
        <body>An operation may invoke both the execution of method behaviors as well as other behavioral responses.</body>
      </ownedComment>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="Operation-at_most_one_return" name="at_most_one_return" constrainedElement="Operation">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Operation-at_most_one_return-_ownedComment.0" annotatedElement="Operation-at_most_one_return">
          <body>An operation can have at most one return parameter; i.e., an owned parameter with the direction set to 'return'</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="Operation-at_most_one_return-_specification">
          <language>OCL</language>
          <body>self.ownedParameter->select(par | par.direction = #return)->size() &lt;= 1</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:type="cmof:Constraint" xmi:id="Operation-only_body_for_query" name="only_body_for_query" constrainedElement="Operation">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Operation-only_body_for_query-_ownedComment.0" annotatedElement="Operation-only_body_for_query">
          <body>A bodyCondition can only be specified for a query operation.</body>
        </ownedComment>
        <specification xmi:type="cmof:OpaqueExpression" xmi:id="Operation-only_body_for_query-_specification">
          <language>OCL</language>
          <body>bodyCondition->notEmpty() implies isQuery</body>
        </specification>
      </ownedRule>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Operation-isQuery" name="isQuery" type="Boolean" default="false">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Operation-isQuery-_ownedComment.0" annotatedElement="Operation-isQuery">
          <body>Specifies whether an execution of the BehavioralFeature leaves the state of the system unchanged (isQuery=true) or whether side effects may occur (isQuery=false).</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Operation-isOrdered" name="isOrdered" type="Boolean" default="false" isDerived="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Operation-isOrdered-_ownedComment.0" annotatedElement="Operation-isOrdered">
          <body>This information is derived from the return result for this Operation.</body>
        </ownedComment>
        <ownedComment xmi:type="cmof:Comment" xmi:id="Operation-isOrdered-_ownedComment.1" annotatedElement="Operation-isOrdered">
          <body>Specifies whether the return parameter is ordered or not, if present.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Operation-isUnique" name="isUnique" type="Boolean" default="true" isDerived="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Operation-isUnique-_ownedComment.0" annotatedElement="Operation-isUnique">
          <body>This information is derived from the return result for this Operation.</body>
        </ownedComment>
        <ownedComment xmi:type="cmof:Comment" xmi:id="Operation-isUnique-_ownedComment.1" annotatedElement="Operation-isUnique">
          <body>Specifies whether the return parameter is unique or not, if present.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Operation-lower" name="lower" lower="0" type="Integer" default="1" isDerived="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Operation-lower-_ownedComment.0" annotatedElement="Operation-lower">
          <body>This information is derived from the return result for this Operation.</body>
        </ownedComment>
        <ownedComment xmi:type="cmof:Comment" xmi:id="Operation-lower-_ownedComment.1" annotatedElement="Operation-lower">
          <body>Specifies the lower multiplicity of the return parameter, if present.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Operation-upper" name="upper" lower="0" type="UnlimitedNatural" default="1" isDerived="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Operation-upper-_ownedComment.0" annotatedElement="Operation-upper">
          <body>This information is derived from the return result for this Operation.</body>
        </ownedComment>
        <ownedComment xmi:type="cmof:Comment" xmi:id="Operation-upper-_ownedComment.1" annotatedElement="Operation-upper">
          <body>Specifies the upper multiplicity of the return parameter, if present.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Operation-class" name="class" lower="0" type="Class" association="A_ownedOperation_class" subsettedProperty="RedefinableElement-redefinitionContext NamedElement-namespace Feature-featuringClassifier">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Operation-class-_ownedComment.0" annotatedElement="Operation-class">
          <body>The class that owns the operation.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Operation-precondition" name="precondition" lower="0" upper="*" type="Constraint" association="A_precondition_preContext" subsettedProperty="Namespace-ownedRule" isComposite="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Operation-precondition-_ownedComment.0" annotatedElement="Operation-precondition">
          <body>An optional set of Constraints on the state of the system when the Operation is invoked.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Operation-postcondition" name="postcondition" lower="0" upper="*" type="Constraint" association="A_postcondition_postContext" subsettedProperty="Namespace-ownedRule" isComposite="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Operation-postcondition-_ownedComment.0" annotatedElement="Operation-postcondition">
          <body>An optional set of Constraints specifying the state of the system when the Operation is completed.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Operation-redefinedOperation" name="redefinedOperation" lower="0" upper="*" type="Operation" association="A_redefinedOperation_operation" subsettedProperty="RedefinableElement-redefinedElement">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Operation-redefinedOperation-_ownedComment.0" annotatedElement="Operation-redefinedOperation">
          <body>References the Operations that are redefined by this Operation.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Operation-datatype" name="datatype" lower="0" type="DataType" association="A_ownedOperation_datatype" subsettedProperty="RedefinableElement-redefinitionContext NamedElement-namespace Feature-featuringClassifier">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Operation-datatype-_ownedComment.0" annotatedElement="Operation-datatype">
          <body>The DataType that owns this Operation.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Operation-bodyCondition" name="bodyCondition" lower="0" type="Constraint" association="A_bodyCondition_bodyContext" subsettedProperty="Namespace-ownedRule" isComposite="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Operation-bodyCondition-_ownedComment.0" annotatedElement="Operation-bodyCondition">
          <body>An optional Constraint on the result values of an invocation of this Operation.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Operation-type" name="type" lower="0" type="Type" association="A_type_operation" isDerived="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Operation-type-_ownedComment.0" annotatedElement="Operation-type">
          <body>This information is derived from the return result for this Operation.</body>
        </ownedComment>
        <ownedComment xmi:type="cmof:Comment" xmi:id="Operation-type-_ownedComment.1" annotatedElement="Operation-type">
          <body>Specifies the return result of the operation, if present.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Operation-ownedParameter" name="ownedParameter" isOrdered="true" lower="0" upper="*" type="Parameter" association="A_ownedParameter_operation" redefinedProperty="BehavioralFeature-ownedParameter" isComposite="true">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Operation-ownedParameter-_ownedComment.0" annotatedElement="Operation-ownedParameter">
          <body>Specifies the ordered set of formal parameters of this BehavioralFeature.</body>
        </ownedComment>
        <ownedComment xmi:type="cmof:Comment" xmi:id="Operation-ownedParameter-_ownedComment.1" annotatedElement="Operation-ownedParameter">
          <body>Specifies the parameters owned by this Operation.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Operation-raisedException" name="raisedException" lower="0" upper="*" type="Type" association="A_raisedException_operation" redefinedProperty="BehavioralFeature-raisedException">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Operation-raisedException-_ownedComment.0" annotatedElement="Operation-raisedException">
          <body>References the Types representing exceptions that may be raised during an invocation of this operation.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:type="cmof:Property" xmi:id="Operation-interface" name="interface" lower="0" type="Interface" association="A_interface_ownedOperation" subsettedProperty="RedefinableElement-redefinitionContext">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Operation-interface-_ownedComment.0" annotatedElement="Operation-interface">
          <body>The Interface that owns this Operation.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="Operation-isOrdered.1" name="isOrdered" isQuery="true" bodyCondition="Operation-isOrdered.1-spec">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Operation-isOrdered.1-_ownedComment.0" annotatedElement="Operation-isOrdered.1">
          <body>If this operation has a return parameter, isOrdered equals the value of isOrdered for that parameter. Otherwise isOrdered is false.</body>
        </ownedComment>
        <ownedRule xmi:type="cmof:Constraint" xmi:id="Operation-isOrdered.1-spec" name="spec" constrainedElement="Operation-isOrdered.1 Operation-isOrdered">
          <specification xmi:type="cmof:OpaqueExpression" xmi:id="Operation-isOrdered.1-spec-_specification">
            <language>OCL</language>
            <body>result = if returnResult()->notEmpty() then returnResult()->any().isOrdered else false endif</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="Operation-isOrdered.1-_member.1" type="Boolean" direction="return"/>
      </ownedOperation>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="Operation-isUnique.1" name="isUnique" isQuery="true" bodyCondition="Operation-isUnique.1-spec">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Operation-isUnique.1-_ownedComment.0" annotatedElement="Operation-isUnique.1">
          <body>If this operation has a return parameter, isUnique equals the value of isUnique for that parameter. Otherwise isUnique is true.</body>
        </ownedComment>
        <ownedRule xmi:type="cmof:Constraint" xmi:id="Operation-isUnique.1-spec" name="spec" constrainedElement="Operation-isUnique.1 Operation-isUnique">
          <specification xmi:type="cmof:OpaqueExpression" xmi:id="Operation-isUnique.1-spec-_specification">
            <language>OCL</language>
            <body>result = if returnResult()->notEmpty() then returnResult()->any().isUnique else true endif</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="Operation-isUnique.1-_member.1" type="Boolean" direction="return"/>
      </ownedOperation>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="Operation-lower.1" name="lower" isQuery="true" bodyCondition="Operation-lower.1-spec">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Operation-lower.1-_ownedComment.0" annotatedElement="Operation-lower.1">
          <body>If this operation has a return parameter, lower equals the value of lower for that parameter. Otherwise lower is not defined.</body>
        </ownedComment>
        <ownedRule xmi:type="cmof:Constraint" xmi:id="Operation-lower.1-spec" name="spec" constrainedElement="Operation-lower.1 Operation-lower">
          <specification xmi:type="cmof:OpaqueExpression" xmi:id="Operation-lower.1-spec-_specification">
            <language>OCL</language>
            <body>result = if returnResult()->notEmpty() then returnResult()->any().lower else Set{} endif</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="Operation-lower.1-_member.1" type="Integer" direction="return"/>
      </ownedOperation>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="Operation-upper.1" name="upper" isQuery="true" bodyCondition="Operation-upper.1-spec">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Operation-upper.1-_ownedComment.0" annotatedElement="Operation-upper.1">
          <body>If this operation has a return parameter, upper equals the value of upper for that parameter. Otherwise upper is not defined.</body>
        </ownedComment>
        <ownedRule xmi:type="cmof:Constraint" xmi:id="Operation-upper.1-spec" name="spec" constrainedElement="Operation-upper.1 Operation-upper">
          <specification xmi:type="cmof:OpaqueExpression" xmi:id="Operation-upper.1-spec-_specification">
            <language>OCL</language>
            <body>result = if returnResult()->notEmpty() then returnResult()->any().upper else Set{} endif</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="Operation-upper.1-_member.1" type="UnlimitedNatural" direction="return"/>
      </ownedOperation>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="Operation-type.1" name="type" isQuery="true" bodyCondition="Operation-type.1-spec">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Operation-type.1-_ownedComment.0" annotatedElement="Operation-type.1">
          <body>If this operation has a return parameter, type equals the value of type for that parameter. Otherwise type is not defined.</body>
        </ownedComment>
        <ownedRule xmi:type="cmof:Constraint" xmi:id="Operation-type.1-spec" name="spec" constrainedElement="Operation-type.1 Operation-type">
          <specification xmi:type="cmof:OpaqueExpression" xmi:id="Operation-type.1-spec-_specification">
            <language>OCL</language>
            <body>result = if returnResult()->notEmpty() then returnResult()->any().type else Set{} endif</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="Operation-type.1-_member.1" type="Type" direction="return"/>
      </ownedOperation>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="Operation-isConsistentWith" name="isConsistentWith" isQuery="true" redefinedOperation="RedefinableElement-isConsistentWith" precondition="Operation-isConsistentWith-_ownedRule.0" bodyCondition="Operation-isConsistentWith-spec">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Operation-isConsistentWith-_ownedComment.0" annotatedElement="Operation-isConsistentWith">
          <body>The query isConsistentWith() specifies, for any two Operations in a context in which redefinition is possible, whether redefinition would be consistent in the sense of maintaining type covariance. Other senses of consistency may be required, for example to determine consistency in the sense of contravariance. Users may define alternative queries under names different from 'isConsistentWith()', as for example, users may define a query named 'isContravariantWith()'.</body>
        </ownedComment>
        <ownedComment xmi:type="cmof:Comment" xmi:id="Operation-isConsistentWith-_ownedComment.1" annotatedElement="Operation-isConsistentWith">
          <body>A redefining operation is consistent with a redefined operation if it has the same number of owned parameters, and the type of each owned parameter conforms to the type of the corresponding redefined parameter. </body>
        </ownedComment>
        <ownedRule xmi:type="cmof:Constraint" xmi:id="Operation-isConsistentWith-_ownedRule.0" constrainedElement="Operation-isConsistentWith">
          <specification xmi:type="cmof:OpaqueExpression" xmi:id="Operation-isConsistentWith-_ownedRule.0-_specification">
            <language>OCL</language>
            <body>redefinee.isRedefinitionContextValid(self)</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="cmof:Constraint" xmi:id="Operation-isConsistentWith-spec" name="spec" constrainedElement="Operation-isConsistentWith">
          <specification xmi:type="cmof:OpaqueExpression" xmi:id="Operation-isConsistentWith-spec-_specification">
            <language>OCL</language>
            <body>result = (redefinee.oclIsKindOf(Operation) and&#xA;let op: Operation = redefinee.oclAsType(Operation) in&#xA;self.ownedParameter.size() = op.ownedParameter.size() and&#xA;forAll(i | op.ownedParameter[i].type.conformsTo(self.ownedParameter[i].type))&#xA;)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="Operation-isConsistentWith-_member.2" type="Boolean" direction="return"/>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="Operation-isConsistentWith-redefinee" name="redefinee" type="RedefinableElement"/>
      </ownedOperation>
      <ownedOperation xmi:type="cmof:Operation" xmi:id="Operation-returnResult" name="returnResult" isQuery="true" bodyCondition="Operation-returnResult-spec">
        <ownedComment xmi:type="cmof:Comment" xmi:id="Operation-returnResult-_ownedComment.0" annotatedElement="Operation-returnResult">
          <body>The query returnResult() returns the set containing the return parameter of the Operation if one exists, otherwise, it returns an empty set</body>
        </ownedComment>
        <ownedRule xmi:type="cmof:Constraint" xmi:id="Operation-returnResult-spec" name="spec" constrainedElement="Operation-returnResult">
          <specification xmi:type="cmof:OpaqueExpression" xmi:id="Operation-returnResult-spec-_specification">
            <language>OCL</language>
            <body>result = ownedParameter->select (par | par.direction = #return)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:type="cmof:Parameter" xmi:id="Operation-returnResult-_member.1" lower="0" upper="*" type="Parameter" direction="return"/>
      </ownedOperation>
    </ownedMember>
    <ownedMember xmi:type="cmof:Enumeration" xmi:id="CallConcurrencyKind" name="CallConcurrencyKind">
      <ownedComment xmi:type="cmof:Comment" xmi:id="CallConcurrencyKind-_ownedComment.0" annotatedElement="CallConcurrencyKind">
        <body>CallConcurrencyKind is an enumeration type.</body>
      </ownedComment>
      <ownedLiteral xmi:type="cmof:EnumerationLiteral" xmi:id="CallConcurrencyKind-sequential" name="sequential">
        <ownedComment xmi:type="cmof:Comment" xmi:id="CallConcurrencyKind-sequential-_ownedComment.0" annotatedElement="CallConcurrencyKind-sequential">
          <body>No concurrency management mechanism is associated with the operation and, therefore, concurrency conflicts may occur. Instances that invoke a behavioral feature need to coordinate so that only one invocation to a target on any behavioral feature occurs at once.</body>
        </ownedComment>
      </ownedLiteral>
      <ownedLiteral xmi:type="cmof:EnumerationLiteral" xmi:id="CallConcurrencyKind-guarded" name="guarded">
        <ownedComment xmi:type="cmof:Comment" xmi:id="CallConcurrencyKind-guarded-_ownedComment.0" annotatedElement="CallConcurrencyKind-guarded">
          <body>Multiple invocations of a behavioral feature may occur simultaneously to one instance, but only one is allowed to commence. The others are blocked until the performance of the first behavioral feature is complete. It is the responsibility of the system designer to ensure that deadlocks do not occur due to simultaneous blocks.</body>
        </ownedComment>
      </ownedLiteral>
      <ownedLiteral xmi:type="cmof:EnumerationLiteral" xmi:id="CallConcurrencyKind-concurrent" name="concurrent">
        <ownedComment xmi:type="cmof:Comment" xmi:id="CallConcurrencyKind-concurrent-_ownedComment.0" annotatedElement="CallConcurrencyKind-concurrent">
          <body>Multiple invocations of a behavioral feature may occur simultaneously to one instance and all of them may proceed concurrently.</body>
        </ownedComment>
      </ownedLiteral>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_reception_signal" name="A_reception_signal" memberEnd="A_reception_signal-reception Reception-signal">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_reception_signal-reception" name="reception" lower="0" upper="*" type="Reception" association="A_reception_signal"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_operation_callEvent" name="A_operation_callEvent" memberEnd="CallEvent-operation A_operation_callEvent-callEvent">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_operation_callEvent-callEvent" name="callEvent" lower="0" upper="*" type="CallEvent" association="A_operation_callEvent"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_signal_signalEvent" name="A_signal_signalEvent" memberEnd="SignalEvent-signal A_signal_signalEvent-signalEvent">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_signal_signalEvent-signalEvent" name="signalEvent" lower="0" upper="*" type="SignalEvent" association="A_signal_signalEvent"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_ownedReception_interface" name="A_ownedReception_interface" memberEnd="Interface-ownedReception A_ownedReception_interface-interface">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_ownedReception_interface-interface" name="interface" lower="0" type="Interface" association="A_ownedReception_interface"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_ownedReception_class" name="A_ownedReception_class" memberEnd="Class-ownedReception A_ownedReception_class-class">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_ownedReception_class-class" name="class" lower="0" type="Class" association="A_ownedReception_class"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_when_timeEvent" name="A_when_timeEvent" memberEnd="TimeEvent-when A_when_timeEvent-timeEvent">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_when_timeEvent-timeEvent" name="timeEvent" lower="0" type="TimeEvent" association="A_when_timeEvent"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_changeExpression_changeEvent" name="A_changeExpression_changeEvent" memberEnd="ChangeEvent-changeExpression A_changeExpression_changeEvent-changeEvent">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_changeExpression_changeEvent-changeEvent" name="changeEvent" lower="0" type="ChangeEvent" association="A_changeExpression_changeEvent"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_raisedException_behavioralFeature" name="A_raisedException_behavioralFeature" memberEnd="BehavioralFeature-raisedException A_raisedException_behavioralFeature-behavioralFeature">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_raisedException_behavioralFeature-behavioralFeature" name="behavioralFeature" lower="0" upper="*" type="BehavioralFeature" association="A_raisedException_behavioralFeature"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_ownedAttribute_owningSignal" name="A_ownedAttribute_owningSignal" memberEnd="Signal-ownedAttribute A_ownedAttribute_owningSignal-owningSignal">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_ownedAttribute_owningSignal-owningSignal" name="owningSignal" lower="0" type="Signal" association="A_ownedAttribute_owningSignal" subsettedProperty="NamedElement-namespace A_attribute_classifier-classifier Feature-featuringClassifier"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_ownedTrigger_behavioredClassifier" name="A_ownedTrigger_behavioredClassifier" memberEnd="BehavioredClassifier-ownedTrigger A_ownedTrigger_behavioredClassifier-behavioredClassifier">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_ownedTrigger_behavioredClassifier-behavioredClassifier" name="behavioredClassifier" lower="0" type="BehavioredClassifier" association="A_ownedTrigger_behavioredClassifier"/>
    </ownedMember>
    <ownedMember xmi:type="cmof:Association" xmi:id="A_event_trigger" name="A_event_trigger" memberEnd="Trigger-event A_event_trigger-trigger">
      <ownedEnd xmi:type="cmof:Property" xmi:id="A_event_trigger-trigger" name="trigger" lower="0" upper="*" type="Trigger" association="A_event_trigger"/>
    </ownedMember>
  </cmof:Package>
  <cmof:Tag xmi:id="_1" name="org.omg.xmi.nsURI" value="http://schema.omg.org/spec/UML/2.1.1/uml.xml" element="_0"/>
  <cmof:Tag xmi:id="_2" name="org.omg.xmi.nsPrefix" value="uml" element="_0"/>
  <cmof:Tag xmi:id="_3" name="org.omg.xmi.schemaType" value="http://www.w3.org/2001/XMLSchema#integer" element="Integer"/>
  <cmof:Tag xmi:id="_4" name="org.omg.xmi.schemaType" value="http://www.w3.org/2001/XMLSchema#boolean" element="Boolean"/>
</xmi:XMI>
