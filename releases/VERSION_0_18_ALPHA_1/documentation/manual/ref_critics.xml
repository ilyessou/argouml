<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- $Id$ -->
<!--
// Copyright (c) 1996-2005 The Regents of the University of California. All
// Rights Reserved. Permission to use, copy, modify, and distribute this
// software and its documentation without fee, and without a written
// agreement is hereby granted, provided that the above copyright notice
// and this paragraph appear in all copies.  This software program and
// documentation are copyrighted by The Regents of the University of
// California. The software program and documentation are supplied "AS
// IS", without any accompanying services from The Regents. The Regents
// does not warrant that the operation of the program will be
// uninterrupted or error-free. The end-user understands that the program
// was developed for research purposes and is advised not to rely
// exclusively on the program for any reason.  IN NO EVENT SHALL THE
// UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR DIRECT, INDIRECT,
// SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING LOST PROFITS,
// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
// SUCH DAMAGE. THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY
// WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
// PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
// CALIFORNIA HAS NO OBLIGATIONS TO PROVIDE MAINTENANCE, SUPPORT,
// UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
-->

<!--

A description of ArgoUML critics

-->

<!--
Notes for this document!

The sect2-tags' id field are in synch with a generated url in the class
org.argouml.cognitive.critics.Critic. Please don't change them unless 
you change that class at the same time (and think through the deployment).
-->

<chapter id="ch.ref.critics">
  <title>The Critics</title>

  <!-- TODO: MVW: I did not check if all the critics are present (from the
  implementation in the manual AND vice versa). -->

  <sect1>
    <title>Introduction</title>

    <para>The key feature that distinguishes &argouml; from other UML CASE
      tools is its use of concepts from cognitive psychology. The theory behind
      this is well described in Jason Robbins' PhD dissertation <ulink
      url="http://argouml.tigris.org/docs/robbins_dissertation/">
      http://argouml.tigris.org/docs/robbins_dissertation/</ulink>.</para>

    <para>Critics are one of the main ways in which these ideas are
      implemented. Running in the background they offer advice to the designer
      which may be accepted or ignored. A key point is that they do not
      <emphasis>impose</emphasis> a decision on the designer.</para>

    <note><para>The critics are asynchronous processes that run in parallel
      with the main &argouml; tool. Changes typically take a second or two to
      propagate as the critics wake up.</para></note>

    <!-- What we mean by Critic, Critique and To-do item -->

    <sect2>
      <title>Terminology</title>

      <para>The <emphasis>critics</emphasis> are background processes, which
        evaluate the current model according to various <quote>good</quote>
        design criteria. There is one critic for every design criterion.</para>

      <para>The output of a critic is a <emphasis>critique</emphasis>&mdash;a
        statement about some aspect of the model that does not appear to follow
        good design practice.</para>

      <para>Finally a critique will generally suggest how the bad design issue
        it has identified can be rectified, by raising a <emphasis>to-do
        item</emphasis>.</para>
    </sect2>

    <!-- All about design issues -->

    <sect2>
      <title>Design Issues</title>

      <para>&argouml; categorizes critics according the the design issue they
        address (some critics may be in more than one category). At present
        there are 16 such categories.</para>

      <para>Within this manual the descriptions of critics are grouped in
        sections by design issue.</para>
    </sect2>
  </sect1>

  <sect1 id="s1.ref.design_issues_uncategorized">
    <title>Uncategorized</title>

    <para>These are critics that do not fit into any other category.</para>

    <para>
      &argouml; has no critics in this category. Maybe some will be added in
      later versions.
    </para>
  </sect1>

  <!-- Critics about choice & number of classes -->

  <sect1 id="s1.ref.design_issues_class_selection">
    <title>Class Selection</title>

    <para>These are critics concerning how classes are chosen and
      used.</para>

    <para>
      &argouml; has the following critics in this category.
    </para>

    <sect2 id="critics.CrNonAggDataType">
      <title>Wrap DataType</title>

      <para>DataTypes are not full classes within UML 1.3. They can only have
        enumeration literals as values, and only support
        <literal>query</literal> operations (that is operations that do not
        change the DataType's state).</para>

      <para>DataTypes cannot be associated with classes, unless the DataType is
        part of a composite (black diamond) aggregation. Such an association
        relects the tight binding of a collection of DataType instances to a
        class instance. In effect such a DataType is an attribute of the class
        with multiplicity.</para>

      <para>Good &ooad; depends on careful choices about which entities to
        represent as full objects and which to represent as attributes of
        objects.</para>

      <para>There are two options to fix this problem.</para>

      <itemizedlist>
        <listitem><para>Replace the DataType with a full
          class.</para></listitem>

        <listitem><para>or change the association aggregation to composite
          relationship at the DataType end.</para></listitem>
      </itemizedlist>
    </sect2> 
    
    <sect2 id="critics.CrTooManyClasses">
      <title>Reduce Classes in diagram &lt;diagram&gt;</title>

      <para>Suggestion to improve readability by having fewer classes on a
        diagram.
        If one class diagram has too many classes it may become very difficult 
        for humans to understand. 
        Defining an understandable set of class diagrams is 
        an important part of your design. 
      </para>
    </sect2>

    <sect2 id="critics.CrNodesOverlap">
      <title>Clean Up Diagram</title>

      <para>Suggestion that the diagram could be improved by moving artifacts
        that are overlapping.</para>
    </sect2>
  </sect1>

    <!-- Critics about how things are named -->

  <sect1 id="s1.ref.design_issues_naming">
    <title>Naming</title>

    <para>These are critics concerning the naming of artifacts. The current
      version of &argouml; has 18 critics in this category.</para>

    <sect2 id="critics.CrAssocNameConflict">
      <title>Resolve Association Name Conflict</title>

      <para>Suggestion that two association names in the same namespace have
        the same name. This is not permitted in UML.</para>
    </sect2>

    <sect2 id="critics.CrAttrNameConflict">
      <title>Revise Attribute Names to Avoid Conflict</title>

      <para>Suggestion that two attribute names of a class have the same
        name. This is not permitted in UML.</para>
        
      <note><para>The problem may be caused by inheritance of an attribute
        through a generalization relationship.</para></note>
    </sect2>

    <sect2 id="critics.CrOperNameConflict">
      <title>Change Names or Signatures in an Artifact</title>

      <para>Two operations in &lt;artifact&gt; have the same signature. This
        means their name is the same, and the list of parameters has the same
        type.</para>

      <para>Where there are conflicting signatures, correct code cannot be
        generated for mainstream OO languages. It also leads to very unclear
        semantics of the design.</para>

      <para>In comparing signatures, this critic considers:</para>

      <orderedlist>
        <listitem><para>the name;</para></listitem>
 
        <listitem><para>the list of in, out and in-out parameter types
          <emphasis>in order</emphasis>; and</para></listitem>
      </orderedlist>

      <para>Only if these all match in both type and order, will the signatures
        be considered as the same.</para>

      <para>This follows the line of Java/C++ in ignoring the return parameters
        for the signature. This <emphasis>may</emphasis> be unsatisfactory for
        some functional OO languages.</para>

      <note><para>Some purists would argue that the comparison should really
        differentiate between in, out and in-out parameters. However no
        practical programming language can do this when resolving an overloaded
        method invocation, so this critics lumps them all
        together.</para></note>
    </sect2>

    <sect2 id="critics.CrDupRoleNames">
      <title>Duplicate End (Role) Names for an Association</title>

      <para>The specified association has two (or more) ends (roles) with the
        same name. One of the well-formedness rules in UML 1.3 for
        associations, is that all end (role) names must be unique.</para>

      <para>This ensures that there can be unambiguous reference to the ends of
        the association.</para>

      <para>To fix this, manually select the association and change the names
      of one or more of the offending ends (roles) using the &button2; pop-up
      menu or the property sheet.</para>
    </sect2>

    <sect2 id="critics.CrNameConflictAC">
      <title>Role name conflicts with member</title>

      <para>A suggestions that good design avoids role names for associations
        that clash with attributes or operations of the source class. Roles may
        be realized in the code as attributes or operations, causing code
        generation problems.</para>
    </sect2>

    <sect2 id="critics.CrMissingClassName">
      <title>Choose a Name (Classes and Interfaces)</title>

      <para>The class or interface concerned has been
        given no name (it will appear in the model as
        <literal>anon</literal>). Suggestion that good design requires that all
        interfaces and classes are named.</para>
    </sect2>

    <sect2 id="critics.CrDisambigClassName">
      <title>Choose a Unique Name for an Artifact (Classes and
        Interfaces)</title>

      <para>Suggestion that the class or interface specified has the same name
        as another (in the namespace), which is bad design and will prevent
        valid code generation.</para>
    </sect2>

    <sect2 id="critics.CrMissingAttrName">
      <title>Choose a Name (Attributes)</title>

      <para>The attribute concerned has been given no name (it will appear in
        the model as <literal>(anon Attribute)</literal>). 
        Suggestion that good design
        requires that all attributes are named.</para>
    </sect2>

    <sect2 id="critics.CrMissingOperName">
      <title>Choose a Name (Operations)</title>

      <para>The operation concerned has been given no name (it will appear in
        the model as <literal>(anon Operation)</literal>). 
        Suggestion that good design
        requires that all operations are named.</para>
    </sect2>

    <sect2 id="critics.CrMissingStateName">
      <title>Choose a Name (States)</title>

      <para>The state concerned has been given no name (it will appear in the
        model as <literal>(anon State)</literal>). 
        Suggestion that good design requires
        that all states are named.</para>
    </sect2>

    <sect2 id="critics.CrDisambigStateName">
      <title>Choose a Unique Name for a (State related) Artifact</title>

      <para>Suggestion that the state specified has the same name as another
        (in the current statechart diagram), which is bad design and will prevent
        valid code generation.</para>
    </sect2>

    <sect2 id="critics.CrNameConfusion">
      <title>Revise Name to Avoid Confusion</title>

      <para>Two names in the same namespace have very similar names (differing
        only by one character). Suggestion this could potentially lead to
        confusion.</para>

      <caution><para>This critic can be particularly annoying, since at
        times it is useful and good design to have a series of artifacts
        <literal>var1</literal>, <literal>var2</literal> etc.</para>

      <para>It is important to remember that critics offer guidance, and
        are not always correct. &argouml; lets you dismiss the resulting
        to-do items through the to-do pane (see
        <xref linkend="ch.ref.todopane"/>).</para></caution>
    </sect2>

    <sect2 id="critics.CrIllegalName">
      <title>Choose a Legal Name</title>

      <para>All artifact names in &argouml; must use only letters, digits and
        underscore characters. This critic suggests an entity has not met this
        requirement.</para>
    </sect2>

    <sect2 id="critics.CrReservedName">
      <title>Change an Artifact to a Non-Reserved Word</title>

      <para>Suggestion that this artifact's name is the same as a reserved word
        in UML (or within one character of one), which is not
        permitted.</para>
    </sect2>

    <sect2 id="critics.CrUnconventionalOperName">
      <title>Choose a Better Operation Name</title>

      <para>Suggestion that an operation has not followed the naming convention
        that operation names begin with lower case letters.</para>

      <caution><para>Following the Java and C++ convention most designers
        give their constructors the same name as the class, which begins
        with an upper case character. In V0.14 &argouml;, this
        will trigger this critic, unless the constructor is stereotyped
        <literal>&laquo;create&raquo;</literal>.</para>

      <para>It is important to remember that critics offer guidance, and
        are not always correct. &argouml; lets you dismiss the resulting
        to-do items through the to-do pane (see
        <xref linkend="ch.ref.todopane"/>).</para></caution>
    </sect2>

    <sect2 id="critics.CrUnconventionalAttrName">
      <title>Choose a Better Attribute Name</title>

      <para>Suggestion that an attribute has not followed the naming convention
        that attribute names begin with lower case letters.</para>
    </sect2>

    <sect2 id="critics.CrUnconventionalClassName">
      <title>Capitalize Class Name</title>

      <para>Suggestion that a class has not followed the naming convention that
        classes begin with upper case letters.</para>

      <note><para>Although not triggering this critic, the same
        convention should apply to interfaces.
        <!-- TODO: See enhancement issue ... -->
      </para></note>
    </sect2>

    <sect2 id="critics.CrUnconventionalPackName">
      <title>Revise Package Name</title>

      <para>Suggestion that a package has not followed the naming convention of
        using lower case letters with periods used to indicated
        sub-packages.</para>
    </sect2>
  </sect1>

  <!-- Critics about the attributes of classes -->

  <sect1 id="s1.ref.design_issues_storage">
    <title>Storage</title>

    <para>Critics concerning attributes of classes.</para>

    <para>The current version of &argouml; has the following critics in this
      category.</para>

    <sect2>
      <title>Revise Attribute Names to Avoid Conflict</title>

      <para>This critic is discussed under an earlier design issues category
        (see <xref linkend="critics.CrAttrNameConflict"/>).</para>
    </sect2>

    <sect2 id="critics.CrNoInstanceVariables">
      <title>Add Instance Variables to a Class</title>

      <para>Suggestion that no instance variables have been specified for the
        given class. Such classes may be created to specify static attributes
        and methods, but by convention should then be given the stereotype
        <literal>&laquo;utility&raquo;</literal>.</para>

    </sect2>

    <sect2 id="critics.CrConstructorNeeded">
      <title>Add a Constructor to a Class</title>

      <para>You have not yet defined a constructor for class
        <emphasis>class</emphasis>. Constructors initialize new instances such
        that their attributes have valid values.  This class probably needs a
        constructor because not all of its attributes have initial
        values.</para>

      <para>Defining good constructors is key to establishing class invariants,
        and class invariants are a powerful aid in writing solid code.</para>

      <para>To fix this, add a constructor manually by clicking on
        <emphasis>class</emphasis> in the explorer and adding an
        operation using the context sensitive pop-up menu in the property tab,
        or select <emphasis>class</emphasis> where it appears on a class
        diagram and use the <literal>Add Operation</literal> tool.</para>

      <para>In the UML 1.3 standard, a constructor is an operation with the
        stereotype &laquo;create&raquo;. Although not strictly standard,
        &argouml; will also accept &laquo;Create&raquo; as a stereotype for
        constructors.</para>

      <para>By convention in Java and C++ a constructor has the same name as
        the class, is not static, and returns no value.  &argouml; will also
        accept any operation that follows these conventions as a constructor
        even if it is not stereotyped &laquo;create&raquo;.</para>

      <caution><para>Operators are created in &argouml; with a default return
        parameter (named <literal>return</literal>). You will need to remove
        this parameter to meet the Java/C++ convention.</para></caution>
    </sect2>

    <sect2 id="critics.CrTooManyAttr">
      <title>Reduce Attributes on a Class</title>

      <para>Suggestion that the class has too many attributes for a good
        design, and is at risk of becoming a design
        bottleneck.</para>
    </sect2>
  </sect1>

  <!-- Critics associated with planned extensions of the UML standard (not
       really sure if this is what is meant -->

  <sect1 id="s1.ref.design_issues_planned_extensions">
    <title>Planned Extensions</title>

    <para>Critics concerning interfaces and subclasses.</para>

    <note><para>It is not clear why this category has the name <quote>Planned
      Extensions</quote>.</para></note>

    <para>The current version of &argouml; has three critics in this
      category.</para>

    <sect2 id="critics.CrIntefaceAllPublic">
      <title>Operations in Interfaces must be public</title>

      <para>Suggestion that there is no point in having non-public operations
        in Interfaces, since they must be visible to be realized by a
        class.</para>
    </sect2>

    <sect2 id="critics.CrInterfaceOperOnly">
      <title>Interfaces may only have operations</title>

      <para>Suggestion that an interfaces has attributes defined. The UML
        standard defines interfaces to have operations.</para>

      <caution><para>
        &argouml; does not allow you
        to add attributes to interfaces, so this should never occur in the
        &argouml; model. It might trigger if a project has been loaded with
        XMI created by another tool.
      </para></caution>
    </sect2>

    <sect2 id="critics.CrSubclassReference">
      <title>Remove Reference to Specific Subclass</title>

      <para>Suggestion that in a good design, a class should not reference its
        subclasses directly through attributes, operations or
        associations.</para>
    </sect2>
  </sect1>

  <!-- Critics associated with state machines -->

  <sect1 id="s1.ref.design_issues_state_machines">
    <title>State Machines</title>

    <para>Critics concerning state machines.</para>

    <!-- What is this about? Why was the title "MState machines"? -->
    <!--note><para>The correct title for this category should be
      <literal>State&nbsp;Machines</literal>. This is raised as an issue to be
      fixed in a future version of &argouml;</para></note-->

    <para>The current version of &argouml; has the following critics in this
      category.</para>

    <sect2 id="critics.CrTooManyTransitions">
      <title>Reduce Transitions on &lt;state&gt;</title>

      <para>Suggestion given state is involved in so many transitions it may be
        a maintenance bottleneck.</para>
    </sect2>

    <sect2 id="critics.CrTooManyStates">
      <title>Reduce States in machine &lt;machine&gt;</title>

      <para>Suggestion that the given state machine has so many states as to be
        confusing and should be simplified (perhaps by breaking into several
        machines, or using a hierarchy).</para>
    </sect2>

    <sect2 id="critics.CrNoTransitions">
      <title>Add Transitions to &lt;state&gt;</title>

      <para>Suggestion that the given state requires both incoming and outgoing
        transitions.</para>
    </sect2>

    <sect2 id="critics.CrNoIncomingTransitions">
      <title>Add Incoming Transitions to &lt;artifact&gt;</title>

      <para>Suggestion that the given state requires incoming
        transitions.</para>
    </sect2>

    <sect2 id="critics.CrNoOutgoingTransitions">
      <title>Add Outgoing Transitions from &lt;artifact&gt;</title>

      <para>Suggestion that the given state requires outgoing
        transitions.</para>
    </sect2>

    <sect2 id="critics.CrMultipleInitialStates">
      <title>Remove Extra Initial States</title>

      <para>Suggestion that there is more than one initial state in the state
        machine or composite state, which is not permitted in
        UML.</para>
    </sect2>

    <sect2 id="critics.CrNoInitialState">
      <title>Place an Initial State</title>

      <para>Suggestion that there is no initial state in the state machine or
        composite state.</para>
    </sect2>

    <sect2 id="critics.CrNoTriggerOrGuard">
      <title>Add Trigger or Guard to Transition</title>

      <para>Suggestion that a transition is missing either a trigger or guard,
        one at least of which is required for it to be taken.</para>
    </sect2>

    <sect2 id="critics.CrInvalidJoin">
      <title>Change Join Transitions</title>

      <para>Suggestion that the join pseudostate has an invalid number of
        transitions. Normally there should be one outgoing and two or more
        incoming.</para>
    </sect2>

    <sect2 id="critics.CrInvalidFork">
      <title>Change Fork Transitions</title>

      <para>Suggestion that the fork pseudostate has an invalid number of
        transitions. Normally there should be one incoming and two or more
        outgoing.</para>
    </sect2>

    <sect2 id="critics.CrInvalidBranch">
      <title>Add Choice/Junction Transitions</title>

      <para>Suggestion that the branch (choice or junction) 
        pseudostate has an invalid number of
        transitions. Normally there should be at least one incoming transition
        and at least one outgoing transition.</para>
    </sect2>

    <sect2 id="critics.CrNoGuard">
      <title>Add Guard to Transition</title>

      <para>Suggestion that the transition requires a guard.</para>

      <caution><para>It is not clear that this is a valid critic. It is
        perfectly acceptable to have a transition without a
        guard&mdash;the transition is always taken when the trigger is
        invoked.</para></caution>
    </sect2>

    <sect2>
      <title>Clean Up Diagram</title>

      <para>This critic is discussed under an earlier design issues category
        (see <xref linkend="critics.CrNodesOverlap"/>).</para>
    </sect2>

    <sect2 id="critics.CrZeroLengthEdge">
      <title>Make Edge More Visible</title>

      <para>Suggestion that an edge artifact such as an association or
        abstraction is so short it may be missed. Move the connected artifacts
        apart to make the edge more visible.</para>
    </sect2>
  </sect1>

  <!-- Design Patterns (in the GOF sense) and stuff associated with
       deployment and sequence diagrams. -->

  <sect1 id="s1.ref.design_issues_design_patterns">
    <title>Design Patterns</title>

    <para>Critics concerning design pattern usage in &argouml;.</para>

    <para>These relate to the use of patterns as described by the so called
      <quote>Gang of Four</quote>. &argouml; also uses this category for
      critics associated with deployment and sequence diagrams. The current
      version of &argouml; has the following critics in this category.
    </para>

    <sect2 id="critics.CrConsiderSingleton">
      <title>Consider using Singleton Pattern for &lt;class&gt;</title>

      <para>The <emphasis>class</emphasis> has no non-static attributes nor any
        associations that are navigable away from instances of this class.
        This means that every instance of this class will be identical to every
        other instance, since there will be nothing about the instances that
        can differentiate them.</para>

      <para>Under these circumstances you should consider making explicit that
        you have exactly one instance of this class, by using the singleton
        Pattern. Using the singleton pattern can save time and memory
        space. Within &argouml; this can be done by using the
        &laquo;singleton&raquo; stereotype on this class.</para>

      <para>If it is not your intent to have a single instance, you should
        define instance variables (i.e. non-static attributes) and/or outgoing
        associations that will represent differences bewteen instances.</para>

      <para>Having specified <emphasis>class</emphasis> as a singleton, you
        need to define the class so there can only be a single instance. This
        will complete the information representation part of your design. To
        achieve this you need to do the following.</para>

      <orderedlist>
        <listitem><para>You must define a static attribute (a class variable)
          holding the instance. This must therefore have
          <emphasis>class</emphasis> as its type.</para></listitem>

        <listitem><para>You must have only private constructors so that new
          instances cannot be made by other code. The creation of the single
          instance could be through a suitable helper operation, which invokes
          this private constructor just once.</para></listitem>

        <listitem><para>You must have at least one constructor to override the
          default constructor, so that the default constructor is not used to
          create multiple instances.</para></listitem>
      </orderedlist>

      <para>For the definition of a constructor under the UML 1.3 standard, and
        extensions to that definition accepted by &argouml; see
        <xref linkend="critics.CrConstructorNeeded"/>.</para>
    </sect2>

    <sect2 id="critics.CrSingletonViolated">
      <title>Singleton Stereotype Violated in &lt;class&gt;</title>

      <para>This class is marked with the &laquo;singleton&raquo; stereotype,
        but it does not satisfy the constraints imposed on singletons
        (&argouml; will also accept &laquo;Singleton&raquo; stereotype as
        defining a singleton). A singleton class can have at most one instance.
        This means that the class must meet the design criteria for a singleton
        (see <xref linkend="critics.CrConsiderSingleton"/>).</para>

      <para>Whenever you mark a class with a stereotype, the class should
        satisfy all constraints of the stereotype.  This is an important part
        of making a self-consistent and understangle design. Using the
        singleton pattern can save time and memory space.</para>

      <para>If you no longer want this class to be a singleton, remove the
        &laquo;singleton&raquo; stereotype by clicking on the class and
        selecting the blank selection on the stereotype drop-down within the
        properties tab.</para>

      <para>To apply the singleton pattern you should follow the directions in
        <xref linkend="critics.CrConsiderSingleton"/>.</para>
    </sect2>

    <sect2 id="critics.CrNodeInsideElement">
      <title>Nodes normally have no enclosers</title>

      <para>A suggestion that nodes should not be drawn inside other artifacts
        on the deployment diagram, since they represent an autonomous physical
        object.</para>
    </sect2>

    <sect2 id="critics.CrNodeInstanceInsideElement">
      <title>NodeInstances normally have no enclosers</title>

      <para>A suggestion that node instances should not be drawn inside other
        artifacts on the deployment diagram, since they represent an autonomous
        physical object.</para>
    </sect2>

    <sect2 id="critics.CrComponentWithoutNode">
      <title>Components normally are inside nodes</title>

      <para>A suggestion that components represent the logical entities within
        physical nodes, and so should be drawn within a node, where nodes are
        shown on the deployment diagram.</para>
    </sect2>

    <sect2 id="critics.CrCompInstanceWithoutNode">
      <title>ComponentInstances normally are inside nodes</title>

      <para>A suggestion that component instances represent the logical
        entities within physical nodes, and so should be drawn within a node
        instance, where node instances are shown on the deployment
        diagram.</para>
    </sect2>

    <sect2 id="critics.CrClassWithoutComponent">
      <title>Classes normally are inside components</title>

      <para>A suggestion that classes, as artifacts making up components,
        should be drawn within components on the deployment
        diagram.</para>
    </sect2>

    <sect2 id="critics.CrInterfaceWithoutComponent">
      <title>Interfaces normally are inside components</title>

      <para>A suggestion that interfaces, as artifacts making up components,
        should be drawn within components on the deployment
        diagram.</para>
    </sect2>

    <sect2 id="critics.CrObjectWithoutComponent">
      <title>Objects normally are inside components</title>

      <para>A suggestion that objects, as instances of artifacts making up
        components, should be drawn within components or component instances on
        the deployment diagram.</para>
    </sect2>

    <sect2 id="critics.CrWrongLinkEnds">
      <title>LinkEnds have not the same locations</title>

      <para>A suggestion that a link (e.g. association) connecting objects on a
        deployment diagram has one end in a component and the other in a
        component instance (since objects can be in either). This makes no
        sense.</para>
    </sect2>

    <sect2 id="critics.CrInstanceWithoutClassifier">
      <title>Set classifier (Deployment Diagram)</title>

      <para>Suggestion that there is an instance (object) without an associated
        classifier (class, datatype) on a deployment diagram.</para>
    </sect2>

    <sect2 id="critics.CrCallWithoutReturn">
      <title>Missing return-actions</title>

      <para>Suggestion that a sequence diagram has a send or call action
        without a corresponding return action.</para>
    </sect2>

    <sect2 id="critics.CrReturnWithoutCall">
      <title>Missing call(send)-action</title>

      <para>Suggestion that a sequence diagram has a return action, but no
        preceding call or send action.</para>
    </sect2>

    <sect2 id="critics.CrLinkWithoutStimulus">
      <title>No Stimuli on these links</title>

      <para>Suggestion that a sequence diagram has a link connecting objects
        without an associated stimulus (without which the link is
        meaningless).</para>

      <warning><para>Triggering this critic indicates a serious problem,
        since &argouml; provides no mechanism for creating a link without a
        stimulus. It probably indicates that the diagram was created by
        loading a corrupt project, with an XMI file describing a link
        without a stimulus, possibly created by a tool other than
        &argouml;.</para></warning>
    </sect2>

    <sect2 id="critics.CrSeqInstanceWithoutClassifier">
      <title>Set Classifier (Sequence Diagram)</title>

      <para>Suggestion that there is an object without an associated classifier
        (class, datatype) on a sequence diagram.</para>
    </sect2>

    <sect2 id="critics.CrStimulusWithWrongPosition">
      <title>Wrong position of these stimuli</title>

      <para>Suggestion that the initiation of send/call-return message
        exchanges in a sequence diagram does not properly initiate from left to
        right.</para>
    </sect2>
  </sect1>

  <!-- Critics associated with associations -->

  <sect1 id="s1.ref.design_issues_relationships">
    <title>Relationships</title>

    <para>Critics concerning
      associations in &argouml;.</para>

    <para>The current version of &argouml; has the following critics in this
      category.</para>

    <sect2 id="critics.CrCircularAssocClass">
      <title>Circular Association</title>

      <para>Suggestion that an association class has a role that refers back
        directly to itself, which is not permitted.</para>

      <warning><para>This critic is meaningless in the V0.14 version of
        &argouml; which does not support association classes. <!--In addition
        the current code would never trigger, even if an association
        class were created.-->
      </para></warning>
    </sect2>

    <sect2 id="critics.CrUnnavigableAssoc">
      <title>Make &lt;association&gt; Navigable</title>

      <para>Suggestion that the association referred to is not navigable in
        either direction. This is permitted in the UML standard, but has no
        obvious meaning in any practical design.</para>
    </sect2>

    <sect2 id="critics.CrNavFromInterface">
      <title>Remove Navigation from Interface via &lt;association&gt;</title>

      <para>Associations involving an interface can be not be navigable in the
        direction from the interface.  This is because interfaces contain only
        operation declarations and cannot hold pointers to other
        objects.</para>

      <para>This part of the design should be changed before you can generate
        code from this design.  If you do generate code before fixing this
        problem, the code will not match the design.</para>

      <para>To fix this, select the association and use the
        <literal>Properties</literal> tab to select in turn each association
        end that is <emphasis>not</emphasis> connected to the
        interface. Uncheck <literal>Navigable</literal> for each of these
        ends.</para>

      <para>The association should then appear with a stick arrowhead pointed
        towards the interface</para>

      <!--note><para>In an ideal world, &argouml; would not permit associations to
        be created that were navigable from interfaces.</para></note-->
        <!-- MVW: No! That's what critics are all about...-->

      <para>
        When an association between a class and interface is created 
        in &argouml;, it is by default 
        navigable only from the
        class to the interface.
        However, &argouml; does not prevent to change the navigability 
        afterwards into a
        wrong situation. 
        Which will cause this critic to be
        triggered.</para>
    </sect2>

    <sect2 id="critics.CrNoAssociations">
      <title>Add Associations to &lt;artifact&gt;</title>

      <para>Suggestion that the specified artifact (actor, use case or class)
        has no associations connecting it to other artifacts. This is required
        for the artifact to be useful in a design.</para>
    </sect2>

    <sect2>
      <title>Remove Reference to Specific Subclass</title>

      <para>This critic is discussed under an earlier design issues category
        (see <xref linkend="critics.CrSubclassReference"/>).</para>
    </sect2>

    <sect2 id="critics.CrTooManyAssoc">
      <title>Reduce Associations on &lt;artifact&gt;
        </title>

      <para>Suggestion that the given artifact (actor, use case, class or
        interface) has so many associations it may be a maintenance
        bottleneck.</para>
    </sect2>

    <sect2>
      <title>Make Edge More Visible</title>

      <para>This critic is discussed under an earlier design issues category
        (see <xref linkend="critics.CrZeroLengthEdge"/>).</para>
    </sect2>
  </sect1>

  <!-- Critics concerning instantiation of classifiers -->

  <sect1 id="s1.ref.design_issues_instantiation">
    <title>Instantiation</title>

    <para>Critics concerning instantiation of classifiers in
      &argouml;.</para>

    <para>The current version of &argouml; has no critics in this
      category.</para>
  </sect1>

  <!-- Critics concerning modular code development -->

  <sect1 id="s1.ref.design_issues_modularity">
    <title>Modularity</title>

    <para>Critics concerning modular development in &argouml;.</para>

    <para>The current version of &argouml; has the following critics in this
      category.</para>

    <sect2 id="critics.CrCrossNamespaceAssoc">
      <title>Classifier not in Namespace of its Association</title>

      <para>One of the well-formedness rules in UML 1.3 for associations, is
        that all the classifiers attached to the ends of the association should
        belong to the same namespace as the association.</para>

      <para>If this were not the case, there would be no naming, by which each
        end could refer to all the others.</para>

      <para>This critic is triggered when an association does not meet this
        criterion. The solution is to delete the association, and recreate it
        on a diagram, whose namespace includes those of all the attached
        classifiers.</para>

      <caution><para>In the current implementation of &argouml; this critic
        does not handle hierarchical namespaces. As a consequence it will
        trigger for associations where the immediate namespaces of the attached
        classifiers is different, even though they are part of the same
        namespace hierarchy.
        <!-- TODO: Check this out. -->
      </para></caution>
    </sect2>

    <sect2 id="critics.CrEmptyPackage">
      <title>Add Elements to Package &lt;package&gt;</title>

      <para>Suggestion that the specified package has no content. Good design
        suggests packages are created to put things in.</para>

      <note><para>This will always trigger when you first create a package,
        since you cannot create one that is not
        empty!</para></note>
    </sect2>
  </sect1>

  <!-- Critics that hint at common practice -->

  <sect1 id="s1.ref.design_issues_expected_usage">
    <title>Expected Usage</title>

    <para>Critics concerning generally accepted good practice in
      &argouml;.</para>

    <para>The current version of &argouml; has one critic in this
      category.</para>

    <sect2>
      <title>Clean Up Diagram</title>

      <para>This critic is discussed under an earlier design issues category
        (see <xref linkend="critics.CrNodesOverlap"/>).</para>
    </sect2>
  </sect1>

  <!-- Critics relating to methods (operations) in classes and
       interfaces -->

  <sect1 id="s1.ref.design_issues_methods">
    <title>Methods</title>

    <para>Critics concerning operations in &argouml;.</para>

    <para>The current version of &argouml; has the following critics in this
      category.</para>

    <sect2>
      <title>Change Names or Signatures in &lt;artifact&gt;</title>

      <para>This critic is discussed under an earlier design issues category
        (see <xref linkend="critics.CrOperNameConflict"/>).</para>
    </sect2>

    <sect2 id="critics.CrClassMustBeAbstract">
      <title>Class Must be Abstract</title>

      <para>Suggestion that a class that inherits or defines abstract
        operations must be marked abstract.</para>
    </sect2>

    <sect2 id="critics.CrNoOperations">
      <title>Add Operations to &lt;class&gt;</title>

      <para>Suggestion that the specified class has no operations defined. This
        is required for the class to be useful in a design.</para>
    </sect2>

    <sect2 id="critics.CrTooManyOper">
      <title>Reduce Operations on &lt;artifact&gt;</title>

      <para>Suggestion that the artifact (class or interface) has too many
        operations for a good design, and is at risk of becoming a design
        bottleneck.</para>
    </sect2>
  </sect1>

  <!-- Critics concerning code generation -->

  <sect1 id="s1.ref.design_issues_code_generation">
    <title>Code Generation</title>

    <para>Critics concerning code generation in &argouml;.</para>

    <para>The current version of &argouml; has one critic in this
      category.</para>

    <sect2 id="critics.CrMultipleInheritance">
      <title>Change Multiple Inheritance to interfaces</title>

      <para>Suggestion that a class has multiple generalizations, which is
        permitted by UML, but cannot be generated into Java code, because Java
        does not support multiple inheritance.</para>
    </sect2>
  </sect1>

  <!-- Critics concerning stereotypes -->

  <sect1 id="s1.ref.design_issues_stereotypes">
    <title>Stereotypes</title>

    <para>Critics concerning stereotypes in &argouml;.</para>

    <para>The current version of &argouml; has no critics in this
      category.</para>
  </sect1>

  <!-- Critics concerning inheritance -->

  <sect1 id="s1.ref.design_issues_inheritance">
    <title>Inheritance</title>

    <para>Critics concerning generalization and specialization in
      &argouml;.</para>

    <para>The current version of &argouml; has the following critics in this
      category.</para>

    <sect2>
      <title>Revise Attribute Names to Avoid Conflict</title>

      <para>This critic is discussed under an earlier design issues category
        (see <xref linkend="critics.CrAttrNameConflict"/>).</para>
    </sect2>

    <sect2 id="critics.CrCircularInheritance">
      <title>Remove &lt;class&gt;'s Circular Inheritance</title>

      <para>Suggestion that a class inherits from itself, through a chain of
        generalizations, which is not permitted.</para>

      <caution><para>This critic is marked inactive by default in the
        current release of &argouml; (the only one so marked). It will not
        trigger unless made active.
        <!-- TODO: Check if this is still true! -->
      </para></caution>
    </sect2>

    <sect2>
      <title>Class Must be Abstract</title>

      <para>This critic is discussed under an earlier design issues category
        (see <xref linkend="critics.CrClassMustBeAbstract"/>).</para>
    </sect2>

    <sect2 id="critics.CrFinalSubclassed">
      <title>Remove final keyword or remove subclasses</title>

      <para>Suggestion that a class that is final has specializations, which is
        not permitted in UML.</para>
    </sect2>

    <sect2 id="critics.CrIllegalGeneralization">
      <title>Illegal Generalization</title>

      <para>Suggestion that there is a generalization between artifacts of
        different UML metaclasses, which is not permitted.</para>

      <caution><para>It is not clear that such a generalization can be
        created within &argouml;. It probably indicates that the diagram
        was created by loading a corrupt project, with an XMI file
        describing such a generalization, possibly created by a tool
        other than &argouml;.</para></caution>
    </sect2>

    <sect2 id="critics.CrAlreadyRealizes">
      <title>Remove Unneeded Realizes from &lt;class&gt;</title>

      <para>Suggestion that the specified class has a realization relationship
        both directly and indirectly to the same interface (by realization from
        two interfaces, one of which is a generalization of the other for
        example). Good design deprecates such duplication.</para>
    </sect2>

    <sect2 id="critics.CrUselessAbstract">
      <title>Define Concrete (Sub)Class</title>

      <para>Suggestion that a class is abstract with no concrete subclasses,
        and so can never be realized.</para>
    </sect2>

    <sect2 id="critics.CrUselessInterface">
      <title>Define Class to Implement &lt;interface&gt;</title>

      <para>Suggestion that the interface referred to has no influence on the
        running system, since it is never implemented by a
        class.</para>
    </sect2>

    <sect2>
      <title>Change Multiple Inheritance to interfaces</title>

      <para>This critic is discussed under an earlier design issues category
        (see <xref linkend="critics.CrMultipleInheritance"/>).</para>
    </sect2>

    <sect2>
      <title>Make Edge More Visible</title>

      <para>This critic is discussed under an earlier design issues category
        (see <xref linkend="critics.CrZeroLengthEdge"/>).</para>
    </sect2>
  </sect1>

  <!-- Critics concerning containment -->

  <sect1 id="s1.ref.design_issues_containment">
    <title>Containment</title>

    <para>Critics concerning containment in &argouml;, that is where one
      artifact forms a component part of another.</para>

    <para>The current version of &argouml; has the following critics in this
      category.</para>

    <sect2 id="critics.CrCircularComposition">
      <title>Remove Circular Composition</title>

      <para>Suggestion that there is a series of composition relationships
        (associations with black diamonds) that form a cycle, which is not
        permitted.</para>
    </sect2>

    <sect2 id="critics.CrDupParamName">
      <title>Duplicate Parameter Name</title>

      <para>Suggestion that a parameter list to an operation or event has two
        or more parameters with the same name, which is not
        permitted.</para>
    </sect2>

    <sect2 id="critics.CrMultipleAgg">
      <title>Two Aggregate Ends (Roles) in Binary Association</title>

      <para>Only one end (role) of a binary association can be aggregate or
        composite. This a well-formedness rule of the UML 1.3 standard.</para>

      <para>Aggregation and composition are used to indicate whole-part
        relationships, and by definition, the <quote>part</quote> end cannot be
        aggregate.</para>

      <para>To fix this, identify the <quote>part</quote> end of the
        association, and use the critic wizard (the <literal>Next&gt;</literal>
        button, or manually set its aggregation to <literal>none</literal>
        using the &button2; pop-up menu or the property sheet.</para>

      <para>Composition (more correctly called composite aggregation) is used
        where there is a whole-part relationship that is one-to-one or
        one-to-many, and the lifetime of the part is inextricably tied to the
        lifetime of the whole. Instances of the whole will have responsibility
        for creating and destroying instances of the associated part. This also
        means that a class can only be a part in one composite
        aggregation.</para>

      <para>An example of a composite aggregation might be a database of cars
        and their wheels. This is a one-to-four relationship, and the database
        entry for a wheel is associated with its car. When the car ceases to
        exist in the database, so do its wheels.</para>

      <para>Aggregation (more correctly called shared aggregation) is used
        where there is a whole-part relationship, that does not meet the
        criteria for a composite aggregation. An example might be a database of
        university courses and the students that attend them. There is a
        whole-part relationship between courses and students. However there is
        no lifetime relationship between students and course (a student
        continues to exist even after a course is finished) and the
        relationship is many-to-many.</para>
    </sect2>

    <sect2 id="critics.CrNWayAgg">
      <title>Aggregate End (Role) in 3-way (or More) Association</title>

      <para>Three-way (or more) associations can not have aggregate ends
        (roles). This a well-formedness rule of the UML 1.3 standard.</para>

      <para>Aggregation and composition are used to indicate whole-part
        relationships, and by definition can only apply to binary associations
        between artifacts.</para>

      <para>To fix this, manually select the association, and set the
        aggregation of each of its ends (roles) to <literal>none</literal>
        using the &button2; pop-up menu or the property sheet.</para>
    </sect2>

    <sect2>
      <title>Wrap DataType</title>

      <para>This critic is discussed under an earlier design issues category
        (see <xref linkend="critics.CrNonAggDataType"/>).</para>
    </sect2>

    <sect2 id="critics.CrParamTypeNotImported">
      <title>Import Parameter Type into Class</title>

      <para>Suggestion that the type of a parameter used within an operation of
        a class is not visible.</para>

      <warning><para>It is not clear how this can ever be caused within
        &argouml;. In any case this critic can never trigger in the
        current implementation of &argouml;.</para></warning>
    </sect2>
  </sect1>

</chapter>

<!-- Local stuff for Emacs - please do not delete

Local Variables:
mode: xml
sgml-doctype: "argomanual.xml"
sgml-parent-document: ("argomanual.xml" "chapter" nil)
sgml-validate-command: "nsgmls -wxml -sv ../docbook-setup/xml.dcl \
argomanual.xml"
indent-tabs-mode: nil
End:

-->
