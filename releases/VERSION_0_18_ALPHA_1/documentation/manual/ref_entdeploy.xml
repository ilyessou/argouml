<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- $Id$ -->
<!--
// Copyright (c) 1996-2005 The Regents of the University of California. All
// Rights Reserved. Permission to use, copy, modify, and distribute this
// software and its documentation without fee, and without a written
// agreement is hereby granted, provided that the above copyright notice
// and this paragraph appear in all copies.  This software program and
// documentation are copyrighted by The Regents of the University of
// California. The software program and documentation are supplied "AS
// IS", without any accompanying services from The Regents. The Regents
// does not warrant that the operation of the program will be
// uninterrupted or error-free. The end-user understands that the program
// was developed for research purposes and is advised not to rely
// exclusively on the program for any reason.  IN NO EVENT SHALL THE
// UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR DIRECT, INDIRECT,
// SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING LOST PROFITS,
// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
// SUCH DAMAGE. THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY
// WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
// PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
// CALIFORNIA HAS NO OBLIGATIONS TO PROVIDE MAINTENANCE, SUPPORT,
// UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
-->

<!--

Description of all the artifacts associated with Deployment Diagrams within
ArgoUML.

-->

<chapter id="ch.ref.entdeploy">
  <title>Deployment Diagram Artifact Reference</title>

  <sect1>
    <title>Introduction</title>

    <para>This chapter describes each artifact that can be created within a
      Deployment Diagram. Note that some sub-artifacts of artifacts on the
      diagram may not actually themselves appear on the diagram.</para>

    <para>There is a close relationship between this material and the
      Properties Tab of the Details Pane (see
      <xref linkend="s1.ref.proptab"/>). That section covers Properties in
      general, in this chapter they are linked to specific artifacts.</para>

    <para>Within &argouml;, the deployment diagram is used for both
      component diagrams (i.e. without instances, showing static dependencies
      of components) and deployment diagrams (showing how instances of
      components are handled by instances of nodes at run-time).</para>

    <caution><para>Deployment diagrams are not fully developed yet in
      &argouml;. Some aspects are not fully implemented or may not behave as
      expected. Notable omissions are the possibility to draw interfaces
      and proper stereotyping of the various dependency
      relationships.
      <!-- TODO: Interfaces can only be drawn by "Add to diagram". There should
      be a toolbar button to create new ones. See issue ... -->
      <!-- TODO: Classes can be added by "Add to diagram". Should not. See issue
      ... -->
      <!-- TODO: Interfaces still have the selction action button for creating an
      implementing class by clicking on it. Should not. See issue ... -->
    </para></caution>

    <!-- A diagram to show all things visible on the diagram. Need one for
         component and one for deployment. -->

    <para><xref linkend="fig.ref.component_diagram"/> shows a component diagram
      with all possible artifacts displayed.</para>

    <!-- This has everything, but is a little thin on the ground. -->

    <figure id="fig.ref.component_diagram" float="1">
      <title>Possible artifacts on a component diagram.</title>
      <!-- TODO: The diagram cuts of the 3D edges of the nodes. See issue ...
      -->
      <screenshot><mediaobject>
        <imageobject>
          <imagedata format="GIF" align="center"
                     fileref="images/reference/component_diagram.gif"/>
        </imageobject>
      </mediaobject></screenshot>
    </figure>

    <para><xref linkend="fig.ref.deployment_diagram"/> shows a deployment
      diagram with all possible artifacts displayed.</para>

    <!-- This too has everything, but is a little thin on the ground -->

    <figure id="fig.ref.deployment_diagram" float="1">
      <title>Possible artifacts on a deployment diagram.</title>

      <screenshot><mediaobject>
        <imageobject>
          <imagedata format="GIF" align="center"
                     fileref="images/reference/deployment_diagram.gif"/>
        </imageobject>
      </mediaobject></screenshot>
    </figure>

    <!-- Limitations in Argo/UML relating to lack of relationships -->

    <sect2>
      <title>Limitations Concerning Deployment Diagrams in &argouml;</title>

      <para>The deployment diagram is generally well drawn, but there are only
        a subset of the relationships that should be shown available, which
        restricts the ability to show dynamic behavior of deployed code.</para>

      <para>It is not possible to create new interfaces directly on this
        diagram; they can only be added if they are first created in the model (by
        drawing them on a class diagram).
      </para>
      
      <para>It is an inconvenience that the alternative representation of an
        interface (as a small circle) is not supported.</para>
    </sect2>
  </sect1>

  <!-- Artifacts specific to Deployment Diagrams. Node artifact -->

  <sect1>
    <title>Node</title>

    <para>A node is a run-time physical object on which components may be
      deployed. In the UML metamodel it is a sub-class of
      <literal>Classifier</literal>.</para>

    <para>A node is represented on a class diagram as a three dimensional box, labeled with
      its name.</para>

    <!-- Node details tabs -->

    <sect2>
      <title>Node Details Tabs</title>

      <para>The details tabs that are active for nodes  are as follows.</para>

      <variablelist>

        <!-- Entry for ToDoItem tab -->

        <varlistentry>
          <term><literal>ToDoItem</literal></term>

          <listitem><para>Standard tab.</para></listitem>
        </varlistentry>

        <!-- Entry for Properties tab -->

        <varlistentry>
          <term><literal>Properties</literal></term>

          <listitem><para>See <xref
              linkend="s2.ref.node_property_toolbar"/> and <xref
              linkend="s2.ref.node_property_fields"/>
            below.</para></listitem>
        </varlistentry>

        <!-- Entry for Documentation tab -->

        <varlistentry>
          <term><literal>Documentation</literal></term>

          <listitem><para>Standard tab.</para></listitem>
        </varlistentry>

        <!-- Entry for Style tab -->

        <varlistentry>
          <term><literal>Style</literal></term>

          <listitem><para>Standard tab. The <literal>Bounds:</literal> field
            defines the bounding box for the node on the diagram.</para>

          <warning><para>Beware that in the 0.14 release of &argouml;, the
            bounding box just refers to the front face of the cube. This
            means that the three dimensional top and side may be ignored, for example
            when determining the limits of a diagram for saving
            graphics.</para>
            <!-- TODO: see issue ... -->

          <para>Altering the <literal>Shadow</literal> entry has no
            effect.</para>
            <!-- TODO: see issue ... Solved in PRE-0.15.2. -->
            </warning></listitem>
        </varlistentry>

        <!-- Entry for Source tab -->

        <varlistentry>
          <term><literal>Source</literal></term>

          <listitem><para>Standard tab, but with no contents.</para>

          <caution><para>A node should not generate any code, so having
            this tab active is probably a mistake.
            <!-- TODO: see issue ... -->
          </para></caution></listitem>
        </varlistentry>

        <!-- Entry for Constraints tab -->

        <varlistentry>
          <term><literal>Constraints</literal></term>

          <listitem>
            <para>&constraintssupport;
</para>
          </listitem>
        </varlistentry>

        <!-- Entry for Tagged Values tab -->

        <varlistentry>
          <term><literal>Tagged Values</literal></term>

          <listitem><para>Standard tab. In the UML metamodel,
            <literal>Node</literal> has the following standard tagged
            values defined.</para>

            <itemizedlist>
              <listitem><para><literal>persistence</literal> (from the
                superclass, <literal>Classifier</literal>). Values
                <literal>transitory</literal>, indicating state is
                destroyed when an instance is destroyed or
                <literal>persistent</literal>, marking state is
                preserved when an instance is destroyed.</para></listitem>

              <listitem><para><literal>semantics</literal> (from the
                superclass, <literal>Classifier</literal>). The value is a
                specification of the semantics of the
                node.</para></listitem>

              <listitem><para><literal>derived</literal> (from the
                superclass, <literal>ModelElement</literal>). Values
                <literal>true</literal>, meaning the node is
                redundant&mdash;it can be formally derived from other
                elements, or <literal>false</literal> meaning it
                cannot.</para>

              <note><para>Derived nodes still have their value in
                analysis to introduce useful names or concepts, and in
                design to avoid re-computation.</para></note></listitem>
            </itemizedlist>

            <note><para>The UML <literal>Element</literal> metaclass from
              which all other artifacts are derived includes the tagged
              element <literal>documentation</literal> which is handled by
              the <emphasis>documentation tab</emphasis> under
              &argouml;</para></note></listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <!-- Node properties -->

    <sect2 id="s2.ref.node_property_toolbar">
      <title>Node Property Toolbar</title>

      <variablelist>

        <!-- Entry for Go up button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/navigate_up.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Go
            up</literal></term>

          <listitem><para>Navigate up through the package
            structure.</para></listitem>
        </varlistentry>

        <!-- Entry for Delete button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/property_delete.gif"/>
          </imageobject></inlinemediaobject></guiicon>
            <literal>Delete</literal></term>

          <listitem><para>This deletes the node from the model</para>

          <warning><para>This is a deletion from the model
            <emphasis>not</emphasis> just the diagram. To delete a node
            from the diagram, but keep it within the model, use the main
            menu <literal>Remove From Diagram</literal>
            (or press the Delete key).</para></warning></listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <!-- Fields in the properties tab -->

    <sect2 id="s2.ref.node_property_fields">
      <title>Property Fields For Node</title>

      <variablelist>

        <!-- Entry for Name -->

        <varlistentry>
          <term><literal>Name</literal></term>

          <listitem><para>Text box. The name of the node. The name of a node
            has a leading capital letter, with words separated by
            <quote>bumpy caps</quote>.</para>

          <note><para>&argouml; does not enforce this naming
            convention.</para></note></listitem>
        </varlistentry>

        <!-- Entry for Generalizations -->

        <varlistentry>
          <term><literal>Generalizations</literal></term>

          <listitem><para>Text area. Lists any node that
            <emphasis>generalizes</emphasis> this node.</para>

            <!-- TODO: MVW: Version 0.14 of &argouml; does not seem to support this. 
            How do I create a dependency between nodes? See issue ... -->
            
          <para>&Button1; double click navigates to the generalization and opens
            its property tab.</para>

          <!--para>&Button2; click yields a drop down menu with the following
            entries</para>

          <itemizedlist>
            <listitem><para><literal>Open</literal>. Navigate to the
              selected generalization.</para></listitem>

            <listitem><para><literal>Add</literal>. Add a new
              generalization. Note that the new generalization is added to
              the model, but not the diagram. You will need to find it in
              the explorer and add it from there.</para>

            <tip><para>It is far easier to add generalizations by drawing
              them on the relevant diagram in the editing
              pane.</para></tip></listitem>

            <listitem><para><literal>Delete</literal>. The link from the
              generalization to the node (<emphasis>but not the
              generalization itself</emphasis>) is removed.</para>

            <tip><para>This <emphasis>does not</emphasis> remove the
              generalization from the model or the diagram, leading to
              potentially very confusing diagrams. It is usually far easier
              to remove generalizations from the editing
              pane.</para></tip></listitem>

            <listitem><para><literal>Move Up</literal>. Only available where
              there are two or more generalizations listed, and the
              generalization selected is not at the top. It is moved up
              one.</para></listitem>

            <listitem><para><literal>Move Down</literal>. Only available where
              there are two or more generalizations listed, and the
              generalization selected is not at the bottom. It is moved down
              one.</para></listitem> </itemizedlist-->
          </listitem>
        </varlistentry>

        <!-- Entry for Stereotype -->

        <varlistentry>
          <term><literal>Stereotype</literal></term>

          <listitem>
            <para>Drop down selector. Node is a type of classifier, 
            and so it has the default stereotypes of a classifier 
            as defined in the UML standard.
            &argouml; provides the
            standard
            stereotypes
            for a classifier: 
            <literal>metaclass</literal>,
            <literal>powertype</literal>,
            <literal>process</literal>,
            <literal>thread</literal> and
            <literal>utility</literal>.</para>
          </listitem>
        </varlistentry>

        <!-- Entry for NavStereo -->

        <varlistentry>
          <term><literal>Navigate Stereotype</literal></term>

          <listitem><para><guiicon><inlinemediaobject><imageobject><imagedata
              format="GIF" align="center"
              fileref="images/icons/navigate_stereotype.gif"/>
            </imageobject></inlinemediaobject></guiicon> icon. If a
              stereotype has been selected, this will navigate to the
              stereotype property panel (see <xref
                linkend="s1.ref.stereotype"/>).</para></listitem>
        </varlistentry>

        <!-- Entry for Modifiers -->

        <varlistentry>
          <term><literal>Modifiers</literal></term>

          <listitem><para>Check box, with entries <literal>abstract</literal>,
            <literal>leaf</literal> and <literal>root</literal>.</para>

          <itemizedlist>
            <listitem><para><literal>abstract</literal> is used to declare
              that this node cannot be instantiated, but must always be
              specialized. The name of an abstract node is displayed in
              italics on the diagram.</para></listitem>

            <listitem><para><literal>leaf</literal> indicates that this
              node cannot be further specialized.</para></listitem>

            <listitem><para><literal>root</literal> indicates the node can
              have no generalization.</para></listitem>
          </itemizedlist></listitem>
        </varlistentry>

        <!-- Entry for Namespace -->

        <varlistentry>
          <term><literal>Namespace</literal></term>

          <listitem><para>Drop down selector. Allows altering the namespace for the
            node. This is the package hierarchy.</para>
          </listitem>
        </varlistentry>

        <!-- Entry for Specializations -->

        <varlistentry>
          <term><literal>Specializations</literal></term>

          <listitem><para>Text box. Lists any specialized node (i.e. for which
            this node is a generalization.</para>

<!-- TODO: MVW: Version 0.14 of &argouml; does not seem to support this. 
How do I create a generalisation between nodes? See issue ... -->

<!--          <para>&button1; double click navigates to the generalization and opens
            its property tab.</para>

          <para>&Button2; click yields a drop down menu with five
            entries</para>

          <itemizedlist>
            <listitem><para><literal>Open</literal>. Navigate to the
              selected generalization.</para></listitem>

            <listitem><para><literal>Add</literal>. Add a new
              generalization. Note that the new generalization is added to
              the model, but not the diagram.</para>

            <tip><para>It is far easier to add generalizations by drawing
              them on the relevant diagram in the editing
              pane.</para></tip></listitem>

            <listitem><para><literal>Delete</literal>. The link from the
              generalization to the node (<emphasis>but not the
              generalization itself</emphasis>) is removed.</para>

            <tip><para>This <emphasis>does not</emphasis> remove the
              generalization from the model or the diagram, leading to
              potentially very confusing diagrams. It is usually far easier
              to remove generalizations from the editing
              pane.</para></tip></listitem>

            <listitem><para><literal>Move Up</literal>. Only available where
              there are two or more specializations listed, and the
              specialization selected is not at the top. It is moved up
              one.</para></listitem>

            <listitem><para><literal>Move Down</literal>. Only available where
              there are two or more specializations listed, and the
              specialization selected is not at the bottom. It is moved down
              one.</para></listitem> </itemizedlist>
                -->
                </listitem>
              </varlistentry>

        <!-- Entry for Components -->

        <varlistentry>
          <term><literal>Components</literal></term>

          <listitem><para>Text box. Lists any components (see
            <xref linkend="s1.ref.component"/>) designed to be deployed on
            this type of node.</para>

          <para>&Button1; click navigates to the selected entry,
            <!-- TODO: Should be a double-click, conform with most others! See
            issue ... -->
            &button2; gives a pop up menu with three entries.</para>

          <itemizedlist>
            <listitem><para><literal>Open</literal>. Navigate to the
              <!-- TODO: Useless item, remove this! See issue ... -->
              selected component.</para></listitem>

            <listitem><para><literal>Move Up</literal>. Only available where
              <!-- TODO: Useless item, remove this! See issue ... -->
              there are two or more components, and the component selected is
              not at the top. It is moved up one.</para></listitem>

            <listitem><para><literal>Move Down</literal>. Only available where
              <!-- TODO: Useless item, remove this! See issue ... -->
              there are two or more components listed, and the component
              selected is not at the bottom. It is moved down
              one.</para></listitem> </itemizedlist></listitem>
        </varlistentry>
      </variablelist>
    </sect2>
  </sect1>

  <!-- Node Instance artifact -->

  <sect1 id="s1.ref.node_instance">
    <title>Node Instance</title>

    <para>A node instance is an instance of a node where component instances
      (see <xref linkend="s1.ref.component_instance"/>) may reside. In the UML
      metamodel <literal>NodeInstance</literal> is a sub-class of
      <literal>Instance</literal> and is specifically an instance that is
      derived from a node.</para>

    <para>A node instance is represented on a deployment diagram in &argouml; as
      a three dimensional box labeled with the node instance name (if any) and node type,
      separated by a colon (<literal>:</literal>).</para>

    <tip><para>It is the presence of the colon (<literal>:</literal>) 
      and the underlining of the name and type that
      distinguishes a node instance from a node.</para></tip>

    <!-- Node Instance details tabs -->

    <sect2>
      <title>Node Instance Details Tabs</title>

      <para>The details tabs that are active for node instances are as
        follows.</para>

      <variablelist>

        <!-- Entry for ToDoItem tab -->

        <varlistentry>
          <term><literal>ToDoItem</literal></term>

          <listitem><para>Standard tab.</para></listitem>
        </varlistentry>

        <!-- Entry for Properties tab -->

        <varlistentry>
          <term><literal>Properties</literal></term>

          <listitem><para>See <xref
              linkend="s2.ref.node_instance_property_toolbar"/> and <xref
              linkend="s2.ref.node_instance_property_fields"/>
            below.</para></listitem>
        </varlistentry>

        <!-- Entry for Documentation tab -->

        <varlistentry>
          <term><literal>Documentation</literal></term>

          <listitem><para>Standard tab.</para></listitem>
        </varlistentry>

        <!-- Entry for Style tab -->

        <varlistentry>
          <term><literal>Style</literal></term>

          <listitem><para>Standard tab. The <literal>Bounds:</literal> field
            defines the bounding box for the node instance on the
            diagram.</para>

          <warning><para>Beware that in the current release of &argouml;, the
            bounding box just refers to the front face of the cube. This means
            that the three dimensional top and side may be ignored, for example
            when determining the limits of a diagram for saving
            graphics.
            <!-- TODO: See Node -->
            </para>

          <para>Altering the <literal>Shadow</literal> entry has no
            effect.
            <!-- TODO: See Node -->
          </para></warning></listitem>
        </varlistentry>

        <!-- Entry for Source tab -->

        <varlistentry>
          <term><literal>Source</literal></term>

          <listitem><para>Standard tab, containing just the name of the
            node instance.</para>

          <caution><para>A node instance should not generate any code, so
            having this tab active is probably a
            mistake.
            <!-- TODO: See Node -->
          </para></caution></listitem>
        </varlistentry>

        <!-- Entry for Constraints tab -->

        <varlistentry>
          <term><literal>Constraints</literal></term>

          <listitem>
            <para>&constraintssupport;
</para>
          </listitem>
        </varlistentry>

        <!-- Entry for Tagged Values tab -->

        <varlistentry>
          <term><literal>Tagged Values</literal></term>

          <listitem><para>Standard tab. 
            <!-- MVW: All this is not present. -->
            <!-- TODO: should this not be present? See issue ...-->
            <!--In the UML metamodel,
            <literal>NodeInstance</literal> has the following standard
            tagged values defined.</para>

            <itemizedlist>
              <listitem><para><literal>persistence</literal> (from the
                superclass, <literal>Instance</literal>. Showing the
                permanence of the state information associated with the
                node instance. Values <literal>transitory</literal> (state
                is destroyed when the node instance is destroyed) and
                <literal>persistent</literal> (state is preserved when the
                node instance is destroyed).</para>

              <caution><para>It is conceivable this could apply to some
                robotic systems, or where UML is being used to describe
                systems with human behavior. However it is unlikely to be
                of widespread use.</para></caution></listitem>

              <listitem><para><literal>derived</literal> (from the
                superclass, <literal>ModelElement</literal>). Values
                <literal>true</literal>, meaning the node instance is
                redundant&mdash;it can be formally derived from other
                elements, or <literal>false</literal> meaning it
                cannot.</para>

              <caution><para>It is not clear that this tagged value has any
                great use when applied to a node
                instance.</para></caution></listitem>
            </itemizedlist>
            --> </para>

            <note><para>The UML <literal>Element</literal> metaclass from
              which all other artifacts are derived includes the tagged
              element <literal>documentation</literal> which is handled by
              the <emphasis>documentation tab</emphasis> under
              &argouml;</para></note></listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <!-- Node Instance properties -->

    <sect2 id="s2.ref.node_instance_property_toolbar">
      <title>Node Instance Property Toolbar</title>

      <variablelist>

        <!-- Entry for Go up button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/navigate_up.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Go
            up</literal></term>

          <listitem><para>Navigate up through the package
            structure.</para></listitem>
        </varlistentry>

        <!-- Entry for Delete button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/property_delete.gif"/>
          </imageobject></inlinemediaobject></guiicon>
            <literal>Delete</literal></term>

          <listitem><para>This deletes the node instance from the model</para>

          <warning><para>This is a deletion from the model
            <emphasis>not</emphasis> just the diagram. To delete an node
            instance from the diagram, but keep it within the model, use
            the main menu <literal>Remove From Diagram</literal>
            (or press the Delete key).</para></warning></listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <!-- Fields in the properties tab -->

    <sect2 id="s2.ref.node_instance_property_fields">
      <title>Property Fields For Node Instance</title>

      <variablelist>

        <!-- Entry for Name -->

        <varlistentry>
          <term><literal>Name</literal></term>

          <listitem><para>Text box. The name of the node instance. By
            convention node instance names start with a lower case letter
            and use bumpy caps to divide words within the name.</para>

            <note><para>&argouml; does not enforce this naming
              convention.</para></note>

          </listitem>
        </varlistentry>

        <!-- Entry for Classifier -->

        <varlistentry>
          <term><literal>Classifier</literal></term>

          <listitem><para>Drop down selector. 
          A Node instance type can be selected here.</para>

          <caution><para>&argouml; V0.14 
          lists many more items in the dropdown list 
          then solely Nodes. Beware to select Nodes only.
          <!-- TODO: see enhancement issue ... -->
          <!-- TODO: The dropdown is empty in vPRE-0.15.2. It still was OK in
          V0.15.1. To be re-checked when V0.15.2. will be released! -->
          </para></caution></listitem>
        </varlistentry>

        <!-- Entry for Stereotype -->

        <varlistentry>
          <term><literal>Stereotype</literal></term>

          <listitem><para>Drop down selector. Node instance has no stereotypes
            by default in the UML standard.</para>

          </listitem>
        </varlistentry>

        <!-- Entry for NavStereo -->

        <varlistentry>
          <term><literal>Navigate Stereotype</literal></term>

          <listitem><para><guiicon><inlinemediaobject><imageobject><imagedata
              format="GIF" align="center"
              fileref="images/icons/navigate_stereotype.gif"/>
            </imageobject></inlinemediaobject></guiicon> icon. If a
              stereotype has been selected, this will navigate to the
              stereotype property panel (see <xref
                linkend="s1.ref.stereotype"/>).</para></listitem>
        </varlistentry>

        <!-- Entry for Namespace -->

        <varlistentry>
          <term><literal>Namespace</literal></term>

          <listitem><para>Drop down selector. Records the namespace for the
            node instance. This is the package hierarchy.</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>
  </sect1>

  <!-- Component artifact -->

  <sect1 id="s1.ref.component">
    <title>Component</title>

    <para>A component type represents a distributable piece of 
      implementation of a system, including
      software code (source, binary, or executable) but also 
      including business documents, etc., in a
      human system. Components may be used to show dependencies, 
      such as compiler and run-time
      dependencies or information dependencies in a human organization.
      In the UML metamodel it is a sub-class of
      <literal>Classifier</literal>.
    </para>

    <para>A component is represented on a class diagram as a box with two small
      rectangles protruding from its left side, labeled with its name.</para>

    <!-- Component details tabs -->

    <sect2>
      <title>Component Details Tabs</title>

      <para>The details tabs that are active for components are as
        follows.</para>

      <variablelist>

        <!-- Entry for ToDoItem tab -->

        <varlistentry>
          <term><literal>ToDoItem</literal></term>

          <listitem><para>Standard tab.</para></listitem>
        </varlistentry>

        <!-- Entry for Properties tab -->

        <varlistentry>
          <term><literal>Properties</literal></term>

          <listitem><para>See <xref
              linkend="s2.ref.component_property_toolbar"/> and <xref
              linkend="s2.ref.component_property_fields"/>
            below.</para></listitem>
        </varlistentry>

        <!-- Entry for Documentation tab -->

        <varlistentry>
          <term><literal>Documentation</literal></term>

          <listitem><para>Standard tab.</para></listitem>
        </varlistentry>

        <!-- Entry for Style tab -->

        <varlistentry>
          <term><literal>Style</literal></term>

          <listitem><para>Standard tab. The <literal>Bounds:</literal> field
            defines the bounding box for the component on the
            diagram.</para>
          </listitem>
        </varlistentry>

        <!-- Entry for Source tab -->

        <varlistentry>
          <term><literal>Source</literal></term>

          <listitem><para>Standard tab, but with no contents.</para>

          <caution><para>A component should not generate any code, so
            having this tab active is probably a
            mistake.</para></caution></listitem>
        </varlistentry>

        <!-- Entry for Constraints tab -->

        <varlistentry>
          <term><literal>Constraints</literal></term>

          <listitem>
            <para>&constraintssupport;
</para>
          </listitem>
        </varlistentry>

        <!-- Entry for Tagged Values tab -->

        <varlistentry>
          <term><literal>Tagged Values</literal></term>

          <listitem><para>Standard tab. 
          <!-- MVW: All these are not present. -->
          <!-- TODO: See issue ... -->
<!--          In the UML metamodel,
            <literal>Component</literal> has the following standard tagged
            values defined.</para>

            <itemizedlist>
              <listitem><para><literal>persistence</literal> (from the
                superclass, <literal>Classifier</literal>). Values
                <literal>transitory</literal>, indicating state is
                destroyed when an instance is destroyed or
                <literal>persistent</literal>, marking state is
                preserved when an instance is destroyed.</para></listitem>

              <listitem><para><literal>semantics</literal> (from the
                superclass, <literal>Classifier</literal>). The value is a
                specification of the semantics of the
                component.</para></listitem>

              <listitem><para><literal>derived</literal> (from the
                superclass, <literal>ModelElement</literal>). Values
                <literal>true</literal>, meaning the component is
                redundant&mdash;it can be formally derived from other
                elements, or <literal>false</literal> meaning it
                cannot.</para>

              <note><para>Derived components may have value to indicate
                that the component represents an
                optimization.</para></note></listitem>
            </itemizedlist>
-->
            </para>
            
            <note><para>The UML <literal>Element</literal> metaclass from
              which all other artifacts are derived includes the tagged
              element <literal>documentation</literal> which is handled by
              the <emphasis>documentation tab</emphasis> under
              &argouml;</para></note></listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <!-- Component properties -->

    <sect2 id="s2.ref.component_property_toolbar">
      <title>Component Property Toolbar</title>

      <variablelist>

        <!-- Entry for Go up button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/navigate_up.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Go
            up</literal></term>

          <listitem><para>Navigate up through the package
            structure.</para></listitem>
        </varlistentry>

        <!-- Entry for Delete button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/property_delete.gif"/>
          </imageobject></inlinemediaobject></guiicon>
            <literal>Delete</literal></term>

          <listitem><para>This deletes the component from the model</para>

          <warning><para>This is a deletion from the model
            <emphasis>not</emphasis> just the diagram. To delete a
            component from the diagram, but keep it within the model, use
            the main menu <literal>Remove From Diagram</literal>
            (or press the Delete key).</para></warning></listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <!-- Fields in the properties tab -->

    <sect2 id="s2.ref.component_property_fields">
      <title>Property Fields For Component</title>

      <variablelist>

        <!-- Entry for Name -->

        <varlistentry>
          <term><literal>Name</literal></term>

          <listitem><para>Text box. The name of the component. The name of a
            component has a leading capital letter, with words separated by
            <quote>bumpy caps</quote>.</para>

          <note><para>&argouml; does not enforce this naming
            convention.
            <!-- TODO: See enhancement issue ... -->
          </para></note></listitem>
        </varlistentry>

        <!-- Entry for Stereotype -->

        <varlistentry>
          <term><literal>Stereotype</literal></term>

          <listitem><para>Drop down selector. Component is provided by default
            with the UML standard stereotypes
            <literal>document</literal>, <literal>executable</literal>,
            <literal>file</literal>, <literal>library</literal> and
            <literal>table</literal>. &argouml; also provides the 
            standard Classifier
            stereotypes, <literal>metaclass</literal>,
            <literal>powertype</literal>,
            <literal>process</literal>,
            <literal>thread</literal> and
            <literal>utility</literal>.</para>
          </listitem>
        </varlistentry>

        <!-- Entry for NavStereo -->

        <varlistentry>
          <term><literal>Navigate Stereotype</literal></term>

          <listitem><para><guiicon><inlinemediaobject><imageobject><imagedata
              format="GIF" align="center"
              fileref="images/icons/navigate_stereotype.gif"/>
            </imageobject></inlinemediaobject></guiicon> icon. If a
              stereotype has been selected, this will navigate to the
              stereotype property panel (see <xref
                linkend="s1.ref.stereotype"/>).</para></listitem>
        </varlistentry>

        <!-- Entry for Namespace -->

        <varlistentry>
          <term><literal>Namespace</literal></term>

          <listitem><para>Drop down selector. Records and allows altering 
            the namespace for the
            component. This is the package hierarchy.</para>
          </listitem>
        </varlistentry>

        <!-- Entry for Modifiers -->

        <varlistentry>
          <term><literal>Modifiers</literal></term>

          <listitem><para>Check box, with entries <literal>abstract</literal>,
            <literal>leaf</literal> and <literal>root</literal>.</para>

          <itemizedlist>
            <listitem><para><literal>Abstract</literal> is used to declare
              that this component cannot be instantiated, but must always
              be specialized.</para></listitem>

            <listitem><para><literal>Leaf</literal> indicates that this
              component cannot be further specialized.</para></listitem>

            <listitem><para><literal>Root</literal> indicates the node can
              have no generalization.</para></listitem>
              
            <listitem><para><literal>Active</literal>.
            </para></listitem>
            <!-- TODO: What is the meaning? -->
            <!-- TODO: Remove this (?). See issue ... -->
          </itemizedlist></listitem>
        </varlistentry>

        <!-- Entry for Generalizations -->

        <varlistentry>
          <term><literal>Generalizations</literal></term>

          <listitem><para>Text box. Lists any component that generalizes this
            component.</para>
            <!-- TODO: To be checked. How do I create a Generalization? -->
            <!-- TODO: See issue ... -->
<!--          <para>&Button1; double click navigates to the selected entry, &button2;
            gives a pop up menu with five entries.</para>

          <itemizedlist>
            <listitem><para><literal>Open</literal>. Navigate to the
              selected generalization.</para></listitem>

            <listitem><para><literal>Add</literal>. Add a new
              generalization.</para>

            <caution><para>In the current release of &argouml;
              generalizations of components are not properly
              implemented. This button will add a generalization, named
              null with no parent, that can not be added to the
              diagram. Its value is somewhat
              limited!</para></caution></listitem>

            <listitem><para><literal>Delete</literal>. Removes the link to
              the selected generalization.</para></listitem>

            <listitem><para><literal>Move Up</literal>. Only available where
              there are two or more generalizations, and the generalization
              selected is not at the top. It is moved up one.</para></listitem>

            <listitem><para><literal>Move Down</literal>. Only available where
              there are two or more generalizations listed, and the
              generalization selected is not at the bottom. It is moved down
              one.</para></listitem> </itemizedlist>
          -->
          </listitem>
        </varlistentry>

        <!-- Entry for Specializations -->

        <varlistentry>
          <term><literal>Specializations</literal></term>

          <listitem><para>Text area. Lists any derived components, i.e those
            for which this component is a generalization.</para>
           <!-- TODO: To be checked. How do I create a Generalization? -->
            <!-- TODO: See issue ... -->
<!-- 
          <para>&Button1; double click navigates to the selected entry, &button2;
            gives a pop up menu with one entry.</para>

          <itemizedlist>
            <listitem><para><literal>Open</literal>. Navigate to the
              selected specialization.</para>

            <caution><para>In the current release of &argouml;
              generalizations of components are not properly implemented,
              and this button is always grayed
              out.</para></caution></listitem> </itemizedlist>
-->
          </listitem>
        </varlistentry>

        <!-- Entry for Client Dependencies -->
<!-- TODO: to be completed -->

        <varlistentry>
          <term><literal>Client Dependencies</literal></term>

          <listitem>
            <para>Text area. Lists outgoing dependencies. 
              &Button1; double click navigates to the dependency.
            </para>
          </listitem>
        </varlistentry>
            
        <!-- Entry for Supplier Dependencies -->
<!-- TODO: to be completed -->

        <varlistentry>
          <term><literal>Supplier Dependencies</literal></term>

          <listitem>
            <para>Text area. Lists incoming dependencies.
              &Button1; double click navigates to the dependency.
            </para>
          </listitem>
        </varlistentry>

      </variablelist>
    </sect2>
  </sect1>

  <!-- Component Instance artifact -->

  <sect1 id="s1.ref.component_instance">
    <title>Component Instance</title>

    <para>A component instance is an instance of a component (see <xref
      linkend="s1.ref.component"/>) which may reside on a node instance (see
      <xref linkend="s1.ref.node_instance"/>). In the UML metamodel
      <literal>ComponentInstance</literal> is a sub-class of
      <literal>Instance</literal> and is specifically an instance that is
      derived from a component.</para>

    <para>A component is represented on a class diagram as a box with two small
      rectangles protruding from its left side, labeled with its name.</para>

    <para>A component instance is represented on a sequence diagram in
      &argouml; as a box with two small rectangles protruding from its left
      side labeled with the component instance name (if any) and component
      type, separated by a colon (<literal>:</literal>).</para>

    <tip><para>It is the presence of the colon (<literal>:</literal>) 
      and the underlining of the name and type that
      distinguishes a component instance from a component.</para></tip>

    <!-- Component Instance details tabs -->

    <sect2>
      <title>Component Instance Details Tabs</title>

      <para>The details tabs that are active for component instances are as
        follows.</para>

      <variablelist>

        <!-- Entry for ToDoItem tab -->

        <varlistentry>
          <term><literal>ToDoItem</literal></term>

          <listitem><para>Standard tab.</para></listitem>
        </varlistentry>

        <!-- Entry for Properties tab -->

        <varlistentry>
          <term><literal>Properties</literal></term>

          <listitem><para>See <xref
              linkend="s2.ref.component_instance_property_toolbar"/> and
              <xref linkend="s2.ref.component_instance_property_fields"/>
              below.</para></listitem>
        </varlistentry>

        <!-- Entry for Documentation tab -->

        <varlistentry>
          <term><literal>Documentation</literal></term>

          <listitem><para>Standard tab.</para></listitem>
        </varlistentry>

        <!-- Entry for Style tab -->

        <varlistentry>
          <term><literal>Style</literal></term>

          <listitem><para>Standard tab. The <literal>Bounds:</literal> field
            defines the bounding box for the component on the
            diagram.</para>
          </listitem>
        </varlistentry>

        <!-- Entry for Source tab -->

        <varlistentry>
          <term><literal>Source</literal></term>

          <listitem><para>Standard tab, containing just the name of the
            component instance.</para>

          <caution><para>A component instance should not generate any code,
            so having this tab active is probably a
            <!-- TODO: See enhancement issue ... -->
            mistake.</para></caution></listitem>
        </varlistentry>

        <!-- Entry for Constraints tab -->

        <varlistentry>
          <term><literal>Constraints</literal></term>

          <listitem>
            <para>&constraintssupport;
</para>
          </listitem>
        </varlistentry>

        <!-- Entry for Tagged Values tab -->

        <varlistentry>
          <term><literal>Tagged Values</literal></term>

          <listitem><para>Standard tab. 
            <!-- MVW: All this is not present. -->
            <!-- TODO: should this not be present? See issue ...-->
            <!--In the UML metamodel,
            <literal>ComponentInstance</literal> has the following standard
            tagged values defined.</para>

            <itemizedlist>
              <listitem><para><literal>persistence</literal> (from the
                superclass, <literal>Instance</literal>. Showing the
                permanence of the state information associated with the
                component instance. Values <literal>transitory</literal>
                (state is destroyed when the component instance is
                destroyed) and <literal>persistent</literal> (state is
                preserved when the component instance is
                destroyed).</para></listitem>

              <listitem><para><literal>derived</literal> (from the
                superclass, <literal>ModelElement</literal>). Values
                <literal>true</literal>, meaning the component instance is
                redundant&mdash;it can be formally derived from other
                elements, or <literal>false</literal> meaning it
                cannot.</para>

              <caution><para>It is not clear that this tagged value has any
                great use when applied to a component
                instance.</para></caution></listitem>
            </itemizedlist>
            --></para>
            
            <note><para>The UML <literal>Element</literal> metaclass from
              which all other artifacts are derived includes the tagged
              element <literal>documentation</literal> which is handled by
              the <emphasis>documentation tab</emphasis> under
              &argouml;</para></note></listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <!-- Component Instance properties -->

    <sect2 id="s2.ref.component_instance_property_toolbar">
      <title>Component Instance Property Toolbar</title>

      <variablelist>

        <!-- Entry for Go up button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/navigate_up.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Go
            up</literal></term>

          <listitem><para>Navigate up through the package
            structure.</para></listitem>
        </varlistentry>

        <!-- Entry for Delete button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/property_delete.gif"/>
          </imageobject></inlinemediaobject></guiicon>
            <literal>Delete</literal></term>

          <listitem><para>This deletes the component instance from the
            model</para>

          <warning><para>This is a deletion from the model
            <emphasis>not</emphasis> just the diagram. To delete a
            component instance from the diagram, but keep it within the
            model, use the main menu <literal>Remove From
            Diagram</literal> (or press the Delete key).</para></warning></listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <!-- Fields in the properties tab -->

    <sect2 id="s2.ref.component_instance_property_fields">
      <title>Property Fields For Component Instance</title>

      <variablelist>

        <!-- Entry for Name -->

        <varlistentry>
          <term><literal>Name</literal></term>

          <listitem><para>Text box. The name of the component instance. By
            convention component instance names start with a lower case
            letter and use bumpy caps to divide words within the
            name.</para>

          <note><para>&argouml; does not enforce this naming
            convention.
            <!-- TODO: See enhancement issue ... -->
          </para></note>

          </listitem>
        </varlistentry>

        <!-- Entry for Classifier -->

        <varlistentry>
          <term><literal>Classifier</literal></term>

          <listitem><para>Drop down selector. 
          A Component instance type can be selected here.</para>

          <caution><para>&argouml; V0.14 
          lists many more items in the dropdown list 
          then solely Components. Beware to select Components only.
          <!-- TODO: see enhancement issue ... -->
          <!-- TODO: Broken in vPRE-0.15.2. Check! -->
          </para></caution></listitem>
        </varlistentry>

        <!-- Entry for Stereotype -->

        <varlistentry>
          <term><literal>Stereotype</literal></term>

          <listitem><para>Drop down selector. Component instance has no
            stereotypes by default in the UML standard.</para>

          </listitem>
        </varlistentry>

        <!-- Entry for NavStereo -->

        <varlistentry>
          <term><literal>Navigate Stereotype</literal></term>

          <listitem><para><guiicon><inlinemediaobject><imageobject><imagedata
              format="GIF" align="center"
              fileref="images/icons/navigate_stereotype.gif"/>
            </imageobject></inlinemediaobject></guiicon> icon. If a
              stereotype has been selected, this will navigate to the
              stereotype property panel (see <xref
                linkend="s1.ref.stereotype"/>).</para></listitem>
        </varlistentry>

        <!-- Entry for Namespace -->

        <varlistentry>
          <term><literal>Namespace</literal></term>

          <listitem><para>Drop down selector. Records and allows to change 
            the namespace for the
            component instance. This is the package hierarchy.</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>
  </sect1>

  <!-- Dependency artifact -->

  <sect1>
    <title>Dependency</title>

    <para>A key part of any component or deployment diagram is to show
      dependencies. For details see
      <xref linkend="s1.ref.dependency_class"/>.</para>

    <caution><para>UML relies on stereotyping of dependencies on component and
      deployment diagrams to characterize the types of relationship. In the
      current release of &argouml; there are limitations in the implementation
      of dependencies which limit this functionality.</para></caution>
  </sect1>

  <!-- Class artifact -->

  <sect1>
    <title>Class</title>

    <!-- TODO: Classes can only be added  to the diagram 
    if they already exist in 0.14. 
    See issue ... -->
    <para>A component diagram may show the key internal structure of
      components, including classes within the component. For details see
      <xref linkend="s1.ref.class_class"/>.</para>
      
    <caution><para>
      Classes can only be added to a component diagram if they already exist in
      the model (by selecting them in the explorer and executing the "Add to
      diagram" &button2; command). 
      There is no way to create a new class on a component  diagram.
    </para></caution>
  </sect1>

  <!-- Interface artifact -->

  <sect1>
    <title>Interface</title>

    <!-- TODO: Interfaces can only be added  to the diagram 
    if they already exist in 0.14. 
    See issue ... -->
    <para>A component or deployment diagram may show components or component
      instances which implement interfaces. For details see
      <xref linkend="s1.ref.interface_class"/>.</para>

    <caution><para>The V0.14 release of &argouml; uses the same
      representation of an interface as a class diagram. The UML standard
      suggests that an interface on a component or deployment diagram should
      just be shown as a small open circle, connected to the component which
      realizes that interface.
      <!-- TODO: See enhancement issue ... -->
    </para></caution>

    <warning><para>There is no way to show the linking of an interface to a
      component or component instance in the V0.14 release of
      &argouml;.
      <!-- TODO: See issue ... -->
    </para></warning>
  </sect1>

  <!-- Association artifact -->

  <sect1>
    <title>Association</title>

    <para>Components may be associated to each other. For details 
      about associations, see
      <xref linkend="s1.ref.association_class"/>.
    </para>

    <para>Where classes or interfaces are shown within components on component
      diagrams, they may be shown linked by associations. 
    </para>
  </sect1>

  <!-- Object artifact -->

  <sect1>
    <title>Object</title>

    <para>Just as components may show the classifiers that make up their
      internal structure, component instances on deployment diagrams may show
      the classifier instances that make up their internal structure. In
      practice the only instance that is of use is an object (an instance of a
      class). For details see <xref linkend="s1.ref.object_sequence"/>.</para>
  </sect1>

  <!-- Link artifact -->

  <sect1>
    <title>Link</title>

    <para>Where objects 
      (Node Instances or Class Instances)
      are shown within component instances on deployment
      diagrams, their inter-relationships may be shown as links (instances of
      an association). See <xref linkend="s1.ref.link_sequence"/> for
      details.</para>
  </sect1>

</chapter>

<!-- Local stuff for Emacs - please do not delete

Local Variables:
mode: xml
sgml-doctype: "argomanual.xml"
sgml-parent-document: ("argomanual.xml" "chapter" nil)
sgml-validate-command: "nsgmls -wxml -sv ../docbook-setup/xml.dcl \
  argomanual.xml"
indent-tabs-mode: nil
End:

-->
