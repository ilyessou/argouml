<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- $Id$ -->
<!--
// Copyright (c) 1996-2008 The Regents of the University of California. All
// Rights Reserved. Permission to use, copy, modify, and distribute this
// software and its documentation without fee, and without a written
// agreement is hereby granted, provided that the above copyright notice
// and this paragraph appear in all copies.  This software program and
// documentation are copyrighted by The Regents of the University of
// California. The software program and documentation are supplied "AS
// IS", without any accompanying services from The Regents. The Regents
// does not warrant that the operation of the program will be
// uninterrupted or error-free. The end-user understands that the program
// was developed for research purposes and is advised not to rely
// exclusively on the program for any reason.  IN NO EVENT SHALL THE
// UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR DIRECT, INDIRECT,
// SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING LOST PROFITS,
// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
// SUCH DAMAGE. THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY
// WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
// PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
// CALIFORNIA HAS NO OBLIGATIONS TO PROVIDE MAINTENANCE, SUPPORT,
// UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
-->

  <chapter id="processes">
  <title>Processes for the ArgoUML project</title>
  <indexterm>
    <primary>Processes</primary>
  </indexterm>
  <para>
This chapter contains processes used when working with the 
ArgoUML project.
</para>
  <para>
These processes are provided with the hope of being helpful for
the members of the project and if they feel too complicated,
ambitious or overworked, please raise the issue of simplifying
them on the 
<ulink url="mailto:dev@argouml.tigris.org">developers' mailing list</ulink>.
</para>
  <sect1>
    <title>The big picture for Issues</title>
    <indexterm>
      <primary>Issues</primary>
    </indexterm>
    <para>
Here is the big picture of the life of an Issue.
</para>

 <!--
    <note>
      <para>
A decision was made in October 2005 to have new issues be created
in the UNCONFIRMED state instead of the NEW state.  This is in the
process of being implemented and neither this picture nor the
processes around the issues are not yet updated.
</para>
    </note>
 -->

    <mediaobject>
      <imageobject>
        <imagedata fileref="images/cookbook/IssueBigPicture.gif" format="GIF"/>
      </imageobject>
    </mediaobject>
  </sect1>

  <sect1 id="issue_attributes">
    <title>Attributes of an issue</title>
    <para>
This is what the different attributes mean and how they are used 
in the ArgoUML project.
This is to be read as an addendum to the 
<ulink url="http://argouml.tigris.org/nonav/scdocs/issue_lifecycle.html">
Tigris definition of the resolutions
</ulink>
and for that reason it is not a complete list.
</para>
    <sect2 id="issue_priorities">
      <title>Priorities</title>
      <indexterm>
        <primary>Priorities</primary>
        <secondary>on Issues</secondary>
      </indexterm>
      <indexterm>
        <primary>Issue</primary>
        <secondary>Priority</secondary>
      </indexterm>

      <para>
The priorities are used in the following manner in ArgoUML:
<itemizedlist>
          <listitem>
            <para>P1 - Fatal error</para>

            <para>
These issues are blockers for all releases.
</para>

            <para>
Examples:
ArgoUML cannot start;
Crashes program, JVM or computer; and
Significant loss of user data.
</para>
          </listitem>
          <listitem>
            <para>P2 - Serious error</para>

            <para>
These issues are blockers for stable releases.
</para>

            <para>
Examples:
Information lost.
</para>
          </listitem>
          <listitem>
            <para>P3 - Not so serious error</para>
            <para>
Examples:
Functions not working;
Strange behavior; and
Exceptions logged.
</para>
          </listitem>
          <listitem>
            <para>P4 - Confusing behavior</para>
            <para>
Examples:
Incorrect help texts and documentation;
Inconsistent behavior;
UI not updated; and
Incorrect javadoc.
</para>
          </listitem>
          <listitem>
            <para>P5 - Small problems</para>
            <para>
Examples:
Spelling errors.
Ugly icons.
Excessive logging.
Missing javadoc.
</para>
          </listitem>
        </itemizedlist>
</para>
    </sect2>

    <sect2 id="issuezilla_resolutions">
      <title>Resolutions</title>
      <indexterm>
        <primary>Resolution</primary>
        <secondary>of Issues</secondary>
      </indexterm>
      <indexterm>
        <primary>Issue</primary>
        <secondary>Resolution</secondary>
      </indexterm>
      <para>
<itemizedlist>
          <listitem>
            <para>LATER</para>
            <para>
Used to denote that a certain issue cannot be resolved until
some special upcoming and planned-for event has happened.
The event in question is noted in the target milestone.
</para>
            <para>
Events can be things like, dropping support for a JDK version,
changing the version of UML that we support, or
replacing some central mechanism within ArgoUML.
Once they have a target milestone registered,
they are considered events.
</para>
          </listitem>

          <listitem>
            <para>REMIND</para>
            <para>
Not used.
</para>
            <sidebar>
              <para>
Rationale: Each issue have basically three states:
<orderedlist>
                  <listitem>
                    <para>NEW/STARTED/REOPENED - To be resolved</para>
                  </listitem>
                  <listitem>
                    <para>RESOLVED/VERIFIED - To be closed</para>
                  </listitem>
                  <listitem>
                    <para>CLOSED - Finished.</para>
                  </listitem>
                </orderedlist>
The statistics is based on this and persons looking for 
issues to resolve look among the "To be resolved"-group
(the web pages to help in this are set up in this way).
This is also in sync with our release process.
</para>
              <para>
Looking at it from a single persons perspective an issue is either a
"I could work with this issue but I currently don't",
"I am currently working on this issue", or
"I am now done with my work on this issue".
For a resolver this is corresponds to NEW/REOPEN for the first group,
STARTED for the second and
RESOLVED/VERIFIED/CLOSED for the third.
</para>
              <para>
The RESOLVED/REMIND does not fit this.

They risk to be hanging in the RESOLVED/VERIFIED
state because nobody understands 
where they should go from there.

It is not clear who is responsible to move them forward.
The person that "resolved" them or someone else.
Someone risk to think that there is nothing left to do since it is resolved 
and if so his options of doing work are reduced which could lead to that 
he actually does less with ArgoUML than he else would.
</para>
              <para>
To amend this we have made two things:
<orderedlist>
                  <listitem>
                    <para>Decided that we don't use the
RESOLVED/REMIND
states.
</para>
                  </listitem>
                  <listitem>
                    <para>At every release,
as part of the release process,
clean up issues that for some mysterious reason ended up
in these states
(See <xref linkend="release_process"/>,
<xref linkend="issuezilla_release_maintenance"/>,
<xref linkend="reopen_remind_and_later"/>)
</para>
                  </listitem>
                </orderedlist>
</para>
              <para>
If you plan to solve an issue now,
assign it to you,
start it, and 
set the target milestone to the release you plan to have it solved.
This will signal to everyone that you have the responsibility,
will pursue it, and your time plan.
</para>
              <para>
If you don't plan to solve this now,
leave it in the "up for grabs"-pile (as not resolved).
Somebody else might want to work with it.
</para>
              <para>
If you know that an issue cannot be resolved now because it requires
that another issue is solved before,
register the other issue as "depends on" and leave the issue in the 
"up for grabs"-pile (as not resolved).
</para>
              <para>
If you know that an issue cannot be resolved now because it requires
some big event to take place,
put the milestone for that event in the target milestone and
resolve the issue as RESOLVED/LATER.
</para>
            </sidebar>
          </listitem>
          <listitem>
            <para>WORKSFORME</para>
            <para>
This means that it works in a released version of ArgoUML.
State the version in the comment.
</para>
            <para>
If the version stated by the reporter in the issue is not
the same as the version in the comment then this probably 
means that problem was fixed in some release without anyone
noticing that this problem was fixed.
</para>
          </listitem>
        </itemizedlist>
</para>
    </sect2>
  </sect1>

  <sect1 id="rolesofworkers">
    <title>Roles Of The Workers</title>
    <indexterm>
      <primary>Roles</primary>
    </indexterm>
    <indexterm>
      <primary>Workers</primary>
    </indexterm>
    <para>
The roles described below are per issue, i.e. for every issue, there
is at least a reporter and a resolver.

Hence, each person involved in issues for the ArgoUML project can -
at the same time - have different roles, and consequently, has 
issues to report, 
issues to close, and
issues to resolve.
</para>

    <sect2 id="rolereporter">
      <title>The Reporter</title>
      <para>
The Reporter is the person who enters the issue in Issuezilla.
</para>
      <para>
Skills:
The reporter is an ArgoUML user, should not need any knowledge of what the
ArgoUML project is actually doing.
</para>
      <para>
Responsibilities:
        <itemizedlist>
          <listitem>
            <para>
Report an issue
</para>
            <para>
The address to enter new issues is: 
<ulink url="http://argouml.tigris.org/issues/enter_bug.cgi">
http://argouml.tigris.org/issues/enter_bug.cgi
</ulink>.
To enter new issues, you will need to sign up for a Tigris
account.  For some operations in the issue database you 
may also need to apply for Observer status to the ArgoUML project.
</para>
          </listitem>
          <listitem>
            <para>
Answer clarification requests
</para>
            <para>
Occasionally, the developers of ArgoUML need to request
the Reporter more information, to be able to solve the issue correctly.
Another way of putting it is to say that 
if the issue was reported without some vital information
the Reporter has some more work to do.
</para>
          </listitem>
          <listitem>
            <para>
Reopen the issue
</para>
            <para>
This applies to an issue that is in
the resolved,
verified, or
closed state.
The reporter has the final word:
he can check the result,
and when he does not agree that the solution is correct,
he can reopen the issue himself.
Reopening an issue requires at least "observer" role
in the ArgoUML project.
</para>
          </listitem>
        </itemizedlist>
      </para>
    </sect2>
    <sect2 id="roleresolver">
      <title>The Resolver</title>
      <para>
The Resolver is the software developer who attempts to resolve the issue.
Doing so requires at least "observer" role.
The "developer" role is only needed to commit things into the repository
(e.g. submit changed Java code, scripts or documentation).
</para>
      <para>
Remark: Someone who does not have the developer role,
but solves the issue and convinces someone else to commit the solution,
is still the Resolver even though he cannot commit things into the repository.
</para>
      <para>
The goal of the Resolver is to progress the issue to the status of
"Resolved".
The resolver may be the same person as the reporter.
</para>
      <para>
Responsibilities:
        <itemizedlist>
          <listitem>
            <para>
Decide usefulness
(if this issue is really a bug or enhancement and if it is worth solving)
</para>
            <para>
The Resolver has to decide if solving the issue is
really a useful improvement for ArgoUML.
The Reporter of the issue may very well be mistaken
in entering a bug-issue for what is in fact a feature,
or entering an enhancement-issue which is not really an enhancement.
Another thing that could be is a bug that appears in
very exceptional circumstances and that
may have large impact on ArgoUML architecture.
If the Resolver decides after the investigation that this bug
is really not that important or that he is not the right person
to solve it he enters his findings as a comment and
assigns the issue back to anyone (issues@argouml) and
moves along to work on another issue instead.
</para>
          </listitem>
          <listitem>
            <para>
If applicable, program and test a solution
</para>
            <para>
As this might take considerable time it might be a good idea
of the Resolver to assign the issue to himself to reserve the issue.
He can also signal progress by setting the issue to the state Started.
</para>
          </listitem>
          <listitem>
            <para>
If applicable, write test cases
</para>
          </listitem>
          <listitem>
            <para>
Set the issue in the end to "RESOLVED".
</para>
            <para>
When the resolver is finished with the issue,
he puts it in "RESOLVED" status, and indicates the
"resolution" is FIXED, WORKSFORME, INVALID, WONTFIX, or DUPLICATE.
</para>
          </listitem>
        </itemizedlist>
</para>
      <para>
Skills:
The resolver needs to know a lot of the insides of the ArgoUML code, Java,
coding standards, and also the current status of the project with goals,
requirements and release plans.
</para>
    </sect2>
  </sect1>

  <sect1 id="resolve_issue">
    <title>How to resolve an Issue</title>
    <indexterm>
      <primary>Issues</primary>
      <secondary>Resolving</secondary>
    </indexterm>
    <para>
This can be performed by any member of the project (any role).
Persons without the Developer role need a person
with the Developer role to actually commit the work if the resolution
involves changing some artifact.
There might be special skills involved but it differs widely depending
on the nature of the Issue.
</para>
    <para>
Do the following:
</para>
    <orderedlist>
      <listitem id="resolve_issue_start">
        <para>
Pick any Issue that is NEW or REOPENED
that you from the description think that you are able to solve.
Best results are often obtained if you find an Issue that you really feel
needs to be solved.
<ulink url="http://argouml.tigris.org/issues/buglist.cgi?component=argouml&amp;issue_status=NEW&amp;issue_status=REOPENED">The list of all of them</ulink>.
</para>
      </listitem>
      <listitem>
        <para>
Look at your personal schedule and how much time you have during the
next couple of weeks and compare that to the amount of time you think
you will need to spend for solving the issue.
Compare this to the release plan to see what release your contribution
will fit in.
</para>
      </listitem>
      <listitem>
        <para>
Accept the Issue and reserve it by assigning it to yourself.
Set the Target Milestone to the release you have chosen.
</para>
      </listitem>
      <listitem>
        <para>
Make sure you have a checked out copy of ArgoUML or else check out
a new one.
</para>
        <para>
How this is done is described in
<xref linkend="buildingandtools"/>.
</para>
      </listitem>
      <listitem>
        <para>
Mark the issue as Started (this could be done while assigning also).
</para>
      </listitem>
      <listitem>
        <para>
Change the code to solve the problem.
</para>
      </listitem>
      <listitem>
        <para>
Compile and test your new code.
</para>
        <para>
This should include developing a JUnit test case to
verify that the problem is solved.
You could also develop the JUnit test case before actually solving
the problem.
</para>
        <para>
If your solution did not work as intended, continue changing it
until it does.
</para>
        <para>
If you feel that your estimation of the complexity of the problem
and your own abilities and time available was incorrect,
then change the Target Milestone of the Issue to another one
that fits your new estimation.
This is just a change of plan.
</para>
        <para>
If you, at this point, feel that your personal plans have changed
so that you won't have time to pursue the work,
change the Issue back to "NEW" with your experiences so far
stated in the comment.
This means that you are giving up and giving the Issue back to
anyone.
You should also assign it back to issues@argouml or if you know
someone else in the ArgoUML team that will continue the work,
assign it to him.
Remember not to commit your changes in the main branch but please
commit your changes (if any) into a work branch and state the name
of the branch in the issue.
That will make it possible for someone to make use of your work so far.
</para>
      </listitem>
      <listitem>
        <para>
Commit your changes and the JUnit test cases stating
the number of the Issue in the comment.
</para>
        <para>
If you don't have a developer role in the project,
this involves sending your changes to someone who has
and then convincing him to commit them for you.
</para>
      </listitem>
      <listitem>
        <para>
"Resolve" the Issue with the resolution "FIXED".
</para>
        <para>
Also set the target milestone of the upcoming release
that will include the fix.
</para>
      </listitem>
      <listitem>
        <para>
Sit back and feel the personal satisfaction of having completed
something that will be part of the ArgoUML product.
</para>
      </listitem>
      <listitem>
        <para>
If you during this, have discovered other problems,
create new Issues stating those new problems
according to the rule for creating Issues.
</para>
      </listitem>
    </orderedlist>
  </sect1>

  <sect1 id="close_verified_issue">
    <title>How to Close an Issue</title>
    <indexterm>
      <primary>Issues</primary>
      <secondary>Closing</secondary>
    </indexterm>
    <para>
This is an optional step performed by 
anyone that has personal interest in the issue.
You need to be a member of the project (any role).
</para>
    <para>
If this is not done, all issues will be summarily closed
by the release responsible a while after the release.
</para>
    <orderedlist>
      <listitem>
        <para>
Pick any Issue that is RESOLVED or VERIFIED
(<ulink url="http://argouml.tigris.org/issues/buglist.cgi?component=argouml&amp;issue_status=RESOLVED&amp;issue_status=VERIFIED">
all RESOLVED or VERIFIED issues
</ulink>). 
</para>
      </listitem>
      <listitem>
        <para>
If you are satisfied, Close the issue.
</para>
      </listitem>
      <listitem>
        <para>
If you are satisfied and want to support the closing but not confident
enough to close the issue, verify the issue with your comments.
</para>
      </listitem>
      <listitem>
        <para>
If you are not satisfied but the problem is solved as it is written in
the Issue, Close the issue and open a new Issue with
the rest of the problem.
</para>
      </listitem>
      <listitem>
        <para>
If you are not satisfied and the problem is not solved, put the Issue
in status REOPENED with a description on what you are not satisfied
with.
</para>
      </listitem>
    </orderedlist>
  </sect1>

  <sect1 id="issues_dependencies">
    <title>How to relate issues to problems in dependencies</title>
    <indexterm>
      <primary>dependencies</primary>
    </indexterm>
    <para>
ArgoUML uses products internally and is very 
dependent on these products functioning well.
This are products like GEF, MDR, OCL, log4j, ...
</para>
    <para>
Occasionally a problem found in ArgoUML is found to be a problem in one
of the dependencies and cannot be or is extremely complicated to fix
within ArgoUML.
</para>
    <para>
If this happens, this is the way to handle this problem.
</para>
    <para>
This can be performed by any member of the project (any role).
There might be special skills involved depending on the nature of the problem.
In this description "issue" means a issue in Issuezilla,
"bug report" means a bug report in some other project,
and "problem" denotes the conceptual problem.
</para>
    <para>
Do the following:
</para>
    <orderedlist>
      <listitem>
        <para>
During your examination of an issue you find that the problem
is in one of the ArgoUML dependencies (GEF, MDR, OCL, ...).
</para>
      </listitem>
      <listitem>
        <para>
Make sure that the issue is assigned to you.
</para>
      </listitem>
      <listitem>
        <para>
Write a comment in the issue stating which one of the dependency
that has the problem (and what the problem is within that dependency).
</para>
      </listitem>
      <listitem>
        <para>
Post a bug report in that dependency bug reporting tool
(or find that a bug report already registered).
</para>
        <para>
I am assuming that there is such a tool for the dependency in question.
If there isn't,
then make the bug report to the person responsible for this product
so that we are sure that the problem is communicated.
</para>
      </listitem>
      <listitem>
        <para>
Accept the issue (set it to STARTED) and
enter the reference from the dependency bug reporting tool and
if possible the URL to the bug reporting tool or to the bug report in question.
</para>
        <para>
I am assuming that there is a bug reporting tool for the dependency.
If there isn't for the product in question,
then include all communications (both ways) in the issue.
</para>
      </listitem>
    </orderedlist>
    <para>
You are now responsible to follow up on 
the upcoming releases of the dependency.
If you don't think that you are the best person for this
(you should be since it was you that found that this problem
is in the dependency),
assign the issue to "the right person".
To follow up you should do the following.
</para>
    <orderedlist>
      <listitem>
        <para>
Look at each new release of that dependency to see if the bug report
is in fact stated as fixed in that release.
</para>
      </listitem>
      <listitem>
        <para>
If the bug report is fixed, then you weight together 
the importance of the problem, 
other bug reports that are also problems in ArgoUML 
that are solved in that release,
the amount of work needed to fit the new version of the dependency
instead of the old one,
the planned releases of the dependency with promises to
solve other bug reports,
and
the current release plan of ArgoUML.
From this you decide whether it is time to do the update of 
the dependency within ArgoUML or to wait.
</para>
      </listitem>
      <listitem>
        <para>
If you decide that it is time to update,
you assign all issues against that dependency to you (if not already), 
then you do the work.
The work is to add the new version of the dependency to ArgoUML,
do all the needed work within ArgoUML to fit the new version,
test and commit everything,
put the issues indeed fixed in RESOLVED/FIXED,
and close the bugs registered in the dependency bug reporting tool.
</para>
      </listitem>
    </orderedlist>

    <para>
For dependencies that are not delivered with ArgoUML
(JRE, Xerces, OS, drivers, HW, ...),
the same process is taken except that
the issue is solved when it is entered into the ArgoUML FAQ or documentation
or in some cases as tests in the code testing that we are not using that
version.
At that point is resolved (as RESOLVED/FIXED).
</para>
    <para>
The rationale for this is that we, the development team, help the user
to the right version of these by the FAQ and documentation and by code
testing the versions.
</para>
  </sect1>

  <sect1 id="proc-create-stable-releases">
    <title>How to Create a Stable Release</title>

    <para>
We have two kinds of releases of ArgoUML:
</para>

    <itemizedlist>
      <listitem>
        <para>
Development releases.
</para>
      </listitem>
      <listitem>
        <para>
Stable releases.
</para>
      </listitem>
    </itemizedlist>

    <para>
Stable releases are supposed to be better quality-wise and are
always advertised to the users community
on the main ArgoUML home page and
as a news announcement.
</para>

    <para>
Development releases are not supposed to be used by users and
are only advertised to users for the purpose of recruiting developers
or soliciting help with implementation and test of new features. 
</para>

    <para>
To increase the quality of a stable release, a stable release is preceded 
by a period during which there are a sequence of releases with increased 
quality standards.
</para>

    <para>
The whole release schedule leading up to a stable release and
patched stable release looks like this:
</para>

    <itemizedlist>
      <listitem>
        <para>
Development Period.
</para>
        <para>
A period of one to several months where no special restrictions apply.
</para>
        <para>
During this period we attempt to make one development release per month.
The releases are named x.y.z where
y is an odd number and
z is counting upwards from 1.
</para>
        <para>
The releases are checkpoints where:
</para>
        <itemizedlist>
          <listitem>
            <para>Everything compiles (including the sub-projects).</para>
          </listitem>
          <listitem>
            <para>The release script works.</para>
          </listitem>
          <listitem>
            <para>No JUnit tests are failing.</para>
          </listitem>
          <listitem>
            <para>There are no P1 issues.</para>
          </listitem>
        </itemizedlist>

        <para>
The releases are used:
</para>

        <itemizedlist>
          <listitem>
            <para>As reference points when reporting bugs.</para>
          </listitem>

          <listitem>
            <para>
As reference points and convenient downloads for persons working with modules.
</para>
          </listitem>

        </itemizedlist>
      </listitem>

      <listitem>
        <para>
First Alpha.
</para>
        <para>
This is the enhancement freeze point.
All enhancements that are not completed and committed in the main trunk
before this point will not be
included in the stable release.
</para>
        <para>
The First Alpha release is named x.y.alpha1 or x.y.ALPHA_1 depending on
the context.
It marks the end of the Development Period and 
the start of the Alpha Period.
</para>
        <para>
Otherwise it works just like a development release.
</para>
      </listitem>

      <listitem>
        <para>
Alpha Period.
</para>
        <para>
A period of a couple of weeks where special restrictions apply 
when committing into the main trunk:
</para>

        <itemizedlist>
          <listitem>
            <para>Only bug fixes are allowed in the code.</para>
            <para>
Put the number of the DEFECT you are addressing by the commit in the message.
</para>
            <para>
Test case code can be added.
Documentation, web site and other things can be added.
</para>
          </listitem>
        </itemizedlist>
        <para>
Exceptions to this are requested to and approved
by the Release Responsible
before commit.
</para>

        <para>
During this period we attempt to make at least one Alpha Release
each week.
The releases are named
<replaceable>x</replaceable>.<replaceable>y</replaceable>.alpha<replaceable>z</replaceable>
where
<replaceable>y</replaceable> is an even number and
<replaceable>z</replaceable> is
counting upwards from 1 that is the first alpha.
</para>

        <para>
The purpose of the releases and their use are the same as during
the development period.
</para>
      </listitem>

      <listitem>
        <para>
First Beta.
</para>
        <para>
This is the bug fixes freeze point.
All enhancements and bug fixes that are not 
completed and committed in the main trunk before this point
will not be included in the stable release.
A known problems list could be compiled at this point.
</para>
        <para>
The first beta release is named
<replaceable>x</replaceable>.<replaceable>y</replaceable>.beta1 or
<replaceable>x</replaceable>.<replaceable>y</replaceable>.BETA_1
depending on the context.
It marks the end of the Alpha Period and 
the start of the Beta Period.
</para>
        <para>
It is the first release candidate for the stable release.
Because of this it is required that:
</para>
        <itemizedlist>
          <listitem>
            <para>Everything compiles (including the sub-projects).</para>
          </listitem>
          <listitem>
            <para>The release script works.</para>
          </listitem>
          <listitem>
            <para>No JUnit tests are failing.</para>
          </listitem>
          <listitem>
            <para>There are no P1 or P2 issues.</para>
          </listitem>
        </itemizedlist>

        <para>
Otherwise it works just like a development release.
</para>
      </listitem>

      <listitem>
        <para>
Beta Period.
</para>
        <para>
A period of a couple of weeks where the focus is quality assurance.
Every developer should strive to:
</para>
        <itemizedlist>
          <listitem>
            <para>
Test ArgoUML as thoroughly as possible.
Especially the areas that are new or changed since the last release.
</para>
          </listitem>
          <listitem>
            <para>
Test and close issues that are resolved to make sure the problem is gone.
</para>
          </listitem>
          <listitem>
            <para>
Scrutinize the commits in the main trunk to see that no new bugs
are introduced.
</para>
          </listitem>
        </itemizedlist>

        <para>
Extreme caution applies when committing into the main trunk.
Only under the following conditions are commits allowed:
</para>
        <itemizedlist>
          <listitem>
            <para>
It is a fix to some DEFECT that was previously fixed
but it was found during the verification that the solution was not
correct or complete.
</para>
            <para>
Reopen the DEFECT when the problem is found with a statement of what is
still the problem.
Put the number of the DEFECT you are addressing by the commit in the message
together with the statement of the part of the problem.
Resolve the DEFECT as FIXED and update the target milestone with 
the release name of the next beta.
</para>
            <para>
Test case code can still be added.
Final documentation and web site updates for the release are done.
</para>
          </listitem>

          <listitem>
            <para>
All JUnit test cases are run from a cleaned checked out copy
at the commit and no problems are found.
</para>
          </listitem>
        </itemizedlist>
        <para>
Exceptions to this are requested and approved
by the Release Responsible
before commit.
</para>

        <para>
If a new problem is found the following needs to be done before
committing the solution:
</para>
        <itemizedlist>
          <listitem>
            <para>
The problem is registered as a DEFECT.
</para>
          </listitem>
          <listitem>
            <para>
The solution is implemented.
</para>
            <para>
Here the requirement is a high on the quality and low impact of the solution.
</para>
          </listitem>
          <listitem>
            <para>
A request is made to the Release Responsible to allow this change.
</para>
          </listitem>
          <listitem>
            <para>
This is granted by the Release Responsible.
</para>
          </listitem>
        </itemizedlist>

        <para>
During the period we attempt to release at least one beta release
each week.
The releases are named
<replaceable>x</replaceable>.<replaceable>y</replaceable>.beta<replaceable>z</replaceable>
where
<replaceable>y</replaceable> is an even number and
<replaceable>z</replaceable> is counting upwards from 1 that is the first beta.
</para>

        <para>
Each release is a release candidate.
When we are confident that there are no more problems in this release
we make the stable release without code changes compared to the last beta.
</para>
      </listitem>

      <listitem>
        <para>
Stable Release.
</para>

        <para>
This marks the end of the Alpha and Beta Period and 
the start of the next Development Period.
</para>

        <para>
The release is named
<replaceable>x</replaceable>.<replaceable>y</replaceable>
where
<replaceable>y</replaceable> is an even number.
</para>

        <para>
The release is used:
</para>
        <itemizedlist>
          <listitem>
            <para>By all users.</para>
          </listitem>
        </itemizedlist>

        <para>
It can also be used as a development release.
</para>
      </listitem>

      <listitem>
        <para>
A Stable Patch Release.
</para>

        <para>
If we find a serious problem in the stable release
we can decide to make a Stable Patch Release.
</para>

        <para>
The following needs to be done before committing the solution:
</para>
        <itemizedlist>
          <listitem>
            <para>
The problem is registered as a DEFECT stating that it is a problem in the
Stable Release or a previous Stable Patch Release.
</para>
          </listitem>
          <listitem>
            <para>
A working branch is created against the release tag of the 
Stable Release or Stable Patch Release
and the solution is implemented in that branch.
</para>
            <para>
Here the requirement is a high on the quality and low impact of the solution.
</para>
          </listitem>
          <listitem>
            <para>
We decide that it is a serious problem and that we are going to do a
Stable Patch Release.
</para>
          </listitem>
          <listitem>
            <para>
Several developers scrutinize the solution, testing and verifying
in the branch of the issue.
</para>
          </listitem>
          <listitem>
            <para>
The Release Responsible creates a branch.
If this is not the first Stable Patch Release the branch is reused.
</para>
          </listitem>
          <listitem>
            <para>
The Release Responsible merges the solution into the branch.
</para>

            <para>
A Stable Patch Release could contain several issues resolved.
In that case they are all merged.
</para>
          </listitem>
          <listitem>
            <para>
Several developers scrutinize the merge, testing and verifying
in the release branch.
</para>
          </listitem>
        </itemizedlist>

        <para>
The release is named
<replaceable>x</replaceable>.<replaceable>y</replaceable>.<replaceable>z</replaceable>
where
<replaceable>y</replaceable> is an even number, and
<replaceable>z</replaceable> is counting upwards from 1.
</para>

        <para>
The release is used:
</para>
        <itemizedlist>
          <listitem>
            <para>By all users.</para>
          </listitem>
        </itemizedlist>

        <para>
After the release is completed the person working with the solution
commits his solution also in the main trunk if still applicable there.
</para>
      </listitem>
    </itemizedlist>
  </sect1>

  <sect1 id="mailing-list-moderating">
    <title>Moderation of a mailing list</title>

    <para>
When a mail is sent to one of the argouml mailing lists and
it is not automatically approved, it is sent to the moderator
for approval.
</para>
    <para>
The moderator approves or rejects it by sending a mail to
one of the mail addresses in the mail he receives.
</para>
    <para>
If the moderator rejects the mail, a message can be sent to the
original poster.
</para>
    <sidebar>
      <para>
Here is a suggestion of such a message that Linus Tolke uses on the
argouml dev list:
</para>
      <para>
%%% Start comment
</para>
      <para>
Hello!
</para>
      <para>
You have written a mail to the ArgoUML dev list.
This mail was not automatically approved by the mailing list mechanism
but instead sent to me, the moderator, for approval.
Most likely, this is because you are not subscribed to the list or
the from field of the sent mail was different from the mail address
that is subscribed to the list so
the list mechanism don't consider you as subscribed. 
</para>
      <para>
As a moderator, I assume that this was a misstake.
Either
a misstake to send the mail to the list in the first place
since the list don't accept mails from non-subscribers, or
a misstake in using the incorrect from address.
For this reason I have not approved you mail for the mailing list.
If the misstake was that you had forgot to subscribe,
please subscribe and resend the mail.
If the misstake was that you used the incorrect from address,
please resend the mail using the correct from address.
</para>
      <para>
If this is not a misstake,
I assume that this is because
you are subscribed to the mailing list with one mail address and
wants to (or has to) send mails using another.
This is possible, however some special allowing is possible.
If this is the case, please send me a mail at
dev-owner@argouml.tigris.org explaining this and including your
two mail addresses, and then send the mail immediately again.
Then I will approve the mail and allow your mail address so
that future postings will go through immediately.
</para>
      <para>
There are two reasons for not allowing posts to the list
without being a member.
The first one is from a spam fighting perspecting.
The ArgoUML mailing lists attract a fair amount of commercial messages and
scams that we don't want to resend to all list members.
The second one is that answers to your postings on the list
are always sent back to the list.
Unless you are a member you will miss it.

For this reason,
if you become a member on the list just to send a single mail,
please linger on the list for a couple of weeks to receive any
answers or follow-ups to your mail.
</para>
      <para>
I hope that you accept the policy and the measure taken by me,
the moderator and wish you welcome to the ArgoUML project and
the dev mailing list for developers of ArgoUML.
</para>
      <para>
        /Linus, moderator of the dev@argouml.tigris.org mailing list
</para>
      <para>
%%% End comment
</para>
</sidebar>
  </sect1>

</chapter>



<!-- Local stuff for Emacs - please do not delete

Local Variables:
mode: xml
sgml-doctype: "cookbook.xml"
sgml-parent-document: ("cookbook.xml" "chapter" nil)
sgml-validate-command: "nsgmls -wxml -sv ../docbook-setup/xml.dcl \
  cookbook.xml"
indent-tabs-mode: nil
End:

-->
