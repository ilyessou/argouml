<?xml version="1.0" encoding="UTF-8"?>
<!-- $Id$

    Ant build file for App, all subsystems not yet split.

    This is designed to work:
    - in the subdirectory named app, as stored in the repository.
      Used when compiling, running tests from the command line.
    - When checked out from within Eclipse (subdirectory named argouml-app)
      Used for generating code.

Building this requires:
    model

  -->

<project basedir="." default="compile" name="argouml">

  <!-- =================================================================== -->
  <!-- Initialization target                                               -->
  <!-- =================================================================== -->

  <target name="init" depends="pde-init">

    <tstamp>
      <format pattern="yyyy" property="year"/>
    </tstamp>

    <property name="local.build.properties" value="build.properties"/>
    <property name="user.build.properties" 
              value="${user.home}/argouml.build.properties"/>
    <property file="${local.build.properties}"/>
    <property file="${user.build.properties}"/>

    <!-- we really need an absolute path for argo.root.dir -->
    <!-- if it is set in a property file before now, it must be absolute -->
    <property name="argo.root.dir" value="${basedir}/.." />
    <property file="${override.build.properties}"/>

    <!-- Try to figure out where our tools directory is. Done after overrides
    are loaded so user can override, but before defaults -->
    <property name="tool.test.file" value="checkstyle/java.header"/>
    <available file="${argo.root.dir}/argouml-core-tools/${tool.test.file}" 
    	type="file" property="argo.tools.dir" value="${argo.root.dir}/argouml-core-tools"/>
    <available file="../../tools/${tool.test.file}" 
    	type="file" property="argo.tools.dir" value="../../tools"/>

    <property file="default.properties"/>

    <property file="${argo.root.dir}/argouml-build/default.properties"/>

    <property name="build.dir" location="build"/>
    <property name="build.classes" value="${build.dir}/classes"/>

    <property name="tests.classes" value="${build.dir}/tests/classes"/>
    <property name="tests.reports" value="${build.dir}/tests/reports"/>

    <path id="java.tools.classpath">
      <pathelement path="${JAVA_HOME}/lib/tools.jar"/>
    </path>

    <path id="src.compile.classpath">
      <fileset dir="lib">
        <include name="*.jar"/>
      </fileset>
      <fileset dir="../argouml-core-model/build/">
        <include name="*.jar"/>
      </fileset>
    </path>

    <!-- This runtime classpath is used for tests and other things started
         from this file.
      -->
    <path id="src.run.classpath">
      <path refid="src.compile.classpath"/>
      <!-- only one of the following will be used at a time -->
      <!-- we put them together because there's little risk of crosstalk -->
      <fileset dir="../argouml-core-model-mdr/build/">
        <include name="*.jar"/>
      </fileset>
      <fileset dir="../argouml-core-model-euml/build/">
        <include name="*.jar"/>
      </fileset>
    </path>

    <path id="tests.compile.classpath">
      <pathelement location="${build.classes}"/>
      <pathelement location="${argo.tools.dir}/junit-3.8.2/junit.jar"/>
      <pathelement location="${argo.tools.dir}/lib/easymock12.jar"/>
      <pathelement location="${argo.tools.dir}/jdepend-2.9/lib/jdepend-2.9.jar"/>
      <path refid="src.compile.classpath"/>
    </path>

    <path id="tests.run.classpath">
      <path refid="tests.compile.classpath"/>
      <fileset dir="../argouml-core-model-mdr/build/">
        <include name="*.jar"/>
      </fileset>
    </path>

    <!-- In order to use ant optional tasks which use jars that are not -->
    <!-- copied into ANT_HOME/lib, we must declare the tasks ourselves. -->

    <property name="name" value="argouml"/>

    <property name="cobertura.dir" value="${argo.tools.dir}/cobertura-1.9" />
    <property name="cobertura.datafile" value="${build.dir}/cobertura.ser" />
    <path id="cobertura.classpath">
      <fileset dir="${cobertura.dir}">
        <include name="cobertura.jar" />
        <include name="lib/**/*.jar" />
      </fileset>
    </path>
 
  </target>
	

  <target name="init-coverage" depends="init">
    <taskdef classpathref="cobertura.classpath" resource="tasks.properties" />             
  </target>


  <!-- =================================================================== -->
  <!-- Initialization target for optional ant tasks                        -->
  <!-- =================================================================== -->
  <target name="ant.optional.init" depends="init">
    <path id="ant.optional.classpath">
      <pathelement location="${ant.home}/libopt/ant-junit.jar"/>
      <pathelement location="${junit.jar.path}"/>
      <pathelement location="${easymock.jar.path}"/>
      <pathelement location="${jdepend.jar.path}"/>
      <pathelement location="${bsf.jar.path}"/>
      <pathelement location="${javasrc.jar.path}"/>
    </path>

    <taskdef classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTask" name="junit">
      <classpath>
        <path refid="ant.optional.classpath"/>
      </classpath>
    </taskdef>

    <taskdef classname="org.apache.tools.ant.taskdefs.optional.junit.XMLResultAggregator" name="junitreport">
      <classpath>
        <path refid="ant.optional.classpath"/>
      </classpath>
    </taskdef>

  </target>


  <!-- Note this file can only make Ant display values set in the
       file correctly, but external values in the environment or
       properties file will be operational.
   -->

  <!-- =================================================================== -->
  <!-- Prepares the build directory                                        -->
  <!-- =================================================================== -->

  <target name="prepare" depends="init">
    <!-- create directories -->
    <echo message="Preparing the build directories in argouml-app"/>
    <mkdir dir="${build.dir}"/>
    <mkdir dir="${build.classes}"/>

    <copy todir="${build.classes}/org/argouml/Images">
      <fileset dir="src/org/argouml/Images" includes="**/**"/>
    </copy>

    <copy todir="${build.classes}/org/argouml/i18n">
      <fileset dir="src/org/argouml/i18n" includes="*.properties"/>
    </copy>

    <copy todir="${build.classes}/org/argouml/resource">
      <fileset dir="src/org/argouml/resource" 
        includes="**/**"/>
    </copy>
    <!-- this should copy across all .tee files, dtds and xslt  for persistence mechanism -->
    <copy todir="${build.classes}/org/argouml/persistence">
      <fileset dir="src/org/argouml/persistence" 
        includes="**/**"/>
    </copy>

    <copy todir="${build.classes}/org/argouml/profile/profiles">
      <fileset dir="src/org/argouml/profile/profiles"
          includes="**/*.xmi,**/README.txt"/>
    </copy>

    <!-- The class that uses argo.ini was deprecated for 0.25.4.  It can be 
         removed when that class is removed after the release of 0.26 -->
    <copy todir="${build.classes}/org/argouml">
      <fileset dir="src/org/argouml"
          includes="*argo.ini"/>
    </copy>
  </target>
  
  <target name="prepare-tests" depends="init">
    <!-- copy test files -->
    <copy todir="${tests.classes}/testmodels">
      <fileset dir="tests/testmodels" includes="**/**"/>
    </copy>
  </target>

  <!-- =================================================================== -->
  <!-- Compiles the source directory                                       -->
  <!-- =================================================================== -->
  <target name="compile"
      depends="prepare"
      description="Compile the sources.">

    <echo message="Compiling the sources in argouml-app"/>

    <javac debug="${debug}" 
    	   deprecation="${deprecation}"
    	   destdir="${build.classes}"
    	   includes="org/argouml/**/*.java"
    	   optimize="${optimize}"
           includeAntRuntime="no" 
           bootclasspath="${bundleBootClasspath}" 
    	   srcdir="src"
    	   source="1.5"
    	   target="1.5">
      <compilerarg compiler="javac1.5" line="-Xlint:unchecked"/>
      <compilerarg line="-log ${build.dir}/compile.log" compiler="org.eclipse.jdt.core.JDTCompilerAdapter" />
      <classpath>
        <path refid="src.compile.classpath"/>
      </classpath>
    </javac>
  </target>

  <!-- =================================================================== -->
  <!-- Copies the complete set of jar files to the build directory.        -->
  <!-- =================================================================== -->
  <target name="jar" depends="compile"
          description="Build the main jar file.">
    <copy file="src/templates/manifest.template"
          overwrite="on"
          tofile="${build.classes}/manifest.mf"/>
    <jar basedir="${build.classes}"
         excludes="*.txt,*.bat,*.xml,*.sh" 
         includes="org/argouml/**"
         manifest="${build.classes}/manifest.mf"
	 jarfile="${build.dir}/${name}.jar" />

    <copy todir="${build.dir}">
      <fileset dir="lib" includes="*.jar"/>
    </copy>

    <copy file="src/README.txt" tofile="${build.dir}/README.txt"/>
    <copy file="src/bin/argouml.sh" todir="${build.dir}"/>
    <copy file="src/bin/argouml.bat" todir="${build.dir}"/>
    <copy file="src/bin/argouml2.sh" todir="${build.dir}"/>
    <copy file="src/bin/argouml2.bat" todir="${build.dir}"/>
    <copy file="src/bin/ArgoUML.ico" todir="${build.dir}"/>
    <copy file="src/bin/ArgoUMLdoc.ico" todir="${build.dir}"/>

  </target>


  <!-- =================================================================== -->
  <!-- Clean targets                                                       -->
  <!-- =================================================================== -->
  <target name="clean" depends="init"
          description="Clean out all built files.">

    <delete dir="${build.dir}"/>

    <antcall target="coverage-clean"/>
    <antcall target="pde-clean" />
  </target>



  <!-- ################################################################### -->
  <!-- Section with tests.                                                 -->
  <!-- ################################################################### -->


  <!-- =================================================================== -->
  <!-- Compiles the tests                                                  -->
  <!-- =================================================================== -->

  <target name="compile-tests" depends="prepare">

    <!-- create directories -->
    <mkdir dir="${tests.classes}"/>

    <!-- There are classes/test that actually test deprecated methods. -->
    <!-- They are listed here. -->
    <!-- We want debug, optimize, deprecation to be non-modifiable here -->
    <javac debug="true" 
           deprecation="false"
           optimize="false"
           destdir="${tests.classes}" 
           includes="**/GUITestProjectBrowser.java,**/MockUMLUserInterfaceContainer,**/*Deprecated.java"
           srcdir="tests"
    	   source="1.5"
           target="1.5">
      <compilerarg compiler="javac1.5" line="-Xlint:unchecked"/>
      <classpath>
        <path refid="tests.compile.classpath"/>
      </classpath>
    </javac>

    <!-- We want debug, optimize, deprecation to be non-modifiable here -->
    <javac debug="true" 
           deprecation="${deprecation}"
           optimize="false" 
           destdir="${tests.classes}"
           srcdir="tests"
	   includes="org/argouml/uml/reveng/TestJavaImportUnicode.java"
	   encoding="iso8859-1"
    	   source="1.5"
           target="1.5">
      <compilerarg compiler="javac1.5" line="-Xlint:unchecked"/>
      <classpath>
        <path refid="tests.compile.classpath"/>
      </classpath>
    </javac>

    <!-- We want debug, optimize, deprecation to be non-modifiable here -->
    <javac debug="true" 
           deprecation="${deprecation}"
           optimize="false" 
           destdir="${tests.classes}"
           srcdir="tests"
    	   source="1.5"
           target="1.5">
      <compilerarg compiler="javac1.5" line="-Xlint:unchecked"/>
      <classpath>
        <path refid="tests.compile.classpath"/>
      </classpath>
    </javac>

  </target>
  <!-- - - - - - - - - - - - - - - - - - 
          target: cobertura-instrument                      
         - - - - - - - - - - - - - - - - - -->
    <target name="coverage-instrument" depends="init-coverage,compile" 
        if="test.coverage">

      <delete file="${cobertura.datafile}" />

      <cobertura-instrument todir="${build.dir}/instrumented" datafile="${cobertura.datafile}">
        <fileset dir="${build.classes}">
            <include name="**/*.class" />
        </fileset>
      </cobertura-instrument>
    </target>

  <!-- run immediately before JUnit tests to make sure instrumented files are gone-->
  <target name="coverage-clean" depends="init" unless="test.coverage">
    <mkdir dir="${build.dir}/instrumented"/>
    <delete>
      <fileset dir="${build.dir}/instrumented">
        <include name="*"/>
      </fileset>
    </delete>

    <mkdir dir="${tests.reports}"/>
    <delete file="${cobertura.datafile}" />

  </target>
  
  <target name="coverage-report-clean" depends="init" if="test.coverage">
    <mkdir dir="${tests.reports}"/>
    <mkdir dir="${tests.reports}/coverage"/>
    <mkdir dir="${tests.reports}/coverage/html"/>
    <mkdir dir="${tests.reports}/coverage/xml"/>
    <delete>
      <fileset dir="${tests.reports}/coverage">
        <include name="*.xml *.html"/>
      </fileset>
    </delete>
  </target>

  <target name="coverage-report-xml" depends="init-coverage" if="test.coverage">
    <cobertura-report format="xml" datafile="${cobertura.datafile}" 
      destdir="${tests.reports}/coverage/xml" >
        <fileset dir="src">
            <include name="**/*.java" />
        </fileset>
    </cobertura-report>
  </target>
  
  <target name="coverage-report-html" depends="init-coverage"
      description="create HTML coverage report (default is XML)">
    <cobertura-report format="html" datafile="${cobertura.datafile}" 
      destdir="${tests.reports}/coverage/html" >
        <fileset dir="src">
            <include name="**/*.java" />
        </fileset>
    </cobertura-report>
  </target>

  <!-- =================================================================== -->
  <!-- Prepare for the junit tests.                                        -->
  <!-- =================================================================== -->
  <target name="junit-setup" depends="junit-classpath,compile-tests,prepare-tests"/>
  
  <target name="junit-classpath" 
    depends="init, junit-classpath-coverage, junit-classpath-nocoverage"/>
  
  <target name="junit-classpath-coverage" if="test.coverage" >
    <path id="tests.all.classpath">
      <pathelement location="${build.dir}/instrumented"/>
      <pathelement location="${build.classes}"/>
      <pathelement location="${tests.classes}"/>
      <path refid="tests.run.classpath"/>
      <path refid="cobertura.classpath"/>
    </path>
  </target>

  <target name="junit-classpath-nocoverage" unless="test.coverage" >
    <path id="tests.all.classpath">
      <pathelement location="${build.classes}"/>
      <pathelement location="${tests.classes}"/>
      <path refid="tests.run.classpath"/>
    </path>
  </target>
  
  <target name="junit-report-clean">
    <mkdir dir="${tests.reports}"/>
    <mkdir dir="${tests.reports}/html"/>
    <delete>
      <fileset dir="${tests.reports}">
        <include name="TEST-*.xml"/>
        <include name="TEST-*.txt"/>
      </fileset>
    </delete>
  </target>

  <target name="junit-report-create" depends="init">
    <junitreport todir="${tests.reports}">
      <fileset dir="${tests.reports}">
        <include name="TEST-*.xml"/>
      </fileset>
      <report format="frames" todir="${tests.reports}/html"/>
    </junitreport>
  </target>


  <!-- =================================================================== -->
  <!-- Run the junit tests.                                                -->
  <!-- =================================================================== -->
  <target name="tests-with-coverage" 
      description="Run tests while recording coverage using Cobertura">
    <property name="test.coverage" value="true"/>
    <antcall target="coverage-report-clean"/>
    <antcall target="coverage-instrument"/>
    <antcall target="tests"/>
    <antcall target="coverage-report-xml"/>
  </target>
  
  <target name="tests-xml"
          description="Run all tests that don't require any GUI components in headleass mode."
          depends="compile,junit-setup,junit-report-clean,
                   ant.optional.init" >

    <junit errorproperty="junit.failure" failureproperty="junit.failure" 
           fork="yes" dir="${basedir}" forkmode="perTest"
           haltonfailure="false"
           maxmemory="160M" printsummary="${junit.printsummary}">
      <sysproperty key="test.model.uml" 
            value="../argouml-core-model-mdr/src/org/argouml/model/mdr/mof/01-02-15.xml"/>
      <sysproperty key="argouml.model.implementation" 
            value="${test.model.implementation}"/>
      <sysproperty key="log4j.configuration" value="org/argouml/resource/default.lcf"/>
      <sysproperty key="java.awt.headless" value="true"/>
      <sysproperty key="argouml.tests.dir" value="tests"/>
      <sysproperty key="net.sourceforge.cobertura.datafile"
                    file="${cobertura.datafile}" />
      <assertions>
        <enable/>
      </assertions>
      <classpath refid="tests.all.classpath"/>
      <formatter type="xml"/>
      <batchtest todir="${tests.reports}">
        <fileset dir="${tests.classes}">
          <include name="org/argouml/**/Test*.class"/>
          <exclude name="**/*$*" />
        </fileset>
      </batchtest>
    </junit>
  </target>

  <target name="tests"
          depends="tests-xml"
          description="Run all tests that don't require any GUI components in headleass mode.
Build reports.">
    <antcall target="junit-report-create"/>
  </target>

  <target name="tests-and-fail" depends="tests"
          description="Run tests and fail if any test failed.">
    <fail message="JUnit tests failed." if="junit.failure"/>
  </target>


  <!-- =================================================================== -->
  <!-- Run the junit tests, the ones that include GUI stuff.               -->
  <!-- =================================================================== -->
  <target name="guitests"
          depends="compile,junit-setup,junit-report-clean,
                   ant.optional.init"
          description="Run all tests that require the GUI components and build reports.">

    <junit errorproperty="junit.failure" failureproperty="junit.failure" 
           fork="yes" dir="${basedir}" forkmode="perTest"
           haltonfailure="false"
           maxmemory="160M" printsummary="${junit.printsummary}">
      <sysproperty key="log4j.configuration" value="org/argouml/resource/default.lcf"/>
      <sysproperty key="argouml.tests.dir" value="tests"/>
      <assertions>
        <enable/>
      </assertions>
      <classpath refid="tests.all.classpath"/>
      <formatter type="xml"/>
      <batchtest todir="${tests.reports}">
        <fileset dir="${tests.classes}">
          <include name="org/argouml/**/GUITest*.class"/>
          <exclude name="**/*$*" />
        </fileset>
      </batchtest>
    </junit>
    <antcall target="junit-report-create"/>
    <fail message="JUnit tests failed." if="junit.failure"/>
  </target>


  <!-- =================================================================== -->
  <!-- Run the tests that test the command line stuff.                     -->
  <!-- These tests does not have error conditions to test against like the -->
  <!-- JUnit test cases. Instead, if they hang or exit with error they     -->
  <!-- have failed.                                                        -->
  <!-- =================================================================== -->
  <target name="clitests" depends="compile" 
          description="Run tests that test the command line stuff.">

    <!-- Don't do anything. -->
    <java classname="org.argouml.application.Main" 
          fork="yes">
      <assertions>
        <enable/>
      </assertions>
      <classpath>
        <pathelement location="${build.classes}"/>
        <path refid="src.run.classpath"/>
      </classpath>
      <arg value="-batch"/>
    </java>

    <!-- Exit. -->
    <java classname="org.argouml.application.Main" 
          fork="yes">
      <assertions>
        <enable/>
      </assertions>
      <classpath>
        <pathelement location="${build.classes}"/>
        <path refid="src.run.classpath"/>
      </classpath>
      <arg value="-nosplash"/>
      <arg value="-batch"/>
      <arg value="-command"/>
      <arg value="org.argouml.uml.ui.ActionExit"/>
    </java>

  </target>

  <!-- =================================================================== -->
  <!-- Run the both kind of tests.                                         -->
  <!-- =================================================================== -->
  <target name="alltests" depends="compile,junit-setup,tests,guitests"
          description="Run all tests, both with and without GUI."/>

  <!-- =================================================================== -->
  <!-- Start ArgoUML with JUnit test cases from ../tests.                  -->
  <!-- =================================================================== -->
  <target name="run-with-test-panel" 
          depends="compile,junit-setup"
          description="Start the TestRunner with all test cases from ../tests loaded.">
    <java classname="junit.swingui.TestRunner" fork="yes" taskname="argouml">
      <assertions>
        <enable/>
      </assertions>
      <classpath>
        <pathelement location="${build.dir}/argo_junit_tests.jar"/>
        <pathelement location="${tests.classes}"/>
        <pathelement location="${build.classes}"/>
        <pathelement location="${junit.jar.path}"/>
        <pathelement location="${easymock.jar.path}"/>
        <path refid="src.run.classpath"/>
      </classpath>
    </java>
  </target>

  

  <!-- =================================================================== -->
  <!-- Eclipse PDE targets from here to end of file                        -->
  <!-- =================================================================== -->
  <!-- 
    Required targets for non-P2 build (called in this order) are:
      build.jars
      gather.bin.parts - must create and populate "${destination.temp.folder}/<Bundle-SymbolicName>_<Bundle-Version>
      gather.logs
    If p2.gathering = true in build.properties:
      publish.bin.parts target replaces gather.bin.parts
  -->
  
    <target name="pde-properties" if="eclipse.running">
      <property name="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter" />
    </target>
  
    <target name="pde-init" depends="pde-properties">

      <property name="bundleId" value="org.argouml.app" />

      <!-- This property is magic and will have its value substituted by PDE -->
      <property name="version.suffix" value="0.29.3.201001020415"/>
      <property name="bundleVersion" value="${version.suffix}" />
      <property name="full.name" value="${bundleId}_${version.suffix}" />
      
      <!-- Compiler settings. -->
      <condition property="dir_bootclasspath" value="${java.home}/../Classes">
        <os family="mac" />
      </condition>
      <property name="dir_bootclasspath" value="${java.home}/lib" />
      <path id="path_bootclasspath">
        <fileset dir="${dir_bootclasspath}">
          <include name="*.jar" />
        </fileset>
      </path>
      <property name="bootclasspath" refid="path_bootclasspath" />
      <property name="bundleBootClasspath" value="${bootclasspath}" />

      <condition property="pluginTemp" value="${buildTempFolder}/plugins">
        <isset property="buildTempFolder" />
      </condition>
      <property name="pluginTemp" value="${basedir}" />
      <condition property="build.result.folder" value="${pluginTemp}/${bundleId}_${bundleVersion}">
        <isset property="buildTempFolder" />
      </condition>
      <property name="build.result.folder" value="${basedir}" />
      <property name="plugin.destination" value="${basedir}" />
      <condition property="p2.publish.parts" value="true">
        <istrue value="${p2.gathering}"/>
      </condition>     
    </target>

  <target name="pde-clean" depends="pde-init">
    <delete file="${plugin.destination}/${bundleId}_*.jar" />
    <delete file="${plugin.destination}/${bundleId}_*.zip" />
  </target>

  <target name="build.jars" depends="jar" description="Compile classes and build nested jars for the plug-in: ${bundleId}.">
    <mkdir dir="${build.result.folder}/@dot"/>
    <copy todir="${build.result.folder}/@dot" failonerror="true" overwrite="false">
      <fileset dir="${build.classes}" includes="org/argouml/**" excludes="*.txt,*.bat,*.xml,*.sh" />
    </copy>
  </target>

  <target name="gather.bin.parts" depends="init" if="destination.temp.folder">
    <mkdir dir="${destination.temp.folder}/${bundleId}_${bundleVersion}" />
    <copy todir="${destination.temp.folder}/${bundleId}_${bundleVersion}" failonerror="true" overwrite="false">
      <fileset dir="${build.result.folder}/@dot" includes="**"/>
    </copy>
    
    <copy todir="${destination.temp.folder}/${bundleId}_${bundleVersion}" failonerror="true" overwrite="false">
      <fileset dir="${basedir}">
        <include name="META-INF/"/>
        <include name="plugin.xml"/>
        <include name="plugin.properties"/>
        <!-- Legacy plugin use only - shouldn't be needed for ArgoEclipse
        <include name="lib/antlr-2.7.7.jar"/>
        <include name="lib/antlr.LICENSE.txt"/>
         -->
        <include name="lib/commons-logging-1.0.2.jar"/>
        <include name="lib/commons-logging.LICENSE.txt"/>
        <include name="lib/gef-0.13.9M1.jar"/>
        <include name="lib/gef.LICENSE.txt"/>
        <include name="lib/ocl-argo-1.1.jar"/>
        <include name="lib/ocl-argo.LICENSE.txt"/>
        <include name="lib/swidgets-0.1.4.jar"/>
        <include name="lib/swidgets.LICENSE.txt"/>
        <include name="lib/toolbar-1.4.1-20071227.jar"/>
        <include name="lib/toolbar.LICENSE.txt"/>
      </fileset>
    </copy>

    <eclipse.versionReplacer path="${destination.temp.folder}/${bundleId}_${bundleVersion}" version="${bundleVersion}" />

    <!-- Generate API baseline - unused currently - uncomment to enable
    <antcall target="apitools.generation">
      <param name="target.folder" value="${build.result.folder}"/>
      <param name="projectLocation" value="${basedir}"/>
      <param name="binary.folders" value="${build.result.folder}/@dot"/>
      <param name="projectName" value="${bundleId}_${bundleVersion}"/>
    </antcall>
    -->    
  </target>

  <target name="publish.bin.parts" depends="init" if="p2.publish.parts">

    <!-- First call old target to gather binaries -->
    <antcall target="gather.bin.parts">
      <param name="destination.temp.folder" value="${build.result.folder}"/>
    </antcall>

    <eclipse.versionReplacer path="${build.result.folder}" version="${bundleVersion}" />

    <!-- Now use P2 publishing tools to publish to our build repository -->
    <eclipse.gatherBundle
      metadataRepository="${p2.build.repo}"
      artifactRepository="${p2.build.repo}"
      buildResultFolder="${build.result.folder}"
      baseDirectory="${basedir}"
    />
  </target>
  
  <target name="gather.logs" depends="init" if="destination.temp.folder">
    <mkdir dir="${destination.temp.folder}/${bundleId}_${bundleVersion}"/>
    <copy todir="${destination.temp.folder}/${bundleId}_${bundleVersion}" failonerror="false" overwrite="false">
      <fileset dir="${build.dir}">
        <include name="compile.log"/>  
      </fileset>
    </copy>
  </target>

</project>

