# $Id$
#******************************************************************************
# Copyright (c) 2009 Contributors - see below
# All rights reserved. This program and the accompanying materials
# are made available under the terms of the Eclipse Public License v1.0
# which accompanies this distribution, and is available at
# http://www.eclipse.org/legal/epl-v10.html
#
# Contributors:
#    mvw
#******************************************************************************
#
# Some portions of this file was previously release using the BSD License:
#
# Copyright (c) 2005-2007 The Regents of the University of California. All
# Rights Reserved. Permission to use, copy, modify, and distribute this
# software and its documentation without fee, and without a written
# agreement is hereby granted, provided that the above copyright notice
# and this paragraph appear in all copies.  This software program and
# documentation are copyrighted by The Regents of the University of
# California. The software program and documentation are supplied "AS
# IS", without any accompanying services from The Regents. The Regents
# does not warrant that the operation of the program will be
# uninterrupted or error-free. The end-user understands that the program
# was developed for research purposes and is advised not to rely
# exclusively on the program for any reason.  IN NO EVENT SHALL THE
# UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR DIRECT, INDIRECT,
# SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING LOST PROFITS,
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE. THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATIONS TO PROVIDE MAINTENANCE, SUPPORT,
# UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
#
# Originally created from UMLCognitiveResourceBundle.java
#
# The keys are generated from the class names of the classes that use them.
#
critics.CrAlreadyRealizes-desc = The selected class already indirectly \
        realizes one or more Interfaces through inheritance.  \
        There is no need to directly realize it again.\n\n \
        Simplifying the design is always a good idea.  You might \
        dismiss this \"to do\" item if you want to make it very explicit that \
        the selected Class realizes this Interface.\n\nTo address this, select \
        the Realization (dashed line with solid triangular arrowhead) and \
        press the \"Ctrl-Delete\" key.
critics.CrAlreadyRealizes-head = Remove Unneeded Realizes from <ocl>self</ocl>
critics.CrAssocNameConflict-desc = Every element of a namespace must have a \
        unique name. Associations sharing the same set of ends, must adhere to this rule as well. \n\nClear and unambiguous naming is a key element in code \
        generation and serves to make the design more understandable and \
        maintainable. \n\n.
critics.CrAssocNameConflict-head = Resolve Association Name Conflict
critics.CrAttrNameConflict-desc = Attributes must have distinct names.  This \
        critic may have been triggered as the result of an inherited attribute \
        name. \n\nClear and unambiguous naming is a key element in code \
        generation and serves to make the design more understandable and \
        maintainable.\n\nTo address this use the \"Next>\" button, or manually \
        select the one of the conflicting attributes of this class and change \
        its name.
critics.CrAttrNameConflict-head = Revise Attribute Names to Avoid Conflict
critics.CrCallWithoutReturn-desc = Every call- or send-action requires a \
        return-action,\n but this Link has no return-action.
critics.CrCallWithoutReturn-head = Missing Return-Actions
critics.CrCircularAssocClass-desc = AssociationClasses cannot include roles \
        that refer directly back to the AssociationClass.
critics.CrCircularAssocClass-head = Circular Association
critics.CrCircularComposition-desc = Composition relationships (black \
        diamonds) cannot have cycles. \n\nA legal aggregation hierarchy is \
        needed for code generation and the correctness of the design. \n\nTo \
        address this, use the \"Next>\" button, or manually select one of the  \
        associations in the cycle and remove it or change its aggregation to \
        something other than composite.
critics.CrCircularComposition-head = Remove Circular Composition
critics.CrCircularInheritance-desc = Inheritance relationships cannot have \
        cycles. \n\nA legal class inheritance hierarchy is needed for code \
        generation and the correctness of the design.
critics.CrCircularInheritance-head = Remove <ocl>self</ocl>'s Circular \
        Inheritance
critics.CrClassMustBeAbstract-desc = Classes that include or inherit abstract \
        methods from base classes or interfaces must be marked \
        abstract.\n\nDeciding which classes are abstract or concrete is a key \
        part of class hierarchy design.\n\nTo address this, use the \"Next>\" \
        button, or manually select the class and use the properties tab to add \
        the Abstract keyword, or manually implement each abstract operation \
        that is inherited from a base class or interface.
critics.CrClassMustBeAbstract-head = Class <ocl>self</ocl> Must Be Abstract
critics.CrClassWithoutComponent-desc = In Deployment-diagrams classes are \
        normally inside components
critics.CrClassWithoutComponent-head = Classes Normally Are Inside Components
critics.CrCompInstanceWithoutNode-desc = There are node-instances in the \
        Diagram. So you have got a real\n deployment-diagram, and in \
        deployment-diagrams Component-instances\n normally resides on \
        node-instances.
critics.CrCompInstanceWithoutNode-head = ComponentInstances Normally Are \
        Inside Nodes
critics.CrComponentWithoutNode-desc = There are nodes in the diagram. So you \
        have got a real\n deployment-diagram, and in deployment-diagrams \
        components\n normally resides on nodes.
critics.CrComponentWithoutNode-head = Components Normally Are Inside Nodes
critics.CrConflictingComposites-desc = A composite (black diamond) role of an \
        association indicates that instances of that class contain instances \
        of the associated classes. Since each instance can only be contained \
        in one other object, each object can be the 'part' in at most one \
        is-part-of relationship.\n\nGood OO design depends on building good \
        is-part-of relationships.\n\nTo address this, use the \"Next>\" \
        button, or manually change one association to have multiplicity to \
        0..1 or 1..1, or another kind of aggregation (e.g., a white diamond is \
        less strict), or remove one of the associations
critics.CrConflictingComposites-head = Remove Conflicting Composite \
        Associations
critics.CrConsiderSingleton-desc = <ocl>self</ocl> has no non-static \
        attributes nor any associations that are navigable away from instances \
        of this class.  This means that every instance of this class will be \
        identical to every other instance, since there will be nothing about \
        the instances that can differentiate them.\n\nUnder these \
        circumstances you should consider making explicit that you have \
        exactly one instance of this class, by using the Singleton Pattern. \
        Using the Singleton Pattern can save time and memory space. Within \
        ArgoUML; this can be done by using the <<singleton>> stereotype on \
        this class.\n\nIf it is not your intent to have a single instance, you \
        should define instance variables (i.e. non-static attributes) and/or \
        outgoing associations that will represent differences between \
        instances.\n\nHaving specified <ocl>self</ocl> as a Singleton, you \
        need to define the class so there can only be a single instance. This \
        will complete the information representation part of your design. To \
        achieve this you need to do the following.\n\n1. Define a static \
        attribute (a class variable) holding the instance. This must therefore \
        have <ocl>self</ocl> as its type.\n\n2. Provide only private \
        constructors for <ocl>self</ocl> so that new instances cannot be made \
        by other code. The creation of the single instance could be through a \
        suitable helper operation, which invokes this private constructor just \
        once.\n\n3. Provide at least one constructor to override the default \
        constructor, so that the default constructor is not used to create \
        multiple instances.\n\nIn the UML 1.4 standard, a constructor is an \
        operation with the stereotype <<create>>.\n\nBy convention in Java and \
        C++ a constructor has the same name as the class, is not static, and \
        returns no value. Note that in ArgoUML this means that you must remove \
        the return value created by default for the constructor operation.
critics.CrConsiderSingleton-head = Consider Using Singleton Pattern for \
        <ocl>self</ocl>
critics.CrConstructorNeeded-desc = You have not yet defined a constructor for \
        class <ocl>self</ocl>. Constructors initialize new instances such that \
        their attributes have valid values.  This class probably needs a \
        constructor because not all of its attributes have initial \
        values.\n\nDefining good constructors is key to establishing class \
        invariants, and class invariants are a powerful aid in writing solid \
        code.\n\nTo address this, add a constructor manually by clicking on \
        <ocl>self</ocl> in the navigator pane and adding an operation using \
        the context sensitive pop-up menu in the property tab, or select \
        <ocl>self</ocl> where it appears on a class diagram and use the \"Add \
        Operation\" tool. Then use the Properties tab on the Details Pane to \
        select the <<create>> stereotype on the operation.\n\nA constructor is \
        an operation with the stereotype <<create>>.
critics.CrConstructorNeeded-head = Add Constructor to <ocl>self</ocl>
critics.CrConstructorNeeded-ins = Set the name of the new constructor.
critics.CrConstructorNeeded-sug = newOperation
critics.CrCrossNamespaceAssoc-desc = Each class, interface or other classifier \
        (<ocl>self</ocl>) involved in an association should be in the \
        namespace of the association.\n\nIf this is not the case, then there \
        will be no way for the classes, interfaces or other classifiers to \
        name the reference to each other using the association.\n\nNote that \
        this critic currently does not interpret hierarchical namespaces. It \
        will trigger if the final components of the namespaces are different, \
        even if they share a common root, and this critic should be \
        interpreted in light of this.\n\nTo address this, delete the \
        association, and recreate it in a diagram whose namespace includes the \
        classes, interfaces and classifiers involved.
critics.CrCrossNamespaceAssoc-head = Classifier <ocl>self</ocl> not in \
        Namespace of its Association
critics.CrDisambigClassName-desc = Every class and interface within a package \
        must have a unique name. There are at least two elements in this \
        package named \"<ocl>self</ocl>\".\n\nClear and unambiguous naming is \
        a key element in code generation and serves to make the design more \
        understandable and maintainable. \n\nTo address this, use the \
        \"Next>\" button, or manually select one of the conflicting classes \
        and use the Properties tab to change their names.
critics.CrDisambigClassName-head = Choose a Unique Name for <ocl>self</ocl>
critics.CrDisambigStateName-desc = Every state within a state machine must \
        have a unique name. There are at least two states in this machine \
        named \"<ocl>self</ocl>\".\n\nClear and unambiguous naming is a key \
        element in code generation and serves to make the design more \
        understandable and maintainable. \n\nTo address this, use the \
        \"Next>\" button, or manually select one of the conflicting states and \
        use the \"Properties\" tab to change their names.
critics.CrDisambigClassName-ins = Change the name to something different.
critics.CrDisambigStateName-head = Choose a Unique Name for <ocl>self</ocl>
critics.CrDupParamName-desc = Each parameter of an operation must have a \
        unique name. \n\nClean and unambiguous naming is needed for code \
        generation and to achieve clear and maintainable designs.\n\nTo \
        address this, use the \"Next>\" button, or manually rename one of the \
        parameters to this operation.
critics.CrDupParamName-head = Duplicate Parameter Name
critics.CrDupRoleNames-desc = Association <ocl>self</ocl> has two (or more) \
        roles with the same name.\n\nClear and unambiguous naming is key to \
        code generation and the understandability and maintainability of the \
        design.\n\nTo address this manually select <ocl>self</ocl> and use the \
        Properties tab to change one or more of the conflicting role names.
critics.CrDupRoleNames-head = Duplicate End (Role) Names for <ocl>self</ocl>
critics.CrEmptyPackage-desc = You have not yet put anything in package \
        <ocl>self</ocl>. Normally packages contain groups of related \
        classes.\n\nDefining and using packages is key to making a \
        maintainable design. \n\nTo address this, select package \
        <ocl>self</ocl> in the navigator panel and add  diagrams or model \
        elements such as classes or use cases.
critics.CrEmptyPackage-head = Add Elements to Package <ocl>self</ocl>
critics.CrFinalSubclassed-desc = The keyword 'leaf' indicates that a class is \
        not intended to have subclasses.  This class or interface is marked as \
        'leaf' and has subclasses.\n\nA well thought-out class inheritance \
        hierarchy that conveys and supports intended extensions is an \
        important part of achieving an understandable and maintainable \
        design.\n\nTo address this, use the \"Next>\" button, or manually \
        select the class and change its base class, or select the base class \
        and use the properties tab to remove the 'leaf' keyword.
critics.CrFinalSubclassed-head = Remove Leaf Keyword or Remove Subclasses from \
        <ocl>self</ocl>
critics.CrForkOutgoingTransition-desc = The source of <ocl>self</ocl> is a \
        Fork Pseudostate but its target is not a State. A fork segment should \
        always target a state.\n\nDefining valid transitions is needed to \
        complete the behavioral specification part of your design.\n\nTo fix \
        this, press remove this transition by clicking on the transition in \
        the diagram and pressing the \"Ctrl-Delete\" key. You can also change \
        the transition's source or destination states.
critics.CrForkOutgoingTransition-head = Invalid target for transition
critics.CrIllegalGeneralization-desc = Model elements can only be inherit from \
        others of the same type. \n\nA legal inheritance hierarchy is needed \
        for code generation and the correctness of the design. \n\nTo address \
        this, use the \"Next>\" button, or manually select the  generalization \
        arrow and remove it.
critics.CrIllegalGeneralization-head = Illegal Generalization
critics.CrIllegalName-desc = The names of model elements must be sequences of \
        letters, numbers, and underscores.  They cannot contain \
        punctuation.\n\nCode generation requires legal names for the resulting \
        code to compile correctly. \n\nTo address this, manually select the \
        highlighted element and use the Properties tab to give it a different \
        name.
critics.CrIllegalName-head = Choose a Legal Name for <ocl>self</ocl>
critics.CrInstanceWithoutClassifier-desc = Instances are connected to \
        at least one Classifier that declares their structure and behavior.\
        \n\nTo address this, manually select the \
        highlighted element and use the Properties tab to add \
        at least one Classifier.
critics.CrInstanceWithoutClassifier-head = Set Classifier for Instance
critics.CrInterfaceAllPublic-desc = Interfaces are intended to specify the set \
        of operations that other classes must implement.  They must be public. \
        \n\nA well-designed set of interfaces is a good way to define the \
        possible extensions of a class framework. \n\nTo address this, use the \
        \"Next>\" button, or manually select the operations of the interface \
        and use the Properties tab to make them public.
critics.CrInterfaceAllPublic-head = Operations in Interfaces must be Public
critics.CrInterfaceOperOnly-desc = Interfaces are intended to specify the set \
        of operations that \nother classes must implement.  They do not \
        implement these \noperations themselves, and cannot have attributes. \
        \n\nA well-designed set of interfaces provides a good way to define \
        the \npossible extensions of a class framework. \n\nTo address this, \
        use the \"Next>\" button, or manually select the  \ninterface and use \
        the Properties tab to remove all attributes.
critics.CrInterfaceOperOnly-head = Interfaces may only Have Operations
critics.CrInterfaceWithoutComponent-desc = In Deployment-diagrams interfaces \
        are normally inside components
critics.CrInterfaceWithoutComponent-head = Interfaces Normally Are Inside \
        Components
critics.CrInvalidBranch-desc = This branch state (choice or junction) has an \
        invalid number of transitions. Normally branch states have at least \
        one incoming and at least one outgoing transition. \n\nDefining \
        correct state transitions is needed to complete the  behavioral \
        specification part of your design.  \n\nTo address this, add \
        transitions using the transition tool.
critics.CrInvalidBranch-head = Add Choice/Junction Transitions
critics.CrInvalidFork-desc = This fork state has an invalid number of \
        transitions. Normally fork states have one incoming and two or more \
        outgoing transitions. \n\nDefining correct state transitions is needed \
        to complete the  behavioral specification part of your design.  \n\nTo \
        address this, add or remove transitions manually.
critics.CrInvalidFork-head = Change Fork Transitions
critics.CrInvalidForkTriggerOrGuard-desc = The highlighted Transition should \
        not have a trigger or guard because it is a Fork PseudoState's \
        outgoing transition.  The transitions outgoing from a fork vertex must \
        not have triggers or guards.\n\nDefining valid transitions is needed \
        to complete the behavioral specification part of your design.\n\nTo \
        fix this, remove trigger selecting it in the explorer pane and \
        removing it from model with the right-click mouse menu. Or, in case of \
        a guard, remove it by double clicking in the transition's guard field \
        and pressing the \"Ctrl-Delete\" key.
critics.CrInvalidForkTriggerOrGuard-head = Remove Trigger or Guard from Fork \
        Outgoing Transition
critics.CrInvalidHistory-desc = This History state has an invalid number of \
        transitions. Normally ShallowHistory and DeepHistory states have at \
        most one outgoing transition. \n\nDefining correct state transitions \
        is needed to complete the behavioral specification part of your \
        design.  \n\nTo fix this, remove transitions by clicking on transition \
        in the diagram and pressing the \"Ctrl-Delete\" key.
critics.CrInvalidHistory-head = Remove Extra Outgoing Transitions for History State
critics.CrInvalidInitial-desc = This Initial state has an invalid number of \
        transitions. Normally Initial states have at most one outgoing \
        transition. \n\nDefining correct state transitions is needed to \
        complete the  behavioral specification part of your design.  \n\nTo \
        fix this, remove transitions by clicking on transition in the diagram \
        and pressing the \"Ctrl-Delete\" key.
critics.CrInvalidInitial-head = Remove Extra Outgoing Transitions for Initial State
critics.CrInvalidJoin-desc = This join state has an invalid number of \
        transitions. Normally join states have two or more incoming and one \
        outgoing transitions. \n\nDefining correct state transitions is needed \
        to complete the  behavioral specification part of your design.  \n\nTo \
        address this, add or remove transitions manually.
critics.CrInvalidJoin-head = Change Join Transitions
critics.CrInvalidJoinTriggerOrGuard-desc = The highlighted Transition should \
        not have a trigger or guard because it is a Join PseudoState's \
        incoming transition.  The transitions entering a join vertex must not \
        have triggers or guards.\n\nDefining valid transitions is needed to \
        complete the behavioral specification part of your design.\n\nTo fix \
        this, remove trigger by selecting it in the explorer pane and removing \
        it from model with the right-click mouse menu. Or, in case of a guard, \
        remove it by double clicking in the transition's guard field and \
        pressing the \"Ctrl-Delete\" key.
critics.CrInvalidJoinTriggerOrGuard-head = Remove Trigger or Guard from Join \
        Incoming Transition
critics.CrInvalidPseudoStateTrigger-desc = The highlighted Transition should \
        not have a trigger because it is a PseudoState's outgoing transition.  \
        The transitions outgoing a pseudostate may not have \
        triggers.\n\nDefining valid transitions is needed to complete the \
        behavioral specification part of your design.\n\nTo fix this, remove \
        the trigger by selecting it in the explorer or properties pane and \
        removing it from model with the right-click mouse menu.
critics.CrInvalidPseudoStateTrigger-head = Remove Trigger from PseudoState's \
        Outgoing Transition
critics.CrInvalidSynch-desc = This synch state has invalid transitions. \
        Normally all incoming transitions to a synch state come from the same \
        region and all outgoing transitions from a synch state go to the same \
        region. Additionally, transitions source and destination states' \
        containers must be concurrent regions.\n\nDefining correct state \
        transitions is needed to complete the  behavioral specification part \
        of your design.  \n\nTo fix this, remove transitions by clicking on \
        the transition in the diagram and pressing the \"Ctrl-Delete\" key. \
        You can also change the transition's source or destination states.
critics.CrInvalidSynch-head = Change Synch State Transitions
critics.CrJoinIncomingTransition-desc = The target of <ocl>self</ocl> is a \
        Join Pseudostate but its source is not a State. A join segment should \
        always originate from a state.\n\nDefining valid transitions is needed \
        to complete the behavioral specification part of your design.\n\nTo \
        fix this, remove this transition by clicking on the transition in the \
        diagram and pressing the \"Ctrl-Delete\" key. You can also change the \
        transition's source or destination states.
critics.CrJoinIncomingTransition-head = Invalid source for transition
critics.CrLinkWithoutStimulus-desc = In sequence-diagrams a sender-object \
        sends stimuli\nto a receiving object over a link. The link is only the \
        communication-\nconnection, so a stimulus is needed.
critics.CrLinkWithoutStimulus-head = No Stimuli on These Links
critics.CrMergeClasses-desc = The highlighted class, <ocl>self</ocl>, only \
        participates in one association and that association is one-to-one \
        with another class.  Since instances of these two classes must always \
        be created together and destroyed together, combining these classes \
        might simplify your design without loss of any representation power. \
        However, you may find the combined class too large and complex, in \
        which case separating them is usually better.\n\nOrganizing classes to \
        manage complexity of the design is always important, especially when \
        the design is already complex. \n\nTo address this, \
        add the attributes and operations of the \
        highlighted class to the other class, then remove the highlighted \
        class from the project.
critics.CrMergeClasses-head = Consider Combining Classes (<ocl>self</ocl>)
critics.CrMissingAttrName-desc = Every attribute must have a name. \n\nClear \
        and unambiguous naming is a key element in code generation and serves \
        to make the design more understandable and maintainable. \n\nTo \
        address this, use the \"Next>\" button, or manually select the \
        attribute and use the Properties tab to give it a name.
critics.CrMissingAttrName-head = Choose an Attribute Name
critics.CrMissingAttrName-ins = Set the name of this attribute.
critics.CrMissingAttrName-sug = AttributeName
critics.CrMissingClassName-desc = Every element within a package \
        (such as class, interface, actor, usecase, etc.)  \
        must have a name. \n\nClear and unambiguous naming is a key element in \
        code generation and serves to make the design more understandable and \
        maintainable. \n\nTo address this, use the \"Next>\" button, or \
        manually select the class and use the Properties tab to give it a name.
critics.CrMissingClassName-head = Choose a Name
critics.CrMissingClassName-ins = Set the name of this element.
critics.CrMissingClassName-sug = ClassName
critics.CrMissingOperName-desc = Every operation must have a name. \n\nClear \
        and unambiguous naming is a key element in code generation and serves \
        to make the design more understandable and maintainable. \n\nTo \
        address this, use the \"Next>\" button, or manually select the \
        operation and use the Properties tab to give it a name.
critics.CrMissingOperName-head = Choose a Operation Name
critics.CrMissingOperName-ins = Set the name of this attribute.
critics.CrMissingOperName-sug = AttributeName
critics.CrMissingStateName-desc = Every state within a state machine should \
        have a name. \n\nClear and unambiguous naming is a key element in code \
        generation and serves to make the design more understandable and \
        maintainable. \n\nTo address this, use the \"Next>\" button, or \
        manually select the state and use the Properties tab to give it a \
        name, or select the state and type a name.
critics.CrMissingStateName-head = Choose a State Name
critics.CrMissingStateName-ins = Set the name of this state.
critics.CrMissingStateName-sug = StateName
critics.CrMultiComposite-desc = An instance may not belong by composition to \
        more than one composite instance. You must change the multiplicity at \
        the composite end of the association to either 0..1 or 1..1 (1) for \
        your model to make sense.\r\n\r\nRemember that composition is the \
        stronger aggregation kind and aggregation is the weaker. The problem \
        can be compared to a model where a finger can be an integral part of \
        several hands at the same time.\r\n\r\nThis is the second \
        well-formedness rule on AssociationEnd in UML 1.4.
critics.CrMultiComposite-head = Composite Association End with Multiplicity > 1
critics.CrMultipleAgg-desc = Only one end (role) of a binary Association can \
        be aggregate or composite.\n\nAggregation and composition are used to \
        indicate whole-part relationships and, by definition, the \"part\" end \
        cannot be aggregate.\n\nTo address this, select \"Next>\" to use the \
        wizard, or manually select the Association and set some of its role \
        aggregations to None.
critics.CrMultipleAgg-head = Two Aggregate Ends (Roles) in Binary Association
critics.CrMultipleDeepHistoryStates-desc = There are multiple, ambiguous deep \
        history states in this machine or composite state. Normally each state \
        machine or composite state has only one deep history state. \
        \n\nDefining unambiguous history states is needed to complete the \
        behavioral specification part of your design.\n\nTo fix this, select \
        one of the deep history states and delete it by pressing the \
        \"Ctrl-Delete\" key.
critics.CrMultipleDeepHistoryStates-head = Remove Extra Deep History States
critics.CrMultipleInheritance-desc = <ocl>self</ocl> has multiple base \
        classes, but Java does not support multiple inheritance.  You must use \
        interfaces instead. \n\nThis change is required before you can \
        generate Java code.\n\nTo address this, use the \"Next>\" button, or \
        manually (1) remove one of the base classes and then (2) optionally \
        define a new interface with the same method declarations and (3) add \
        it as an interface of <ocl>self</ocl>, and (4) move the method bodies \
        from the old base class down into <ocl>self</ocl>.
critics.CrMultipleInheritance-head = Change Multiple Inheritance to Interfaces
critics.CrMultipleInitialStates-desc = There are multiple, ambiguous initial \
        states in this machine or composite state. Normally each state machine \
        or composite state has one initial state. \n\nDefining unambiguous \
        states is needed to complete the behavioral specification part of your \
        design.\n\nTo address this, press the \"Next>\" button, or manually \
        select one of the extra initial states and remove it.
critics.CrMultipleInitialStates-head = Remove Extra Initial States
critics.CrMultipleRealization-desc = <ocl>self</ocl> implements multiple \
        interfaces. Though this is legal in UML this code will not compile in \
        Java. Replace the multiple realizations with generalizations if you \
        want to create compilable and error free code.
critics.CrMultipleRealization-head = Change Multiple Realization in \
        <ocl>self</ocl> to Generalizations
critics.CrMultipleShallowHistoryStates-desc = There are multiple, ambiguous \
        shallow history states in this machine or composite state. Normally \
        each state machine or composite state has only one shallow history \
        state. \n\nDefining unambiguous history states is needed to complete \
        the behavioral specification part of your design.\n\nTo fix this, \
        select one of the shallow history states and delete it by pressing the \
        \"Ctrl-Delete\" key.
critics.CrMultipleShallowHistoryStates-head = Remove Extra Shallow History \
        States
critics.CrNWayAgg-desc = Three-way (or more) Associations cannot have \
        aggregate ends (roles).\n\nAggregation and composition are used to \
        indicated whole-part relationships, and by definition can only apply \
        to binary associations between model elements.\n\nTo address this, manually \
        select the Association and set the aggregation of each of its ends \
        (roles) to None.
critics.CrNWayAgg-head = Aggregate End (Role) in 3-Way (or more) Association
critics.CrNameConflict-desc = Names of contained elements in a namespace (e.g. \
        packages) must be unique. The element <ocl>self</ocl> violates this \
        condition. This condition does not apply for names of \
        Generalizations.
critics.CrNameConflict-head = Name Conflict Caused by <ocl>self</ocl>
critics.CrNameConflict-ins = Change the name to something different.
critics.CrNameConflictAC-desc = Association role names of an AssociationClass \
        must not conflict \nwith the names of structural features (e.g., \
        instance variables) \nof the class.
critics.CrNameConflictAC-head = Role Name Conflicts with Member
critics.CrNameConfusion-desc = Names should be clearly distinct from each \
        other. These two names are so close to each other that readers might \
        be confused.\n\nClear and unambiguous naming is a key element in code \
        generation and serves to make the design more understandable and \
        maintainable. \n\nTo address this, use the \"Next>\" button, or \
        manually select the elements and use the Properties tab to change \
        their names.  Avoid names that differ from other names only in \
        capitalization, or use of underscore characters, or by only one \
        character.
critics.CrNameConfusion-head = Revise Name to Avoid Confusion
critics.CrNavFromInterface-desc = Associations involving an interface may not \
        be navigable in the direction from the interface.  This is a result of \
        the fact that interfaces contain only operation declarations and \
        cannot hold pointers to other objects.\n\nThis part of the design \
        should be changed before it is used to generate code.  Code generated \
        without addressing this problem will not match the intended \
        design.\n\nTo address this, select the association and use the \
        \"Properties\" tab to select in turn each association end that is NOT \
        connected to the interface. Uncheck \"Navigable\" for each of these \
        ends.\n\nThe association should then appear with a stick arrowhead \
        pointed towards the interface\n\nNOTE. ArgoUML should not permit \
        associations to be created that are navigable from \
        interfaces.\n\nWARNING. The current version of ArgoUML has a known \
        defect where it creates an association between a class and interface \
        that is either navigable in both directions, or navigable only from \
        the interface to the class. The fix is to remove the navigation from \
        the class end of the association and if necessary add navigation to \
        the interface end (navigation refers to navigability TOWARDS the end) \
        if this critic is triggered.
critics.CrNavFromInterface-head = Remove Navigation from Interface via \
        Association <ocl>self</ocl>
critics.CrNoAssociations-desc = You have not yet specified any Associations \
        for <ocl>self</ocl>. Normally classes, actors and use cases are \
        associated with others. \n\nDefining the associations between objects \
        an important part of your design. \n\nTo address this, press the \
        \"Next>\" button, or add associations manually by clicking on the \
        association tool in the tool bar and dragging from <ocl>self</ocl> to \
        another node.
critics.CrNoAssociations-head = Add Associations to <ocl>self</ocl>
critics.CrNoGuard-desc = The highlighted Transposition is incomplete because \
        it has no guard condition.  Guard conditions must be true for the \
        transition to be taken.  If only a guard is used, the transition is \
        taken when the condition becomes true.\n\nThis problem must be \
        resolved to complete the state machine.\n\nTo address this, select the \
        Transition and use the \"Properties\" tab, or select the Transition \
        and type some text of the form:\n[GUARD]\nWhere GUARD is a boolean \
        expression.
critics.CrNoGuard-head = Add Guard to Transition
critics.CrNoIncomingTransitions-desc = State <ocl>self</ocl> has no incoming \
        transitions. Normally states have both incoming and outgoing \
        transitions. \n\nDefining complete state transitions is needed to \
        complete the behavioral specification part of your design. Without \
        incoming transitions, this state can never be reached.\n\nTo address \
        this, press the \"Next>\" button, or add transitions manually by \
        clicking on transition tool in the tool bar and dragging from another \
        state to <ocl>self</ocl>.
critics.CrNoIncomingTransitions-head = Add Incoming Transitions to \
        <ocl>self</ocl>
critics.CrNoInitialState-desc = There is no initial state in this machine or \
        composite state. Normally each state machine or composite state has \
        one initial state. \n\nDefining unambiguous states is needed to \
        complete the behavioral specification part of your design.\n\nTo \
        address this, press the \"Next>\" button, or manually select initial \
        state from the tool bar and place it in the diagram.
critics.CrNoInitialState-head = Place an Initial State
critics.CrNoInstanceVariables-desc = You have not yet specified instance \
        variables for <ocl>self</ocl>. Normally classes have instance \
        variables that store state information for each instance. Classes that \
        provide only static attributes and methods should be stereotyped \
        <<utility>>.\n\nDefining instance variables is needed to complete the \
        information representation part of your design. \n\nTo address this, \
        press the \"Next>\" button, or add instance variables by double \
        clicking on <ocl>self</ocl> in the navigator pane and using the Create \
        menu to make a new attribute.
critics.CrNoInstanceVariables-head = Add Instance Variables to <ocl>self</ocl>
critics.CrNoInstanceVariables-ins = Set the name of the new variable.
critics.CrNoInstanceVariables-sug = newAttr
critics.CrNoOperations-desc = You have not yet specified operations for \
        <ocl>self</ocl>. Normally classes provide operations that define their \
        behavior. \n\nDefining operations is needed to complete the behavioral \
        specification part of your design. \n\nTo address this, press the \
        \"Next>\" button, or add operations manually by clicking on \
        <ocl>self</ocl> in the navigator pane and using the Create menu to \
        make a new operations.
critics.CrNoOperations-head = Add Operations to <ocl>self</ocl>
critics.CrNoOperations-ins = Set the name of the new operation.
critics.CrNoOperations-sug = newOperation
critics.CrNoOutgoingTransitions-desc = State <ocl>self</ocl> has no Outgoing \
        transitions. Normally states have both incoming and outgoing \
        transitions. \n\nDefining complete state transitions is needed to \
        complete the behavioral specification part of your design.  Without \
        outgoing transitions, this state is a \"dead\" state that can never be \
        exited.\n\nTo address this, press the \"Next>\" button, or add \
        transitions manually by clicking on transition tool in the tool bar \
        and dragging from <ocl>self</ocl> to another state.
critics.CrNoOutgoingTransitions-head = Add Outgoing Transitions from \
        <ocl>self</ocl>
critics.CrNoTransitions-desc = State <ocl>self</ocl> has no Incoming or \
        Outgoing transitions. Normally states have both incoming and outgoing \
        transitions. \n\nDefining complete state transitions is needed to \
        complete the behavioral specification part of your design.  \n\nTo \
        address this, press the \"Next>\" button, or add transitions manually \
        by clicking on transition tool in the tool bar and dragging from \
        another state to <ocl>self</ocl> or from <ocl>self</ocl> to another \
        state.
critics.CrNoTransitions-head = Add Transitions to <ocl>self</ocl>
critics.CrNoTriggerOrGuard-desc = The highlighted Transition is incomplete \
        because it has no trigger or guard condition.  Triggers are events \
        that cause a transition to be taken.  Guard conditions must be true \
        for the transition to be taken.  If only a guard is used, the \
        transition is taken when the condition becomes true.\n\nThis problem \
        must be resolved to complete the state machine.\n\nTo address this, \
        select the Transition and use the \"Properties\" tab, or select the \
        Transition and type some text of the form:\nTRIGGER [GUARD] / \
        ACTION\nWhere TRIGGER is an event name, GUARD is a boolean expression, \
        and ACTION is an action to be performed when the Transition is taken.  \
        All three parts are optional.
critics.CrNoTriggerOrGuard-head = Add Trigger or Guard to Transition
critics.CrNodeInsideElement-desc = Nodes normally are not inside other \
        Elements. They represent\n run-time physical objects with a processing \
        resource, generally having\n at least a memory and often processing \
        capability as well.
critics.CrNodeInsideElement-head = Nodes Normally Have No Enclosers
critics.CrNodeInstanceInsideElement-desc = NodeInstances normally are not \
        inside other Elements. They represent\n run-time physical objects with \
        a processing resource, generally having\n at least a memory and often \
        processing capability as well.
critics.CrNodeInstanceInsideElement-head = NodeInstances Normally Have No \
        Enclosers
critics.CrNodesOverlap-desc = Some of the objects in this diagram overlap and \
        obscure each other. This may hide important information and make it \
        difficult for humans to understand. A neat appearance may also make \
        your diagrams more influential on other designers, implementers, and \
        decision makers.\n\nConstructing an understandable set of class \
        diagrams is an important part of your design. \n\nTo address this, \
        move the highlighted nodes in the diagram.
critics.CrNodesOverlap-head = Clean Up Diagram <ocl>self</ocl>
critics.CrNonAggDataType-desc = DataTypes are not full classes and cannot be \
        associated with classes, unless the DataType is part of a composite \
        (black diamond) aggregation. \n\nGood OO design depends on careful \
        choices about which entities to represent as full objects and which to \
        represent as attributes of objects.\n\nTo address this, use the \
        \"Next>\" button, or manually replace the DataType with a full class \
        or change the association aggregation to containment by a full class.
critics.CrNonAggDataType-head = Wrap DataType
critics.CrObjectWithoutComponent-desc = In Deployment-diagrams objects are \
        normally inside components or component-instances
critics.CrObjectWithoutComponent-head = Objects Normally Are Inside Components
critics.CrOperNameConflict-desc = Two operations in <ocl>self</ocl> have the \
        exact same signature.  Operations must have distinct signatures.  A \
        signature is the combination of the operation's name and parameter \
        types (excluding return parameters).\n\nAmbiguous signatures reduce \
        clarity and introduce the potential for incorrect processing.  \
        Futhermore generated code is not possible for mainstream OO \
        languages.\n\nTo address this, select the one of the conflicting \
        operations of this class and change its name or parameters.
critics.CrOperNameConflict-head = Change Operation Names or Signatures in \
        <ocl>self</ocl>
critics.CrOppEndConflict-desc = Two roles of <ocl>self</ocl> have the same \
        name. Roles must have distinct names. \n\nClear and unambiguous names \
        are key to code generation and producing an understandable and \
        maintainable design.\n\nTo address this, use the \"Next>\" button, or \
        manually select the one of the conflicting roles at the far end of an \
        association from this class and change its name.
critics.CrOppEndConflict-head = Rename Association Roles
critics.CrOppEndVsAttr-desc = Two attributes may not have the same name within \
        a Classifier.\n\nThis is the second well-formedness rule on Classifier \
        in UML 1.4.
critics.CrOppEndVsAttr-head = Rename Role or Attribute
critics.CrParamTypeNotImported-desc = The type of each operation parameter \
        must be visible and imported into the class that owns the \
        operation.\n\nImporting classes is needed for code generation. Good \
        modularization of classes into packages is key to an understandable \
        design.\n\nTo address this, use the \"Next>\" button, or manually add \
        an import to the class that owns this operation.
critics.CrParamTypeNotImported-head = Import Parameter Type into Class
critics.CrReservedName-desc = \"<ocl>self</ocl>\" is a reserved word or very \
        close to one.  The names of model elements must not conflict with \
        reserved words of programming languages or UML.\n\nUsing legal names \
        is needed to generate compilable code. \n\nTo address this, use the \
        \"Next>\" button, or manually select the highlighted element and use \
        the Properties tab to give it a different name.
critics.CrReservedName-head = Change <ocl>self</ocl> to a Non-Reserved Word
critics.CrReservedName-ins = Change the name to something different.
critics.CrReservedNameJava-desc = \"<ocl>self</ocl>\" is a reserved word or very \
        close to one.  The names of model elements must not conflict with \
        reserved words of the Java programming language.\n\nUsing legal names \
        is needed to generate compilable code. \n\nTo address this, use the \
        \"Next>\" button, or manually select the highlighted element and use \
        the Properties tab to give it a different name.
critics.CrReservedNameJava-head = Change <ocl>self</ocl> to a Non-Reserved Word
critics.CrReservedNameJava-ins = Change the name to something different.
critics.CrReturnWithoutCall-desc = Every return-action requires a call- or \
        send-action,\n but this Link has no corresponding call- or send-action.
critics.CrReturnWithoutCall-head = Missing Call(Send)-Action
critics.CrSeqInstanceWithoutClassifier-desc = Instances have a classifier
critics.CrSeqInstanceWithoutClassifier-head = Set Classifier
critics.CrSingletonViolatedMissingStaticAttr-desc = <ocl>self</ocl> is marked \
        with the <<singleton>>; stereotype, but it does not satisfy the \
        constraints imposed on Singletons.\nIt does not have a static \
        attribute (a class variable) to hold the instance.\n\nWhenever you \
        mark a class with a stereotype, the class should satisfy all \
        constraints of the stereotype.  This is an important part of making a \
        self-consistent and understandable design. Using the Singleton Pattern \
        can save time and memory space.\n\nIf you no longer want this class to \
        be a Singleton, remove the <<singleton>> stereotype by clicking on the \
        class and selecting the blank selection on the stereotype drop-down \
        within the properties tab.\n
critics.CrSingletonViolatedMissingStaticAttr-head = Singleton Stereotype \
        Violated, Missing Static Attribute in <ocl>self</ocl>
critics.CrSingletonViolatedOnlyPrivateConstructors-desc = <ocl>self</ocl> is \
        marked with the <<singleton>>; stereotype, but it does not satisfy the \
        constraints imposed on Singletons.\nIt must have only private \
        constructors so that new instances cannot be made by other \
        code.\nWhenever you mark a class with a stereotype, the class should \
        satisfy all constraints of the stereotype.  This is an important part \
        of making a self-consistent and understandable design. Using the \
        Singleton Pattern can save time and memory space.\n\nIf you no longer \
        want this class to be a Singleton, remove the <<singleton>> stereotype \
        by clicking on the class and selecting the blank selection on the \
        stereotype drop-down within the properties tab.\n
critics.CrSingletonViolatedOnlyPrivateConstructors-head = Singleton Stereotype \
        Violated, Has Non-Private Constructor in <ocl>self</ocl>
critics.CrStimulusWithWrongPosition-desc = In sequence-diagrams the \
        sender-side of the communication-connections of these\nstimuli are \
        connected at the beginning of an activation. To be a sender an object \
        must\nhave a focus-of-control first.
critics.CrStimulusWithWrongPosition-head = Wrong Position of These Stimuli
critics.CrSubclassReference-desc = Class <ocl>self</ocl> has a reference to \
        one of it's subclasses. Normally all subclasses should be treated \
        \"equally\" by the superclass.  This allows for addition of new \
        subclasses without modification to the superclass. \n\nDefining the \
        associations between objects is an important part of your design.  \
        Some patterns of associations are easier to maintain than others, \
        depending on the nature of future changes. \n\nTo address this, press \
        the \"Next>\" button, or remove the association manually by clicking \
        on it in the diagram and pressing Delete.
critics.CrSubclassReference-head = Remove Reference to Specific Subclass
critics.CrTooManyAssoc-desc = There are too many Associations on class \
        <ocl>self</ocl>.  Whenever one class becomes too central to the design \
        it may become a maintenance bottleneck that must be updated \
        frequently. \n\nDefining the associations between objects is an \
        important part of your design. \n\nTo address this, press the \
        \"Next>\" button, or remove associations manually by clicking on an \
        association in the navigator pane or diagram and pressing the \"Del\" \
        key.
critics.CrTooManyAssoc-head = Reduce Associations on <ocl>self</ocl>
critics.CrTooManyAttr-desc = There are too many Attributes on class \
        <ocl>self</ocl>.  Whenever one class becomes too central to the design \
        it may become a maintenance bottleneck that must be updated \
        frequently. \n\nDefining the attributes of objects is an important \
        part of your design. \n\nTo address this, press the \"Next>\" button, \
        or remove attributes manually by double-clicking on the attribute \
        compartment of the  highlighted class in the diagram and removing the \
        line of text for an attribute.
critics.CrTooManyAttr-head = Reduce Attributes on <ocl>self</ocl>
critics.CrTooManyClasses-desc = There are too many classes in <ocl>self</ocl>. \
        If one namespace (i.e. model, package, class, etc.) \
        has too many classes it may become very difficult \
        for humans to understand. \n\nDefining an understandable \
        namespace structure is an important part of your design. \
        \nMove some classes into another namespace \
        by click and drag in the explorer. \
        \n\nTo change the treshold that triggers this critic \
        press the \"Next>\" button.
critics.CrTooManyClasses-head = Reduce Classes in Namespace <ocl>self</ocl>
critics.CrTooManyOper-desc = There are too many Operations on class \
        <ocl>self</ocl>.  Whenever one class becomes too central to the design \
        it may become a maintenance bottleneck that must be updated \
        frequently. \n\nDefining the operations of objects is an important \
        part of your design. \n\nTo address this, press the \"Next>\" button, \
        or remove operations manually by double-clicking on the operation \
        compartment of the  highlighted class in the diagram and removing the \
        line of text for an operation.
critics.CrTooManyOper-head = Reduce Operations on <ocl>self</ocl>
critics.CrTooManyStates-desc = There are too many States in <ocl>self</ocl>.  \
        If one state machine has too many states it may become very difficult \
        for humans to understand. \n\nDefining an understandable set of states \
        is an important part of your design. \n\nTo address this, press the \
        \"Next>\" button, or remove states manually by clicking on a states in \
        the navigator pane or diagram and pressing the \"Del\" key.  Or you \
        can nest states...
critics.CrTooManyStates-head = Reduce States in Machine <ocl>self</ocl>
critics.CrTooManyTransitions-desc = There are too many Transitions on state \
        <ocl>self</ocl>.  Whenever one state becomes too central to the \
        machine it may become a maintenance bottleneck that must be updated \
        frequently. \n\nDefining the transitions between states is an \
        important part of your design. \n\nTo address this, press the \
        \"Next>\" button, or remove transitions manually by clicking on a \
        transition in the navigator pane or diagram and pressing the \"Del\" \
        key.
critics.CrTooManyTransitions-head = Reduce Transitions on <ocl>self</ocl>
critics.CrUnconventionalAttrName-desc = Normally attributes begin with a \
        lowercase letter. The name '<ocl>self</ocl>' is unconventional because \
        it does not.\n\nFollowing good naming conventions help to improve the \
        understandability and maintainability of the design. \n\nTo address \
        this, use the \"Next>\" button, or manually select <ocl>self</ocl> and \
        use the Properties tab to give it a different name.
critics.CrUnconventionalAttrName-head = Choose a Better Attribute Name
critics.CrUnconventionalAttrName-ins = Change the attribute name to start with \
	a lowercase letter.
critics.CrUnconventionalClassName-desc = Normally classes begin with a capital \
        letter. The name '<ocl>self</ocl>' is unconventional because it does \
        not begin with a capital.\n\nFollowing good naming conventions help to \
        improve the understandability and maintainability of the design. \
        \n\nTo address this, use the \"Next>\" button, or manually select \
        <ocl>self</ocl> and use the Properties tab to give it a different name.
critics.CrUnconventionalClassName-head = Capitalize Class Name <ocl>self</ocl>
critics.CrUnconventionalClassName-ins = Change the class name to start with an \
	uppercase letter.
critics.CrUnconventionalOperName-desc = Normally operation names begin with a \
        lowercase letter. The name '<ocl>self</ocl>' is unconventional because \
        it does not.\n\nFollowing good naming conventions help to improve the \
        understandability and maintainability of the design. \n\nTo address \
        this, use the \"Next>\" button, or manually select <ocl>self</ocl> and \
        use the Properties tab to give it a new name.
critics.CrUnconventionalOperName-head = Choose a Better Operation Name
critics.CrUnconventionalOperName-ins = Change the operation name to start with \
	a lowercase letter.
critics.CrUnconventionalOperName-ins-ext = Change the operation name to start with \
	a lowercase letter or make it a constructor.
critics.CrUnconventionalPackName-desc = Normally package names are written in \
        all lower case, and should not contain symbols like periods. \
        Double colons are used to indicate "nested" packages, and \
        should hence not occur in a package name either. \
        The name '<ocl>self</ocl>' is unconventional \
        because it is not all lower case without symbols.\n\n\
        Following good naming conventions help to \
        improve the understandability and maintainability of the design. \
        \n\nTo address this, use the \"Next>\" button, or manually select \
        <ocl>self</ocl> and use the Properties tab to give it a different name.
critics.CrUnconventionalPackName-head = Revise Package Name <ocl>self</ocl>
critics.CrUnconventionalPackName-ins = Change the name of this package.
critics.CrUnnavigableAssoc-desc = The Association <ocl>self</ocl> is not \
        navigable in any direction. All associations should be navigable at \
        least one way.\n\nSetting the navigability of associations allows your \
        code to access data by following pointers. \n\nTo address this, select \
        association \"<ocl>self</ocl>\" in the diagram or navigator panel and \
        click the properties tab.  Then use the checkboxes at the bottom of \
        the properties panel to turn on navigability.
critics.CrUnnavigableAssoc-head = Make <ocl>self</ocl> Navigable
critics.CrUselessAbstract-desc = <ocl>self</ocl> can never influence the \
        running system because it can never have any instances, and none of \
        its subclasses can have instances either. \n\nTo address this problem: \
        (1) define concrete subclasses that implement the interface of this \
        class; or (2) make <ocl>self</ocl> or one of its existing subclasses \
        concrete.
critics.CrUselessAbstract-head = Define Concrete (Sub)Class
critics.CrUselessInterface-desc = <ocl>self</ocl> can never be used because no \
        classes implement it.\n\nTo address this problem, press the \"Next>\" \
        button or manually use the toolbar \"Class\" button to define classes \
        and the \"Realizes\" button to make a relationship from the class to \
        the highlighted interface.
critics.CrUselessInterface-head = Define Class to Implement <ocl>self</ocl>
critics.CrUtilityViolated-desc = <ocl>self</ocl> is marked with the \
        <<utility>>; stereotype, but it does not satisfy the constraints \
        imposed on Utilities.\nIt does have instance attributes, variables or \
        operations.\n\nIf you no longer wants this class to be a Utility, \
        remove the <<utility>> stereotype by clicking on the class and \
        selecting the blank selection on the stereotype drop-down within the \
        properties tab.\n
critics.CrUtilityViolated-head = Utility Stereotype Violated, Instances Can Be \
        Created.
critics.CrWrongLinkEnds-desc = In deployment-diagrams objects can reside \
        either on components\n or on component-instances. So it is not \
        possible to have two objects\n connected with a Link, while one object \
        resides on an component and\n an the other object on a \
        component-instance.\n\n\n To address this remove one object of the two \
        connected objects from its location to an element that has the\n same \
        type as the location of the other object
critics.CrWrongLinkEnds-head = LinkEnds Don't Have The Same Locations
critics.CrZeroLengthEdge-desc = This edge is too small to see easily. This may \
        hide important information and make it difficult for humans to \
        understand. A neat appearance may also make your diagrams more \
        influential on other designers, implementers, and decision \
        makers.\n\nConstructing an understandable set of diagrams is an \
        important part of your design. \n\nTo address this, move one or more \
        nodes so that the highlighted edges will be longer, or click in the \
        center of the edge and drag to make a new vertex.
critics.CrZeroLengthEdge-head = Make Edge More Visible

critics.WizAddInstanceVariable-ins = Please change the name of the offending model element.
critics.WizAddConstructor-ins = Please change the name of the offending model element.
critics.WizAssocComposite-ins = Please select one of the following aggregation options: 
critics.WizAssocComposite-option1 = is a composite aggregation of 
critics.WizAssocComposite-option2 = is a shared aggregation of 
critics.WizAssocComposite-option3 = No aggregation 
critics.WizBreakCircularComp-ins1 = Please select one of the following classes. \
	In the next two steps a association of that class will be made non-aggregate. 
critics.WizBreakCircularComp-ins2 = Please select one of the following associations. \
	In the next step that association will be made non-aggregate.
critics.WizBreakCircularComp-ins3 = Are you sure you want to make this association \
	non-aggregate?
critics.WizBreakCircularComp-from = from
critics.WizBreakCircularComp-to = to
critics.WizManyNames-ins = Change each name to be significantly different from \
	the others. Names should differ by more than one character and \
	not just differ by case (capital or lower case).
critics.WizMEName-ins = Please change the name of the offending model element.
critics.WizNavigable-ins = Please select one of the following navigability options. 
critics.WizNavigable-option1 = Navigable Toward Start
critics.WizNavigable-option2 = Navigable Toward End 
critics.WizNavigable-option3 = Navigable Both Ways 
critics.WizNavigable-option4 = Navigable Toward  
critics.WizNavigable-option5 = Navigable Toward 
critics.WizOperName-options1 = This is really a constructor. 
critics.WizOperName-options2 = This is not a constructor. 
critics.WizOperName-stereotype = The operator is now a constructor. 
critics.WizTooMany-ins = Please adjust the threshold according to your needs. \
	This lets you adjust when the critic creates a particular ToDoItem. 
