<?xml version="1.0" encoding="UTF-8"?>
<!-- $Id: build.xml 17806 2010-01-12 18:21:28Z linus $

    Ant build file for argouml-core-transformer.

    This is designed to work:
    - in the subdirectory named argouml-core-transformer,
      as stored in the repository.
      Used when compiling, running tests from the command line.
    - When checked out from within Eclipse (project named
      argouml-core-transformer)
      Used for generating code.

Building this requires:
    argouml-core-infra
    argouml-core-model
    argouml-app

  -->

<project basedir="." default="compile" name="argouml-core-transformer">

  <!-- =================================================================== -->
  <!-- Initialization target                                               -->
  <!-- =================================================================== -->

  <target name="init" depends="pde-init">
    
    <property name="build.dir" location="build" />
    <property name="build.classes" value="${build.dir}/classes" />

    <path id="src.compile.classpath">
      <fileset dir="../argouml-core-infra/build/">
        <include name="*.jar"/>
      </fileset>
      <fileset dir="../argouml-core-model/build/">
        <include name="*.jar"/>
      </fileset>
      <fileset dir="../argouml-app/build/">
        <include name="*.jar"/>
      </fileset>
    </path>

    <!-- This runtime classpath is used for tests and other things started
         from this file.
      -->
    <path id="src.run.classpath">
      <path refid="src.compile.classpath"/>
      <!-- only one of the following will be used at a time -->
      <!-- we put them together because there's little risk of crosstalk -->
      <fileset dir="../argouml-core-model-mdr/build/">
        <include name="*.jar"/>
      </fileset>
      <fileset dir="../argouml-core-model-euml/build/">
        <include name="*.jar"/>
      </fileset>
    </path>

    <!-- Try to figure out where our tools directory is. Done after overrides
    are loaded so user can override, but before defaults -->
    <property name="tool.test.file" value="checkstyle/java.header"/>
    <available file="../argouml-core-tools/${tool.test.file}" type="file"
	       value="../argouml-core-tools"
               property="argo.tools.dir"
	       />
    <available file="../../tools/${tool.test.file}" type="file"
	       value="../../tools"
               property="argo.tools.dir"
	       />

    <path id="tests.compile.classpath">
      <pathelement location="${build.classes}"/>
      <pathelement location="${argo.tools.dir}/junit-3.8.2/junit.jar"/>
      <path refid="src.compile.classpath"/>
    </path>

    <path id="tests.run.classpath">
      <path refid="tests.compile.classpath"/>
      <fileset dir="../argouml-core-model-mdr/build/">
        <include name="*.jar"/>
      </fileset>
    </path>
    
    <path id="tests.all.classpath">
      <pathelement location="${build.classes}"/>
      <pathelement location="build/tests/classes"/>
      <path refid="tests.run.classpath"/>
    </path>
      
  </target>
	
  <!-- =================================================================== -->
  <!-- Initialization target for optional ant tasks                        -->
  <!-- =================================================================== -->
  <target name="ant.optional.init" depends="init">
    <path id="ant.optional.classpath">
      <pathelement location="${ant.home}/libopt/ant-junit.jar"/>
      <pathelement location="${argo.tools.dir}/junit-3.8.2/junit.jar"/>
    </path>

    <taskdef classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTask" name="junit">
      <classpath>
        <path refid="ant.optional.classpath"/>
      </classpath>
    </taskdef>
  </target>


  <!-- =================================================================== -->
  <!-- Prepares the build directory                                        -->
  <!-- =================================================================== -->

  <target name="prepare" depends="init">
    <mkdir dir="${build.dir}"/>
    <mkdir dir="${build.classes}"/>
  </target>

  <!-- =================================================================== -->
  <!-- Compiles the source directory                                       -->
  <!-- =================================================================== -->
  <target name="compile" depends="prepare"
      description="Compile the sources.">

    <echo message="Compiling the sources in argouml-core-transformer"/>

    <javac debug="on" 
    	   deprecation="on"
    	   destdir="${build.classes}"
    	   includes="org/argouml/**/*.java"
    	   optimize="on"
           includeAntRuntime="no" 
           bootclasspath="${bundleBootClasspath}" 
    	   srcdir="src"
    	   source="1.5"
    	   target="1.5">
      <compilerarg compiler="javac1.5" line="-Xlint:unchecked"/>
      <compilerarg line="-log '${build.dir}/compile.log'" compiler="org.eclipse.jdt.core.JDTCompilerAdapter" />      
      <classpath>
        <path refid="src.compile.classpath"/>
      </classpath>
    </javac>
  </target>

  <!-- =================================================================== -->
  <!-- Creates the jar file                                                -->
  <!-- =================================================================== -->
  <target name="jar" depends="compile"
          description="Build the main jar file.">
    <jar basedir="${build.classes}"
         excludes="*.txt,*.bat,*.xml,*.sh" 
         includes="org/argouml/**"
         manifest="src/META-INF/MANIFEST.MF"
	 jarfile="${build.dir}/argouml-transformer.jar" />
  </target>


  <!-- =================================================================== -->
  <!-- Clean targets                                                       -->
  <!-- =================================================================== -->
  <target name="clean" depends="init"
          description="Clean out all built files.">
    <delete dir="${build.dir}"/>
    <antcall target="pde-clean" />
  </target>



  <!-- ################################################################### -->
  <!-- Section with tests.                                                 -->
  <!-- ################################################################### -->


  <!-- =================================================================== -->
  <!-- Compiles the tests                                                  -->
  <!-- =================================================================== -->

  <target name="compile-tests" depends="prepare">

    <!-- create directories -->
    <mkdir dir="build/tests/classes"/>

    <javac debug="true" 
           deprecation="on"
           optimize="false" 
           destdir="build/tests/classes"
           srcdir="tests"
    	   source="1.5"
           target="1.5">
      <compilerarg compiler="javac1.5" line="-Xlint:unchecked"/>
      <classpath>
        <path refid="tests.compile.classpath"/>
      </classpath>
    </javac>

    <!-- copy test files -->
    <copy todir="build/tests/classes/testmodels">
      <fileset dir="tests/testmodels" includes="**/**"/>
    </copy>
  </target>

  <!-- =================================================================== -->
  <!-- Run the junit tests.                                                -->
  <!-- =================================================================== -->
  <target name="tests-xml" depends="compile,compile-tests"
          description="Run all tests that don't require any GUI components in headleass mode.">

    <mkdir dir="build/tests/reports"/>
      
    <junit errorproperty="junit.failure" failureproperty="junit.failure" 
           fork="yes" dir="${basedir}" forkmode="perTest"
           haltonfailure="false"
           maxmemory="48M" printsummary="true">
      <sysproperty key="log4j.configuration" value="org/argouml/resource/default.lcf"/>
      <sysproperty key="java.awt.headless" value="true"/>
      <sysproperty key="argouml.tests.dir" value="tests"/>
      <assertions>
        <enable/>
      </assertions>
      <classpath refid="tests.all.classpath"/>
      <formatter type="xml"/>
      <batchtest todir="build/tests/reports">
        <fileset dir="tests">
          <include name="org/argouml/**/Test*.java"/>
        </fileset>
      </batchtest>
    </junit>
  </target>

  <target name="tests" depends="tests-xml"
          description="Run all the tests."
  />

  <!-- =================================================================== -->
  <!-- Eclipse PDE targets from here to end of file                        -->
  <!-- =================================================================== -->
  <!-- 
    Required targets (called in this order) are:
      build.jars
      gather.bin.parts - must create and populate "${destination.temp.folder}/<Bundle-SymbolicName>_<Bundle-Version>
      gather.logs
    If p2.gathering = true in build.properties:
      publish.bin.parts target replaces gather.bin.parts
  -->
  
    <target name="pde-properties" if="eclipse.running">
      <property name="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter" />
    </target>
  
    <target name="pde-init" depends="pde-properties">

      <property name="bundleId" value="org.argouml.transformer" />

      <!-- This property is magic and will have its value substituted by PDE -->
      <property name="version.suffix" value="0.29.3.201001020415"/>
      <property name="bundleVersion" value="${version.suffix}" />

      <!-- Compiler settings. -->
      <condition property="dir_bootclasspath" value="${java.home}/../Classes">
        <os family="mac" />
      </condition>
      <property name="dir_bootclasspath" value="${java.home}/lib" />
      <path id="path_bootclasspath">
        <fileset dir="${dir_bootclasspath}">
          <include name="*.jar" />
        </fileset>
      </path>
      <property name="bootclasspath" refid="path_bootclasspath" />
      <property name="bundleBootClasspath" value="${bootclasspath}" />

      <condition property="pluginTemp" value="${buildTempFolder}/plugins">
        <isset property="buildTempFolder" />
      </condition>
      <property name="pluginTemp" value="${basedir}" />
      <condition property="build.result.folder" value="${pluginTemp}/${bundleId}_${bundleVersion}">
        <isset property="buildTempFolder" />
      </condition>
      <property name="build.result.folder" value="${basedir}" />
      <property name="plugin.destination" value="${basedir}" />            
      <condition property="p2.publish.parts" value="true">
        <istrue value="${p2.gathering}"/>
      </condition>  
    </target>

  <target name="pde-clean" depends="pde-init">
    <delete file="${plugin.destination}/${bundleId}_*.jar" />
    <delete file="${plugin.destination}/${bundleId}_*.zip" />
  </target>

  <target name="build.jars" depends="jar" description="Compile classes and build nested jars for the plug-in: ${bundleId}.">
    <mkdir dir="${build.result.folder}/@dot"/>
    <copy todir="${build.result.folder}/@dot" failonerror="true" overwrite="false">
      <fileset dir="${build.classes}" includes="org/argouml/**" excludes="*.txt,*.bat,*.xml,*.sh" />
    </copy>
  </target>

  <target name="gather.bin.parts" depends="init" if="destination.temp.folder">
    <mkdir dir="${destination.temp.folder}/${bundleId}_${bundleVersion}" />
    <copy todir="${destination.temp.folder}/${bundleId}_${bundleVersion}" failonerror="true" overwrite="false">
      <fileset dir="${build.result.folder}/@dot" includes="**"/>
    </copy>
    
    <copy todir="${destination.temp.folder}/${bundleId}_${bundleVersion}" failonerror="true" overwrite="false">
      <fileset dir="${basedir}">
        <include name="META-INF/"/>
        <include name="plugin.xml"/>
        <include name="plugin.properties"/>
      </fileset>
    </copy>

    <eclipse.versionReplacer path="${destination.temp.folder}/${bundleId}_${bundleVersion}" version="${bundleVersion}" />
  </target>


  <target name="publish.bin.parts" depends="init" if="p2.publish.parts">

    <!-- First call old target to gather binaries -->
    <antcall target="gather.bin.parts">
      <param name="destination.temp.folder" value="${build.result.folder}"/>
    </antcall>

    <eclipse.versionReplacer path="${build.result.folder}" version="${bundleVersion}" />

    <!-- Now use P2 publishing tools to publish to our build repository -->
    <eclipse.gatherBundle
      metadataRepository="${p2.build.repo}"
      artifactRepository="${p2.build.repo}"
      buildResultFolder="${build.result.folder}"
      baseDirectory="${basedir}"
    />
  </target>
    
  <target name="gather.logs" depends="init" if="destination.temp.folder">
    <mkdir dir="${destination.temp.folder}/${bundleId}_${bundleVersion}"/>
    <copy todir="${destination.temp.folder}/${bundleId}_${bundleVersion}" failonerror="false" overwrite="false">
      <fileset dir="${build.dir}">
        <include name="compile.log"/>  
      </fileset>
    </copy>
  </target>

</project>


