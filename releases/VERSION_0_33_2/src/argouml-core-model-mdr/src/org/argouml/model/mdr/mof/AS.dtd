<!-- _______________________________________________________________ -->
<!--                                                                 -->
<!-- DTD for UML including Action Semantics                          -->
<!-- Generated by Adaptive Repository version 1.2                    -->
<!-- _______________________________________________________________ -->

<!-- _______________________________________________________________ -->
<!--                                                                 -->
<!-- XMI is the top-level XML element for XMI transfer text          -->
<!-- _______________________________________________________________ -->

<!ELEMENT XMI (XMI.header?, XMI.content?, XMI.difference*,
               XMI.extensions*)>
<!ATTLIST XMI
            xmi.version CDATA #FIXED "1.1"
            timestamp CDATA #IMPLIED
            verified (true|false) #IMPLIED>

<!-- _______________________________________________________________ -->
<!--                                                                 -->
<!-- XMI.header contains documentation and identifies the model,     -->
<!-- metamodel, and metametamodel                                    -->
<!-- _______________________________________________________________ -->

<!ELEMENT XMI.header (XMI.documentation?, XMI.model*, XMI.metamodel*,
                      XMI.metametamodel*, XMI.import*)>

<!-- _______________________________________________________________ -->
<!--                                                                 -->
<!-- documentation for transfer data                                 -->
<!-- _______________________________________________________________ -->

<!ELEMENT XMI.documentation (#PCDATA | XMI.owner | XMI.contact |
                             XMI.longDescription | XMI.shortDescription |
                             XMI.exporter | XMI.exporterVersion |
                             XMI.notice)*>
<!ELEMENT XMI.owner ANY>
<!ELEMENT XMI.contact ANY>
<!ELEMENT XMI.longDescription ANY>
<!ELEMENT XMI.shortDescription ANY>
<!ELEMENT XMI.exporter ANY>
<!ELEMENT XMI.exporterVersion ANY>
<!ELEMENT XMI.exporterID ANY>
<!ELEMENT XMI.notice ANY>

<!-- _______________________________________________________________ -->
<!--                                                                 -->
<!-- XMI.element.att defines the attributes that each XML element    -->
<!-- that corresponds to a metamodel class must have to conform to   -->
<!-- the XMI specification.                                          -->
<!-- _______________________________________________________________ -->

<!ENTITY % XMI.element.att
               'xmi.id ID #IMPLIED xmi.label CDATA #IMPLIED xmi.uuid
                CDATA #IMPLIED '>

<!-- _______________________________________________________________ -->
<!--                                                                 -->
<!-- XMI.link.att defines the attributes that each XML element that  -->
<!-- corresponds to a metamodel class must have to enable it to      -->
<!-- function as a simple XLink as well as refer to model            -->
<!-- constructs within the same XMI file.                            -->
<!-- _______________________________________________________________ -->

<!ENTITY % XMI.link.att
'       href CDATA #IMPLIED
        xmi.idref IDREF #IMPLIED ' >

<!-- _______________________________________________________________ -->
<!--                                                                 -->
<!-- XMI.model identifies the model(s) being transferred             -->
<!-- _______________________________________________________________ -->

<!ELEMENT XMI.model ANY>
<!ATTLIST XMI.model %XMI.link.att;
            xmi.name    CDATA #REQUIRED
            xmi.version CDATA #IMPLIED>

<!-- _______________________________________________________________ -->
<!--                                                                 -->
<!-- XMI.metamodel identifies the metamodel(s) for the transferred   -->
<!-- data                                                            -->
<!-- _______________________________________________________________ -->

<!ELEMENT XMI.metamodel ANY>
<!ATTLIST XMI.metamodel %XMI.link.att;
            xmi.name    CDATA #REQUIRED
            xmi.version CDATA #IMPLIED>

<!-- _______________________________________________________________ -->
<!--                                                                 -->
<!-- XMI.metametamodel identifies the metametamodel(s) for the       -->
<!-- transferred data                                                -->
<!-- _______________________________________________________________ -->

<!ELEMENT XMI.metametamodel ANY>
<!ATTLIST XMI.metametamodel %XMI.link.att;
            xmi.name    CDATA #REQUIRED
            xmi.version CDATA #IMPLIED>

<!-- _______________________________________________________________ -->
<!--                                                                 -->
<!-- XMI.import identifies imported metamodel(s)                     -->
<!-- _______________________________________________________________ -->

<!ELEMENT XMI.import ANY>
<!ATTLIST XMI.import %XMI.link.att;
            xmi.name    CDATA #REQUIRED
            xmi.version CDATA #IMPLIED>

<!-- _______________________________________________________________ -->
<!--                                                                 -->
<!-- XMI.content is the actual data being transferred                -->
<!-- _______________________________________________________________ -->

<!ELEMENT XMI.content ANY>

<!-- _______________________________________________________________ -->
<!--                                                                 -->
<!-- XMI.extensions contains data to transfer that does not conform  -->
<!-- to the metamodel(s) in the header                               -->
<!-- _______________________________________________________________ -->

<!ELEMENT XMI.extensions ANY>
<!ATTLIST XMI.extensions
            xmi.extender CDATA #REQUIRED>

<!-- _______________________________________________________________ -->
<!--                                                                 -->
<!-- extension contains information related to a specific model      -->
<!-- construct that is not defined in the metamodel(s) in the header -->
<!-- _______________________________________________________________ -->

<!ELEMENT XMI.extension ANY>
<!ATTLIST XMI.extension %XMI.element.att; %XMI.link.att;
            xmi.extender CDATA #REQUIRED
            xmi.extenderID CDATA #IMPLIED>

<!-- _______________________________________________________________ -->
<!--                                                                 -->
<!-- XMI.difference holds XML elements representing differences to a -->
<!-- base model                                                      -->
<!-- _______________________________________________________________ -->

<!ELEMENT XMI.difference (XMI.difference | XMI.delete | XMI.add |
                          XMI.replace)*>
<!ATTLIST XMI.difference %XMI.element.att; %XMI.link.att;>

<!-- _______________________________________________________________ -->
<!--                                                                 -->
<!-- XMI.delete represents a deletion from a base model              -->
<!-- _______________________________________________________________ -->

<!ELEMENT XMI.delete EMPTY>
<!ATTLIST XMI.delete %XMI.element.att; %XMI.link.att;>

<!-- _______________________________________________________________ -->
<!--                                                                 -->
<!-- XMI.add represents an addition to a base model                  -->
<!-- _______________________________________________________________ -->

<!ELEMENT XMI.add ANY>
<!ATTLIST XMI.add %XMI.element.att; %XMI.link.att;
            xmi.position CDATA "-1">

<!-- _______________________________________________________________ -->
<!--                                                                 -->
<!-- XMI.replace represents the replacement of a model construct     -->
<!-- with another model construct in a base model                    -->
<!-- _______________________________________________________________ -->

<!ELEMENT XMI.replace ANY>
<!ATTLIST XMI.replace %XMI.element.att; %XMI.link.att;
            xmi.position CDATA "-1">

<!-- _______________________________________________________________ -->
<!--                                                                 -->
<!-- XMI.reference may be used to refer to data types not defined in -->
<!-- the metamodel                                                   -->
<!-- _______________________________________________________________ -->

<!ELEMENT XMI.reference ANY>
<!ATTLIST XMI.reference %XMI.link.att;>


<!ATTLIST XMI xmlns:UML CDATA #IMPLIED>

<!-- ========= UML:Data_Types ========= -->
<!ENTITY % UML:AggregationKind '(none|aggregate|composite)'>
<!ENTITY % UML:CallConcurrencyKind '(sequential|guarded|concurrent)'>
<!ENTITY % UML:ChangeableKind '(changeable|frozen|addOnly)'>
<!ENTITY % UML:OrderingKind '(unordered|ordered)'>
<!ENTITY % UML:ParameterDirectionKind '(in|inout|out|return)'>
<!ENTITY % UML:ScopeKind '(instance|classifier)'>
<!ENTITY % UML:VisibilityKind '(public|protected|private|package)'>
<!ENTITY % UML:PseudostateKind '(choice|deepHistory|fork|initial|join|
   junction|shallowHistory)'>

<!-- ========= UML:Multiplicity ========= -->
<!ELEMENT UML:Multiplicity.range (UML:MultiplicityRange)*>
<!ENTITY % UML:MultiplicityFeatures 'XMI.extension |
   UML:Multiplicity.range'>
<!ENTITY % UML:MultiplicityAtts '%XMI.element.att; %XMI.link.att;'>
<!ELEMENT UML:Multiplicity (%UML:MultiplicityFeatures;)*>
<!ATTLIST UML:Multiplicity %UML:MultiplicityAtts;>

<!-- ========= UML:MultiplicityRange ========= -->
<!ELEMENT UML:MultiplicityRange.lower (#PCDATA|XMI.reference)*>
<!ELEMENT UML:MultiplicityRange.upper (#PCDATA|XMI.reference)*>
<!ELEMENT UML:MultiplicityRange.multiplicity (UML:Multiplicity)*>
<!ENTITY % UML:MultiplicityRangeFeatures 'XMI.extension |
   UML:MultiplicityRange.lower |
   UML:MultiplicityRange.upper |
   UML:MultiplicityRange.multiplicity'>
<!ENTITY % UML:MultiplicityRangeAtts '%XMI.element.att; %XMI.link.att;
   lower CDATA #IMPLIED
   upper CDATA #IMPLIED
   multiplicity IDREFS #IMPLIED'>
<!ELEMENT UML:MultiplicityRange (%UML:MultiplicityRangeFeatures;)*>
<!ATTLIST UML:MultiplicityRange %UML:MultiplicityRangeAtts;>

<!-- ========= UML:Expression ========= -->
<!ELEMENT UML:Expression.language (#PCDATA|XMI.reference)*>
<!ELEMENT UML:Expression.body (#PCDATA|XMI.reference)*>
<!ENTITY % UML:ExpressionFeatures 'XMI.extension |
   UML:Expression.language |
   UML:Expression.body'>
<!ENTITY % UML:ExpressionAtts '%XMI.element.att; %XMI.link.att;
   language CDATA #IMPLIED
   body CDATA #IMPLIED'>
<!ELEMENT UML:Expression (%UML:ExpressionFeatures;)*>
<!ATTLIST UML:Expression %UML:ExpressionAtts;>

<!-- ========= UML:BooleanExpression ========= -->
<!ENTITY % UML:BooleanExpressionFeatures '%UML:ExpressionFeatures;'>
<!ENTITY % UML:BooleanExpressionAtts '%UML:ExpressionAtts;'>
<!ELEMENT UML:BooleanExpression (%UML:BooleanExpressionFeatures;)*>
<!ATTLIST UML:BooleanExpression %UML:BooleanExpressionAtts;>

<!-- ========= UML:TypeExpression ========= -->
<!ENTITY % UML:TypeExpressionFeatures '%UML:ExpressionFeatures;'>
<!ENTITY % UML:TypeExpressionAtts '%UML:ExpressionAtts;'>
<!ELEMENT UML:TypeExpression (%UML:TypeExpressionFeatures;)*>
<!ATTLIST UML:TypeExpression %UML:TypeExpressionAtts;>

<!-- ========= UML:MappingExpression ========= -->
<!ENTITY % UML:MappingExpressionFeatures '%UML:ExpressionFeatures;'>
<!ENTITY % UML:MappingExpressionAtts '%UML:ExpressionAtts;'>
<!ELEMENT UML:MappingExpression (%UML:MappingExpressionFeatures;)*>
<!ATTLIST UML:MappingExpression %UML:MappingExpressionAtts;>

<!-- ========= UML:TimeExpression ========= -->
<!ENTITY % UML:TimeExpressionFeatures '%UML:ExpressionFeatures;'>
<!ENTITY % UML:TimeExpressionAtts '%UML:ExpressionAtts;'>
<!ELEMENT UML:TimeExpression (%UML:TimeExpressionFeatures;)*>
<!ATTLIST UML:TimeExpression %UML:TimeExpressionAtts;>

<!-- ========= UML:ArgListsExpression ========= -->
<!ENTITY % UML:ArgListsExpressionFeatures '%UML:ExpressionFeatures;'>
<!ENTITY % UML:ArgListsExpressionAtts '%UML:ExpressionAtts;'>
<!ELEMENT UML:ArgListsExpression (%UML:ArgListsExpressionFeatures;)*>
<!ATTLIST UML:ArgListsExpression %UML:ArgListsExpressionAtts;>

<!-- ========= UML:ProcedureExpression ========= -->
<!ENTITY % UML:ProcedureExpressionFeatures '%UML:ExpressionFeatures;'>
<!ENTITY % UML:ProcedureExpressionAtts '%UML:ExpressionAtts;'>
<!ELEMENT UML:ProcedureExpression (%UML:ProcedureExpressionFeatures;)*>
<!ATTLIST UML:ProcedureExpression %UML:ProcedureExpressionAtts;>

<!-- ========= UML:Core ========= -->

<!-- ========= UML:Element ========= -->
<!ENTITY % UML:ElementFeatures 'XMI.extension'>
<!ENTITY % UML:ElementAtts '%XMI.element.att; %XMI.link.att;'>
<!ELEMENT UML:Element (%UML:ElementFeatures;)*>
<!ATTLIST UML:Element %UML:ElementAtts;>

<!-- ========= UML:ModelElement ========= -->
<!ELEMENT UML:ModelElement.name (#PCDATA|XMI.reference)*>
<!ELEMENT UML:ModelElement.visibility EMPTY>
<!ATTLIST UML:ModelElement.visibility xmi.value %UML:VisibilityKind; #REQUIRED>
<!ELEMENT UML:ModelElement.isSpecification EMPTY>
<!ATTLIST UML:ModelElement.isSpecification xmi.value (true|false) #REQUIRED>
<!ELEMENT UML:ModelElement.namespace (UML:Namespace)*>
<!ELEMENT UML:ModelElement.clientDependency (UML:Dependency)*>
<!ELEMENT UML:ModelElement.constraint (UML:Constraint)*>
<!ELEMENT UML:ModelElement.targetFlow (UML:Flow)*>
<!ELEMENT UML:ModelElement.sourceFlow (UML:Flow)*>
<!ELEMENT UML:ModelElement.comment (UML:Comment)*>
<!ELEMENT UML:ModelElement.templateParameter (UML:TemplateParameter)*>
<!ELEMENT UML:ModelElement.stereotype (UML:Stereotype)*>
<!ELEMENT UML:ModelElement.taggedValue (UML:TaggedValue)*>
<!ENTITY % UML:ModelElementFeatures '%UML:ElementFeatures; |
   UML:ModelElement.name |
   UML:ModelElement.visibility |
   UML:ModelElement.isSpecification |
   UML:ModelElement.namespace |
   UML:ModelElement.clientDependency |
   UML:ModelElement.constraint |
   UML:ModelElement.targetFlow |
   UML:ModelElement.sourceFlow |
   UML:ModelElement.comment |
   UML:ModelElement.templateParameter |
   UML:ModelElement.stereotype |
   UML:ModelElement.taggedValue'>
<!ENTITY % UML:ModelElementAtts '%UML:ElementAtts;
   name CDATA #IMPLIED
   visibility %UML:VisibilityKind; #IMPLIED
   isSpecification (true|false) #IMPLIED
   namespace IDREFS #IMPLIED
   clientDependency IDREFS #IMPLIED
   constraint IDREFS #IMPLIED
   targetFlow IDREFS #IMPLIED
   sourceFlow IDREFS #IMPLIED
   comment IDREFS #IMPLIED
   stereotype IDREFS #IMPLIED'>
<!ELEMENT UML:ModelElement (%UML:ModelElementFeatures;)*>
<!ATTLIST UML:ModelElement %UML:ModelElementAtts;>

<!-- ========= UML:GeneralizableElement ========= -->
<!ELEMENT UML:GeneralizableElement.isRoot EMPTY>
<!ATTLIST UML:GeneralizableElement.isRoot xmi.value (true|false) #REQUIRED>
<!ELEMENT UML:GeneralizableElement.isLeaf EMPTY>
<!ATTLIST UML:GeneralizableElement.isLeaf xmi.value (true|false) #REQUIRED>
<!ELEMENT UML:GeneralizableElement.isAbstract EMPTY>
<!ATTLIST UML:GeneralizableElement.isAbstract xmi.value (true|false) #REQUIRED>
<!ELEMENT UML:GeneralizableElement.generalization (UML:Generalization)*>
<!ENTITY % UML:GeneralizableElementFeatures '%UML:ModelElementFeatures; |
   UML:GeneralizableElement.isRoot |
   UML:GeneralizableElement.isLeaf |
   UML:GeneralizableElement.isAbstract |
   UML:GeneralizableElement.generalization'>
<!ENTITY % UML:GeneralizableElementAtts '%UML:ModelElementAtts;
   isRoot (true|false) #IMPLIED
   isLeaf (true|false) #IMPLIED
   isAbstract (true|false) #IMPLIED
   generalization IDREFS #IMPLIED'>
<!ELEMENT UML:GeneralizableElement (%UML:GeneralizableElementFeatures;)*>
<!ATTLIST UML:GeneralizableElement %UML:GeneralizableElementAtts;>

<!-- ========= UML:Namespace ========= -->
<!ELEMENT UML:Namespace.ownedElement (UML:ModelElement|UML:Instance|
   UML:Object|UML:LinkObject|UML:DataValue|UML:ComponentInstance|
   UML:NodeInstance|UML:SubsystemInstance|UML:UseCaseInstance|
   UML:AttributeLink|UML:Link|UML:LinkEnd|UML:Stimulus|UML:Procedure|
   UML:ExtensionPoint|UML:StateMachine|UML:ActivityGraph|UML:Event|
   UML:TimeEvent|UML:CallEvent|UML:SignalEvent|UML:ChangeEvent|
   UML:StateVertex|UML:State|UML:CompositeState|UML:SubmachineState|
   UML:SubactivityState|UML:SimpleState|UML:ActionState|UML:CallState|
   UML:ObjectFlowState|UML:FinalState|UML:Pseudostate|UML:SynchState|
   UML:StubState|UML:Transition|UML:Guard|UML:Message|UML:Interaction|
   UML:InteractionInstanceSet|UML:CollaborationInstanceSet|UML:Partition|
   UML:Variable|UML:ArgumentSpecification|UML:PrimitiveFunction|
   UML:ControlFlow|UML:Action|UML:CollectionAction|UML:FilterAction|
   UML:IterateAction|UML:MapAction|UML:ReduceAction|UML:ConditionalAction|
   UML:GroupAction|UML:LoopAction|UML:HandlerAction|UML:PrimitiveAction|
   UML:ApplyFunctionAction|UML:CodeAction|UML:LiteralValueAction|
   UML:MarshalAction|UML:NullAction|UML:TestIdentityAction|
   UML:UnmarshalAction|UML:JumpAction|UML:InvocationAction|
   UML:AsynchronousInvocationAction|UML:SynchronousInvocationAction|
   UML:ClearAssociationAction|UML:LinkAction|UML:ReadLinkAction|
   UML:WriteLinkAction|UML:CreateLinkAction|UML:CreateLinkObjectAction|
   UML:DestroyLinkAction|UML:ReadLinkObjectEndAction|
   UML:ReadLinkObjectQualifierAction|UML:AttributeAction|
   UML:ClearAttributeAction|UML:ReadAttributeAction|UML:WriteAttributeAction|
   UML:AddAttributeValueAction|UML:RemoveAttributeValueAction|
   UML:CreateObjectAction|UML:DestroyObjectAction|
   UML:ReadIsClassifiedObjectAction|UML:ReclassifyObjectAction|
   UML:ReadExtentAction|UML:ReadSelfAction|UML:StartObjectStateMachineAction|
   UML:VariableAction|UML:ClearVariableAction|UML:ReadVariableAction|
   UML:WriteVariableAction|UML:AddVariableValueAction|
   UML:RemoveVariableValueAction|UML:ExplicitInvocationActtion|
   UML:CallOperationAction|UML:SendSignalAction|UML:BroadcastSignalAction|
   UML:CallProcedureAction|UML:DataFlow|UML:Pin|UML:InputPin|UML:OutputPin|
   UML:GeneralizableElement|UML:Collaboration|UML:Classifier|UML:Signal|
   UML:Exception|UML:UseCase|UML:Actor|UML:ClassifierRole|
   UML:ClassifierInState|UML:Class|UML:AssociationClass|UML:DataType|
   UML:Primitive|UML:Enumeration|UML:ProgrammingLanguageDataType|
   UML:Interface|UML:Component|UML:Node|UML:Artifact|UML:Subsystem|
   UML:Association|UML:AssociationRole|UML:Stereotype|UML:Package|UML:Model|
   UML:Namespace|UML:Feature|UML:StructuralFeature|UML:Attribute|
   UML:BehavioralFeature|UML:Reception|UML:Operation|UML:Method|
   UML:AssociationEnd|UML:AssociationEndRole|UML:Constraint|UML:Relationship|
   UML:Extend|UML:Include|UML:Generalization|UML:Dependency|UML:Abstraction|
   UML:Usage|UML:Binding|UML:Permission|UML:Flow|UML:Parameter|UML:Comment|
   UML:EnumerationLiteral|UML:TagDefinition|UML:TaggedValue)*>
<!ENTITY % UML:NamespaceFeatures '%UML:ModelElementFeatures; |
   UML:Namespace.ownedElement'>
<!ENTITY % UML:NamespaceAtts '%UML:ModelElementAtts;'>
<!ELEMENT UML:Namespace (%UML:NamespaceFeatures;)*>
<!ATTLIST UML:Namespace %UML:NamespaceAtts;>

<!-- ========= UML:Classifier ========= -->
<!ELEMENT UML:Classifier.feature (UML:Feature|UML:StructuralFeature|
   UML:Attribute|UML:BehavioralFeature|UML:Reception|UML:Operation|UML:Method)*>
<!ELEMENT UML:Classifier.powertypeRange (UML:Generalization)*>
<!ENTITY % UML:ClassifierFeatures '%UML:GeneralizableElementFeatures; |
   UML:Namespace.ownedElement |
   UML:Classifier.feature |
   UML:Classifier.powertypeRange'>
<!ENTITY % UML:ClassifierAtts '%UML:GeneralizableElementAtts;
   powertypeRange IDREFS #IMPLIED'>
<!ELEMENT UML:Classifier (%UML:ClassifierFeatures;)*>
<!ATTLIST UML:Classifier %UML:ClassifierAtts;>

<!-- ========= UML:Class ========= -->
<!ELEMENT UML:Class.isActive EMPTY>
<!ATTLIST UML:Class.isActive xmi.value (true|false) #REQUIRED>
<!ENTITY % UML:ClassFeatures '%UML:ClassifierFeatures; |
   UML:Class.isActive'>
<!ENTITY % UML:ClassAtts '%UML:ClassifierAtts;
   isActive (true|false) #IMPLIED'>
<!ELEMENT UML:Class (%UML:ClassFeatures;)*>
<!ATTLIST UML:Class %UML:ClassAtts;>

<!-- ========= UML:DataType ========= -->
<!ENTITY % UML:DataTypeFeatures '%UML:ClassifierFeatures;'>
<!ENTITY % UML:DataTypeAtts '%UML:ClassifierAtts;'>
<!ELEMENT UML:DataType (%UML:DataTypeFeatures;)*>
<!ATTLIST UML:DataType %UML:DataTypeAtts;>

<!-- ========= UML:Feature ========= -->
<!ELEMENT UML:Feature.ownerScope EMPTY>
<!ATTLIST UML:Feature.ownerScope xmi.value %UML:ScopeKind; #REQUIRED>
<!ELEMENT UML:Feature.owner (UML:Classifier)*>
<!ENTITY % UML:FeatureFeatures '%UML:ModelElementFeatures; |
   UML:Feature.ownerScope |
   UML:Feature.owner'>
<!ENTITY % UML:FeatureAtts '%UML:ModelElementAtts;
   ownerScope %UML:ScopeKind; #IMPLIED
   owner IDREFS #IMPLIED'>
<!ELEMENT UML:Feature (%UML:FeatureFeatures;)*>
<!ATTLIST UML:Feature %UML:FeatureAtts;>

<!-- ========= UML:StructuralFeature ========= -->
<!ELEMENT UML:StructuralFeature.multiplicity (UML:Multiplicity)*>
<!ELEMENT UML:StructuralFeature.changeability EMPTY>
<!ATTLIST UML:StructuralFeature.changeability xmi.value %UML:ChangeableKind; #REQUIRED>
<!ELEMENT UML:StructuralFeature.targetScope EMPTY>
<!ATTLIST UML:StructuralFeature.targetScope xmi.value %UML:ScopeKind; #REQUIRED>
<!ELEMENT UML:StructuralFeature.ordering EMPTY>
<!ATTLIST UML:StructuralFeature.ordering xmi.value %UML:OrderingKind; #REQUIRED>
<!ELEMENT UML:StructuralFeature.type (UML:Classifier)*>
<!ENTITY % UML:StructuralFeatureFeatures '%UML:FeatureFeatures; |
   UML:StructuralFeature.multiplicity |
   UML:StructuralFeature.changeability |
   UML:StructuralFeature.targetScope |
   UML:StructuralFeature.ordering |
   UML:StructuralFeature.type'>
<!ENTITY % UML:StructuralFeatureAtts '%UML:FeatureAtts;
   changeability %UML:ChangeableKind; #IMPLIED
   targetScope %UML:ScopeKind; #IMPLIED
   ordering %UML:OrderingKind; #IMPLIED
   type IDREFS #IMPLIED'>
<!ELEMENT UML:StructuralFeature (%UML:StructuralFeatureFeatures;)*>
<!ATTLIST UML:StructuralFeature %UML:StructuralFeatureAtts;>

<!-- ========= UML:AssociationEnd ========= -->
<!ELEMENT UML:AssociationEnd.isNavigable EMPTY>
<!ATTLIST UML:AssociationEnd.isNavigable xmi.value (true|false) #REQUIRED>
<!ELEMENT UML:AssociationEnd.ordering EMPTY>
<!ATTLIST UML:AssociationEnd.ordering xmi.value %UML:OrderingKind; #REQUIRED>
<!ELEMENT UML:AssociationEnd.aggregation EMPTY>
<!ATTLIST UML:AssociationEnd.aggregation xmi.value %UML:AggregationKind; #REQUIRED>
<!ELEMENT UML:AssociationEnd.targetScope EMPTY>
<!ATTLIST UML:AssociationEnd.targetScope xmi.value %UML:ScopeKind; #REQUIRED>
<!ELEMENT UML:AssociationEnd.multiplicity (UML:Multiplicity)*>
<!ELEMENT UML:AssociationEnd.changeability EMPTY>
<!ATTLIST UML:AssociationEnd.changeability xmi.value %UML:ChangeableKind; #REQUIRED>
<!ELEMENT UML:AssociationEnd.association (UML:Association)*>
<!ELEMENT UML:AssociationEnd.qualifier (UML:Attribute)*>
<!ELEMENT UML:AssociationEnd.participant (UML:Classifier)*>
<!ELEMENT UML:AssociationEnd.specification (UML:Classifier)*>
<!ENTITY % UML:AssociationEndFeatures '%UML:ModelElementFeatures; |
   UML:AssociationEnd.isNavigable |
   UML:AssociationEnd.ordering |
   UML:AssociationEnd.aggregation |
   UML:AssociationEnd.targetScope |
   UML:AssociationEnd.multiplicity |
   UML:AssociationEnd.changeability |
   UML:AssociationEnd.association |
   UML:AssociationEnd.qualifier |
   UML:AssociationEnd.participant |
   UML:AssociationEnd.specification'>
<!ENTITY % UML:AssociationEndAtts '%UML:ModelElementAtts;
   isNavigable (true|false) #IMPLIED
   ordering %UML:OrderingKind; #IMPLIED
   aggregation %UML:AggregationKind; #IMPLIED
   targetScope %UML:ScopeKind; #IMPLIED
   changeability %UML:ChangeableKind; #IMPLIED
   association IDREFS #IMPLIED
   participant IDREFS #IMPLIED
   specification IDREFS #IMPLIED'>
<!ELEMENT UML:AssociationEnd (%UML:AssociationEndFeatures;)*>
<!ATTLIST UML:AssociationEnd %UML:AssociationEndAtts;>

<!-- ========= UML:Interface ========= -->
<!ENTITY % UML:InterfaceFeatures '%UML:ClassifierFeatures;'>
<!ENTITY % UML:InterfaceAtts '%UML:ClassifierAtts;'>
<!ELEMENT UML:Interface (%UML:InterfaceFeatures;)*>
<!ATTLIST UML:Interface %UML:InterfaceAtts;>

<!-- ========= UML:Constraint ========= -->
<!ELEMENT UML:Constraint.body (UML:BooleanExpression)*>
<!ELEMENT UML:Constraint.constrainedElement (UML:ModelElement)*>
<!ENTITY % UML:ConstraintFeatures '%UML:ModelElementFeatures; |
   UML:Constraint.body |
   UML:Constraint.constrainedElement'>
<!ENTITY % UML:ConstraintAtts '%UML:ModelElementAtts;
   constrainedElement IDREFS #IMPLIED'>
<!ELEMENT UML:Constraint (%UML:ConstraintFeatures;)*>
<!ATTLIST UML:Constraint %UML:ConstraintAtts;>

<!-- ========= UML:Relationship ========= -->
<!ENTITY % UML:RelationshipFeatures '%UML:ModelElementFeatures;'>
<!ENTITY % UML:RelationshipAtts '%UML:ModelElementAtts;'>
<!ELEMENT UML:Relationship (%UML:RelationshipFeatures;)*>
<!ATTLIST UML:Relationship %UML:RelationshipAtts;>

<!-- ========= UML:Association ========= -->
<!ELEMENT UML:Association.connection (UML:AssociationEnd|
   UML:AssociationEndRole)*>
<!ENTITY % UML:AssociationFeatures '%UML:GeneralizableElementFeatures; |
   UML:Association.connection'>
<!ENTITY % UML:AssociationAtts '%UML:GeneralizableElementAtts;'>
<!ELEMENT UML:Association (%UML:AssociationFeatures;)*>
<!ATTLIST UML:Association %UML:AssociationAtts;>

<!-- ========= UML:Attribute ========= -->
<!ELEMENT UML:Attribute.initialValue (UML:Expression|UML:BooleanExpression|
   UML:TypeExpression|UML:MappingExpression|UML:TimeExpression|
   UML:ArgListsExpression|UML:ProcedureExpression)*>
<!ELEMENT UML:Attribute.associationEnd (UML:AssociationEnd)*>
<!ENTITY % UML:AttributeFeatures '%UML:StructuralFeatureFeatures; |
   UML:Attribute.initialValue |
   UML:Attribute.associationEnd'>
<!ENTITY % UML:AttributeAtts '%UML:StructuralFeatureAtts;
   associationEnd IDREFS #IMPLIED'>
<!ELEMENT UML:Attribute (%UML:AttributeFeatures;)*>
<!ATTLIST UML:Attribute %UML:AttributeAtts;>

<!-- ========= UML:BehavioralFeature ========= -->
<!ELEMENT UML:BehavioralFeature.isQuery EMPTY>
<!ATTLIST UML:BehavioralFeature.isQuery xmi.value (true|false) #REQUIRED>
<!ELEMENT UML:BehavioralFeature.parameter (UML:Parameter)*>
<!ENTITY % UML:BehavioralFeatureFeatures '%UML:FeatureFeatures; |
   UML:BehavioralFeature.isQuery |
   UML:BehavioralFeature.parameter'>
<!ENTITY % UML:BehavioralFeatureAtts '%UML:FeatureAtts;
   isQuery (true|false) #IMPLIED'>
<!ELEMENT UML:BehavioralFeature (%UML:BehavioralFeatureFeatures;)*>
<!ATTLIST UML:BehavioralFeature %UML:BehavioralFeatureAtts;>

<!-- ========= UML:Operation ========= -->
<!ELEMENT UML:Operation.concurrency EMPTY>
<!ATTLIST UML:Operation.concurrency xmi.value %UML:CallConcurrencyKind; #REQUIRED>
<!ELEMENT UML:Operation.isRoot EMPTY>
<!ATTLIST UML:Operation.isRoot xmi.value (true|false) #REQUIRED>
<!ELEMENT UML:Operation.isLeaf EMPTY>
<!ATTLIST UML:Operation.isLeaf xmi.value (true|false) #REQUIRED>
<!ELEMENT UML:Operation.isAbstract EMPTY>
<!ATTLIST UML:Operation.isAbstract xmi.value (true|false) #REQUIRED>
<!ELEMENT UML:Operation.specification (#PCDATA|XMI.reference)*>
<!ENTITY % UML:OperationFeatures '%UML:BehavioralFeatureFeatures; |
   UML:Operation.concurrency |
   UML:Operation.isRoot |
   UML:Operation.isLeaf |
   UML:Operation.isAbstract |
   UML:Operation.specification'>
<!ENTITY % UML:OperationAtts '%UML:BehavioralFeatureAtts;
   concurrency %UML:CallConcurrencyKind; #IMPLIED
   isRoot (true|false) #IMPLIED
   isLeaf (true|false) #IMPLIED
   isAbstract (true|false) #IMPLIED
   specification CDATA #IMPLIED'>
<!ELEMENT UML:Operation (%UML:OperationFeatures;)*>
<!ATTLIST UML:Operation %UML:OperationAtts;>

<!-- ========= UML:Parameter ========= -->
<!ELEMENT UML:Parameter.defaultValue (UML:Expression|UML:BooleanExpression|
   UML:TypeExpression|UML:MappingExpression|UML:TimeExpression|
   UML:ArgListsExpression|UML:ProcedureExpression)*>
<!ELEMENT UML:Parameter.kind EMPTY>
<!ATTLIST UML:Parameter.kind xmi.value %UML:ParameterDirectionKind; #REQUIRED>
<!ELEMENT UML:Parameter.behavioralFeature (UML:BehavioralFeature)*>
<!ELEMENT UML:Parameter.type (UML:Classifier)*>
<!ENTITY % UML:ParameterFeatures '%UML:ModelElementFeatures; |
   UML:Parameter.defaultValue |
   UML:Parameter.kind |
   UML:Parameter.behavioralFeature |
   UML:Parameter.type'>
<!ENTITY % UML:ParameterAtts '%UML:ModelElementAtts;
   kind %UML:ParameterDirectionKind; #IMPLIED
   behavioralFeature IDREFS #IMPLIED
   type IDREFS #IMPLIED'>
<!ELEMENT UML:Parameter (%UML:ParameterFeatures;)*>
<!ATTLIST UML:Parameter %UML:ParameterAtts;>

<!-- ========= UML:Method ========= -->
<!ELEMENT UML:Method.body (UML:ProcedureExpression)*>
<!ELEMENT UML:Method.specification (UML:Operation)*>
<!ENTITY % UML:MethodFeatures '%UML:BehavioralFeatureFeatures; |
   UML:Method.body |
   UML:Method.specification'>
<!ENTITY % UML:MethodAtts '%UML:BehavioralFeatureAtts;
   specification IDREFS #IMPLIED'>
<!ELEMENT UML:Method (%UML:MethodFeatures;)*>
<!ATTLIST UML:Method %UML:MethodAtts;>

<!-- ========= UML:Generalization ========= -->
<!ELEMENT UML:Generalization.discriminator (#PCDATA|XMI.reference)*>
<!ELEMENT UML:Generalization.child (UML:GeneralizableElement)*>
<!ELEMENT UML:Generalization.parent (UML:GeneralizableElement)*>
<!ELEMENT UML:Generalization.powertype (UML:Classifier)*>
<!ENTITY % UML:GeneralizationFeatures '%UML:RelationshipFeatures; |
   UML:Generalization.discriminator |
   UML:Generalization.child |
   UML:Generalization.parent |
   UML:Generalization.powertype'>
<!ENTITY % UML:GeneralizationAtts '%UML:RelationshipAtts;
   discriminator CDATA #IMPLIED
   child IDREFS #IMPLIED
   parent IDREFS #IMPLIED
   powertype IDREFS #IMPLIED'>
<!ELEMENT UML:Generalization (%UML:GeneralizationFeatures;)*>
<!ATTLIST UML:Generalization %UML:GeneralizationAtts;>

<!-- ========= UML:AssociationClass ========= -->
<!ENTITY % UML:AssociationClassFeatures '%UML:AssociationFeatures; |
   UML:Namespace.ownedElement |
   UML:Classifier.feature |
   UML:Classifier.powertypeRange |
   UML:Class.isActive'>
<!ENTITY % UML:AssociationClassAtts '%UML:AssociationAtts;
   powertypeRange IDREFS #IMPLIED
   isActive (true|false) #IMPLIED'>
<!ELEMENT UML:AssociationClass (%UML:AssociationClassFeatures;)*>
<!ATTLIST UML:AssociationClass %UML:AssociationClassAtts;>

<!-- ========= UML:Dependency ========= -->
<!ELEMENT UML:Dependency.client (UML:ModelElement)*>
<!ELEMENT UML:Dependency.supplier (UML:ModelElement)*>
<!ENTITY % UML:DependencyFeatures '%UML:RelationshipFeatures; |
   UML:Dependency.client |
   UML:Dependency.supplier'>
<!ENTITY % UML:DependencyAtts '%UML:RelationshipAtts;
   client IDREFS #IMPLIED
   supplier IDREFS #IMPLIED'>
<!ELEMENT UML:Dependency (%UML:DependencyFeatures;)*>
<!ATTLIST UML:Dependency %UML:DependencyAtts;>

<!-- ========= UML:Abstraction ========= -->
<!ELEMENT UML:Abstraction.mapping (UML:MappingExpression)*>
<!ENTITY % UML:AbstractionFeatures '%UML:DependencyFeatures; |
   UML:Abstraction.mapping'>
<!ENTITY % UML:AbstractionAtts '%UML:DependencyAtts;'>
<!ELEMENT UML:Abstraction (%UML:AbstractionFeatures;)*>
<!ATTLIST UML:Abstraction %UML:AbstractionAtts;>

<!-- ========= UML:PresentationElement ========= -->
<!ELEMENT UML:PresentationElement.subject (UML:ModelElement)*>
<!ENTITY % UML:PresentationElementFeatures '%UML:ElementFeatures; |
   UML:PresentationElement.subject'>
<!ENTITY % UML:PresentationElementAtts '%UML:ElementAtts;
   subject IDREFS #IMPLIED'>
<!ELEMENT UML:PresentationElement (%UML:PresentationElementFeatures;)*>
<!ATTLIST UML:PresentationElement %UML:PresentationElementAtts;>

<!-- ========= UML:Usage ========= -->
<!ENTITY % UML:UsageFeatures '%UML:DependencyFeatures;'>
<!ENTITY % UML:UsageAtts '%UML:DependencyAtts;'>
<!ELEMENT UML:Usage (%UML:UsageFeatures;)*>
<!ATTLIST UML:Usage %UML:UsageAtts;>

<!-- ========= UML:Binding ========= -->
<!ELEMENT UML:Binding.argument (UML:TemplateArgument)*>
<!ENTITY % UML:BindingFeatures '%UML:DependencyFeatures; |
   UML:Binding.argument'>
<!ENTITY % UML:BindingAtts '%UML:DependencyAtts;'>
<!ELEMENT UML:Binding (%UML:BindingFeatures;)*>
<!ATTLIST UML:Binding %UML:BindingAtts;>

<!-- ========= UML:Component ========= -->
<!ELEMENT UML:Component.deploymentLocation (UML:Node)*>
<!ELEMENT UML:Component.residentElement (UML:ElementResidence)*>
<!ELEMENT UML:Component.implementation (UML:Artifact)*>
<!ENTITY % UML:ComponentFeatures '%UML:ClassifierFeatures; |
   UML:Component.deploymentLocation |
   UML:Component.residentElement |
   UML:Component.implementation'>
<!ENTITY % UML:ComponentAtts '%UML:ClassifierAtts;
   deploymentLocation IDREFS #IMPLIED
   implementation IDREFS #IMPLIED'>
<!ELEMENT UML:Component (%UML:ComponentFeatures;)*>
<!ATTLIST UML:Component %UML:ComponentAtts;>

<!-- ========= UML:Node ========= -->
<!ELEMENT UML:Node.deployedComponent (UML:Component)*>
<!ENTITY % UML:NodeFeatures '%UML:ClassifierFeatures; |
   UML:Node.deployedComponent'>
<!ENTITY % UML:NodeAtts '%UML:ClassifierAtts;
   deployedComponent IDREFS #IMPLIED'>
<!ELEMENT UML:Node (%UML:NodeFeatures;)*>
<!ATTLIST UML:Node %UML:NodeAtts;>

<!-- ========= UML:Permission ========= -->
<!ENTITY % UML:PermissionFeatures '%UML:DependencyFeatures;'>
<!ENTITY % UML:PermissionAtts '%UML:DependencyAtts;'>
<!ELEMENT UML:Permission (%UML:PermissionFeatures;)*>
<!ATTLIST UML:Permission %UML:PermissionAtts;>

<!-- ========= UML:Comment ========= -->
<!ELEMENT UML:Comment.body (#PCDATA|XMI.reference)*>
<!ELEMENT UML:Comment.annotatedElement (UML:ModelElement)*>
<!ENTITY % UML:CommentFeatures '%UML:ModelElementFeatures; |
   UML:Comment.body |
   UML:Comment.annotatedElement'>
<!ENTITY % UML:CommentAtts '%UML:ModelElementAtts;
   body CDATA #IMPLIED
   annotatedElement IDREFS #IMPLIED'>
<!ELEMENT UML:Comment (%UML:CommentFeatures;)*>
<!ATTLIST UML:Comment %UML:CommentAtts;>

<!-- ========= UML:Flow ========= -->
<!ELEMENT UML:Flow.target (UML:ModelElement)*>
<!ELEMENT UML:Flow.source (UML:ModelElement)*>
<!ENTITY % UML:FlowFeatures '%UML:RelationshipFeatures; |
   UML:Flow.target |
   UML:Flow.source'>
<!ENTITY % UML:FlowAtts '%UML:RelationshipAtts;
   target IDREFS #IMPLIED
   source IDREFS #IMPLIED'>
<!ELEMENT UML:Flow (%UML:FlowFeatures;)*>
<!ATTLIST UML:Flow %UML:FlowAtts;>

<!-- ========= UML:ElementResidence ========= -->
<!ELEMENT UML:ElementResidence.visibility EMPTY>
<!ATTLIST UML:ElementResidence.visibility xmi.value %UML:VisibilityKind; #REQUIRED>
<!ELEMENT UML:ElementResidence.resident (UML:ModelElement)*>
<!ELEMENT UML:ElementResidence.container (UML:Component)*>
<!ENTITY % UML:ElementResidenceFeatures 'XMI.extension |
   UML:ElementResidence.visibility |
   UML:ElementResidence.resident |
   UML:ElementResidence.container'>
<!ENTITY % UML:ElementResidenceAtts '%XMI.element.att; %XMI.link.att;
   visibility %UML:VisibilityKind; #IMPLIED
   resident IDREFS #IMPLIED
   container IDREFS #IMPLIED'>
<!ELEMENT UML:ElementResidence (%UML:ElementResidenceFeatures;)*>
<!ATTLIST UML:ElementResidence %UML:ElementResidenceAtts;>

<!-- ========= UML:TemplateParameter ========= -->
<!ELEMENT UML:TemplateParameter.template (UML:ModelElement)*>
<!ELEMENT UML:TemplateParameter.parameter (UML:ModelElement|UML:Instance|
   UML:Object|UML:LinkObject|UML:DataValue|UML:ComponentInstance|
   UML:NodeInstance|UML:SubsystemInstance|UML:UseCaseInstance|
   UML:AttributeLink|UML:Link|UML:LinkEnd|UML:Stimulus|UML:Procedure|
   UML:ExtensionPoint|UML:StateMachine|UML:ActivityGraph|UML:Event|
   UML:TimeEvent|UML:CallEvent|UML:SignalEvent|UML:ChangeEvent|
   UML:StateVertex|UML:State|UML:CompositeState|UML:SubmachineState|
   UML:SubactivityState|UML:SimpleState|UML:ActionState|UML:CallState|
   UML:ObjectFlowState|UML:FinalState|UML:Pseudostate|UML:SynchState|
   UML:StubState|UML:Transition|UML:Guard|UML:Message|UML:Interaction|
   UML:InteractionInstanceSet|UML:CollaborationInstanceSet|UML:Partition|
   UML:Variable|UML:ArgumentSpecification|UML:PrimitiveFunction|
   UML:ControlFlow|UML:Action|UML:CollectionAction|UML:FilterAction|
   UML:IterateAction|UML:MapAction|UML:ReduceAction|UML:ConditionalAction|
   UML:GroupAction|UML:LoopAction|UML:HandlerAction|UML:PrimitiveAction|
   UML:ApplyFunctionAction|UML:CodeAction|UML:LiteralValueAction|
   UML:MarshalAction|UML:NullAction|UML:TestIdentityAction|
   UML:UnmarshalAction|UML:JumpAction|UML:InvocationAction|
   UML:AsynchronousInvocationAction|UML:SynchronousInvocationAction|
   UML:ClearAssociationAction|UML:LinkAction|UML:ReadLinkAction|
   UML:WriteLinkAction|UML:CreateLinkAction|UML:CreateLinkObjectAction|
   UML:DestroyLinkAction|UML:ReadLinkObjectEndAction|
   UML:ReadLinkObjectQualifierAction|UML:AttributeAction|
   UML:ClearAttributeAction|UML:ReadAttributeAction|UML:WriteAttributeAction|
   UML:AddAttributeValueAction|UML:RemoveAttributeValueAction|
   UML:CreateObjectAction|UML:DestroyObjectAction|
   UML:ReadIsClassifiedObjectAction|UML:ReclassifyObjectAction|
   UML:ReadExtentAction|UML:ReadSelfAction|UML:StartObjectStateMachineAction|
   UML:VariableAction|UML:ClearVariableAction|UML:ReadVariableAction|
   UML:WriteVariableAction|UML:AddVariableValueAction|
   UML:RemoveVariableValueAction|UML:ExplicitInvocationActtion|
   UML:CallOperationAction|UML:SendSignalAction|UML:BroadcastSignalAction|
   UML:CallProcedureAction|UML:DataFlow|UML:Pin|UML:InputPin|UML:OutputPin|
   UML:GeneralizableElement|UML:Collaboration|UML:Classifier|UML:Signal|
   UML:Exception|UML:UseCase|UML:Actor|UML:ClassifierRole|
   UML:ClassifierInState|UML:Class|UML:AssociationClass|UML:DataType|
   UML:Primitive|UML:Enumeration|UML:ProgrammingLanguageDataType|
   UML:Interface|UML:Component|UML:Node|UML:Artifact|UML:Subsystem|
   UML:Association|UML:AssociationRole|UML:Stereotype|UML:Package|UML:Model|
   UML:Namespace|UML:Feature|UML:StructuralFeature|UML:Attribute|
   UML:BehavioralFeature|UML:Reception|UML:Operation|UML:Method|
   UML:AssociationEnd|UML:AssociationEndRole|UML:Constraint|UML:Relationship|
   UML:Extend|UML:Include|UML:Generalization|UML:Dependency|UML:Abstraction|
   UML:Usage|UML:Binding|UML:Permission|UML:Flow|UML:Parameter|UML:Comment|
   UML:EnumerationLiteral|UML:TagDefinition|UML:TaggedValue)*>
<!ELEMENT UML:TemplateParameter.defaultElement (UML:ModelElement)*>
<!ENTITY % UML:TemplateParameterFeatures 'XMI.extension |
   UML:TemplateParameter.template |
   UML:TemplateParameter.parameter |
   UML:TemplateParameter.defaultElement'>
<!ENTITY % UML:TemplateParameterAtts '%XMI.element.att; %XMI.link.att;
   template IDREFS #IMPLIED
   defaultElement IDREFS #IMPLIED'>
<!ELEMENT UML:TemplateParameter (%UML:TemplateParameterFeatures;)*>
<!ATTLIST UML:TemplateParameter %UML:TemplateParameterAtts;>

<!-- ========= UML:Primitive ========= -->
<!ENTITY % UML:PrimitiveFeatures '%UML:DataTypeFeatures;'>
<!ENTITY % UML:PrimitiveAtts '%UML:DataTypeAtts;'>
<!ELEMENT UML:Primitive (%UML:PrimitiveFeatures;)*>
<!ATTLIST UML:Primitive %UML:PrimitiveAtts;>

<!-- ========= UML:Enumeration ========= -->
<!ELEMENT UML:Enumeration.literal (UML:EnumerationLiteral)*>
<!ENTITY % UML:EnumerationFeatures '%UML:DataTypeFeatures; |
   UML:Enumeration.literal'>
<!ENTITY % UML:EnumerationAtts '%UML:DataTypeAtts;'>
<!ELEMENT UML:Enumeration (%UML:EnumerationFeatures;)*>
<!ATTLIST UML:Enumeration %UML:EnumerationAtts;>

<!-- ========= UML:EnumerationLiteral ========= -->
<!ELEMENT UML:EnumerationLiteral.enumeration (UML:Enumeration)*>
<!ENTITY % UML:EnumerationLiteralFeatures '%UML:ModelElementFeatures; |
   UML:EnumerationLiteral.enumeration'>
<!ENTITY % UML:EnumerationLiteralAtts '%UML:ModelElementAtts;
   enumeration IDREFS #IMPLIED'>
<!ELEMENT UML:EnumerationLiteral (%UML:EnumerationLiteralFeatures;)*>
<!ATTLIST UML:EnumerationLiteral %UML:EnumerationLiteralAtts;>

<!-- ========= UML:Stereotype ========= -->
<!ELEMENT UML:Stereotype.icon (#PCDATA|XMI.reference)*>
<!ELEMENT UML:Stereotype.baseClass (#PCDATA|XMI.reference)*>
<!ELEMENT UML:Stereotype.definedTag (UML:TagDefinition)*>
<!ELEMENT UML:Stereotype.stereotypeConstraint (UML:Constraint)*>
<!ENTITY % UML:StereotypeFeatures '%UML:GeneralizableElementFeatures; |
   UML:Stereotype.icon |
   UML:Stereotype.baseClass |
   UML:Stereotype.definedTag |
   UML:Stereotype.stereotypeConstraint'>
<!ENTITY % UML:StereotypeAtts '%UML:GeneralizableElementAtts;
   icon CDATA #IMPLIED'>
<!ELEMENT UML:Stereotype (%UML:StereotypeFeatures;)*>
<!ATTLIST UML:Stereotype %UML:StereotypeAtts;>

<!-- ========= UML:TagDefinition ========= -->
<!ELEMENT UML:TagDefinition.tagType (#PCDATA|XMI.reference)*>
<!ELEMENT UML:TagDefinition.multiplicity (UML:Multiplicity)*>
<!ELEMENT UML:TagDefinition.owner (UML:Stereotype)*>
<!ENTITY % UML:TagDefinitionFeatures '%UML:ModelElementFeatures; |
   UML:TagDefinition.tagType |
   UML:TagDefinition.multiplicity |
   UML:TagDefinition.owner'>
<!ENTITY % UML:TagDefinitionAtts '%UML:ModelElementAtts;
   tagType CDATA #IMPLIED
   owner IDREFS #IMPLIED'>
<!ELEMENT UML:TagDefinition (%UML:TagDefinitionFeatures;)*>
<!ATTLIST UML:TagDefinition %UML:TagDefinitionAtts;>

<!-- ========= UML:TaggedValue ========= -->
<!ELEMENT UML:TaggedValue.dataValue (#PCDATA|XMI.reference)*>
<!ELEMENT UML:TaggedValue.modelElement (UML:ModelElement)*>
<!ELEMENT UML:TaggedValue.type (UML:TagDefinition)*>
<!ELEMENT UML:TaggedValue.referenceValue (UML:ModelElement)*>
<!ENTITY % UML:TaggedValueFeatures '%UML:ModelElementFeatures; |
   UML:TaggedValue.dataValue |
   UML:TaggedValue.modelElement |
   UML:TaggedValue.type |
   UML:TaggedValue.referenceValue'>
<!ENTITY % UML:TaggedValueAtts '%UML:ModelElementAtts;
   modelElement IDREFS #IMPLIED
   type IDREFS #IMPLIED
   referenceValue IDREFS #IMPLIED'>
<!ELEMENT UML:TaggedValue (%UML:TaggedValueFeatures;)*>
<!ATTLIST UML:TaggedValue %UML:TaggedValueAtts;>

<!-- ========= UML:ProgrammingLanguageDataType ========= -->
<!ELEMENT UML:ProgrammingLanguageDataType.expression (UML:TypeExpression)*>
<!ENTITY % UML:ProgrammingLanguageDataTypeFeatures '%UML:DataTypeFeatures; |
   UML:ProgrammingLanguageDataType.expression'>
<!ENTITY % UML:ProgrammingLanguageDataTypeAtts '%UML:DataTypeAtts;'>
<!ELEMENT UML:ProgrammingLanguageDataType (%UML:ProgrammingLanguageDataTypeFeatures;)*>
<!ATTLIST UML:ProgrammingLanguageDataType %UML:ProgrammingLanguageDataTypeAtts;>

<!-- ========= UML:Artifact ========= -->
<!ENTITY % UML:ArtifactFeatures '%UML:ClassifierFeatures;'>
<!ENTITY % UML:ArtifactAtts '%UML:ClassifierAtts;'>
<!ELEMENT UML:Artifact (%UML:ArtifactFeatures;)*>
<!ATTLIST UML:Artifact %UML:ArtifactAtts;>

<!-- ========= UML:TemplateArgument ========= -->
<!ELEMENT UML:TemplateArgument.modelElement (UML:ModelElement)*>
<!ELEMENT UML:TemplateArgument.binding (UML:Binding)*>
<!ENTITY % UML:TemplateArgumentFeatures 'XMI.extension |
   UML:TemplateArgument.modelElement |
   UML:TemplateArgument.binding'>
<!ENTITY % UML:TemplateArgumentAtts '%XMI.element.att; %XMI.link.att;
   modelElement IDREFS #IMPLIED
   binding IDREFS #IMPLIED'>
<!ELEMENT UML:TemplateArgument (%UML:TemplateArgumentFeatures;)*>
<!ATTLIST UML:TemplateArgument %UML:TemplateArgumentAtts;>

<!-- ========= UML:Common_Behavior ========= -->

<!-- ========= UML:Instance ========= -->
<!ELEMENT UML:Instance.classifier (UML:Classifier)*>
<!ELEMENT UML:Instance.linkEnd (UML:LinkEnd)*>
<!ELEMENT UML:Instance.slot (UML:AttributeLink)*>
<!ELEMENT UML:Instance.componentInstance (UML:ComponentInstance)*>
<!ELEMENT UML:Instance.ownedInstance (UML:Instance|UML:Object|UML:LinkObject|
   UML:DataValue|UML:ComponentInstance|UML:NodeInstance|UML:SubsystemInstance|
   UML:UseCaseInstance)*>
<!ELEMENT UML:Instance.ownedLink (UML:Link|UML:LinkObject)*>
<!ENTITY % UML:InstanceFeatures '%UML:ModelElementFeatures; |
   UML:Instance.classifier |
   UML:Instance.linkEnd |
   UML:Instance.slot |
   UML:Instance.componentInstance |
   UML:Instance.ownedInstance |
   UML:Instance.ownedLink'>
<!ENTITY % UML:InstanceAtts '%UML:ModelElementAtts;
   classifier IDREFS #IMPLIED
   linkEnd IDREFS #IMPLIED
   componentInstance IDREFS #IMPLIED'>
<!ELEMENT UML:Instance (%UML:InstanceFeatures;)*>
<!ATTLIST UML:Instance %UML:InstanceAtts;>

<!-- ========= UML:Signal ========= -->
<!ENTITY % UML:SignalFeatures '%UML:ClassifierFeatures;'>
<!ENTITY % UML:SignalAtts '%UML:ClassifierAtts;'>
<!ELEMENT UML:Signal (%UML:SignalFeatures;)*>
<!ATTLIST UML:Signal %UML:SignalAtts;>

<!-- ========= UML:UninterpretedAction ========= -->
<!ENTITY % UML:UninterpretedActionFeatures 'XMI.extension'>
<!ENTITY % UML:UninterpretedActionAtts '%XMI.element.att; %XMI.link.att;'>
<!ELEMENT UML:UninterpretedAction (%UML:UninterpretedActionFeatures;)*>
<!ATTLIST UML:UninterpretedAction %UML:UninterpretedActionAtts;>

<!-- ========= UML:AttributeLink ========= -->
<!ELEMENT UML:AttributeLink.attribute (UML:Attribute)*>
<!ELEMENT UML:AttributeLink.value (UML:Instance)*>
<!ELEMENT UML:AttributeLink.instance (UML:Instance)*>
<!ELEMENT UML:AttributeLink.linkEnd (UML:LinkEnd)*>
<!ENTITY % UML:AttributeLinkFeatures '%UML:ModelElementFeatures; |
   UML:AttributeLink.attribute |
   UML:AttributeLink.value |
   UML:AttributeLink.instance |
   UML:AttributeLink.linkEnd'>
<!ENTITY % UML:AttributeLinkAtts '%UML:ModelElementAtts;
   attribute IDREFS #IMPLIED
   value IDREFS #IMPLIED
   instance IDREFS #IMPLIED
   linkEnd IDREFS #IMPLIED'>
<!ELEMENT UML:AttributeLink (%UML:AttributeLinkFeatures;)*>
<!ATTLIST UML:AttributeLink %UML:AttributeLinkAtts;>

<!-- ========= UML:Object ========= -->
<!ENTITY % UML:ObjectFeatures '%UML:InstanceFeatures;'>
<!ENTITY % UML:ObjectAtts '%UML:InstanceAtts;'>
<!ELEMENT UML:Object (%UML:ObjectFeatures;)*>
<!ATTLIST UML:Object %UML:ObjectAtts;>

<!-- ========= UML:Link ========= -->
<!ELEMENT UML:Link.association (UML:Association)*>
<!ELEMENT UML:Link.connection (UML:LinkEnd)*>
<!ENTITY % UML:LinkFeatures '%UML:ModelElementFeatures; |
   UML:Link.association |
   UML:Link.connection'>
<!ENTITY % UML:LinkAtts '%UML:ModelElementAtts;
   association IDREFS #IMPLIED'>
<!ELEMENT UML:Link (%UML:LinkFeatures;)*>
<!ATTLIST UML:Link %UML:LinkAtts;>

<!-- ========= UML:LinkObject ========= -->
<!ENTITY % UML:LinkObjectFeatures '%UML:ObjectFeatures; |
   UML:Link.association |
   UML:Link.connection'>
<!ENTITY % UML:LinkObjectAtts '%UML:ObjectAtts;
   association IDREFS #IMPLIED'>
<!ELEMENT UML:LinkObject (%UML:LinkObjectFeatures;)*>
<!ATTLIST UML:LinkObject %UML:LinkObjectAtts;>

<!-- ========= UML:DataValue ========= -->
<!ENTITY % UML:DataValueFeatures '%UML:InstanceFeatures;'>
<!ENTITY % UML:DataValueAtts '%UML:InstanceAtts;'>
<!ELEMENT UML:DataValue (%UML:DataValueFeatures;)*>
<!ATTLIST UML:DataValue %UML:DataValueAtts;>

<!-- ========= UML:Reception ========= -->
<!ELEMENT UML:Reception.specification (#PCDATA|XMI.reference)*>
<!ELEMENT UML:Reception.isRoot EMPTY>
<!ATTLIST UML:Reception.isRoot xmi.value (true|false) #REQUIRED>
<!ELEMENT UML:Reception.isLeaf EMPTY>
<!ATTLIST UML:Reception.isLeaf xmi.value (true|false) #REQUIRED>
<!ELEMENT UML:Reception.isAbstract EMPTY>
<!ATTLIST UML:Reception.isAbstract xmi.value (true|false) #REQUIRED>
<!ELEMENT UML:Reception.signal (UML:Signal)*>
<!ENTITY % UML:ReceptionFeatures '%UML:BehavioralFeatureFeatures; |
   UML:Reception.specification |
   UML:Reception.isRoot |
   UML:Reception.isLeaf |
   UML:Reception.isAbstract |
   UML:Reception.signal'>
<!ENTITY % UML:ReceptionAtts '%UML:BehavioralFeatureAtts;
   specification CDATA #IMPLIED
   isRoot (true|false) #IMPLIED
   isLeaf (true|false) #IMPLIED
   isAbstract (true|false) #IMPLIED
   signal IDREFS #IMPLIED'>
<!ELEMENT UML:Reception (%UML:ReceptionFeatures;)*>
<!ATTLIST UML:Reception %UML:ReceptionAtts;>

<!-- ========= UML:LinkEnd ========= -->
<!ELEMENT UML:LinkEnd.instance (UML:Instance)*>
<!ELEMENT UML:LinkEnd.link (UML:Link)*>
<!ELEMENT UML:LinkEnd.associationEnd (UML:AssociationEnd)*>
<!ELEMENT UML:LinkEnd.qualifiedValue (UML:AttributeLink)*>
<!ENTITY % UML:LinkEndFeatures '%UML:ModelElementFeatures; |
   UML:LinkEnd.instance |
   UML:LinkEnd.link |
   UML:LinkEnd.associationEnd |
   UML:LinkEnd.qualifiedValue'>
<!ENTITY % UML:LinkEndAtts '%UML:ModelElementAtts;
   instance IDREFS #IMPLIED
   link IDREFS #IMPLIED
   associationEnd IDREFS #IMPLIED'>
<!ELEMENT UML:LinkEnd (%UML:LinkEndFeatures;)*>
<!ATTLIST UML:LinkEnd %UML:LinkEndAtts;>

<!-- ========= UML:TerminateAction ========= -->
<!ENTITY % UML:TerminateActionFeatures 'XMI.extension'>
<!ENTITY % UML:TerminateActionAtts '%XMI.element.att; %XMI.link.att;'>
<!ELEMENT UML:TerminateAction (%UML:TerminateActionFeatures;)*>
<!ATTLIST UML:TerminateAction %UML:TerminateActionAtts;>

<!-- ========= UML:Stimulus ========= -->
<!ELEMENT UML:Stimulus.argument (UML:Instance)*>
<!ELEMENT UML:Stimulus.sender (UML:Instance)*>
<!ELEMENT UML:Stimulus.receiver (UML:Instance)*>
<!ELEMENT UML:Stimulus.communicationLink (UML:Link)*>
<!ELEMENT UML:Stimulus.dispatchAction (UML:Procedure)*>
<!ENTITY % UML:StimulusFeatures '%UML:ModelElementFeatures; |
   UML:Stimulus.argument |
   UML:Stimulus.sender |
   UML:Stimulus.receiver |
   UML:Stimulus.communicationLink |
   UML:Stimulus.dispatchAction'>
<!ENTITY % UML:StimulusAtts '%UML:ModelElementAtts;
   argument IDREFS #IMPLIED
   sender IDREFS #IMPLIED
   receiver IDREFS #IMPLIED
   communicationLink IDREFS #IMPLIED
   dispatchAction IDREFS #IMPLIED'>
<!ELEMENT UML:Stimulus (%UML:StimulusFeatures;)*>
<!ATTLIST UML:Stimulus %UML:StimulusAtts;>

<!-- ========= UML:Exception ========= -->
<!ENTITY % UML:ExceptionFeatures '%UML:SignalFeatures;'>
<!ENTITY % UML:ExceptionAtts '%UML:SignalAtts;'>
<!ELEMENT UML:Exception (%UML:ExceptionFeatures;)*>
<!ATTLIST UML:Exception %UML:ExceptionAtts;>

<!-- ========= UML:ComponentInstance ========= -->
<!ELEMENT UML:ComponentInstance.nodeInstance (UML:NodeInstance)*>
<!ELEMENT UML:ComponentInstance.resident (UML:Instance)*>
<!ENTITY % UML:ComponentInstanceFeatures '%UML:InstanceFeatures; |
   UML:ComponentInstance.nodeInstance |
   UML:ComponentInstance.resident'>
<!ENTITY % UML:ComponentInstanceAtts '%UML:InstanceAtts;
   nodeInstance IDREFS #IMPLIED
   resident IDREFS #IMPLIED'>
<!ELEMENT UML:ComponentInstance (%UML:ComponentInstanceFeatures;)*>
<!ATTLIST UML:ComponentInstance %UML:ComponentInstanceAtts;>

<!-- ========= UML:NodeInstance ========= -->
<!ELEMENT UML:NodeInstance.resident (UML:ComponentInstance)*>
<!ENTITY % UML:NodeInstanceFeatures '%UML:InstanceFeatures; |
   UML:NodeInstance.resident'>
<!ENTITY % UML:NodeInstanceAtts '%UML:InstanceAtts;
   resident IDREFS #IMPLIED'>
<!ELEMENT UML:NodeInstance (%UML:NodeInstanceFeatures;)*>
<!ATTLIST UML:NodeInstance %UML:NodeInstanceAtts;>

<!-- ========= UML:SubsystemInstance ========= -->
<!ENTITY % UML:SubsystemInstanceFeatures '%UML:InstanceFeatures;'>
<!ENTITY % UML:SubsystemInstanceAtts '%UML:InstanceAtts;'>
<!ELEMENT UML:SubsystemInstance (%UML:SubsystemInstanceFeatures;)*>
<!ATTLIST UML:SubsystemInstance %UML:SubsystemInstanceAtts;>

<!-- ========= UML:Procedure ========= -->
<!ELEMENT UML:Procedure.language (#PCDATA|XMI.reference)*>
<!ELEMENT UML:Procedure.body (#PCDATA|XMI.reference)*>
<!ELEMENT UML:Procedure.isList EMPTY>
<!ATTLIST UML:Procedure.isList xmi.value (true|false) #REQUIRED>
<!ELEMENT UML:Procedure.expression (UML:Expression)*>
<!ELEMENT UML:Procedure.method (UML:Method)*>
<!ENTITY % UML:ProcedureFeatures '%UML:ModelElementFeatures; |
   UML:Procedure.language |
   UML:Procedure.body |
   UML:Procedure.isList |
   UML:Procedure.expression |
   UML:Procedure.method'>
<!ENTITY % UML:ProcedureAtts '%UML:ModelElementAtts;
   language CDATA #IMPLIED
   body CDATA #IMPLIED
   isList (true|false) #IMPLIED
   expression IDREFS #IMPLIED
   method IDREFS #IMPLIED'>
<!ELEMENT UML:Procedure (%UML:ProcedureFeatures;)*>
<!ATTLIST UML:Procedure %UML:ProcedureAtts;>

<!-- ========= UML:A_context_raisedSignal ========= -->
<!ELEMENT UML:A_context_raisedSignal.context (UML:BehavioralFeature)?>
<!ELEMENT UML:A_context_raisedSignal.raisedSignal (UML:Signal)?>
<!ELEMENT UML:A_context_raisedSignal (
   UML:A_context_raisedSignal.context |
   UML:A_context_raisedSignal.raisedSignal)*>
<!ATTLIST UML:A_context_raisedSignal %XMI.element.att; %XMI.link.att;
   context IDREFS #IMPLIED
   raisedSignal IDREFS #IMPLIED>

<!-- ========= UML:Action_Foundation ========= -->

<!-- ========= UML:ControlFlow ========= -->
<!ELEMENT UML:ControlFlow.predecessor (UML:Action)*>
<!ELEMENT UML:ControlFlow.successor (UML:Action)*>
<!ENTITY % UML:ControlFlowFeatures '%UML:ModelElementFeatures; |
   UML:ControlFlow.predecessor |
   UML:ControlFlow.successor'>
<!ENTITY % UML:ControlFlowAtts '%UML:ModelElementAtts;
   predecessor IDREFS #IMPLIED
   successor IDREFS #IMPLIED'>
<!ELEMENT UML:ControlFlow (%UML:ControlFlowFeatures;)*>
<!ATTLIST UML:ControlFlow %UML:ControlFlowAtts;>

<!-- ========= UML:Action ========= -->
<!ELEMENT UML:Action.isReadOnly EMPTY>
<!ATTLIST UML:Action.isReadOnly xmi.value (true|false) #REQUIRED>
<!ELEMENT UML:Action.consequent (UML:ControlFlow)*>
<!ELEMENT UML:Action.antecedent (UML:ControlFlow)*>
<!ELEMENT UML:Action.outputPin (UML:OutputPin)*>
<!ELEMENT UML:Action.inputPin (UML:InputPin)*>
<!ELEMENT UML:Action.procedure (UML:Procedure)*>
<!ENTITY % UML:ActionFeatures '%UML:ModelElementFeatures; |
   UML:Action.isReadOnly |
   UML:Action.consequent |
   UML:Action.antecedent |
   UML:Action.outputPin |
   UML:Action.inputPin |
   UML:Action.procedure'>
<!ENTITY % UML:ActionAtts '%UML:ModelElementAtts;
   isReadOnly (true|false) #IMPLIED
   consequent IDREFS #IMPLIED
   antecedent IDREFS #IMPLIED
   procedure IDREFS #IMPLIED'>
<!ELEMENT UML:Action (%UML:ActionFeatures;)*>
<!ATTLIST UML:Action %UML:ActionAtts;>

<!-- ========= UML:PrimitiveAction ========= -->
<!ENTITY % UML:PrimitiveActionFeatures '%UML:ActionFeatures;'>
<!ENTITY % UML:PrimitiveActionAtts '%UML:ActionAtts;'>
<!ELEMENT UML:PrimitiveAction (%UML:PrimitiveActionFeatures;)*>
<!ATTLIST UML:PrimitiveAction %UML:PrimitiveActionAtts;>

<!-- ========= UML:Pin ========= -->
<!ELEMENT UML:Pin.multiplicity (UML:Multiplicity)*>
<!ELEMENT UML:Pin.ordering EMPTY>
<!ATTLIST UML:Pin.ordering xmi.value %UML:OrderingKind; #REQUIRED>
<!ELEMENT UML:Pin.type (UML:Classifier)*>
<!ENTITY % UML:PinFeatures '%UML:ModelElementFeatures; |
   UML:Pin.multiplicity |
   UML:Pin.ordering |
   UML:Pin.type'>
<!ENTITY % UML:PinAtts '%UML:ModelElementAtts;
   ordering %UML:OrderingKind; #IMPLIED
   type IDREFS #IMPLIED'>
<!ELEMENT UML:Pin (%UML:PinFeatures;)*>
<!ATTLIST UML:Pin %UML:PinAtts;>

<!-- ========= UML:InputPin ========= -->
<!ELEMENT UML:InputPin.flow (UML:DataFlow)*>
<!ELEMENT UML:InputPin.procedure (UML:Procedure)*>
<!ELEMENT UML:InputPin.action (UML:Action)*>
<!ENTITY % UML:InputPinFeatures '%UML:PinFeatures; |
   UML:InputPin.flow |
   UML:InputPin.procedure |
   UML:InputPin.action'>
<!ENTITY % UML:InputPinAtts '%UML:PinAtts;
   flow IDREFS #IMPLIED
   procedure IDREFS #IMPLIED
   action IDREFS #IMPLIED'>
<!ELEMENT UML:InputPin (%UML:InputPinFeatures;)*>
<!ATTLIST UML:InputPin %UML:InputPinAtts;>

<!-- ========= UML:DataFlow ========= -->
<!ELEMENT UML:DataFlow.source (UML:OutputPin)*>
<!ELEMENT UML:DataFlow.destination (UML:InputPin)*>
<!ENTITY % UML:DataFlowFeatures '%UML:ModelElementFeatures; |
   UML:DataFlow.source |
   UML:DataFlow.destination'>
<!ENTITY % UML:DataFlowAtts '%UML:ModelElementAtts;
   source IDREFS #IMPLIED
   destination IDREFS #IMPLIED'>
<!ELEMENT UML:DataFlow (%UML:DataFlowFeatures;)*>
<!ATTLIST UML:DataFlow %UML:DataFlowAtts;>

<!-- ========= UML:OutputPin ========= -->
<!ELEMENT UML:OutputPin.flow (UML:DataFlow)*>
<!ELEMENT UML:OutputPin.procedure (UML:Procedure)*>
<!ELEMENT UML:OutputPin.action (UML:Action)*>
<!ENTITY % UML:OutputPinFeatures '%UML:PinFeatures; |
   UML:OutputPin.flow |
   UML:OutputPin.procedure |
   UML:OutputPin.action'>
<!ENTITY % UML:OutputPinAtts '%UML:PinAtts;
   flow IDREFS #IMPLIED
   procedure IDREFS #IMPLIED
   action IDREFS #IMPLIED'>
<!ELEMENT UML:OutputPin (%UML:OutputPinFeatures;)*>
<!ATTLIST UML:OutputPin %UML:OutputPinAtts;>

<!-- ========= UML:Actions ========= -->

<!-- ========= UML:CollectionAction ========= -->
<!ELEMENT UML:CollectionAction.subaction (UML:Action)*>
<!ENTITY % UML:CollectionActionFeatures '%UML:ActionFeatures; |
   UML:CollectionAction.subaction'>
<!ENTITY % UML:CollectionActionAtts '%UML:ActionAtts;
   subaction IDREFS #IMPLIED'>
<!ELEMENT UML:CollectionAction (%UML:CollectionActionFeatures;)*>
<!ATTLIST UML:CollectionAction %UML:CollectionActionAtts;>

<!-- ========= UML:FilterAction ========= -->
<!ELEMENT UML:FilterAction.subinput (UML:OutputPin)*>
<!ELEMENT UML:FilterAction.subtest (UML:OutputPin)*>
<!ENTITY % UML:FilterActionFeatures '%UML:CollectionActionFeatures; |
   UML:FilterAction.subinput |
   UML:FilterAction.subtest'>
<!ENTITY % UML:FilterActionAtts '%UML:CollectionActionAtts;
   subtest IDREFS #IMPLIED'>
<!ELEMENT UML:FilterAction (%UML:FilterActionFeatures;)*>
<!ATTLIST UML:FilterAction %UML:FilterActionAtts;>

<!-- ========= UML:IterateAction ========= -->
<!ELEMENT UML:IterateAction.subinput (UML:OutputPin)*>
<!ELEMENT UML:IterateAction.loopVariable (UML:OutputPin)*>
<!ELEMENT UML:IterateAction.suboutput (UML:OutputPin)*>
<!ELEMENT UML:IterateAction.isUnordered EMPTY>
<!ATTLIST UML:IterateAction.isUnordered xmi.value (true|false) #REQUIRED>
<!ENTITY % UML:IterateActionFeatures '%UML:CollectionActionFeatures; |
   UML:IterateAction.subinput |
   UML:IterateAction.loopVariable |
   UML:IterateAction.suboutput |
   UML:IterateAction.isUnordered'>
<!ENTITY % UML:IterateActionAtts '%UML:CollectionActionAtts;
   subinput IDREFS #IMPLIED
   suboutput IDREFS #IMPLIED
   isUnordered (true|false) #IMPLIED'>
<!ELEMENT UML:IterateAction (%UML:IterateActionFeatures;)*>
<!ATTLIST UML:IterateAction %UML:IterateActionAtts;>

<!-- ========= UML:MapAction ========= -->
<!ELEMENT UML:MapAction.subinput (UML:OutputPin)*>
<!ELEMENT UML:MapAction.suboutput (UML:OutputPin)*>
<!ENTITY % UML:MapActionFeatures '%UML:CollectionActionFeatures; |
   UML:MapAction.subinput |
   UML:MapAction.suboutput'>
<!ENTITY % UML:MapActionAtts '%UML:CollectionActionAtts;
   suboutput IDREFS #IMPLIED'>
<!ELEMENT UML:MapAction (%UML:MapActionFeatures;)*>
<!ATTLIST UML:MapAction %UML:MapActionAtts;>

<!-- ========= UML:ReduceAction ========= -->
<!ELEMENT UML:ReduceAction.leftSubinput (UML:OutputPin)*>
<!ELEMENT UML:ReduceAction.suboutput (UML:OutputPin)*>
<!ELEMENT UML:ReduceAction.rightSubinput (UML:OutputPin)*>
<!ELEMENT UML:ReduceAction.isUnordered EMPTY>
<!ATTLIST UML:ReduceAction.isUnordered xmi.value (true|false) #REQUIRED>
<!ENTITY % UML:ReduceActionFeatures '%UML:CollectionActionFeatures; |
   UML:ReduceAction.leftSubinput |
   UML:ReduceAction.suboutput |
   UML:ReduceAction.rightSubinput |
   UML:ReduceAction.isUnordered'>
<!ENTITY % UML:ReduceActionAtts '%UML:CollectionActionAtts;
   suboutput IDREFS #IMPLIED
   isUnordered (true|false) #IMPLIED'>
<!ELEMENT UML:ReduceAction (%UML:ReduceActionFeatures;)*>
<!ATTLIST UML:ReduceAction %UML:ReduceActionAtts;>

<!-- ========= UML:Clause ========= -->
<!ELEMENT UML:Clause.body (UML:Action|UML:CollectionAction|UML:FilterAction|
   UML:IterateAction|UML:MapAction|UML:ReduceAction|UML:ConditionalAction|
   UML:GroupAction|UML:LoopAction|UML:HandlerAction|UML:PrimitiveAction|
   UML:ApplyFunctionAction|UML:CodeAction|UML:LiteralValueAction|
   UML:MarshalAction|UML:NullAction|UML:TestIdentityAction|
   UML:UnmarshalAction|UML:JumpAction|UML:InvocationAction|
   UML:AsynchronousInvocationAction|UML:SynchronousInvocationAction|
   UML:ClearAssociationAction|UML:LinkAction|UML:ReadLinkAction|
   UML:WriteLinkAction|UML:CreateLinkAction|UML:CreateLinkObjectAction|
   UML:DestroyLinkAction|UML:ReadLinkObjectEndAction|
   UML:ReadLinkObjectQualifierAction|UML:AttributeAction|
   UML:ClearAttributeAction|UML:ReadAttributeAction|UML:WriteAttributeAction|
   UML:AddAttributeValueAction|UML:RemoveAttributeValueAction|
   UML:CreateObjectAction|UML:DestroyObjectAction|
   UML:ReadIsClassifiedObjectAction|UML:ReclassifyObjectAction|
   UML:ReadExtentAction|UML:ReadSelfAction|UML:StartObjectStateMachineAction|
   UML:VariableAction|UML:ClearVariableAction|UML:ReadVariableAction|
   UML:WriteVariableAction|UML:AddVariableValueAction|
   UML:RemoveVariableValueAction|UML:ExplicitInvocationActtion|
   UML:CallOperationAction|UML:SendSignalAction|UML:BroadcastSignalAction|
   UML:CallProcedureAction)*>
<!ELEMENT UML:Clause.test (UML:Action|UML:CollectionAction|UML:FilterAction|
   UML:IterateAction|UML:MapAction|UML:ReduceAction|UML:ConditionalAction|
   UML:GroupAction|UML:LoopAction|UML:HandlerAction|UML:PrimitiveAction|
   UML:ApplyFunctionAction|UML:CodeAction|UML:LiteralValueAction|
   UML:MarshalAction|UML:NullAction|UML:TestIdentityAction|
   UML:UnmarshalAction|UML:JumpAction|UML:InvocationAction|
   UML:AsynchronousInvocationAction|UML:SynchronousInvocationAction|
   UML:ClearAssociationAction|UML:LinkAction|UML:ReadLinkAction|
   UML:WriteLinkAction|UML:CreateLinkAction|UML:CreateLinkObjectAction|
   UML:DestroyLinkAction|UML:ReadLinkObjectEndAction|
   UML:ReadLinkObjectQualifierAction|UML:AttributeAction|
   UML:ClearAttributeAction|UML:ReadAttributeAction|UML:WriteAttributeAction|
   UML:AddAttributeValueAction|UML:RemoveAttributeValueAction|
   UML:CreateObjectAction|UML:DestroyObjectAction|
   UML:ReadIsClassifiedObjectAction|UML:ReclassifyObjectAction|
   UML:ReadExtentAction|UML:ReadSelfAction|UML:StartObjectStateMachineAction|
   UML:VariableAction|UML:ClearVariableAction|UML:ReadVariableAction|
   UML:WriteVariableAction|UML:AddVariableValueAction|
   UML:RemoveVariableValueAction|UML:ExplicitInvocationActtion|
   UML:CallOperationAction|UML:SendSignalAction|UML:BroadcastSignalAction|
   UML:CallProcedureAction)*>
<!ELEMENT UML:Clause.bodyOutput (UML:OutputPin)*>
<!ELEMENT UML:Clause.testOutput (UML:OutputPin)*>
<!ELEMENT UML:Clause.successorClause (UML:Clause)*>
<!ELEMENT UML:Clause.predecessorClause (UML:Clause)*>
<!ENTITY % UML:ClauseFeatures '%UML:ElementFeatures; |
   UML:Clause.body |
   UML:Clause.test |
   UML:Clause.bodyOutput |
   UML:Clause.testOutput |
   UML:Clause.successorClause |
   UML:Clause.predecessorClause'>
<!ENTITY % UML:ClauseAtts '%UML:ElementAtts;
   bodyOutput IDREFS #IMPLIED
   testOutput IDREFS #IMPLIED
   successorClause IDREFS #IMPLIED
   predecessorClause IDREFS #IMPLIED'>
<!ELEMENT UML:Clause (%UML:ClauseFeatures;)*>
<!ATTLIST UML:Clause %UML:ClauseAtts;>

<!-- ========= UML:ConditionalAction ========= -->
<!ELEMENT UML:ConditionalAction.clause (UML:Clause)*>
<!ELEMENT UML:ConditionalAction.isDeterminate EMPTY>
<!ATTLIST UML:ConditionalAction.isDeterminate xmi.value (true|false) #REQUIRED>
<!ENTITY % UML:ConditionalActionFeatures '%UML:ActionFeatures; |
   UML:ConditionalAction.clause |
   UML:ConditionalAction.isDeterminate'>
<!ENTITY % UML:ConditionalActionAtts '%UML:ActionAtts;
   isDeterminate (true|false) #IMPLIED'>
<!ELEMENT UML:ConditionalAction (%UML:ConditionalActionFeatures;)*>
<!ATTLIST UML:ConditionalAction %UML:ConditionalActionAtts;>

<!-- ========= UML:GroupAction ========= -->
<!ELEMENT UML:GroupAction.subaction (UML:Action|UML:CollectionAction|
   UML:FilterAction|UML:IterateAction|UML:MapAction|UML:ReduceAction|
   UML:ConditionalAction|UML:GroupAction|UML:LoopAction|UML:HandlerAction|
   UML:PrimitiveAction|UML:ApplyFunctionAction|UML:CodeAction|
   UML:LiteralValueAction|UML:MarshalAction|UML:NullAction|
   UML:TestIdentityAction|UML:UnmarshalAction|UML:JumpAction|
   UML:InvocationAction|UML:AsynchronousInvocationAction|
   UML:SynchronousInvocationAction|UML:ClearAssociationAction|UML:LinkAction|
   UML:ReadLinkAction|UML:WriteLinkAction|UML:CreateLinkAction|
   UML:CreateLinkObjectAction|UML:DestroyLinkAction|
   UML:ReadLinkObjectEndAction|UML:ReadLinkObjectQualifierAction|
   UML:AttributeAction|UML:ClearAttributeAction|UML:ReadAttributeAction|
   UML:WriteAttributeAction|UML:AddAttributeValueAction|
   UML:RemoveAttributeValueAction|UML:CreateObjectAction|
   UML:DestroyObjectAction|UML:ReadIsClassifiedObjectAction|
   UML:ReclassifyObjectAction|UML:ReadExtentAction|UML:ReadSelfAction|
   UML:StartObjectStateMachineAction|UML:VariableAction|
   UML:ClearVariableAction|UML:ReadVariableAction|UML:WriteVariableAction|
   UML:AddVariableValueAction|UML:RemoveVariableValueAction|
   UML:ExplicitInvocationActtion|UML:CallOperationAction|UML:SendSignalAction|
   UML:BroadcastSignalAction|UML:CallProcedureAction)*>
<!ELEMENT UML:GroupAction.variable (UML:Variable)*>
<!ELEMENT UML:GroupAction.mustIsolate EMPTY>
<!ATTLIST UML:GroupAction.mustIsolate xmi.value (true|false) #REQUIRED>
<!ENTITY % UML:GroupActionFeatures '%UML:ActionFeatures; |
   UML:GroupAction.subaction |
   UML:GroupAction.variable |
   UML:GroupAction.mustIsolate'>
<!ENTITY % UML:GroupActionAtts '%UML:ActionAtts;
   mustIsolate (true|false) #IMPLIED'>
<!ELEMENT UML:GroupAction (%UML:GroupActionFeatures;)*>
<!ATTLIST UML:GroupAction %UML:GroupActionAtts;>

<!-- ========= UML:LoopAction ========= -->
<!ELEMENT UML:LoopAction.clause (UML:Clause)*>
<!ELEMENT UML:LoopAction.loopVariable (UML:OutputPin)*>
<!ENTITY % UML:LoopActionFeatures '%UML:ActionFeatures; |
   UML:LoopAction.clause |
   UML:LoopAction.loopVariable'>
<!ENTITY % UML:LoopActionAtts '%UML:ActionAtts;'>
<!ELEMENT UML:LoopAction (%UML:LoopActionFeatures;)*>
<!ATTLIST UML:LoopAction %UML:LoopActionAtts;>

<!-- ========= UML:Variable ========= -->
<!ELEMENT UML:Variable.type (UML:Classifier)*>
<!ELEMENT UML:Variable.scope (UML:GroupAction)*>
<!ELEMENT UML:Variable.multiplicity (UML:Multiplicity)*>
<!ELEMENT UML:Variable.ordering EMPTY>
<!ATTLIST UML:Variable.ordering xmi.value %UML:OrderingKind; #REQUIRED>
<!ENTITY % UML:VariableFeatures '%UML:ModelElementFeatures; |
   UML:Variable.type |
   UML:Variable.scope |
   UML:Variable.multiplicity |
   UML:Variable.ordering'>
<!ENTITY % UML:VariableAtts '%UML:ModelElementAtts;
   type IDREFS #IMPLIED
   scope IDREFS #IMPLIED
   ordering %UML:OrderingKind; #IMPLIED'>
<!ELEMENT UML:Variable (%UML:VariableFeatures;)*>
<!ATTLIST UML:Variable %UML:VariableAtts;>

<!-- ========= UML:ApplyFunctionAction ========= -->
<!ELEMENT UML:ApplyFunctionAction.function (UML:PrimitiveFunction)*>
<!ENTITY % UML:ApplyFunctionActionFeatures '%UML:PrimitiveActionFeatures; |
   UML:ApplyFunctionAction.function'>
<!ENTITY % UML:ApplyFunctionActionAtts '%UML:PrimitiveActionAtts;
   function IDREFS #IMPLIED'>
<!ELEMENT UML:ApplyFunctionAction (%UML:ApplyFunctionActionFeatures;)*>
<!ATTLIST UML:ApplyFunctionAction %UML:ApplyFunctionActionAtts;>

<!-- ========= UML:ArgumentSpecification ========= -->
<!ELEMENT UML:ArgumentSpecification.type (UML:DataType)*>
<!ELEMENT UML:ArgumentSpecification.multiplicity (UML:Multiplicity)*>
<!ELEMENT UML:ArgumentSpecification.ordering EMPTY>
<!ATTLIST UML:ArgumentSpecification.ordering xmi.value %UML:OrderingKind; #REQUIRED>
<!ENTITY % UML:ArgumentSpecificationFeatures '%UML:ModelElementFeatures; |
   UML:ArgumentSpecification.type |
   UML:ArgumentSpecification.multiplicity |
   UML:ArgumentSpecification.ordering'>
<!ENTITY % UML:ArgumentSpecificationAtts '%UML:ModelElementAtts;
   type IDREFS #IMPLIED
   ordering %UML:OrderingKind; #IMPLIED'>
<!ELEMENT UML:ArgumentSpecification (%UML:ArgumentSpecificationFeatures;)*>
<!ATTLIST UML:ArgumentSpecification %UML:ArgumentSpecificationAtts;>

<!-- ========= UML:CodeAction ========= -->
<!ELEMENT UML:CodeAction.language (#PCDATA|XMI.reference)*>
<!ELEMENT UML:CodeAction.encoding (#PCDATA|XMI.reference)*>
<!ENTITY % UML:CodeActionFeatures '%UML:PrimitiveActionFeatures; |
   UML:CodeAction.language |
   UML:CodeAction.encoding'>
<!ENTITY % UML:CodeActionAtts '%UML:PrimitiveActionAtts;
   language CDATA #IMPLIED
   encoding CDATA #IMPLIED'>
<!ELEMENT UML:CodeAction (%UML:CodeActionFeatures;)*>
<!ATTLIST UML:CodeAction %UML:CodeActionAtts;>

<!-- ========= UML:LiteralValueAction ========= -->
<!ELEMENT UML:LiteralValueAction.value (UML:DataValue)*>
<!ENTITY % UML:LiteralValueActionFeatures '%UML:PrimitiveActionFeatures; |
   UML:LiteralValueAction.value'>
<!ENTITY % UML:LiteralValueActionAtts '%UML:PrimitiveActionAtts;
   value IDREFS #IMPLIED'>
<!ELEMENT UML:LiteralValueAction (%UML:LiteralValueActionFeatures;)*>
<!ATTLIST UML:LiteralValueAction %UML:LiteralValueActionAtts;>

<!-- ========= UML:MarshalAction ========= -->
<!ELEMENT UML:MarshalAction.marshalType (UML:Class)*>
<!ENTITY % UML:MarshalActionFeatures '%UML:PrimitiveActionFeatures; |
   UML:MarshalAction.marshalType'>
<!ENTITY % UML:MarshalActionAtts '%UML:PrimitiveActionAtts;
   marshalType IDREFS #IMPLIED'>
<!ELEMENT UML:MarshalAction (%UML:MarshalActionFeatures;)*>
<!ATTLIST UML:MarshalAction %UML:MarshalActionAtts;>

<!-- ========= UML:NullAction ========= -->
<!ENTITY % UML:NullActionFeatures '%UML:PrimitiveActionFeatures;'>
<!ENTITY % UML:NullActionAtts '%UML:PrimitiveActionAtts;'>
<!ELEMENT UML:NullAction (%UML:NullActionFeatures;)*>
<!ATTLIST UML:NullAction %UML:NullActionAtts;>

<!-- ========= UML:PrimitiveFunction ========= -->
<!ELEMENT UML:PrimitiveFunction.inputSpec (UML:ArgumentSpecification)*>
<!ELEMENT UML:PrimitiveFunction.outputSpec (UML:ArgumentSpecification)*>
<!ELEMENT UML:PrimitiveFunction.language (#PCDATA|XMI.reference)*>
<!ELEMENT UML:PrimitiveFunction.encoding (#PCDATA|XMI.reference)*>
<!ENTITY % UML:PrimitiveFunctionFeatures '%UML:ModelElementFeatures; |
   UML:PrimitiveFunction.inputSpec |
   UML:PrimitiveFunction.outputSpec |
   UML:PrimitiveFunction.language |
   UML:PrimitiveFunction.encoding'>
<!ENTITY % UML:PrimitiveFunctionAtts '%UML:ModelElementAtts;
   inputSpec IDREFS #IMPLIED
   outputSpec IDREFS #IMPLIED
   language CDATA #IMPLIED
   encoding CDATA #IMPLIED'>
<!ELEMENT UML:PrimitiveFunction (%UML:PrimitiveFunctionFeatures;)*>
<!ATTLIST UML:PrimitiveFunction %UML:PrimitiveFunctionAtts;>

<!-- ========= UML:TestIdentityAction ========= -->
<!ENTITY % UML:TestIdentityActionFeatures '%UML:PrimitiveActionFeatures;'>
<!ENTITY % UML:TestIdentityActionAtts '%UML:PrimitiveActionAtts;'>
<!ELEMENT UML:TestIdentityAction (%UML:TestIdentityActionFeatures;)*>
<!ATTLIST UML:TestIdentityAction %UML:TestIdentityActionAtts;>

<!-- ========= UML:UnmarshalAction ========= -->
<!ELEMENT UML:UnmarshalAction.unmarshalType (UML:Class)*>
<!ENTITY % UML:UnmarshalActionFeatures '%UML:PrimitiveActionFeatures; |
   UML:UnmarshalAction.unmarshalType'>
<!ENTITY % UML:UnmarshalActionAtts '%UML:PrimitiveActionAtts;
   unmarshalType IDREFS #IMPLIED'>
<!ELEMENT UML:UnmarshalAction (%UML:UnmarshalActionFeatures;)*>
<!ATTLIST UML:UnmarshalAction %UML:UnmarshalActionAtts;>

<!-- ========= UML:JumpHandler ========= -->
<!ELEMENT UML:JumpHandler.protectedAction (UML:Action)*>
<!ELEMENT UML:JumpHandler.jumpType (UML:Classifier)*>
<!ELEMENT UML:JumpHandler.body (UML:HandlerAction)*>
<!ENTITY % UML:JumpHandlerFeatures 'XMI.extension |
   UML:JumpHandler.protectedAction |
   UML:JumpHandler.jumpType |
   UML:JumpHandler.body'>
<!ENTITY % UML:JumpHandlerAtts '%XMI.element.att; %XMI.link.att;
   protectedAction IDREFS #IMPLIED
   jumpType IDREFS #IMPLIED
   body IDREFS #IMPLIED'>
<!ELEMENT UML:JumpHandler (%UML:JumpHandlerFeatures;)*>
<!ATTLIST UML:JumpHandler %UML:JumpHandlerAtts;>

<!-- ========= UML:HandlerAction ========= -->
<!ELEMENT UML:HandlerAction.handlerOutput (UML:OutputPin)*>
<!ELEMENT UML:HandlerAction.body (UML:Action|UML:CollectionAction|
   UML:FilterAction|UML:IterateAction|UML:MapAction|UML:ReduceAction|
   UML:ConditionalAction|UML:GroupAction|UML:LoopAction|UML:HandlerAction|
   UML:PrimitiveAction|UML:ApplyFunctionAction|UML:CodeAction|
   UML:LiteralValueAction|UML:MarshalAction|UML:NullAction|
   UML:TestIdentityAction|UML:UnmarshalAction|UML:JumpAction|
   UML:InvocationAction|UML:AsynchronousInvocationAction|
   UML:SynchronousInvocationAction|UML:ClearAssociationAction|UML:LinkAction|
   UML:ReadLinkAction|UML:WriteLinkAction|UML:CreateLinkAction|
   UML:CreateLinkObjectAction|UML:DestroyLinkAction|
   UML:ReadLinkObjectEndAction|UML:ReadLinkObjectQualifierAction|
   UML:AttributeAction|UML:ClearAttributeAction|UML:ReadAttributeAction|
   UML:WriteAttributeAction|UML:AddAttributeValueAction|
   UML:RemoveAttributeValueAction|UML:CreateObjectAction|
   UML:DestroyObjectAction|UML:ReadIsClassifiedObjectAction|
   UML:ReclassifyObjectAction|UML:ReadExtentAction|UML:ReadSelfAction|
   UML:StartObjectStateMachineAction|UML:VariableAction|
   UML:ClearVariableAction|UML:ReadVariableAction|UML:WriteVariableAction|
   UML:AddVariableValueAction|UML:RemoveVariableValueAction|
   UML:ExplicitInvocationActtion|UML:CallOperationAction|UML:SendSignalAction|
   UML:BroadcastSignalAction|UML:CallProcedureAction)*>
<!ENTITY % UML:HandlerActionFeatures '%UML:ActionFeatures; |
   UML:HandlerAction.handlerOutput |
   UML:HandlerAction.body'>
<!ENTITY % UML:HandlerActionAtts '%UML:ActionAtts;
   handlerOutput IDREFS #IMPLIED'>
<!ELEMENT UML:HandlerAction (%UML:HandlerActionFeatures;)*>
<!ATTLIST UML:HandlerAction %UML:HandlerActionAtts;>

<!-- ========= UML:JumpAction ========= -->
<!ELEMENT UML:JumpAction.exception (UML:Exception)*>
<!ENTITY % UML:JumpActionFeatures '%UML:PrimitiveActionFeatures; |
   UML:JumpAction.exception'>
<!ENTITY % UML:JumpActionAtts '%UML:PrimitiveActionAtts;
   exception IDREFS #IMPLIED'>
<!ELEMENT UML:JumpAction (%UML:JumpActionFeatures;)*>
<!ATTLIST UML:JumpAction %UML:JumpActionAtts;>

<!-- ========= UML:InvocationAction ========= -->
<!ENTITY % UML:InvocationActionFeatures '%UML:PrimitiveActionFeatures;'>
<!ENTITY % UML:InvocationActionAtts '%UML:PrimitiveActionAtts;'>
<!ELEMENT UML:InvocationAction (%UML:InvocationActionFeatures;)*>
<!ATTLIST UML:InvocationAction %UML:InvocationActionAtts;>

<!-- ========= UML:AsynchronousInvocationAction ========= -->
<!ELEMENT UML:AsynchronousInvocationAction.isRepliable EMPTY>
<!ATTLIST UML:AsynchronousInvocationAction.isRepliable xmi.value (true|false) #REQUIRED>
<!ENTITY % UML:AsynchronousInvocationActionFeatures '%UML:InvocationActionFeatures; |
   UML:AsynchronousInvocationAction.isRepliable'>
<!ENTITY % UML:AsynchronousInvocationActionAtts '%UML:InvocationActionAtts;
   isRepliable (true|false) #IMPLIED'>
<!ELEMENT UML:AsynchronousInvocationAction (%UML:AsynchronousInvocationActionFeatures;)*>
<!ATTLIST UML:AsynchronousInvocationAction %UML:AsynchronousInvocationActionAtts;>

<!-- ========= UML:ExplicitInvocationActtion ========= -->
<!ENTITY % UML:ExplicitInvocationActtionFeatures '%UML:PrimitiveActionFeatures;'>
<!ENTITY % UML:ExplicitInvocationActtionAtts '%UML:PrimitiveActionAtts;'>
<!ELEMENT UML:ExplicitInvocationActtion (%UML:ExplicitInvocationActtionFeatures;)*>
<!ATTLIST UML:ExplicitInvocationActtion %UML:ExplicitInvocationActtionAtts;>

<!-- ========= UML:CallOperationAction ========= -->
<!ELEMENT UML:CallOperationAction.operation (UML:Operation)*>
<!ELEMENT UML:CallOperationAction.isAsynchronous EMPTY>
<!ATTLIST UML:CallOperationAction.isAsynchronous xmi.value (true|false) #REQUIRED>
<!ENTITY % UML:CallOperationActionFeatures '%UML:ExplicitInvocationActtionFeatures; |
   UML:CallOperationAction.operation |
   UML:CallOperationAction.isAsynchronous'>
<!ENTITY % UML:CallOperationActionAtts '%UML:ExplicitInvocationActtionAtts;
   operation IDREFS #IMPLIED
   isAsynchronous (true|false) #IMPLIED'>
<!ELEMENT UML:CallOperationAction (%UML:CallOperationActionFeatures;)*>
<!ATTLIST UML:CallOperationAction %UML:CallOperationActionAtts;>

<!-- ========= UML:SynchronousInvocationAction ========= -->
<!ENTITY % UML:SynchronousInvocationActionFeatures '%UML:InvocationActionFeatures;'>
<!ENTITY % UML:SynchronousInvocationActionAtts '%UML:InvocationActionAtts;'>
<!ELEMENT UML:SynchronousInvocationAction (%UML:SynchronousInvocationActionFeatures;)*>
<!ATTLIST UML:SynchronousInvocationAction %UML:SynchronousInvocationActionAtts;>

<!-- ========= UML:ClearAssociationAction ========= -->
<!ELEMENT UML:ClearAssociationAction.association (UML:Association)*>
<!ENTITY % UML:ClearAssociationActionFeatures '%UML:PrimitiveActionFeatures; |
   UML:ClearAssociationAction.association'>
<!ENTITY % UML:ClearAssociationActionAtts '%UML:PrimitiveActionAtts;
   association IDREFS #IMPLIED'>
<!ELEMENT UML:ClearAssociationAction (%UML:ClearAssociationActionFeatures;)*>
<!ATTLIST UML:ClearAssociationAction %UML:ClearAssociationActionAtts;>

<!-- ========= UML:LinkAction ========= -->
<!ELEMENT UML:LinkAction.endData (UML:LinkEndData|UML:LinkEndCreationData)*>
<!ENTITY % UML:LinkActionFeatures '%UML:PrimitiveActionFeatures; |
   UML:LinkAction.endData'>
<!ENTITY % UML:LinkActionAtts '%UML:PrimitiveActionAtts;'>
<!ELEMENT UML:LinkAction (%UML:LinkActionFeatures;)*>
<!ATTLIST UML:LinkAction %UML:LinkActionAtts;>

<!-- ========= UML:WriteLinkAction ========= -->
<!ENTITY % UML:WriteLinkActionFeatures '%UML:LinkActionFeatures;'>
<!ENTITY % UML:WriteLinkActionAtts '%UML:LinkActionAtts;'>
<!ELEMENT UML:WriteLinkAction (%UML:WriteLinkActionFeatures;)*>
<!ATTLIST UML:WriteLinkAction %UML:WriteLinkActionAtts;>

<!-- ========= UML:CreateLinkAction ========= -->
<!ENTITY % UML:CreateLinkActionFeatures '%UML:WriteLinkActionFeatures;'>
<!ENTITY % UML:CreateLinkActionAtts '%UML:WriteLinkActionAtts;'>
<!ELEMENT UML:CreateLinkAction (%UML:CreateLinkActionFeatures;)*>
<!ATTLIST UML:CreateLinkAction %UML:CreateLinkActionAtts;>

<!-- ========= UML:CreateLinkObjectAction ========= -->
<!ENTITY % UML:CreateLinkObjectActionFeatures '%UML:CreateLinkActionFeatures;'>
<!ENTITY % UML:CreateLinkObjectActionAtts '%UML:CreateLinkActionAtts;'>
<!ELEMENT UML:CreateLinkObjectAction (%UML:CreateLinkObjectActionFeatures;)*>
<!ATTLIST UML:CreateLinkObjectAction %UML:CreateLinkObjectActionAtts;>

<!-- ========= UML:DestroyLinkAction ========= -->
<!ENTITY % UML:DestroyLinkActionFeatures '%UML:WriteLinkActionFeatures;'>
<!ENTITY % UML:DestroyLinkActionAtts '%UML:WriteLinkActionAtts;'>
<!ELEMENT UML:DestroyLinkAction (%UML:DestroyLinkActionFeatures;)*>
<!ATTLIST UML:DestroyLinkAction %UML:DestroyLinkActionAtts;>

<!-- ========= UML:LinkEndData ========= -->
<!ELEMENT UML:LinkEndData.end (UML:AssociationEnd)*>
<!ELEMENT UML:LinkEndData.qualifier (UML:QualifierValue)*>
<!ENTITY % UML:LinkEndDataFeatures 'XMI.extension |
   UML:LinkEndData.end |
   UML:LinkEndData.qualifier'>
<!ENTITY % UML:LinkEndDataAtts '%XMI.element.att; %XMI.link.att;
   end IDREFS #IMPLIED'>
<!ELEMENT UML:LinkEndData (%UML:LinkEndDataFeatures;)*>
<!ATTLIST UML:LinkEndData %UML:LinkEndDataAtts;>

<!-- ========= UML:LinkEndCreationData ========= -->
<!ELEMENT UML:LinkEndCreationData.isReplaceAll EMPTY>
<!ATTLIST UML:LinkEndCreationData.isReplaceAll xmi.value (true|false) #REQUIRED>
<!ENTITY % UML:LinkEndCreationDataFeatures '%UML:LinkEndDataFeatures; |
   UML:LinkEndCreationData.isReplaceAll'>
<!ENTITY % UML:LinkEndCreationDataAtts '%UML:LinkEndDataAtts;
   isReplaceAll (true|false) #IMPLIED'>
<!ELEMENT UML:LinkEndCreationData (%UML:LinkEndCreationDataFeatures;)*>
<!ATTLIST UML:LinkEndCreationData %UML:LinkEndCreationDataAtts;>

<!-- ========= UML:QualifierValue ========= -->
<!ELEMENT UML:QualifierValue.qualifier (UML:Attribute)*>
<!ENTITY % UML:QualifierValueFeatures 'XMI.extension |
   UML:QualifierValue.qualifier'>
<!ENTITY % UML:QualifierValueAtts '%XMI.element.att; %XMI.link.att;
   qualifier IDREFS #IMPLIED'>
<!ELEMENT UML:QualifierValue (%UML:QualifierValueFeatures;)*>
<!ATTLIST UML:QualifierValue %UML:QualifierValueAtts;>

<!-- ========= UML:ReadLinkAction ========= -->
<!ENTITY % UML:ReadLinkActionFeatures '%UML:LinkActionFeatures;'>
<!ENTITY % UML:ReadLinkActionAtts '%UML:LinkActionAtts;'>
<!ELEMENT UML:ReadLinkAction (%UML:ReadLinkActionFeatures;)*>
<!ATTLIST UML:ReadLinkAction %UML:ReadLinkActionAtts;>

<!-- ========= UML:ReadLinkObjectEndAction ========= -->
<!ELEMENT UML:ReadLinkObjectEndAction.end (UML:AssociationEnd)*>
<!ENTITY % UML:ReadLinkObjectEndActionFeatures '%UML:PrimitiveActionFeatures; |
   UML:ReadLinkObjectEndAction.end'>
<!ENTITY % UML:ReadLinkObjectEndActionAtts '%UML:PrimitiveActionAtts;
   end IDREFS #IMPLIED'>
<!ELEMENT UML:ReadLinkObjectEndAction (%UML:ReadLinkObjectEndActionFeatures;)*>
<!ATTLIST UML:ReadLinkObjectEndAction %UML:ReadLinkObjectEndActionAtts;>

<!-- ========= UML:ReadLinkObjectQualifierAction ========= -->
<!ELEMENT UML:ReadLinkObjectQualifierAction.qualifier (UML:Attribute)*>
<!ENTITY % UML:ReadLinkObjectQualifierActionFeatures '%UML:PrimitiveActionFeatures; |
   UML:ReadLinkObjectQualifierAction.qualifier'>
<!ENTITY % UML:ReadLinkObjectQualifierActionAtts '%UML:PrimitiveActionAtts;
   qualifier IDREFS #IMPLIED'>
<!ELEMENT UML:ReadLinkObjectQualifierAction (%UML:ReadLinkObjectQualifierActionFeatures;)*>
<!ATTLIST UML:ReadLinkObjectQualifierAction %UML:ReadLinkObjectQualifierActionAtts;>

<!-- ========= UML:AttributeAction ========= -->
<!ELEMENT UML:AttributeAction.attribute (UML:Attribute)*>
<!ENTITY % UML:AttributeActionFeatures '%UML:PrimitiveActionFeatures; |
   UML:AttributeAction.attribute'>
<!ENTITY % UML:AttributeActionAtts '%UML:PrimitiveActionAtts;
   attribute IDREFS #IMPLIED'>
<!ELEMENT UML:AttributeAction (%UML:AttributeActionFeatures;)*>
<!ATTLIST UML:AttributeAction %UML:AttributeActionAtts;>

<!-- ========= UML:WriteAttributeAction ========= -->
<!ENTITY % UML:WriteAttributeActionFeatures '%UML:AttributeActionFeatures;'>
<!ENTITY % UML:WriteAttributeActionAtts '%UML:AttributeActionAtts;'>
<!ELEMENT UML:WriteAttributeAction (%UML:WriteAttributeActionFeatures;)*>
<!ATTLIST UML:WriteAttributeAction %UML:WriteAttributeActionAtts;>

<!-- ========= UML:AddAttributeValueAction ========= -->
<!ELEMENT UML:AddAttributeValueAction.isReplaceAll EMPTY>
<!ATTLIST UML:AddAttributeValueAction.isReplaceAll xmi.value (true|false) #REQUIRED>
<!ENTITY % UML:AddAttributeValueActionFeatures '%UML:WriteAttributeActionFeatures; |
   UML:AddAttributeValueAction.isReplaceAll'>
<!ENTITY % UML:AddAttributeValueActionAtts '%UML:WriteAttributeActionAtts;
   isReplaceAll (true|false) #IMPLIED'>
<!ELEMENT UML:AddAttributeValueAction (%UML:AddAttributeValueActionFeatures;)*>
<!ATTLIST UML:AddAttributeValueAction %UML:AddAttributeValueActionAtts;>

<!-- ========= UML:ClearAttributeAction ========= -->
<!ENTITY % UML:ClearAttributeActionFeatures '%UML:AttributeActionFeatures;'>
<!ENTITY % UML:ClearAttributeActionAtts '%UML:AttributeActionAtts;'>
<!ELEMENT UML:ClearAttributeAction (%UML:ClearAttributeActionFeatures;)*>
<!ATTLIST UML:ClearAttributeAction %UML:ClearAttributeActionAtts;>

<!-- ========= UML:ReadAttributeAction ========= -->
<!ENTITY % UML:ReadAttributeActionFeatures '%UML:AttributeActionFeatures;'>
<!ENTITY % UML:ReadAttributeActionAtts '%UML:AttributeActionAtts;'>
<!ELEMENT UML:ReadAttributeAction (%UML:ReadAttributeActionFeatures;)*>
<!ATTLIST UML:ReadAttributeAction %UML:ReadAttributeActionAtts;>

<!-- ========= UML:RemoveAttributeValueAction ========= -->
<!ENTITY % UML:RemoveAttributeValueActionFeatures '%UML:WriteAttributeActionFeatures;'>
<!ENTITY % UML:RemoveAttributeValueActionAtts '%UML:WriteAttributeActionAtts;'>
<!ELEMENT UML:RemoveAttributeValueAction (%UML:RemoveAttributeValueActionFeatures;)*>
<!ATTLIST UML:RemoveAttributeValueAction %UML:RemoveAttributeValueActionAtts;>

<!-- ========= UML:CreateObjectAction ========= -->
<!ELEMENT UML:CreateObjectAction.classifier (UML:Classifier)*>
<!ENTITY % UML:CreateObjectActionFeatures '%UML:PrimitiveActionFeatures; |
   UML:CreateObjectAction.classifier'>
<!ENTITY % UML:CreateObjectActionAtts '%UML:PrimitiveActionAtts;
   classifier IDREFS #IMPLIED'>
<!ELEMENT UML:CreateObjectAction (%UML:CreateObjectActionFeatures;)*>
<!ATTLIST UML:CreateObjectAction %UML:CreateObjectActionAtts;>

<!-- ========= UML:DestroyObjectAction ========= -->
<!ENTITY % UML:DestroyObjectActionFeatures '%UML:PrimitiveActionFeatures;'>
<!ENTITY % UML:DestroyObjectActionAtts '%UML:PrimitiveActionAtts;'>
<!ELEMENT UML:DestroyObjectAction (%UML:DestroyObjectActionFeatures;)*>
<!ATTLIST UML:DestroyObjectAction %UML:DestroyObjectActionAtts;>

<!-- ========= UML:ReadIsClassifiedObjectAction ========= -->
<!ELEMENT UML:ReadIsClassifiedObjectAction.classifier (UML:Classifier)*>
<!ELEMENT UML:ReadIsClassifiedObjectAction.isDirect EMPTY>
<!ATTLIST UML:ReadIsClassifiedObjectAction.isDirect xmi.value (true|false) #REQUIRED>
<!ENTITY % UML:ReadIsClassifiedObjectActionFeatures '%UML:PrimitiveActionFeatures; |
   UML:ReadIsClassifiedObjectAction.classifier |
   UML:ReadIsClassifiedObjectAction.isDirect'>
<!ENTITY % UML:ReadIsClassifiedObjectActionAtts '%UML:PrimitiveActionAtts;
   classifier IDREFS #IMPLIED
   isDirect (true|false) #IMPLIED'>
<!ELEMENT UML:ReadIsClassifiedObjectAction (%UML:ReadIsClassifiedObjectActionFeatures;)*>
<!ATTLIST UML:ReadIsClassifiedObjectAction %UML:ReadIsClassifiedObjectActionAtts;>

<!-- ========= UML:ReclassifyObjectAction ========= -->
<!ELEMENT UML:ReclassifyObjectAction.oldClassifier (UML:Classifier)*>
<!ELEMENT UML:ReclassifyObjectAction.newClassifier (UML:Classifier)*>
<!ELEMENT UML:ReclassifyObjectAction.isReplaceAll EMPTY>
<!ATTLIST UML:ReclassifyObjectAction.isReplaceAll xmi.value (true|false) #REQUIRED>
<!ENTITY % UML:ReclassifyObjectActionFeatures '%UML:PrimitiveActionFeatures; |
   UML:ReclassifyObjectAction.oldClassifier |
   UML:ReclassifyObjectAction.newClassifier |
   UML:ReclassifyObjectAction.isReplaceAll'>
<!ENTITY % UML:ReclassifyObjectActionAtts '%UML:PrimitiveActionAtts;
   oldClassifier IDREFS #IMPLIED
   newClassifier IDREFS #IMPLIED
   isReplaceAll (true|false) #IMPLIED'>
<!ELEMENT UML:ReclassifyObjectAction (%UML:ReclassifyObjectActionFeatures;)*>
<!ATTLIST UML:ReclassifyObjectAction %UML:ReclassifyObjectActionAtts;>

<!-- ========= UML:ReadExtentAction ========= -->
<!ELEMENT UML:ReadExtentAction.classifier (UML:Classifier)*>
<!ENTITY % UML:ReadExtentActionFeatures '%UML:PrimitiveActionFeatures; |
   UML:ReadExtentAction.classifier'>
<!ENTITY % UML:ReadExtentActionAtts '%UML:PrimitiveActionAtts;
   classifier IDREFS #IMPLIED'>
<!ELEMENT UML:ReadExtentAction (%UML:ReadExtentActionFeatures;)*>
<!ATTLIST UML:ReadExtentAction %UML:ReadExtentActionAtts;>

<!-- ========= UML:ReadSelfAction ========= -->
<!ENTITY % UML:ReadSelfActionFeatures '%UML:PrimitiveActionFeatures;'>
<!ENTITY % UML:ReadSelfActionAtts '%UML:PrimitiveActionAtts;'>
<!ELEMENT UML:ReadSelfAction (%UML:ReadSelfActionFeatures;)*>
<!ATTLIST UML:ReadSelfAction %UML:ReadSelfActionAtts;>

<!-- ========= UML:StartObjectStateMachineAction ========= -->
<!ENTITY % UML:StartObjectStateMachineActionFeatures '%UML:PrimitiveActionFeatures;'>
<!ENTITY % UML:StartObjectStateMachineActionAtts '%UML:PrimitiveActionAtts;'>
<!ELEMENT UML:StartObjectStateMachineAction (%UML:StartObjectStateMachineActionFeatures;)*>
<!ATTLIST UML:StartObjectStateMachineAction %UML:StartObjectStateMachineActionAtts;>

<!-- ========= UML:VariableAction ========= -->
<!ELEMENT UML:VariableAction.variable (UML:Variable)*>
<!ENTITY % UML:VariableActionFeatures '%UML:PrimitiveActionFeatures; |
   UML:VariableAction.variable'>
<!ENTITY % UML:VariableActionAtts '%UML:PrimitiveActionAtts;
   variable IDREFS #IMPLIED'>
<!ELEMENT UML:VariableAction (%UML:VariableActionFeatures;)*>
<!ATTLIST UML:VariableAction %UML:VariableActionAtts;>

<!-- ========= UML:WriteVariableAction ========= -->
<!ENTITY % UML:WriteVariableActionFeatures '%UML:VariableActionFeatures;'>
<!ENTITY % UML:WriteVariableActionAtts '%UML:VariableActionAtts;'>
<!ELEMENT UML:WriteVariableAction (%UML:WriteVariableActionFeatures;)*>
<!ATTLIST UML:WriteVariableAction %UML:WriteVariableActionAtts;>

<!-- ========= UML:AddVariableValueAction ========= -->
<!ELEMENT UML:AddVariableValueAction.isReplaceAll EMPTY>
<!ATTLIST UML:AddVariableValueAction.isReplaceAll xmi.value (true|false) #REQUIRED>
<!ENTITY % UML:AddVariableValueActionFeatures '%UML:WriteVariableActionFeatures; |
   UML:AddVariableValueAction.isReplaceAll'>
<!ENTITY % UML:AddVariableValueActionAtts '%UML:WriteVariableActionAtts;
   isReplaceAll (true|false) #IMPLIED'>
<!ELEMENT UML:AddVariableValueAction (%UML:AddVariableValueActionFeatures;)*>
<!ATTLIST UML:AddVariableValueAction %UML:AddVariableValueActionAtts;>

<!-- ========= UML:ClearVariableAction ========= -->
<!ENTITY % UML:ClearVariableActionFeatures '%UML:VariableActionFeatures;'>
<!ENTITY % UML:ClearVariableActionAtts '%UML:VariableActionAtts;'>
<!ELEMENT UML:ClearVariableAction (%UML:ClearVariableActionFeatures;)*>
<!ATTLIST UML:ClearVariableAction %UML:ClearVariableActionAtts;>

<!-- ========= UML:ReadVariableAction ========= -->
<!ENTITY % UML:ReadVariableActionFeatures '%UML:VariableActionFeatures;'>
<!ENTITY % UML:ReadVariableActionAtts '%UML:VariableActionAtts;'>
<!ELEMENT UML:ReadVariableAction (%UML:ReadVariableActionFeatures;)*>
<!ATTLIST UML:ReadVariableAction %UML:ReadVariableActionAtts;>

<!-- ========= UML:RemoveVariableValueAction ========= -->
<!ENTITY % UML:RemoveVariableValueActionFeatures '%UML:WriteVariableActionFeatures;'>
<!ENTITY % UML:RemoveVariableValueActionAtts '%UML:WriteVariableActionAtts;'>
<!ELEMENT UML:RemoveVariableValueAction (%UML:RemoveVariableValueActionFeatures;)*>
<!ATTLIST UML:RemoveVariableValueAction %UML:RemoveVariableValueActionAtts;>

<!-- ========= UML:SendSignalAction ========= -->
<!ELEMENT UML:SendSignalAction.signal (UML:Signal)*>
<!ENTITY % UML:SendSignalActionFeatures '%UML:ExplicitInvocationActtionFeatures; |
   UML:SendSignalAction.signal'>
<!ENTITY % UML:SendSignalActionAtts '%UML:ExplicitInvocationActtionAtts;
   signal IDREFS #IMPLIED'>
<!ELEMENT UML:SendSignalAction (%UML:SendSignalActionFeatures;)*>
<!ATTLIST UML:SendSignalAction %UML:SendSignalActionAtts;>

<!-- ========= UML:BroadcastSignalAction ========= -->
<!ELEMENT UML:BroadcastSignalAction.signal (UML:Signal)*>
<!ENTITY % UML:BroadcastSignalActionFeatures '%UML:ExplicitInvocationActtionFeatures; |
   UML:BroadcastSignalAction.signal'>
<!ENTITY % UML:BroadcastSignalActionAtts '%UML:ExplicitInvocationActtionAtts;
   signal IDREFS #IMPLIED'>
<!ELEMENT UML:BroadcastSignalAction (%UML:BroadcastSignalActionFeatures;)*>
<!ATTLIST UML:BroadcastSignalAction %UML:BroadcastSignalActionAtts;>

<!-- ========= UML:CallProcedureAction ========= -->
<!ELEMENT UML:CallProcedureAction.calledProcedure (UML:Procedure)*>
<!ELEMENT UML:CallProcedureAction.isSynchronous EMPTY>
<!ATTLIST UML:CallProcedureAction.isSynchronous xmi.value (true|false) #REQUIRED>
<!ENTITY % UML:CallProcedureActionFeatures '%UML:PrimitiveActionFeatures; |
   UML:CallProcedureAction.calledProcedure |
   UML:CallProcedureAction.isSynchronous'>
<!ENTITY % UML:CallProcedureActionAtts '%UML:PrimitiveActionAtts;
   calledProcedure IDREFS #IMPLIED
   isSynchronous (true|false) #IMPLIED'>
<!ELEMENT UML:CallProcedureAction (%UML:CallProcedureActionFeatures;)*>
<!ATTLIST UML:CallProcedureAction %UML:CallProcedureActionAtts;>

<!-- ========= UML:State_Machines ========= -->

<!-- ========= UML:StateMachine ========= -->
<!ELEMENT UML:StateMachine.context (UML:ModelElement)*>
<!ELEMENT UML:StateMachine.top (UML:State|UML:CompositeState|
   UML:SubmachineState|UML:SubactivityState|UML:SimpleState|UML:ActionState|
   UML:CallState|UML:ObjectFlowState|UML:FinalState)*>
<!ELEMENT UML:StateMachine.transitions (UML:Transition)*>
<!ELEMENT UML:StateMachine.submachineState (UML:SubmachineState)*>
<!ENTITY % UML:StateMachineFeatures '%UML:ModelElementFeatures; |
   UML:StateMachine.context |
   UML:StateMachine.top |
   UML:StateMachine.transitions |
   UML:StateMachine.submachineState'>
<!ENTITY % UML:StateMachineAtts '%UML:ModelElementAtts;
   context IDREFS #IMPLIED
   submachineState IDREFS #IMPLIED'>
<!ELEMENT UML:StateMachine (%UML:StateMachineFeatures;)*>
<!ATTLIST UML:StateMachine %UML:StateMachineAtts;>

<!-- ========= UML:Event ========= -->
<!ELEMENT UML:Event.parameter (UML:Parameter)*>
<!ENTITY % UML:EventFeatures '%UML:ModelElementFeatures; |
   UML:Event.parameter'>
<!ENTITY % UML:EventAtts '%UML:ModelElementAtts;'>
<!ELEMENT UML:Event (%UML:EventFeatures;)*>
<!ATTLIST UML:Event %UML:EventAtts;>

<!-- ========= UML:StateVertex ========= -->
<!ELEMENT UML:StateVertex.container (UML:CompositeState)*>
<!ELEMENT UML:StateVertex.outgoing (UML:Transition)*>
<!ELEMENT UML:StateVertex.incoming (UML:Transition)*>
<!ENTITY % UML:StateVertexFeatures '%UML:ModelElementFeatures; |
   UML:StateVertex.container |
   UML:StateVertex.outgoing |
   UML:StateVertex.incoming'>
<!ENTITY % UML:StateVertexAtts '%UML:ModelElementAtts;
   container IDREFS #IMPLIED
   outgoing IDREFS #IMPLIED
   incoming IDREFS #IMPLIED'>
<!ELEMENT UML:StateVertex (%UML:StateVertexFeatures;)*>
<!ATTLIST UML:StateVertex %UML:StateVertexAtts;>

<!-- ========= UML:State ========= -->
<!ELEMENT UML:State.entry (UML:Procedure)*>
<!ELEMENT UML:State.exit (UML:Procedure)*>
<!ELEMENT UML:State.deferrableEvent (UML:Event)*>
<!ELEMENT UML:State.internalTransition (UML:Transition)*>
<!ELEMENT UML:State.doActivity (UML:Procedure)*>
<!ELEMENT UML:State.stateMachine (UML:StateMachine)*>
<!ENTITY % UML:StateFeatures '%UML:StateVertexFeatures; |
   UML:State.entry |
   UML:State.exit |
   UML:State.deferrableEvent |
   UML:State.internalTransition |
   UML:State.doActivity |
   UML:State.stateMachine'>
<!ENTITY % UML:StateAtts '%UML:StateVertexAtts;
   deferrableEvent IDREFS #IMPLIED
   stateMachine IDREFS #IMPLIED'>
<!ELEMENT UML:State (%UML:StateFeatures;)*>
<!ATTLIST UML:State %UML:StateAtts;>

<!-- ========= UML:TimeEvent ========= -->
<!ELEMENT UML:TimeEvent.when (UML:TimeExpression)*>
<!ENTITY % UML:TimeEventFeatures '%UML:EventFeatures; |
   UML:TimeEvent.when'>
<!ENTITY % UML:TimeEventAtts '%UML:EventAtts;'>
<!ELEMENT UML:TimeEvent (%UML:TimeEventFeatures;)*>
<!ATTLIST UML:TimeEvent %UML:TimeEventAtts;>

<!-- ========= UML:CallEvent ========= -->
<!ELEMENT UML:CallEvent.operation (UML:Operation)*>
<!ENTITY % UML:CallEventFeatures '%UML:EventFeatures; |
   UML:CallEvent.operation'>
<!ENTITY % UML:CallEventAtts '%UML:EventAtts;
   operation IDREFS #IMPLIED'>
<!ELEMENT UML:CallEvent (%UML:CallEventFeatures;)*>
<!ATTLIST UML:CallEvent %UML:CallEventAtts;>

<!-- ========= UML:SignalEvent ========= -->
<!ELEMENT UML:SignalEvent.signal (UML:Signal)*>
<!ENTITY % UML:SignalEventFeatures '%UML:EventFeatures; |
   UML:SignalEvent.signal'>
<!ENTITY % UML:SignalEventAtts '%UML:EventAtts;
   signal IDREFS #IMPLIED'>
<!ELEMENT UML:SignalEvent (%UML:SignalEventFeatures;)*>
<!ATTLIST UML:SignalEvent %UML:SignalEventAtts;>

<!-- ========= UML:Transition ========= -->
<!ELEMENT UML:Transition.guard (UML:Guard)*>
<!ELEMENT UML:Transition.effect (UML:Procedure)*>
<!ELEMENT UML:Transition.trigger (UML:Event)*>
<!ELEMENT UML:Transition.source (UML:StateVertex)*>
<!ELEMENT UML:Transition.target (UML:StateVertex)*>
<!ELEMENT UML:Transition.stateMachine (UML:StateMachine)*>
<!ENTITY % UML:TransitionFeatures '%UML:ModelElementFeatures; |
   UML:Transition.guard |
   UML:Transition.effect |
   UML:Transition.trigger |
   UML:Transition.source |
   UML:Transition.target |
   UML:Transition.stateMachine'>
<!ENTITY % UML:TransitionAtts '%UML:ModelElementAtts;
   trigger IDREFS #IMPLIED
   source IDREFS #IMPLIED
   target IDREFS #IMPLIED
   stateMachine IDREFS #IMPLIED'>
<!ELEMENT UML:Transition (%UML:TransitionFeatures;)*>
<!ATTLIST UML:Transition %UML:TransitionAtts;>

<!-- ========= UML:CompositeState ========= -->
<!ELEMENT UML:CompositeState.isConcurrent EMPTY>
<!ATTLIST UML:CompositeState.isConcurrent xmi.value (true|false) #REQUIRED>
<!ELEMENT UML:CompositeState.subvertex (UML:StateVertex|UML:State|
   UML:CompositeState|UML:SubmachineState|UML:SubactivityState|
   UML:SimpleState|UML:ActionState|UML:CallState|UML:ObjectFlowState|
   UML:FinalState|UML:Pseudostate|UML:SynchState|UML:StubState)*>
<!ENTITY % UML:CompositeStateFeatures '%UML:StateFeatures; |
   UML:CompositeState.isConcurrent |
   UML:CompositeState.subvertex'>
<!ENTITY % UML:CompositeStateAtts '%UML:StateAtts;
   isConcurrent (true|false) #IMPLIED'>
<!ELEMENT UML:CompositeState (%UML:CompositeStateFeatures;)*>
<!ATTLIST UML:CompositeState %UML:CompositeStateAtts;>

<!-- ========= UML:ChangeEvent ========= -->
<!ELEMENT UML:ChangeEvent.changeExpression (UML:BooleanExpression)*>
<!ENTITY % UML:ChangeEventFeatures '%UML:EventFeatures; |
   UML:ChangeEvent.changeExpression'>
<!ENTITY % UML:ChangeEventAtts '%UML:EventAtts;'>
<!ELEMENT UML:ChangeEvent (%UML:ChangeEventFeatures;)*>
<!ATTLIST UML:ChangeEvent %UML:ChangeEventAtts;>

<!-- ========= UML:Guard ========= -->
<!ELEMENT UML:Guard.expression (UML:BooleanExpression)*>
<!ELEMENT UML:Guard.transition (UML:Transition)*>
<!ENTITY % UML:GuardFeatures '%UML:ModelElementFeatures; |
   UML:Guard.expression |
   UML:Guard.transition'>
<!ENTITY % UML:GuardAtts '%UML:ModelElementAtts;
   transition IDREFS #IMPLIED'>
<!ELEMENT UML:Guard (%UML:GuardFeatures;)*>
<!ATTLIST UML:Guard %UML:GuardAtts;>

<!-- ========= UML:Pseudostate ========= -->
<!ELEMENT UML:Pseudostate.kind EMPTY>
<!ATTLIST UML:Pseudostate.kind xmi.value %UML:PseudostateKind; #REQUIRED>
<!ENTITY % UML:PseudostateFeatures '%UML:StateVertexFeatures; |
   UML:Pseudostate.kind'>
<!ENTITY % UML:PseudostateAtts '%UML:StateVertexAtts;
   kind %UML:PseudostateKind; #IMPLIED'>
<!ELEMENT UML:Pseudostate (%UML:PseudostateFeatures;)*>
<!ATTLIST UML:Pseudostate %UML:PseudostateAtts;>

<!-- ========= UML:SimpleState ========= -->
<!ENTITY % UML:SimpleStateFeatures '%UML:StateFeatures;'>
<!ENTITY % UML:SimpleStateAtts '%UML:StateAtts;'>
<!ELEMENT UML:SimpleState (%UML:SimpleStateFeatures;)*>
<!ATTLIST UML:SimpleState %UML:SimpleStateAtts;>

<!-- ========= UML:SubmachineState ========= -->
<!ELEMENT UML:SubmachineState.submachine (UML:StateMachine)*>
<!ENTITY % UML:SubmachineStateFeatures '%UML:CompositeStateFeatures; |
   UML:SubmachineState.submachine'>
<!ENTITY % UML:SubmachineStateAtts '%UML:CompositeStateAtts;
   submachine IDREFS #IMPLIED'>
<!ELEMENT UML:SubmachineState (%UML:SubmachineStateFeatures;)*>
<!ATTLIST UML:SubmachineState %UML:SubmachineStateAtts;>

<!-- ========= UML:SynchState ========= -->
<!ELEMENT UML:SynchState.bound (#PCDATA|XMI.reference)*>
<!ENTITY % UML:SynchStateFeatures '%UML:StateVertexFeatures; |
   UML:SynchState.bound'>
<!ENTITY % UML:SynchStateAtts '%UML:StateVertexAtts;
   bound CDATA #IMPLIED'>
<!ELEMENT UML:SynchState (%UML:SynchStateFeatures;)*>
<!ATTLIST UML:SynchState %UML:SynchStateAtts;>

<!-- ========= UML:StubState ========= -->
<!ELEMENT UML:StubState.referenceState (#PCDATA|XMI.reference)*>
<!ENTITY % UML:StubStateFeatures '%UML:StateVertexFeatures; |
   UML:StubState.referenceState'>
<!ENTITY % UML:StubStateAtts '%UML:StateVertexAtts;
   referenceState CDATA #IMPLIED'>
<!ELEMENT UML:StubState (%UML:StubStateFeatures;)*>
<!ATTLIST UML:StubState %UML:StubStateAtts;>

<!-- ========= UML:FinalState ========= -->
<!ENTITY % UML:FinalStateFeatures '%UML:StateFeatures;'>
<!ENTITY % UML:FinalStateAtts '%UML:StateAtts;'>
<!ELEMENT UML:FinalState (%UML:FinalStateFeatures;)*>
<!ATTLIST UML:FinalState %UML:FinalStateAtts;>

<!-- ========= UML:Activity_Graphs ========= -->

<!-- ========= UML:ActivityGraph ========= -->
<!ELEMENT UML:ActivityGraph.partition (UML:Partition)*>
<!ENTITY % UML:ActivityGraphFeatures '%UML:StateMachineFeatures; |
   UML:ActivityGraph.partition'>
<!ENTITY % UML:ActivityGraphAtts '%UML:StateMachineAtts;'>
<!ELEMENT UML:ActivityGraph (%UML:ActivityGraphFeatures;)*>
<!ATTLIST UML:ActivityGraph %UML:ActivityGraphAtts;>

<!-- ========= UML:Partition ========= -->
<!ELEMENT UML:Partition.contents (UML:ModelElement)*>
<!ELEMENT UML:Partition.activityGraph (UML:ActivityGraph)*>
<!ENTITY % UML:PartitionFeatures '%UML:ModelElementFeatures; |
   UML:Partition.contents |
   UML:Partition.activityGraph'>
<!ENTITY % UML:PartitionAtts '%UML:ModelElementAtts;
   contents IDREFS #IMPLIED
   activityGraph IDREFS #IMPLIED'>
<!ELEMENT UML:Partition (%UML:PartitionFeatures;)*>
<!ATTLIST UML:Partition %UML:PartitionAtts;>

<!-- ========= UML:SubactivityState ========= -->
<!ELEMENT UML:SubactivityState.isDynamic EMPTY>
<!ATTLIST UML:SubactivityState.isDynamic xmi.value (true|false) #REQUIRED>
<!ELEMENT UML:SubactivityState.dynamicArguments (UML:ArgListsExpression)*>
<!ELEMENT UML:SubactivityState.dynamicMultiplicity (UML:Multiplicity)*>
<!ENTITY % UML:SubactivityStateFeatures '%UML:SubmachineStateFeatures; |
   UML:SubactivityState.isDynamic |
   UML:SubactivityState.dynamicArguments |
   UML:SubactivityState.dynamicMultiplicity'>
<!ENTITY % UML:SubactivityStateAtts '%UML:SubmachineStateAtts;
   isDynamic (true|false) #IMPLIED'>
<!ELEMENT UML:SubactivityState (%UML:SubactivityStateFeatures;)*>
<!ATTLIST UML:SubactivityState %UML:SubactivityStateAtts;>

<!-- ========= UML:ActionState ========= -->
<!ELEMENT UML:ActionState.isDynamic EMPTY>
<!ATTLIST UML:ActionState.isDynamic xmi.value (true|false) #REQUIRED>
<!ELEMENT UML:ActionState.dynamicArguments (UML:ArgListsExpression)*>
<!ELEMENT UML:ActionState.dynamicMultiplicity (UML:Multiplicity)*>
<!ENTITY % UML:ActionStateFeatures '%UML:SimpleStateFeatures; |
   UML:ActionState.isDynamic |
   UML:ActionState.dynamicArguments |
   UML:ActionState.dynamicMultiplicity'>
<!ENTITY % UML:ActionStateAtts '%UML:SimpleStateAtts;
   isDynamic (true|false) #IMPLIED'>
<!ELEMENT UML:ActionState (%UML:ActionStateFeatures;)*>
<!ATTLIST UML:ActionState %UML:ActionStateAtts;>

<!-- ========= UML:CallState ========= -->
<!ENTITY % UML:CallStateFeatures '%UML:ActionStateFeatures;'>
<!ENTITY % UML:CallStateAtts '%UML:ActionStateAtts;'>
<!ELEMENT UML:CallState (%UML:CallStateFeatures;)*>
<!ATTLIST UML:CallState %UML:CallStateAtts;>

<!-- ========= UML:ObjectFlowState ========= -->
<!ELEMENT UML:ObjectFlowState.isSynch EMPTY>
<!ATTLIST UML:ObjectFlowState.isSynch xmi.value (true|false) #REQUIRED>
<!ELEMENT UML:ObjectFlowState.parameter (UML:Parameter)*>
<!ELEMENT UML:ObjectFlowState.type (UML:Classifier)*>
<!ENTITY % UML:ObjectFlowStateFeatures '%UML:SimpleStateFeatures; |
   UML:ObjectFlowState.isSynch |
   UML:ObjectFlowState.parameter |
   UML:ObjectFlowState.type'>
<!ENTITY % UML:ObjectFlowStateAtts '%UML:SimpleStateAtts;
   isSynch (true|false) #IMPLIED
   parameter IDREFS #IMPLIED
   type IDREFS #IMPLIED'>
<!ELEMENT UML:ObjectFlowState (%UML:ObjectFlowStateFeatures;)*>
<!ATTLIST UML:ObjectFlowState %UML:ObjectFlowStateAtts;>

<!-- ========= UML:ClassifierInState ========= -->
<!ELEMENT UML:ClassifierInState.type (UML:Classifier)*>
<!ELEMENT UML:ClassifierInState.inState (UML:State)*>
<!ENTITY % UML:ClassifierInStateFeatures '%UML:ClassifierFeatures; |
   UML:ClassifierInState.type |
   UML:ClassifierInState.inState'>
<!ENTITY % UML:ClassifierInStateAtts '%UML:ClassifierAtts;
   type IDREFS #IMPLIED
   inState IDREFS #IMPLIED'>
<!ELEMENT UML:ClassifierInState (%UML:ClassifierInStateFeatures;)*>
<!ATTLIST UML:ClassifierInState %UML:ClassifierInStateAtts;>

<!-- ========= UML:Collaborations ========= -->

<!-- ========= UML:Collaboration ========= -->
<!ELEMENT UML:Collaboration.interaction (UML:Interaction)*>
<!ELEMENT UML:Collaboration.representedClassifier (UML:Classifier)*>
<!ELEMENT UML:Collaboration.representedOperation (UML:Operation)*>
<!ELEMENT UML:Collaboration.constrainingElement (UML:ModelElement)*>
<!ELEMENT UML:Collaboration.usedCollaboration (UML:Collaboration)*>
<!ENTITY % UML:CollaborationFeatures '%UML:GeneralizableElementFeatures; |
   UML:Namespace.ownedElement |
   UML:Collaboration.interaction |
   UML:Collaboration.representedClassifier |
   UML:Collaboration.representedOperation |
   UML:Collaboration.constrainingElement |
   UML:Collaboration.usedCollaboration'>
<!ENTITY % UML:CollaborationAtts '%UML:GeneralizableElementAtts;
   representedClassifier IDREFS #IMPLIED
   representedOperation IDREFS #IMPLIED
   constrainingElement IDREFS #IMPLIED
   usedCollaboration IDREFS #IMPLIED'>
<!ELEMENT UML:Collaboration (%UML:CollaborationFeatures;)*>
<!ATTLIST UML:Collaboration %UML:CollaborationAtts;>

<!-- ========= UML:ClassifierRole ========= -->
<!ELEMENT UML:ClassifierRole.multiplicity (UML:Multiplicity)*>
<!ELEMENT UML:ClassifierRole.base (UML:Classifier)*>
<!ELEMENT UML:ClassifierRole.availableFeature (UML:Feature)*>
<!ELEMENT UML:ClassifierRole.availableContents (UML:ModelElement)*>
<!ELEMENT UML:ClassifierRole.conformingInstance (UML:Instance)*>
<!ENTITY % UML:ClassifierRoleFeatures '%UML:ClassifierFeatures; |
   UML:ClassifierRole.multiplicity |
   UML:ClassifierRole.base |
   UML:ClassifierRole.availableFeature |
   UML:ClassifierRole.availableContents |
   UML:ClassifierRole.conformingInstance'>
<!ENTITY % UML:ClassifierRoleAtts '%UML:ClassifierAtts;
   base IDREFS #IMPLIED
   availableFeature IDREFS #IMPLIED
   availableContents IDREFS #IMPLIED
   conformingInstance IDREFS #IMPLIED'>
<!ELEMENT UML:ClassifierRole (%UML:ClassifierRoleFeatures;)*>
<!ATTLIST UML:ClassifierRole %UML:ClassifierRoleAtts;>

<!-- ========= UML:AssociationRole ========= -->
<!ELEMENT UML:AssociationRole.multiplicity (UML:Multiplicity)*>
<!ELEMENT UML:AssociationRole.base (UML:Association)*>
<!ELEMENT UML:AssociationRole.message (UML:Message)*>
<!ELEMENT UML:AssociationRole.conformingLink (UML:Link)*>
<!ENTITY % UML:AssociationRoleFeatures '%UML:AssociationFeatures; |
   UML:AssociationRole.multiplicity |
   UML:AssociationRole.base |
   UML:AssociationRole.message |
   UML:AssociationRole.conformingLink'>
<!ENTITY % UML:AssociationRoleAtts '%UML:AssociationAtts;
   base IDREFS #IMPLIED
   message IDREFS #IMPLIED
   conformingLink IDREFS #IMPLIED'>
<!ELEMENT UML:AssociationRole (%UML:AssociationRoleFeatures;)*>
<!ATTLIST UML:AssociationRole %UML:AssociationRoleAtts;>

<!-- ========= UML:AssociationEndRole ========= -->
<!ELEMENT UML:AssociationEndRole.collaborationMultiplicity (UML:Multiplicity)*>
<!ELEMENT UML:AssociationEndRole.base (UML:AssociationEnd)*>
<!ELEMENT UML:AssociationEndRole.availableQualifier (UML:Attribute)*>
<!ENTITY % UML:AssociationEndRoleFeatures '%UML:AssociationEndFeatures; |
   UML:AssociationEndRole.collaborationMultiplicity |
   UML:AssociationEndRole.base |
   UML:AssociationEndRole.availableQualifier'>
<!ENTITY % UML:AssociationEndRoleAtts '%UML:AssociationEndAtts;
   base IDREFS #IMPLIED
   availableQualifier IDREFS #IMPLIED'>
<!ELEMENT UML:AssociationEndRole (%UML:AssociationEndRoleFeatures;)*>
<!ATTLIST UML:AssociationEndRole %UML:AssociationEndRoleAtts;>

<!-- ========= UML:Message ========= -->
<!ELEMENT UML:Message.interaction (UML:Interaction)*>
<!ELEMENT UML:Message.activator (UML:Message)*>
<!ELEMENT UML:Message.sender (UML:ClassifierRole)*>
<!ELEMENT UML:Message.receiver (UML:ClassifierRole)*>
<!ELEMENT UML:Message.predecessor (UML:Message)*>
<!ELEMENT UML:Message.communicationConnection (UML:AssociationRole)*>
<!ELEMENT UML:Message.procedure (UML:Procedure)*>
<!ELEMENT UML:Message.conformingStimulus (UML:Stimulus)*>
<!ENTITY % UML:MessageFeatures '%UML:ModelElementFeatures; |
   UML:Message.interaction |
   UML:Message.activator |
   UML:Message.sender |
   UML:Message.receiver |
   UML:Message.predecessor |
   UML:Message.communicationConnection |
   UML:Message.procedure |
   UML:Message.conformingStimulus'>
<!ENTITY % UML:MessageAtts '%UML:ModelElementAtts;
   interaction IDREFS #IMPLIED
   activator IDREFS #IMPLIED
   sender IDREFS #IMPLIED
   receiver IDREFS #IMPLIED
   predecessor IDREFS #IMPLIED
   communicationConnection IDREFS #IMPLIED
   procedure IDREFS #IMPLIED
   conformingStimulus IDREFS #IMPLIED'>
<!ELEMENT UML:Message (%UML:MessageFeatures;)*>
<!ATTLIST UML:Message %UML:MessageAtts;>

<!-- ========= UML:Interaction ========= -->
<!ELEMENT UML:Interaction.message (UML:Message)*>
<!ELEMENT UML:Interaction.context (UML:Collaboration)*>
<!ENTITY % UML:InteractionFeatures '%UML:ModelElementFeatures; |
   UML:Interaction.message |
   UML:Interaction.context'>
<!ENTITY % UML:InteractionAtts '%UML:ModelElementAtts;
   context IDREFS #IMPLIED'>
<!ELEMENT UML:Interaction (%UML:InteractionFeatures;)*>
<!ATTLIST UML:Interaction %UML:InteractionAtts;>

<!-- ========= UML:InteractionInstanceSet ========= -->
<!ELEMENT UML:InteractionInstanceSet.context (UML:CollaborationInstanceSet)*>
<!ELEMENT UML:InteractionInstanceSet.interaction (UML:Interaction)*>
<!ELEMENT UML:InteractionInstanceSet.participatingStimulus (UML:Stimulus)*>
<!ENTITY % UML:InteractionInstanceSetFeatures '%UML:ModelElementFeatures; |
   UML:InteractionInstanceSet.context |
   UML:InteractionInstanceSet.interaction |
   UML:InteractionInstanceSet.participatingStimulus'>
<!ENTITY % UML:InteractionInstanceSetAtts '%UML:ModelElementAtts;
   context IDREFS #IMPLIED
   interaction IDREFS #IMPLIED
   participatingStimulus IDREFS #IMPLIED'>
<!ELEMENT UML:InteractionInstanceSet (%UML:InteractionInstanceSetFeatures;)*>
<!ATTLIST UML:InteractionInstanceSet %UML:InteractionInstanceSetAtts;>

<!-- ========= UML:CollaborationInstanceSet ========= -->
<!ELEMENT UML:CollaborationInstanceSet.interactionInstanceSet (UML:InteractionInstanceSet)*>
<!ELEMENT UML:CollaborationInstanceSet.collaboration (UML:Collaboration)*>
<!ELEMENT UML:CollaborationInstanceSet.participatingInstance (UML:Instance)*>
<!ELEMENT UML:CollaborationInstanceSet.participatingLink (UML:Link)*>
<!ELEMENT UML:CollaborationInstanceSet.constrainingElement (UML:ModelElement)*>
<!ENTITY % UML:CollaborationInstanceSetFeatures '%UML:ModelElementFeatures; |
   UML:CollaborationInstanceSet.interactionInstanceSet |
   UML:CollaborationInstanceSet.collaboration |
   UML:CollaborationInstanceSet.participatingInstance |
   UML:CollaborationInstanceSet.participatingLink |
   UML:CollaborationInstanceSet.constrainingElement'>
<!ENTITY % UML:CollaborationInstanceSetAtts '%UML:ModelElementAtts;
   collaboration IDREFS #IMPLIED
   participatingInstance IDREFS #IMPLIED
   participatingLink IDREFS #IMPLIED
   constrainingElement IDREFS #IMPLIED'>
<!ELEMENT UML:CollaborationInstanceSet (%UML:CollaborationInstanceSetFeatures;)*>
<!ATTLIST UML:CollaborationInstanceSet %UML:CollaborationInstanceSetAtts;>

<!-- ========= UML:Model_Management ========= -->

<!-- ========= UML:Package ========= -->
<!ELEMENT UML:Package.elementImport (UML:ElementImport)*>
<!ENTITY % UML:PackageFeatures '%UML:GeneralizableElementFeatures; |
   UML:Namespace.ownedElement |
   UML:Package.elementImport'>
<!ENTITY % UML:PackageAtts '%UML:GeneralizableElementAtts;'>
<!ELEMENT UML:Package (%UML:PackageFeatures;)*>
<!ATTLIST UML:Package %UML:PackageAtts;>

<!-- ========= UML:Model ========= -->
<!ENTITY % UML:ModelFeatures '%UML:PackageFeatures;'>
<!ENTITY % UML:ModelAtts '%UML:PackageAtts;'>
<!ELEMENT UML:Model (%UML:ModelFeatures;)*>
<!ATTLIST UML:Model %UML:ModelAtts;>

<!-- ========= UML:Subsystem ========= -->
<!ELEMENT UML:Subsystem.isInstantiable EMPTY>
<!ATTLIST UML:Subsystem.isInstantiable xmi.value (true|false) #REQUIRED>
<!ENTITY % UML:SubsystemFeatures '%UML:PackageFeatures; |
   UML:Classifier.feature |
   UML:Classifier.powertypeRange |
   UML:Subsystem.isInstantiable'>
<!ENTITY % UML:SubsystemAtts '%UML:PackageAtts;
   powertypeRange IDREFS #IMPLIED
   isInstantiable (true|false) #IMPLIED'>
<!ELEMENT UML:Subsystem (%UML:SubsystemFeatures;)*>
<!ATTLIST UML:Subsystem %UML:SubsystemAtts;>

<!-- ========= UML:ElementImport ========= -->
<!ELEMENT UML:ElementImport.visibility EMPTY>
<!ATTLIST UML:ElementImport.visibility xmi.value %UML:VisibilityKind; #REQUIRED>
<!ELEMENT UML:ElementImport.alias (#PCDATA|XMI.reference)*>
<!ELEMENT UML:ElementImport.isSpecification EMPTY>
<!ATTLIST UML:ElementImport.isSpecification xmi.value (true|false) #REQUIRED>
<!ELEMENT UML:ElementImport.package (UML:Package)*>
<!ELEMENT UML:ElementImport.importedElement (UML:ModelElement)*>
<!ENTITY % UML:ElementImportFeatures 'XMI.extension |
   UML:ElementImport.visibility |
   UML:ElementImport.alias |
   UML:ElementImport.isSpecification |
   UML:ElementImport.package |
   UML:ElementImport.importedElement'>
<!ENTITY % UML:ElementImportAtts '%XMI.element.att; %XMI.link.att;
   visibility %UML:VisibilityKind; #IMPLIED
   alias CDATA #IMPLIED
   isSpecification (true|false) #IMPLIED
   package IDREFS #IMPLIED
   importedElement IDREFS #IMPLIED'>
<!ELEMENT UML:ElementImport (%UML:ElementImportFeatures;)*>
<!ATTLIST UML:ElementImport %UML:ElementImportAtts;>

<!-- ========= UML:Use_Cases ========= -->

<!-- ========= UML:UseCase ========= -->
<!ELEMENT UML:UseCase.extend (UML:Extend)*>
<!ELEMENT UML:UseCase.include (UML:Include)*>
<!ELEMENT UML:UseCase.extensionPoint (UML:ExtensionPoint)*>
<!ENTITY % UML:UseCaseFeatures '%UML:ClassifierFeatures; |
   UML:UseCase.extend |
   UML:UseCase.include |
   UML:UseCase.extensionPoint'>
<!ENTITY % UML:UseCaseAtts '%UML:ClassifierAtts;
   extend IDREFS #IMPLIED
   include IDREFS #IMPLIED'>
<!ELEMENT UML:UseCase (%UML:UseCaseFeatures;)*>
<!ATTLIST UML:UseCase %UML:UseCaseAtts;>

<!-- ========= UML:Actor ========= -->
<!ENTITY % UML:ActorFeatures '%UML:ClassifierFeatures;'>
<!ENTITY % UML:ActorAtts '%UML:ClassifierAtts;'>
<!ELEMENT UML:Actor (%UML:ActorFeatures;)*>
<!ATTLIST UML:Actor %UML:ActorAtts;>

<!-- ========= UML:UseCaseInstance ========= -->
<!ENTITY % UML:UseCaseInstanceFeatures '%UML:InstanceFeatures;'>
<!ENTITY % UML:UseCaseInstanceAtts '%UML:InstanceAtts;'>
<!ELEMENT UML:UseCaseInstance (%UML:UseCaseInstanceFeatures;)*>
<!ATTLIST UML:UseCaseInstance %UML:UseCaseInstanceAtts;>

<!-- ========= UML:Extend ========= -->
<!ELEMENT UML:Extend.condition (UML:BooleanExpression)*>
<!ELEMENT UML:Extend.base (UML:UseCase)*>
<!ELEMENT UML:Extend.extension (UML:UseCase)*>
<!ELEMENT UML:Extend.extensionPoint (UML:ExtensionPoint)*>
<!ENTITY % UML:ExtendFeatures '%UML:RelationshipFeatures; |
   UML:Extend.condition |
   UML:Extend.base |
   UML:Extend.extension |
   UML:Extend.extensionPoint'>
<!ENTITY % UML:ExtendAtts '%UML:RelationshipAtts;
   base IDREFS #IMPLIED
   extension IDREFS #IMPLIED
   extensionPoint IDREFS #IMPLIED'>
<!ELEMENT UML:Extend (%UML:ExtendFeatures;)*>
<!ATTLIST UML:Extend %UML:ExtendAtts;>

<!-- ========= UML:Include ========= -->
<!ELEMENT UML:Include.addition (UML:UseCase)*>
<!ELEMENT UML:Include.base (UML:UseCase)*>
<!ENTITY % UML:IncludeFeatures '%UML:RelationshipFeatures; |
   UML:Include.addition |
   UML:Include.base'>
<!ENTITY % UML:IncludeAtts '%UML:RelationshipAtts;
   addition IDREFS #IMPLIED
   base IDREFS #IMPLIED'>
<!ELEMENT UML:Include (%UML:IncludeFeatures;)*>
<!ATTLIST UML:Include %UML:IncludeAtts;>

<!-- ========= UML:ExtensionPoint ========= -->
<!ELEMENT UML:ExtensionPoint.location (#PCDATA|XMI.reference)*>
<!ELEMENT UML:ExtensionPoint.useCase (UML:UseCase)*>
<!ENTITY % UML:ExtensionPointFeatures '%UML:ModelElementFeatures; |
   UML:ExtensionPoint.location |
   UML:ExtensionPoint.useCase'>
<!ENTITY % UML:ExtensionPointAtts '%UML:ModelElementAtts;
   location CDATA #IMPLIED
   useCase IDREFS #IMPLIED'>
<!ELEMENT UML:ExtensionPoint (%UML:ExtensionPointFeatures;)*>
<!ATTLIST UML:ExtensionPoint %UML:ExtensionPointAtts;>

<!-- ========= UML:UML ========= -->
