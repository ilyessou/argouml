// Copyright (c) 1996-99 The Regents of the University of California. All
// Rights Reserved. Permission to use, copy, modify, and distribute this
// software and its documentation without fee, and without a written
// agreement is hereby granted, provided that the above copyright notice
// and this paragraph appear in all copies.  This software program and
// documentation are copyrighted by The Regents of the University of
// California. The software program and documentation are supplied "AS
// IS", without any accompanying services from The Regents. The Regents
// does not warrant that the operation of the program will be
// uninterrupted or error-free. The end-user understands that the program
// was developed for research purposes and is advised not to rely
// exclusively on the program for any reason.  IN NO EVENT SHALL THE
// UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR DIRECT, INDIRECT,
// SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING LOST PROFITS,
// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
// SUCH DAMAGE. THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY
// WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
// PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
// CALIFORNIA HAS NO OBLIGATIONS TO PROVIDE MAINTENANCE, SUPPORT,
// UPDATES, ENHANCEMENTS, OR MODIFICATIONS.

// File: AbstractRepairImpl.java
// Classes: AbstractRepairImpl
// Original Author: Jaap Branderhorst

package org.argouml.application.projectrepair;

import java.io.IOException;
import java.io.InputStream;
import java.io.Writer;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.TransformerFactoryConfigurationError;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.w3c.dom.Document;
import org.xml.sax.SAXException;
import org.xml.sax.SAXParseException;

/**
 * Abstract implementation of the Repair Interface. Base class for repairders
 * like ArgoRepair and XMIRepair. Defines the framework to be used by those 
 * classes. Subclasses only have to implement internalRepairDocument() to have
 * a working repairder.
 * 
 * @author jaap.branderhorst@xs4all.nl
 */
public abstract class AbstractRepairImpl implements Repair {

    protected Document _document = null;

    /**
     * Constructor for AbstractRepairImpl.
     */
    public AbstractRepairImpl() {
        super();
    }

    /**
     * @see org.argouml.filerepair.Repair#loadDocument(InputStream)
     */
    public void loadDocument(InputStream streamToLoadFrom) {
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        factory.setValidating(false);
        try {
            DocumentBuilder builder = factory.newDocumentBuilder();
            _document = builder.parse(streamToLoadFrom);
        }
        catch (SAXParseException spe) {
            // Error generated by the parser
            System.out.println(
                "\n** Parsing error"
                    + ", line "
                    + spe.getLineNumber()
                    + ", uri "
                    + spe.getSystemId());
            System.out.println("  " + spe.getMessage());

            // Use the contained exception, if any
            Exception x = spe;
            if (spe.getException() != null)
                x = spe.getException();
            x.printStackTrace();

        }
        catch (SAXException sxe) {
            // Error generated by this application
            // (or a parser-initialization error)
            Exception x = sxe;
            if (sxe.getException() != null)
                x = sxe.getException();
            x.printStackTrace();

        }
        catch (ParserConfigurationException pce) {
            // Parser with specified options can't be built
            pce.printStackTrace();

        }
        catch (IOException ioe) {
            // I/O error
            ioe.printStackTrace();
        }

    }

    /**
     * @see org.argouml.filerepair.Repair#saveDocument(Writer)
     */
    public void saveDocument(Writer writerToWriteTo) {
        try {
            TransformerFactory tFactory = TransformerFactory.newInstance();
            Transformer transformer = tFactory.newTransformer();

            DOMSource source = new DOMSource(_document);
            StreamResult result = new StreamResult(writerToWriteTo);
            transformer.transform(source, result);
        }
        catch (TransformerConfigurationException e) {
            // Error generated by the parser
            System.out.println("* Transformer Factory error");
            System.out.println("  " + e.getMessage());

            // Use the contained exception, if any
            Throwable x = e;
            if (e.getException() != null)
                x = e.getException();
            x.printStackTrace();

        }
        catch (TransformerFactoryConfigurationError e) {
            // Error generated by the parser
            System.out.println("* Transformation error");
            System.out.println("  " + e.getMessage());

            // Use the contained exception, if any
            Throwable x = e;
            if (e.getException() != null)
                x = e.getException();
            x.printStackTrace();

        }
        catch (TransformerException e) {
        }

    }

    /**
     * @see org.argouml.filerepair.Repair#repairDocument()
     */
    public void repairDocument() {
        if (_document == null) {
            throw new IllegalStateException("No document to repair.");
        }
        internalRepairDocument();
    }

    protected abstract void internalRepairDocument();
}
