<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- $Id$ -->
<!--
// Copyright (c) 2008 The Regents of the University of California. All
// Rights Reserved. Permission to use, copy, modify, and distribute this
// software and its documentation without fee, and without a written
// agreement is hereby granted, provided that the above copyright notice
// and this paragraph appear in all copies.  This software program and
// documentation are copyrighted by The Regents of the University of
// California. The software program and documentation are supplied "AS
// IS", without any accompanying services from The Regents. The Regents
// does not warrant that the operation of the program will be
// uninterrupted or error-free. The end-user understands that the program
// was developed for research purposes and is advised not to rely
// exclusively on the program for any reason.  IN NO EVENT SHALL THE
// UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR DIRECT, INDIRECT,
// SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING LOST PROFITS,
// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
// SUCH DAMAGE. THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY
// WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
// PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
// CALIFORNIA HAS NO OBLIGATIONS TO PROVIDE MAINTENANCE, SUPPORT,
// UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
-->

<sect1 id="profile">
  <title>Profile</title>
  <indexterm>
    <primary>Profile</primary>
  </indexterm>

  <para id="profile-subsys-purpose">
Purpose &ndash; To provide support for the use, definition and 
management of UML profiles with ArgoUML.
  </para>
  <para>
The Profile subsystem is located in the package 
<classname>org.argouml.profile</classname> and its sub-packages.
In package <classname>org.argouml.profile</classname> there are classes that 
define almost all the subsystem API, concerning the definition and management 
of UML profiles. 
The package <classname>org.argouml.profile.init</classname> contains the 
remaining subsystem API, being its only purpose to provide the subsystem 
initialization API (this is therefore of use only to a minority of other 
subsystems).
  </para>

  <figure id="fig.profile-subsystem.1" float="1">
    <title>Profile subsystem overview class diagram.</title>

    <screenshot><mediaobject>
        <imageobject>
          <imagedata format="PNG" align="center"
                   fileref="images/cookbook/profile-subsystem-overview.png"/>
        </imageobject>
      </mediaobject></screenshot>
  </figure>

  <para>
The profile subsystem is similar in some ways to the model subsystem &ndash; 
there is a <classname>ProfileFacade</classname> that is the main entry point 
to the methods and classes that provide management functions to the subsystem 
(notably the <classname>ProfileManager</classname>).
It also maintains a one to one relationship with the remaining subsystems of 
ArgoUML, although it is not Singleton based in order to facilitate testing 
and easy cleanup or reset of its internal state. 
  </para>
  <para>
This section which describes the Profile subsystem is organized according to 
the main usages of it from a point of view of programming.
We hope that it provides guidance for the developers that want to write code 
that interacts with this subsystem, but, we also try to provide enough 
internal design information that it serves as an invitation for those same 
developers to delve, enhance and fix!
Therefore we have the following sub-sections:
  </para>
  <itemizedlist>
    <listitem>
      <para>
<xref linkend="profile-subsys-initialization"></xref> &ndash; 
describes how to initialize the subsystem or the related issue how to 
re-initialize the subsystem and what does that mean to your profiles.
      </para>
    </listitem>
    <listitem>
      <para>
<xref linkend="profile-subsys-profile-management"></xref> &ndash; 
describes the API involved in the management of the profiles and some 
classes related to this, even if these aren't in the Profile subsystem.
This is probably the most interesting section for the majority of the readers 
since it goes well inside the guts of the subsystem, as well as it shows how 
there is support by other subsystems that helps the Profile subsystem to 
accomplish the goals of managing the profiles within ArgoUML.
      </para>
    </listitem>
    <listitem>
      <para>
<xref linkend="profile-subsys-defining-profiles"></xref> &ndash; 
describes what means the subsystem provides that enable profiles to be defined 
by modules and by users.
      </para>
    </listitem>
    <listitem>
      <para>
<xref linkend="profile-subsys-history"></xref> &ndash; 
provides a small history on the subsystem and some links to issues that might 
be interesting to someone that wants to get involved in the Profile subsystem 
maintenance and evolution.
      </para>
    </listitem>
</itemizedlist>

  <sect2 id="profile-subsys-initialization">
    <title>Initialization of the profile subsystem</title>
    <para>
To initialize the profile subsystem you do:
    </para>
    <para>
<literal>new org.argouml.profile.init.InitProfileSubsystem().init();</literal>
    </para>
    <para>
This will create a new instance of the class that implements the 
<classname>ProfileManager</classname> interface and set 
<classname>ProfileFacade</classname> to use this instance of 
<classname>ProfileManager</classname>... 
Which, by the way is currently <classname>ProfileManagerImpl</classname>, 
from the <literal>org.argouml.profile.internal</literal> package.
Check <xref linkend="fig.profile-subsys-initialization">the sequence diagram 
of the profile subsystem initialization</xref> for more details.
    </para>

    <figure id="fig.profile-subsys-initialization" float="1">
      <title>Sequence diagram of the profile subsystem initialization.</title>
      <screenshot><mediaobject>
        <imageobject>
          <imagedata format="PNG" align="center"
            fileref="images/cookbook/profile-subsystem-initialization.png"/>
        </imageobject>
      </mediaobject></screenshot>
    </figure>
  
    <para>
To complete the description we explain how to re-initialize the subsystem:
    </para>
    <para>
<literal>new org.argouml.profile.init.InitProfileSubsystem().init();</literal>
    </para>
    <para>
Simple enough?!
But, what does it mean from an internal point of view? 
Well, the prior internal objects that were used by the subsystem are left alone 
and hopefully the garbage collector will clean the memory they occupy.
So, it simply creates new fresh objects and these are attached to 
<classname>ProfileFacade</classname>.
This is of use in the automated tests, where there is the need to guarantee 
that the status of the subsystem isn't changed by previously executed test 
fixtures.
    </para>
  </sect2>

  <sect2 id="profile-subsys-profile-management">
    <title>Profile(s) management</title>
    <para>
For a profile to be known by the profile subsystem it must be registered. 
This is done by external entities, like for instance, a language module to 
register its UML profile would do:
    </para>
    <para>
<literal>ProfileFacade.register(profile);</literal>
    </para>
    <para>
Which is a synonym for:
    </para>
    <para>
<literal>ProfileFacade.getManager().registerProfile(profile);</literal>
    </para>
    <para>
Another possibility is for the profile manager to register its own profiles.
That happens for the UML profile, being created by the profile manager and 
then registered by it.
That also happens for user defined profiles, which consist of XMI files that 
the user places in some directories and afterwards, using the GUI, marks the 
directories as containing user defined profiles.
    </para>
    <para>
All of these registered profiles have the common base class 
<classname>Profile</classname>, which establishes the interface that must be 
implemented by a profile so that it is registrable.
The <xref linkend="fig.profile-class-and-some-derived-classes"></xref>
shows the <classname>Profile</classname> class and its specialized classes 
<classname>ProfileUML</classname> and <classname>UserDefinedProfile</classname>.
<classname>ProfileUML</classname> is the class that specializes 
<classname>Profile</classname> with behavior specific for the UML profile; 
<classname>UserDefinedProfile</classname> is a specialization that contains 
functionality for loading and representing a user defined profile.
    </para>

    <figure id="fig.profile-class-and-some-derived-classes" float="1">
      <title>Class diagram of the <classname>Profile</classname> class and 
      some derived classes</title>
      <screenshot><mediaobject>
        <imageobject>
          <imagedata format="PNG" align="center"
            fileref="images/cookbook/profile-class-and-some-derived-classes.png"/>
        </imageobject>
      </mediaobject></screenshot>
    </figure>

    <para>
As it is possible to register a <classname>Profile</classname> in the 
<classname>ProfileManager</classname>, it is possible to unregister it also.
A common case is that of a ArgoUML language module, which registers its 
specific <classname>Profile</classname> when enabled and unregisters it when 
it is disabled.
<xref linkend="fig.sequence-diagram-of-the-registering-and-unregistering-of-a-profile"></xref> 
illustrates this, standing the <literal>module</literal> 
<literal>ClassifierRole</literal> as a language module which is activated by 
<literal>moduleManager</literal> by a call to its operation <literal>enable</literal>.
As part of the activation, <literal>module</literal> creates the 
<literal>moduleProfile</literal> and registers it in the profile subsystem by a 
call to the <literal>register(moduleProfile)</literal> operation of the 
<classname>ProfileFacade</classname>.
The deactivation of the <literal>module</literal> causes the call to the 
<literal>remove(moduleProfile)</literal>, which will unregister the 
<literal>moduleProfile</literal> in the profile subsystem.
    </para>
    <note>
      <para>
The above described scheme for registering a module defined profile is probably
deemed for being reviewed if work in progress by Marcos Aur&eacute;lio is
integrated into ArgoUML trunk.
For more information see 
<ulink url="http://argouml.tigris.org/issues/show_bug.cgi?id=5029">issue 
#5029: Improve Plugability of Profile Subsystem</ulink>.
      </para>
    </note>

    <figure id="fig.sequence-diagram-of-the-registering-and-unregistering-of-a-profile" 
            float="1">
      <title>Sequence diagram of the registering and unregistering of a
        profile</title>
      <screenshot><mediaobject>
        <imageobject>
          <imagedata format="PNG" align="center"
            fileref="images/cookbook/sequence-diagram-of-the-registering-and-unregistering-of-a-profile.png"/>
        </imageobject>
      </mediaobject></screenshot>
    </figure>
    
    <para>
After a profile is registered, it may be chosen as a default profile by the 
user.
A default profile is a profile which is added to new projects by default.
For this there is the class <classname>org.argouml.ui.SettingsTabProfile</classname> 
that is part of the ArgoUML application settings dialog and shows 
all the registered profiles, being the profiles set as default profiles shown 
in a specific list.
    </para>
    <para>
The <classname>ProfileManager</classname> is responsible for keeping track of 
the profiles chosen as default.
For this, it has the operations:
    </para>
  <itemizedlist>
    <listitem>
      <para>
<literal>List&lt;Profile&gt; getDefaultProfiles()</literal>
      </para>
    </listitem>
    <listitem>
      <para>
<literal>void addToDefaultProfiles(Profile profile)</literal>
      </para>
    </listitem>
    <listitem>
      <para>and 
<literal>void removeFromDefaultProfiles(Profile profile)</literal>
      </para>
    </listitem>
  </itemizedlist>

    <para>
Besides the class <classname>org.argouml.ui.SettingsTabProfile</classname> for
handling application wide settings of the profile subsystem, there is the class 
<classname>org.argouml.ui.ProjectSettingsTabProfile</classname> to enable the 
users to modify the profile subsystem project settings, which take the form of 
an instance of the class 
<classname>org.argouml.kernel.ProfileConfiguration</classname>.
The class <classname>org.argouml.ui.ProjectSettingsTabProfile</classname> also 
shows all the registered profiles, as 
<classname>org.argouml.ui.SettingsTabProfile</classname> does, but, this time 
it is to enable the user to add or remove profiles to an open project. 
In its operation <literal>handleSettingsTabSave()</literal> the changes the
user did are made in the instance of 
<classname>org.argouml.kernel.ProfileConfiguration</classname>.
    </para>

    <para> 
The <classname>ProfileConfiguration</classname> is a 
<classname>ProjectMember</classname> and is part of a 
<classname>Project</classname>.
It is persisted and loaded to/from a project file by means of an instance of 
the class <classname>org.argouml.persistence.ProfileConfigurationFilePersister</classname>.
These two classes aren't part of the profile subsystem, but, are closely 
related.
Specifically, the <classname>ProfileConfiguration</classname> is part of the 
kernel subsystem and the <classname>ProfileConfigurationFilePersister</classname> 
is part of the <link linkend="subsystem-persistence">persistence subsystem</link>.
    </para>
  </sect2>

  <sect2 id="profile-subsys-defining-profiles">
    <title>Defining profiles</title>
    <para>
It all starts with a XMI file containing a model...
User defined profiles are simply this, at least from the point of view of the 
author of the profile.
So, to define a profile you start by modeling the profile in an ArgoUML project 
and then export it as XMI.
    </para>
    <para>
The profile subsystem provides means to add additional features to the 
profiles, but, for this you must get your hands dirty with a bit of java coding. 
Recall the <classname>Profile</classname> class in 
<xref linkend="fig.profile-class-and-some-derived-classes"></xref>.
The additional things that may be added to an ArgoUML profile, but, which 
require coding are:
    </para>
  <itemizedlist>
    <listitem>
      <para>
a <classname>FormatingStrategy</classname>, which provides specific formatting 
services to profile model elements;
      </para>
    </listitem>
    <listitem>
      <para>
a <classname>FigNodeStrategy</classname>, which provides figures to be shown 
instead of the textual representation of the profile stereotypes;
      </para>
    </listitem>
    <listitem>
      <para>
a <classname>DefaultTypeStrategy</classname>, which defines default types for 
attributes, parameters and return values appropriate for the profile.
      </para>
    </listitem>
  </itemizedlist>
    <para>
Unfortunately these extras are only possible for profiles contained in 
extension modules, such as the UML profile for C++, or profiles contained 
within ArgoUML, such as the UML profile of UML.
This limitation is caused by the need to load the Java classes that would 
implement the extended behavior.
    </para>
    <note>
      <para>
If the work in progress by Marcos Aur&eacute;lio is successful and is integrated 
into ArgoUML it is possible that the above customizations are performed without 
any Java coding. 
This could make user defined profiles and module contained profiles virtually 
equivalent in what concerns the functionality provided.
For more information see 
<ulink url="http://argouml.tigris.org/issues/show_bug.cgi?id=5029">issue 
#5029: Improve Plugability of Profile Subsystem</ulink>.
      </para>
    </note>
    <para>
There is a detail that must be taken into account when defining profiles which 
is the <classname>ProfileReference</classname> that must be associated to each 
profile.
See <xref linkend="fig.profile-references"></xref> for a diagram that shows how 
these classes are associated with <classname>Profile</classname> and 
<classname>ProfileModelLoader</classname> derived classes.
    </para>

    <figure id="fig.profile-references" 
            float="1">
      <title>Class diagram of the <classname>ProfileReference</classname> class
        and associated classes</title>
      <screenshot><mediaobject>
        <imageobject>
          <imagedata format="PNG" align="center"
            fileref="images/cookbook/profile-references.png"/>
        </imageobject>
      </mediaobject></screenshot>
    </figure>

    <para>
When a profile model is loaded, it must be associated with a 
<classname>ProfileReference</classname> instance which defines for the profile 
a path and a public reference (a URL).
The path part of a profile reference is something that enables ArgoUML to 
locate and load the actual XMI file.
The public reference is something that will identify the profile uni-vocally, 
enabling references to model elements of profiles from other models. 
Specifically it is very important to guarantee that the persisted models that 
refer to profiles are correctly loaded in other ArgoUML installations than the 
ones that originally created the models.
    </para>
  </sect2>

  <sect2 id="profile-subsys-history">
    <title>History of the Profile subsystem</title>
    <para>
The profile subsystem was the result of the 
<ulink url="http://argouml.tigris.org/gsoc2007/profiles/index.html">Google
Summer of Code project of Marcos Aur&eacute;lio in 2007</ulink>. 
Much of the design of 
<ulink url="http://argouml.tigris.org/gsoc2007/profiles/proposal0/index.html">Marcos' 
original purposal</ulink> is still present in the subsystem.
His GSoC mentor was Linus Tolke and the work was integrated into ArgoUML trunk 
by Tom Morris during September of 2007. 
Previously Tom Morris was involved in adding support for cross XMI file 
references, which are required for the profiles to work.
    </para>
    <para>
After the bulk of the work in creating and integrating the subsystem, we list 
some issues that might be of interest to persons that want to go after 
the reasoning behind some of the decisions that took the subsystem to where it 
is now or which should be solved to raise the subsystem to a quality level above 
average:
    </para>
  <itemizedlist>
    <listitem>
      <para>
<ulink url="http://argouml.tigris.org/issues/show_bug.cgi?id=4885">issue #4885: 
refactoring org.argouml.uml.profile</ulink> 
&ndash; consisted in a refactoring effort by Lu&iacute;s S&eacute;rgio Oliveira 
in order to make the subsystem more inline with the canonical form ArgoUML 
subsystems have;
      </para>
    </listitem>
    <listitem>
      <para>
<ulink url="http://argouml.tigris.org/issues/show_bug.cgi?id=4946">issue #4946: 
Loading project which references non-default profile doesn't work</ulink> 
&ndash; a difficult to solve problem that caused persistency failures, which is 
related to the cross XMI file reference support needed for profiles;
      </para>
    </listitem>
    <listitem>
      <para>
<ulink url="http://argouml.tigris.org/issues/show_bug.cgi?id=4991">issue #4991: 
Profiles subsystem missing in the cookbook</ulink>; 
      </para>
    </listitem>
    <listitem>
      <para>
<ulink url="http://argouml.tigris.org/issues/show_bug.cgi?id=4992">issue #4992: 
Profiles description is missing from the manual</ulink>; 
      </para>
    </listitem>
    <listitem>
      <para>
<ulink url="http://argouml.tigris.org/issues/show_bug.cgi?id=4993">issue #4993: 
Reloading a profile does not undo edits</ulink>; 
      </para>
    </listitem>
    <listitem>
      <para>
<ulink url="http://argouml.tigris.org/issues/show_bug.cgi?id=4994">issue #4994: 
Editing loaded profile should be prevented</ulink>; 
      </para>
    </listitem>
    <listitem>
      <para>
<ulink url="http://argouml.tigris.org/issues/show_bug.cgi?id=4997">issue #4997: 
user defined profile that depends from module defined profile fails to load on 
startup</ulink>; 
      </para>
    </listitem>
    <listitem>
      <para>
<ulink url="http://argouml.tigris.org/issues/show_bug.cgi?id=5040">issue #5040: 
better error messages when loading of zargo fails due to profile 
problems</ulink>; 
      </para>
    </listitem>
    <listitem>
      <para>
<ulink url="http://argouml.tigris.org/issues/show_bug.cgi?id=5043">issue #5043: 
Profile errors at startup not reported - ProfileManagerImpl.refreshRegisteredProfiles()</ulink>; 
      </para>
    </listitem>
    <listitem>
      <para>
<ulink url="http://argouml.tigris.org/issues/show_bug.cgi?id=5064">issue #5064: 
Duplicate xmi.id warning for different files</ulink>; 
      </para>
    </listitem>
    <listitem>
      <para>
<ulink url="http://argouml.tigris.org/issues/show_bug.cgi?id=5041">issue #5041: 
provide core profiles via the website</ulink>; 
      </para>
    </listitem>
    <listitem>
      <para>
<ulink url="http://argouml.tigris.org/issues/show_bug.cgi?id=5088">issue #5088: 
not possible to save models loaded as profiles</ulink>; 
      </para>
    </listitem>
    <listitem>
      <para>
<ulink url="http://argouml.tigris.org/issues/show_bug.cgi?id=5100">issue #5100: 
Profile directory file selection dialog should default to last directory 
selected</ulink>; 
      </para>
    </listitem>
    <listitem>
      <para>
<ulink url="http://argouml.tigris.org/issues/show_bug.cgi?id=5101">issue #5101: 
All ArgoUML supported XMI file extensions should be allowed</ulink>.
      </para>
    </listitem>
  </itemizedlist>
    <para>
 Follow some of the issues that might affect the future of the subsystem:
    </para>
  <itemizedlist>
    <listitem>
      <para>
<ulink url="http://argouml.tigris.org/issues/show_bug.cgi?id=5029">issue #5029: 
Improve Plugability of Profile Subsystem</ulink>; 
      </para>
    </listitem>
    <listitem>
      <para>
<ulink url="http://argouml.tigris.org/issues/show_bug.cgi?id=5042">issue #5042: 
Constraints defined in the Profile model should work as Critics</ulink>. 
      </para>
    </listitem>
  </itemizedlist>
  </sect2>
</sect1>


<!-- Local stuff for Emacs - please do not delete

Local Variables:
mode: xml
sgml-doctype: "cookbook.xml"
sgml-parent-document: ("cookbook.xml" "sect1" nil)
sgml-validate-command: "nsgmls -wxml -sv ../docbook-setup/xml.dcl \
  cookbook.xml"
indent-tabs-mode: nil
End:

-->

