<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- $Id$ -->
<!--
// Copyright (c) 1996-2005 The Regents of the University of California. All
// Rights Reserved. Permission to use, copy, modify, and distribute this
// software and its documentation without fee, and without a written
// agreement is hereby granted, provided that the above copyright notice
// and this paragraph appear in all copies.  This software program and
// documentation are copyrighted by The Regents of the University of
// California. The software program and documentation are supplied "AS
// IS", without any accompanying services from The Regents. The Regents
// does not warrant that the operation of the program will be
// uninterrupted or error-free. The end-user understands that the program
// was developed for research purposes and is advised not to rely
// exclusively on the program for any reason.  IN NO EVENT SHALL THE
// UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR DIRECT, INDIRECT,
// SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING LOST PROFITS,
// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
// SUCH DAMAGE. THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY
// WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
// PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
// CALIFORNIA HAS NO OBLIGATIONS TO PROVIDE MAINTENANCE, SUPPORT,
// UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
-->

<!--

Description of all the artifacts associated with Class Diagrams within
&argouml;.

-->

<chapter id="ch.ref.entclass">
  <title>Class Diagram Artifact Reference</title>
  <indexterm>
    <primary>Class Diagram</primary>
  </indexterm>
  <indexterm>
    <primary>Object Diagrams</primary>
  </indexterm>

  <sect1>
    <title>Introduction</title>

    <para>This chapter describes each artifact that can be created within a
      class diagram. Note that some sub-artifacts of artifacts on the diagram
      may not actually themselves appear on the diagram.</para>

    <para>Class diagrams are used for only one of the UML static structure
      diagrams, the class diagram itself. Object diagrams are represented on
      the &argouml; deployment diagram.</para>

    <para>In addition, &argouml; uses the class diagram to show model structure
      through the use of packages.</para>

    <para>There is a close relationship between this material and the
      Properties Tab of the Details Pane (see
      <xref linkend="s1.ref.proptab"/>). That section covers Properties in
      general, in this chapter they are linked to specific artifacts.</para>

    <!-- A diagram to show all things visible on the class diagram -->

    <para><xref linkend="fig.ref.class_diagram"/> shows a class diagram with
      all possible artifacts displayed.</para>

    <!-- Show all the bits and pieces. One day we'll add some call-out
         bubbles. -->

    <figure id="fig.ref.class_diagram" float="1">
      <title>Possible artifacts on a class diagram.</title>

      <screenshot><mediaobject>
        <imageobject>
          <imagedata format="GIF" align="center"
                     fileref="images/reference/class_diagram.gif"/>
        </imageobject>
      </mediaobject></screenshot>
    </figure>

    <!-- A diagram to show all things visible on the package diagram -->

    <para><xref linkend="fig.ref.package_diagram"/> shows a package diagram
      with all possible artifacts displayed.</para>

    <!-- Show all the bits and pieces. One day we'll add some call-out
         bubbles. -->

    <figure id="fig.ref.package_diagram" float="1">
      <title>Possible artifacts on a package diagram.</title>

      <screenshot><mediaobject>
        <imageobject>
          <imagedata format="GIF" align="center"
                     fileref="images/reference/package_diagram.gif"/>
        </imageobject>
      </mediaobject></screenshot>
    </figure>

    <!-- Limitations in &argouml; relating to datatypes, objects and links -->

    <sect2>
      <title>Limitations Concerning Class Diagrams in &argouml;</title>

      <para>The current implementation does not allow datatypes to be shown on
        class diagrams.</para>

      <para>A variant of the class diagram within the UML standard is the
<emphasis>object diagram</emphasis>.
There is currently no support for objects or links 
within &argouml; Class diagrams;.
Instead the &argouml; deployment diagram does have both objects and links, 
and can be used to draw object diagrams.
</para>
    </sect2>
  </sect1>

  <!-- Artifacts specific to Class Diagrams. Package artifact - cross reference
       to Model properties. Has DataType and StereoType as sub-artifacts. -->

  <sect1 id="s1.ref.package">
    <title>Package</title>
    <indexterm>
      <primary>Package</primary>
    </indexterm>

    <para>The package is the main organizational artifact within &argouml;. In
      the UML metamodel it is a sub-class of both <literal>Namespace</literal>
      and <literal>GeneralizableElement</literal>.</para>

    <note><para>&argouml; also implements the UML <literal>Model</literal>
      artifact as a sub-class of package,
      but <emphasis>not</emphasis> the
      <literal>Subsystem</literal> artifact.
      <!-- TODO: See enhancement issue ... --> 
    </para></note>

    <para>&argouml; also implements some less common aspects of UML model
      management. In particular the relationship UML&nbsp;1.3 defines as
      <literal>Generalization</literal> and the sub-class dependency
      <literal>Permission</literal> for use between packages.
      <!-- TODO: Rephrase & explain -->
    </para>

    <!-- Package details tabs -->

    <sect2>
      <title>Package Details Tabs</title>
      <indexterm>
        <primary>Package Details Tabs</primary>
      </indexterm>
      <indexterm>
        <primary>Details Tabs</primary>
        <secondary>for Package</secondary>
      </indexterm>

      <para>The details tabs that are active for packages are as
        follows.</para>

      <variablelist>

        <!-- Entry for ToDoItem tab -->

        <varlistentry>
          <term><literal>ToDoItem</literal></term>

          <listitem><para>Standard tab.</para></listitem>
        </varlistentry>

        <!-- Entry for Properties tab -->

        <varlistentry>
          <term><literal>Properties</literal></term>

          <listitem><para>See <xref
              linkend="s2.ref.package_property_toolbar"/> and <xref
              linkend="s2.ref.package_property_fields"/>
            below.</para></listitem>
        </varlistentry>

        <!-- Entry for Documentation tab -->

        <varlistentry>
          <term><literal>Documentation</literal></term>

          <listitem>
            <para>Standard tab.
See <xref linkend="s2.ref.documentation_tab"/>.
</para>
          </listitem>
        </varlistentry>

        <!-- Entry for Style tab -->

        <varlistentry>
          <term><literal>Style</literal></term>

          <listitem><para>Standard tab. The <literal>Bounds:</literal> field
            defines the bounding box for the package on the
            diagram.</para></listitem>
        </varlistentry>

        <!-- Entry for Source tab -->

        <varlistentry>
          <term><literal>Source</literal></term>

          <listitem><para>Standard tab. This contains a template package
            declaration appropriate to the entire package. In the future
            this would be part of the code generation
            activity.</para></listitem>
        </varlistentry>

        <!-- Entry for Constraints tab -->

        <varlistentry>
          <term><literal>Constraints</literal></term>

          <listitem>
            <para>&constraintssupport;
</para>
          </listitem>
        </varlistentry>

        <!-- Entry for Tagged Values tab -->

        <varlistentry>
          <term><literal>Tagged Values</literal></term>

          <listitem><para>Standard tab. In the UML metamodel,
            <literal>Package</literal> has the following standard tagged
            values defined.</para>

            <itemizedlist>
              <listitem><para><literal>derived</literal> (from the
                superclass, <literal>ModelElement</literal>). Values
                <literal>true</literal>, meaning the package is
                redundant&mdash;it can be formally derived from other
                elements, or <literal>false</literal> meaning it
                cannot.</para>

              <note><para>Derived packages still have their value in
                analysis to introduce useful names or concepts, and in
                design to avoid re-computation.</para></note></listitem>
            </itemizedlist>

	  </listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <!-- Package properties -->

    <sect2 id="s2.ref.package_property_toolbar">
      <title>Package Property Toolbar</title>

      <variablelist>

        <!-- Entry for Go up button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/navigate_up.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Go
            up</literal></term>

          <listitem><para>Navigate up through the package
            structure.</para></listitem>
        </varlistentry>

        <!-- Entry for Add Package button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/package.gif"/>
		</imageobject>
	      </inlinemediaobject>
</guiicon>
<literal>Add Package</literal>
</term>

          <listitem>
	    <para>
        This creates a new package 
        within the package (which appears
        on no diagram), navigating immediately to the properties tab
        for that package.</para></listitem>
        </varlistentry>

        <!-- Entry for Delete button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/property_delete.gif"/>
          </imageobject></inlinemediaobject></guiicon>
<literal>Delete Package</literal>
</term>

          <listitem><para>Deletes the package from the model.</para>

          <warning><para>This is a deletion from the model
            <emphasis>not</emphasis> just the diagram. To delete a
            package from the diagram, but keep it within the model,
            use the main menu <literal>Remove From Diagram</literal>
(or press the Delete key).
</para>
	    </warning>
	  </listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <!-- Fields in the properties tab -->

    <sect2 id="s2.ref.package_property_fields">
      <title>Property Fields For Package</title>

      <variablelist>

        <!-- Entry for Name -->

        <varlistentry>
          <term><literal>Name</literal></term>

          <listitem>
            <indexterm>
              <primary>Package Name</primary>
            </indexterm>
            <indexterm>
              <primary>Name</primary>
              <secondary>of Package</secondary>
            </indexterm>

	    <para>Text box.
The name of the package.

The name of a package, like all packages, is by convention all lower
case,
<!-- with periods separating the components of the package
hierarchy--> 
not containing any periods.

<!-- TODO: Why allowing periods here?  It would be a bad idea to name
a package with a name that contains a period, isn't it? -->
</para>

            <note>
              <para>
By default a new package has no name defined. 

 The package will appear with the name <literal>(anon
 Package)</literal> in the explorer.
 </para>
            </note>
          </listitem>
        </varlistentry>

        <!-- Entry for Stereotype -->

        <varlistentry>
          <term><literal>Stereotype</literal></term>

          <listitem>
            <indexterm>
              <primary>Package Stereotype</primary>
            </indexterm>
            <indexterm>
              <primary>Stereotype</primary>
              <secondary>of Package</secondary>
            </indexterm>

	    <para>Drop down selector.
Package is provided by default
            with the UML standard stereotypes for package
            (<literal>facade</literal>, <literal>framework</literal>,
<literal>stub</literal>).
</para>

	  </listitem>
        </varlistentry>

        <!-- Entry for Navigate Stereotype -->

        <varlistentry>
          <term><literal>Navigate Stereotype</literal></term>

          <listitem><para><guiicon><inlinemediaobject><imageobject><imagedata
              format="GIF" align="center"
              fileref="images/icons/navigate_stereotype.gif"/>
            </imageobject></inlinemediaobject></guiicon> icon. If a
              stereotype has been selected, this will navigate to the
              stereotype property panel (see <xref
                linkend="s1.ref.stereotype_class"/>).</para></listitem>
        </varlistentry>

        <!-- Entry for Namespace -->

        <varlistentry>
          <term><literal>Namespace</literal></term>

          <listitem>
            <indexterm>
              <primary>Package Namespace</primary>
            </indexterm>
            <indexterm>
              <primary>Namespace</primary>
              <secondary>of Package</secondary>
            </indexterm>

	    <para>Drop down selector.
Records the namespace for the
            package. This is the package hierarchy.</para>

          </listitem>
        </varlistentry>

        <!-- Entry for Visibility -->

        <varlistentry>
          <term><literal>Visibility</literal></term>

          <listitem><para>Radio box, with three entries
            <literal>public</literal>, <literal>protected</literal> and
            <literal>private</literal>. Indicates whether the package is visible 
            outside the package.
          </para></listitem>
        </varlistentry>        
        
        <!-- Entry for Modifiers -->

        <varlistentry>
          <term><literal>Modifiers</literal></term>

          <listitem>
            <indexterm>
              <primary>Package Modifiers</primary>
            </indexterm>
            <indexterm>
              <primary>Modifiers</primary>
              <secondary>of Package</secondary>
            </indexterm>

          <para>
Check box, with entries
<literal>abstract</literal>,
<literal>leaf</literal> and
<literal>root</literal>.
          </para>

          <itemizedlist>
            <listitem><para><literal>Abstract</literal> is used to declare
              that this package cannot be instantiated, but must always be
              specialized.</para>

              <tip><para>The meaning of <literal>abstract</literal> applied
              to a package if not that clear. It might mean that the
              package contains interfaces or abstract classes without
              realizations. This is probably better handled through
              stereotyping of the package (for example
              <literal>&laquo;facade&raquo;</literal>).
            </para></tip></listitem>

            <listitem>
              <para>
                <literal>Leaf</literal> indicates that this
                package can have no further subpackages.
              </para>
            </listitem>
              
            <listitem>
              <para>
                <literal>Root</literal> indicates that it is the top level
                package.
              </para>
              
              <tip>
                <para>
                  Within &argouml; <literal>Root</literal> only
                  meaningfully applies to the Model, since all packages sit
                  within the model. 
                  This could be used to
                  emphasize that the Model is at the top
                  level.
                </para>
              </tip>
              
            </listitem>
          </itemizedlist></listitem>
        </varlistentry>

        <!-- Entry for Generalizations -->

        <varlistentry>
          <term><literal>Generalizations</literal></term>

          <listitem>
            <indexterm>
              <primary>Package Generalizations</primary>
            </indexterm>
            <indexterm>
              <primary>Generalizations</primary>
              <secondary>of Package</secondary>
            </indexterm>

	    <para>Text area.
Lists any package that
            <emphasis>generalizes</emphasis> this package.</para>

          <para>&Button1; double click navigates to the generalization and opens
            its property tab.</para>

          </listitem>
        </varlistentry>

        <!-- Entry for Specializations -->

        <varlistentry>
          <term><literal>Specializations</literal></term>

          <listitem>
            <indexterm>
              <primary>Package Specializations</primary>
            </indexterm>
            <indexterm>
              <primary>Specializations</primary>
              <secondary>of Package</secondary>
            </indexterm>

	    <para>Text box.
Lists any specialized package (i.e. for
            which this package is a generalization.</para>

          <para>&button1; double click navigates to the generalization and opens
            its property tab.</para>

          </listitem>
        </varlistentry>

        <!-- Entry for Owned Elements -->

        <varlistentry>
          <term><literal>Owned Elements
          </literal></term>

          <listitem>
            <indexterm>
              <primary>Package Owned Elements</primary>
            </indexterm>
            <indexterm>
              <primary>Owned Elements</primary>
              <secondary>of Package</secondary>
            </indexterm>

            <para>Text area.
              A listing of all the packages,
              classes, interfaces, datatypes, actors, use cases,
              associations, generalizations and stereotypes within the
              package. 
            </para>

            <para>&Button1; double click on any item listed here
              navigates to that artifact.
            </para>

          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>
  </sect1>

  <!-- Datatype artifact. Sub-Artifact of Package. -->

  <sect1 id="s1.ref.datatype_class">
    <title>Datatype</title>

    <para>Datatypes are not specific to packages or class diagrams, and are
      discussed within the chapter on top level artifacts (see <xref
      linkend="s1.ref.datatype"/>).</para>
  </sect1>

  <!-- Stereotype artifact. Sub-Artifact of Package. -->

  <sect1 id="s1.ref.stereotype_class">
    <title>Stereotype</title>

    <para>Stereotypes are not specific to packages or class diagrams, and are
      discussed within the chapter on top level artifacts (see <xref
      linkend="s1.ref.stereotype"/>).</para>
  </sect1>

  <!-- Class artifact. Has Attributes and Operations as
       sub-artifacts. Operations itself has Signal and Parameters as
       sub-artifacts -->

  <sect1 id="s1.ref.class_class">
    <title>Class</title>
    <indexterm>
      <primary>Class</primary>
    </indexterm>

    <para>The class is the dominant artifact on a class diagram. In
      the UML metamodel it is a sub-class of <literal>Classifier</literal>
      and <literal>GeneralizableElement</literal>.</para>

    <para>A class is represented on a class diagram as a rectangle with three
      horizontal compartments. The top compartment displays the class name (and
      stereotype), the second compartment any attributes and the third any
      operations. The last two compartments may optionally be hidden.</para>

    <!-- Class details tabs -->

    <sect2>
      <title>Class Details Tabs</title>
      <indexterm>
        <primary>Class Details Tabs</primary>
      </indexterm>
      <indexterm>
        <primary>Details Tabs</primary>
        <secondary>for Class</secondary>
      </indexterm>


      <para>The details tabs that are active for classes are as
        follows.</para>

      <variablelist>

        <!-- Entry for ToDoItem tab -->

        <varlistentry>
          <term><literal>ToDoItem</literal></term>

          <listitem><para>Standard tab.</para></listitem>
        </varlistentry>

        <!-- Entry for Properties tab -->

        <varlistentry>
          <term><literal>Properties</literal></term>

          <listitem><para>See <xref
              linkend="s2.ref.class_property_toolbar"/> and <xref
              linkend="s2.ref.class_property_fields"/>
            below.</para></listitem>
        </varlistentry>

        <!-- Entry for Documentation tab -->

        <varlistentry>
          <term><literal>Documentation</literal></term>

          <listitem><para>Standard tab.
See <xref linkend="s2.ref.documentation_tab"/>.
</para>
          </listitem>
        </varlistentry>

        <!-- Entry for Style tab -->

        <varlistentry>
          <term><literal>Style</literal></term>

          <listitem><para>Standard tab. The tick boxes,
            <literal>Attributes</literal> and <literal>Operations</literal>
            allow the attributes and operations compartments to be shown (the
            default) or hidden.
            This is a setting valid for all diagrams that show the class.
            The <literal>Bounds:</literal> field defines
            the bounding box for the package on the diagram.</para></listitem>
        </varlistentry>

        <!-- Entry for Source tab -->

        <varlistentry>
          <term><literal>Source</literal></term>

          <listitem><para>Standard tab. This contains a template for the class
            declaration 
            and declarations of
            associated classes.</para></listitem>
        </varlistentry>

        <!-- Entry for Constraints tab -->

        <varlistentry>
          <term><literal>Constraints</literal></term>

          <listitem><para>Standard tab. There are no standard constraints
            defined for <literal>Class</literal> within the UML
            metamodel.</para></listitem>
        </varlistentry>

        <!-- Entry for Tagged Values tab -->

        <varlistentry>
          <term><literal>Tagged Values</literal></term>

          <listitem>
            <indexterm>
              <primary>Class Tagged Values</primary>
            </indexterm>
            <indexterm>
              <primary>Tagged Values</primary>
              <secondary>of Class</secondary>
            </indexterm>

            <para>Standard tab.
In the UML metamodel, <literal>Class</literal> has the following
standard tagged values defined.
</para>

            <itemizedlist>
              <listitem><para><literal>persistence</literal> (from the
                superclass, <literal>Classifier</literal>). Values
                <literal>transitory</literal>, indicating state is
                destroyed when an instance is destroyed or
                <literal>persistent</literal>, marking state is
                preserved when an instance is destroyed.</para></listitem>

              <listitem><para><literal>semantics</literal> (from the
                superclass, <literal>Classifier</literal>). The value is a
                specification of the semantics of the
                class.</para></listitem>

              <listitem><para><literal>derived</literal> (from the
                superclass, <literal>ModelElement</literal>). Values
                <literal>true</literal>, meaning the class is
                redundant&mdash;it can be formally derived from other
                elements, or <literal>false</literal> meaning it
                cannot.</para>

              <note><para>Derived classes still have their value in
                analysis to introduce useful names or concepts, and in
                design to avoid re-computation.</para></note></listitem>
            </itemizedlist>

            <note><para>The UML <literal>Element</literal> metaclass from
              which all other artifacts are derived includes the tagged
              element <literal>documentation</literal> which is handled by
              the <emphasis>documentation tab</emphasis> under
              &argouml;</para></note></listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <!-- Class properties -->

    <sect2 id="s2.ref.class_property_toolbar">
      <title>Class Property Toolbar</title>
      <indexterm>
        <primary>Class Property Toolbar</primary>
      </indexterm>
      <indexterm>
        <primary>Property Toolbar</primary>
        <secondary>for Class</secondary>
      </indexterm>

      <variablelist>

        <!-- Entry for Go up button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/navigate_up.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Go
            up</literal></term>

          <listitem><para>Navigate up through the package
            structure.</para></listitem>
        </varlistentry>

        <!-- Entry for Add attribute -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/attribute.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Add
            attribute</literal></term>

          <listitem><para>This creates a new attribute (see <xref
              linkend="s1.ref.attribute"/>) within the class, navigating
            immediately to the properties tab for that
            attribute.</para></listitem> 
        </varlistentry>

        <!-- Entry for Add operation button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/operation.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Add
            operation</literal></term>

          <listitem><para>This creates a new operation (see <xref
              linkend="s1.ref.operation"/>) within the class, navigating
              immediately to the properties tab for that
              operation.</para></listitem>
        </varlistentry>

        <!-- Entry for Add inner class button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/inner_class.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Add inner
            class</literal></term>

          <listitem><para>This creates a new inner class (which appears on no
            diagram) within the
            class. This belongs to the class and is restricted to the
            namespace of the class. It exactly models the Java concept of
            inner class. As an inner class it needs no attributes or
            operations, since it shares those of its owner.</para>

          <note><para>Inner class is not a separate concept in UML. This is
              a convenient shorthand for creating a class that is
              restricted to the namespace of its owning
              class.</para></note></listitem>
        </varlistentry>

        <!-- Entry for New class button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/class.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>New
            class</literal></term>

          <listitem>
            <para>This creates a new class (which appears on no
              diagram) within the same namespace as the current
              class. 
            </para>
          </listitem>
        </varlistentry>

        <!-- Entry for Delete button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/property_delete.gif"/>
          </imageobject></inlinemediaobject></guiicon>
            <literal>Delete</literal></term>

          <listitem><para>This deletes the class from the model</para>

          <warning><para>This is a deletion from the model
            <emphasis>not</emphasis> just the diagram. To delete a class
            from the diagram, but keep it within the model, use the main
            menu <literal>Remove From Diagram</literal>
(or press the Delete key).
</para>
	    </warning>
	  </listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <!-- Fields in the properties tab -->

    <sect2 id="s2.ref.class_property_fields">
      <title>Property Fields For Class</title>

      <indexterm>
        <primary>Class Property Fields</primary>
      </indexterm>
      <indexterm>
        <primary>Property Fields</primary>
        <secondary>for Class</secondary>
      </indexterm>

      <variablelist>

        <!-- Entry for Name -->

        <varlistentry>
          <term><literal>Name</literal></term>

          <listitem>
            <indexterm>
              <primary>Class Name</primary>
            </indexterm>
            <indexterm>
              <primary>Name</primary>
              <secondary>of Class</secondary>
            </indexterm>

            <para>Text box.
The name of the class.
The name of a class has a leading capital letter, with words separated
by <quote>bumpy caps</quote>.
</para>

          <note><para>The &argouml; critics will complain about class names
            that do not have an initial capital.</para></note></listitem>
        </varlistentry>

        <!-- Entry for Stereotype -->

        <varlistentry>
          <term><literal>Stereotype</literal></term>

          <listitem>
            <indexterm>
              <primary>Class Stereotype</primary>
            </indexterm>
            <indexterm>
              <primary>Stereotype</primary>
              <secondary>of Class</secondary>
            </indexterm>

            <para>Drop down selector.

Class is provided by default with the UML standard stereotypes for
<literal>Class</literal> (<literal>implementationClass</literal> and
<literal>type</literal>) and for <literal>Classifier</literal>
(<literal>metaclass</literal>, <literal>powerType</literal>,
<literal>process</literal>, <literal>thread</literal> and
<literal>utility</literal>)<!--, as well as the stereotypes for
classes in the UML standard profiles for <emphasis>software
development process</emphasis> (<literal>boundary</literal>,
<literal>entity</literal> and <literal>control</literal>) and
<emphasis>business modeling</emphasis> (<literal>worker</literal>,
<literal>case&nbsp;worker</literal>,
<literal>internal&nbsp;worker</literal> and <literal>entity</literal>
(again)).
 
&argouml; also provides the additional stereotypes,
<literal>machine</literal>, <literal>organization</literal>,
<literal>person</literal> and <literal>singleton</literal>, and rather
strangely <literal>realize</literal> (a stereotype of
<literal>Abstraction</literal>)-->.

<!-- TODO: See issue ... -->
</para>

          <tip><para>One stereotype that is not part of the UML standard,
            but is widely used is <literal>Singleton</literal>, used to
            distinguish classes which have a single static instance, and no
            public constructor. Although not part of &argouml; by default,
            this stereotype is understood by the critics. You may find it
            useful to create this stereotype for yourself (see <xref
              linkend="s1.ref.stereotype"/>).</para></tip></listitem>
        </varlistentry>

        <!-- Entry for Navigate Stereotype -->

        <varlistentry>
          <term><literal>Navigate Stereotype</literal></term>

          <listitem><para><guiicon><inlinemediaobject><imageobject><imagedata
              format="GIF" align="center"
              fileref="images/icons/navigate_stereotype.gif"/>
            </imageobject></inlinemediaobject></guiicon> icon. If a
              stereotype has been selected, this will navigate to the
              stereotype property panel (see <xref
                linkend="s1.ref.stereotype_class"/>).</para></listitem>
        </varlistentry>

        <!-- Entry for Namespace -->

        <varlistentry>
          <term><literal>Namespace</literal></term>

          <listitem>
            <para>Drop down selector. Records 
              and allows setting of the namespace for the
              class. This is the package hierarchy.
            </para>

            <para>&Button1; click on the entry will move the class to the 
              selected namespace.
             </para>
          </listitem>
        </varlistentry>

        <!-- Entry for Modifiers -->

        <varlistentry>
          <term><literal>Modifiers</literal></term>

          <listitem>
            <indexterm>
              <primary>Class Modifiers</primary>
            </indexterm>
            <indexterm>
              <primary>Modifiers</primary>
              <secondary>of Class</secondary>
            </indexterm>

            <para>Check box, with entries
<literal>Abstract</literal>, 
<literal>Leaf</literal>,
<literal>Root</literal>, and
<literal>Active</literal>.
</para>

          <itemizedlist>
            <listitem><para><literal>Abstract</literal> is used to declare
              that this class cannot be instantiated, but must always be
              subclassed. The name of an abstract class is displayed in
              italics on the diagram.</para>

            <caution><para>If a class has any abstract operations, then it
              should be declared abstract. &argouml; will not enforce
              this.
              <!-- TODO: Enter an enhancement issue. -->
              </para></caution></listitem>

            <listitem><para><literal>Leaf</literal> indicates that this
              class cannot be further subclassed, while
              <literal>Root</literal> indicates it can have no
              superclass. It is possible for a class to be both Abstract
              and Leaf, since its static operations may still be
              referenced.</para></listitem>

            <listitem><para><literal>Active</literal> indicates that this
              class exhibits dynamic behavior (and is thus associated with
              a state or activity diagram).</para></listitem>
          </itemizedlist></listitem>
        </varlistentry>

        <!-- Entry for Visibility -->

        <varlistentry>
          <term><literal>Visibility</literal></term>

          <listitem><para>Radio box, with three entries
            <literal>public</literal>, <literal>protected</literal> and
            <literal>private</literal>. Indicates whether the class is visible 
            outside the namespace.
          </para></listitem>
        </varlistentry>        

        <!-- Entry for Client Dependencies -->
        
        <varlistentry>
          <term><literal>Client Dependencies</literal></term>

          <listitem>
            <para>
              Text area. Lists the <quote>depending</quote> ends of the 
              relationship, i.e. the end that makes use of the other end.
            </para>

            <para>&Button1; double click navigates to the dependency and opens
              its property tab.
            </para>

          </listitem>
        </varlistentry>

        <!-- Entry for Supplier Dependencies -->
        
        <varlistentry>
          <term><literal>Supplier Dependencies</literal></term>

          <listitem>
            <para>Text area. Lists the <quote>supplying</quote> ends of 
              the relationship, i.e. the end supplying what is needed 
              by the other end.
            </para>

            <para>&Button1; double click navigates to the dependency and opens
              its property tab.
            </para>

          </listitem>
        </varlistentry>

        <!-- Entry for Generalizations -->

        <varlistentry>
          <term><literal>Generalizations</literal></term>

          <listitem><para>Text area. Lists any class that
            <emphasis>generalizes</emphasis> this class.</para>

            <para>&Button1; double click navigates to the generalization and opens
              its property tab.
            </para>

          </listitem>
        </varlistentry>

        <!-- Entry for Specializations -->

        <varlistentry>
          <term><literal>Specializations</literal></term>

          <listitem><para>Text box. Lists any specialized class (i.e. for
            which this class is a generalization.</para>

            <para>&button1; double click navigates to the generalization and opens
              its property tab.
            </para>

          </listitem>
        </varlistentry>

        <!-- Entry for Attributes -->

        <varlistentry>
          <term><literal>Attributes</literal></term>

          <listitem>
            <para>Text area. Lists all the attributes (see <xref
              linkend="s1.ref.attribute"/>) defined for this
              class. &Button1; double click navigates to the selected attribute.
            </para>
          </listitem>
        </varlistentry>

        <!-- Entry for Association Ends -->

        <varlistentry>
          <term><literal>Association Ends</literal></term>

          <listitem><para>Text box. Lists any association ends 
              (see <xref linkend="s1.ref.association_class"/>) 
              <!-- TODO: Is this link still correct? -->
              of associations 
              connected to this class.
            </para>

            <para>
              &Button1; double click navigates to the selected entry.
            </para>

          </listitem>
        </varlistentry>

        <!-- Entry for Operations -->

        <varlistentry>
          <term><literal>Operations</literal></term>

          <listitem>
            <para>Text area. Lists all the operations (see <xref
              linkend="s1.ref.operation"/>) defined on this
              class. &Button1; click navigates to the selected operation.
            </para>
          </listitem>
        </varlistentry>

        <!-- Entry for Owned Elements -->

        <varlistentry>
          <term><literal>Owned Elements
          </literal></term>

          <listitem>
            <para>Text area. A listing of artifacts contained within
              the classes' namespace. This is where any inner class (see
              <xref linkend="s2.ref.class_property_toolbar"/>) will
              appear
            </para>

            <para>&Button1; double click on any of the artifacts
              navigates to that artifact. 
            </para>

            <tip><para>Most namespace hierarchies should be managed
              through the package mechanism. Namespace hierarchies through
              classes are best restricted to inner classes. Conceivable
              datatypes, signals and interfaces could also appear here, but
              actors and use cases would seem of no
              value.</para>
            </tip>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>
  </sect1>

  <!-- Attribute artifact (subsidiary of Class) -->

  <sect1 id="s1.ref.attribute">
    <title>Attribute</title>
    <indexterm>
      <primary>Attribute</primary>
    </indexterm>

    <para>Attribute is a named slot within a class (or other
      <literal>Classifier</literal>) describing a range of values that may be
      held by instances of the class. In the UML metamodel it is a sub-class of
      <literal>StructuralFeature</literal> which is itself a sub-class of
      <literal>Feature</literal>.</para>

    <para>An attribute is represented on a single line within the attribute
      compartment of the class. Its syntax is as follows:</para>

    <blockquote><para><emphasis>visibility</emphasis>
      <!--[<literal>static</literal>] [<literal>final</literal>]-->
      <emphasis>attributeName</emphasis> <literal>:</literal>
      <emphasis>type</emphasis> [<literal>=</literal>
      <emphasis>initialValue</emphasis>]</para></blockquote>

    <para><emphasis>visibility</emphasis> is <literal>+</literal>,
      <literal>#</literal> or <literal>-</literal> corresponding to
      <literal>public</literal>, <literal>protected</literal> or
      <literal>private</literal> visibility respectively.</para>

    <!--para><literal>static</literal> and <literal>final</literal> optionally
      appear if the attribute has those modifiers</para-->

    <para>In addition any attribute declared static will have its whole entry
      underlined on the diagram.</para>

    <para><emphasis>attributeName</emphasis> is the actual name of the
      attribute being declared.</para>

    <para><emphasis>type</emphasis> is the type (UML datatype, class or
      interface) declared for the attribute.</para>

    <para><emphasis>initialValue</emphasis> is any initial value to be given to
      the attribute when an instance of the class is created. This may be
      overridden by any constructor operation.</para>

    <!-- Attribute details tabs -->

    <sect2 id="s2.ref.attribute_details_tabs">
      <title>Attribute Details Tabs</title>

      <indexterm>
        <primary>Attribute Details Tabs</primary>
      </indexterm>
      <indexterm>
        <primary>Details Tabs</primary>
        <secondary>for Attribute</secondary>
      </indexterm>

      <para>The details tabs that are active for attributes are as
        follows.</para>

      <variablelist>

        <!-- Entry for ToDoItem tab -->

        <varlistentry>
          <term><literal>ToDoItem</literal></term>

          <listitem><para>Standard tab.</para></listitem>
        </varlistentry>

        <!-- Entry for Properties tab -->

        <varlistentry>
          <term><literal>Properties</literal></term>

          <listitem><para>See <xref
              linkend="s2.ref.attribute_property_toolbar"/> and <xref
              linkend="s2.ref.attribute_property_fields"/>
            below.</para></listitem>
        </varlistentry>

        <!-- Entry for Documentation tab -->

        <varlistentry>
          <term><literal>Documentation</literal></term>

          <listitem><para>Standard tab.
See <xref linkend="s2.ref.documentation_tab"/>.
</para>
          </listitem>
        </varlistentry>

        <!-- Entry for Style tab -->
        <!-- Always downlighted. -->

        <!-- Entry for Source tab -->

        <varlistentry>
          <term><literal>Source</literal></term>

          <listitem><para>Standard tab. This contains a declaration for the
            attribute.</para>

          <!--warning><para>The declaration for attributes with multiplicity
            (see <xref linkend="s2.ref.attribute_property_fields"/>) is
            not syntactically correct Java at
            present.</para></warning-->
          </listitem>
        </varlistentry>

        <!-- Entry for Constraints tab -->

        <varlistentry>
          <term><literal>Constraints</literal></term>

          <listitem><para>Standard tab. There are no standard constraints
            defined for <literal>Attribute</literal> within the UML
            metamodel.</para></listitem>
        </varlistentry>

        <!-- Entry for Tagged Values tab -->

        <varlistentry>
          <term><literal>Tagged Values</literal></term>

          <listitem>
            <indexterm>
              <primary>Attribute Tagged Values</primary>
            </indexterm>
            <indexterm>
              <primary>Tagged Values</primary>
              <secondary>of Attribute</secondary>
            </indexterm>

            <para>Standard tab.
In the UML metamodel,
<literal>Attribute</literal> has the following standard tagged
values defined.
</para>
            
            <!-- TODO: Explain the presence of "transient" and "volatile". 
            The standard only describes "persistence" -->
            <itemizedlist>
              <listitem><para><literal>transient</literal>. 
                </para>
              </listitem>
              <listitem>
                <para><literal>volatile</literal>.
                  This is an &argouml; extension to the UML 1.3 standard 
                  to indicate that this attribute is realized in 
                  some volatile form 
                  (for example it will be a memory mapped control register).
                </para>
              </listitem>
              <!--listitem><para><literal>persistence</literal>. Values
                <literal>transitory</literal>, indicating state is
                destroyed when an instance is destroyed or
                <literal>persistent</literal>, marking state is
                preserved when an instance is destroyed.</para></listitem>

              <listitem><para><literal>derived</literal> (from the
                superclass, <literal>ModelElement</literal>). Values
                <literal>true</literal>, meaning the attribute is
                redundant&mdash;it can be formally derived from other
                elements, or <literal>false</literal> meaning it
                cannot.</para>

              <note><para>Derived attributes still have their value in
                analysis to introduce useful names or concepts, and in
                design to avoid re-computation.</para></note></listitem-->
            </itemizedlist>

            <note><para>The UML <literal>Element</literal> metaclass from
              which all other artifacts are derived includes the tagged
              element <literal>documentation</literal> which is handled by
              the <emphasis>documentation tab</emphasis> under
              &argouml;</para></note></listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <!-- Attribute properties -->

    <sect2 id="s2.ref.attribute_property_toolbar">
      <title>Attribute Property Toolbar</title>

      <indexterm>
        <primary>Attribute Property Toolbar</primary>
      </indexterm>
      <indexterm>
        <primary>Property Toolbar</primary>
        <secondary>for Attribute</secondary>
      </indexterm>

      <variablelist>

        <!-- Entry for Go up button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/navigate_up.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Go
            up</literal></term>

          <listitem><para>Navigate up through the package
            structure.</para></listitem>
        </varlistentry>

        <!-- Entry for New attribute -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/attribute.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>New
            attribute</literal></term>

          <listitem><para>This creates a new attribute within the owning class
              of the current attribute, navigating immediately to the
              properties tab for that attribute.</para>

          <tip><para>This is a very convenient way to add a number of
            attributes, one after the other, to a
            class.</para></tip></listitem>
        </varlistentry>

        <!-- Entry for Delete button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/property_delete.gif"/>
          </imageobject></inlinemediaobject></guiicon>
            <literal>Delete</literal></term>

          <listitem><para>This deletes the attribute from the model</para>

          <warning><para>This is a deletion from the model
            <emphasis>not</emphasis> just the diagram. 
            If desired the whole
            attribute compartment can be hidden on the diagram using the
            <emphasis>style</emphasis> tab (see <xref
              linkend="s2.ref.attribute_property_toolbar"/>) or the
            &button2; pop up menu for the class on the
            diagram.</para></warning></listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <!-- Fields in the properties tab -->

    <sect2 id="s2.ref.attribute_property_fields">
      <title>Property Fields For Attribute</title>

      <indexterm>
        <primary>Attribute Property Fields</primary>
      </indexterm>
      <indexterm>
        <primary>Property Fields</primary>
        <secondary>for Attribute</secondary>
      </indexterm>

      <variablelist>

        <!-- Entry for Name -->

        <varlistentry>
          <term><literal>Name</literal></term>

          <listitem>
            <indexterm>
              <primary>Attribute Name</primary>
            </indexterm>
            <indexterm>
              <primary>Name</primary>
              <secondary>of Attribute</secondary>
            </indexterm>

            <para>Text box.
The name of the attribute.
The name of a attribute has a leading lower case letter, with words
separated by <quote>bumpy caps</quote>.
</para>

          <note><para>The &argouml; critics will complain about attribute
            names that do not have an initial
            lower case letter.</para></note></listitem>
        </varlistentry>

        <!-- Entry for Stereotype -->

        <varlistentry>
          <term><literal>Stereotype</literal></term>

          <listitem>
            <para>Drop down selector. There are no UML standard
              stereotypes for <literal>Attribute</literal>. 
            </para>
          </listitem>
        </varlistentry>

        <!-- Entry for Navigate Stereotype -->

        <varlistentry>
          <term><literal>Navigate Stereotype</literal></term>

          <listitem><para><guiicon><inlinemediaobject><imageobject><imagedata
              format="GIF" align="center"
              fileref="images/icons/navigate_stereotype.gif"/>
            </imageobject></inlinemediaobject></guiicon> icon. If a
              stereotype has been selected, this will navigate to the
              stereotype property panel (see <xref
                linkend="s1.ref.stereotype"/>).</para></listitem>
        </varlistentry>

        <!-- Entry for Owner -->

        <varlistentry>
          <term><literal>Owner</literal></term>

          <listitem><para>Text box. Records the class which contains this
            attribute.</para>

            <para>&Button1; double click on the entry will navigate to the
              class. 
            </para>
          </listitem>
        </varlistentry>

        <!-- Entry for multiplicity -->

        <varlistentry>
          <term><literal>Multiplicity</literal></term>

          <listitem>
            <indexterm>
              <primary>Attribute Multiplicity</primary>
            </indexterm>
            <indexterm>
              <primary>Multiplicity</primary>
              <secondary>of Attribute</secondary>
            </indexterm>

            <para>Drop down selector.

The default (empty) value is that there is one instance of this
attribute for each instance of the class, i.e. it is a scalar.

The drop down provides a number of specifications for non-scalar
attributes.
</para>

          <note><para>The selection <literal>1..1</literal> is equivalent
            to the default (exactly one scalar instance). The selection
            <literal>0..1</literal> indicates an optional scalar
            attribute.</para></note>

          <caution><para>&argouml; restricts you to a number of predefined
            ranges for multiplicity. There is no way to give a user defined
            range.
            <!-- TODO: See issue ... -->
          </para></caution></listitem>
        </varlistentry>

        <!-- Entry for Type -->

        <varlistentry>
          <term><literal>Type</literal></term>

          <listitem>
            <indexterm>
              <primary>Attribute Type</primary>
            </indexterm>
            <indexterm>
              <primary>Type</primary>
              <secondary>of Attribute</secondary>
            </indexterm>

            <para>Drop down selector.
The type of this attribute.

This can be any UML <literal>Classifier</literal>, although in
practice only
<literal>Class</literal>,
<literal>DataType</literal>, or
<literal>Interface</literal>
make any sense.
</para>

          <note><para>A type must be declared (it can be
            <literal>void</literal>). By default &argouml; supplies
            <literal>int</literal> as the type.</para></note></listitem>
        </varlistentry>

        <!-- Entry for Navigate Type -->

        <varlistentry>
          <term><literal>Navigate Type</literal></term>

          <listitem><para><guiicon><inlinemediaobject><imageobject><imagedata
              format="GIF" align="center"
              fileref="images/icons/navigate_type.gif"/>
            </imageobject></inlinemediaobject></guiicon> icon. This will
            navigate to the property panel for the currently selected
            type. (see <xref linkend="s1.ref.class_class"/>, <xref
              linkend="s1.ref.datatype_class"/> and <xref
              linkend="s1.ref.interface_class"/>).</para></listitem>
        </varlistentry>

        <!-- Entry for Initial Value -->

        <varlistentry>
          <term><literal>Initial Value</literal></term>

          <listitem>
            <indexterm>
              <primary>Attribute Initial Value</primary>
            </indexterm>
            <indexterm>
              <primary>Initial Value</primary>
              <secondary>of Attribute</secondary>
            </indexterm>

            <para>Text box with drop down.

This allows you to set an initial value for the attribute if desired
(this is optional).

The drop down menu provides access to the common values
<literal>0</literal>,
<literal>1</literal>,
<literal>2</literal>, and
<literal>null</literal>.
</para>

            <caution><para>Any constructor operation may ignore this initial
              value.</para></caution>
              
            <warning>
              <para>
                This function is broken in V0.14 of &argouml;. The textbox is
                not editable, and if an initial value is given in the diagram
                (by editing the attribute definition string), then something 
                like: 
                <quote>ru.novosoft.uml.foundation.data_types.MExpression@1b6484c</quote>
                appears.
                <!-- TODO: See issue ... -->
              </para>
            </warning>
          </listitem>
        </varlistentry>

        <!-- Entry for Visibility -->

        <varlistentry>
          <term><literal>Visibility</literal></term>

          <listitem>
            <indexterm>
              <primary>Attribute Visibility</primary>
            </indexterm>
            <indexterm>
              <primary>Visibility</primary>
              <secondary>of Attribute</secondary>
            </indexterm>

            <para>
Radio box, with entries
<literal>public</literal>,
<literal>protected</literal>, and
<literal>private</literal>.
</para>

          <itemizedlist>
            <listitem><para><literal>public</literal>. The attribute is
              available to any artifact that can see the owning
              class.</para></listitem>

            <listitem><para><literal>private</literal>. The attribute is
              available only to the owning class (and any inner
              classes).</para></listitem>
            
            <listitem><para><literal>protected</literal>. The attribute is
              available only to the owning class, or artifacts that are
              subclasses of the owning class.</para></listitem>

          </itemizedlist></listitem>
        </varlistentry>

        <!-- Entry for Changeability -->

        <varlistentry>
          <term><literal>Changeability</literal></term>

          <listitem>
            <indexterm>
              <primary>Attribute Changeability</primary>
            </indexterm>
            <indexterm>
              <primary>Changeability</primary>
              <secondary>of Attribute</secondary>
            </indexterm>

            <para>Radio box, with entries
<literal>changeable</literal>,
<literal>add only</literal>, and
<literal>frozen</literal>.
</para>

          <itemizedlist>
            <listitem><para><literal>changeable</literal>. 
              There are no restrictions of modification.
            </para></listitem>

            <listitem><para><literal>add only</literal>. 
              Meaningful only if the multiplicity is not fixed to a
              single value. Additional values may be added to the set of
              values, but once created a value may not be removed or altered.
            </para></listitem>
            
            <listitem><para><literal>frozen</literal>. 
              Also named <quote>immutable</quote>.
              The value of the 
              attribute may not change during the lifetime of the owner class.
              The value must be set at object creation, and may never change
              after that. This implies that there is usually an argument for
              this value in a constructor and that there is no operation that
              updates this value. 
            </para></listitem>

          </itemizedlist></listitem>
        </varlistentry>

        <!-- Entry for Static -->

        <varlistentry>
          <term><literal>Static</literal></term>

          <listitem>
            <para>Check box for <literal>static</literal>. 
              If unchecked (the defaults) then the attribute has <quote>instance
              scope</quote>. If checked, then the attribute is static, i.e. it
              has <quote>class scope</quote>. Static attributes are indicated on
              the diagram by underlining.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>
  </sect1>

  <!-- Operation artifact (subsidiary of Class), with subsidiaries Parameter
       and Signal. -->

  <sect1 id="s1.ref.operation">
    <title>Operation</title>
    <indexterm>
      <primary>Operation</primary>
    </indexterm>


    <para>An operation is a service that can be requested from an object to effect
      behavior. In the UML metamodel it is a sub-class of
      <literal>BehavioralFeature</literal> which is itself a sub-class of
      <literal>Feature</literal>.</para>

    <!-- TODO: This whole description of editing on the diagram should be more
      visible. Maybe in a separate chapter? 
      This applies to other editable elements, too.
      For info, see the javadocs of "Parser" and "ParserDisplay" classes.-->

    <para>In the diagram, an operation is represented on a single line 
      within the operation compartment of the class. 
      Its syntax is as follows:</para>

    <blockquote><para>visibility name (parameter list) : return-type-expression
     {property-string} </para></blockquote>

    <para>You can edit this line directly in the diagram, 
      by double-clicking on it.
      All elements are optional and, if left unspecified, 
      the old values will be preserved.
    </para>

    <para>A <emphasis>stereotype</emphasis> can be given 
      between any two elements in the line in the format: 
      <literal>&lt;&lt;stereotype&gt;&gt;</literal>.
    </para>

    <para>The following properties are recognized to have special meaning:
      abstract, concurrency, concurrent, guarded, leaf, query, root and
     	sequential.
    </para>

    <para>The <emphasis>visibility</emphasis> is <literal>+</literal>,
      <literal>#</literal> or <literal>-</literal> corresponding to
      <literal>public</literal>, <literal>protected</literal> or
      <literal>private</literal> visibility respectively.</para>

    <para><literal>static</literal> and <literal>final</literal> optionally
      appear if the operation has those modifiers. 
      Any operation declared static will have its whole entry
      underlined on the diagram.</para>

    <para>There may be zero or more entries in the 
      <emphasis>parameter list</emphasis> separated by commas. 
      Every entry is a pair of the form:</para>

    <blockquote><para><emphasis>name</emphasis> <literal>:</literal>
      <emphasis>type</emphasis></para></blockquote>

    <para>The <emphasis>return-type-expression</emphasis> is the type 
      (UML datatype, class or interface) of the result returned.</para>

    <para>Finally the whole entry is shown in italics if the operation is
      declared abstract.</para>

    <!-- Operation details tabs -->

    <sect2>
      <title>Operation Details Tabs</title>

      <indexterm>
        <primary>Operation Details Tabs</primary>
      </indexterm>
      <indexterm>
        <primary>Details Tabs</primary>
        <secondary>for Operation</secondary>
      </indexterm>

      <para>The details tabs that are active for operations are as
        follows.</para>

      <variablelist>

        <!-- Entry for ToDoItem tab -->

        <varlistentry>
          <term><literal>ToDoItem</literal></term>

          <listitem><para>Standard tab.</para></listitem>
        </varlistentry>

        <!-- Entry for Properties tab -->

        <varlistentry>
          <term><literal>Properties</literal></term>

          <listitem><para>See <xref
              linkend="s2.ref.operation_property_toolbar"/> and <xref
              linkend="s2.ref.operation_property_fields"/>
            below.</para></listitem>
        </varlistentry>

        <!-- Entry for Documentation tab -->

        <varlistentry>
          <term><literal>Documentation</literal></term>

          <listitem><para>Standard tab.
See <xref linkend="s2.ref.documentation_tab"/>.
</para>
          </listitem>
        </varlistentry>

        <!-- Entry for Style tab -->
        <!--varlistentry>
          <term><literal>Style</literal></term>
          <listitem><para>Standard tab, but relating to the owning class,
            rather than the operation. The tick boxes,
            <literal>Attributes</literal> and <literal>Operations</literal>
            allow the attributes and operations compartments of the class
            to be shown (the default) or hidden. The
            <literal>Bounds:</literal> field defines the bounding box for
            the package on the diagram.</para></listitem>
        </varlistentry-->

        <!-- Entry for Source tab -->

        <varlistentry>
          <term><literal>Source</literal></term>

          <listitem><para>Standard tab. This contains a declaration for the
            operation.</para>
          </listitem>
        </varlistentry>

        <!-- Entry for Constraints tab -->

        <varlistentry>
          <term><literal>Constraints</literal></term>

          <listitem><para>Standard tab. There are no standard constraints
            defined for <literal>Operation</literal> within the UML
            metamodel.</para></listitem>
        </varlistentry>

        <!-- Entry for Tagged Values tab -->

        <varlistentry>
          <term><literal>Tagged Values</literal></term>

          <listitem>
            <indexterm>
              <primary>Operation Tagged Values</primary>
            </indexterm>
            <indexterm>
              <primary>Tagged Values</primary>
              <secondary>of Operation</secondary>
            </indexterm>

            <para>Standard tab.
In the UML metamodel,
<literal>Operation</literal> has the following standard tagged
values defined.
</para>

            <itemizedlist>
              <listitem><para><literal>semantics</literal>. The value is a
                specification of the semantics of the
                operation.</para></listitem>

              <listitem><para><literal>derived</literal> (from the
                superclass, <literal>ModelElement</literal>). Values
                <literal>true</literal>, meaning the operation is
                redundant&mdash;it can be formally derived from other
                elements, or <literal>false</literal> meaning it
                cannot.</para>

              <note><para>Derived operations still have their value in
                analysis to introduce useful names or concepts, and in
                design to avoid re-computation.</para></note></listitem>
            </itemizedlist>

            <note><para>The UML <literal>Element</literal> metaclass from
              which all other artifacts are derived includes the tagged
              element <literal>documentation</literal> which is handled by
              the <emphasis>documentation tab</emphasis> under
              &argouml;</para></note></listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <!-- Operation properties -->

    <sect2 id="s2.ref.operation_property_toolbar">
      <title>Operation Property Toolbar</title>

      <indexterm>
        <primary>Operation Property Toolbar</primary>
      </indexterm>
      <indexterm>
        <primary>Property Toolbar</primary>
        <secondary>for Operation</secondary>
      </indexterm>

      <variablelist>

        <!-- Entry for Go up button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/navigate_up.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Go
            up</literal></term>

          <listitem><para>Navigate up through the package
            structure.</para></listitem>
        </varlistentry>

        <!-- Entry for New operation -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/operation.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>New
            operation</literal></term>

          <listitem><para>This creates a new operation within the owning class
              of the current operation, navigating immediately to the
              properties tab for that operation.</para>

          <tip><para>This is a very convenient way to add a number of
            operations, one after the other, to a
            class.</para></tip></listitem>
        </varlistentry>

        <!-- Entry for Add parameter -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/parameter.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Add
            parameter</literal></term>

          <listitem><para>This creates a new parameter for the operation,
            navigating immediately to the properties tab for that
            parameter.</para></listitem>
        </varlistentry>

        <!-- Entry for Add raised signal -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/signal.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Add
            raised signal</literal></term>

          <listitem><para>This creates a new raised signal for the operation,
            navigating immediately to the properties tab for that
            raised signal.</para></listitem>
        </varlistentry>

        <!-- Entry for Delete button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/property_delete.gif"/>
          </imageobject></inlinemediaobject></guiicon>
            <literal>Delete</literal></term>

          <listitem><para>This deletes the operation from the model</para>

          <warning><para>This is a deletion from the model
            <emphasis>not</emphasis> just the diagram. 
            If desired the whole
            operation compartment can be hidden on the diagram using the
            <emphasis>style</emphasis> tab (see <xref
              linkend="s2.ref.operation_property_toolbar"/>) or the
            &button2; pop up menu for the class on the
            diagram.</para></warning></listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <!-- Fields in the properties tab -->

    <sect2 id="s2.ref.operation_property_fields">
      <title>Property Fields For Operation</title>

      <indexterm>
        <primary>Operation Property Fields</primary>
      </indexterm>
      <indexterm>
        <primary>Property Fields</primary>
        <secondary>for Operation</secondary>
      </indexterm>

      <variablelist>

        <!-- Entry for Name -->

        <varlistentry>
          <term><literal>Name</literal></term>

          <listitem>
            <indexterm>
              <primary>Operation Name</primary>
            </indexterm>
            <indexterm>
              <primary>Name</primary>
              <secondary>of Operation</secondary>
            </indexterm>

            <para>Text box.
The name of the operation.
The name of an operation has a leading lower case letter, with words
separated by <quote>bumpy caps</quote>.
</para>

          <note><para>The &argouml; critics will complain about operation
            names that do not have an initial
            lower case letter.</para></note>

          <tip><para>If you wish to follow the Java convention of
            constructors having the same name as the class, you will
            violate this rule. Silence the critic by setting the stereotype
            <literal>create</literal> for the constructor operation. 
            </para></tip></listitem>
        </varlistentry>

        <!-- Entry for Stereotype -->

        <varlistentry>
          <term><literal>Stereotype</literal></term>

          <listitem>
            <indexterm>
              <primary>Operation Stereotype</primary>
            </indexterm>
            <indexterm>
              <primary>Stereotype</primary>
              <secondary>of Operation</secondary>
            </indexterm>

            <para>Drop down selector.

There are two UML standard stereotypes for
<literal>Operation</literal> (from the parent metaclass,
<literal>BehavioralFeature</literal>), <literal>create</literal> and
<literal>destroy</literal>.

<!--&argouml; provides the additional
stereotypes, <literal>machine</literal>,
<literal>organization</literal> and <literal>person</literal>,
and rather strangely <literal>realize</literal> (a stereotype
of <literal>Abstraction</literal>).-->
</para>

            <tip><para>You should use <literal>create</literal> as the
              stereotype for constructors, and <literal>destroy</literal> for
              destructors (which are called <quote>finalize</quote> methods 
              under Java).
              </para>
            </tip>
          </listitem>
        </varlistentry>

        <!-- Entry for Navigate Stereotype -->

        <varlistentry>
          <term><literal>Navigate Stereotype</literal></term>

          <listitem><para><guiicon><inlinemediaobject><imageobject><imagedata
              format="GIF" align="center"
              fileref="images/icons/navigate_stereotype.gif"/>
            </imageobject></inlinemediaobject></guiicon> icon. If a
              stereotype has been selected, clicking &button1; 
              will navigate to the
              stereotype property panel (see <xref
                linkend="s1.ref.stereotype_class"/>).</para></listitem>
        </varlistentry>

        <!-- Entry for Owner -->

        <varlistentry>
          <term><literal>Owner</literal></term>

          <listitem><para>Text box. Records the class which contains this
            operation.</para>

            <para>&Button1; double click on the entry will navigate to the
              class. 
            </para>
          </listitem>
        </varlistentry>

        <!-- Entry for Visibility -->

        <varlistentry>
          <term><literal>Visibility</literal></term>

          <listitem>
            <indexterm>
              <primary>Operation Visibility</primary>
            </indexterm>
            <indexterm>
              <primary>Visibility</primary>
              <secondary>of Operation</secondary>
            </indexterm>

            <para>Radio box, with entries
<literal>public</literal>,
<literal>protected</literal>, and
<literal>private</literal>.
</para>

          <itemizedlist>
            <listitem><para><literal>public</literal>. The operation is
              available to any artifact that can see the owning
              class.</para></listitem>

            <listitem><para><literal>protected</literal>. The operation is
              available only to the owning class, or artifacts that are
              subclasses of the owning class.</para></listitem>

            <listitem><para><literal>private</literal>. The operation is
              available only to the owning class (and any inner
              classes).</para></listitem>
          </itemizedlist></listitem>
        </varlistentry>

        <!-- Entry for Modifiers -->

        <varlistentry>
          <term><literal>Modifiers</literal></term>

          <listitem>
            <indexterm>
              <primary>Operation Modifiers</primary>
            </indexterm>
            <indexterm>
              <primary>Modifiers</primary>
              <secondary>of Operation</secondary>
            </indexterm>

            <para>Check box, with entries
<literal>abstract</literal>,
<literal>leaf</literal>,
<literal>root</literal>,
<literal>query</literal>, and
<literal>static</literal>.
</para>

          <itemizedlist>
            <listitem><para><literal>abstract</literal>. This operation has
              no implementation with this class. The implementation must be
              provided by a subclass.</para>

            <important><para>Any class with an abstract operation must
              itself be declared abstract.</para></important></listitem>

            <listitem><para><literal>leaf</literal>The implementation of
              this operation must not be overridden by any
              subclass.</para></listitem>

            <listitem><para><literal>root</literal>. The declaration of
              this operation must not override a declaration of the
              operation from a superclass.</para></listitem>

            <listitem><para><literal>query</literal>. This indicates that
              the operation must have no side effects (i.e. it must not
              change the state of the system). It can only return a
              value.</para>

            <caution><para>Operations for user defined datatypes must
              always check this modifier.</para></caution></listitem>

            <listitem><para><literal>static</literal>. There is only one
              instance of this operation associated with the class (as
              opposed to one for each instance of the class). This is the
              <literal>OwnerScope</literal> attribute of a
              <literal>Feature</literal> metaclass within UML. Any
              operation declared static is shown underlined on the class
              diagram.</para></listitem>
          </itemizedlist></listitem>
        </varlistentry>

        <!-- Entry for Concurrency -->

        <varlistentry>
          <term><literal>Concurrency</literal></term>

          <listitem>
            <indexterm>
              <primary>Operation Concurrency</primary>
            </indexterm>
            <indexterm>
              <primary>Concurrency</primary>
              <secondary>of Operation</secondary>
            </indexterm>

            <para>Radio box, with entries
<literal>sequential</literal>,
<literal>synchronized</literal>, and
<literal>concurrent</literal>.
</para>

          <itemizedlist>
            <listitem><para><literal>sequential</literal>. Only one call to
              an instance (of the class with the operation) may be
              outstanding at any one time. There is no protection, and no
              guarantee of behavior if the system violates this
              rule.</para></listitem>

            <listitem>
              <para><literal>guarded</literal>.

Multiple calls from concurrent threads may occur simultaneously to one
instance (on any guarded operation), but only one is allowed to
commence.

The others are blocked until the performance of the first
operation is complete.
</para>

              <caution>
                <para>
                  It is up to the system designer to ensure that
                  deadlock cannot occur. It is the responsibility of the
                  operation to implement the blocking behavior (as opposed to
                  the system).
                  </para>
                </caution>
              </listitem>

            <listitem><para><literal>concurrent</literal>. Multiple calls
              to one instance may execute at the same time. The operation
              is responsible for ensuring correct behavior. This must be
              managed even if there are other sequential or synchronized
              (guarded) operations executing at the time.</para></listitem>
          </itemizedlist></listitem>
        </varlistentry>

        <!-- Entry for Parameter -->

        <varlistentry>
          <term><literal>Parameter</literal></term>

          <listitem>
            <indexterm>
              <primary>Operation Parameter</primary>
            </indexterm>
            <indexterm>
              <primary>Parameter</primary>
              <secondary>of Operation</secondary>
            </indexterm>

            <para>Text area,
with entries for all the parameters of the operation (see <xref
linkend="s1.ref.parameter"/>).

A new operation is always created with one new parameter,
<literal>return</literal> to define the return type of the
operation.
</para>

          <para>&Button1; double click on any of the parameters
            <!-- TODO: Sometimes it is a single click... See issue ... -->
            navigates to that parameter. &Button2; click brings up a pop up
            menu with four entries.</para>

          <itemizedlist>
            <listitem><para><literal>Open</literal>. Navigate to the
              selected parameter.</para></listitem>

            <listitem><para><literal>Add</literal>. Create a new parameter
              and navigate to it.</para></listitem>

            <listitem><para><literal>Move Up</literal>. Only available where
              there are two or more parameters, and the parameter selected is
              not at the top. It is moved up one.
              <!-- TODO: As a result, everything is deselected. So you'll have
              to reselect the parameter! This is very annoying! 
              See issue ... -->
            </para></listitem>

            <listitem><para><literal>Move Down</literal>. Only available where
              there are two or more parameters listed, and the parameter
              selected is not at the bottom. It is moved down
              one.
              <!-- TODO: Idem. See issue ... -->
            </para></listitem> 
          </itemizedlist></listitem>
        </varlistentry>

        <!-- Entry for Raised Signals -->

        <varlistentry>
          <term><literal>Raised Signals</literal></term>

          <listitem>
            <indexterm>
              <primary>Operation Raised Signals</primary>
            </indexterm>
            <indexterm>
              <primary>Raised Signals</primary>
              <secondary>of Operation</secondary>
            </indexterm>

            <para>Text area,
with entries for all the signals (see <xref linkend="s1.ref.signal"/>)
that can be raised by the operation.
</para>

          <caution><para>&argouml; at present (V0.14) has limited support for
            signals. In particular they are not linked to signal events
            that could drive state machines.</para></caution>

          <para>&Button1; click on any of the signals
            <!-- TODO: Should in fact only select. Not navigate! 
            See issue ... -->
            navigates to that parameter. &Button2; click brings up a pop up
            menu with four entries.</para>

          <itemizedlist>
            <listitem><para><literal>Open</literal>. Navigate to the
              selected signal.</para></listitem>

            <listitem><para><literal>Add</literal>. Create a new signal
              and navigate to it.</para></listitem>

            <listitem><para><literal>Move Up</literal>. Only available where
              there are two or more signals, and the signal selected is not at
              the top. It is moved up one.
              <!-- TODO: As a result, everything is deselected. So you'll have
              to reselect the parameter! This is very annoying! 
              See issue ... -->
              </para></listitem>

            <listitem><para><literal>Move Down</literal>. Only available where
              there are two or more signals listed, and the signal selected is
              not at the bottom. It is moved down one.
              <!-- TODO: Idem. See issue ... -->
              </para></listitem>
            </itemizedlist>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>
  </sect1>

  <!-- Parameter artifact (subsidiary of Operation) -->

  <sect1 id="s1.ref.parameter">
    <title>Parameter</title>
    <indexterm>
      <primary>Parameter</primary>
    </indexterm>

    <para>A parameter is a variable that can be passed. In the UML metamodel it
      is a sub-class of <literal>ModelElement</literal>.</para>

    <para>A parameter is represented within the operation declaration in the
      operation compartment of a class as follows.</para>

    <blockquote><para><emphasis>name</emphasis> <literal>:</literal>
      <emphasis>type</emphasis></para></blockquote>

    <para><emphasis>name</emphasis> is the name of the parameter.</para>

    <para><emphasis>type</emphasis> is the type (UML datatype, class or
      interface) of the parameter.</para>

    <para>The exception is any parameter representing a return value, whose
      type only is shown at the end of the operation declaration.</para>

    <!-- Parameter details tabs -->

    <sect2>
      <title>Parameter Details Tabs</title>

      <indexterm>
        <primary>Parameter Details Tabs</primary>
      </indexterm>
      <indexterm>
        <primary>Details Tabs</primary>
        <secondary>for Parameter</secondary>
      </indexterm>

      <para>The details tabs that are active for parameters are as
        follows.</para>

      <variablelist>

        <!-- Entry for ToDoItem tab -->

        <varlistentry>
          <term><literal>ToDoItem</literal></term>

          <listitem><para>Standard tab.</para></listitem>
        </varlistentry>

        <!-- Entry for Properties tab -->

        <varlistentry>
          <term><literal>Properties</literal></term>

          <listitem><para>See <xref
              linkend="s2.ref.parameter_property_toolbar"/> and <xref
              linkend="s2.ref.parameter_property_fields"/>
            below.</para></listitem>
        </varlistentry>

        <!-- Entry for Documentation tab -->

        <varlistentry>
          <term><literal>Documentation</literal></term>

          <listitem><para>Standard tab.
See <xref linkend="s2.ref.documentation_tab"/>.
</para>
          </listitem>
        </varlistentry>

        <!-- Entry for Style tab -->
        <!--varlistentry>
          <term><literal>Style</literal></term>
          <listitem><para>Standard tab, but relating to the owning class,
            rather than the parameter. The tick boxes,
            <literal>Attributes</literal> and <literal>Operations</literal>
            allow the attributes and operations compartments of the class
            to be shown (the default) or hidden. The
            <literal>Bounds:</literal> field defines the bounding box for
            the package on the diagram.</para></listitem>
        </varlistentry-->

        <!-- Entry for Source tab -->

        <varlistentry>
          <term><literal>Source</literal></term>

          <listitem><para>Standard tab. This contains a declaration for the
            parameter.</para></listitem>
        </varlistentry>

        <!-- Entry for Constraints tab -->
        <varlistentry>
          <term><literal>Constraints</literal></term>
          <listitem><para>&constraintssupport;</para></listitem>
        </varlistentry>

        <!-- Entry for Tagged Values tab -->

        <varlistentry>
          <term><literal>Tagged Values</literal></term>

          <listitem>
            <indexterm>
              <primary>Parameter Tagged Values</primary>
            </indexterm>
            <indexterm>
              <primary>Tagged Values</primary>
              <secondary>of Parameter</secondary>
            </indexterm>

            <para>Standard tab.
In the UML metamodel, <literal>Parameter</literal> has the following
standard tagged values defined.
</para>

            <itemizedlist>
              <listitem><para><literal>derived</literal> (from the
                superclass, <literal>ModelElement</literal>). Values
                <literal>true</literal>, meaning the parameter is
                redundant&mdash;it can be formally derived from other
                elements, or <literal>false</literal> meaning it
                cannot.</para>

              <caution><para>A derived parameter is a meaningless
                concept.</para></caution></listitem>
            </itemizedlist>

            <note><para>The UML <literal>Element</literal> metaclass from
              which all other artifacts are derived includes the tagged
              element <literal>documentation</literal> which is handled by
              the <emphasis>documentation tab</emphasis> under
              &argouml;</para></note></listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <!-- Parameter properties -->

    <sect2 id="s2.ref.parameter_property_toolbar">
      <title>Parameter Property Toolbar</title>

      <indexterm>
        <primary>Parameter Property Toolbar</primary>
      </indexterm>
      <indexterm>
        <primary>Property Toolbar</primary>
        <secondary>for Parameter</secondary>
      </indexterm>

      <variablelist>

        <!-- Entry for Go up button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/navigate_up.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Go
            up</literal></term>

          <listitem><para>Navigate up through the package
            structure.</para></listitem>
        </varlistentry>

        <!-- Entry for Add parameter -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/parameter.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Add
            parameter</literal></term>

          <listitem><para>This creates a new parameter for the for the same
            operation as the current parameter, navigating immediately to
            the properties tab for that parameter.</para>

          <tip><para>This is a convenient way to add a series of parameters
            for the same operation.</para></tip></listitem>
        </varlistentry>

        <!-- Entry for Delete button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/property_delete.gif"/>
          </imageobject></inlinemediaobject></guiicon>
            <literal>Delete</literal></term>

          <listitem><para>This deletes the parameter from the model</para>

          <warning><para>This is a deletion from the model
            <emphasis>not</emphasis> just the diagram. 
            If desired the
            whole operation compartment can be hidden on the diagram using
            the <emphasis>style</emphasis> tab or the
            &button2; pop up menu for the class on the
            diagram.</para></warning></listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <!-- Fields in the properties tab -->

    <sect2 id="s2.ref.parameter_property_fields">
      <title>Property Fields For Parameter</title>

      <indexterm>
        <primary>Parameter Property Fields</primary>
      </indexterm>
      <indexterm>
        <primary>Property Fields</primary>
        <secondary>for Parameter</secondary>
      </indexterm>

      <variablelist>

        <!-- Entry for Name -->

        <varlistentry>
          <term><literal>Name</literal></term>

          <listitem>
            <indexterm>
              <primary>Parameter Name</primary>
            </indexterm>
            <indexterm>
              <primary>Name</primary>
              <secondary>of Parameter</secondary>
            </indexterm>

            <para>Text box.
The name of the parameter.
By convention, the name of a parameter has a leading lower case
letter, with words separated by <quote>bumpy caps</quote>.
</para>

          <note><para>The &argouml; critics do not complain about parameter
            names that do not have an initial lower case
            letter.</para></note></listitem>
        </varlistentry>

        <!-- Entry for Stereotype -->

        <varlistentry>
          <term><literal>Stereotype</literal></term>

          <listitem>
            <indexterm>
              <primary>Parameter Stereotype</primary>
            </indexterm>
            <indexterm>
              <primary>Stereotype</primary>
              <secondary>of Parameter</secondary>
            </indexterm>

            <para>Drop down selector. There are no UML standard
              stereotypes for <literal>Parameter</literal>. 
            </para>
          </listitem>
        </varlistentry>

        <!-- Entry for Navigate Stereotype -->

        <varlistentry>
          <term><literal>Navigate Stereotype</literal></term>

          <listitem><para><guiicon><inlinemediaobject><imageobject><imagedata
              format="GIF" align="center"
              fileref="images/icons/navigate_stereotype.gif"/>
            </imageobject></inlinemediaobject></guiicon> icon. If a
              stereotype has been selected, this will navigate to the
              stereotype property panel (see <xref
                linkend="s1.ref.stereotype"/>).</para></listitem>
        </varlistentry>

        <!-- Entry for Owner -->

        <varlistentry>
          <term><literal>Owner</literal></term>

          <listitem><para>Text box. Records the operation which contains this
            parameter.</para>

          <para>&Button1; click on the entry will navigate to the
            <!-- TODO: Should be a double-click. See issue ...  -->
            operation. &Button2; click provides a pop up menu with a single
            entry, <literal>Open</literal>, which will also navigate to the
            operation.
            <!-- TODO: Remove this useless pop-up. See issue ... -->
          </para></listitem>
        </varlistentry>

        <!-- Entry for Type -->

        <varlistentry>
          <term><literal>Type</literal></term>

          <listitem>
            <indexterm>
              <primary>Parameter Type</primary>
            </indexterm>
            <indexterm>
              <primary>Type</primary>
              <secondary>of Parameter</secondary>
            </indexterm>

            <para>Drop down selector.
The type of this parameter.

This can be any UML <literal>Classifier</literal>, although in
practice only
<literal>Class</literal>,
<literal>DataType</literal>, or
<literal>Interface</literal>
make any sense.
</para>

          <note><para>A type must be declared (it can be
            <literal>void</literal>, but this only makes sense for a return
            parameter). By default &argouml; supplies
            <literal>int</literal> as the type the first time a parameter
            is created, and thereafter the type of the most recently
            created parameter.</para></note></listitem>
        </varlistentry>

        <!-- Entry for Navigate Type -->
        <!--varlistentry>
          <term><literal>Navigate Type</literal></term>
          <listitem><para><guiicon><inlinemediaobject><imageobject><imagedata
              format="GIF" align="center"
              fileref="images/icons/navigate_type.gif"/>
            </imageobject></inlinemediaobject></guiicon> icon. This will
            navigate to the property panel for the currently selected
            type. (see <xref linkend="s1.ref.class_class"/>, <xref
              linkend="s1.ref.datatype_class"/> and <xref
              linkend="s1.ref.interface_class"/>).</para></listitem>
        </varlistentry-->

        <!-- Entry for Initial Value -->

        <varlistentry>
          <term><literal>Initial Value</literal></term>

          <listitem>
            <indexterm>
              <primary>Parameter Initial Value</primary>
            </indexterm>
            <indexterm>
              <primary>Initial Value</primary>
              <secondary>of Parameter</secondary>
            </indexterm>

            <para>Text box with drop down.

This allows you to set an initial value for the parameter if desired
(this is optional).

The drop down menu provides access to the common
values
<literal>0</literal>,
<literal>1</literal>,
<literal>2</literal>, and
<literal>null</literal>.
</para>

          <caution><para>This only makes sense for <literal>out</literal>
            or <literal>return</literal>
            parameters.</para></caution></listitem>
        </varlistentry>

        <!-- Entry for Kind -->

        <varlistentry>
          <term><literal>Kind</literal></term>

          <listitem>
            <indexterm>
              <primary>Parameter Kind</primary>
            </indexterm>
            <indexterm>
              <primary>Kind</primary>
              <secondary>of Parameter</secondary>
            </indexterm>

            <para>Radio box,
with entries
<literal>in/out</literal>,
<literal>in</literal>,
<literal>out</literal>, and
<literal>return</literal>.
</para>

          <itemizedlist>
            <listitem><para><literal>in/out</literal>. The parameter is
              used both to pass values in and to pass results back out of
              the operation.</para>

            <note><para>This is the default for any new
              parameter.</para></note></listitem>

            <listitem><para><literal>in</literal>. The parameter is used
              only to pass values in to the operation.</para></listitem>

            <listitem><para><literal>out</literal>. The parameter is used
              only to pass values back from the
              operation.</para></listitem>

            <listitem><para><literal>return</literal>. The parameter is a
              return result from the call.</para>

            <note><para>There is nothing to stop you declaring more than
              one return parameter (some programming languages support this
              concept). 
              <!-- TODO: They even appear on the diagram. Is that
              described? -->
            </para></note>

            <tip><para>The name of the return parameter does not appear on
              the diagram, but it is convenient to give it an appropriate
              name (such as the default <literal>return</literal> to
              identify it in the list of parameters on the operation
              property tab.</para></tip></listitem>
          </itemizedlist></listitem>
        </varlistentry>
      </variablelist>
    </sect2>
  </sect1>

  <!-- Signal artifact (subsidiary of Operation). Also relevant to statechart
       diagrams. -->

  <sect1 id="s1.ref.signal">
    <title>Signal</title>

    <indexterm>
      <primary>Signal</primary>
    </indexterm>

    <para>A signal is a specification of an asynchronous stimulus communicated
      between instances. In the UML metamodel it is a sub-class of
      <literal>Classifier</literal>.</para>

    <para>Within &argouml; signals are not fully handled. Their value is when
      they are received as <emphasis>signal events</emphasis> driving the
      asynchronous behavior of state machines and when associated with
      <emphasis>send actions</emphasis> in state machines and messages for
      collaboration diagrams.</para>

    <tip><para>In general there is limited value at present in defining signals
      within &argouml;. It may prove more useful to define signals as classes,
      with a (user defined) stereotype of
      <literal>&laquo;signal&raquo;</literal> as suggested in the UML 1.3
      standard. This allows any dependency relationships between signals to be
      shown.</para></tip>

    <!-- Signal details tabs -->

    <sect2>
      <title>Signal Details Tabs</title>

      <indexterm>
        <primary>Signal Details Tabs</primary>
      </indexterm>
      <indexterm>
        <primary>Details Tabs</primary>
        <secondary>for Signal</secondary>
      </indexterm>

      <para>The details tabs that are active for signals are as
        follows.</para>

      <variablelist>

        <!-- Entry for ToDoItem tab -->

        <varlistentry>
          <term><literal>ToDoItem</literal></term>

          <listitem><para>Standard tab.</para></listitem>
        </varlistentry>

        <!-- Entry for Properties tab -->

        <varlistentry>
          <term><literal>Properties</literal></term>

          <listitem><para>See <xref
              linkend="s2.ref.signal_property_toolbar"/> and <xref
              linkend="s2.ref.signal_property_fields"/>
            below.</para></listitem>
        </varlistentry>

        <!-- Entry for Documentation tab -->

        <varlistentry>
          <term><literal>Documentation</literal></term>

          <listitem><para>Standard tab.
See <xref linkend="s2.ref.documentation_tab"/>.
</para>
          </listitem>
        </varlistentry>

        <!-- Entry for Source tab -->

        <varlistentry>
          <term><literal>Source</literal></term>

          <listitem><para>Standard tab. There is nothing generated for a
            signal.</para></listitem>
        </varlistentry>

        <!-- Entry for Constraints tab -->

        <varlistentry>
          <term><literal>Constraints</literal></term>

          <listitem>
            <para>&constraintssupport;
</para>
          </listitem>
        </varlistentry>

        <!-- Entry for Tagged Values tab -->

        <varlistentry>
          <term><literal>Tagged Values</literal></term>

          <listitem>
            <indexterm>
              <primary>Signal Tagged Values</primary>
            </indexterm>
            <indexterm>
              <primary>Tagged Values</primary>
              <secondary>of Signal</secondary>
            </indexterm>

            <para>Standard tab.

In the UML metamodel, <literal>Signal</literal> has the following
standard tagged values defined.
</para>

            <itemizedlist>
              <listitem><para><literal>persistence</literal> (from the
                superclass, <literal>Classifier</literal>). Values
                <literal>transitory</literal>, indicating state is
                destroyed when an instance is destroyed or
                <literal>persistent</literal>, marking state is
                preserved when an instance is destroyed.</para></listitem>

              <listitem><para><literal>semantics</literal> (from the
                superclass, <literal>Classifier</literal>). The value is a
                specification of the semantics of the
                signal.</para></listitem>

              <listitem><para><literal>derived</literal> (from the
                superclass, <literal>ModelElement</literal>). Values
                <literal>true</literal>, meaning the signal is
                redundant&mdash;it can be formally derived from other
                elements, or <literal>false</literal> meaning it
                cannot.</para>

              <note><para>Derived signals still have their value in
                analysis to introduce useful names or concepts, and in
                design to avoid re-computation.</para></note></listitem>
            </itemizedlist>

            <note><para>The UML <literal>Element</literal> metaclass from
              which all other artifacts are derived includes the tagged
              element <literal>documentation</literal> which is handled by
              the <emphasis>documentation tab</emphasis> under
              &argouml;</para></note></listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <!-- Signal properties -->

    <sect2 id="s2.ref.signal_property_toolbar">
      <title>Signal Property Toolbar</title>

      <indexterm>
        <primary>Signal Property Toolbar</primary>
      </indexterm>
      <indexterm>
        <primary>Property Toolbar</primary>
        <secondary>for Signal</secondary>
      </indexterm>

      <variablelist>

        <!-- Entry for Go up button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/navigate_up.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Go
            up</literal></term>

          <listitem><para>Navigate up through the package
            structure.</para></listitem>
        </varlistentry>

        <!-- Entry for Add signal -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/signal.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Add
            signal</literal></term>

          <listitem><para>This creates a new signal, navigating immediately to
            the properties tab for that signal.</para>

          <caution><para>The signal is not associated with the same
            operation as the original signal, so there appears no way to
            use it in the model.
            <!-- TODO: Check this out! -->
            </para></caution></listitem>
        </varlistentry>

        <!-- Entry for Add reception -->

        <varlistentry>
          <term>
            <guiicon>
              <inlinemediaobject>
                <imageobject>
                  <imagedata format="GIF" align="center"
                             fileref="images/icons/reception.gif"/>
                </imageobject>
              </inlinemediaobject>
            </guiicon>
            <literal>Add reception</literal>
          </term>

          <listitem>
            <para>This creates a new reception, navigating immediately to
              the properties tab for that reception.
            </para>
          </listitem>
        </varlistentry>

        <!-- Entry for Delete button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/property_delete.gif"/>
          </imageobject></inlinemediaobject></guiicon>
            <literal>Delete</literal></term>

          <listitem><para>This deletes the signal from the model</para>

            <warning><para>This is a deletion from the model. 
            </para></warning>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <!-- Fields in the properties tab -->

    <sect2 id="s2.ref.signal_property_fields">
      <title>Property Fields For Signal</title>

      <indexterm>
        <primary>Signal Property Fields</primary>
      </indexterm>
      <indexterm>
        <primary>Property Fields</primary>
        <secondary>for Signal</secondary>
      </indexterm>

      <variablelist>

        <!-- Entry for Name -->

        <varlistentry>
          <term><literal>Name</literal></term>

          <listitem>
            <indexterm>
              <primary>Signal Name</primary>
            </indexterm>
            <indexterm>
              <primary>Name</primary>
              <secondary>of Signal</secondary>
            </indexterm>

            <para>Text box.
The name of the signal.
From their similarity to classes, by convention, the name of a signal
has a leading upper case letter, with words separated by <quote>bumpy
caps</quote>.
</para>

          <note><para>The &argouml; critics do not complain about signal
            names that do not have an initial upper case
            letter.</para></note></listitem>
        </varlistentry>

        <!-- Entry for Stereotype -->

        <varlistentry>
          <term><literal>Stereotype</literal></term>

          <listitem>
            <indexterm>
              <primary>Signal Stereotype</primary>
            </indexterm>
            <indexterm>
              <primary>Stereotype</primary>
              <secondary>of Signal</secondary>
            </indexterm>

            <para>Drop down selector.

Signal is provided by default with the UML standard stereotypes for
its parent in the UML meta-model,
<literal>Classifier</literal>
(<literal>metaclass</literal>,
 <literal>powerType</literal>,
 <literal>process</literal>,
 <literal>thread</literal>, and
 <literal>utility</literal>).
</para>
          </listitem>
        </varlistentry>

        <!-- Entry for Navigate Stereotype -->
        <!-- TODO: This one is missing here. Strange, it is present everywhere
        else! See issue ... -->
        <!--varlistentry>
          <term><literal>Navigate Stereotype</literal></term>

          <listitem><para><guiicon><inlinemediaobject><imageobject><imagedata
              format="GIF" align="center"
              fileref="images/icons/navigate_stereotype.gif"/>
            </imageobject></inlinemediaobject></guiicon> icon. If a
              stereotype has been selected, this will navigate to the
              stereotype property panel (see <xref
                linkend="s1.ref.stereotype"/>).</para></listitem>
        </varlistentry-->

        <!-- Entry for Extends -->

        <!--varlistentry>
          <term><literal>Extends</literal></term>

          <listitem><para>Text box. Lists any class that generalizes this
            class (see <xref
              linkend="s1.ref.generalization_class"/>).</para>

          <caution><para>&argouml; is incorrect in using the designation
            <quote>Extends</quote> for this field. It should correctly be
            called <quote>Generalizations</quote>.</para></caution>

          <para>By default this field is shown with the entry
            <literal>none</literal>. &Button1; click navigates to the
            selected entry, &button2; gives a pop up menu with five
            entries.</para>

          <itemizedlist>
            <listitem><para><literal>Open</literal>. Navigate to the
              selected generalization.</para></listitem>

            <listitem><para><literal>Add</literal>. Add a new
              generalization and navigate to that new
              generalization.</para>

            <caution><para>&argouml; creates the generalization with the
              signal as child, but no parent, and no menu for adding a
              parent. The name will always appear as
              <literal>null</literal>.</para></caution></listitem>

            <listitem><para><literal>Delete</literal>. Removes the link to
              the selected generalization.</para>

            <note><para>This only removes the link to the
              generalization. To remove the generalization from the model
              you must navigate to it (or select it on the diagram or
              explorer) and then delete it.</para></note></listitem>

            <listitem><para><literal>Move Up</literal>. Only available where
              there are two or more generalizations, and the generalization
              selected is not at the top. It is moved up one.</para></listitem>

            <listitem><para><literal>Move Down</literal>. Only available where
              there are two or more generalizations listed, and the
              generalization selected is not at the bottom. It is moved down
              one.</para></listitem>
          </itemizedlist>

          <caution><para>&argouml; allows you to create generalizations,
            but not to specify parents, so they are of no use at
            all.</para></caution>

          <tip><para>To specify detailed properties of signals define them
            as classes with the stereotype
            <literal>&laquo;signal&raquo;</literal>.</para></tip></listitem>
        </varlistentry-->

        <!-- Entry for Implements -->

        <!--varlistentry>
          <term><literal>Implements</literal></term>

          <listitem><para>Text box. Lists any class or interface that is
            realized by this signal. (see <xref
              linkend="s1.ref.abstraction"/>).</para>

          <caution><para>&argouml; is incorrect in using the designation
            <quote>Extends</quote> for this field. It should correctly be
            called <quote>Realizes</quote>.</para></caution>

          <para>By default this field is shown with the entry
            <literal>none</literal>. &Button1; click navigates to the
            selected entry, &button2; gives a pop up menu with five
            entries.</para>

          <itemizedlist>
            <listitem><para><literal>Open</literal>. Navigate to the
              selected abstraction.</para></listitem>

            <listitem><para><literal>Add</literal>. Add a new
              abstraction.</para>

            <caution><para>&argouml; creates the abstraction with the
              signal as client, but no supplier, and no menu for adding a
              supplier. The name will always appear as
              <literal>[empty]</literal>.</para></caution></listitem>

            <listitem><para><literal>Delete</literal>. Removes the link to
              the selected abstraction.</para>

            <note><para>This only removes the link to the
              abstraction. To remove the abstraction from the model
              you must navigate to it (or select it on the diagram or
              explorer) and then delete it.</para></note></listitem>

            <listitem><para><literal>Move Up</literal>. Only available where
              there are two or more abstractions, and the abstraction selected
              is not at the top. It is moved up one.</para></listitem>

            <listitem><para><literal>Move Down</literal>. Only available where
              there are two or more abstractions listed, and the abstraction
              selected is not at the bottom. It is moved down
              one.</para></listitem>
          </itemizedlist>

          <caution><para>&argouml; allows you to create abstractions, but
            not to specify suppliers, so they are of no use at all. Since
            signals should not have operations or attributes, abstraction
            seems a meaningless concept.</para></caution></listitem>
        </varlistentry-->

        <!-- Entry for Modifiers -->

        <!--varlistentry>
          <term><literal>Modifiers</literal></term>

          <listitem>
            <indexterm>
              <primary>Signal Modifiers</primary>
            </indexterm>
            <indexterm>
              <primary>Modifiers</primary>
              <secondary>of Signal</secondary>
            </indexterm>

            <para>Check box, with entries
<literal>public</literal>,
<literal>abstract</literal>, 
<literal>final</literal>, and
<literal>root</literal>.
</para>

          <itemizedlist>
            <listitem><para><literal>public</literal> has identical meaning
              to the <literal>public</literal> declaration in Java. It
              indicates whether this signal is restricted to use in its own
              package (the default) or can be used by
              anyone.</para>

            <caution><para>With the limited support for signals within
              &argouml;, signals are effectively tied to their owning
              operation anyway.</para></caution></listitem>

            <listitem><para><literal>abstract</literal> is used to declare
              that this signal cannot be instantiated, but must always be
              specialized.</para>

            <caution><para>&argouml; provides no mechanism for defining
              specialization between signals.</para></caution></listitem>

            <listitem><para><literal>final</literal> indicates that this
              signal cannot be further specialized, while
              <literal>root</literal> indicates it can have no
              generalization.</para>

            <caution><para>&argouml; provides no mechanism for defining
              specialization between signals, so all should be declared
              both <literal>final</literal> and
              <literal>root.</literal></para></caution></listitem>
          </itemizedlist></listitem>
        </varlistentry-->

        <!-- Entry for Namespace -->

        <varlistentry>
          <term><literal>Namespace</literal></term>

          <listitem><para>Drop down selector. Records and allows changing 
            the namespace for the
            signal. This is the package hierarchy of the signal.</para>
          </listitem>
        </varlistentry>

        <!-- Entry for Derived -->

        <!--varlistentry>
          <term><literal>Derived</literal></term>

          <listitem><para>Text area. Lists any derived signals, i.e those for
            which this signal is a generalization. There is a single entry
            shown by default, <literal>none</literal>.</para>

          <para>&Button1; click has no effect, &button2; gives a pop up
            menu with a single entry which is always grayed out.</para> 

          <note><para>This field has no use for a
            signal.</para></note></listitem>
        </varlistentry-->

        <!-- Entry for Operations -->

        <!--varlistentry>
          <term><literal>Operations</literal></term>

          <listitem>
            <indexterm>
              <primary>Signal Operations</primary>
            </indexterm>
            <indexterm>
              <primary>Operations</primary>
              <secondary>of Signal</secondary>
            </indexterm>

            <para>Text area.

Lists all the operations (see <xref linkend="s1.ref.operation"/>)
defined on this signal.

&Button1; click navigates to the selected operation, &button2; click
brings up a pop up menu with five entries.
</para>

          <itemizedlist>
            <listitem><para><literal>Open</literal>. Navigate to the
              selected operation.</para></listitem>

            <listitem><para><literal>Add</literal>. Add a new
              operation and navigate to it.</para></listitem>

            <listitem><para><literal>Delete</literal>. Removes the selected
              operation from the model.</para></listitem>

            <listitem><para><literal>Move Up</literal>. Only available where
              there are two or more operations, and the operation selected is
              not at the top. It is moved up one.</para></listitem>

            <listitem><para><literal>Move Down</literal>. Only available where
              there are two or more operations listed, and the operation
              selected is not at the bottom. It is moved down
              one.</para></listitem>
          </itemizedlist>

          <caution><para>Signals should not have any
            operations.</para></caution></listitem>
        </varlistentry-->

        <!-- Entry for Attributes -->

        <!--varlistentry>
          <term><literal>Attributes</literal></term>

          <listitem>
            <indexterm>
              <primary>Signal Attributes</primary>
            </indexterm>
            <indexterm>
              <primary>Attributes</primary>
              <secondary>of Signal</secondary>
            </indexterm>

            <para>Text area.

Lists all the attributes (see <xref linkend="s1.ref.attribute"/>)
defined for this class.

These are effectively the parameters to the signal.

&Button1; click navigates to the selected attribute,
&button2; click brings up a pop up menu with five entries.
</para>

          <itemizedlist>
            <listitem><para><literal>Open</literal>. Navigate to the
              selected attribute.</para></listitem>

            <listitem><para><literal>Add</literal>. Add a new
              attribute and navigate to it.</para></listitem>

            <listitem><para><literal>Delete</literal>. Removes the selected
              attribute from the model.</para></listitem>

            <listitem><para><literal>Move Up</literal>. Only available where
              there are two or more attributes, and the attribute selected is
              not at the top. It is moved up one.</para></listitem>

            <listitem><para><literal>Move Down</literal>. Only available where
              there are two or more attributes listed, and the attribute
              selected is not at the bottom. It is moved down
              one.</para></listitem> </itemizedlist></listitem>
        </varlistentry-->

        <!-- Entry for Associations -->

        <!--varlistentry>
          <term><literal>Associations</literal></term>

          <listitem>
            <indexterm>
              <primary>Signal Associations</primary>
            </indexterm>
            <indexterm>
              <primary>Associations</primary>
              <secondary>of Signal</secondary>
            </indexterm>

            <para>Text area.

Lists all the associations (see <xref linkend="s1.ref.association_class"/>)
defined on this signal.

&Button1; click navigates to the selected association,
&button2; click brings up a pop up menu with five entries.
</para>

          <itemizedlist>
            <listitem><para><literal>Open</literal>. Navigate to the
              selected association.</para></listitem>

            <listitem><para><literal>Add</literal>. Add a new
              association and navigate to it.</para></listitem>

            <listitem><para><literal>Delete</literal>. Removes the selected
              association from the model.</para></listitem>

            <listitem><para><literal>Move Up</literal>. Only available where
              there are two or more associations, and the association selected
              is not at the top. It is moved up one.</para></listitem>

            <listitem><para><literal>Move Down</literal>. Only available where
              there are two or more associations listed, and the association
              selected is not at the bottom. It is moved down
              one.</para></listitem>
          </itemizedlist>

          <caution><para>Signals should not have any
            associations&mdash;the concept is
            meaningless.</para></caution></listitem>
        </varlistentry-->
        
        <!-- Entry for Contexts -->

        <varlistentry>
          <term><literal>Contexts</literal></term>

          <listitem>
            <indexterm>
              <primary>Signal Contexts</primary>
            </indexterm>
            <indexterm>
              <primary>Contexts</primary>
              <secondary>of Signal</secondary>
            </indexterm>

            <para>Text area.
Lists all the contexts defined for this signal.

&Button1; click navigates to the selected context,
<!-- TODO: Should be a double click! See issue ... -->
&button2; click brings up a pop up menu with three entries.
</para>

          <itemizedlist>
            <listitem><para><literal>Open</literal>. Navigate to the
              selected context.</para></listitem>

            <listitem><para><literal>Delete</literal>. Removes the selected
              context from the signal.</para></listitem>
              
            <listitem>
              <para>
<literal>Add</literal>.
Add a new context.
This opens the <emphasis>Add context</emphasis> dialog box (see figure
below), which allows choosing between all possible operations, and
adding them to the selected list.
</para>

              <figure id="fig.ref.signal_add_context" float="1">
                <title>The <quote>add context</quote> dialog box</title>
                <screenshot><mediaobject><imageobject>
                  <imagedata format="PNG" align="center"
                     fileref="images/reference/signal_add_context.png"/>
                   </imageobject>
                 </mediaobject></screenshot>
               </figure>

            </listitem>
          </itemizedlist>

          </listitem>
        </varlistentry>
        
        <!-- Entry for Receptions -->

        <varlistentry>
          <term><literal>Receptions</literal></term>

          <listitem>
            <indexterm>
              <primary>Signal Receptions</primary>
            </indexterm>
            <indexterm>
              <primary>Receptions</primary>
              <secondary>of Signal</secondary>
            </indexterm>

            <para>Text area.

Lists all the receptions defined for this signal.

&Button1; click navigates to the selected reception,
<!-- TODO: Should be a double click!  See issue ... -->
&button2; click brings up a pop up menu with three entries.
</para>

          <itemizedlist>
            <listitem><para><literal>Open</literal>. Navigate to the
              selected reception.</para></listitem>

            <listitem><para><literal>Delete</literal>. Removes the selected
              reception from the model.</para></listitem>
              
            <listitem>
              <para><literal>Add</literal>. 
                Add a new
                reception and selects it, 
                so that its property panel becomes
                visible. 
              </para>
            </listitem>
          </itemizedlist>

          </listitem>
        </varlistentry>
        
      </variablelist>
    </sect2>
  </sect1>

  <!-- Reception artifact (subsidiary of Operation). -->

  <sect1 id="s1.ref.reception">
    <title>Reception (to be written)</title>

    <para>A reception is ...</para>

  </sect1>

  <!-- Association artifact. Has Association End as sub-artifact. Reference
       back to Use Case -->

  <sect1 id="s1.ref.association_class">
    <title>Association</title>

    <indexterm>
      <primary>Association</primary>
    </indexterm>

    <para>An association on a class diagram represents a relationship between
      classes, or between a class and an interface.</para>

    <para>Within the UML metamodel, <literal>Association</literal> is a
      sub-class of both <literal>Relationship</literal> and
      <literal>GeneralizableElement</literal>.</para> 

    <para>The association is represented as a line connecting actor and class
      or interface (see <xref linkend="fig.ref.class_diagram"/>). The name of
      the association and any stereotype appear above the line.
    </para>

    <caution><para>&argouml; is restricted to binary associations at
      present. See <xref linkend="s2.ref.association_multiway"/> for more on
      this.</para></caution>

    <para>Associations are permitted between interfaces and classes, but
      UML&nbsp;1.3 specifies they must only be navigable toward the
      interface&mdash;in other words the interface cannot see the
      class. &argouml; will draw such associations with the appropriate
      navigation.</para>

    <para>Associations are often not named, since their meaning is obvious from
      the context.</para>

    <note>
      <para>&argouml; provides no specific way of showing the direction of
the association as described in the UML 1.3 standard.

The naming should attempt to make this clear.
<!-- TODO: We would be better than Rose if we would have this!
See enhancement issue ... -->
</para>
    </note>

    <para>The association contains two ends, which may be navigated to via the
      association property sheet. See <xref
      linkend="s1.ref.association_end_class"/> for more
      information.
    </para>

    <!-- A bit about multiway associations & association classes-->

    <sect2 id="s2.ref.association_multiway">
      <title>Three-way and Greater Associations and Association Classes</title>

      <para>UML&nbsp;1.3 provides for N-ary associations and
        associations that are governed by a third
        <emphasis>associative class</emphasis>. 
        However, &argouml; provides no support
        for neither at this stage.
        <!-- The association classes are requested by issue 393. -->
      </para>
    </sect2>

    <!-- The details tabs -->

    <sect2>
      <title>Association Details Tabs</title>

      <para>The details tabs that are active for associations are as
        follows.</para>

      <indexterm>
        <primary>Association Details Tabs</primary>
      </indexterm>
      <indexterm>
        <primary>Details Tabs</primary>
        <secondary>for Association</secondary>
      </indexterm>

      <variablelist>

        <!-- Entry for ToDoItem tab -->

        <varlistentry>
          <term><literal>ToDoItem</literal></term>

          <listitem><para>Standard tab.</para></listitem>
        </varlistentry>

        <!-- Entry for Properties tab -->

        <varlistentry>
          <term><literal>Properties</literal></term>

          <listitem><para>See <xref
              linkend="s2.ref.association_property_toolbar"/> and <xref
              linkend="s2.ref.association_property_fields"/>
            below.</para></listitem>
        </varlistentry>

        <!-- Entry for Documentation tab -->

        <varlistentry>
          <term><literal>Documentation</literal></term>

          <listitem><para>Standard tab.
See <xref linkend="s2.ref.documentation_tab"/>.
</para>
          </listitem>
        </varlistentry>

        <!-- Entry for Style tab -->

        <varlistentry>
          <term><literal>Style</literal></term>

          <listitem><para>Standard tab. 
            </para>

            <note><para>The values for the bounds of the Association appear
              to have no meaning. Changing them has no effect on the
              diagram. This is sensible behavior, given the association is
              tied to a particular actor and use case.
              <!-- TODO: Yeah, but wouldn't they better be downlighted then? 
              See issue ... -->
          </para></note>
          </listitem>
        </varlistentry>

        <!-- Entry for Source tab -->

        <varlistentry>
          <term><literal>Source</literal></term>

          <listitem><para>Standard tab. You would not expect to generate any
            code for an association, and any code entered here is ignored
            (it will have disappeared when you come back to the
            association.</para></listitem>
        </varlistentry>

        <!-- Entry for Constraints tab -->

        <varlistentry>
          <term><literal>Constraints</literal></term>

          <listitem>
            <para>&constraintssupport;
</para>
          </listitem>
        </varlistentry>

        <!-- Entry for Tagged Values tab -->

        <varlistentry>
          <term><literal>Tagged Values</literal></term>

          <listitem>
            <indexterm>
              <primary>Association Tagged Values</primary>
            </indexterm>
            <indexterm>
              <primary>Tagged Values</primary>
              <secondary>of Association</secondary>
            </indexterm>

            <para>Standard tab.
In the UML metamodel, <literal>Association</literal> has the following
standard tagged values defined.
</para>

            <itemizedlist>
              <listitem><para><literal>persistence</literal>. Values
                <literal>transitory</literal>, indicating state is
                destroyed when an instance is destroyed or
                <literal>persistent</literal>, marking state is
                preserved when an instance is destroyed.</para></listitem>

              <listitem><para><literal>derived</literal> (from the
                superclass, <literal>ModelElement</literal>). Values
                <literal>true</literal>, meaning the association is
                redundant&mdash;it can be formally derived from other
                elements, or <literal>false</literal> meaning it
                cannot.</para>

              <note><para>Derived associations still have their value in
                analysis to introduce useful names or concepts, and in
                design to avoid re-computation.</para></note></listitem>
            </itemizedlist>

            <note><para>The UML <literal>Element</literal> metaclass from
              which all other artifacts are derived includes the tagged
              element <literal>documentation</literal> which is handled by
              the <emphasis>documentation tab</emphasis> under
              &argouml;</para></note></listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <!-- Association properties -->

    <sect2 id="s2.ref.association_property_toolbar">
      <title>Association Property Toolbar</title>

      <indexterm>
        <primary>Association Property Toolbar</primary>
      </indexterm>
      <indexterm>
        <primary>Property Toolbar</primary>
        <secondary>for Association</secondary>
      </indexterm>

      <variablelist>

        <!-- Entry for Go up button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/navigate_up.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Go
            up</literal></term>

          <listitem><para>Navigate up through the package structure of the
            model. For an association this will be the package containing
            the association.</para></listitem>
        </varlistentry>

        <!-- Entry for Delete button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/property_delete.gif"/>
          </imageobject></inlinemediaobject></guiicon>
            <literal>Delete</literal></term>

          <listitem><para>This deletes the selected association from the
            model.</para>

          <warning><para>This is a deletion from the model
            <emphasis>not</emphasis> just the diagram. To delete an
            association from the diagram, but keep it within the model, use
            the main menu <literal>Remove From Diagram</literal>
(or press the Delete key).
</para>
	    </warning>
	  </listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <!-- Fields in the properties tab -->

    <sect2 id="s2.ref.association_property_fields">
      <title>Property Fields For Association</title>

      <indexterm>
        <primary>Association Property Fields</primary>
      </indexterm>
      <indexterm>
        <primary>Property Fields</primary>
        <secondary>for Association</secondary>
      </indexterm>

      <variablelist>

        <!-- Entry for Name -->

        <varlistentry>
          <term><literal>Name</literal></term>

          <listitem>
            <indexterm>
              <primary>Association Name</primary>
            </indexterm>
            <indexterm>
              <primary>Name</primary>
              <secondary>of Association</secondary>
            </indexterm>

            <para>Text box.
The name of the association.

By convention association names start with a lower case letter, with
<quote>bumpy caps</quote> used to indicate words within the name,
thus: <literal>salesHandling</literal>.
</para>

          <note><para>&argouml; does not enforce any naming convention for
            associations.</para></note>

          <tip><para>Although the design critics will advise otherwise, it is
            perfectly normal not to name associations on a class diagram, since
            the relationship is often obvious from the classes (or class and
            interface) name.</para></tip></listitem>
        </varlistentry>

        <!-- Entry for Stereotype -->

        <varlistentry>
          <term><literal>Stereotype</literal></term>

          <listitem>
            <indexterm>
              <primary>Association Stereotype</primary>
            </indexterm>
            <indexterm>
              <primary>Stereotype</primary>
              <secondary>of Association</secondary>
            </indexterm>

            <para>Drop down selector.

Association is provided by default with the UML standard stereotype
for Association ((<literal>implicit)</literal>)
<!-- and the additional Association stereotypes for the Software
Engineering Process and Business Modeling in the UML standard
(<literal>communicate</literal> and
<literal>subscribe</literal>). &argouml; also provides the additional
stereotypes, <literal>machine</literal>,
<literal>organization</literal> and <literal>person</literal> and four
additional stereotypes suggested by some writers using patterns
(<literal>offstage actor</literal>, <literal>primary actor</literal>,
<literal>stakeholder</literal> and <literal>supporting
actor</literal>)-->.
</para>

            <para>Stereotyping can be useful when creating associations in the
              problem domain (requirements capture) and solution domain
              (analysis), as well as for processes based on patterns.
            </para>

            <para>The stereotype is shown between &laquo; and &raquo; below
              the name of the association on the diagram.
            </para>

          </listitem>
        </varlistentry>

        <!-- Entry for Navigate Stereotype -->

        <varlistentry>
          <term><literal>Navigate Stereotype</literal></term>

          <listitem><para><guiicon><inlinemediaobject><imageobject><imagedata
              format="GIF" align="center"
              fileref="images/icons/navigate_stereotype.gif"/>
            </imageobject></inlinemediaobject></guiicon> icon. If a
              stereotype has been selected, this will navigate to the
              stereotype property panel (see <xref
                linkend="s1.ref.stereotype"/>).</para></listitem>
        </varlistentry>

        <!-- Entry for Namespace -->

        <varlistentry>
          <term><literal>Namespace</literal></term>

          <listitem><para>Drop down selector. Records and allows changing
            the namespace for the
            association. This is the package hierarchy.
            </para>
          </listitem>
        </varlistentry>

        <!-- Entry for Association Ends -->

        <varlistentry>
          <term><literal>Association Ends</literal></term>

          <listitem>
            <indexterm>
              <primary>Association Ends</primary>
              <secondary>of Association</secondary>
            </indexterm>

            <para>Text area.
Lists the ends of this association.

An association can have any number of ends, but in &argouml; two is
the only useful number (associative classes can lead to a third end on
class diagrams, but this is not supported by &argouml;).

For more on association ends see
<xref linkend="s1.ref.association_end_class"/>.
</para>

          <para>The names of the association ends are listed, 
            unless the association end has no
            name (the case when it is first created), in which case
            <literal>(anon AssociationEnd)</literal> is shown.</para>

          <note><para>The only representation of association ends on a
            diagram is that their name appears at the relevant end of the
            corresponding association. 
            <!--There is no way to access them from  the diagram.-->
            <!-- MVW: Yes, there is: by button2 click! -->
            </para></note>

          <para>
            &Button1; double click on an association end will navigate to that
            end. 
          </para>

          </listitem>
        </varlistentry>

        <!-- Entry for Generalizations -->

        <!--varlistentry>
          <term><literal>Generalizations</literal></term>

          <listitem>
            <indexterm>
              <primary>Association Generalization</primary>
            </indexterm>
            <indexterm>
              <primary>Generalization</primary>
              <secondary>of Association</secondary>
            </indexterm>

            <para>Text area.

Lists any association that <emphasis>generalizes</emphasis> this
association.
</para>

          <caution><para>It is possible to create generalizations using the
            pop-up menu from here, but there is no way within &argouml; to give
            them a parent, so the entry has no use.</para></caution>

          <para>&Button1; click navigates to the generalization and opens
            its property tab.</para>

          <para>&Button2; click yields a drop down menu with five
            entries</para>

          <itemizedlist>
            <listitem><para><literal>Open</literal>. Navigate to the
              selected generalization.</para></listitem>

            <listitem><para><literal>Add</literal>. Add a new
              generalization. Note that the new generalization is added to
              the model, but not the diagram and there is no way to add it to
              the diagram.</para>

            <tip><para>It is far easier to add generalizations by drawing
              them on the relevant diagram in the editing
              pane.</para></tip></listitem>

            <listitem><para><literal>Delete</literal>. The link from the
              generalization to the association (<emphasis>but not the
              generalization itself</emphasis>) is removed.</para>

            <tip><para>This <emphasis>does not</emphasis> remove the
              generalization from the model or the diagram, leading to
              potentially very confusing diagrams. It is usually far easier
              to remove generalizations from the editing
              pane.</para></tip></listitem>

            <listitem><para><literal>Move Up</literal>. Only available where
              there are two or more generalizations listed, and the
              generalization selected is not at the top. It is moved up
              one.</para></listitem>

            <listitem><para><literal>Move Down</literal>. Only available where
              there are two or more generalizations listed, and the
              generalization selected is not at the bottom. It is moved down
              one.</para></listitem> </itemizedlist></listitem>
        </varlistentry-->

        <!-- Entry for Specializations -->

        <!--varlistentry>
          <term><literal>Specializations</literal></term>

          <listitem>
            <indexterm>
              <primary>Association Specializations</primary>
            </indexterm>
            <indexterm>
              <primary>Specialization</primary>
              <secondary>of Association</secondary>
            </indexterm>

            <para>Text box.
Lists any specialized association (i.e. for which this association is
a generalization.
</para>

          <caution><para>It is possible to create generalizations using the
            pop-up menu from here, but there is no way within &argouml; to give
            them a parent, so the entry has no use.</para></caution>

          <para>&button1; click navigates to the generalization and opens
            its property tab.</para>

          <para>&Button2; click yields a drop down menu with five
            entries</para>

          <itemizedlist>
            <listitem><para><literal>Open</literal>. Navigate to the
              selected generalization.</para></listitem>

            <listitem><para><literal>Add</literal>. Add a new
              generalization. Note that the new generalization is added to
              the model, but not the diagram.</para>

            <tip><para>It is far easier to add generalizations by drawing
              them on the relevant diagram in the editing
              pane.</para></tip></listitem>

            <listitem><para><literal>Delete</literal>. The link from the
              generalization to the association (<emphasis>but not the
              generalization itself</emphasis>) is removed.</para>

            <tip><para>This <emphasis>does not</emphasis> remove the
              generalization from the model or the diagram, leading to
              potentially very confusing diagrams. It is usually far easier
              to remove generalizations from the editing
              pane.</para></tip></listitem>

            <listitem><para><literal>Move Up</literal>. Only available where
              there are two or more specializations listed, and the
              specialization selected is not at the top. It is moved up
              one.</para></listitem>

            <listitem><para><literal>Move Down</literal>. Only available where
              there are two or more specializations listed, and the
              specialization selected is not at the bottom. It is moved down
              one.</para></listitem> </itemizedlist></listitem>
        </varlistentry-->

        <!-- Entry for Association Roles -->
        <!-- TODO: To be completed. -->

        <!-- Entry for Links -->
        <!-- TODO: To be completed. -->

        </variablelist>
    </sect2>
  </sect1>

  <!-- Association End artifact (sub-artifact of Association). Reference back
       to Use Case -->

  <sect1 id="s1.ref.association_end_class">
    <title>Association End</title>

    <indexterm>
      <primary>Association End</primary>
    </indexterm>

    <para>Two or more association ends are associated with each association
      (see <xref linkend="s1.ref.association_use_case"/>), although for
      &argouml;, the number of ends can only be two.</para>

    <para>Within the UML metamodel, <literal>AssociationEnd</literal> is a
      sub-class of <literal>ModelElement</literal>.</para>

    <para>The association end has no direct access on any diagram, although its
      stereotype, name and multiplicity is shown at the relevant end of the
      parent association (see <xref linkend="fig.ref.use_case_diagram"/>).
      Where shared or composite aggregation is selected for one association
      end, the opposite end is shown as a solid diamond (composite aggregation)
      or hollow diamond (shared aggregation).</para>

    <tip><para>Although you can change attributes of association ends when
      creating a use case model, this is often not necessary. Many of the
      properties of an association end relate to its use in class diagrams, and
      are of limited relevance to use cases. The most useful attributes to
      consider altering are the name (used as the role name) and the
      multiplicity.</para></tip>

    <note><para>&argouml; does not currently support qualifiers, as described
        in the UML&nbsp;1.3 standard.
        <!-- TODO: See enhancement issue ... -->
      </para>
    </note>

    <!-- The details tabs -->

    <sect2>
      <title>Association End Details Tabs</title>

      <para>The details tabs that are active for associations are as
        follows.</para>

      <indexterm>
        <primary>Association End Details Tabs</primary>
      </indexterm>
      <indexterm>
        <primary>Details Tabs</primary>
        <secondary>for Association End</secondary>
      </indexterm>

      <variablelist>

        <!-- Entry for ToDoItem tab -->

        <varlistentry>
          <term><literal>ToDoItem</literal></term>

          <listitem><para>Standard tab.</para></listitem>
        </varlistentry>

        <!-- Entry for Properties tab -->

        <varlistentry>
          <term><literal>Properties</literal></term>

          <listitem><para>See <xref
              linkend="s2.ref.association_end_property_toolbar"/> and <xref
              linkend="s2.ref.association_end_property_fields"/>
            below.</para></listitem>
        </varlistentry>

        <!-- Entry for Documentation tab -->

        <varlistentry>
          <term><literal>Documentation</literal></term>

          <listitem><para>Standard tab.
See <xref linkend="s2.ref.documentation_tab"/>.
</para>
          </listitem>
        </varlistentry>

        <!-- Entry for Source tab -->

        <varlistentry>
          <term><literal>Source</literal></term>

          <listitem><para>Standard tab. This tab contains a
            declaration for the association end as an instance of the
            artifact to which it is connected.
            </para>
          </listitem>
        </varlistentry>

        <!-- Entry for Constraints tab -->

        <varlistentry>
          <term><literal>Constraints</literal></term>

          <listitem>
            <para>&constraintssupport;
</para>
          </listitem>
        </varlistentry>

        <!-- Entry for Tagged Values tab -->

        <varlistentry>
          <term><literal>Tagged Values</literal></term>

          <listitem>
            <indexterm>
              <primary>Association End Tagged Values</primary>
            </indexterm>
            <indexterm>
              <primary>Tagged Values</primary>
              <secondary>of Association End</secondary>
            </indexterm>

            <para>Standard tab.
In the UML metamodel, <literal>AssociationEnd</literal> has the
following standard tagged values defined.
</para>

            <itemizedlist>
              <listitem><para><literal>derived</literal> (from the
                superclass, <literal>ModelElement</literal>). Values
                <literal>true</literal>, meaning the association end is
                redundant&mdash;it can be formally derived from other
                elements, or <literal>false</literal> meaning it
                cannot.</para>

              <tip><para>Derived association ends still have their value in
                analysis to introduce useful names or concepts, and in
                design to avoid re-computation. However the tag only makes
                sense for an association end if it is also applied to the
                parent association.</para></tip></listitem>
            </itemizedlist>

            <note><para>The UML <literal>Element</literal> metaclass from
              which all other artifacts are derived includes the tagged
              element <literal>documentation</literal> which is handled by
              the <emphasis>documentation tab</emphasis> under
              &argouml;</para></note></listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <!-- Association end properties -->

    <sect2 id="s2.ref.association_end_property_toolbar">
      <title>Association End Property Toolbar</title>

      <indexterm>
        <primary>Association End Property Toolbar</primary>
      </indexterm>
      <indexterm>
        <primary>Property Toolbar</primary>
        <secondary>for Association End</secondary>
      </indexterm>

      <variablelist>

        <!-- Entry for Go up button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/navigate_up.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Go
            up</literal></term>

          <listitem><para>Navigate up to the association to which this end
            belongs.</para></listitem> 
        </varlistentry>

        <!-- Entry for Go to other end button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/association_end.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Go to other
            end</literal></term>

          <listitem><para>This navigates to the other end of the
            association.</para></listitem>
        </varlistentry>
        
        <!-- TODO: In the V0.14 - V0.15.1 implementation, there is also a downlighted
        "Delete" icon. This should be removed. See enhancement issue ... -->
      </variablelist>
    </sect2>

    <!-- Fields in the properties tab -->

    <sect2 id="s2.ref.association_end_property_fields">
      <title>Property Fields For Association End</title>

      <indexterm>
        <primary>Association End Property Fields</primary>
      </indexterm>
      <indexterm>
        <primary>Property Fields</primary>
        <secondary>for Association End</secondary>
      </indexterm>

      <variablelist>

        <!-- Entry for Name -->

        <varlistentry>
          <term><literal>Name</literal></term>

          <listitem>
            <indexterm>
              <primary>Association End Name</primary>
            </indexterm>
            <indexterm>
              <primary>Name</primary>
              <secondary>of Association End</secondary>
            </indexterm>

            <para>Text box.

The name of the association end, which provides a <emphasis>role
name</emphasis> for this end of the association.

This role name can be used for navigation, and in an implementation
context, provides a name by which the source end of an association can
reference the target end.
</para>

          <!-- TODO: This thing doesn't work in the vPRE-0.15.2 version. 
          It is the association that gets named, not the AssociationEnd.
          Test this when V0.15.2 will be released. See issue ... -->

          <note><para>&argouml; does not enforce any naming convention for
            association ends.</para></note></listitem>
        </varlistentry>

        <!-- Entry for Stereotype -->

        <varlistentry>
          <term><literal>Stereotype</literal></term>

          <listitem>
            <indexterm>
              <primary>Association End Stereotype</primary>
            </indexterm>
            <indexterm>
              <primary>Stereotype</primary>
              <secondary>of Association End</secondary>
            </indexterm>

            <para>Drop down selector.

Association end is provided by default with the UML standard
stereotypes for AssociationEnd 
(<literal>association</literal>,
 <literal>global</literal>,
 <literal>local</literal>,
 <literal>parameter</literal>,
 <literal>self</literal>).

However &argouml; does not provide any of these by default.

Only the stereotype <literal>implicit</literal> is present.
<!-- TODO: See enhancement issue ... -->
</para>
          </listitem>
        </varlistentry>

        <!-- Entry for Navigate Stereotype -->

        <varlistentry>
          <term><literal>Navigate Stereotype</literal></term>

          <listitem><para><guiicon><inlinemediaobject><imageobject><imagedata
              format="GIF" align="center"
              fileref="images/icons/navigate_stereotype.gif"/>
            </imageobject></inlinemediaobject></guiicon> icon. If a
              stereotype has been selected, this will navigate to the
              stereotype property panel (see <xref
                linkend="s1.ref.stereotype"/>).</para></listitem>
        </varlistentry>

        <!-- Entry for Association -->

        <varlistentry>
          <term><literal>Association</literal></term>

          <listitem><para>Text box. Records the parent association for this
            association end. &Button1; double click on
            this entry will navigate to that association. 
            </para>
          </listitem>
        </varlistentry>

        <!-- Entry for Type -->

        <varlistentry>
          <term><literal>Type</literal></term>

          <listitem>
            <indexterm>
              <primary>Association End Type</primary>
            </indexterm>
            <indexterm>
              <primary>Type</primary>
              <secondary>of Association End</secondary>
            </indexterm>

            <para>Drop down selector providing access to all standard
UML types provided by &argouml; and all new classes created within the
current model.
</para>

            <para>This is the type of the entity attached to this end of the
              association.</para>

            <tip>
              <para>
                By default &argouml; will select the class of the
                artifact to which the linkend is connected. 
                However, an association can be moved to another class 
                by selecting another entry here.
              </para>
            </tip>
          </listitem>
          <!-- TODO: This thing is empty in the vPRE-0.15.2 version. 
          Test this when V0.15.2 will be released. See issue ... -->
        </varlistentry>

        <!-- Entry for Multiplicity -->

        <varlistentry>
          <term><literal>Multiplicity</literal></term>

          <listitem>
            <indexterm>
              <primary>Association End Multiplicity</primary>
            </indexterm>
            <indexterm>
              <primary>Multiplicity</primary>
              <secondary>of Association End</secondary>
            </indexterm>

            <para>Drop down menu with edit box. 
The value can be chosen from the drop down box, or a new one can be 
edited in the text box.

Records the multiplicity of this association end (with respect to the
other end), i.e. how many instances of this end may be associated with
an instance of the other end.

The multiplicity is shown on the diagram at that end of the
association.
</para>
          </listitem>
        </varlistentry>

        <!-- Entry for Modifiers -->

        <varlistentry>
          <term><literal>Modifiers</literal></term>

          <listitem>
            <indexterm>
              <primary>Association End Modifiers</primary>
            </indexterm>
            <indexterm>
              <primary>Modifiers</primary>
              <secondary>of Association End</secondary>
            </indexterm>

            <para>
              There are 3 modifiers: <literal>navigable</literal>,
              <literal>ordered</literal> and <literal>static</literal>. All 3 are
              checkboxes.
            </para>
          
            <itemizedlist>
              <listitem>
                <para>
                  <literal>navigable</literal>. Indicates that this end can be
                  navigated to from the other end.
                </para>

                <note>
                  <para>
The UML 1.3 standard provides a number of options for
how navigation is displayed on an association end.

&argouml; uses
<!-- TODO: Check if this is true, and if it is good. -->
option 3, which means that arrow heads are shown at the end of
an association, when navigation is enabled at only one end, to
indicate the direction in which navigation is possible.

This means that the default, with both ends navigable has no arrows.
</para>
                </note>
              </listitem>

              <listitem>
                <para><literal>ordered</literal>
                  When placed on one end, specifies whether the set of links
                  from the other instance to this instance is ordered. 
                  The ordering must be determined and maintained by Operations that
                  add links. It represents additional information not inherent in the
                  objects or links themselves. Possibilities for the checkbox are:
                  Unchecked - The links form a set with no inherent ordering.
                  Checked - A set of ordered links can be scanned in order.
                </para>
              </listitem>
            
            
              <listitem>
                <para><literal>Static</literal> 
                  (To be written)
                  <!-- TODO: to be written and checked. -->
                </para>
              </listitem>
            </itemizedlist>  
          </listitem>
        </varlistentry>

        <!-- Entry for Specification -->

        <varlistentry>
          <term><literal>Specification</literal></term>

          <listitem>
            <para>
              List. Designates zero or more Classifiers that specify the 
              Operations that may be applied to an Instance accessed by the
              AssociationEnd across the Association. These determine the
              minimum interface that must be realized by the actual Classifier
              attached to the end to support the intent of the Association. May
              be an Interface or another Classifier. The type of classifier is
              indicated by an icon.
            </para>
            <para>
              &Button1; double click navigates to the selected classifier,
              &button2; click brings a pop up menu with
              one entry.
            </para>
            <itemizedlist>
              <listitem>
                <para>
                  <literal>Add</literal>. 
<!-- TODO: This would better be named Add/Remove. See issue ... -->
Add a new specification classifier. 
This opens the <emphasis>Add/Remove Specifications</emphasis>
dialog box (see figure below), 
which allows choosing between all possible classifiers,
and adding or removing them to the selected list.
</para>

                <figure id="fig.ref.signal_add_specification" float="1">
                  <title>The <quote>Add/Remove Specifications</quote> dialog box</title>
                  <screenshot><mediaobject><imageobject>
                    <imagedata format="PNG" align="center"
                     fileref="images/reference/signal_add_specification.png"/>
                  </imageobject></mediaobject></screenshot>
                </figure>

              </listitem>            
            </itemizedlist>
          </listitem>
        </varlistentry>

        <!-- Entry for Aggregation -->

        <varlistentry>
          <term><literal>Aggregation</literal></term>

          <listitem>
            <indexterm>
              <primary>Association End Aggregation</primary>
            </indexterm>
            <indexterm>
              <primary>Aggregation</primary>
              <secondary>of Association End</secondary>
            </indexterm>

            <para>Radio box, with three entries
              <literal>composite</literal>, <literal>none</literal> and
              <literal>aggregate</literal>. Indicates whether the
              relationship with the far end represents some type of loose
              whole-part relationship (<literal>aggregation</literal>) or tight
              whole-part relationship (<literal>composite</literal>).</para> 

            <para>Shared aggregation is shown by a hollow diamond at the
              <quote>whole</quote> end of the association. Composite aggregation
              is shown by a solid diamond.
            </para>

            <note>
              <para>
                You may not have aggregation at both ends of an
                association. &argouml; does not enforce this constraint.
              </para>
              <para>
                The <quote>whole</quote> end of a composite
                aggregation should have a multiplicity of
                one. &argouml; does not enforce this constraint.
              </para>
            </note>
          </listitem>
        </varlistentry>

        <!-- Entry for Changeability -->

        <varlistentry>
          <term><literal>Changeability</literal></term>

          <listitem>
            <indexterm>
              <primary>Association End Changeability</primary>
            </indexterm>
            <indexterm>
              <primary>Changeability</primary>
              <secondary>of Association End</secondary>
            </indexterm>

            <para>Radio box, with three entries
<literal>changeable</literal>,
<literal>add only</literal> and
<literal>frozen</literal>.

Indicates whether instances of this end of the attributed may be:
i) created and deleted by the source after the target instance is
created;
ii) created but not deleted after the target instance is created; or
iii) not created or deleted by the source after the target instance is
created.
</para>
          </listitem>
        </varlistentry>

        <!-- Entry for Visibility -->

        <varlistentry>
          <term><literal>Visibility</literal></term>

          <listitem>
            <indexterm>
              <primary>Association End Visibility</primary>
            </indexterm>
            <indexterm>
              <primary>Visibility</primary>
              <secondary>of Association End</secondary>
            </indexterm>

            <para>Radio box, with three entries
<literal>public</literal>,
<literal>private</literal> and
<literal>protected</literal>.

Indicates whether navigation to this end may be by:
i) any classifier;
ii) only by the source classifier; or
iii) only the source classifier and its children.
</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>
  </sect1>

  <!-- Dependency -->

  <sect1 id="s1.ref.dependency_class">
    <title>Dependency</title>
    <indexterm>
      <primary>Dependency</primary>
    </indexterm>

    <para>Dependency is a relationship between two artifacts showing that one
      depends on the other.</para>

    <para>Within the UML metamodel, <literal>Dependency</literal> is a
      sub-class of <literal>Relationship</literal>.</para>

    <para>Dependency is represented as a dotted line with an open arrow head
from the depending artifact to that which it is dependent upon
(see <xref linkend="fig.ref.use_case_diagram"/>).
</para>

    <!-- The details tabs -->

    <sect2>
      <title>Dependency Details Tabs</title>
      <indexterm>
        <primary>Dependency Details Tabs</primary>
      </indexterm>
      <indexterm>
        <primary>Details Tabs</primary>
        <secondary>for Dependency</secondary>
      </indexterm>

      <para>The details tabs that are active for dependencies are as
        follows.</para>

      <note><para>There is no source tab, since there is no source code that
        could be generated for a dependency relationship.</para></note>

      <variablelist>

        <!-- Entry for ToDoItem tab -->

        <varlistentry>
          <term><literal>ToDoItem</literal></term>

          <listitem><para>Standard tab.</para></listitem>
        </varlistentry>

        <!-- Entry for Properties tab -->

        <varlistentry>
          <term><literal>Properties</literal></term>

          <listitem><para>See <xref
              linkend="s2.ref.dependency_property_toolbar"/> and <xref
              linkend="s2.ref.dependency_property_fields"/>
            below.</para></listitem>
        </varlistentry>

        <!-- Entry for Documentation tab -->

        <varlistentry>
          <term><literal>Documentation</literal></term>

          <listitem>
            <para>Standard tab.
See <xref linkend="s2.ref.documentation_tab"/>.
</para>
          </listitem>
        </varlistentry>

        <!-- Entry for Style tab -->

        <varlistentry>
          <term><literal>Style</literal></term>

          <listitem><para>Standard tab</para>

          <note><para>The values for the bounds of the dependency appear to
            have no meaning. Changing them has no effect on the
            diagram. This is sensible behavior, given the dependency is
            tied to a particular use case.</para></note></listitem>
        </varlistentry>

        <!-- Entry for Constraints tab -->

        <varlistentry>
          <term><literal>Constraints</literal></term>

          <listitem>
            <para>&constraintssupport;
</para>
          </listitem>
        </varlistentry>

        <!-- Entry for Tagged Values tab -->

        <varlistentry>
          <term><literal>Tagged Values</literal></term>

          <listitem><para>Standard tab. In the UML metamodel,
            <literal>Dependency</literal> has no tagged values of its own, but
            through superclasses has the following standard tagged values
            defined.</para>

            <itemizedlist>
              <listitem><para><literal>derived</literal> (from the superclass,
                <literal>ModelElement</literal>). Values
                <literal>true</literal>, meaning the dependency relationship is
                redundant&mdash;it can be formally derived from other elements,
                or <literal>false</literal> meaning it cannot.</para>

              <note><para>Derived dependencies still have their value in
                analysis to introduce useful names or
                concepts.</para></note></listitem>
            </itemizedlist>

          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <!-- Dependency properties -->

    <sect2 id="s2.ref.dependency_property_toolbar">
      <title>Dependency Property Toolbar</title>

      <variablelist>

        <!-- Entry for Go up button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/navigate_up.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Go
            up</literal></term>

          <listitem><para>Navigate up through the package structure of the
            model. For a dependency this will be the package containing
            the dependency.</para></listitem>
        </varlistentry>

        <!-- Entry for Delete button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/property_delete.gif"/>
          </imageobject></inlinemediaobject></guiicon>
            <literal>Delete</literal></term>

          <listitem><para>This deletes the selected dependency from the
            model.</para>

          <warning><para>This is a deletion from the model
            <emphasis>not</emphasis> just the diagram. To delete a
            dependency from the diagram, but keep it within the model, use
            the main menu <literal>Remove From Diagram</literal>
(or press the Delete key).
</para>
            </warning>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <!-- Fields in the properties tab -->

    <sect2 id="s2.ref.dependency_property_fields">
      <title>Property Fields For Dependency</title>

      <variablelist>

        <!-- Entry for Name -->

        <varlistentry>
          <term><literal>Name</literal></term>

          <listitem>
            <indexterm>
              <primary>Dependency Name</primary>
            </indexterm>
            <indexterm>
              <primary>Name</primary>
              <secondary>of Dependency</secondary>
            </indexterm>

            <para>Text box.
The name of the dependency.
</para>

          <tip><para>It is quite common to leave dependencies
            unnamed.</para></tip> 

          <note><para>&argouml; does not enforce any naming convention for
            associations.</para></note>

          <note><para>There is no representation of the name of a
            dependency on the diagram.</para></note></listitem>
        </varlistentry>

        <!-- Entry for Stereotype -->

        <varlistentry>
          <term><literal>Stereotype</literal></term>

<!-- Issue: 2146 -->
          <listitem>
            <indexterm>
              <primary>Dependency Stereotype</primary>
            </indexterm>
            <indexterm>
              <primary>Stereotype</primary>
              <secondary>of Dependency</secondary>
            </indexterm>

              <para>Drop down selector.
Dependency has no standard stereotypes of its own under UML&nbsp;1.3. and
so &argouml; does not provide any.
The stereotype is shown between
            &laquo; and &raquo; above or across the
            generalization.</para></listitem>
        </varlistentry>

        <!-- Entry for Navigate Stereotype -->

        <varlistentry>
          <term><literal>Navigate Stereotype</literal></term>

          <listitem><para><guiicon><inlinemediaobject><imageobject><imagedata
              format="GIF" align="center"
              fileref="images/icons/navigate_stereotype.gif"/>
            </imageobject></inlinemediaobject></guiicon> icon. If a
              stereotype has been selected, this will navigate to the
              stereotype property panel (see <xref
                linkend="s1.ref.stereotype"/>).</para></listitem>
        </varlistentry>

        <!-- Entry for Namespace -->

        <varlistentry>
          <term><literal>Namespace</literal></term>

          <listitem>
            <indexterm>
              <primary>Dependency Namespace</primary>
            </indexterm>
            <indexterm>
              <primary>Namespace</primary>
              <secondary>of Dependency</secondary>
            </indexterm>

            <para>Text box.
Records the namespace for the
            dependency. This is the package hierarchy.</para>

          </listitem>
        </varlistentry>

        <!-- Entry for Suppliers -->

        <varlistentry>
          <term><literal>Suppliers</literal></term>

          <listitem>
            <indexterm>
              <primary>Dependency Suppliers</primary>
            </indexterm>
            <indexterm>
              <primary>Suppliers</primary>
              <secondary>of Dependency</secondary>
            </indexterm>

            <para>Text area.
Lists the <quote>depending</quote> ends
            of the relationship, i.e. the end supplying what is needed by
            the other end.</para>

            <para>
&Button1; Double Click on a client will navigate to that use case.
</para>

          </listitem>
        </varlistentry>

        <!-- Entry for Clients -->

        <varlistentry>
          <term><literal>Clients</literal></term>

          <listitem>
            <indexterm>
              <primary>Dependency Clients</primary>
            </indexterm>
            <indexterm>
              <primary>Clients</primary>
              <secondary>of Dependency</secondary>
            </indexterm>

            <para>Text area.
Lists the <quote>depending</quote> ends
            of the relationship, i.e. the end that makes use of the other end.
            </para>

            <para>
&Button1; Double Click on a client will navigate to that use case.
</para>

          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>
  </sect1>

  <!-- Generalization artifact. Reference back to Use Case -->

  <!-- TODO: Move the description from the use-case chapter over here. -->
  <sect1 id="s1.ref.generalization_class">
    <title>Generalization</title>

    <para>Generalization is described under use case diagrams (see <xref
      linkend="s1.ref.generalization_use_case"/>).</para>

    <note><para>Within the context of classes, generalization and
      specialization are the UML terms describing class
      inheritance.</para></note>
  </sect1>

  <!-- Interface artifact -->

  <sect1 id="s1.ref.interface_class">
    <title>Interface</title>

    <para>An interface is a set of operations characterizing the behavior of
      an element. It can be usefully thought of as an abstract class with no
attributes and no non-abstract operations.
In the UML metamodel it is a sub-class of
      <literal>Classifier</literal> and through that
      <literal>GeneralizableElement</literal>.</para>

    <para>
      An interface is represented on a class diagram as a rectangle with two
      horizontal compartments. The top compartment displays the interface name
      (and above it <literal>&laquo;interface&raquo;</literal>) and the second
      any operations. 
      Just like a class, the operations compartment can be hidden.
    </para>

    <!-- Interface details tabs -->

    <sect2>
      <title>Interface Details Tabs</title>

      <para>The details tabs that are active for interfaces are as
        follows.</para>

      <variablelist>

        <!-- Entry for ToDoItem tab -->

        <varlistentry>
          <term><literal>ToDoItem</literal></term>

          <listitem><para>Standard tab.</para></listitem>
        </varlistentry>

        <!-- Entry for Properties tab -->

        <varlistentry>
          <term><literal>Properties</literal></term>

          <listitem><para>See <xref
              linkend="s2.ref.interface_property_toolbar"/> and <xref
              linkend="s2.ref.interface_property_fields"/>
            below.</para></listitem>
        </varlistentry>

        <!-- Entry for Documentation tab -->

        <varlistentry>
          <term><literal>Documentation</literal></term>

          <listitem><para>Standard tab.
See <xref linkend="s2.ref.documentation_tab"/>.
</para>
          </listitem>
        </varlistentry>

        <!-- Entry for Style tab -->

        <varlistentry>
          <term><literal>Style</literal></term>

          <listitem><para>Standard tab. 
            The tick box <literal>Display Operations</literal> allows 
            the operation compartment to be shown (the default) or hidden. This
            is a setting valid for all diagrams that show the interface.
            The <literal>Bounds:</literal> field
            defines the bounding box for the package on the
            diagram.</para></listitem>
        </varlistentry>

        <!-- Entry for Source tab -->

        <varlistentry>
          <term><literal>Source</literal></term>

          <listitem><para>Standard tab. This contains a template for the
            interface declaration and declarations of
            associated interfaces.</para></listitem>
        </varlistentry>

        <!-- Entry for Constraints tab -->

        <varlistentry>
          <term><literal>Constraints</literal></term>

          <listitem><para>&constraintssupport;
</para>
          </listitem>
        </varlistentry>

        <!-- Entry for Tagged Values tab -->

        <varlistentry>
          <term><literal>Tagged Values</literal></term>

          <!-- TODO: Check all this. -->
          <listitem><para>Standard tab. In the UML metamodel,
            <literal>Interface</literal> has the following standard tagged
            values defined.</para>

            <itemizedlist>
              <listitem><para><literal>persistence</literal> (from the
                superclass, <literal>Classifier</literal>). Values
                <literal>transitory</literal>, indicating state is
                destroyed when an instance is destroyed or
                <literal>persistent</literal>, marking state is
                preserved when an instance is destroyed.</para>

              <warning><para>Since interfaces are by definition abstract,
                they can have no instance, and so this tagged value must
                refer to the properties of the realizing
                class.</para></warning></listitem>

              <listitem><para><literal>semantics</literal> (from the
                superclass, <literal>Classifier</literal>). The value is a
                specification of the semantics of the
                interface.</para></listitem>

              <listitem><para><literal>derived</literal> (from the
                superclass, <literal>ModelElement</literal>). Values
                <literal>true</literal>, meaning the interface is
                redundant&mdash;it can be formally derived from other
                elements, or <literal>false</literal> meaning it
                cannot.</para>

              <note><para>Derived interfaces still have their value in
                analysis to introduce useful names or concepts, and in
                design to avoid re-computation.</para></note></listitem>
            </itemizedlist>

            <note><para>The UML <literal>Element</literal> metaclass from
              which all other artifacts are derived includes the tagged
              element <literal>documentation</literal> which is handled by
              the <emphasis>documentation tab</emphasis> under
              &argouml;</para></note></listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <!-- Interface properties -->

    <sect2 id="s2.ref.interface_property_toolbar">
      <title>Interface Property Toolbar</title>

      <variablelist>

        <!-- Entry for Go up button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/navigate_up.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Go
            up</literal></term>

          <listitem><para>Navigate up through the package
            structure.</para></listitem>
        </varlistentry>

        <!-- Entry for Add operation button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/operation.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Add
            operation</literal></term>

          <listitem><para>This creates a new operation (see <xref
              linkend="s1.ref.operation"/>) within the interface,
              navigating immediately to the properties tab for that
              operation.</para></listitem>
        </varlistentry>

        <!-- Entry for Delete button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/property_delete.gif"/>
          </imageobject></inlinemediaobject></guiicon>
            <literal>Delete</literal></term>

          <listitem><para>This deletes the interface from the model</para>

          <warning><para>This is a deletion from the model
            <emphasis>not</emphasis> just the diagram. To delete an
            interface from the diagram, but keep it within the model, use
            the main menu <literal>Remove From Diagram</literal>
(or press the Delete key).
</para>
	    </warning>
	  </listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <!-- Fields in the properties tab -->

    <sect2 id="s2.ref.interface_property_fields">
      <title>Property Fields For Interface</title>

      <variablelist>

        <!-- Entry for Name -->

        <varlistentry>
          <term><literal>Name</literal></term>

          <listitem><para>Text box. The name of the interface. The name of an
            interface has a leading capital letter, with words separated by
            <quote>bumpy caps</quote>.</para>

          <note><para>Unlike classes, the &argouml; critics will not
            complain about interface names that do not have an initial
            capital.
            <!-- TODO: See enhancement issue ... -->
          </para></note></listitem>
        </varlistentry>

        <!-- Entry for Stereotype -->

        <varlistentry>
          <term><literal>Stereotype</literal></term>

          <listitem>
            <para>Drop down selector. Interface is provided by default
              with the UML standard stereotypes for the parent meta-class,
              <literal>Classifier</literal> (<literal>metaclass</literal>,
              <literal>powertype</literal>, <literal>process</literal>,
              <literal>thread</literal> and <literal>utility</literal>).
            </para>
          </listitem>
        </varlistentry>

        <!-- Entry for Navigate Stereotype -->

        <varlistentry>
          <term><literal>Navigate Stereotype</literal></term>

          <listitem><para><guiicon><inlinemediaobject><imageobject><imagedata
              format="GIF" align="center"
              fileref="images/icons/navigate_stereotype.gif"/>
            </imageobject></inlinemediaobject></guiicon> icon. If a
              stereotype has been selected, this will navigate to the
              stereotype property panel (see <xref
                linkend="s1.ref.stereotype"/>).</para></listitem>
        </varlistentry>

        <!-- Entry for Namespace -->

        <varlistentry>
          <term><literal>Namespace</literal></term>

          <listitem>
            <para>
              Drop down selector. Records and allows changing
              the namespace for the
              interface. This is the package hierarchy.
            </para>
          </listitem>
        </varlistentry>

        <!-- Entry for Modifiers -->

        <varlistentry>
          <term><literal>Modifiers</literal></term>

          <listitem><para>Check box, with entries 
            <literal>Abstract</literal>, <literal>Leaf</literal> and
            <literal>Root</literal>.</para>

          <itemizedlist>
            <listitem><para><literal>Abstract</literal> is used to declare
              that this interface cannot be instantiated, but must always
              be specialized. The name of an abstract interface is
              displayed in italics on the diagram.</para>

            <caution><para>This is meaningless, since by definition an
              interface is an abstract entity. The UML&nbsp;1.3 standard
              offers no clarification.</para></caution></listitem>

            <listitem><para><literal>Leaf</literal> indicates that this
              interface cannot be further specialized, while
              <literal>Root</literal> indicates it can have no
              generalizations.</para></listitem>
          </itemizedlist></listitem>
        </varlistentry>

        <!-- Entry for Visibility -->

        <varlistentry>
          <term><literal>Visibility</literal></term>

          <listitem><para>Radio box, with three entries
            <literal>public</literal>, <literal>protected</literal> and
            <literal>private</literal>. Indicates whether navigation to
            this end may be by: i) any classifier; ii) only the source
            classifier and its children; or iii) only by the source
            classifier.</para></listitem>
        </varlistentry>

        <!-- Entry for Generalizations -->

        <varlistentry>
          <term><literal>Generalizations</literal></term>

          <listitem><para>Text area. Lists any interface that
            <emphasis>generalizes</emphasis> this interface.</para>

            <para>&Button1; double click navigates to the generalization and opens
              its property tab.
            </para>

          </listitem>
        </varlistentry>

        <!-- Entry for Specializations -->

        <varlistentry>
          <term><literal>Specializations</literal></term>

          <listitem><para>Text box. Lists any specialized interface (i.e. for
            which this interface is a generalization.</para>

          <para>&button1; double click navigates to the generalization and opens
            its property tab.</para>

          </listitem>
        </varlistentry>

        <!-- Entry for AssociationEnds -->

        <varlistentry>
          <term><literal>AssociationEnds</literal></term>

          <listitem>
            <para>Text box.

Lists any AssociationEnds (see <xref linkend="s1.ref.association_end_class"/>)
connected to this interface.
</para>

            <note><para>Associations between classes and interfaces
              <emphasis>must</emphasis> be navigable
              <emphasis>only</emphasis> from the class to the
              interface. &argouml; will create associations between classes
              and interfaces with the correct navigability, 
              but does not prevent the user from altering this.
            </para></note>

            <para>
              &Button1; double click navigates to the selected entry.
            </para>
          </listitem>
        </varlistentry>

        <!-- Entry for Operations -->

        <varlistentry>
          <term><literal>Operations</literal></term>

          <listitem>
            <para>
              Text area. Lists all the operations (see <xref
              linkend="s1.ref.operation"/>) defined on this
              interface. &Button1; double click navigates to the selected
              operation.
            </para>

            <caution>
              <para>All operations on an interface
                <emphasis>must</emphasis> be public. The &argouml; critics will
                complain if this is not the case.
              </para>
            </caution>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>
  </sect1>

  <!-- Abstraction artifact. Make it clear that realization is just a
       stereotyped abstraction. -->

  <sect1 id="s1.ref.abstraction">
    <title>Abstraction</title>

    <para>An abstraction is a dependency relationship joining two artifacts
      within the model at different levels of abstraction. Within &argouml; it
      is principally used through its specific stereotype
      <literal>realize</literal> to define realization dependencies, which link
      artifacts that <emphasis>specify</emphasis> behavior to the
      corresponding artifacts that <emphasis>implement</emphasis> the
      behavior.</para>

    <para>In the UML metamodel <literal>Abstraction</literal> is a sub-class of
      <literal>Dependency</literal> and through that
      <literal>Relationship</literal>.</para>

    <para>An abstraction with stereotype <literal>realize</literal> is
      represented on a class diagram as a dotted line with a solid white head
      at the specifying end.</para>

    <caution><para>All other stereotypes of abstraction
      should be represented using an open arrow head, but this is not supported
      by &argouml;</para></caution>

    <!-- Abstraction details tabs -->

    <sect2>
      <title>Abstraction Details Tabs</title>

      <para>The details tabs that are active for abstractions are as
        follows.</para>

      <variablelist>

        <!-- Entry for ToDoItem tab -->

        <varlistentry>
          <term><literal>ToDoItem</literal></term>

          <listitem><para>Standard tab.</para></listitem>
        </varlistentry>

        <!-- Entry for Properties tab -->

        <varlistentry>
          <term><literal>Properties</literal></term>

          <listitem><para>See <xref
              linkend="s2.ref.abstraction_property_toolbar"/> and <xref
              linkend="s2.ref.abstraction_property_fields"/>
            below.</para></listitem>
        </varlistentry>

        <!-- Entry for Documentation tab -->

        <varlistentry>
          <term><literal>Documentation</literal></term>

          <listitem><para>Standard tab.
See <xref linkend="s2.ref.documentation_tab"/>.
</para>
          </listitem>
        </varlistentry>

        <!-- Entry for Style tab -->

        <varlistentry>
          <term><literal>Style</literal></term>

          <listitem><para>Standard tab.</para>

          <note><para>The values for the bounds of the abstraction appear
            to have no meaning. Changing them has no effect on the
            diagram. This is sensible behavior, given the association is
            tied to particular artifacts.</para></note></listitem>
        </varlistentry>

        <!-- Entry for Source tab -->

        <varlistentry>
          <term><literal>Source</literal></term>

          <listitem>
            <para>Standard tab. This contains the single 
              downlighted text 
              <literal>N/A</literal>.
            </para>
          </listitem>
        </varlistentry>

        <!-- Entry for Constraints tab -->

        <varlistentry>
          <term><literal>Constraints</literal></term>

          <listitem>
            <para>&constraintssupport;
</para>
          </listitem>
        </varlistentry>

        <!-- Entry for Tagged Values tab -->

        <varlistentry>
          <term><literal>Tagged Values</literal></term>

          <listitem><para>Standard tab. In the UML metamodel,
            <literal>Abstraction</literal> has the following standard
            tagged values defined.</para>

            <itemizedlist>
              <listitem><para><literal>derived</literal> (from the
                superclass, <literal>ModelElement</literal>). Values
                <literal>true</literal>, meaning the abstraction is
                redundant&mdash;it can be formally derived from other
                elements, or <literal>false</literal> meaning it
                cannot.</para>

              <note><para>Derived abstractions still have their value in
                analysis to introduce useful names or concepts, and in
                design to avoid re-computation.</para></note></listitem>
            </itemizedlist>

            <note><para>The UML <literal>Element</literal> metaclass from
              which all other artifacts are derived includes the tagged
              element <literal>documentation</literal> which is handled by
              the <emphasis>documentation tab</emphasis> under
              &argouml;</para></note></listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <!-- Abstraction properties -->

    <sect2 id="s2.ref.abstraction_property_toolbar">
      <title>Abstraction Property Toolbar</title>

      <variablelist>

        <!-- Entry for Go up button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/navigate_up.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Go
            up</literal></term>

          <listitem><para>Navigate up through the package
            structure.</para></listitem>
        </varlistentry>

        <!-- Entry for Delete button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/property_delete.gif"/>
          </imageobject></inlinemediaobject></guiicon>
            <literal>Delete</literal></term>

          <listitem><para>This deletes the abstraction from the model</para>

          <warning><para>This is a deletion from the model
            <emphasis>not</emphasis> just the diagram. To delete an
            abstraction from the diagram, but keep it within the model, use
            the main menu <literal>Remove From Diagram</literal>
(or press the Delete key).
</para>
	    </warning>
	  </listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <!-- Fields in the properties tab -->

    <sect2 id="s2.ref.abstraction_property_fields">
      <title>Property Fields For Abstraction</title>

      <variablelist>

        <!-- Entry for Name -->

        <varlistentry>
          <term><literal>Name</literal></term>

          <listitem><para>Text box. The name of the abstraction. There are no
            constraints on the name of an abstraction, which is not shown
            on any diagram.</para></listitem>
        </varlistentry>

        <!-- Entry for Stereotype -->

        <varlistentry>
          <term><literal>Stereotype</literal></term>

          <listitem><para>Drop down selector. Abstraction is provided by
            default with the UML standard stereotypes
            <literal>derive</literal>, <literal>realize</literal>,
            <literal>refine</literal> and <literal>trace</literal>.
            </para>

          <caution><para>&argouml; automatically selects the stereotype
            realize when an abstraction is created. The user is free to
            change the stereotype to use the abstraction to indicate for
            example a <literal>trace</literal> relationship. However
            &argouml; will not alter the representation on the diagram
            accordingly.
            <!-- TODO: See enhancement issue ... -->
          </para></caution></listitem>
        </varlistentry>

        <!-- Entry for Navigate Stereotype -->

        <varlistentry>
          <term><literal>Navigate Stereotype</literal></term>

          <listitem><para><guiicon><inlinemediaobject><imageobject><imagedata
              format="GIF" align="center"
              fileref="images/icons/navigate_stereotype.gif"/>
            </imageobject></inlinemediaobject></guiicon> icon. If a
              stereotype has been selected, this will navigate to the
              stereotype property panel (see <xref
                linkend="s1.ref.stereotype"/>).</para></listitem>
        </varlistentry>

        <!-- Entry for Namespace -->

        <varlistentry>
          <term><literal>Namespace</literal></term>

          <listitem>
            <para>
              Drop down selector. Records and allows changing
              the namespace for the
              abstraction. This is the package hierarchy.
            </para>
            <!-- TODO: Yes, you can alter the namespace. Is that useful? Why do
            we have this feature? Investigate. -->
          </listitem>
        </varlistentry>

        <!-- Entry for Suppliers -->

        <varlistentry>
          <term><literal>Suppliers</literal></term>

          <listitem><para>Text area. Lists the artifact that is the supplier
            end of this abstraction (for a realization this is the end
            providing the implementation).</para>

            <note><para> Although this is a text area there is no mechanism
              for adding more than one supplier.</para></note>

            <para>&Button1; double click navigates to the selected entry.
            </para>
          </listitem>
        </varlistentry>

        <!-- Entry for Clients -->

        <varlistentry>
          <term><literal>Clients</literal></term>

          <listitem><para>Text area. Lists the artifact that is the client
            end of this abstraction (for a realization this is the end
            providing the specification).</para>

            <note><para> Although this is a text area there is no mechanism
              for adding more than one client.</para></note>

            <para>&Button1; double click navigates to the selected entry.
            </para>

          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>
  </sect1>

</chapter>

<!-- Local stuff for Emacs - please do not delete

Local Variables:
mode: xml
sgml-doctype: "argomanual.xml"
sgml-parent-document: ("argomanual.xml" "chapter" nil)
sgml-validate-command: "nsgmls -wxml -sv ../docbook-setup/xml.dcl \
  argomanual.xml"
indent-tabs-mode: nil
End:

-->
