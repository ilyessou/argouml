<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- $Id$ -->
<!--
// Copyright (c) 1996-2006 The Regents of the University of California. All
// Rights Reserved. Permission to use, copy, modify, and distribute this
// software and its documentation without fee, and without a written
// agreement is hereby granted, provided that the above copyright notice
// and this paragraph appear in all copies.  This software program and
// documentation are copyrighted by The Regents of the University of
// California. The software program and documentation are supplied "AS
// IS", without any accompanying services from The Regents. The Regents
// does not warrant that the operation of the program will be
// uninterrupted or error-free. The end-user understands that the program
// was developed for research purposes and is advised not to rely
// exclusively on the program for any reason.  IN NO EVENT SHALL THE
// UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR DIRECT, INDIRECT,
// SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING LOST PROFITS,
// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
// SUCH DAMAGE. THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY
// WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
// PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
// CALIFORNIA HAS NO OBLIGATIONS TO PROVIDE MAINTENANCE, SUPPORT,
// UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
-->

<chapter id="subsystems">
  <title>ArgoUML Design, The Big Picture</title>
  <indexterm>
  <primary>ArgoUML Design</primary> </indexterm>
  <para> Currently this is more of a base for discussion and ambition but hopefully
    this will mature and prove useful. </para>
  <indexterm>
  <primary>subsystem</primary> </indexterm> <indexterm>
  <primary>component</primary> </indexterm>
  <para> The code within ArgoUML is separated in subsystems that each have a few
    responsibilities. </para>
  <para> In Issuezilla each subsystem has its issues sorted in a subcomponent with
    the same name as the subsystem. Furthermore the Diagrams subsystem has a set of
    subcomponents for issues connected to the specific diagrams. </para>
  <para> This chapter gives an overall picture with a list of subsystems, their
    dependencies, and their main responsibility. <xref
      linkend="inside_subsystems"></xref> explains each subsystem in
    detail. </para>
  
  <para> The subsystems are organized in layers. The purpose of the layers is to
    make it easy to see in what direction the dependencies are and thus allow us to
    know what dependencies are to be removed in the cases where we have circular
    dependencies. This will also allow us to know which other subsystems that are
    involved when testing a subsystem. </para>
  
  <sect1>
    <title>Definition of subsystem</title>
    <para> All ArgoUML code is organized in subsystems. </para>
    <para> Each subsystem has:
      <itemizedlist>
        <listitem>
          <para>A name</para>
        </listitem>
        <listitem>
          <para>A single directory/Java package where it resides</para>
          <para> Subparts of the subsystem can reside in subdirectories of this
            directory. Auxiliary parts, implemented in other products, of the
            subsystems can reside somewhere else. Notice that each other
            product used by ArgoUML is, in the design, located within one of the
            existing subsystems. This means that a change of version or indeed a
            change of choice of such a sub-product is an internal matter for the
            subsystem and should ideally not affect any other subsystem.
            </para>
          <para> All public and protected methods of all public and protected
            classes in this directory constitute the API of that subsystem.
            </para>
        </listitem>
        <listitem>
          <para> A section in the chapter <xref linkend="inside_subsystems"/>
            . </para>
          <para> The section shall for each subsystem contain the
            responsibilities, the package name, the API, the Facade (if any),
all the plug-in interfaces (if any).
This shall be in the first part of the section i.e. not in a subsection.
It should also document the design of the subsystem.
This is in subsections.
</para>
        </listitem>
      </itemizedlist> </para>
    <para> Each subsystem can have:
      <itemizedlist>
        <listitem>
          <para> a Facade class </para>
          <para> The facade can be used by all other subsystems when using the
            subsystem. </para>
          <para> The Facade class is called
            <classname><replaceable>SubsystemName</replaceable>
            Facade</classname> and is located in the subsystem package. How it
            is used is primarily documented in the class file itself (as javadoc)
            but the more complex picture is documented in the Cookbook (in <xref
              linkend="inside_subsystems"></xref>). </para>
        </listitem>
        
        <listitem>
          <para> Plug-in interfaces. </para>
          <para> These are Facade objects where modules or plug-ins can connect
            themselves to modify or augment the behavior of that subsystem.
            </para>
        </listitem>
        
        <listitem>
          <para> The plug-in interfaces are also all located in the subsystem
            package and called
            <classname><replaceable>SubsystemName</replaceable>
            Plugin<replaceable>PluginType</replaceable></classname>.
            Example: <classname>ModelPluginDiagram</classname>,
            <classname>ModelPluginType</classname>.
            
            <!-- This latter example is very confusing! TODO: replace it. -->
            </para>
        </listitem>
        
        <listitem>
          <para> If the subsystem uses a callback-technique the callback is
            always made to an interface defined by the subsystem. The interface
            is also in the subsystem package and it is called
            <classname><replaceable>SubsystemName</replaceable>
            <replaceable>PluginType</replaceable>Interface</classname>
            . Example: <classname>ModelDiagramInterface</classname>,
            <classname>ModelTypeInterface</classname>. </para>
          <para>
            <mediaobject>
              <imageobject>
                <imagedata
                  fileref="images/cookbook/ComponentDiagram.gif"
                  format="GIF"/>
              </imageobject>
            </mediaobject> </para>
        </listitem>
      </itemizedlist> </para>
  </sect1>
  
  <sect1 id="subsystems_relationships">
    <title>Relationship of the subsystems</title>
    
    <para> Each subsystem that is used by other subsystems provide two ways for
      other subsystems to use them:
      <itemizedlist>
        <listitem>
          <para> The Facade class </para>
          <para> The use of Facade class is not wide spread in ArgoUML. This is
            because ArgoUML is traditionally built as a whole and no subsystems
            were clearly defined. </para>
          <para> A Facade class provides the most common functions other
            subsystems want to do when using that subsystems to reduce the need of
            having to use anything else but the Facade class. The Facade class
            should be very much more stable than the subsystem itself. Methods in
            the Facade should change really slowly and only be removed after
            several months (and one stable release) of deprecation. </para>
          <para> The Facade class is documented in the class file itself (as
            javadoc) and the more complex picture (if needed) is documented in
            the Cookbook (in <xref linkend="inside_subsystems"></xref>).
            </para>
        </listitem>
        <listitem>
          <para> An API with calls to public or protected methods. </para>
          <para> Traditionally, the subsystems in ArgoUML communicate through
            public methods and public variables and the subsystems, as defined
            by the responsibilities, are spread over several packages setting
            aside the Java visibility rules. For this reason it is not well-known
            or documented what public methods form part of a subsystem's API and
            what public methods are internal to a subsystem. For this reason,
            always exercise extreme caution when changing the signature of a
            public method. (See <xref linkend="groundrules"></xref>.)
            </para>
          <para> In order to improve things, make it very clear when encountering
            and understanding the purpose of a public method or class, if it is
            part of the subsystem's API or not (by improving the javadoc for that
            method or class). </para>
          <para> Try to help in moving the public API methods and classes from
            wherever, to the subsystem's directory/package using the proper
            deprecation procedure. </para>
          <para> In order not to worsen things, always add new API classes and
            methods in the subsystem's directory/package. </para>
          <para> This way of communicating is still to be used when it is not
            convenient to use the Facade for a specific use of that subsystem.
            </para>
        </listitem>
      </itemizedlist> Notice that the Facade is normally a part of the API or a
      simplified version of the API. </para>
    <para> For each subsystem X in ArgoUML that uses the subsystem Y, the designer
      of the subsystem X must decide if he wants to use the API of Y when using the
      subsystem Y (putting a set of import org.argouml.Y.internals.blabla.*;
      statements in each file of subsystem X that uses subsystem Y) or use the
      Facade class of subsystem Y (putting only one import
      org.argouml.Y.YFacade; in each file in the subsystem X that uses subsystem
      Y). </para>
    <para> The API solution makes the subsystem X depending on the subsystem Y
      meaning that when we change the API of the subsystem Y we must also change
      subsystem X. The facade calls solution doesn't make the subsystem X
      depending on the API of subsystem Y but just the Facade of subsystem Y.
      </para>
    <para> The choice between the usage of the API or the Facade shall be stated in
      the Cookbook's description of subsystem X in the list of used subsystems.
      </para>
  </sect1>
  
  <sect1 id="infrastructure_subsystems">
    <title>Low-level subsystems</title>
    <para> These subsystems are infrastructure subsystems that just are there
      for every other subsystem to use. </para>
    <para> They are all insignificant enough not to be mentioned when listing
      dependencies. </para>
    <para>
All these subsystems are all started and initiated (if needed) from the
Application subsystem.
</para>
    <itemizedlist>
      
      <listitem>
        <para>Logging - see <xref linkend="logging"></xref>
</para>
      </listitem>
      
      <listitem>
        <para>Internationalization -
see <xref linkend="internationalization"></xref>.
</para>
      </listitem>
      
      <listitem>
        <para>GUI -
see <xref linkend="guiframework"></xref>.
</para>
      </listitem>

      <listitem>
        <para>Help system -
see <xref linkend="help"></xref>.
</para>
      </listitem>
        
      <listitem>
        <para>JRE with utils -
see <xref linkend="jre"></xref>
</para>
      </listitem>
      
    </itemizedlist>
    <para>
      <mediaobject>
        <imageobject>
          <imagedata fileref="images/cookbook/Layer0.gif" format="GIF"/>
        </imageobject>
      </mediaobject> </para>
    
  </sect1>
  
  <sect1 id="model_subsystems">
    <title>Model subsystems</title>
    <para>
These subsystems do not rely on any other part of ArgoUML to do their work
(except the infrastructure).
They can all be tested in full individually
i.e. independent of any other subsystem.
</para>
    <para>
They contain all the information used by all other subsystems so for that
reason they represent the model in the MVC pattern.
</para>
    <para>
All these subsystems are all started and initiated from the Application
subsystem.
</para>

    <para>
      <itemizedlist>
        
        <listitem>
          <para>The Model -
See <xref linkend="model"/>.
</para>
        </listitem>
        
        <listitem>
          <para>To do items -
see <xref linkend="todoitems"></xref>.
</para>
        </listitem>
        
      </itemizedlist>
</para>
    <para>
      <mediaobject>
        <imageobject>
          <imagedata fileref="images/cookbook/Layer1.gif" format="GIF"/>
        </imageobject>
      </mediaobject> </para>
  </sect1>
  
  <sect1 id="view_control_subsystems">
    <title>View and Control subsystems</title>
    <para>
These subsystems rely on the information in the model subsystems
in order to do their work.
</para>
    
    <para>
All these subsystems are all started and initiated from the Application
subsystem.
</para>
    <para>
      <itemizedlist>
        <listitem>
          <para>Application -
see <xref linkend="application"></xref>.
</para>
        </listitem>

        <listitem>
          <para>Diagrams -
see <xref linkend="diagrams"></xref>.
</para>
        </listitem>
        
        <listitem>
          <para>Property panels -
see <xref linkend="propertypanels"></xref>.
</para>
        </listitem>
        
        <listitem>
          <para>Explorer -
see <xref linkend="explorer"></xref>.
</para>
        </listitem>

        <listitem>
          <para>Notation -
see <xref linkend="notation"></xref>.
</para>
        </listitem>

        <listitem>
          <para>Code Generation -
see <xref linkend="codegeneration"></xref>.
</para>
        </listitem>
        
        <listitem>
          <para>Reverse Engineering - 
see <xref linkend="reverseengineering"></xref>.
</para>
        </listitem>
        
        <listitem>
          <para>Module loader -
see <xref linkend="moduleloader"></xref>.
</para>
        </listitem>
      </itemizedlist>
</para>
    <para>
      <mediaobject>
        <imageobject>
          <imagedata fileref="images/cookbook/Layer2.gif" format="GIF"/>
        </imageobject>
      </mediaobject> </para>

    <para>
      <mediaobject>
        <imageobject>
          <imagedata fileref="images/cookbook/Application.gif"
            format="GIF"/>
        </imageobject>
      </mediaobject> </para>
  </sect1>
  
  <sect1 id="loadable_subsystems">
    <title>Loadable subsystems</title>
    <para>
These subsystems should be connected only through the interfaces
provided by other subsystems.
This means that they can be individually enabled and disabled using
the module loader.
Note: The old module loader does not have the possibility to disable modules.
The new one has but is not widely used. (July 2005).
</para>
    
    <para>
      <itemizedlist>
        
        <listitem>
          <para>Java Code generation, Reverse engineering -
see <xref linkend="java"></xref>.
</para>
        </listitem>
        
        <listitem>
          <para>Other languages - Code generation, Reverse engineering -
see <xref linkend="otherlanguages"></xref>.
</para>
        </listitem>
        
        <listitem>
          <para>Critics and checklists -
see <xref linkend="critics"></xref>.
</para>
        </listitem>
        
        <listitem>
          <para>OCL -
see <xref linkend="ocl"></xref>.
</para>
        </listitem>
        
      </itemizedlist>
</para>
    <para>
      <mediaobject>
        <imageobject>
          <imagedata fileref="images/cookbook/Layer3.gif" format="GIF"/>
        </imageobject>
      </mediaobject> </para>
  </sect1>
  
  <!-- Has to be rewritten to fit the new concepts.
  (If it at all will fit, I am not sure. Linus December 2002.)
  <sect1>
  <title>ArgoUML Initialization</title>
  <sect2>
  <title>Which sources are involved?</title>
  <para>
  Relative to the directory org/argouml, they are mainly:
  </para>
  <itemizedlist>
  <listitem>
  <para>
  application/Main.java,
  </para>
  </listitem>
  <listitem>
  <para>
  kernel/Project.java + xml/argo/ArgoParser.java,
  </para>
  </listitem>
  <listitem>
  <para>
  ui/{ProjectBrowser.java,*Pane.java},
  </para>
  </listitem>
  <listitem>
  <para>
  cognitive/{Designer.java,ui/ToDoPane.java}.
  </para>
  </listitem>
  </itemizedlist>
  </sect2>
  </sect1>
  -->
  <!--
  Has to be rewritten.
  <sect1>
  <title>Which Objects live during a typical session?</title>
  <para>
  (Project, Designer, Globals, NavPane, ToDoPane, ...)
  </para>
  </sect1>
  <sect1>
  <title>What is their task?</title>
  <para>
  (visual subsystem, model, controller, ...)
  </para>
  </sect1>
  -->
  
  <!--
  <sect1 id="bigger_components">
  <title>The bigger picture, ArgoUML and supporting libraries</title>
  <indexterm><primary>Libraries</primary></indexterm>
  <indexterm><primary>Components</primary></indexterm>
  <para>
  <mediaobject>
  <imageobject>
  <imagedata format="GIF" fileref="images/cookbook/big.gif"/>
  </imageobject>
  </mediaobject>
  <itemizedlist>
  <listitem><para>Well, ArgoUML is obviously the main thing.</para></listitem>
  <listitem><para>GEF stands for <emphasis>Graph Editing Framework</emphasis>. It is the package which controls most of the graphical aspects of ArgoUML.</para></listitem>
  <listitem><para>NSUML stands for <emphasis>Novosoft UML</emphasis>. This library gives ArgoUML all the components which are required to deal with UML objects and their relationships with each other. Normally you can recognize everything out of the NSUML packages very easily because the classes start with a capital M.</para>
  </listitem>
  </itemizedlist>
  </para>
  </sect1>
  -->
  
  <!-- Move to chapter 5.
  <sect1 id="nsuml">
  <title>NS-UML</title>
  <sect2>
  <title>Tip for understanding NS-UML (from Jeremy Bennett)</title>
  <indexterm>
  <primary>NSUML</primary>
  <secondary>understanding</secondary>
  </indexterm>
  <para>
  I found that building a javadoc for the NSUML source was quite helpful.
  There are some comments in key places, and it allows you to see what
  operations are available.
  </para>
  <para>
  Its not part of their standard distribution, so you have to generate
  it yourself. Jeremy Bennet has written the following script to do it:
  </para>
  <para>
  makedoc.sh:
  <programlisting>
  #!/bin/sh
  
  # A script to drive Javadoc for all this
  
  ###############################################################################
  # The source trees for ordinary source and generated source and where we put it
  # all.
  NSUML_HOME=&dollar;HOME/nsuml0_4_19/nsuml
  SRCDIR=&dollar;{NSUML_HOME}/src
  GENDIR=&dollar;{NSUML_HOME}/gen
  DESTDIR=&dollar;{NSUML_HOME}/docs/javadocs
  
  # Run the javadoc command
  javadoc -d &dollar;DESTDIR -sourcepath &dollar;GENDIR:&dollar;SRCDIR @&dollar;{NSUML_HOME}/package_list
  </programlisting>
  Where package_list is:
  <programlisting>
  ru.novosoft.uml
  ru.novosoft.uml.behavior.activity_graphs
  ru.novosoft.uml.behavior.collaborations
  ru.novosoft.uml.behavior.common_behavior
  ru.novosoft.uml.behavior.state_machines
  ru.novosoft.uml.behavior.use_cases
  ru.novosoft.uml.foundation.core
  ru.novosoft.uml.foundation.data_types
  ru.novosoft.uml.foundation.extension_mechanisms
  ru.novosoft.uml.model_management
  ru.novosoft.uml.undo
  ru.novosoft.uml.xmi
  </programlisting>
  </para>
  </sect2>
  <sect2>
  <title>Tip for understanding NS-UML (from Ryan Ismert)</title>
  <indexterm>
  <primary>NSUML</primary>
  <secondary>understanding</secondary>
  </indexterm>
  <para>
  The file docs/guide/NS_Uml_Api.html that comes in the NSUML source is
  very helpful.
  </para>
  </sect2>
  </sect1>
  -->
  
  <!-- This is taken care of.
  <sect1 id="small">
  <title>The smaller components, inside ArgoUML</title>
  <para>
  ArgoUML itself breaks down into several components. The graphic does not reflect the true package names, neither the true dependencies of the packages.
  <mediaobject>
  <imageobject>
  <imagedata format="GIF" fileref="images/cookbook/small.gif"/>
  </imageobject>
  </mediaobject>
  <itemizedlist>
  <listitem><para>User Interface</para></listitem>
  <listitem><para>Diagrams (see <xref linkend="diagrams"/>)</para></listitem>
  <listitem><para>GEF</para></listitem>
  <listitem><para>Model</para></listitem>
  <listitem><para>Saving/Loading</para></listitem>
  <listitem><para>Notation (see <xref linkend="notation"/>)</para></listitem>
  <listitem><para>Code Generation</para></listitem>
  <listitem><para>Reverse Engineering (see <xref linkend="java"/>)</para></listitem>
  <listitem><para>OCL</para></listitem>
  <listitem><para>Help System (see <xref linkend="help"/>)</para></listitem>
  <listitem><para>Internationalization (see <xref linkend="internationalization"/>)</para></listitem>
  <listitem><para>Critics and other cognitive tools (see <xref linkend="critics"/>)</para></listitem>
  <listitem><para>Plugin-Module API (see <xref linkend="plugins"/>)</para></listitem>
  <listitem><para>Logging (see <xref linkend="logging"/>)</para></listitem>
  </itemizedlist>
  </para>
  </sect1>
  -->
  
</chapter>

<!-- Local stuff for Emacs - please do not delete

Local Variables:
mode: xml
sgml-doctype: "cookbook.xml"
sgml-parent-document: ("cookbook.xml" "chapter" nil)
sgml-validate-command: "nsgmls -wxml -sv ../docbook-setup/xml.dcl \
cookbook.xml"
indent-tabs-mode: nil
End:

-->