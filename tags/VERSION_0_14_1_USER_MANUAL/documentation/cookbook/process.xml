<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- $Id$ -->

  <chapter id="processes">
    <title>Processes for the ArgoUML project</title>
    <indexterm>
      <primary>Processes</primary>
    </indexterm>
    <para>
This chapter contains processes used when working with the 
ArgoUML project.
</para>
    <para>
These processes are provided with the hope of being helpful for
the members of the project and if they feel too complicated,
ambitious or overworked, please raise the issue of simplifying
them on the 
<ulink url="mailto:dev@argouml.tigris.org">developers' mailing list</ulink>.
</para>
    <sect1>
      <title>The big picture for Issues</title>
      <indexterm>
	<primary>Issues</primary>
      </indexterm>
      <para>
Here is the big picture of the life of an Issue.
</para>
      <mediaobject>
	<imageobject>
	  <imagedata fileref="images/cookbook/IssueBigPicture.gif" format="GIF"/>
	</imageobject>
      </mediaobject>

    </sect1>

    <sect1 id="issue_attributes">
      <title>Attributes of an issue</title>
      <para>
This is what the different attributes mean and how they are used 
in the ArgoUML project.
This is to be read as an addendum to the 
<ulink url="http://argouml.tigris.org/project/www/docs/issue_lifecycle.html">
Tigris definition of the resolutions
</ulink>
and for that reason it is not a complete list.
</para>
      <sect2>
	<title>Priorities</title>
	<indexterm>
	  <primary>Priorities</primary>
	  <secondary>on Issues</secondary>
	</indexterm>
	<indexterm>
	  <primary>Issue</primary>
	  <secondary>Priority</secondary>
	</indexterm>
	<para>
The priorities are used in the following manner in ArgoUML:
<itemizedlist>
	    <listitem>
	      <para>P1 - Fatal error</para>
	      <para>
ArgoUML cannot start.
Crashes program, jvm or computer.
</para>
	    </listitem>
	    <listitem>
	      <para>P2 - Serious error</para>
	      <para>
Information lost.
</para>
	    </listitem>
	    <listitem>
	      <para>P3 - Not so serious error</para>
	      <para>
Functions not working.
Strange behavior.
Exceptions logged.
</para>
	    </listitem>
	    <listitem>
	      <para>P4 - Confusing behavior</para>
	      <para>
Incorrect help texts and documentation.
Inconsistant behavior.
UI not updated.
Incorrect javadoc.
</para>
	    </listitem>
	    <listitem>
	      <para>P5 - Small problems</para>
	      <para>
Spelling errors.
Ugly icons.
Excessive logging.
Missing javadoc.
</para>
	    </listitem>
	  </itemizedlist>
</para>
      </sect2>

      <sect2>
	<title>Resolutions</title>
	<indexterm>
	  <primary>Resolution</primary>
	  <secondary>of Issues</secondary>
	</indexterm>
	<indexterm>
	  <primary>Issue</primary>
	  <secondary>Resolution</secondary>
	</indexterm>
	<para>
<itemizedlist>
	    <listitem>
	      <para>LATER and REMIND</para>
	      <para>
Not used.
</para>
	    </listitem>
	    <listitem>
	      <para>WORKSFORME</para>
	      <para>
This means that it works in a released version of ArgoUML.
State the version in the comment.
</para>
	      <para>
If the version stated by the reporter in the issue is not
the same as the version in the comment then this probably 
means that problem was fixed in some release without anyone
noticing that this problem was fixed.
</para>
	    </listitem>
	  </itemizedlist>
</para>
      </sect2>
    </sect1>

    <sect1 id="rolesofworkers">
      <title>Roles Of The Workers</title>
      <indexterm>
        <primary>Roles</primary>
      </indexterm>
      <indexterm>
        <primary>Workers</primary>
      </indexterm>
      <para>
The roles described below are per issue, i.e. for every issue, there
is at least a reporter, a resolver and a verifier.

Hence, each person involved in issues for the ArgoUML project can -
at the same time - have different roles, and consequently, has 
issues to report, 
issues to close, 
issues to resolve, and 
issues to verify.
</para>

      <sect2 id="rolereporter">
        <title>The Reporter</title>
	<para>
The Reporter is the person who enters the issue in Issuezilla.
</para>
	<para>
Skills:
The reporter is an ArgoUML user, should not need any knowledge of what the
ArgoUML project is actually doing.
</para>
	<para>
Responsibilities:
          <itemizedlist>
	    <listitem>
	      <para>
Report an issue
</para>
	<para>
The address to enter new issues is: 
<ulink url="http://argouml.tigris.org/issues/enter_bug.cgi">
http://argouml.tigris.org/issues/enter_bug.cgi
</ulink>.
For entering new issues, registering (as described in 1.3) 
is not required.
</para>
	    </listitem>
            <listitem>
	      <para>
Answer clarification requests
</para>
              <para>
Occasionally, the developers of ArgoUML need to request
the Reporter more information, to be able to solve the issue correctly.
Another way of putting it is to say that 
if the issue was reported without some vital information
the Reporter has some more work to do.
</para>
	    </listitem>
            <listitem>
	      <para>
Close the issue
</para>
              <para>
This applies to an issue that is in verified state only.
At the end of processing the issue, 
the reporter has the final word: 
he can check the result, 
and if he agrees with the solution, 
close the issue himself.
Closing an issue requires at least "observer" role
in the ArgoUML project.
</para>
	    </listitem>
            <listitem>
	      <para>
Reopen the issue
</para>
              <para>
This applies to an issue that is in verified state only.
The reporter has the final word:
he can check the result, 
and when he does not agree that the solution is correct, 
he can reopen the issue himself.
Reopening an issue requires at least "observer" role
in the ArgoUML project.
</para>
	    </listitem>
	  </itemizedlist>
        </para>
      </sect2>
      <sect2 id="roleresolver">
        <title>The Resolver</title>
        <para>
The Resolver is the software developer who attempts to resolve the issue.
Doing so requires at least "observer" role.
The "developer" role is only needed to commit things into CVS
(e.g. submit changed Java code, scripts or documentation).
</para>
        <para>
Remark: Someone who does not have the developer role, 
but solves the issue and convinces someone else to commit the solution, 
is still the Resolver even though he cannot commit things into CVS.
</para>
        <para>
The goal of the Resolver is to progress the issue to the status of
"Resolved".
The resolver may be the same person as the reporter.
</para>
        <para>
Responsibilities:
          <itemizedlist>
            <listitem>
              <para>
Decide usefulness 
(if this issue is really a bug or enhancement and if it is worth solving)
</para>
        <para>
The Resolver has to decide if solving the issue is 
really a useful improvement for ArgoUML.
The Reporter of the issue may very well be mistaken
in entering a bug-issue for what is in fact a feature,
or entering an enhancement-issue which is not really an enhancement.
Another thing that could be is a bug that appears in 
very exceptional circumstances and that
may have large impact on ArgoUML architecture.
If the Resolver decides after the investigation that this bug
is really not that important or that he is not the right person
to solve it he enters his findings as a comment and
assigns the issue back to anyone (issues@argouml) and
moves along to work on another issue instead.
</para>
	    </listitem>
	    <listitem>
	      <para>
If applicable, program and test a solution
</para>
	      <para>
As this might take considerable time it might be a good idea
of the Resolver to assign the issue to himself to reserve the issue.
He can also signal progress by setting the issue to the state Started.
</para>
            </listitem>
	    <listitem>
	      <para>
If applicable, write test cases
</para>
            </listitem>
	    <listitem>
	      <para>
Set the issue in the end on "Resolved".
</para>
	      <para>
When the resolver is finished with the issue, 
he puts it in "Resolved" status, and indicates the
"resolution" is Fixed, Worksforme, Invalid, Wontfix, or Duplicate.
</para>
            </listitem>
          </itemizedlist>
</para>
        <para>
Skills:
The resolver needs to know a lot of the insides of the ArgoUML code, Java,
coding standards, and also the current status of the project with goals,
requirements and release plans.
</para>
      </sect2>
      <sect2 id="roleverifier">
        <title>The Verifier</title>
	<para>
The Verifier may be neither the Reporter, nor the Resolver of the issue.
The task of the Verifier is to check the quality of the solution by
confirming that the solution is complete, to the point, bug-free, etc.
This is an important part of the quality assurance work we do
in the ArgoUML project and the object is to make sure that a resolved
issue is in fact resolved.
</para>
        <para>
The test must be done on the "Target Milestone" version of the issue, 
or any later version released to the public.
</para>
        <para>
Responsibilities:
          <itemizedlist>
            <listitem>
              <para>
Check that the issue is solved in the stated version of ArgoUML
</para>
            </listitem>
            <listitem>
              <para>
Mark the issue as "verified"
</para>
              <para>
If the Verifier can conclude that the problem does not exist or
the feature/enhancement is now present
the issue is marked as verified.
</para>
            </listitem>
	    <listitem>
	      <para>
Reopen the issue if the solution is not fully correct
</para>
        <para>
If the solution is not correct or the feature/enhancement does not work,
it is the duty of the Verifier to reopen the issue.
</para>
            </listitem>
          </itemizedlist>
</para>
        <para>
Skills:
The verifier needs only to focus on that issue, how the problem in it
is formulated.
He doesn't need to know how it is actually solved.
</para>
      </sect2>
    </sect1>

    <sect1 id="resolve_issue">
      <title>How to resolve an Issue</title>
      <indexterm>
	<primary>Issues</primary>
	<secondary>Resolving</secondary>
      </indexterm>
      <para>
This can be performed by any member of the project (any role).
Persons without the Developer role need a person 
with the Developer role to actually commit the work if the resolution 
involves changing some artefact.
There might be special skills involved but it differs widely depending
on the nature of the Issue.
</para>
      <para>
Do the following:
</para>
      <orderedlist>
	<listitem id="resolve_issue_start">
	  <para>
Pick any Issue that is NEW or REOPENED
that you from the description think that you are able to solve.
Best result if you also find some Issue that you really feel 
needs to be solved.
<ulink url="http://argouml.tigris.org/issues/buglist.cgi?component=argouml&amp;issue_status=NEW&amp;issue_status=REOPENED">The list of all of them</ulink>.
</para>
	</listitem>
	<listitem>
	  <para>
Look at your personal schedule and how much time you have during the
next couple of weeks and compare that to the amount of time you think
you will need to spend for solving the issue.
Compare this to the release plan to see what release your contribution
will fit in.
</para>
	</listitem>
	<listitem>
	  <para>
Accept the Issue and reserve it by assigning it to yourself.
Set the Target Milestone to the release you have chosen.
</para>
	</listitem>
	<listitem>
	  <para>
Make sure you have a checked out copy of ArgoUML or else check out 
a new one.
</para>
	  <para>
How this is done is described in
<xref linkend="buildingandtools"/>.
</para>
	</listitem>
	<listitem>
	  <para>
Mark the issue as Started (this could be done while assigning also).
</para>
	</listitem>
	<listitem>
	  <para>
Change the code to solve the problem.
</para>
	</listitem>
	<listitem>
	  <para>
Compile and test your new code.
</para>
	  <para>
This should include developing a JUnit test case to
verify that the problem is solved.
You could also develop the JUnit test case before actually solving
the problem.
</para>
	  <para>
If your solution did not work as intended, continue changing it
until it does.
</para>
	  <para>
If you feel that your estimation of the complexity of the problem
and your own abilities and time available was incorrect,
then change the Target Milestone of the Issue to another one
that fits your new estimation.
This is just a change of plan.
</para>
	  <para>
If you, at this point, feel that your personal plans have changed
so that you won't have time to pursue the work,
change the Issue back to "NEW" with your experiences sofar
stated in the comment.
This means that you are giving up and giving the Issue back to
anyone.
You should also assign it back to issues@argouml or if you know
someone else in the ArgoUML team that will continue the work,
assign it to him.
Remember not to commit your changes in the main branch but please
commit your changes (if any) into a work branch and state the name
of the branch in the issue.
That will make it possible for someone to make use of your work so far.
</para>
	</listitem>
	<listitem>
	  <para>
Commit your changes and the JUnit test cases stating
the number of the Issue in the comment.
</para>
	  <para>
If you don't have a developer role in the project, 
this involves sending your changes to someone who has 
and then convincing him to commit them for you.
</para>
	</listitem>
	<listitem>
	  <para>
"Resolve" the Issue with the resolution "FIXED".
</para>
	</listitem>
	<listitem>
	  <para>
Sit back and feel the personal satisfaction of having completed a
something that will be part of the ArgoUML product.
</para>
	</listitem>
	<listitem>
	  <para>
If you during this, have discovered other problems,
create new Issues stating those new problems
according to the rule for creating Issues.
</para>
	</listitem>
      </orderedlist>
    </sect1>

    <sect1 id="verify_resolved_fixed">
      <title>How to verify an Issue that is FIXED</title>
      <indexterm>
	<primary>Issues</primary>
	<secondary>Verifying</secondary>
	<tertiary>Fixed</tertiary>
      </indexterm>
      <indexterm>
	<primary>Issues</primary>
	<secondary>Verifying</secondary>
	<tertiary>WORKSFORME</tertiary>
      </indexterm>
      <indexterm>
	<primary>Issues</primary>
	<secondary>Verifying</secondary>
	<tertiary>Works for me</tertiary>
      </indexterm>
      <para>
This can be performed by any member of the project (any role).
There might be special skills involved but it differs widely depending
on the nature of the Issue.
</para>
      <para>
Do the following:
</para>
      <orderedlist>
	<listitem id="verify_resolved_fixed_start">
	  <para>
Pick any Issue that is RESOLVED/FIXED or WORKSFORME and that you have
not raised, nor solved and that is included in a release
(Target milestone set to a release available on the site).
<ulink url="http://argouml.tigris.org/issues/buglist.cgi?component=argouml&amp;issue_status=RESOLVED&amp;resolution=FIXED&amp;resolution=WORKSFORME">The list of all RESOLVED/FIXED and RESOLVED/WORKSFORME issues</ulink>.
</para>
	</listitem>
	<listitem>
	  <para>
Run the specified release of ArgoUML as provided for downloads or 
through Java Web Start.
</para>
	</listitem>
	<listitem>
	  <para>
Test the problem in the issue and verify that the problem is no longer
there or the feature is provided.
</para>
	</listitem>
	<listitem>
	  <para>
Do one of the following:
</para>
	  <itemizedlist>
	    <listitem>
	      <para>
If the problem is gone, the feature is present put the Issue in
Status VERIFIED and
add the version of the ArgoUML used for the test in in the comment.
</para>
	    </listitem>
	    <listitem>
	      <para>
If the problem is still there, the feature does not work, put the
Issue in Status REOPENED with a description of what is still there, is
still missing.
Also state what version of ArgoUML used for the test in the comment.
</para>
	    </listitem>
	  </itemizedlist>
	</listitem>
	<listitem>
	  <para>
If you during this, have discovered other problems than the one
stated in the Issue, create new Issues for those new problems
according to the rule for creating Issues.
</para>
	</listitem>
	<listitem>
	  <para>
Do this as many times as you like until there are no Issues left.
</para>
	</listitem>
      </orderedlist>
    </sect1>

    <sect1 id="verify_resolved_invalid">
      <title>How to verify an Issue that is rejected</title>
      <indexterm>
	<primary>Issues</primary>
	<secondary>Resolving</secondary>
	<tertiary>Rejected</tertiary>
      </indexterm>
      <indexterm>
	<primary>Issues</primary>
	<secondary>Resolving</secondary>
	<tertiary>Invalid</tertiary>
      </indexterm>
      <indexterm>
	<primary>Issues</primary>
	<secondary>Resolving</secondary>
	<tertiary>Wontfix</tertiary>
      </indexterm>
      <indexterm>
	<primary>Issues</primary>
	<secondary>Resolving</secondary>
	<tertiary>Duplicate</tertiary>
      </indexterm>
      <para>
This can be performed by any member of the project (any role).
There might be special skills involved but it differs widely depending
on the nature of the Issue.
</para>
      <para>
Do the following:
</para>
      <orderedlist>
	<listitem id="verify_resolved_invalid_start">
	  <para>
Pick any issue that is RESOLVED/(INVALID, WONTFIX, or DUPLICATE) that
you have not raised nor solved.
The chosen issue need not be connected to an available release.
<ulink url="http://argouml.tigris.org/issues/buglist.cgi?component=argouml&amp;issue_status=RESOLVED&amp;resolution=INVALID&amp;resolution=WONTFIX&amp;resolution=DUPLICATE">The list of all RESOLVED/INVALID, RESOLVED/WONTFIX and RESOLVED/DUPLICATED issues</ulink>.
</para>
	</listitem>
	<listitem>
	  <para>
Read through the description provided.
</para>
	</listitem>
	<listitem>
	  <para>
Do one of the following:
</para>
	  <itemizedlist>
	    <listitem>
	      <para>
If you agree with the statement and feel that the rejection 
is done for correct reasons,
put the Issue in Status VERIFIED.
</para>
	    </listitem>
	    <listitem>
	      <para>
If you don't agree, put the Issue in status REOPENED and give a
description as to why you don't agree.
</para>
	    </listitem>
	  </itemizedlist>
	</listitem>
	<listitem>
	  <para>
Do this as many times as you like until there are no Issues left.
</para>
	</listitem>
      </orderedlist>
    </sect1>

    <sect1 id="close_verified_issue">
      <title>How to Close an Issue</title>
      <indexterm>
	<primary>Issues</primary>
	<secondary>Closing</secondary>
      </indexterm>
      <para>
This is performed by the person that originally raised the Issue
or by the QA responsible for that area.
You need to be a member of the project (any role).
This can also be done by someone who would raise the issue but
did not because it was already present in Issuesilla.
</para>
      <orderedlist>
	<listitem>
	  <para>
Pick any Issue that is Verified and that you have raised or that you
have found and refrained from raising because somebody else already
had written it. 
<ulink url="http://argouml.tigris.org/issues/buglist.cgi?component=argouml&amp;issue_status=VERIFIED">
The list of all VERIFIED issues
</ulink>.
</para>
	</listitem>
	<listitem>
	  <para>
See that you are satisfied with the solution.
This could involve reading through the resolution and 
starting the tool to verify it.
</para>
	</listitem>
	<listitem>
	  <para>
Do one of the following:
</para>
	  <itemizedlist>
	    <listitem>
	      <para>
If you are satisfied, put the Issue in Status CLOSED.
</para>
	    </listitem>
	    <listitem>
	      <para>
If you are not satisfied but the problem is solved as it is written in
the Issue, put the Issue in Status CLOSED and open a new Issue with
the rest of the problem.
</para>
	    </listitem>
	    <listitem>
	      <para>
If you are not satisfied and the problem is not solved, put the Issue
in status REOPENED with a description on what you are not satisfied
with.
</para>
	    </listitem>
	  </itemizedlist>
	</listitem>
      </orderedlist>
    </sect1>

    <sect1 id="issues_subproducts">
      <title>How to relate issues to problems in subproducts</title>
      <indexterm>
        <primary>subproducts</primary>
      </indexterm>
      <para>
ArgoUML uses some product internally and is to some respect very 
dependant on the well functioning of these products.
This are products like GEF, NS-UML, ocl, log4j, xerces, jre, ...
</para>
      <para>
Occasionally a problem found in ArgoUML is found to be a problem in one
of these subproducts and cannot or is extremely complicated to fix
within ArgoUML.
</para>
      <para>
If this happens this is the way to handle this problem.
</para>
      <para>
This can be performed by any member of the project (any role).
There might be special skills involved depending on the nature of the problem.
In this description "issue" means a issue in issuezilla,
"bug report" means a bug report in some other project,
and "problem" denotes the conceptual problem.
</para>
      <para>
Do the following:
</para>
      <orderedlist>
        <listitem>
          <para>
During your examination of an issue you find that the problem
is in one of the ArgoUML subproducts (GEF, NS-UML, ocl, jre, ...).
</para>
	</listitem>
	<listitem>
	  <para>
Make sure that the issue is assigned to you.
</para>
	</listitem>
	<listitem>
	  <para>
Write a comment in the issue stating which one of the subprojects
that has the problem (and what the problem is within that subproject).
</para>
	</listitem>
	<listitem>
	  <para>
Post a bug report in that subproducts bug reporting tool
(or find that a bug report already registered).
</para>
	  <para>
I am assuming that there is such a tool for the subproduct in question.
If there isn't,
then make the bug report to the person responsible for this product
so that we are sure that the problem is communicated.
</para>
	</listitem>
	<listitem>
	  <para>
Accept the issue (set it to STARTED) and
enter the reference from the subproducts bug reporting tool and
if possible the URL to the bug reporting tool or to the bug report in question.
</para>
	  <para>
I am assuming that there is a bug reporting tool for the subproducts.
If there isn't for the product in question,
then include all communications (both ways) in the issue.
</para>
	</listitem>
      </orderedlist>
      <para>
You are now responsible to follow up on 
the upcoming releases of the subproduct.
If you don't think that you are the best person for this
(you are should be since it was you that found that this problem
is in the subproduct),
assign the issue to "the right person".
To follow up you should do the following.
</para>
      <orderedlist>
	<listitem>
	  <para>
Look at each new release of that subproduct to see if the bug report
is in fact stated as fixed in that release.
</para>
	</listitem>
	<listitem>
	  <para>
If the bug report is fixed, then you weight together 
the importance of the problem, 
other bug reports that are also problems in ArgoUML 
that are solved in that release,
the amount of work needed to fit the new version of the subproduct
instead of the old one,
the planned releases of the subproduct with promises to
solve other bug reports,
and
the current release plan of ArgoUML.
From this you decide wether it is time to do the update of 
the subproduct within ArgoUML or to wait.
</para>
	</listitem>
	<listitem>
	  <para>
If you decide that it is time to update,
you assign all issues against that subproduct to you (if not already), 
then you do the work.
The work is to add the new version of the subproduct to ArgoUML,
do all the needed work within ArgoUML to fit the new version,
test and commit everything,
put the issues indeed fixed in RESOLVED/FIXED,
and close the bugs registered in the subproducts bug reporting tool.
</para>
	</listitem>
      </orderedlist>
    </sect1>

  </chapter>



<!-- Local stuff for Emacs - please do not delete

Local Variables:
mode: xml
sgml-doctype: "cookbook.xml"
sgml-parent-document: ("cookbook.xml" "chapter" nil)
sgml-validate-command: "nsgmls -wxml -sv ../docbook-setup/xml.dcl \
  cookbook.xml"
End:

-->
