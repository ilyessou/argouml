<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- $Id$ -->

<chapter id="standards">
  <title>Standards for coding in ArgoUML</title>
  <indexterm>
    <primary>Coding Standards</primary>
  </indexterm>
  <indexterm>
    <primary>Standards</primary>
    <secondary>Coding</secondary>
  </indexterm>
  <sect1>
    <title>Rules for writing Java code</title>

    <para>
The coding style for ArgoUML is the following
</para>
    <itemizedlist>
      <listitem>
        <para>
Each file starts with some header info: 
file, 
version info, 
copyright notice.
Like this:
<programlisting>
// &dollar;Id&dollar;
// Copyright (c) 2004 The Regents of the University of California. All
// Rights Reserved. Permission to use, copy, modify, and distribute this
// software and its documentation without fee, and without a written
// agreement is hereby granted, provided that the above copyright notice
// and this paragraph appear in all copies.  This software program and
// documentation are copyrighted by The Regents of the University of
// California. The software program and documentation are supplied "AS
// IS", without any accompanying services from The Regents. The Regents
// does not warrant that the operation of the program will be
// uninterrupted or error-free. The end-user understands that the program
// was developed for research purposes and is advised not to rely
// exclusively on the program for any reason.  IN NO EVENT SHALL THE
// UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR DIRECT, INDIRECT,
// SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING LOST PROFITS,
// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
// SUCH DAMAGE. THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY
// WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
// PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
// CALIFORNIA HAS NO OBLIGATIONS TO PROVIDE MAINTENANCE, SUPPORT,
// UPDATES, ENHANCEMENTS, OR MODIFICATIONS.

package <replaceable>whatever</replaceable>;
<replaceable>...</replaceable>
</programlisting>
</para>
        <para>
The file and version is maintained by cvs using keyword substitution.
The year in the copyright notice is maintained manually.
</para>
        <para>
This differs from the Sun Code Conventions that 
requires the initial comment to be a c-style comment.
</para>
        <para>
This is checked by checkstyle.
</para>
      </listitem>
      <listitem>
        <para>
All instance variables are private.
</para>
        <para>
This is not required by the Sun Code Conventions but
an additional requirement for ArgoUML.
</para>
        <para>
This is checked by checkstyle.
</para>
      </listitem>
      <listitem>
        <para>
Use javadoc for each class, instance variable, and method. 
In general do not put comments in the body of a method. 
If you are doing something complex enough to need a comment, consider
breaking it out into its own private commented method.
</para>
        <para>
This is not required by the Sun Code Conventions but
an additional requirement for ArgoUML.
</para>
        <para>
This is partly checked by checkstyle.
Checkstyle does currently only warn if a javadoc comment is omitted for
a public, protected or default visibility variable or method.
</para>
      </listitem>
      <listitem>
        <para>
Indicate places of future modifications with 
<programlisting>
// TODO: reason
</programlisting>
        </para>
        <para>
This differs from the Sun Code Conventions that 
uses either XXX or FIXME depending on if it works or not.
</para>
      </listitem>
      <listitem>
        <para>
Four spaces should be used as the unit of indentation.
Tabs must be set exactly every 8 spaces (not 4) and represent 2 indents.
</para>
        <para>
This is exactly as it is stated in the Sun Code Conventions.
It is here just for the emphasis.
</para>
        <para>
This is checked by checkstyle.
</para>
      </listitem>
      <listitem>
        <para>
If possible use lines shorter than 80 characters wide.
</para>
        <para>
This is exactly as it is stated in the Sun Code Conventions.
It is here just for the emphasis.
</para>
        <para>
This is checked by checkstyle.
Checkstyle ignores three kinds of lines in this check because of the
historical use of long class names and package names.
These are lines that contain
"// &dollar;Id:<replaceable>whatever</replaceable>&dollar;",
import statements, and
javadoc comments with @see tags.
</para>
      </listitem>
      <listitem>
        <para>
Open brace on same line (at end).
Both for if/while/for and for class and functions definitions.
</para>
        <para>
This is exactly as it is stated in the Sun Code Conventions.
It is here just for the emphasis.
</para>
      </listitem>

      <listitem>
        <para>
Use deprecation when removing public and protected
classes, 
methods and
attributes.
</para>
        <para>
Whenever you have a public or protected method or attribute in a class or
a public class 
that you want to 
remove,
change the signature in an incompatible way, or 
make change visibility for
you shall always deprecate it first.
After the next stable release you (or someone else) can remove it.
</para>
        <para>
In the future, when the subsystems are well defined and it is clear
what public or protected 
methods, attributes or classes 
that are part of a certain subsystem's
exported interface 
we can allow an exception to this rule for 
methods, attributes and classes 
that are not.
(See <xref linkend="subsystems_relationships"></xref>.)
</para>
        <para>
Write deprecation statements like this:
<programlisting>
     * @deprecated by <replaceable>your name</replaceable> in <replaceable>the upcoming release</replaceable>. Use {@link <replaceable>whatever</replaceable>}
     *             <replaceable>a complete explanation on what to do instead</replaceable>
</programlisting>
</para>
        <para>
This is not checked by checkstyle.
</para>
        <para>
Rationale:
This is part of the "Do Simple Things"-development approach that we
use in ArgoUML.
ArgoUML is a big project with lots of legacy code that we do not know
exactly how it works.
Deprecation shows the intent between decision to remove a method and
the point where it is actually removed 
and this without breaking anything of the old code.
There are also modules or plugins that we might know nothing about that
could be loaded by some user to run within ArgoUML to add functionality.
It is for the modules and plugins that we always save 
deprecated methods to the next stable release.
It makes it possible for the module developers to do work during the 
unstable releases and release at the same time as ArgoUML releases its
stable release.
</para>
      </listitem>

      <listitem>
        <para>
Don't use deprecated methods or classes.
</para>
        <para>
Rationale:
Deprecation is an indication that a class is to be removed.
We always want to build ArgoUML in a way that allows for future updates
of everything.
Using things that are on the way out already when doing the implementation
is for this reason not allowed.
</para>
        <para>
Rationale 2:
If you feel like you really want to use a method that is deprecated instead
of the replacement you should first convince the person responsible
for doing the deprecation that he has made a misstake and upgrade ArgoUML
to a version of that library without that method or class deprecated.
If it is within ArgoUML discuss it with the person who actually did 
the deprecation or in the development team.
</para>
        <para>
Comment:
There is an ongoing work (probably perpetually) to change
the calls to deprecated methods and classes that
has been deprecated after used in ArgoUML.
This is a normal part of improving ArgoUML.
If this work is too slow it makes it impossible to upgrade to new
versions of different subtools. 
This problem is seen by "the person responsible for sourceing of the subtool"
when actually trying to upgrade the subtool.
(See <xref linkend="issues_subproducts"></xref>.)
</para>
      </listitem>

      <listitem>
        <para>
Don't use very long package and class names.
</para>
        <para>
To make the code readable,
keep class names shorter than 25 chars, and
have at most four levels of packages.
</para>
        <para>
Historically in the ArgoUML design,
a deep package structure has been used.
There are several places in the code where the package structure is
mimicing the UML hierarchy of objects resulting in impossibly long
package names like
<classname>org.argouml.model.uml.behavioralelements.collaborations.<replaceable>classname</replaceable></classname>, and
<classname>org.argouml.uml.ui.behavior.common_behavior.<replaceable>classname</replaceable></classname>.
</para>
        <para>
While establishing the subsystems we use a two-level approach much
like the rest of the java world.
For the subsystem API we always use:
<classname>org.argouml.<replaceable>subsystem package name</replaceable></classname>
i.e. the classes are in the subsystem's directory and all subsystems have
package names that is a single level below <classname>org.argouml</classname>.
If a subsystem is really complex or will be complex
w.r.t. the amount of classes (meaning more than 50 files with classes),
we create new packages with internal classes on a single level below
the subsystem package.
</para>
        <para>
This is the plan for the subsystems and new classes.
Don't move old classes just yet!
That would create more confusion that it would help.
</para>
      </listitem>

      <listitem>
        <para>
For everything else follow
<ulink url="http://java.sun.com/docs/codeconv/html/CodeConvTOC.doc.html">
Code Conventions for the Java Programming Language
</ulink>
(called Sun Code Conventions)!
</para>
      </listitem>

    </itemizedlist>

    <para>
Some of these rules are marked with a comment that they are 
checked by a checkstyle.
Checkstyle is a tool available with the ArgoUML development environment
preconfigured for these rules.
The current configuration can be found in
<filename>argouml/tools/checkstyle/checkstyle_argouml.xml</filename>.
</para>
    <para>
To run checkstyle run the command
<command>build checkstyle</command> from the
<filename class="directory">argouml/src_new</filename>
directory.
This requires you to have checked out the directories
<filename class="directory">argouml/tools</filename>,
<filename class="directory">argouml/tests</filename>, and
<filename class="directory">argouml/src_new</filename>.
</para>
    <para>
The last couple of checkstyle result are also available in 
the Xenofarm result.
</para>
    <para>
Checkstyle will also check some of the rules from the
Sun Code Conventions that are not stated here.
Furthermore checkstyle nags about when the order of modifiers does
not conform to the suggestions in the
Java Language Specification, Section 8.1.1, 8.3.1, 8.4.3.
</para>
  </sect1>

  <sect1>
    <title>Rules for the building process</title>
    <para>
For the <filename>build.xml</filename> files we use the following rules.
    </para>
    <itemizedlist>
      <listitem>
        <para>
Be careful when downloading stuff.
        </para>
        <para>
ArgoUML is supposed to be a self-contains development environment.
Some times it is better to have things downloaded from the ant script
instead of from the cvs repository.
In that case separate the download-targets from the target that does
building so that it is easy for everyone to know when their 
development machine is working against the internet and when it is not.     
        </para>
      </listitem>

      <listitem>
        <para>
Public targets shall have description.
Non-public targets shall not have description 
(write xml comments or echos instead).
        </para>
      </listitem>

      <listitem>
        <para>
Use ant-builtins for everything.
        </para>
        <para>
ArgoUML is supposed to be a self-contains development environment.
If you feel tempted to use other tools (perl, sed, nsgmls), don't!
They are probably not present in all environments where we want to
run a development environment.
        </para>
      </listitem>
    </itemizedlist>
  </sect1>

  <sect1>
    <title>Checklist for using subproducts</title>
    <sect1info>
      <author>
        <firstname>Linus</firstname>
        <surname>Tolke</surname>
      </author>
    </sect1info>

    <para>
In the ArgoUML project we use several subproducts to solve parts
of the problem for us.
These subproducts are an important part of the ArgoUML tool and
must be handled in a good way if ArgoUML is going to be successful.
</para>
    <para>
When this is written (March 2004) we have had problems with the
discontinuance of one of the subproducts (NSUML) and will continue to 
have it for well some time in the future, until we have managed to replace it.
The problem with NSUML could probably not have been foreseen or avoided
if this checklist would have been in place when NSUML was taken into
the project but some more appearant risks with subproduct candidates might be.
</para>
    <para>
Here is the list of things to check in the subproduct
and to discuss with yourself and maybe with the ArgoUML development team
before considering to use it in the ArgoUML project.
</para>
    <itemizedlist>
      <listitem>
        <para>
License
</para>
        <para>
We must be allowed to
develop against,
release with,
distribute, and
use
the subproduct indefinately
without monetary or other compensation.
</para>
        <para>
Rationale: 
We have no money in the ArgoUML project,
we don't want to have money in the ArgoUML project.
We have no organization that can enter agreements and live up to them.
We don't want to require our users to enter agreements to use ArgoUML.
</para>
      </listitem>
      <listitem>
        <para>
Java version
</para>
        <para>
The subproduct must have a policy that matches the ArgoUML project policy
on java version requirements.
</para>
        <para>
Rationale: 
The ambition for ArgoUML is to be a working tool for
as many people as possible.
Java is still under development and there are nice features available in
future releases.
In ArgoUML we have a plan for how to handle this. It is to always support
two major releases of Java (currently JDK 1.3 and 1.4).
We cannot have a subproduct that restricts us in this aspect.
</para>
      </listitem>
      <listitem>
        <para>
Distribution
</para>
        <para>
We require the subproducts to make it possible for us to take the distribution,
enter it in our CVS repository and write rules to automate
the use of the subproduct while developing, releasing and running ArgoUML.
This automated use must be able to run without relying on access to some
server and without user intervention.
</para>
        <para>
The API documentation of the subproduct (assumed to be javadoc)
we can use from some web site belonging to that subproduct.
</para>
        <para>
Rationale: 
In the ArgoUML project we want to make it as easy as possible for our users
to install ArgoUML.
We also want to make it as easy as possible for our developers to get their
development environment working and for the release manager to prepare
the releases.
</para>
      </listitem>
      <listitem>
        <para>
Roadmap
</para>
        <para>
The project developing the subproduct must have a plan that fits
the ArgoUML plan for the future.
</para>
        <para>
Rationale: 
If a subproduct will soon go somewhere else
i.e. stop doing what we require or stop supporting what we require,
then we will soon have troubles with that subproduct.
</para>
      </listitem>
      <listitem>
        <para>
Working project
</para>
        <para>
The project that develops the subproduct should be a working project.
Check that there is some person responsible for it,
preferably with a team or organization backing him.
Check that there is a plan for upcoming releases.
Check that there is a way to report bugs and enhancement requests.
</para>
        <para>
Rationale:
We don't want to rely on a subproduct where there is no chance of ever
getting a bug that we encounter fixed.
We are also part of an ever-evolving world.
Soon we want the tool to do more for us.
We should then be able to wish that and eventually get an updated subproduct.
</para>
      </listitem>
    </itemizedlist>
  <para>
Notice that we should not and don't need to do this in a passive way.
We should explain to the subproduct team what we want and why.
Especially for subproducts that we have already in ArgoUML but also
for project that we consider taking in.
This is to increase the likelyhood that they will have us in mind when
planning and evolving.
</para>
    <para>
Here are the steps to go through and the recommended order
once the decision is taken to use the subproduct in ArgoUML:
</para>
    <itemizedlist>
      <listitem>
        <para>
Documentation
</para>
        <para>
Describe in the Cookbook in the appropriate subsystem section
what part of the problem that the subproduct solves and
how it is used in ArgoUML.
</para>
      </listitem>
      <listitem>
        <para>
Javadoc
</para>
        <para>
Enter the package list file in a special directory under
<filename class="directory">argouml/lib/javadocs</filename>.
Update the list of links used when building the javadocs.
One place in <filename>default.properties</filename>,
One or two places in <filename>build.xml</filename>
(targets javadocs and javadocs-api).
</para>
        <para>
Test by referencing some class from the subproduct,
building the javadoc, and
check that the link is working.
</para>
      </listitem>
      <listitem>
        <para>
Repository
</para>
        <para>
Assuming that the subproduct is distributed in a set of jar files,
add the jar files to the <filename class="directory">lib</filename> directory
in a versioned way together with the license file.
Use filenames like:
<filename><replaceable>subproduct</replaceable>-<replaceable>version</replaceable>.jar</filename>, and
<filename><replaceable>subproduct</replaceable>.LICENSE.txt</filename>.
</para>
        <para>
A future plan is to have each subsystem in their own directory.
If the subproduct in question belongs to a subsystem that is moved to a
separate directory you should put it in
the <filename class="directory">lib</filename> directory for that subsystem.
For the time being, there is only one
<filename class="directory">lib</filename> directory.
</para>
      </listitem>
      <listitem>
        <para>
Building
</para>
        <para>
Assuming that the subproduct is distributed in a set of jar files,
add the jar files to the list of files that are to be included
when building ArgoUML.
One place in <filename>default.properties</filename>,
Four places in <filename>build.xml</filename>
(targets init (tree places),
prerequisites,
package (two places),
new target check.<replaceable>subproduct</replaceable>), and
One possibly place in <filename>AboutBox.java</filename> (Constructor).
Notice especially that <filename>build.xml</filename> shall not contain
any version information.
Notice also that the text in <filename>AboutBox.java</filename>
shall not contain anything that needs to be localized but just
the subproduct name, reference and possibly version.
</para>
        <para>
Check by having some class from the subproduct loaded immediatly
when starting ArgoUML and start using
<command>build run</command>.
</para>
      </listitem>
      <listitem>
        <para>
Running from modules
</para>
        <para>
With the current modules set up
(in <filename class="directory">argouml/modules</filename>) the
idea is that we are supposed to be able to start ArgoUML from any
of the modules directory.
This means that whenever changing the list of modules you will have
to update the classpaths in all these modules.
Go through the list of files <filename>argouml/modules/*/build.xml</filename>
and update.
</para>
        <para>
Check by having some class from the subproduct loaded immediatly
when starting ArgoUML and start in each of these directories.
</para>
      </listitem>
      <listitem>
        <para>
Distribution
</para>
        <para>
Assuming that the subproduct is distributed in a set of jar files,
add the jar files to the list of files that are to be included
when releasing ArgoUML.
One place in <filename>build.xml</filename> (target dist-javawebstart),
One place in <filename>manifest.template</filename> (Class-Path),
In each of the Java Web Start files (resources),
In the <filename>Info.plist</filename> (ClassPath).
</para>
        <para>
Check by having some class from the subproduct loaded immediatly
when starting ArgoUML and start with
<command>java -jar argouml.jar</command>,
using each of the Java Web Start files, and
from the Appbund (on a Mac).
</para>
      </listitem>
    </itemizedlist>

    <para>
See <xref linkend="issues_subproducts"></xref> for a discussion on 
how to handle bugs found in subproducts and
updates of the version of a subproduct.
</para>
  </sect1>

  <sect1>
    <sect1info>
      <author>
        <firstname>Linus</firstname>
        <surname>Tolke</surname>
      </author>
    </sect1info>
    <title>Settings for Eclipse 2</title>
    <para>
These style guides correspond to the following settings in Eclipse 2:
</para>
    <itemizedlist>
      <listitem>
        <para>In Preferences => Java => Code Formatter => New Lines</para>
        <para>
None of the boxes 
"Insert a new line before opening brace",
"Insert new lines in control statements",
"Clear all blank lines",
"Insert new line between 'else if'",
or
"Insert a new line inside an empty block"
are checked.
</para>
      </listitem>
      <listitem>
        <para>
In Preferences => Java => Code Formatter => Line Splitting
</para>
        <para>
Maximum line length is 80.
</para>
      </listitem>
      <listitem>
        <para>In Preferences => Java => Code Formatter => Style</para>
        <para>
None of the boxes
"Compact assignment"
or
"Indentation is represented by a tab"
are checked.
</para>
        <para>
Number of spaces representing a tab: 4.
This should probably be read as Number of spaces representing a 
level of indentation.
</para>
      </listitem>
      <listitem>
        <para>In Preferences => Java => Java Editor => Appearance</para>
        <para>
Displayed tab width: 8
</para>
        <para>
"Insert space for tabs (see Formatting preferences)" checked.
There seems to be no way of having tabs set at width 8 and the
indentation level set at 4 at the same time so we must let
Eclipse generate code without tabs to obey the Sun Coding standard.
</para>
      </listitem>
    </itemizedlist>
  </sect1>
  <sect1>
    <sect1info>
      <author>
        <firstname>Linus</firstname>
        <surname>Tolke</surname>
      </author>
    </sect1info>
    <title>Settings for NetBeans</title>
    <para>
These style guides correspond to the following settings in NetBeans:
    </para>
    <itemizedlist>
      <listitem>
        <para>
In (Tools =>) Options => Editing => Editor Settings => Java Editor
        </para>
        <para>
Tab Size = 8
        </para>
      </listitem>
      <listitem>
        <para>
In (Tools =>) Options => Editing => 
Indentation Engines => Java Indentation Engine
        </para>
        <para>
Add Newline Before Brace: False,
Add Space Before Parenthesis: False,
Expand Tabs to Spaces: False,
Number of Spaces per Tab: 4 (Should probably be read as
Number of Spaces per indentation level).
        </para>
      </listitem>
    </itemizedlist>
  </sect1>
  <sect1>
    <sect1info>
      <author>
        <firstname>Linus</firstname>
        <surname>Tolke</surname>
      </author>
    </sect1info>
    <title>Settings for Emacs</title>
    <para>
These style guides correspond to the default java settings in Emacs:
<programlisting>
 ("java"
  (c-basic-offset . 4)
  (c-comment-only-line-offset 0 . 0)
  (c-offsets-alist
   (inline-open . 0)
   (topmost-intro-cont . +)
   (statement-block-intro . +)
   (knr-argdecl-intro . 5)
   (substatement-open . +)
   (label . +)
   (statement-case-open . +)
   (statement-cont . +)
   (arglist-intro . c-lineup-arglist-intro-after-paren)
   (arglist-close . c-lineup-arglist)
   (access-label . 0)
   (inher-cont . c-lineup-java-inher)
   (func-decl-cont . c-lineup-java-throws)))
</programlisting>
    </para>
  </sect1>

  <sect1>
    <sect1info>
      <author>
	<firstname>Linus</firstname>
	<surname>Tolke</surname>
      </author>
    </sect1info>
    <title>How to work with Eclipse 3</title>
    <para>
If you are running Eclipse 3 the development environment fitting ArgoUML
is achieved using the following steps.
These steps only go so far as to the building of ArgoUML itself.
I (Linus Tolke) hope that we will eventually add steps that sets up also
the JUnit test cases and
the modules.
</para>
    <itemizedlist>
      <listitem>
	<para>
Code conventions.
</para>
	<para>
Set the Code Formatter to "Java conventions [built-in]".
</para>
      </listitem>

      <listitem>
	<para>
New file templates.
</para>

	<para>
Set the Code Templates for New Java files to
<programlisting>
// &dollar;&dollar;Id&dollar;&dollar;
// Copyright (c) 2004 The Regents of the University of California. All
// Rights Reserved. Permission to use, copy, modify, and distribute this
// software and its documentation without fee, and without a written
// agreement is hereby granted, provided that the above copyright notice
// and this paragraph appear in all copies.  This software program and
// documentation are copyrighted by The Regents of the University of
// California. The software program and documentation are supplied "AS
// IS", without any accompanying services from The Regents. The Regents
// does not warrant that the operation of the program will be
// uninterrupted or error-free. The end-user understands that the program
// was developed for research purposes and is advised not to rely
// exclusively on the program for any reason.  IN NO EVENT SHALL THE
// UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR DIRECT, INDIRECT,
// SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING LOST PROFITS,
// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
// SUCH DAMAGE. THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY
// WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
// PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
// CALIFORNIA HAS NO OBLIGATIONS TO PROVIDE MAINTENANCE, SUPPORT,
// UPDATES, ENHANCEMENTS, OR MODIFICATIONS.

${package_declaration}

${typecomment}
${type_declaration}
</programlisting>
</para>
      </listitem>

      <listitem>
	<para>
Compiler options.
</para>
	<para>
Compliance and classfiles => Compiler compliance level: 1.3.
</para>
	<para>
Suggested settings (only things diverting from the Eclipse Defaults listed:
Style => Possible accidental boolean assignment: Warning.
Advanced => Local variable declaration hides another field or variable: Warning.
Advanced => Field declaration hides another field or variable: Warning.
Unused code => Local variable is never read: Warning.
Unused code => Parameter is never read: Warning.
Unused code => Unused or unread private members: Warning.
Unused code => Unnecessary semicolon: Warning.
Unused code => Unnecessary cast or 'instanceof' operation: Warning.
Unused code => Unnecessary declaration of thrown checked exception: Warning.
Javadoc => Malformed javadoc comments: Warning, Private, Report errors in tags.
Javadoc => Missing javadoc tags: Warning, Protected,
Check overriding and implementing methods.
To be continued...
</para>
      </listitem>

      <listitem>
	<para>
CVS Repository.
</para>
	<para>
Host: cvs.tigris.org
Repository path: /cvs
User: <replaceable>Your Tigris user.</replaceable>
Password: <replaceable>Your Tigris password.</replaceable>
Connection type: pserver
Use Default Port.
</para>
      </listitem>

      <listitem>
	<para>
Check out.
</para>
	<para>
Unfold the CVS Repository and within it, HEAD.
</para>
	<para>
Select the argouml project and do Check Out As.
Check out as a project configured using the New Project Wizard.
Finish.
Select Java Project.
Choose name: argouml.
Ignore the build path settings. We will come back to them later.
</para>
	<para>
This takes a while.
The download is around 60Meg.
If you are on a modem or other low bandwidth connection,
this is not recommended since you will download
all of the web site,
the source for the documentation, and
all modules,
things that you could do without unless you would want to work on them.
If you find a way to do this with less bandwidth use,
please help improving this description.
Theoretically we can come down to around 16Meg which would take around
five hours on a 56K modem.
</para>
      </listitem>

      <listitem>
	<para>
Build using ant.
</para>
	<para>
Browse to <filename>argouml/src_new/build.xml</filename>
and do 
<command>Run ant</command> on it.
Select compile (default target) and Run.
</para>
	<para>
There are some files that are built using rules in the
<filename>build.xml</filename> file.
This is the antlr files and the file containing a version.
</para>
      </listitem>

      <listitem>
	<para>
Set build path.
</para>

	<para>
Enter Java Build Path (under Project => Properties).
</para>

	<para>
Under source:
Remove <filename class="directory">argouml/src</filename>.
Add <filename class="directory">argouml/src_new</filename>.
</para>
	<para>
Under Libraries:
Add JARs:
all files in <filename class="directory">argouml/lib</filename>
Add JARs:
the file <filename>argouml/tools/ant-1.4.1/lib/xerces-1.2.3.jar</filename>
</para>
	<para>
Eclipse shall rebuild.
Verify that there are no errors, just warnings left among the problems.
</para>
      </listitem>

      <listitem>
	<para>
Select the class with the main method.
</para>
	<para>
It is in
<filename>argouml/src_new/org/argouml/application/Main.java</filename>.
</para>
      </listitem>
      <listitem>
	<para>
Verify that you can start ArgoUML from the debugger within Eclipse.
</para>
      </listitem>
    </itemizedlist>
  </sect1>

</chapter>



<!-- Local stuff for Emacs - please do not delete

Local Variables:
mode: xml
sgml-doctype: "cookbook.xml"
sgml-parent-document: ("cookbook.xml" "chapter" nil)
sgml-validate-command: "nsgmls -wxml -sv ../docbook-setup/xml.dcl \
  cookbook.xml"
End:

-->
