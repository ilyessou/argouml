<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- $Id$ -->
<!--
// Copyright (c) 1996-2006 The Regents of the University of California. All
// Rights Reserved. Permission to use, copy, modify, and distribute this
// software and its documentation without fee, and without a written
// agreement is hereby granted, provided that the above copyright notice
// and this paragraph appear in all copies.  This software program and
// documentation are copyrighted by The Regents of the University of
// California. The software program and documentation are supplied "AS
// IS", without any accompanying services from The Regents. The Regents
// does not warrant that the operation of the program will be
// uninterrupted or error-free. The end-user understands that the program
// was developed for research purposes and is advised not to rely
// exclusively on the program for any reason.  IN NO EVENT SHALL THE
// UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR DIRECT, INDIRECT,
// SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING LOST PROFITS,
// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
// SUCH DAMAGE. THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY
// WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
// PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
// CALIFORNIA HAS NO OBLIGATIONS TO PROVIDE MAINTENANCE, SUPPORT,
// UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
-->

<sect1 id="critics">
      <title>Critics and other cognitive tools</title>
      <indexterm>
	<primary>Critics</primary>
      </indexterm>
      <indexterm>
	<primary>Check lists</primary>
      </indexterm>
      <indexterm>
	<primary>Wizards</primary>
      </indexterm>
      <para id="comp-critics-purpose">
Purpose - to provide cognitive help for the User.
This help is based on the current model that the User works with.
</para>
      <para>
The Critics are located in <classname>org.argouml.cognitive</classname>.
</para>
      <para>
The Critics is a Loadable subsystem. See <xref linkend="loadable_subsystems"></xref>.
</para>
      <para>
The Critics subsystem depends on the Model that it works against to take
all decisions
and the To Do Items used to present the information.
</para>
      <para>
This subsystem contains the following main class types:
</para>
      <itemizedlist>
	<listitem>
	  <para>
Critics provide help to find artifacts in
the model that do not obey simple design "rules" or
"best practices".
</para>
	</listitem>
	<listitem>
	  <para>
Checklists provide help for the user to suggest and
keep track of considerations that the user should make
for each design element.
Checklists are currently (0.9.5 and 0.9.6) turned off.
</para>
	</listitem>
	<listitem>
	  <para>
ToDoItems provide a way for the Critics to communicate
their knowledge to the User and let the User start Wizards.
</para>
	</listitem>
	<listitem>
	  <para>
Wizards are step by step instructions that fix problems
found by the Critics.
</para>
	</listitem>
      </itemizedlist>

      <sect2>
	<title>Main classes</title>
<para>Here is an illustration of the main classes implementing critics</para>
<mediaobject>
					<imageobject>
						<imagedata format="GIF" fileref="images/cookbook/critics.gif"/>
					</imageobject>
				</mediaobject>
<para>Critics are currently located in:
<itemizedlist>
<listitem><para>org.argouml.cognitive.critics</para>
	    <para>
These are basic critics, which are very general in nature. For example
ArgoUML keeps nagging when Model elements overlap, which makes the
Diagram hard to read.
</para>
	    <para>
This package also contains the base classes for the handling.
</para>
</listitem>
<listitem><para>org.argouml.uml.cognitive.critics</para>
	    <para>
These are Critics which are directly related to UML issues (well, more
or less). For example, it will nag when a class has too many
operations, because that makes it hard to maintain the particular
class.
</para>
	    <para>
This package also contains Wizards used by these Critiques.
</para>
</listitem>
<listitem><para>org.argouml.pattern.cognitive.critics</para>
            <para>
These are critics related to patterns. 
Currently they deal only with the Singleton pattern
</para>
</listitem>
<listitem><para>org.argouml.language.java.cognitive.critics</para>
            <para>
These are critics which deal with java specific issues. 
Currently this is only a warning against modeling multiple inheritance.
</para>
</listitem>
</itemizedlist>
</para>
      <para>
The Base class for Wizards is <classname>org.argouml.kernel.Wizard</classname>.
</para>
      <para>
Checklists are located in the package org.argouml.cognitive.checklist.
</para>
      <para>
Helper classes for To Do Items, To Do Pane, Wizards and the Knowledge Types
are located in the package org.argouml.cognitive.ui.
</para>
      </sect2>

<sect2 id="howdoi_critics">
<title>How do I ...?</title>
<para>
<itemizedlist>
	    <listitem><para>...create a new critique?</para>
	      <para>
Currently the only way to add a new critique is to write a class that
implements it so that is described here.
There have however been ideas on a possibility to build critics in
some other way in the future, as a set of rules instead of java code.
</para>
	      <para>
Create a new critic class, of the form 
<classname>Cr<replaceable>XxxxYyyyZzzz</replaceable></classname>, 
extending <classname>CrUML</classname>.
Typically your new class will go in the package
<classname>org.argouml.uml.cognitive.critics</classname>,
but it could go in one of the other
<classname>cognitive.critics</classname> packages.
</para>
	      <para>
Write a constructor, which takes no arguments and calls the following
methods of <classname>CrUML</classname>:
</para>
	      <itemizedlist>
		<listitem>
		  <para>
<command>setHeadline("");</command>
to set up the locale specific text for 
the critic headline (the one liner that appears in the to-do pane)
and
the critic description (the detailed explanation that appears in 
the to-do tab of the details pane).
The String parameter is ignored.
</para>
		</listitem>
		<listitem>
		  <para>
<command>addSupportedDecision(UMLDecision.dec<replaceable>AAAA</replaceable>);</command>
where <replaceable>AAAA</replaceable> is the design issue category
this critic falls into
(examples include STORAGE, PATTERN METHODS).
</para>
		</listitem>
		<listitem>
		  <para>
<command>setPriority(ToDoItem.<replaceable>BBB</replaceable>_PRIORITY);</command>
where <replaceable>BBB</replaceable> is one of
<constant>LOW</constant>, <constant>MEDIUM</constant> or 
<constant>HIGH</constant>, to set the priority for the critic 
in the to-do pane.
</para>
		</listitem>
		<listitem>
		  <para>
<command>addTrigger("<replaceable>UML Meta-Class</replaceable>");</command>
where <replaceable>UML Meta-Class</replaceable> is a UML Meta-Class,
with initial lower capital, e.g. "associationEnd".
The intention is that critics should only trigger for elements (or
children) of particular UML meta-classes.
I (Jeremy Bennett February 2002) believe this code is not yet working
so you can probably leave it out.
You can have multiple calls to this method for different meta-classes.
</para>
		</listitem>
	      </itemizedlist>
	      <para>
After this add a method 
<command>public boolean predicate2(Object dm, Designer dsgr);</command>.
This is the decision routine for the critic.
<parameter>dm</parameter> is the UML entity (an NSUML object)
that is being checked.
The second argument, <parameter>dsgr</parameter> is for future
development and can be ignored.
The <classname>Critic</classname> class conveniently defines
two boolean constants 
<constant>NO_PROBLEM</constant> and 
<constant>PROBLEM_FOUND</constant> to be returned
according to whether the object is OK, or triggers the critic.
</para>
	      <para>
<parameter>dm</parameter> may be any UML object, 
so the first action is to see if it is an
artifact of interest and if not return 
<constant>NO_PROBLEM</constant>.
</para>
	      <para>
The remaining code should examine <parameter>dm</parameter> and
return <constant>NO_PROBLEM</constant> or
<constant>PROBLEM_FOUND</constant> as appropriate.
</para>
	      <para>
Having written the code you need to add the text for the headline and
description to the cognitive resource bundles. 
These are in the package 
<classname>org.argouml.i18n</classname>, 
in the file
<filename>critics.properties</filename>.
You need to add two keys for the head and description,
which will be named respectively
<constant>critics.<replaceable>CrXxxxxYyyyZzzz</replaceable>-head</constant>
and
<constant>critics<replaceable>CrXxxxxYyyyZzzz</replaceable>-desc</constant>.
There are plenty of examples to look at there.
The other files 
for
British English,
Spanish, ...
respectively)
are the responsibility of the corresponding language team.
Notify the language teams that there is work to be done.
</para>
	      <para>
In method <methodname>Init</methodname>
of the class <classname>org.argouml.uml.cognitive.critics.Init</classname>, 
add two statements:
<programlisting>
  private static Critic <replaceable>crXxxxxYyyyZzzz</replaceable> = new <replaceable>CrXxxxxYyyyZzzz</replaceable>();
...
  Agency.register(<replaceable>crXxxxxYyyyZzzz</replaceable>, <replaceable>DesignMaterialCls</replaceable>);
</programlisting>
If you want to add a critic to a design material 
which is not already declared (for example the Extend class), 
you will have to add a third statement to the 
<methodname>Init</methodname> method as well, which is:
<programlisting>
  java.lang.Class <replaceable>XxxYyyyZzCls</replaceable> = <replaceable>MXxxYyyyZzImpl</replaceable>.class;
</programlisting>
where <replaceable>MXxxYyyyZzImpl</replaceable>.class should be part of the NovoSoft UML package.
</para>
	      <para>
Finally you should get a new section added to the user manual reference
section on critics.
The purpose of this is to collect all the details and rationale around
this critic to complement the short text in the description.
It should go in the ref_critics.xml file and have an id tag
named critics.<replaceable>CrXxxYyyyZzzz</replaceable>.
</para>
	    </listitem>
	    <listitem>
	      <para>...write the test in a critique?</para>
	      <para>
The critiques tests are essentially a combination of conditions 
that are to be fulfilled.
The conditions are often simple tests on simple model elements.
</para>
	      <para>
The class
<classname>org.argouml.cognitive.critics.CriticUtils</classname>
contains static routines that are commonly needed when writing
<methodname>predicate2</methodname>
(for example to test if a class has a constructor).
If you find you are writing code that may be of wider use than just
your critic, you should add it to
<classname>CriticUtils</classname>
rather than putting it in your critic.
</para>
	      <para>
For commented examples to copy, look at
<classname>org.argouml.pattern.cognitive.critics.CrConsiderSingleton</classname>,
<classname>org.argouml.pattern.cognitive.critics.CrSingletonViolated</classname> and
<classname>org.argouml.uml.cognitive.critics.CrConstructorNeeded</classname>.
</para>
	    </listitem>
<listitem><para>...fix a critique?</para>
<para>Locate the critique and insert some logging code. You should make sure that you understand all the implications of changes, therefore it is a good idea to see what makes the critic nag in the first place. But rest assured: some of the critics haven't been updated to reflect the latest changes in ArgoUML, so this is a procedure which is well worth digging into, since it gives you also some exposure to related NSUML elements.</para>
</listitem>
<listitem><para>...change the text of a critique?</para>
<para>
The texts of the critics should be in the according localization files
and resource bundles. Be careful: in some critics the text is still in
the critic, but if you change that, you will notice that it doesn't
have any effect.
</para>
</listitem>

	<listitem>
	  <para>...get my critic to trigger?</para>
	  <para>
This is a suggested way to troubleshoot if the critic doesn't trigger.
</para>
	  <para>
<orderedlist>
	      <listitem>
		<para>
Check that the settings for critics are enabled (Toggle Auto Critique)
</para>
	      </listitem>
	      <listitem>
		<para>
Check that your critic is registered in 
<classname>org.argouml.uml.cognitive.critics.Init</classname>
with the right class 
(e.g. check inheritance structure against UML spec)
</para>
	      </listitem>
	      <listitem>
		<para>
Check that your particular critic is enabled in Browse Critics
</para>
	      </listitem>
	      <listitem>
		<para>
(IMPORTANT) Check that the design material is actually found in 
<classname>org.argouml.uml.cognitive.critics.ChildGenUML</classname>.
This method is incomplete and might not find all model elements!
</para>
	      </listitem>
	    </orderedlist>
</para>
	</listitem>

</itemizedlist>
</para> 
</sect2>
      <sect2>
	<title>org.argouml.cognitive.critics.* class diagram</title> 
	  <mediaobject>
	    <imageobject>
	      <imagedata fileref="images/screenshots/argocogcriticsreduced.png" format="PNG"/> 
	    </imageobject>
	</mediaobject>
      </sect2>
</sect1>



<!-- Local stuff for Emacs - please do not delete

Local Variables:
mode: xml
sgml-doctype: "cookbook.xml"
sgml-parent-document: ("cookbook.xml" "sect1" nil)
sgml-validate-command: "nsgmls -wxml -sv ../docbook-setup/xml.dcl \
  cookbook.xml"
End:

-->
