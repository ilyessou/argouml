<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- $Id$ -->
<!--
// Copyright (c) 1996-2005 The Regents of the University of California. All
// Rights Reserved. Permission to use, copy, modify, and distribute this
// software and its documentation without fee, and without a written
// agreement is hereby granted, provided that the above copyright notice
// and this paragraph appear in all copies.  This software program and
// documentation are copyrighted by The Regents of the University of
// California. The software program and documentation are supplied "AS
// IS", without any accompanying services from The Regents. The Regents
// does not warrant that the operation of the program will be
// uninterrupted or error-free. The end-user understands that the program
// was developed for research purposes and is advised not to rely
// exclusively on the program for any reason.  IN NO EVENT SHALL THE
// UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR DIRECT, INDIRECT,
// SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING LOST PROFITS,
// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
// SUCH DAMAGE. THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY
// WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
// PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
// CALIFORNIA HAS NO OBLIGATIONS TO PROVIDE MAINTENANCE, SUPPORT,
// UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
-->

<!--

Description of all the artifacts associated with use case diagrams within
&argouml;.

-->

<chapter id="ch.ref.entusecase">
  <title>Use Case Diagram Artifact Reference</title>
  <indexterm>
    <primary>Use Case Diagram</primary>
  </indexterm>

  <sect1>
    <title>Introduction</title>

    <para>This chapter describes each artifact that can be created within a use
      case diagram. Note that some sub-artifacts of artifacts on the diagram
      may not actually themselves appear on the diagram.</para>

    <para>There is a close relationship between this material and the
      properties tab of the details pane (see
      <xref linkend="s1.ref.proptab"/>). That section covers properties in
      general, in this chapter they are linked to specific artifacts.</para>

    <!-- A diagram to show all things visible on the diagram -->

    <para><xref linkend="fig.ref.use_case_diagram"/> shows a use case diagram
      with all possible artifacts displayed.</para>

    <!-- This should be a comprehensive picture. In fact its just the minimum
         at the moment. It would be good to put some bubbles on this one
         pointing things out as well. -->

    <figure id="fig.ref.use_case_diagram" float="1">
      <title>Possible artifacts on a use case diagram.</title>

      <screenshot><mediaobject>
        <imageobject>
          <imagedata format="GIF" align="center"
                     fileref="images/reference/use_case_diagram.gif"/>
        </imageobject>
      </mediaobject></screenshot>
    </figure>

    <!-- Limitations in &argouml; relating to display of extension points. -->

    <sect2>
      <title>&argouml; Limitations Concerning Use Case Diagrams</title>

      <para>
Use case diagrams are now well supported within &argouml;. 
The only limitation is that extension points cannot be shown in a
        separate compartment on the use case.</para>

      <note>
        <para>
Earlier versions of &argouml; (0.9 and earlier) implemented extend and
        include relationships by using a stereotyped dependency
        relationship. Although such diagrams will show correctly on the
        diagram, they will not link correctly to the use cases, and should be
        replaced by proper extend and include relationships using the current
        system.
</para>
      </note>
    </sect2>
  </sect1>

  <!-- Artifacts specific to use case diagrams. Actor -->

  <sect1 id="s1.ref.actor">
    <title>Actor</title>
    <indexterm>
      <primary>Actor</primary>
    </indexterm>
    <indexterm>
      <primary>External entity</primary>
    </indexterm>

    <para>An actor represents any external entity (human or machine) that
      interacts with the system, providing input, receiving output, or
      both.</para>

    <para>Within the UML metamodel, actor is a sub-class of
     <literal>classifier</literal>.</para>

    <para>The actor icon is a stick man (see <xref
      linkend="fig.ref.use_case_diagram"/>).</para>

    <!-- The details tabs -->

    <sect2>
      <title>Actor Details Tabs</title>
      <indexterm>
        <primary>Actor Details Tabs</primary>
      </indexterm>
      <indexterm>
        <primary>Details Tabs</primary>
        <secondary>for Actor</secondary>
      </indexterm>

      <para>The details tabs that are active for actors are as
        follows.</para>

      <variablelist>

        <!-- Entry for ToDoItem tab -->

        <varlistentry>
          <term><literal>ToDoItem</literal></term>

          <listitem><para>Standard tab.</para></listitem>
        </varlistentry>

        <!-- Entry for Properties tab -->

        <varlistentry>
          <term><literal>Properties</literal></term>

          <listitem><para>See <xref linkend="s2.ref.actor_property_toolbar"/>
            and <xref linkend="s2.ref.actor_property_fields"/>
            below.</para></listitem>
        </varlistentry>

        <!-- Entry for Documentation tab -->

        <varlistentry>
          <term><literal>Documentation</literal></term>

          <listitem>
            <para>Standard tab.
See <xref linkend="s2.ref.documentation_tab"/>.
</para>
          </listitem>
        </varlistentry>

        <!-- Entry for Style tab -->

        <varlistentry>
          <term><literal>Style</literal></term>

          <listitem><para>Standard tab. Fill color is used for the stick
            man's head.</para></listitem>
        </varlistentry>

        <!-- Entry for Source tab -->

        <varlistentry>
          <term><literal>Source</literal></term>

          <listitem><para>Standard tab. It would not be usual to provide any
            code for an actor, since it is external to the
            system.</para>

          <note><para>The source tab content can be changed, but this has
            no effect.</para></note></listitem>
        </varlistentry>

        <!-- Entry for Constraints tab -->

        <varlistentry>
          <term><literal>Constraints</literal></term>

          <listitem>
            <para>&constraintssupport;
</para>
          </listitem>
        </varlistentry>

        <!-- Entry for Tagged Values tab -->

        <varlistentry>
          <term><literal>Tagged Values</literal></term>

          <listitem><para>Standard tab. In the UML metamodel,
            <literal>Actor</literal> has the following standard tagged
            values defined.</para>

            <itemizedlist>
              <listitem><para><literal>persistence</literal> (from the
                superclass, <literal>Classifier</literal>). Values
                <literal>transitory</literal>, indicating state is
                destroyed when an instance is destroyed or
                <literal>persistent</literal>, marking state is
                preserved when an instance is destroyed.</para>

              <tip><para>Actors sit outside the system, and so their
                internal behavior is of little concern, and this tagged
                value is best ignored.</para></tip></listitem>

              <listitem><para><literal>semantics</literal> (from the
                superclass, <literal>Classifier</literal>). The value is a
                specification of the semantics of the
                actor.</para></listitem>

              <listitem><para><literal>derived</literal> (from the
                superclass, <literal>ModelElement</literal>). Values
                <literal>true</literal>, meaning the actor is
                redundant&mdash;it can be formally derived from other
                elements, or <literal>false</literal> meaning it
                cannot.</para>

              <note><para>Derived actors have limited value, since they sit
                outside the system being designed. They may have their
                value in analysis to introduce useful names or
                concepts.</para></note></listitem>
            </itemizedlist>
          </listitem>
        </varlistentry>

      </variablelist>
    </sect2>

    <!-- Actor properties -->

    <sect2 id="s2.ref.actor_property_toolbar">
      <title>Actor Property Toolbar</title>

      <variablelist>

        <!-- Entry for Go up button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/navigate_up.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Go
            up</literal></term>

          <listitem><para>Navigate up through the package structure of the
            model.</para></listitem>
        </varlistentry>

        <!-- Entry for Add actor button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/actor.gif"/>
                </imageobject>
              </inlinemediaobject>
</guiicon>
<literal>Add Actor</literal>
</term>

          <listitem>
            <indexterm>
              <primary>Add Actor</primary>
            </indexterm>
            <indexterm>
              <primary>New Actor</primary>
            </indexterm>
            <indexterm>
              <primary>Create New</primary>
              <secondary>Actor</secondary>
            </indexterm>

            <para>
This creates a new actor within the model, (but not
            within the diagram), navigating immediately to the
            properties tab for that actor.</para>

          <tip><para>This method of creating new actors can be
            confusing. Much better to create them within diagrams where you
            want them.</para></tip></listitem>
        </varlistentry>

        <!-- Entry for Delete button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/property_delete.gif"/>
          </imageobject></inlinemediaobject></guiicon>
            <literal>Delete</literal></term>

          <listitem><para>This deletes the selected actor from the
            model.</para>

          <warning><para>This is a deletion from the model
            <emphasis>not</emphasis> just the diagram. To delete an actor
            from the diagram, but keep it within the model, use the main
            menu <literal>Remove From Diagram</literal>
(or press the Delete key).
</para>
            </warning>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <!-- Fields in the properties tab -->

    <sect2 id="s2.ref.actor_property_fields">
      <title>Property Fields For Actor</title>

      <variablelist>

        <!-- Entry for Name -->

        <varlistentry>
          <term><literal>Name</literal></term>

          <listitem>
            <indexterm>
              <primary>Actor Name</primary>
            </indexterm>
            <indexterm>
              <primary>Name</primary>
              <secondary>of Actor</secondary>
            </indexterm>

            <para>Text box.
The name of the actor.
Since an actor is a
            classifier, it would be conventional to Capitalize the first
            letter (and initial letters of any component words),
            e.g. <literal>RemoteSensor</literal>.</para>

          <note><para>&argouml; does not enforce any naming convention for
            actors</para></note></listitem>
        </varlistentry>

        <!-- Entry for Stereotype -->

        <varlistentry>
          <term><literal>Stereotype</literal></term>

          <listitem>
            <indexterm>
              <primary>Actor Stereotype</primary>
            </indexterm>
            <indexterm>
              <primary>Stereotype</primary>
              <secondary>of Actor</secondary>
            </indexterm>

            <para>Drop down selector.
Actor is provided by default with
            the UML standard stereotypes (<literal>metaclass</literal>,
            <literal>powertype</literal>, <literal>process</literal>,
            <literal>thread</literal>, <literal>utility</literal>) for
classifiers.
Stereotypes are of limited value with actors.
The stereotypes
<literal>machine</literal>,
<literal>organization</literal>,
<literal>person</literal> and
<literal>singleton</literal>
are probably of most use.
However, they are not provided by default with &argouml;.
</para>
          </listitem>
        </varlistentry>

        <!-- Entry for Navigate Stereotype -->

        <varlistentry>
          <term><literal>Navigate Stereotype</literal></term>

          <listitem><para><guiicon><inlinemediaobject><imageobject><imagedata
              format="GIF" align="center"
              fileref="images/icons/navigate_stereotype.gif"/>
            </imageobject></inlinemediaobject></guiicon> icon. If a
              stereotype has been selected, this will navigate to the
              stereotype property panel (see <xref
                linkend="s1.ref.stereotype"/>).</para></listitem>
        </varlistentry>

        <!-- Entry for Namespace -->

        <varlistentry>
          <term><literal>Namespace</literal></term>

          <listitem>
            <indexterm>
              <primary>Actor Namespace</primary>
            </indexterm>
            <indexterm>
              <primary>Namespace</primary>
              <secondary>of Actor</secondary>
            </indexterm>

            <para>Text box.
Records the namespace for the actor.
This
            is the package hierarchy.</para>
          </listitem>
        </varlistentry>

        <!-- Entry for Modifiers -->

        <varlistentry>
          <term><literal>Modifiers</literal></term>

          <listitem>
            <indexterm>
              <primary>Actor Modifiers</primary>
            </indexterm>
            <indexterm>
              <primary>Modifiers</primary>
              <secondary>of Actor</secondary>
            </indexterm>

            <para>Check box, with entries 
<literal>Abstract</literal>,
<literal>Leaf</literal> and
<literal>Root</literal>.
</para>

            <itemizedlist>
              <listitem>
                <para><literal>Abstract</literal>
is used to declare
              that this actor cannot be instantiated, but must always be
              specialized.</para>

            <caution><para>While actors can be specialized and
              generalized, it is not clear that an abstract actor has any
              meaning. Perhaps it might be used to indicate an actor that
              does not itself interact with a use case, but whose children
              do.</para></caution></listitem>

              <listitem>
                <para><literal>leaf</literal>
indicates that this
              actor can have no further children, while
<literal>Root</literal> indicates it is a top level
              actor with no parent.</para></listitem>
            </itemizedlist>
          </listitem>
        </varlistentry>

        <!-- Entry for Generalizations -->

        <varlistentry>
          <term><literal>Generalizations</literal></term>

          <listitem>
            <indexterm>
              <primary>Actor Generalizations</primary>
            </indexterm>
            <indexterm>
              <primary>Generalizations</primary>
              <secondary>of Actor</secondary>
            </indexterm>

            <para>Text area.
Lists any actor that
            <emphasis>generalizes</emphasis> this actor.</para>

            <para>
&Button1; Double Click
navigates to the generalization and opens
            its property tab.</para>

          </listitem>
        </varlistentry>

        <!-- Entry for Specializations -->

        <varlistentry>
          <term><literal>Specializations</literal></term>

          <listitem>
            <indexterm>
              <primary>Actor Specializations</primary>
            </indexterm>
            <indexterm>
              <primary>Specializations</primary>
              <secondary>of Actor</secondary>
            </indexterm>

            <para>Text box.
Lists any specialized actor (i.e. for which
            this actor is a generalization. The specialized actors can
            communicate with the same use case instances as this actor.</para>

          <para>&button1; click navigates to the generalization and opens
            its property tab.</para>

          </listitem>
        </varlistentry>

        <!-- Entry for AssociationEnds -->

        <varlistentry>
          <term><literal>Association Ends</literal></term>

          <listitem>
            <indexterm>
              <primary>Actor Association Ends</primary>
            </indexterm>
            <indexterm>
              <primary>Association Ends</primary>
              <secondary>of Actor</secondary>
            </indexterm>

            <para>Text area. 
Lists any association ends of associations connected to this actor.
</para>
            <para>
              &Button1; Double Click navigates to the selected entry.
            </para>

          </listitem>
        </varlistentry>

      </variablelist>
    </sect2>
  </sect1>

  <!-- use case -->

  <sect1 id="s1.ref.use_case">
    <title>Use Case</title>
    <indexterm>
      <primary>Use Case</primary>
    </indexterm>

    <para>A use case represents a complete meaningful <quote>chunk</quote> of
      activity by the system in relation to its external users (actors), human
      or machine. It represents the primary route through which requirements
      are captured for the system under construction</para>

    <para>Within the UML metamodel, use case is a sub-class of
     <literal>classifier</literal>.</para> 

    <para>The use case icon is an oval (see <xref
      linkend="fig.ref.use_case_diagram"/>). It may be split in two, with the
      lower compartment showing extension points</para>

    <caution><para>By default &argouml; does not show the extension point
      compartment. It may be revealed by the context sensitive
      <literal>Show</literal> menu (using &button2; click), or from the Style
      tab.</para></caution>

    <warning>
      <para>
<!-- Issue: 2140 -->
The current release of &argouml; does not preserve
information about whether the extension point compartment is showing on save.
On reload, no compartments will be visible.
</para>
    </warning>

    <!-- The details tabs -->

    <sect2>
      <title>Use Case Details Tabs</title>
      <indexterm>
        <primary>Use Case Details Tabs</primary>
      </indexterm>
      <indexterm>
        <primary>Details Tabs</primary>
        <secondary>for Use Case</secondary>
      </indexterm>

      <para>The details tabs that are active for use cases are as
        follows.</para>

      <variablelist>

        <!-- Entry for ToDoItem tab -->

        <varlistentry>
          <term><literal>ToDoItem</literal></term>

          <listitem><para>Standard tab.</para></listitem>
        </varlistentry>

        <!-- Entry for Properties tab -->

        <varlistentry>
          <term><literal>Properties</literal></term>

          <listitem><para>See <xref
              linkend="s2.ref.use_case_property_toolbar"/> and <xref
              linkend="s2.ref.use_case_property_fields"/>
            below.</para></listitem>
        </varlistentry>

        <!-- Entry for Documentation tab -->

        <varlistentry>
          <term><literal>Documentation</literal></term>

          <listitem>
            <para>Standard tab.
See <xref linkend="s2.ref.documentation_tab"/>.
</para>
          </listitem>
        </varlistentry>

        <!-- Entry for Style tab -->

        <varlistentry>
          <term><literal>Style</literal></term>

          <listitem><para>Standard tab. Fill color is used for the use case
            oval.</para>

          <para>The <literal>Display: Extension Points</literal> check box is
            used to control whether an extension point compartment is
            displayed.</para>

          <caution><para>The <literal>Shadow</literal> field has no effect on
            use cases.</para></caution></listitem>
        </varlistentry>

        <!-- Entry for Source tab -->

        <varlistentry>
          <term><literal>Source</literal></term>

          <listitem><para>Standard tab. It would not be usual to provide any
            code for a use case, since it is primarily a vehicle for
            capturing requirements about the system under construction, not
            creating the solution.</para></listitem>
        </varlistentry>

        <!-- Entry for Constraints tab -->

        <varlistentry>
          <term><literal>Constraints</literal></term>

          <listitem>
            <para>&constraintssupport;
</para>
          </listitem>
        </varlistentry>

        <!-- Entry for Tagged Values tab -->

        <varlistentry>
          <term><literal>Tagged Values</literal></term>

          <listitem><para>Standard tab. In the UML metamodel,
            <literal>UseCase</literal> has the following standard tagged
            values defined.</para>

            <itemizedlist>
              <listitem><para><literal>persistence</literal> (from the
                superclass, <literal>Classifier</literal>). Values
                <literal>transitory</literal>, indicating state is
                destroyed when an instance is destroyed or
                <literal>persistent</literal>, marking state is
                preserved when an instance is destroyed.</para>

              <tip><para>In general the instantiation of use cases is not a
                major aspect of any design method (they are mostly
                concerned with requirements capture. For most &ooad;
                methodologies, this tag can safely be
                ignored.</para></tip></listitem>

              <listitem><para><literal>semantics</literal> (from the
                superclass, <literal>Classifier</literal>). The value is a
                specification of the semantics of the
                use case.</para></listitem>

              <listitem><para><literal>derived</literal> (from the
                superclass, <literal>ModelElement</literal>). Values
                <literal>true</literal>, meaning the use case is
                redundant&mdash;it can be formally derived from other
                elements, or <literal>false</literal> meaning it
                cannot.</para>

              <note><para>Derived use cases still have their value in
                analysis to introduce useful names or
                concepts.</para></note></listitem>
            </itemizedlist>

          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <!-- Use case properties -->

    <sect2 id="s2.ref.use_case_property_toolbar">
      <title>Use Case Property Toolbar</title>

      <variablelist>

        <!-- Entry for Go up button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/navigate_up.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Go
            up</literal></term>

          <listitem><para>Navigate up through the package structure of the
            model.</para></listitem>
        </varlistentry>

        <!-- Entry for Add use case button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/use_case.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Add use
            case</literal></term>

          <listitem>
            <indexterm>
              <primary>Add Use Case</primary>
            </indexterm>
            <indexterm>
              <primary>New Use Case</primary>
            </indexterm>
            <indexterm>
              <primary>Create New</primary>
              <secondary>Use Case</secondary>
            </indexterm>

            <para>
This creates a new use case within the model, (but
            not within the diagram), navigating immediately to the
            properties tab for that use case.</para>

          <tip><para>This method of creating new use cases can be
            confusing. Much better to create them within diagrams where you
            want them.</para></tip></listitem>
        </varlistentry>

        <!-- Entry for Add extension point button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/extension_point.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Add extension
            point</literal></term>

          <listitem>
            <indexterm>
              <primary>Add Extension Point</primary>
            </indexterm>
            <indexterm>
              <primary>New Extension Point</primary>
            </indexterm>
            <indexterm>
              <primary>Create New</primary>
              <secondary>Extension Point</secondary>
            </indexterm>

            <para>
This creates a new use extension point within the
            namespace of the current use case, with the current use case as its
            associated use case, navigating immediately to the properties tab
            for that extension point.</para></listitem>
        </varlistentry>

        <!-- Entry for Delete button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/property_delete.gif"/>
          </imageobject></inlinemediaobject></guiicon>
            <literal>Delete</literal></term>

          <listitem><para>This deletes the selected use case from the
            model.</para>

          <warning><para>This is a deletion from the model
            <emphasis>not</emphasis> just the diagram. To delete a use case
            from the diagram, but keep it within the model, use the main
            menu <literal>Remove From Diagram</literal>
(or press the Delete key).
</para>
            </warning>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <!-- Fields in the properties tab -->

    <sect2 id="s2.ref.use_case_property_fields">
      <title>Property Fields For Use Case</title>

      <variablelist>

        <!-- Entry for Name -->

        <varlistentry>
          <term><literal>Name</literal></term>

          <listitem>
            <indexterm>
              <primary>Use Case Name</primary>
            </indexterm>
            <indexterm>
              <primary>Name</primary>
              <secondary>of Use Case</secondary>
            </indexterm>

            <para>Text box.
The name of the use case.
Since a use case
            is a classifier, it would be conventional to Capitalize the
            first letter (and initial letters of any component words),
            e.g. <literal>RemoteSensor</literal>.</para>

          <note><para>&argouml; does not enforce any naming convention for
            use cases</para></note></listitem>
        </varlistentry>

        <!-- Entry for Stereotype -->

        <varlistentry>
          <term><literal>Stereotype</literal></term>

          <listitem>
            <indexterm>
              <primary>Use Case Stereotype</primary>
            </indexterm>
            <indexterm>
              <primary>Stereotype</primary>
              <secondary>of Use Case</secondary>
            </indexterm>

            <para>Drop down selector.
Use case is provided by default with the UML standard stereotypes
(<literal>metaclass</literal>,
 <literal>powertype</literal>,
 <literal>process</literal>,
 <literal>thread</literal>,
 <literal>utility</literal>)
for classifiers.

Stereotyping can be useful when creating use cases in the problem
domain (requirements capture) and solution domain (analysis), but none
of the predefined stereotypes are well suited to this.
</para>

          </listitem>
        </varlistentry>

        <!-- Entry for Navigate Stereotype -->

        <varlistentry>
          <term><literal>Navigate Stereotype</literal></term>

          <listitem><para><guiicon><inlinemediaobject><imageobject><imagedata
              format="GIF" align="center"
              fileref="images/icons/navigate_stereotype.gif"/>
            </imageobject></inlinemediaobject></guiicon> icon. If a
              stereotype has been selected, this will navigate to the
              stereotype property panel (see <xref
                linkend="s1.ref.stereotype"/>).</para></listitem>
        </varlistentry>

        <!-- Entry for Namespace -->

        <varlistentry>
          <term><literal>Namespace</literal></term>

          <listitem>
            <indexterm>
              <primary>Use Case Namespace</primary>
            </indexterm>
            <indexterm>
              <primary>Namespace</primary>
              <secondary>of Use Case</secondary>
            </indexterm>

            <para>Text box.
Records the namespace for the
            use case. This is the package hierarchy.</para>

          </listitem>
        </varlistentry>

        <!-- Entry for Modifiers -->

        <varlistentry>
          <term><literal>Modifiers</literal></term>

          <listitem>
            <indexterm>
              <primary>Use Case Modifiers</primary>
            </indexterm>
            <indexterm>
              <primary>Modifiers</primary>
              <secondary>of Use Case</secondary>
            </indexterm>

            <para>Check box,
with entries
<literal>leaf</literal> and
<literal>root</literal>.
</para>

            <itemizedlist>
              <listitem>
                <para><literal>leaf</literal>
indicates that this use case can have no further children, 
while <literal>root</literal> indicates it is a top level
use case with no parent.
</para>
              </listitem>
            </itemizedlist>
          </listitem>
        </varlistentry>

        <!-- Entry for Extension Points -->

        <varlistentry>
          <term><literal>Extension Points</literal></term>

          <listitem>
            <indexterm>
              <primary>Use Case Extension Points</primary>
            </indexterm>
            <indexterm>
              <primary>Extension Point</primary>
              <secondary>of Use Case</secondary>
            </indexterm>

            <para>Text box.
If this use case is, or can be extended,
            this field lists the extension points for the use case.</para>

          <note><para>Extension points are listed by their location point
            rather than their name.</para></note>

          <para>Where an extension point has been created (see below),
&button1; Double Click will navigate to that relationship.
<!-- Issue: 2141 -->
&Button2; gives a pop up menu with one entry.
</para>

            <itemizedlist>
<!-- Issue: 2141
            <listitem><para><literal>Open</literal>. Where an extension
              point has been created, navigate to it.</para></listitem>
 -->

              <listitem>
                <para><literal>New</literal>.
Add a new extension point
              and navigate to it, making this use case the owning use case of
              the extension point.</para></listitem>

<!-- Issue: 2141
            <listitem><para><literal>Delete</literal>. Where an extension
              point has been created, this removes it.</para>

            <note><para>This deletes the connection to the extension point, but
              does not delete the extension point from the
              model.</para></note></listitem>

            <listitem><para><literal>Move Up</literal>. Only available where
              there are two or more extension points listed, and the extension
              point selected is not at the top. It is moved up
              one.</para></listitem>

            <listitem><para><literal>Move Down</literal>. Only available where
              there are two or more extension points listed, and the extension
              point selected is not at the bottom. It is moved down
one.
</para>
              </listitem>
 -->
            </itemizedlist>
          </listitem>
        </varlistentry>

        <!-- Entry for Generalizations -->

        <varlistentry>
          <term><literal>
            <anchor id="ref.use_case_generalization"/>Generalizations
          </literal></term>

          <listitem>
            <indexterm>
              <primary>Use Case Generalization</primary>
            </indexterm>
            <indexterm>
              <primary>Generalizations</primary>
              <secondary>of Use Case</secondary>
            </indexterm>

            <para>Text area.
Lists use cases which are generalizations
            of this one. Will be set whenever a generalization is created
on the from this Use Case.
&Button1; Double Click on a generalization will
navigate to that generalization.
</para>

          </listitem>
        </varlistentry>

        <!-- Entry for Specializations -->

        <varlistentry>
          <term><literal>Specializations</literal></term>

          <listitem>
            <indexterm>
              <primary>Use Case Specialization</primary>
            </indexterm>
            <indexterm>
              <primary>Specializations</primary>
              <secondary>of Use Case</secondary>
            </indexterm>

            <para>Text box.
Lists any specialized use case (i.e. for
            which this use case is a generalization.</para>

            <para>
&button1; Double Click
navigates to the generalization and opens its property tab.
</para>

          </listitem>
        </varlistentry>

        <!-- Entry for Extends -->

        <varlistentry>
          <term><literal>Extends</literal></term>

          <listitem>
            <indexterm>
              <primary>Use Case Extend Relationships</primary>
            </indexterm>
            <indexterm>
              <primary>Extend Relationship</primary>
              <secondary>of Use Case</secondary>
            </indexterm>

            <para>Text box.
Lists any class that is extended by this
            use case.</para>

            <para>
Where an extends relationship has been created,
&button1; Double Click
will navigate to that relationship.
</para>

          </listitem>
        </varlistentry>

        <!-- Entry for Includes -->

        <varlistentry>
          <term><literal>Includes</literal></term>

          <listitem>
            <indexterm>
              <primary>Use Case Include Relationships</primary>
            </indexterm>
            <indexterm>
              <primary>Include Relationship</primary>
              <secondary>of Use Case</secondary>
            </indexterm>
 
            <para>Text box.
Lists any use case that this use case
            includes.</para>

            <para>
Where an include relationship has been created,
&button1; Double Click
will navigate to that relationship.
</para>

          </listitem>
        </varlistentry>

        <!-- Entry for Association Ends -->

        <varlistentry>
          <term><literal>Association Ends</literal></term>

          <listitem><para>Text box. Lists any association ends 
              (see <xref linkend="s1.ref.association_class"/>) 
              of associations connected to this use case.
            </para>

            <para>
              &Button1; double click navigates to the selected entry.
            </para>

          </listitem>
        </varlistentry>


        <!-- Entry for Operations -->

<!-- Issue: 2144

        <varlistentry>
          <term><literal>Operations</literal></term>

          <listitem>
            <indexterm>
              <primary>Use Case Operations</primary>
            </indexterm>
            <indexterm>
              <primary>Operations</primary>
              <secondary>of Use Case</secondary>
            </indexterm>

            <para>Text area.
Listing the operations that are available
            on this use case. As a sub-class of the UML classifier
            metaclass, a use case has many of the properties of a
            class (see <xref linkend="s1.ref.class_class"/>).</para>

          <note><para>Some &ooad; processes make use of operations and
            attributes in requirements definition. The process described in the
            tutorial section of this user manual does not do so.</para></note>

          <para>Should you wish to add operations to a use case,
            &button1; click allows you to navigate to them and
            &button2; click gives a pop up menu with options to
            <literal>Open</literal>, <literal>Add</literal>,
            <literal>Delete</literal>, <literal>Move&nbsp;Up</literal> and
            <literal>Move&nbsp;Down</literal> (see <link
              linkend="ref.use_case_generalization">Generalizations</link>
            for examples of how these operations are used).</para></listitem>
        </varlistentry>
-->

        <!-- Entry for Attributes -->

<!-- Issue: 2145
        <varlistentry>
          <term><literal>Attributes</literal></term>

          <listitem>
            <indexterm>
              <primary>Use Case Attributes</primary>
            </indexterm>
            <indexterm>
              <primary>Attributes</primary>
              <secondary>of Use Case</secondary>
            </indexterm>

            <para>Text area.
Listing the attributes that are available
            on this use case. As a sub-class of the UML classifier
            metaclass, a use case has many of the properties of a
            class (see <xref linkend="s1.ref.class_class"/>).</para>

          <note><para>Some &ooad; processes make use of operations and
            attributes in requirements definition. The process described in the
            tutorial section of this user manual does not do so.</para></note>

          <para>Should you wish to add attributes to a use case,
            &button1; click allows you to navigate to them and
            &button2; click gives a pop up menu with options to
            <literal>Open</literal>, <literal>Add</literal>,
            <literal>Delete</literal>, <literal>Move&nbsp;Up</literal> and
            <literal>Move&nbsp;Down</literal> (see <link
              linkend="ref.use_case_generalization">Generalizations</link>
            for examples of how these operations are used).</para></listitem>
        </varlistentry>
-->
      </variablelist>
    </sect2>
  </sect1>

  <!-- Extension Points in use cases (subsidiary to use case) -->

  <sect1 id="s1.ref.extension_point">
    <title>Extension Point</title>
    <indexterm>
      <primary>Extension Point</primary>
    </indexterm>

    <para>An extension point describes a point in a use case where an extending
      use case may provide additional behavior.</para>

     <para>Examples for a travel agent sales system might be the use case for
       paying for a ticket, which has an extension point in the specification
       of the payment. Extending use cases may then extend at this point to pay
       by cash, credit card etc.</para>

    <para>Within the UML metamodel, <literal>Extension Point</literal> is a
      sub-class of <literal>ModelElement</literal>. A use case may display an
      extension point compartment (see <xref linkend="s1.ref.use_case"/> for
      details), in which extension points are shown with the following
      syntax.</para>

    <blockquote><para>
      <emphasis>name</emphasis><literal>:</literal><emphasis>location</emphasis>.
    </para></blockquote>

    <!-- The details tabs -->

    <sect2>
      <title>Extension Point Details Tabs</title>
      <indexterm>
        <primary>Extension Point Details Tabs</primary>
      </indexterm>
      <indexterm>
        <primary>Details Tabs</primary>
        <secondary>for Extension Point</secondary>
      </indexterm>

      <para>The details tabs that are active for extension points are as
        follows.</para>

      <variablelist>

        <!-- Entry for ToDoItem tab -->

        <varlistentry>
          <term><literal>ToDoItem</literal></term>

          <listitem><para>Standard tab.</para></listitem>
        </varlistentry>

        <!-- Entry for Properties tab -->

        <varlistentry>
          <term><literal>Properties</literal></term>

          <listitem><para>See <xref
              linkend="s2.ref.extension_point_property_toolbar"/> and <xref
              linkend="s2.ref.extension_point_property_fields"/>
            below.</para></listitem>
        </varlistentry>

        <!-- Entry for Documentation tab -->

        <varlistentry>
          <term><literal>Documentation</literal></term>

          <listitem>
            <para>Standard tab.
See <xref linkend="s2.ref.documentation_tab"/>.
</para>
          </listitem>
        </varlistentry>

        <!-- Entry for Style tab -->

        <varlistentry>
          <term><literal>Style</literal></term>

          <listitem>
            <para>Standard tab</para>

            <note>
              <para>
The <literal>Style</literal> tab is grayed out, 
since the extension points has no style of their own in the diagram.
</para>
            </note>
          </listitem>
        </varlistentry>

        <!-- Entry for Source tab -->

        <varlistentry>
          <term><literal>Source</literal></term>

          <listitem>
            <para>Standard tab.
It would not be usual to provide any code for an extension point,
since it is external to the system.
</para>

            <note>
              <para>
The source tab content can be changed, but this has no effect.
</para>
            </note>
          </listitem>
        </varlistentry>

        <!-- Entry for Constraints tab -->

        <varlistentry>
          <term><literal>Constraints</literal></term>

          <listitem>
            <para>&constraintssupport;
</para>
          </listitem>
        </varlistentry>

        <!-- Entry for Tagged Values tab -->

        <varlistentry>
          <term><literal>Tagged Values</literal></term>

          <listitem><para>Standard tab. In the UML metamodel,
            <literal>ExtensionPoint</literal> has the following standard
            tagged values defined.</para>

            <itemizedlist>
              <listitem><para><literal>derived</literal> (from the
                superclass, <literal>ModelElement</literal>). Values
                <literal>true</literal>, meaning the extension point is
                redundant&mdash;it can be formally derived from other
                elements, or <literal>false</literal> meaning it
                cannot.</para>

              <note><para>It is not clear how derived extension points could
                have any value in analysis.</para></note></listitem>
            </itemizedlist>

          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <!-- Extension Point properties -->

    <sect2 id="s2.ref.extension_point_property_toolbar">
      <title>Extension Point Property Toolbar</title>

      <variablelist>

        <!-- Entry for Go up button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/navigate_up.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Go
            up</literal></term>

          <listitem><para>Navigate up to the use case which owns this extension
            point.</para></listitem>
        </varlistentry>

        <!-- Entry for Delete button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/property_delete.gif"/>
          </imageobject></inlinemediaobject></guiicon>
            <literal>Delete</literal></term>

          <listitem><para>This deletes the selected extension point from the
            model.</para></listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <!-- Fields in the properties tab -->

    <sect2 id="s2.ref.extension_point_property_fields">
      <title>Property Fields For Extension Point</title>

      <variablelist>

        <!-- Entry for Name -->

        <varlistentry>
          <term><literal>Name</literal></term>

          <listitem>
            <indexterm>
              <primary>Extension Point Name</primary>
            </indexterm>
            <indexterm>
              <primary>Name</primary>
              <secondary>of Extension Point</secondary>
            </indexterm>

            <para>Text box.
The name of the extension point.
</para>

          <tip><para>It is quite common to leave extension points
            unnamed in use case analysis, since they are always listed (within
            use cases and extend relationships) by their location.</para></tip>

          <note><para>&argouml; does not enforce any naming convention for
            extension points.</para></note></listitem>
        </varlistentry>

        <!-- Entry for Stereotype -->

        <varlistentry>
          <term><literal>Stereotype</literal></term>

          <listitem>
            <indexterm>
              <primary>Extension Point Stereotype</primary>
            </indexterm>
            <indexterm>
              <primary>Stereotype</primary>
              <secondary>of Extension Point</secondary>
            </indexterm>

            <para>Drop down selector.
&argouml; does not provide any stereotypes for extension points.
</para>

          <tip><para>Stereotyping does not have great value on an extension
            point.</para></tip></listitem>
        </varlistentry>

        <!-- Entry for Navigate Stereotype -->

        <varlistentry>
          <term><literal>Navigate Stereotype</literal></term>

          <listitem><para><guiicon><inlinemediaobject><imageobject><imagedata
              format="GIF" align="center"
              fileref="images/icons/navigate_stereotype.gif"/>
            </imageobject></inlinemediaobject></guiicon> icon. If a
              stereotype has been selected, this will navigate to the
              stereotype property panel (see <xref
                linkend="s1.ref.stereotype"/>).</para></listitem>
        </varlistentry>

        <!-- Entry for Location -->

        <varlistentry>
          <term><literal>Location</literal></term>

          <listitem>
            <indexterm>
              <primary>Extension Point Location</primary>
            </indexterm>
            <indexterm>
              <primary>Location</primary>
              <secondary>of Extension Point</secondary>
            </indexterm>

            <para>Text box.
A description of the location of this
            extension point within the owning use case.</para>

          <tip><para>Extension points are always listed (within
            use cases and extend relationships) by their location. Typically
            this will be the number/name of the paragraph in the
            specification.</para></tip></listitem>
        </varlistentry>

        <!-- Entry for Base Use Case-->

        <varlistentry>
          <term><literal>Base Use Case</literal></term>

          <listitem>
            <indexterm>
              <primary>Extension Point Base Use Case</primary>
            </indexterm>
            <indexterm>
              <primary>Base Use Case</primary>
              <secondary>of Extension Point</secondary>
            </indexterm>

            <para>Text box.
Shows the base use case within which this extension point is defined. 
&Button1; Double Click
will navigate to the use case.
</para>
          </listitem>
        </varlistentry>

        <!-- Entry for Extending Use Case -->

        <varlistentry>
          <term><literal>Extend</literal></term>

          <listitem>
            <indexterm>
              <primary>Extension Point Extending Use Cases</primary>
            </indexterm>
            <indexterm>
              <primary>Extending Use Cases</primary>
              <secondary>of Extension Point</secondary>
            </indexterm>

            <para>Text box.
Lists all use cases which extend the base
            use case through this extension point.</para>

            <para>
Where an extending use case exists, 
&button1; Double Click will navigate to that relationship.
</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>
  </sect1>

  <!-- Association (has Association End as a sub-artifact) -->

  <sect1 id="s1.ref.association_use_case">
    <title>Association</title>

    <para>
An association on a use case diagram represents a relationship
      between an actor and a use case showing that actor's involvement in the
      use case. The invocation of the use case will involve some (significant)
      change perceived by the actor.</para>

    <para>Associations are described fully under class diagrams (see <xref
      linkend="s1.ref.association_class"/>).</para>
  </sect1>

  <!-- Association End artifacts (sub-artifact of Association) -->

  <sect1 id="s1.ref.association_end_use_case">
    <title>Association End</title>

    <para>Association ends are described under class diagrams (see <xref
      linkend="s1.ref.association_end_class"/>).</para>
  </sect1>

  <!-- Dependency artifact. Reference back to Class Diagram -->

  <sect1 id="s1.ref.dependency_use_case">
    <title>Dependency</title>

    <para>Dependencies are described under class diagrams (see <xref
      linkend="s1.ref.dependency_class"/>).</para>
      
    <caution>
      <para>Dependency has little use in use case diagrams. It is
        provided, because earlier versions of &argouml; used it (incorrectly) to
        implement include and extends relationships.
      </para>
    </caution>

  </sect1>

  <!-- Generalization -->

  <sect1 id="s1.ref.generalization_use_case">
    <title>Generalization</title>
    <indexterm>
      <primary>Generalization</primary>
    </indexterm>

    <para>Generalization is a relationship between two use cases or two
     actors. Where A is a generalization of B, it means A describes more
     general behavior and B a more specific version of that
     behavior.</para>

   <para>Examples for a travel agent sales system might be the use case
     for making a booking as a generalization of the use case for making a
     flight booking and a salesman actor being a generalization of a supervisor
     actor (since supervisors can also act as salesmen, but not vice
     versa).</para>

    <para>Generalization is analogous to class inheritance within OO
      programming.</para>

    <note><para>It is easy to confuse <emphasis>extends</emphasis>
      relationships between use cases with generalization. However extends is
      about augmenting a use case's behavior at a specific
      point. Generalization is about specializing the behavior throughout the
      use case.</para></note>

    <para>Within the UML metamodel, <literal>Generalization</literal> is a
      sub-class of <literal>Relationship</literal>.</para>

    <para>Generalization is represented as an arrow with white filled head from
      the specialized use case or actor to the generalized use case or actor
      (see <xref linkend="fig.ref.use_case_diagram"/>).</para>

    <!-- The details tabs -->

    <sect2>
      <title>Generalization Details Tabs</title>
      <indexterm>
        <primary>Generalization Details Tabs</primary>
      </indexterm>
      <indexterm>
        <primary>Details Tabs</primary>
        <secondary>for Generalization</secondary>
      </indexterm>

      <para>The details tabs that are active for associations are as
        follows.</para>

      <variablelist>

        <!-- Entry for ToDoItem tab -->

        <varlistentry>
          <term><literal>ToDoItem</literal></term>

          <listitem><para>Standard tab.</para></listitem>
        </varlistentry>

        <!-- Entry for Properties tab -->

        <varlistentry>
          <term><literal>Properties</literal></term>

          <listitem><para>See <xref
              linkend="s2.ref.generalization_property_toolbar"/> and <xref
              linkend="s2.ref.generalization_property_fields"/>
            below.</para></listitem>
        </varlistentry>

        <!-- Entry for Documentation tab -->

        <varlistentry>
          <term><literal>Documentation</literal></term>

          <listitem>
            <para>Standard tab.
See <xref linkend="s2.ref.documentation_tab"/>.
</para>
          </listitem>
        </varlistentry>

        <!-- Entry for Style tab -->

        <varlistentry>
          <term><literal>Style</literal></term>

          <listitem><para>Standard tab</para>

          <note><para>The values for the bounds of the generalization
            appear to have no meaning. Changing them has no effect on the
            diagram. This is sensible behavior, given the generalization
            is tied to a particular actor and use
            case.</para></note></listitem>
        </varlistentry>

        <!-- Entry for Source tab -->

        <varlistentry>
          <term><literal>Source</literal></term>

          <listitem><para>Standard tab. You would not expect to generate any
code for an association end so this is empty.
</para>
          </listitem>
        </varlistentry>

        <!-- Entry for Constraints tab -->

        <varlistentry>
          <term><literal>Constraints</literal></term>

          <listitem>
            <para>&constraintssupport;
</para>
          </listitem>
        </varlistentry>

        <!-- Entry for Tagged Values tab -->

        <varlistentry>
          <term><literal>Tagged Values</literal></term>

          <listitem><para>Standard tab. In the UML metamodel,
            <literal>Generalization</literal> has the following standard
            tagged values defined.</para>

            <itemizedlist>
              <listitem><para><literal>derived</literal> (from the
                superclass, <literal>ModelElement</literal>). Values
                <literal>true</literal>, meaning the generalization is
                redundant&mdash;it can be formally derived from other
                elements, or <literal>false</literal> meaning it
                cannot.</para>

              <note><para>Derived generalizations still have their value in
                analysis to introduce useful names or concepts, and in
                design to avoid re-computation.</para></note></listitem>
            </itemizedlist>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <!-- Generalization properties -->

    <sect2 id="s2.ref.generalization_property_toolbar">
      <title>Generalization Property Toolbar</title>

      <variablelist>

        <!-- Entry for Go up button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/navigate_up.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Go
            up</literal></term>

          <listitem><para>Navigate up through the package structure of the
            model. For a generalization this will be the package containing
            the generalization.</para></listitem>
        </varlistentry>

        <!-- Entry for Delete button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/property_delete.gif"/>
          </imageobject></inlinemediaobject></guiicon>
            <literal>Delete</literal></term>

          <listitem><para>This deletes the selected generalization from the
            model.</para>

          <warning><para>This is a deletion from the model
            <emphasis>not</emphasis> just the diagram. To delete a
            generalization from the diagram, but keep it within the model,
            use the main menu <literal>Remove From Diagram</literal>
(or press the Delete key).
</para>
            </warning>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <!-- Fields in the properties tab -->

    <sect2 id="s2.ref.generalization_property_fields">
      <title>Property Fields For Generalization</title>

      <variablelist>

        <!-- Entry for Name -->

        <varlistentry>
          <term><literal>Name</literal></term>

          <listitem>
            <indexterm>
              <primary>Generalization Name</primary>
            </indexterm>
            <indexterm>
              <primary>Name</primary>
              <secondary>of Generalization</secondary>
            </indexterm>

            <para>Text box.
The name of the generalization.
</para>

          <tip><para>It is quite common to leave generalizations
            unnamed in use case analysis.</para></tip>

          <note><para>&argouml; does not enforce any naming convention for
            associations.</para></note>

          <note>
              <para>
There is no representation of the name of a
generalization on the diagram.
</para>
            </note>
          </listitem>
        </varlistentry>

        <!-- Entry for Stereotype -->

        <varlistentry>
          <term><literal>Stereotype</literal></term>

          <listitem>
            <indexterm>
              <primary>Generalization Stereotype</primary>
            </indexterm>
            <indexterm>
              <primary>Stereotype</primary>
              <secondary>of Generalization</secondary>
            </indexterm>

            <para>Drop down selector.
Generalization is provided by
default with the UML standard stereotype
<literal>implementation</literal>.
The stereotype is shown between
            &laquo; and &raquo; above or across the generalization.</para>

          <tip><para>Stereotyping generalization does not have great value
            on a use case diagram. The standard stereotype is about
            implementation, and suited to the use of generalization on
            class diagrams.</para></tip></listitem>
        </varlistentry>

        <!-- Entry for Navigate Stereotype -->

        <varlistentry>
          <term><literal>Navigate Stereotype</literal></term>

          <listitem><para><guiicon><inlinemediaobject><imageobject><imagedata
              format="GIF" align="center"
              fileref="images/icons/navigate_stereotype.gif"/>
            </imageobject></inlinemediaobject></guiicon> icon. If a
              stereotype has been selected, this will navigate to the
              stereotype property panel (see <xref
                linkend="s1.ref.stereotype"/>).</para></listitem>
        </varlistentry>

        <!-- Entry for Discriminator -->

        <varlistentry>
          <term><literal>Discriminator</literal></term>

          <listitem>
            <indexterm>
              <primary>Generalization Discriminator</primary>
            </indexterm>
            <indexterm>
              <primary>Discriminator</primary>
              <secondary>of Generalization</secondary>
            </indexterm>

            <para>Text box.
The name of a discriminator for the
            specialization. UML&nbsp;1.3 allows grouping of specializations
            into a number of sets, on the basis of this value.</para>

          <tip><para>The empty string <quote></quote> is a valid entry (and the
            default) for this field. The discriminator is only of practical use
            in cases of multiple inheritance. A (class diagram) example is
            shown in <xref linkend="fig.discriminator_example"/>. Here each
type of user should inherit from two sorts of user.
One distinguishing between local or remote user 
(which can be identified
            by one discriminator) and one indicating their function as a user
            (identified by a different discriminator).</para>

          <para>
There is little point in using this within a use case
            diagram.</para></tip></listitem>
        </varlistentry>

        <!-- Entry for Namespace -->

        <varlistentry>
          <term><literal>Namespace</literal></term>

          <listitem>
            <indexterm>
              <primary>Generalization Namespace</primary>
            </indexterm>
            <indexterm>
              <primary>Namespace</primary>
              <secondary>of Generalization</secondary>
            </indexterm>

            <para>Text box.
Records the namespace for the
            generalization. This is the package hierarchy.</para>

          </listitem>
        </varlistentry>

        <!-- Entry for Parent -->

        <varlistentry>
          <term><literal>Parent</literal></term>

          <listitem>
            <indexterm>
              <primary>Generalization Parent</primary>
            </indexterm>
            <indexterm>
              <primary>Parent</primary>
              <secondary>of Generalization</secondary>
            </indexterm>

            <para>Text box.
Shows the use case or actor that is the
<emphasis>parent</emphasis> in this relationship,
i.e. the more general end of the relationship.
&Button1; Double Click
            on this entry will navigate to that use case or
            actor. &Button2; click will give a pop up menu, with a single
            entry, <literal>Open</literal> which will also navigate to that
            use case or actor.</para></listitem>
        </varlistentry>

        <!-- Entry for child -->

        <varlistentry>
          <term><literal>Child</literal></term>

          <listitem>
            <indexterm>
              <primary>Generalization Child</primary>
            </indexterm>
            <indexterm>
              <primary>Child</primary>
              <secondary>of Generalization</secondary>
            </indexterm>

            <para>Text box.
Shows the use case or actor that is the
<emphasis>child</emphasis> in this relationship,
i.e. the more specific end of the relationship.
&Button1; Double Click
            on this entry will navigate to that use case or
            actor. &Button2; click will give a pop up menu, with a single
            entry, <literal>Open</literal> which will also navigate to that
            use case or actor.</para></listitem>
        </varlistentry>

        <!-- Entry for Powertype -->

        <varlistentry>
          <term><literal>Powertype</literal></term>

          <listitem>
            <indexterm>
              <primary>Generalization Powertype</primary>
            </indexterm>
            <indexterm>
              <primary>Powertype</primary>
              <secondary>of Generalization</secondary>
            </indexterm>

            <para>
Drop down selector providing access to all standard
            UML types provided by &argouml; and all new classes created
            within the current model.</para>

          <para>This is the type of the child entity of the
            generalization.</para>

          <tip><para>This can be ignored for use case analysis. The only
            sensible value to put in would be the child use case type (as a
            classifier, this appears in the drop down
            list.</para></tip></listitem>
        </varlistentry>
      </variablelist>

      <figure id="fig.discriminator_example" float="1">
        <title>Example use of a discriminator with generalization</title>

        <screenshot><mediaobject>
          <imageobject>
            <imagedata format="GIF" align="center"
                       fileref="images/reference/discriminator_example.gif"/>
          </imageobject>
        </mediaobject></screenshot>
      </figure>

    </sect2>
  </sect1>

  <!-- Extend relationship -->

  <sect1 id="s1.ref.extend">
    <title>Extend</title>
    <indexterm>
      <primary>Extend Relationship</primary>
    </indexterm>

    <para>Extend is a relationship between two use cases. Where A extends B, it
      means A describes more specific behavior and B the general version of
      that behavior.</para>

    <para>In many respects extend is like generalization. However the key
      difference is that the extended use case defines <emphasis>extension
      points</emphasis> (see <xref linkend="s1.ref.extension_point"/>), which
      are the only places where its behavior may be extended. The extending
      use case must define at which of these extension points it adds
      behavior.</para>

    <para>This makes the use of extend more tightly controlled than general
      extension, and it is thus preferred wherever possible.</para>

     <para>Examples for a travel agent sales system might be the use case for
       paying for a ticket, which has an extension point in the specification
       of the payment. Extending use cases may then extend at this point to pay
       by cash, credit card etc.</para>

    <para>Within the UML metamodel, <literal>Extend</literal> is a
      sub-class of <literal>Relationship</literal>.</para>

    <para>An extend relationship is represented as a dotted link with an open
      arrow head and a label <literal>&laquo;extend&raquo;</literal>. If a
      condition is defined, it is shown under the
      <literal>&laquo;extend&raquo;</literal> label (see <xref
      linkend="fig.ref.use_case_diagram"/>).</para>

    <!-- The details tabs -->

    <sect2>
      <title>Extend Details Tabs</title>
      <indexterm>
        <primary>Extend Relationship Details Tabs</primary>
      </indexterm>
      <indexterm>
        <primary>Details Tabs</primary>
        <secondary>for Extend Relationship</secondary>
      </indexterm>

      <para>The details tabs that are active for extend relationships are as
        follows.</para>

      <note><para>There is no source tab, since there is no source code that
        could be generated for an extend relationship.</para></note>

      <variablelist>

        <!-- Entry for ToDoItem tab -->

        <varlistentry>
          <term><literal>ToDoItem</literal></term>

          <listitem><para>Standard tab.</para></listitem>
        </varlistentry>

        <!-- Entry for Properties tab -->

        <varlistentry>
          <term><literal>Properties</literal></term>

          <listitem><para>See <xref
              linkend="s2.ref.extend_property_toolbar"/> and <xref
              linkend="s2.ref.extend_property_fields"/>
            below.</para></listitem>
        </varlistentry>

        <!-- Entry for Documentation tab -->

        <varlistentry>
          <term><literal>Documentation</literal></term>

          <listitem>
            <para>Standard tab.
See <xref linkend="s2.ref.documentation_tab"/>.
</para>
          </listitem>
        </varlistentry>

        <!-- Entry for Style tab -->

        <varlistentry>
          <term><literal>Style</literal></term>

          <listitem><para>Standard tab</para>

          <note><para>The values for the bounds of the extend relationships
            appear to have no meaning. Changing them has no effect on the
            diagram. This is sensible behavior, given the extend
            is tied to a particular pair of use
            cases.</para></note></listitem>
        </varlistentry>

        <!-- Entry for Constraints tab -->

        <varlistentry>
          <term><literal>Constraints</literal></term>

          <listitem>
            <para>&constraintssupport;
</para>
          </listitem>
        </varlistentry>

        <!-- Entry for Tagged Values tab -->

        <varlistentry>
          <term><literal>Tagged Values</literal></term>

          <listitem><para>Standard tab. In the UML metamodel,
            <literal>Extend</literal> has the following standard
            tagged values defined.</para>

            <itemizedlist>
              <listitem><para><literal>derived</literal> (from the
                superclass, <literal>ModelElement</literal>). Values
                <literal>true</literal>, meaning the extend relationship is
                redundant&mdash;it can be formally derived from other
                elements, or <literal>false</literal> meaning it
                cannot.</para>

              <note><para>Derived extend relationships could have their value
                in analysis to introduce useful names or
                concepts.</para></note></listitem>
            </itemizedlist>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <!-- Extend properties -->

    <sect2 id="s2.ref.extend_property_toolbar">
      <title>Extend Property Toolbar</title>

      <variablelist>

        <!-- Entry for Go up button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/navigate_up.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Go
            up</literal></term>

          <listitem><para>Navigate up through the package structure of the
            model. For a extend this will be the package containing
            the extend.</para></listitem>
        </varlistentry>

        <!-- Entry for Add extension point button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/extension_point.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Add extension
            point</literal></term>

          <listitem>
            <indexterm>
              <primary>Add Extend Relationship</primary>
            </indexterm>
            <indexterm>
              <primary>New Extend Relationship</primary>
            </indexterm>
            <indexterm>
              <primary>Create New</primary>
              <secondary>Extend Relationship</secondary>
            </indexterm>

            <para>
This creates a new use case extension point within
            the namespace of the current extend relationship, with the current
extend relationship as its first extending relationship.
<!-- Issue: 2147 -->
</para>

          <tip><para>While it is perfectly valid to create extension points
            from an extend relationship, the created extension point will have
            no associated use case (it can subsequently be set up).</para>

          <para>It would be more usual to instead create the extension point
            within a use case and subsequently link to it from an extend
            relationship (see <xref linkend="s2.ref.extend_property_fields"/>
below).
</para>
            </tip>
          </listitem>
        </varlistentry>

        <!-- Entry for Delete button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/property_delete.gif"/>
          </imageobject></inlinemediaobject></guiicon>
            <literal>Delete</literal></term>

          <listitem>
            <para>This deletes the selected extend relationship from the
model.</para>

          <warning><para>This is a deletion from the model
            <emphasis>not</emphasis> just the diagram. To delete a
            extend from the diagram, but keep it within the model,
            use the main menu <literal>Remove From Diagram</literal>
(or press the Delete key).
</para>
            </warning>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <!-- Fields in the properties tab -->

    <sect2 id="s2.ref.extend_property_fields">
      <title>Property Fields For Extend</title>

      <variablelist>

        <!-- Entry for Name -->

        <varlistentry>
          <term><literal>Name</literal></term>

          <listitem>
            <indexterm>
              <primary>Extend Relationship Name</primary>
            </indexterm>
            <indexterm>
              <primary>Name</primary>
              <secondary>of Extend Relationship</secondary>
            </indexterm>

            <para>Text box.
The name of the extend relationship.
</para>

          <tip><para>It is quite common to leave extends
            unnamed in use case analysis.</para></tip>

          <note><para>&argouml; does not enforce any naming convention for
            extend relationships.</para></note></listitem>
        </varlistentry>

        <!-- Entry for Stereotype -->

        <varlistentry>
          <term><literal>Stereotype</literal></term>

          <listitem>
            <indexterm>
              <primary>Extend Relationship Stereotype</primary>
            </indexterm>
            <indexterm>
              <primary>Stereotype</primary>
              <secondary>of Extend Relationship</secondary>
            </indexterm>

            <para>Drop down selector.
&argouml; does not provide any stereotypes by default.
</para>

          <tip><para>Stereotyping does not have great value on an extend
            relationship.</para></tip>

          <note><para>There is no representation of the stereotype of an
            extend relationship on the diagram.</para></note></listitem>
        </varlistentry>

        <!-- Entry for Navigate Stereotype -->

        <varlistentry>
          <term><literal>Navigate Stereotype</literal></term>

          <listitem><para><guiicon><inlinemediaobject><imageobject><imagedata
              format="GIF" align="center"
              fileref="images/icons/navigate_stereotype.gif"/>
            </imageobject></inlinemediaobject></guiicon> icon. If a
              stereotype has been selected, this will navigate to the
              stereotype property panel (see <xref
                linkend="s1.ref.stereotype"/>).</para></listitem>
        </varlistentry>

        <!-- Entry for Namespace -->

        <varlistentry>
          <term><literal>Namespace</literal></term>

          <listitem>
            <indexterm>
              <primary>Extend Relationship Namespace</primary>
            </indexterm>
            <indexterm>
              <primary>Namespace</primary>
              <secondary>of Extend Relationship</secondary>
            </indexterm>

            <para>Text box.
Records the namespace for the
extend relationship.
This is the package hierarchy.
</para>

            <para>
<!-- Issue: 2148 -->
&Button1; Double Click on the entry will navigate to the package
            defining this namespace (or the model for the top level
            namespace).</para></listitem>
        </varlistentry>

        <!-- Entry for Base -->

        <varlistentry>
          <term><literal>Base Use Case</literal></term>

          <listitem>
            <indexterm>
              <primary>Extend Relationship Base Use Case</primary>
            </indexterm>
            <indexterm>
              <primary>Base Use Case</primary>
              <secondary>of Extend Relationship</secondary>
            </indexterm>

            <para>Drop down selector.
Shows the use case that is
            being extended by this extend relationship.  &Button1; click
            on this entry will give a drop down menu of all available use cases
            (and an empty entry) which may be selected by &button1;
            click.</para>
          </listitem>
        </varlistentry>

        <!-- Entry for Extension -->

        <varlistentry>
          <term><literal>Extension</literal></term>

          <listitem>
            <indexterm>
              <primary>Extend Relationship Extension</primary>
            </indexterm>
            <indexterm>
              <primary>Extension</primary>
              <secondary>of Extend Relationship</secondary>
            </indexterm>

            <para>Drop down selector.
Show the use case that is
            doing the extending through this extend relationship.  &Button1;
            click on this entry will give a drop down menu of all available use
            cases (and an empty entry) which may be selected by &button1;
            click.</para>
          </listitem>
        </varlistentry>

        <!-- Entry for Extension Points -->

        <varlistentry>
          <term><literal>Extension Points</literal></term>

          <listitem>
            <indexterm>
              <primary>Extend Relationship Extension Point</primary>
            </indexterm>
            <indexterm>
              <primary>Extension Point</primary>
              <secondary>of Extend Relationship</secondary>
            </indexterm>

            <para>Text box.
If this use case is, or can be extended,
            this field lists the extension points for the use case.</para>

          <note><para>Extension points are listed by their location point
            rather than their name.</para></note>

            <para>
Where an extension point has been created,
&button1; Double Click
will navigate to that relationship.
&Button2; gives a pop up menu with two entries.
<!-- Issue: 2149 -->
</para>

          <itemizedlist>
              <listitem>
                <para><literal>Add</literal>.
<!-- Issue: 2150 -->
<!-- Issue: 2157 -->
The selected extension points window opens.
In this window it is possible to select extension points.
</para>
              </listitem>

              <listitem>
                <para><literal>New</literal>.
Add a new extension point
              before the current extension point in the list and navigate to
              it. The current extend relationship is added as the first in list
              of extending relationships of the new extension
              point.</para></listitem>

            </itemizedlist>
          </listitem>
        </varlistentry>

        <!-- Entry for condition -->

        <varlistentry>
          <term><literal>Condition</literal></term>

          <listitem>
            <para>Text area.
Multi-line textual description of any condition 
attached to the extend relationship.
</para>
          </listitem>
        </varlistentry>

      </variablelist>
    </sect2>
  </sect1>

  <!-- Include relationship -->

  <sect1 id="s1.ref.include">
    <title>Include</title>
    <indexterm>
      <primary>Include Relationship</primary>
    </indexterm>

    <para>Include is a relationship between two use cases. Where A includes B,
      it means B described behavior that is to be included in the description
      of the behavior of A at some point (defined internally by A).</para>

    <para>Examples for a travel agent sales system might be the use case for
      booking travel, which includes use cases for booking flights and taking
      payment.</para>

    <para>Within the UML metamodel, <literal>Include</literal> is a
      sub-class of <literal>Relationship</literal>.</para>

    <para>An include relationship is represented as a dotted link with an open
      arrow head and a label <literal>&laquo;include&raquo;</literal> (see
      <xref linkend="fig.ref.use_case_diagram"/>).</para>

    <!-- The details tabs -->

    <sect2>
      <title>Include Details Tabs</title>
      <indexterm>
        <primary>Include Relationship Details Tabs</primary>
      </indexterm>
      <indexterm>
        <primary>Details Tabs</primary>
        <secondary>for Include Relationship</secondary>
      </indexterm>

      <para>The details tabs that are active for include relationships are as
        follows.</para>

      <note><para>There is no source tab, since there is no source code that
        could be generated for an include relationship.</para></note>

      <variablelist>

        <!-- Entry for ToDoItem tab -->

        <varlistentry>
          <term><literal>ToDoItem</literal></term>

          <listitem><para>Standard tab.</para></listitem>
        </varlistentry>

        <!-- Entry for Properties tab -->

        <varlistentry>
          <term><literal>Properties</literal></term>

          <listitem><para>See <xref
              linkend="s2.ref.include_property_toolbar"/> and <xref
              linkend="s2.ref.include_property_fields"/>
            below.</para></listitem>
        </varlistentry>

        <!-- Entry for Documentation tab -->

        <varlistentry>
          <term><literal>Documentation</literal></term>

          <listitem>
            <para>Standard tab.
See <xref linkend="s2.ref.documentation_tab"/>.
</para>
          </listitem>
        </varlistentry>

        <!-- Entry for Style tab -->

        <varlistentry>
          <term><literal>Style</literal></term>

          <listitem><para>Standard tab</para>

          <note><para>The values for the bounds of the include relationships
            appear to have no meaning. Changing them has no effect on the
            diagram. This is sensible behavior, given the include
            is tied to a particular pair of use
            cases.</para></note></listitem>
        </varlistentry>

        <!-- Entry for Constraints tab -->

        <varlistentry>
          <term><literal>Constraints</literal></term>

          <listitem>
            <para>&constraintssupport;
</para>
          </listitem>
        </varlistentry>

        <!-- Entry for Tagged Values tab -->

        <varlistentry>
          <term><literal>Tagged Values</literal></term>

          <listitem><para>Standard tab. In the UML metamodel,
            <literal>Include</literal> has the following standard
            tagged values defined.</para>

            <itemizedlist>
              <listitem><para><literal>derived</literal> (from the
                superclass, <literal>ModelElement</literal>). Values
                <literal>true</literal>, meaning the include relationship is
                redundant&mdash;it can be formally derived from other
                elements, or <literal>false</literal> meaning it
                cannot.</para>

              <note><para>Derived include relationships could have their value
                in analysis to introduce useful names or
                concepts.</para></note></listitem>
            </itemizedlist>

          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <!-- Include properties -->

    <sect2 id="s2.ref.include_property_toolbar">
      <title>Include Property Toolbar</title>

      <variablelist>

        <!-- Entry for Go up button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/navigate_up.gif"/>
          </imageobject></inlinemediaobject></guiicon> <literal>Go
            up</literal></term>

          <listitem><para>Navigate up through the package structure of the
            model. For a include this will be the package containing
            the include.</para></listitem>
        </varlistentry>

        <!-- Entry for Delete button -->

        <varlistentry>
          <term><guiicon><inlinemediaobject><imageobject><imagedata
            format="GIF" align="center"
            fileref="images/icons/property_delete.gif"/>
          </imageobject></inlinemediaobject></guiicon>
            <literal>Delete</literal></term>

          <listitem>
            <para>This deletes the selected include relationship from
the model.
</para>

          <warning><para>This is a deletion from the model
            <emphasis>not</emphasis> just the diagram. To delete a
            include from the diagram, but keep it within the model,
            use the main menu <literal>Remove From Diagram</literal>
(or press the Delete key).
</para>
            </warning>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <!-- Fields in the properties tab -->

    <sect2 id="s2.ref.include_property_fields">
      <title>Property Fields For Include</title>

      <variablelist>

        <!-- Entry for Name -->

        <varlistentry>
          <term><literal>Name</literal></term>

          <listitem>
            <indexterm>
              <primary>Include Relationship Name</primary>
            </indexterm>
            <indexterm>
              <primary>Name</primary>
              <secondary>of Include Relationship</secondary>
            </indexterm>

            <para>Text box.
The name of the include
            relationship.</para>

          <tip><para>It is quite common to leave include relationships unnamed
            in use case analysis.</para></tip>

          <note><para>&argouml; does not enforce any naming convention for
            include relationships.</para></note>

          </listitem>
        </varlistentry>

        <!-- Entry for Stereotype -->

        <varlistentry>
          <term><literal>Stereotype</literal></term>

          <listitem>
            <indexterm>
              <primary>Include Relationship Stereotype</primary>
            </indexterm>
            <indexterm>
              <primary>Stereotype</primary>
              <secondary>of Include Relationship</secondary>
            </indexterm>

            <para>Drop down selector.
&argouml; does not provide any stereotypes for include relationships.
</para>

          <tip><para>Stereotyping does not have great value on an include
            relationship.</para></tip>
          <note><para>There is no representation of the stereotype of an
            include relationship on the diagram.</para></note>
          </listitem>
        </varlistentry>

        <!-- Entry for Navigate Stereotype -->

        <varlistentry>
          <term><literal>Navigate Stereotype</literal></term>

          <listitem><para><guiicon><inlinemediaobject><imageobject><imagedata
              format="GIF" align="center"
              fileref="images/icons/navigate_stereotype.gif"/>
            </imageobject></inlinemediaobject></guiicon> icon. If a
              stereotype has been selected, this will navigate to the
              stereotype property panel (see <xref
                linkend="s1.ref.stereotype"/>).</para></listitem>
        </varlistentry>

        <!-- Entry for Namespace -->

        <varlistentry>
          <term><literal>Namespace</literal></term>

          <listitem>
            <indexterm>
              <primary>Include Relationship Namespace</primary>
            </indexterm>
            <indexterm>
              <primary>Namespace</primary>
              <secondary>of Include Relationship</secondary>
            </indexterm>

            <para>Text box.
Records the namespace for the
            include. This is the package hierarchy.</para>

          <para>&Button1; click on the entry will navigate to the package
            defining this namespace (or the model for the top level
            namespace).</para></listitem>
        </varlistentry>

        <!-- Entry for Base -->

        <varlistentry>
          <term><literal>Base</literal></term>

          <listitem>
            <indexterm>
              <primary>Include Relationship Base</primary>
            </indexterm>
            <indexterm>
              <primary>Base</primary>
              <secondary>of Include Relationship</secondary>
            </indexterm>

            <para>Drop down selector.
Records the use case that is
            doing the including in this include relationship.  &Button1; click
            on this entry will give a drop down menu of all available use cases
            (and an empty entry) which may be selected by &button1;
            click.</para>

            <caution>
              <!-- Issue: 2159 -->
              <para>
In the current version of &argouml; if you change the
            base use case on an include relationship that is already shown on a
            diagram, then it will NOT be redrawn. Currently the only way to
            effect a redraw is to remove the use cases at each end from the
            diagram and then add them back from the explorer.
          </para></caution></listitem>
        </varlistentry>

        <!-- Entry for Included Usecase -->

        <varlistentry>
          <term><literal>Included Use Case</literal></term>

          <listitem>
            <indexterm>
              <primary>Include Relationship Included Use Case</primary>
            </indexterm>
            <indexterm>
              <primary>Included Use Case</primary>
              <secondary>of Include Relationship</secondary>
            </indexterm>

            <para>Drop down selector.
Records the use case that is
            being included by this include relationship.  &Button1;
            click on this entry will give a drop down menu of all available use
            cases (and an empty entry) which may be selected by &button1;
            click.</para>

            <caution>
              <!-- Issue: 2159 -->
              <para>
In the current version of &argouml; if you change the
            addition use case on an include relationship that is already shown
            on a diagram, then it will NOT be redrawn. Currently the only way
            to effect a redraw is to remove the use cases at each end from the
            diagram and then add them back from the explorer.
          </para></caution></listitem>
        </varlistentry>

      </variablelist>
    </sect2>
  </sect1>
</chapter>

<!-- Local stuff for Emacs - please do not delete

Local Variables:
mode: xml
sgml-doctype: "argomanual.xml"
sgml-parent-document: ("argomanual.xml" "chapter" nil)
sgml-validate-command: "nsgmls -wxml -sv ../docbook-setup/xml.dcl \
  argomanual.xml"
indent-tabs-mode: nil
End:

-->
