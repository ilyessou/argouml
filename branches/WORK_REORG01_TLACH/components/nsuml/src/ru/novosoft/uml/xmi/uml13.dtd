<?xml version="1.0" encoding="UTF-8" ?>
<!-- XMI Automatic DTD Generation -->
<!-- Date: Fri May 28 14:48:41 PDT 1999 -->
<!-- Metamodel: UML1.3 -->
<!-- _______________________________________________________________ -->
<!-- -->
<!-- XMI is the top-level XML element for XMI transfer text -->
<!-- _______________________________________________________________ -->
<!ELEMENT XMI (XMI.header, XMI.content?, XMI.difference*,
XMI.extensions*) >
<!ATTLIST XMI
xmi.version CDATA #FIXED "1.0"
timestamp CDATA #IMPLIED
verified (true | false) #IMPLIED
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- XMI.header contains documentation and identifies the model, -->
<!-- metamodel, and metametamodel -->
<!-- _______________________________________________________________ -->
<!ELEMENT XMI.header (XMI.documentation?, XMI.model*, XMI.metamodel*,
XMI.metametamodel*) >
<!-- _______________________________________________________________ -->
<!-- -->
<!-- documentation for transfer data -->
<!-- _______________________________________________________________ -->
<!ELEMENT XMI.documentation (#PCDATA | XMI.owner | XMI.contact |
XMI.longDescription | XMI.shortDescription |
XMI.exporter | XMI.exporterVersion |
XMI.notice)* >
<!ELEMENT XMI.owner ANY >
<!ELEMENT XMI.contact ANY >
<!ELEMENT XMI.longDescription ANY >
<!ELEMENT XMI.shortDescription ANY >
<!ELEMENT XMI.exporter ANY >
<!ELEMENT XMI.exporterVersion ANY >
<!ELEMENT XMI.exporterID ANY >
<!ELEMENT XMI.notice ANY >
<!-- _______________________________________________________________ -->
<!-- -->
<!-- XMI.element.att defines the attributes that each XML element -->
<!-- that corresponds to a metamodel class must have to conform to -->
<!-- the XMI specification. -->
<!-- _______________________________________________________________ -->
<!ENTITY % XMI.element.att
'xmi.id ID #IMPLIED xmi.label CDATA #IMPLIED xmi.uuid
CDATA #IMPLIED ' >
<!-- _______________________________________________________________ -->
<!-- -->
<!-- XMI.link.att defines the attributes that each XML element that -->
<!-- corresponds to a metamodel class must have to enable it to -->
<!-- function as a simple XLink as well as refer to model -->
<!-- constructs within the same XMI file. -->
<!-- _______________________________________________________________ -->
<!ENTITY % XMI.link.att
'xml:link CDATA #IMPLIED inline (true | false) #IMPLIED
actuate (show | user) #IMPLIED href CDATA #IMPLIED role
CDATA #IMPLIED title CDATA #IMPLIED show (embed | replace
| new) #IMPLIED behavior CDATA #IMPLIED xmi.idref IDREF
#IMPLIED xmi.uuidref CDATA #IMPLIED' >
<!-- _______________________________________________________________ -->
<!-- -->
<!-- XMI.model identifies the model(s) being transferred -->
<!-- _______________________________________________________________ -->
<!ELEMENT XMI.model ANY >
<!ATTLIST XMI.model
%XMI.link.att;
xmi.name CDATA #REQUIRED
xmi.version CDATA #IMPLIED
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- XMI.metamodel identifies the metamodel(s) for the transferred -->
<!-- data -->
<!-- _______________________________________________________________ -->
<!ELEMENT XMI.metamodel ANY >
<!ATTLIST XMI.metamodel
%XMI.link.att;
xmi.name CDATA #REQUIRED
xmi.version CDATA #IMPLIED
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- XMI.metametamodel identifies the metametamodel(s) for the -->
<!-- transferred data -->
<!-- _______________________________________________________________ -->
<!ELEMENT XMI.metametamodel ANY >
<!ATTLIST XMI.metametamodel
%XMI.link.att;
xmi.name CDATA #REQUIRED
xmi.version CDATA #IMPLIED
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- XMI.content is the actual data being transferred -->
<!-- _______________________________________________________________ -->
<!ELEMENT XMI.content ANY >
<!-- _______________________________________________________________ -->
<!-- -->
<!-- XMI.extensions contains data to transfer that does not conform -->
<!-- to the metamodel(s) in the header -->
<!-- _______________________________________________________________ -->
<!ELEMENT XMI.extensions ANY >
<!ATTLIST XMI.extensions
xmi.extender CDATA #REQUIRED
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- extension contains information related to a specific model -->
<!-- construct that is not defined in the metamodel(s) in the header -->
<!-- _______________________________________________________________ -->
<!ELEMENT XMI.extension ANY >
<!ATTLIST XMI.extension
%XMI.element.att;
%XMI.link.att;
xmi.extender CDATA #REQUIRED
xmi.extenderID CDATA #REQUIRED
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- XMI.difference holds XML elements representing differences to a -->
<!-- base model -->
<!-- _______________________________________________________________ -->
<!ELEMENT XMI.difference (XMI.difference | XMI.delete | XMI.add |
XMI.replace)* >
<!ATTLIST XMI.difference
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- XMI.delete represents a deletion from a base model -->
<!-- _______________________________________________________________ -->
<!ELEMENT XMI.delete EMPTY >
<!ATTLIST XMI.delete
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- XMI.add represents an addition to a base model -->
<!-- _______________________________________________________________ -->
<!ELEMENT XMI.add ANY >
<!ATTLIST XMI.add
%XMI.element.att;
%XMI.link.att;
xmi.position CDATA "-1"
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- XMI.replace represents the replacement of a model construct -->
<!-- with another model construct in a base model -->
<!-- _______________________________________________________________ -->
<!ELEMENT XMI.replace ANY >
<!ATTLIST XMI.replace
%XMI.element.att;
%XMI.link.att;
xmi.position CDATA "-1"
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- XMI.reference may be used to refer to data types not defined in -->
<!-- the metamodel -->
<!-- _______________________________________________________________ -->
<!ELEMENT XMI.reference ANY >
<!ATTLIST XMI.reference
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- This section contains the declaration of XML elements -->
<!-- representing data types -->
<!-- _______________________________________________________________ -->
<!ELEMENT XMI.TypeDefinitions ANY >
<!ELEMENT XMI.field ANY >
<!ELEMENT XMI.seqItem ANY >
<!ELEMENT XMI.octetStream (#PCDATA) >
<!ELEMENT XMI.unionDiscrim ANY >
<!ELEMENT XMI.enum EMPTY >
<!ATTLIST XMI.enum
xmi.value CDATA #REQUIRED
>
<!ELEMENT XMI.any ANY >
<!ATTLIST XMI.any
%XMI.link.att;
xmi.type CDATA #IMPLIED
xmi.name CDATA #IMPLIED
>
<!ELEMENT XMI.CorbaTypeCode (XMI.CorbaTcAlias | XMI.CorbaTcStruct |
XMI.CorbaTcSequence | XMI.CorbaTcArray |
XMI.CorbaTcEnum | XMI.CorbaTcUnion |
XMI.CorbaTcExcept | XMI.CorbaTcString |
XMI.CorbaTcWstring | XMI.CorbaTcShort |
XMI.CorbaTcLong | XMI.CorbaTcUshort |
XMI.CorbaTcUlong | XMI.CorbaTcFloat |
XMI.CorbaTcDouble | XMI.CorbaTcBoolean |
XMI.CorbaTcChar | XMI.CorbaTcWchar |
XMI.CorbaTcOctet | XMI.CorbaTcAny |
XMI.CorbaTcTypeCode | XMI.CorbaTcPrincipal |
XMI.CorbaTcNull | XMI.CorbaTcVoid |
XMI.CorbaTcLongLong |
XMI.CorbaTcLongDouble) >
<!ATTLIST XMI.CorbaTypeCode
%XMI.element.att;
>
<!ELEMENT XMI.CorbaTcAlias (XMI.CorbaTypeCode) >
<!ATTLIST XMI.CorbaTcAlias
xmi.tcName CDATA #REQUIRED
xmi.tcId CDATA #IMPLIED
>
<!ELEMENT XMI.CorbaTcStruct (XMI.CorbaTcField)* >
<!ATTLIST XMI.CorbaTcStruct
xmi.tcName CDATA #REQUIRED
xmi.tcId CDATA #IMPLIED
>
<!ELEMENT XMI.CorbaTcField (XMI.CorbaTypeCode) >
<!ATTLIST XMI.CorbaTcField
xmi.tcName CDATA #REQUIRED
>
<!ELEMENT XMI.CorbaTcSequence (XMI.CorbaTypeCode |
XMI.CorbaRecursiveType) >
<!ATTLIST XMI.CorbaTcSequence
xmi.tcLength CDATA #REQUIRED
>
<!ELEMENT XMI.CorbaRecursiveType EMPTY >
<!ATTLIST XMI.CorbaRecursiveType
xmi.offset CDATA #REQUIRED
>
<!ELEMENT XMI.CorbaTcArray (XMI.CorbaTypeCode) >
<!ATTLIST XMI.CorbaTcArray
xmi.tcLength CDATA #REQUIRED
>
<!ELEMENT XMI.CorbaTcObjRef EMPTY >
<!ATTLIST XMI.CorbaTcObjRef
xmi.tcName CDATA #REQUIRED
xmi.tcId CDATA #IMPLIED
>
<!ELEMENT XMI.CorbaTcEnum (XMI.CorbaTcEnumLabel) >
<!ATTLIST XMI.CorbaTcEnum
xmi.tcName CDATA #REQUIRED
xmi.tcId CDATA #IMPLIED
>
<!ELEMENT XMI.CorbaTcEnumLabel EMPTY >
<!ATTLIST XMI.CorbaTcEnumLabel
xmi.tcName CDATA #REQUIRED
>
<!ELEMENT XMI.CorbaTcUnionMbr (XMI.CorbaTypeCode, XMI.any) >
<!ATTLIST XMI.CorbaTcUnionMbr
xmi.tcName CDATA #REQUIRED
>
<!ELEMENT XMI.CorbaTcUnion (XMI.CorbaTypeCode, XMI.CorbaTcUnionMbr*) >
<!ATTLIST XMI.CorbaTcUnion
xmi.tcName CDATA #REQUIRED
xmi.tcId CDATA #IMPLIED
>
<!ELEMENT XMI.CorbaTcExcept (XMI.CorbaTcField)* >
<!ATTLIST XMI.CorbaTcExcept
xmi.tcName CDATA #REQUIRED
xmi.tcId CDATA #IMPLIED
>
<!ELEMENT XMI.CorbaTcString EMPTY >
<!ATTLIST XMI.CorbaTcString
xmi.tcLength CDATA #REQUIRED
>
<!ELEMENT XMI.CorbaTcWstring EMPTY >
<!ATTLIST XMI.CorbaTcWstring
xmi.tcLength CDATA #REQUIRED
>
<!ELEMENT XMI.CorbaTcFixed EMPTY >
<!ATTLIST XMI.CorbaTcFixed
xmi.tcDigits CDATA #REQUIRED
xmi.tcScale CDATA #REQUIRED
>
<!ELEMENT XMI.CorbaTcShort EMPTY >
<!ELEMENT XMI.CorbaTcLong EMPTY >
<!ELEMENT XMI.CorbaTcUshort EMPTY >
<!ELEMENT XMI.CorbaTcUlong EMPTY >
<!ELEMENT XMI.CorbaTcFloat EMPTY >
<!ELEMENT XMI.CorbaTcDouble EMPTY >
<!ELEMENT XMI.CorbaTcBoolean EMPTY >
<!ELEMENT XMI.CorbaTcChar EMPTY >
<!ELEMENT XMI.CorbaTcWchar EMPTY >
<!ELEMENT XMI.CorbaTcOctet EMPTY >
<!ELEMENT XMI.CorbaTcAny EMPTY >
<!ELEMENT XMI.CorbaTcTypeCode EMPTY >
<!ELEMENT XMI.CorbaTcPrincipal EMPTY >
<!ELEMENT XMI.CorbaTcNull EMPTY >
<!ELEMENT XMI.CorbaTcVoid EMPTY >
<!ELEMENT XMI.CorbaTcLongLong EMPTY >
<!ELEMENT XMI.CorbaTcLongDouble EMPTY >
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL: UML1.3 -->
<!-- _______________________________________________________________ -->
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL PACKAGE: Foundation -->
<!-- _______________________________________________________________ -->
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL PACKAGE: Core -->
<!-- _______________________________________________________________ -->
<!ELEMENT Foundation.Core.Association.connection (Foundation.Core.AssociationEnd |
Behavioral_Elements.Collaborations.AssociationEndRole)*
>
<!ELEMENT Foundation.Core.Classifier.feature (Foundation.Core.Feature |
Foundation.Core.BehavioralFeature |
Behavioral_Elements.Common_Behavior.Reception |
Foundation.Core.Operation |
Foundation.Core.Method |
Foundation.Core.StructuralFeature |
Foundation.Core.Attribute)*
>
<!ELEMENT Foundation.Core.Namespace.ownedElement (Foundation.Core.ModelElement |
Foundation.Core.Comment |
Foundation.Core.Relationship |
Behavioral_Elements.Use_Cases.Extend |
Behavioral_Elements.Use_Cases.Include |
Foundation.Core.Generalization |
Foundation.Core.Flow |
Foundation.Core.Association |
Foundation.Core.AssociationClass |
Behavioral_Elements.Collaborations.AssociationRole |
Foundation.Core.Dependency |
Foundation.Core.Abstraction |
Foundation.Core.Usage |
Foundation.Core.Binding |
Foundation.Core.Permission |
Foundation.Extension_Mechanisms.TaggedValue |
Behavioral_Elements.Common_Behavior.Instance |
Behavioral_Elements.Common_Behavior.Object |
Behavioral_Elements.Common_Behavior.LinkObject |
Behavioral_Elements.Common_Behavior.DataValue |
Behavioral_Elements.Common_Behavior.ComponentInstance |
Behavioral_Elements.Common_Behavior.NodeInstance |
Behavioral_Elements.Use_Cases.UseCaseInstance |
Behavioral_Elements.Common_Behavior.Action |
Behavioral_Elements.Common_Behavior.CallAction |
Behavioral_Elements.Common_Behavior.SendAction |
Behavioral_Elements.Common_Behavior.ActionSequence |
Behavioral_Elements.Common_Behavior.ReturnAction |
Behavioral_Elements.Common_Behavior.TerminateAction |
Behavioral_Elements.Common_Behavior.DestroyAction |
Behavioral_Elements.Common_Behavior.CreateAction |
Behavioral_Elements.Common_Behavior.UninterpretedAction |
Behavioral_Elements.Common_Behavior.AttributeLink |
Behavioral_Elements.Common_Behavior.Argument |
Behavioral_Elements.Common_Behavior.Link |
Behavioral_Elements.Common_Behavior.LinkEnd |
Behavioral_Elements.Common_Behavior.Stimulus |
Behavioral_Elements.Use_Cases.ExtensionPoint |
Behavioral_Elements.State_Machines.StateMachine |
Behavioral_Elements.Activity_Graphs.ActivityGraph |
Behavioral_Elements.State_Machines.Event |
Behavioral_Elements.State_Machines.TimeEvent |
Behavioral_Elements.State_Machines.CallEvent |
Behavioral_Elements.State_Machines.SignalEvent |
Behavioral_Elements.State_Machines.ChangeEvent |
Behavioral_Elements.State_Machines.Transition |
Behavioral_Elements.State_Machines.StateVertex |
Behavioral_Elements.State_Machines.Pseudostate |
Behavioral_Elements.State_Machines.SynchState |
Behavioral_Elements.State_Machines.StubState |
Behavioral_Elements.State_Machines.State |
Behavioral_Elements.State_Machines.CompositeState |
Behavioral_Elements.State_Machines.SubmachineState |
Behavioral_Elements.Activity_Graphs.SubactivityState |
Behavioral_Elements.State_Machines.SimpleState |
Behavioral_Elements.Activity_Graphs.ObjectFlowState |
Behavioral_Elements.Activity_Graphs.ActionState |
Behavioral_Elements.Activity_Graphs.CallState |
Behavioral_Elements.State_Machines.FinalState |
Behavioral_Elements.State_Machines.Guard |
Behavioral_Elements.Collaborations.Message |
Behavioral_Elements.Collaborations.Interaction |
Behavioral_Elements.Activity_Graphs.Partition |
Foundation.Core.Feature |
Foundation.Core.BehavioralFeature |
Behavioral_Elements.Common_Behavior.Reception |
Foundation.Core.Operation |
Foundation.Core.Method |
Foundation.Core.StructuralFeature |
Foundation.Core.Attribute |
Foundation.Core.GeneralizableElement |
Foundation.Extension_Mechanisms.Stereotype |
Behavioral_Elements.Collaborations.Collaboration |
Model_Management.Package |
Model_Management.Subsystem |
Model_Management.Model |
Foundation.Core.Classifier |
Foundation.Core.Class |
Foundation.Core.DataType |
Foundation.Core.Interface |
Foundation.Core.Component |
Foundation.Core.Node |
Behavioral_Elements.Common_Behavior.Signal |
Behavioral_Elements.Common_Behavior.Exception |
Behavioral_Elements.Use_Cases.UseCase |
Behavioral_Elements.Use_Cases.Actor |
Behavioral_Elements.Collaborations.ClassifierRole |
Behavioral_Elements.Activity_Graphs.ClassifierInState |
Foundation.Core.AssociationEnd |
Behavioral_Elements.Collaborations.AssociationEndRole |
Foundation.Core.Namespace |
Foundation.Core.Parameter |
Foundation.Core.Constraint)*
>
<!ELEMENT Foundation.Core.BehavioralFeature.parameter
(Foundation.Core.Parameter)* >
<!ELEMENT Foundation.Core.AssociationEnd.qualifier
(Foundation.Core.Attribute)* >
<!ELEMENT Foundation.Core.ModelElement.templateParameter
(Foundation.Core.TemplateParameter)* >
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL CLASS: Classifier -->
<!-- _______________________________________________________________ -->
<!ELEMENT Foundation.Core.Classifier.participant (Foundation.Core.AssociationEnd |
Behavioral_Elements.Collaborations.AssociationEndRole)*
>
<!ELEMENT Foundation.Core.Classifier.powertypeRange
(Foundation.Core.Generalization)* >
<!ELEMENT Foundation.Core.Classifier.instance (Behavioral_Elements.Common_Behavior.Instance |
Behavioral_Elements.Common_Behavior.Object |
Behavioral_Elements.Common_Behavior.LinkObject |
Behavioral_Elements.Common_Behavior.DataValue |
Behavioral_Elements.Common_Behavior.ComponentInstance |
Behavioral_Elements.Common_Behavior.NodeInstance |
Behavioral_Elements.Use_Cases.UseCaseInstance)*
>
<!ELEMENT Foundation.Core.Classifier.createAction
(Behavioral_Elements.Common_Behavior.CreateAction)* >
<!ELEMENT Foundation.Core.Classifier.classifierRole
(Behavioral_Elements.Collaborations.ClassifierRole)* >
<!ELEMENT Foundation.Core.Classifier.collaboration
(Behavioral_Elements.Collaborations.Collaboration)* >
<!ELEMENT Foundation.Core.Classifier.classifierInState
(Behavioral_Elements.Activity_Graphs.ClassifierInState)* >
<!ELEMENT Foundation.Core.Classifier.objectFlowState
(Behavioral_Elements.Activity_Graphs.ObjectFlowState)* >
<!ELEMENT Foundation.Core.Classifier (Foundation.Core.ModelElement.name?,
Foundation.Core.ModelElement.visibility?,
Foundation.Core.ModelElement.isSpecification?,
Foundation.Core.GeneralizableElement.isRoot?,
Foundation.Core.GeneralizableElement.isLeaf?,
Foundation.Core.GeneralizableElement.isAbstract?,
XMI.extension*,
Foundation.Core.ModelElement.namespace?,
Foundation.Core.ModelElement.clientDependency*,
Foundation.Core.ModelElement.constraint*,
Foundation.Core.ModelElement.supplierDependency*,
Foundation.Core.ModelElement.presentation*,
Foundation.Core.ModelElement.targetFlow*,
Foundation.Core.ModelElement.sourceFlow*,
Foundation.Core.ModelElement.templateParameter3*,
Foundation.Core.ModelElement.binding*,
Foundation.Core.ModelElement.comment*,
Foundation.Core.ModelElement.elementResidence*,
Foundation.Core.ModelElement.templateParameter2*,
Foundation.Core.ModelElement.stereotype?,
Foundation.Core.ModelElement.behavior*,
Foundation.Core.ModelElement.classifierRole*,
Foundation.Core.ModelElement.collaboration*,
Foundation.Core.ModelElement.partition*,
Foundation.Core.ModelElement.elementImport*,
Foundation.Core.GeneralizableElement.generalization*,
Foundation.Core.GeneralizableElement.specialization*,
Foundation.Core.Classifier.participant*,
Foundation.Core.Classifier.powertypeRange*,
Foundation.Core.Classifier.instance*,
Foundation.Core.Classifier.createAction*,
Foundation.Core.Classifier.classifierRole*,
Foundation.Core.Classifier.collaboration*,
Foundation.Core.Classifier.classifierInState*,
Foundation.Core.Classifier.objectFlowState*,
Foundation.Core.ModelElement.templateParameter*,
Foundation.Core.ModelElement.taggedValue*,
Foundation.Core.Namespace.ownedElement*,
Foundation.Core.Classifier.feature*)?
>
<!ATTLIST Foundation.Core.Classifier
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL CLASS: Class -->
<!-- _______________________________________________________________ -->
<!ELEMENT Foundation.Core.Class.isActive EMPTY >
<!ATTLIST Foundation.Core.Class.isActive
xmi.value ( true | false ) #REQUIRED
>
<!ELEMENT Foundation.Core.Class (Foundation.Core.ModelElement.name?,
Foundation.Core.ModelElement.visibility?,
Foundation.Core.ModelElement.isSpecification?,
Foundation.Core.GeneralizableElement.isRoot?,
Foundation.Core.GeneralizableElement.isLeaf?,
Foundation.Core.GeneralizableElement.isAbstract?,
Foundation.Core.Class.isActive?,
XMI.extension*,
Foundation.Core.ModelElement.namespace?,
Foundation.Core.ModelElement.clientDependency*,
Foundation.Core.ModelElement.constraint*,
Foundation.Core.ModelElement.supplierDependency*,
Foundation.Core.ModelElement.presentation*,
Foundation.Core.ModelElement.targetFlow*,
Foundation.Core.ModelElement.sourceFlow*,
Foundation.Core.ModelElement.templateParameter3*,
Foundation.Core.ModelElement.binding*,
Foundation.Core.ModelElement.comment*,
Foundation.Core.ModelElement.elementResidence*,
Foundation.Core.ModelElement.templateParameter2*,
Foundation.Core.ModelElement.stereotype?,
Foundation.Core.ModelElement.behavior*,
Foundation.Core.ModelElement.classifierRole*,
Foundation.Core.ModelElement.collaboration*,
Foundation.Core.ModelElement.partition*,
Foundation.Core.ModelElement.elementImport*,
Foundation.Core.GeneralizableElement.generalization*,
Foundation.Core.GeneralizableElement.specialization*,
Foundation.Core.Classifier.participant*,
Foundation.Core.Classifier.powertypeRange*,
Foundation.Core.Classifier.instance*,
Foundation.Core.Classifier.createAction*,
Foundation.Core.Classifier.classifierRole*,
Foundation.Core.Classifier.collaboration*,
Foundation.Core.Classifier.classifierInState*,
Foundation.Core.Classifier.objectFlowState*,
Foundation.Core.ModelElement.templateParameter*,
Foundation.Core.ModelElement.taggedValue*,
Foundation.Core.Namespace.ownedElement*,
Foundation.Core.Classifier.feature*)? >
<!ATTLIST Foundation.Core.Class
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL CLASS: DataType -->
<!-- _______________________________________________________________ -->
<!ELEMENT Foundation.Core.DataType (Foundation.Core.ModelElement.name?,
Foundation.Core.ModelElement.visibility?,
Foundation.Core.ModelElement.isSpecification?,
Foundation.Core.GeneralizableElement.isRoot?,
Foundation.Core.GeneralizableElement.isLeaf?,
Foundation.Core.GeneralizableElement.isAbstract?,
XMI.extension*,
Foundation.Core.ModelElement.namespace?,
Foundation.Core.ModelElement.clientDependency*,
Foundation.Core.ModelElement.constraint*,
Foundation.Core.ModelElement.supplierDependency*,
Foundation.Core.ModelElement.presentation*,
Foundation.Core.ModelElement.targetFlow*,
Foundation.Core.ModelElement.sourceFlow*,
Foundation.Core.ModelElement.templateParameter3*,
Foundation.Core.ModelElement.binding*,
Foundation.Core.ModelElement.comment*,
Foundation.Core.ModelElement.elementResidence*,
Foundation.Core.ModelElement.templateParameter2*,
Foundation.Core.ModelElement.stereotype?,
Foundation.Core.ModelElement.behavior*,
Foundation.Core.ModelElement.classifierRole*,
Foundation.Core.ModelElement.collaboration*,
Foundation.Core.ModelElement.partition*,
Foundation.Core.ModelElement.elementImport*,
Foundation.Core.GeneralizableElement.generalization*,
Foundation.Core.GeneralizableElement.specialization*,
Foundation.Core.Classifier.participant*,
Foundation.Core.Classifier.powertypeRange*,
Foundation.Core.Classifier.instance*,
Foundation.Core.Classifier.createAction*,
Foundation.Core.Classifier.classifierRole*,
Foundation.Core.Classifier.collaboration*,
Foundation.Core.Classifier.classifierInState*,
Foundation.Core.Classifier.objectFlowState*,
Foundation.Core.ModelElement.templateParameter*,
Foundation.Core.ModelElement.taggedValue*,
Foundation.Core.Namespace.ownedElement*,
Foundation.Core.Classifier.feature*)?
>
<!ATTLIST Foundation.Core.DataType
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL CLASS: StructuralFeature -->
<!-- _______________________________________________________________ -->
<!ELEMENT Foundation.Core.StructuralFeature.multiplicity
(Foundation.Data_Types.Multiplicity) >
<!ELEMENT Foundation.Core.StructuralFeature.changeability EMPTY >
<!ATTLIST Foundation.Core.StructuralFeature.changeability
xmi.value ( changeable | frozen | addOnly ) #REQUIRED
>
<!ELEMENT Foundation.Core.StructuralFeature.targetScope EMPTY >
<!ATTLIST Foundation.Core.StructuralFeature.targetScope
xmi.value ( classifier | instance ) #REQUIRED
>
<!ELEMENT Foundation.Core.StructuralFeature.type (Foundation.Core.Classifier |
Foundation.Core.Class |
Foundation.Core.AssociationClass |
Foundation.Core.DataType |
Foundation.Core.Interface |
Foundation.Core.Component |
Foundation.Core.Node |
Behavioral_Elements.Common_Behavior.Signal |
Behavioral_Elements.Common_Behavior.Exception |
Behavioral_Elements.Use_Cases.UseCase |
Behavioral_Elements.Use_Cases.Actor |
Behavioral_Elements.Collaborations.ClassifierRole |
Behavioral_Elements.Activity_Graphs.ClassifierInState |
Model_Management.Subsystem)?
>
<!ELEMENT Foundation.Core.StructuralFeature (Foundation.Core.ModelElement.name?,
Foundation.Core.ModelElement.visibility?,
Foundation.Core.ModelElement.isSpecification?,
Foundation.Core.Feature.ownerScope?,
Foundation.Core.StructuralFeature.multiplicity?,
Foundation.Core.StructuralFeature.changeability?,
Foundation.Core.StructuralFeature.targetScope?,
XMI.extension*,
Foundation.Core.ModelElement.namespace?,
Foundation.Core.ModelElement.clientDependency*,
Foundation.Core.ModelElement.constraint*,
Foundation.Core.ModelElement.supplierDependency*,
Foundation.Core.ModelElement.presentation*,
Foundation.Core.ModelElement.targetFlow*,
Foundation.Core.ModelElement.sourceFlow*,
Foundation.Core.ModelElement.templateParameter3*,
Foundation.Core.ModelElement.binding*,
Foundation.Core.ModelElement.comment*,
Foundation.Core.ModelElement.elementResidence*,
Foundation.Core.ModelElement.templateParameter2*,
Foundation.Core.ModelElement.stereotype?,
Foundation.Core.ModelElement.behavior*,
Foundation.Core.ModelElement.classifierRole*,
Foundation.Core.ModelElement.collaboration*,
Foundation.Core.ModelElement.partition*,
Foundation.Core.ModelElement.elementImport*,
Foundation.Core.Feature.owner?,
Foundation.Core.Feature.classifierRole*,
Foundation.Core.StructuralFeature.type?,
Foundation.Core.ModelElement.templateParameter*,
Foundation.Core.ModelElement.taggedValue*)?
>
<!ATTLIST Foundation.Core.StructuralFeature
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL CLASS: Namespace -->
<!-- _______________________________________________________________ -->
<!ELEMENT Foundation.Core.Namespace (Foundation.Core.ModelElement.name?,
Foundation.Core.ModelElement.visibility?,
Foundation.Core.ModelElement.isSpecification?,
XMI.extension*,
Foundation.Core.ModelElement.namespace?,
Foundation.Core.ModelElement.clientDependency*,
Foundation.Core.ModelElement.constraint*,
Foundation.Core.ModelElement.supplierDependency*,
Foundation.Core.ModelElement.presentation*,
Foundation.Core.ModelElement.targetFlow*,
Foundation.Core.ModelElement.sourceFlow*,
Foundation.Core.ModelElement.templateParameter3*,
Foundation.Core.ModelElement.binding*,
Foundation.Core.ModelElement.comment*,
Foundation.Core.ModelElement.elementResidence*,
Foundation.Core.ModelElement.templateParameter2*,
Foundation.Core.ModelElement.stereotype?,
Foundation.Core.ModelElement.behavior*,
Foundation.Core.ModelElement.classifierRole*,
Foundation.Core.ModelElement.collaboration*,
Foundation.Core.ModelElement.partition*,
Foundation.Core.ModelElement.elementImport*,
Foundation.Core.ModelElement.templateParameter*,
Foundation.Core.ModelElement.taggedValue*,
Foundation.Core.Namespace.ownedElement*)?
>
<!ATTLIST Foundation.Core.Namespace
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL CLASS: AssociationEnd -->
<!-- _______________________________________________________________ -->
<!ELEMENT Foundation.Core.AssociationEnd.isNavigable EMPTY >
<!ATTLIST Foundation.Core.AssociationEnd.isNavigable
xmi.value ( true | false ) #REQUIRED
>
<!ELEMENT Foundation.Core.AssociationEnd.ordering EMPTY >
<!ATTLIST Foundation.Core.AssociationEnd.ordering
xmi.value ( unordered | ordered | sorted ) #REQUIRED
>
<!ELEMENT Foundation.Core.AssociationEnd.aggregation EMPTY >
<!ATTLIST Foundation.Core.AssociationEnd.aggregation
xmi.value ( none | aggregate | composite ) #REQUIRED
>
<!ELEMENT Foundation.Core.AssociationEnd.targetScope EMPTY >
<!ATTLIST Foundation.Core.AssociationEnd.targetScope
xmi.value ( classifier | instance ) #REQUIRED
>
<!ELEMENT Foundation.Core.AssociationEnd.multiplicity
(Foundation.Data_Types.Multiplicity) >
<!ELEMENT Foundation.Core.AssociationEnd.changeability EMPTY >
<!ATTLIST Foundation.Core.AssociationEnd.changeability
xmi.value ( changeable | frozen | addOnly ) #REQUIRED
>
<!ELEMENT Foundation.Core.AssociationEnd.association (Foundation.Core.Association |
Foundation.Core.AssociationClass |
Behavioral_Elements.Collaborations.AssociationRole)?
>
<!ELEMENT Foundation.Core.AssociationEnd.type (Foundation.Core.Classifier |
Foundation.Core.Class |
Foundation.Core.AssociationClass |
Foundation.Core.DataType |
Foundation.Core.Interface |
Foundation.Core.Component |
Foundation.Core.Node |
Behavioral_Elements.Common_Behavior.Signal |
Behavioral_Elements.Common_Behavior.Exception |
Behavioral_Elements.Use_Cases.UseCase |
Behavioral_Elements.Use_Cases.Actor |
Behavioral_Elements.Collaborations.ClassifierRole |
Behavioral_Elements.Activity_Graphs.ClassifierInState |
Model_Management.Subsystem)?
>
<!ELEMENT Foundation.Core.AssociationEnd.specification (Foundation.Core.Classifier |
Foundation.Core.Class |
Foundation.Core.AssociationClass |
Foundation.Core.DataType |
Foundation.Core.Interface |
Foundation.Core.Component |
Foundation.Core.Node |
Behavioral_Elements.Common_Behavior.Signal |
Behavioral_Elements.Common_Behavior.Exception |
Behavioral_Elements.Use_Cases.UseCase |
Behavioral_Elements.Use_Cases.Actor |
Behavioral_Elements.Collaborations.ClassifierRole |
Behavioral_Elements.Activity_Graphs.ClassifierInState |
Model_Management.Subsystem)*
>
<!ELEMENT Foundation.Core.AssociationEnd.linkEnd
(Behavioral_Elements.Common_Behavior.LinkEnd)* >
<!ELEMENT Foundation.Core.AssociationEnd.associationEndRole
(Behavioral_Elements.Collaborations.AssociationEndRole)* >
<!ELEMENT Foundation.Core.AssociationEnd (Foundation.Core.ModelElement.name?,
Foundation.Core.ModelElement.visibility?,
Foundation.Core.ModelElement.isSpecification?,
Foundation.Core.AssociationEnd.isNavigable?,
Foundation.Core.AssociationEnd.ordering?,
Foundation.Core.AssociationEnd.aggregation?,
Foundation.Core.AssociationEnd.targetScope?,
Foundation.Core.AssociationEnd.multiplicity?,
Foundation.Core.AssociationEnd.changeability?,
XMI.extension*,
Foundation.Core.ModelElement.namespace?,
Foundation.Core.ModelElement.clientDependency*,
Foundation.Core.ModelElement.constraint*,
Foundation.Core.ModelElement.supplierDependency*,
Foundation.Core.ModelElement.presentation*,
Foundation.Core.ModelElement.targetFlow*,
Foundation.Core.ModelElement.sourceFlow*,
Foundation.Core.ModelElement.templateParameter3*,
Foundation.Core.ModelElement.binding*,
Foundation.Core.ModelElement.comment*,
Foundation.Core.ModelElement.elementResidence*,
Foundation.Core.ModelElement.templateParameter2*,
Foundation.Core.ModelElement.stereotype?,
Foundation.Core.ModelElement.behavior*,
Foundation.Core.ModelElement.classifierRole*,
Foundation.Core.ModelElement.collaboration*,
Foundation.Core.ModelElement.partition*,
Foundation.Core.ModelElement.elementImport*,
Foundation.Core.AssociationEnd.association?,
Foundation.Core.AssociationEnd.type?,
Foundation.Core.AssociationEnd.specification*,
Foundation.Core.AssociationEnd.linkEnd*,
Foundation.Core.AssociationEnd.associationEndRole*,
Foundation.Core.ModelElement.templateParameter*,
Foundation.Core.ModelElement.taggedValue*,
Foundation.Core.AssociationEnd.qualifier*)?
>
<!ATTLIST Foundation.Core.AssociationEnd
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL CLASS: Interface -->
<!-- _______________________________________________________________ -->
<!ELEMENT Foundation.Core.Interface (Foundation.Core.ModelElement.name?,
Foundation.Core.ModelElement.visibility?,
Foundation.Core.ModelElement.isSpecification?,
Foundation.Core.GeneralizableElement.isRoot?,
Foundation.Core.GeneralizableElement.isLeaf?,
Foundation.Core.GeneralizableElement.isAbstract?,
XMI.extension*,
Foundation.Core.ModelElement.namespace?,
Foundation.Core.ModelElement.clientDependency*,
Foundation.Core.ModelElement.constraint*,
Foundation.Core.ModelElement.supplierDependency*,
Foundation.Core.ModelElement.presentation*,
Foundation.Core.ModelElement.targetFlow*,
Foundation.Core.ModelElement.sourceFlow*,
Foundation.Core.ModelElement.templateParameter3*,
Foundation.Core.ModelElement.binding*,
Foundation.Core.ModelElement.comment*,
Foundation.Core.ModelElement.elementResidence*,
Foundation.Core.ModelElement.templateParameter2*,
Foundation.Core.ModelElement.stereotype?,
Foundation.Core.ModelElement.behavior*,
Foundation.Core.ModelElement.classifierRole*,
Foundation.Core.ModelElement.collaboration*,
Foundation.Core.ModelElement.partition*,
Foundation.Core.ModelElement.elementImport*,
Foundation.Core.GeneralizableElement.generalization*,
Foundation.Core.GeneralizableElement.specialization*,
Foundation.Core.Classifier.participant*,
Foundation.Core.Classifier.powertypeRange*,
Foundation.Core.Classifier.instance*,
Foundation.Core.Classifier.createAction*,
Foundation.Core.Classifier.classifierRole*,
Foundation.Core.Classifier.collaboration*,
Foundation.Core.Classifier.classifierInState*,
Foundation.Core.Classifier.objectFlowState*,
Foundation.Core.ModelElement.templateParameter*,
Foundation.Core.ModelElement.taggedValue*,
Foundation.Core.Namespace.ownedElement*,
Foundation.Core.Classifier.feature*)?
>
<!ATTLIST Foundation.Core.Interface
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL CLASS: Constraint -->
<!-- _______________________________________________________________ -->
<!ELEMENT Foundation.Core.Constraint.body
(Foundation.Data_Types.BooleanExpression) >
<!ELEMENT Foundation.Core.Constraint.constrainedElement (Foundation.Core.ModelElement |
Foundation.Core.Comment |
Foundation.Core.Relationship |
Behavioral_Elements.Use_Cases.Extend |
Behavioral_Elements.Use_Cases.Include |
Foundation.Core.Generalization |
Foundation.Core.Flow |
Foundation.Core.Association |
Foundation.Core.AssociationClass |
Behavioral_Elements.Collaborations.AssociationRole |
Foundation.Core.Dependency |
Foundation.Core.Abstraction |
Foundation.Core.Usage |
Foundation.Core.Binding |
Foundation.Core.Permission |
Foundation.Extension_Mechanisms.TaggedValue |
Behavioral_Elements.Common_Behavior.Instance |
Behavioral_Elements.Common_Behavior.Object |
Behavioral_Elements.Common_Behavior.LinkObject |
Behavioral_Elements.Common_Behavior.DataValue |
Behavioral_Elements.Common_Behavior.ComponentInstance |
Behavioral_Elements.Common_Behavior.NodeInstance |
Behavioral_Elements.Use_Cases.UseCaseInstance |
Behavioral_Elements.Common_Behavior.Action |
Behavioral_Elements.Common_Behavior.CallAction |
Behavioral_Elements.Common_Behavior.SendAction |
Behavioral_Elements.Common_Behavior.ActionSequence |
Behavioral_Elements.Common_Behavior.ReturnAction |
Behavioral_Elements.Common_Behavior.TerminateAction |
Behavioral_Elements.Common_Behavior.DestroyAction |
Behavioral_Elements.Common_Behavior.CreateAction |
Behavioral_Elements.Common_Behavior.UninterpretedAction |
Behavioral_Elements.Common_Behavior.AttributeLink |
Behavioral_Elements.Common_Behavior.Argument |
Behavioral_Elements.Common_Behavior.Link |
Behavioral_Elements.Common_Behavior.LinkEnd |
Behavioral_Elements.Common_Behavior.Stimulus |
Behavioral_Elements.Use_Cases.ExtensionPoint |
Behavioral_Elements.State_Machines.StateMachine |
Behavioral_Elements.Activity_Graphs.ActivityGraph |
Behavioral_Elements.State_Machines.Event |
Behavioral_Elements.State_Machines.TimeEvent |
Behavioral_Elements.State_Machines.CallEvent |
Behavioral_Elements.State_Machines.SignalEvent |
Behavioral_Elements.State_Machines.ChangeEvent |
Behavioral_Elements.State_Machines.Transition |
Behavioral_Elements.State_Machines.StateVertex |
Behavioral_Elements.State_Machines.Pseudostate |
Behavioral_Elements.State_Machines.SynchState |
Behavioral_Elements.State_Machines.StubState |
Behavioral_Elements.State_Machines.State |
Behavioral_Elements.State_Machines.CompositeState |
Behavioral_Elements.State_Machines.SubmachineState |
Behavioral_Elements.Activity_Graphs.SubactivityState |
Behavioral_Elements.State_Machines.SimpleState |
Behavioral_Elements.Activity_Graphs.ObjectFlowState |
Behavioral_Elements.Activity_Graphs.ActionState |
Behavioral_Elements.Activity_Graphs.CallState |
Behavioral_Elements.State_Machines.FinalState |
Behavioral_Elements.State_Machines.Guard |
Behavioral_Elements.Collaborations.Message |
Behavioral_Elements.Collaborations.Interaction |
Behavioral_Elements.Activity_Graphs.Partition |
Foundation.Core.Feature |
Foundation.Core.BehavioralFeature |
Behavioral_Elements.Common_Behavior.Reception |
Foundation.Core.Operation |
Foundation.Core.Method |
Foundation.Core.StructuralFeature |
Foundation.Core.Attribute |
Foundation.Core.GeneralizableElement |
Foundation.Extension_Mechanisms.Stereotype |
Behavioral_Elements.Collaborations.Collaboration |
Model_Management.Package |
Model_Management.Subsystem |
Model_Management.Model |
Foundation.Core.Classifier |
Foundation.Core.Class |
Foundation.Core.DataType |
Foundation.Core.Interface |
Foundation.Core.Component |
Foundation.Core.Node |
Behavioral_Elements.Common_Behavior.Signal |
Behavioral_Elements.Common_Behavior.Exception |
Behavioral_Elements.Use_Cases.UseCase |
Behavioral_Elements.Use_Cases.Actor |
Behavioral_Elements.Collaborations.ClassifierRole |
Behavioral_Elements.Activity_Graphs.ClassifierInState |
Foundation.Core.AssociationEnd |
Behavioral_Elements.Collaborations.AssociationEndRole |
Foundation.Core.Namespace |
Foundation.Core.Parameter |
Foundation.Core.Constraint)*
>
<!ELEMENT Foundation.Core.Constraint.constrainedElement2
(Foundation.Extension_Mechanisms.Stereotype)? >
<!ELEMENT Foundation.Core.Constraint (Foundation.Core.ModelElement.name?,
Foundation.Core.ModelElement.visibility?,
Foundation.Core.ModelElement.isSpecification?,
Foundation.Core.Constraint.body?,
XMI.extension*,
Foundation.Core.ModelElement.namespace?,
Foundation.Core.ModelElement.clientDependency*,
Foundation.Core.ModelElement.constraint*,
Foundation.Core.ModelElement.supplierDependency*,
Foundation.Core.ModelElement.presentation*,
Foundation.Core.ModelElement.targetFlow*,
Foundation.Core.ModelElement.sourceFlow*,
Foundation.Core.ModelElement.templateParameter3*,
Foundation.Core.ModelElement.binding*,
Foundation.Core.ModelElement.comment*,
Foundation.Core.ModelElement.elementResidence*,
Foundation.Core.ModelElement.templateParameter2*,
Foundation.Core.ModelElement.stereotype?,
Foundation.Core.ModelElement.behavior*,
Foundation.Core.ModelElement.classifierRole*,
Foundation.Core.ModelElement.collaboration*,
Foundation.Core.ModelElement.partition*,
Foundation.Core.ModelElement.elementImport*,
Foundation.Core.Constraint.constrainedElement*,
Foundation.Core.Constraint.constrainedElement2?,
Foundation.Core.ModelElement.templateParameter*,
Foundation.Core.ModelElement.taggedValue*)?
>
<!ATTLIST Foundation.Core.Constraint
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL CLASS: Association -->
<!-- _______________________________________________________________ -->
<!ELEMENT Foundation.Core.Association.link (Behavioral_Elements.Common_Behavior.Link |
Behavioral_Elements.Common_Behavior.LinkObject)*
>
<!ELEMENT Foundation.Core.Association.associationRole
(Behavioral_Elements.Collaborations.AssociationRole)* >
<!ELEMENT Foundation.Core.Association (Foundation.Core.ModelElement.name?,
Foundation.Core.ModelElement.visibility?,
Foundation.Core.ModelElement.isSpecification?,
Foundation.Core.GeneralizableElement.isRoot?,
Foundation.Core.GeneralizableElement.isLeaf?,
Foundation.Core.GeneralizableElement.isAbstract?,
XMI.extension*,
Foundation.Core.ModelElement.namespace?,
Foundation.Core.ModelElement.clientDependency*,
Foundation.Core.ModelElement.constraint*,
Foundation.Core.ModelElement.supplierDependency*,
Foundation.Core.ModelElement.presentation*,
Foundation.Core.ModelElement.targetFlow*,
Foundation.Core.ModelElement.sourceFlow*,
Foundation.Core.ModelElement.templateParameter3*,
Foundation.Core.ModelElement.binding*,
Foundation.Core.ModelElement.comment*,
Foundation.Core.ModelElement.elementResidence*,
Foundation.Core.ModelElement.templateParameter2*,
Foundation.Core.ModelElement.stereotype?,
Foundation.Core.ModelElement.behavior*,
Foundation.Core.ModelElement.classifierRole*,
Foundation.Core.ModelElement.collaboration*,
Foundation.Core.ModelElement.partition*,
Foundation.Core.ModelElement.elementImport*,
Foundation.Core.GeneralizableElement.generalization*,
Foundation.Core.GeneralizableElement.specialization*,
Foundation.Core.Association.link*,
Foundation.Core.Association.associationRole*,
Foundation.Core.ModelElement.templateParameter*,
Foundation.Core.ModelElement.taggedValue*,
Foundation.Core.Association.connection*)?
>
<!ATTLIST Foundation.Core.Association
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL CLASS: Element -->
<!-- _______________________________________________________________ -->
<!ELEMENT Foundation.Core.Element (XMI.extension*)? >
<!ATTLIST Foundation.Core.Element
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL CLASS: GeneralizableElement -->
<!-- _______________________________________________________________ -->
<!ELEMENT Foundation.Core.GeneralizableElement.isRoot EMPTY >
<!ATTLIST Foundation.Core.GeneralizableElement.isRoot
xmi.value ( true | false ) #REQUIRED
>
<!ELEMENT Foundation.Core.GeneralizableElement.isLeaf EMPTY >
<!ATTLIST Foundation.Core.GeneralizableElement.isLeaf
xmi.value ( true | false ) #REQUIRED
>
<!ELEMENT Foundation.Core.GeneralizableElement.isAbstract EMPTY >
<!ATTLIST Foundation.Core.GeneralizableElement.isAbstract
xmi.value ( true | false ) #REQUIRED
>
<!ELEMENT Foundation.Core.GeneralizableElement.generalization
(Foundation.Core.Generalization)* >
<!ELEMENT Foundation.Core.GeneralizableElement.specialization
(Foundation.Core.Generalization)* >
<!ELEMENT Foundation.Core.GeneralizableElement (Foundation.Core.ModelElement.name?,
Foundation.Core.ModelElement.visibility?,
Foundation.Core.ModelElement.isSpecification?,
Foundation.Core.GeneralizableElement.isRoot?,
Foundation.Core.GeneralizableElement.isLeaf?,
Foundation.Core.GeneralizableElement.isAbstract?,
XMI.extension*,
Foundation.Core.ModelElement.namespace?,
Foundation.Core.ModelElement.clientDependency*,
Foundation.Core.ModelElement.constraint*,
Foundation.Core.ModelElement.supplierDependency*,
Foundation.Core.ModelElement.presentation*,
Foundation.Core.ModelElement.targetFlow*,
Foundation.Core.ModelElement.sourceFlow*,
Foundation.Core.ModelElement.templateParameter3*,
Foundation.Core.ModelElement.binding*,
Foundation.Core.ModelElement.comment*,
Foundation.Core.ModelElement.elementResidence*,
Foundation.Core.ModelElement.templateParameter2*,
Foundation.Core.ModelElement.stereotype?,
Foundation.Core.ModelElement.behavior*,
Foundation.Core.ModelElement.classifierRole*,
Foundation.Core.ModelElement.collaboration*,
Foundation.Core.ModelElement.partition*,
Foundation.Core.ModelElement.elementImport*,
Foundation.Core.GeneralizableElement.generalization*,
Foundation.Core.GeneralizableElement.specialization*,
Foundation.Core.ModelElement.templateParameter*,
Foundation.Core.ModelElement.taggedValue*)?
>
<!ATTLIST Foundation.Core.GeneralizableElement
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL CLASS: Attribute -->
<!-- _______________________________________________________________ -->
<!ELEMENT Foundation.Core.Attribute.initialValue (Foundation.Data_Types.Expression |
Foundation.Data_Types.BooleanExpression |
Foundation.Data_Types.ActionExpression |
Foundation.Data_Types.IterationExpression |
Foundation.Data_Types.TypeExpression |
Foundation.Data_Types.ArgListsExpression |
Foundation.Data_Types.MappingExpression |
Foundation.Data_Types.ProcedureExpression |
Foundation.Data_Types.TimeExpression |
Foundation.Data_Types.ObjectSetExpression)
>
<!ELEMENT Foundation.Core.Attribute.associationEnd (Foundation.Core.AssociationEnd |
Behavioral_Elements.Collaborations.AssociationEndRole)?
>
<!ELEMENT Foundation.Core.Attribute.attributeLink
(Behavioral_Elements.Common_Behavior.AttributeLink)* >
<!ELEMENT Foundation.Core.Attribute.associationEndRole
(Behavioral_Elements.Collaborations.AssociationEndRole)* >
<!ELEMENT Foundation.Core.Attribute (Foundation.Core.ModelElement.name?,
Foundation.Core.ModelElement.visibility?,
Foundation.Core.ModelElement.isSpecification?,
Foundation.Core.Feature.ownerScope?,
Foundation.Core.StructuralFeature.multiplicity?,
Foundation.Core.StructuralFeature.changeability?,
Foundation.Core.StructuralFeature.targetScope?,
Foundation.Core.Attribute.initialValue?,
XMI.extension*,
Foundation.Core.ModelElement.namespace?,
Foundation.Core.ModelElement.clientDependency*,
Foundation.Core.ModelElement.constraint*,
Foundation.Core.ModelElement.supplierDependency*,
Foundation.Core.ModelElement.presentation*,
Foundation.Core.ModelElement.targetFlow*,
Foundation.Core.ModelElement.sourceFlow*,
Foundation.Core.ModelElement.templateParameter3*,
Foundation.Core.ModelElement.binding*,
Foundation.Core.ModelElement.comment*,
Foundation.Core.ModelElement.elementResidence*,
Foundation.Core.ModelElement.templateParameter2*,
Foundation.Core.ModelElement.stereotype?,
Foundation.Core.ModelElement.behavior*,
Foundation.Core.ModelElement.classifierRole*,
Foundation.Core.ModelElement.collaboration*,
Foundation.Core.ModelElement.partition*,
Foundation.Core.ModelElement.elementImport*,
Foundation.Core.Feature.owner?,
Foundation.Core.Feature.classifierRole*,
Foundation.Core.StructuralFeature.type?,
Foundation.Core.Attribute.associationEnd?,
Foundation.Core.Attribute.attributeLink*,
Foundation.Core.Attribute.associationEndRole*,
Foundation.Core.ModelElement.templateParameter*,
Foundation.Core.ModelElement.taggedValue*)?
>
<!ATTLIST Foundation.Core.Attribute
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL CLASS: Operation -->
<!-- _______________________________________________________________ -->
<!ELEMENT Foundation.Core.Operation.concurrency EMPTY >
<!ATTLIST Foundation.Core.Operation.concurrency
xmi.value ( sequential | guarded | concurrent ) #REQUIRED
>
<!ELEMENT Foundation.Core.Operation.isRoot EMPTY >
<!ATTLIST Foundation.Core.Operation.isRoot
xmi.value ( true | false ) #REQUIRED
>
<!ELEMENT Foundation.Core.Operation.isLeaf EMPTY >
<!ATTLIST Foundation.Core.Operation.isLeaf
xmi.value ( true | false ) #REQUIRED
>
<!ELEMENT Foundation.Core.Operation.isAbstract EMPTY >
<!ATTLIST Foundation.Core.Operation.isAbstract
xmi.value ( true | false ) #REQUIRED
>
<!ELEMENT Foundation.Core.Operation.specification (#PCDATA |
XMI.reference)* >
<!ELEMENT Foundation.Core.Operation.method (Foundation.Core.Method)* >
<!ELEMENT Foundation.Core.Operation.callAction
(Behavioral_Elements.Common_Behavior.CallAction)* >
<!ELEMENT Foundation.Core.Operation.occurrence
(Behavioral_Elements.State_Machines.CallEvent)* >
<!ELEMENT Foundation.Core.Operation.collaboration
(Behavioral_Elements.Collaborations.Collaboration)* >
<!ELEMENT Foundation.Core.Operation (Foundation.Core.ModelElement.name?,
Foundation.Core.ModelElement.visibility?,
Foundation.Core.ModelElement.isSpecification?,
Foundation.Core.Feature.ownerScope?,
Foundation.Core.BehavioralFeature.isQuery?,
Foundation.Core.Operation.concurrency?,
Foundation.Core.Operation.isRoot?,
Foundation.Core.Operation.isLeaf?,
Foundation.Core.Operation.isAbstract?,
Foundation.Core.Operation.specification?,
XMI.extension*,
Foundation.Core.ModelElement.namespace?,
Foundation.Core.ModelElement.clientDependency*,
Foundation.Core.ModelElement.constraint*,
Foundation.Core.ModelElement.supplierDependency*,
Foundation.Core.ModelElement.presentation*,
Foundation.Core.ModelElement.targetFlow*,
Foundation.Core.ModelElement.sourceFlow*,
Foundation.Core.ModelElement.templateParameter3*,
Foundation.Core.ModelElement.binding*,
Foundation.Core.ModelElement.comment*,
Foundation.Core.ModelElement.elementResidence*,
Foundation.Core.ModelElement.templateParameter2*,
Foundation.Core.ModelElement.stereotype?,
Foundation.Core.ModelElement.behavior*,
Foundation.Core.ModelElement.classifierRole*,
Foundation.Core.ModelElement.collaboration*,
Foundation.Core.ModelElement.partition*,
Foundation.Core.ModelElement.elementImport*,
Foundation.Core.Feature.owner?,
Foundation.Core.Feature.classifierRole*,
Foundation.Core.BehavioralFeature.raisedSignal*,
Foundation.Core.Operation.method*,
Foundation.Core.Operation.callAction*,
Foundation.Core.Operation.occurrence*,
Foundation.Core.Operation.collaboration*,
Foundation.Core.ModelElement.templateParameter*,
Foundation.Core.ModelElement.taggedValue*,
Foundation.Core.BehavioralFeature.parameter*)?
>
<!ATTLIST Foundation.Core.Operation
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL CLASS: Parameter -->
<!-- _______________________________________________________________ -->
<!ELEMENT Foundation.Core.Parameter.defaultValue (Foundation.Data_Types.Expression |
Foundation.Data_Types.BooleanExpression |
Foundation.Data_Types.ActionExpression |
Foundation.Data_Types.IterationExpression |
Foundation.Data_Types.TypeExpression |
Foundation.Data_Types.ArgListsExpression |
Foundation.Data_Types.MappingExpression |
Foundation.Data_Types.ProcedureExpression |
Foundation.Data_Types.TimeExpression |
Foundation.Data_Types.ObjectSetExpression)
>
<!ELEMENT Foundation.Core.Parameter.kind EMPTY >
<!ATTLIST Foundation.Core.Parameter.kind
xmi.value ( in | inout | out | return ) #REQUIRED
>
<!ELEMENT Foundation.Core.Parameter.behavioralFeature (Foundation.Core.BehavioralFeature |
Behavioral_Elements.Common_Behavior.Reception |
Foundation.Core.Operation |
Foundation.Core.Method)?
>
<!ELEMENT Foundation.Core.Parameter.type (Foundation.Core.Classifier |
Foundation.Core.Class |
Foundation.Core.AssociationClass |
Foundation.Core.DataType |
Foundation.Core.Interface |
Foundation.Core.Component |
Foundation.Core.Node |
Behavioral_Elements.Common_Behavior.Signal |
Behavioral_Elements.Common_Behavior.Exception |
Behavioral_Elements.Use_Cases.UseCase |
Behavioral_Elements.Use_Cases.Actor |
Behavioral_Elements.Collaborations.ClassifierRole |
Behavioral_Elements.Activity_Graphs.ClassifierInState |
Model_Management.Subsystem)? >
<!ELEMENT Foundation.Core.Parameter.event (Behavioral_Elements.State_Machines.Event |
Behavioral_Elements.State_Machines.TimeEvent |
Behavioral_Elements.State_Machines.CallEvent |
Behavioral_Elements.State_Machines.SignalEvent |
Behavioral_Elements.State_Machines.ChangeEvent)?
>
<!ELEMENT Foundation.Core.Parameter.state
(Behavioral_Elements.Activity_Graphs.ObjectFlowState)* >
<!ELEMENT Foundation.Core.Parameter (Foundation.Core.ModelElement.name?,
Foundation.Core.ModelElement.visibility?,
Foundation.Core.ModelElement.isSpecification?,
Foundation.Core.Parameter.defaultValue?,
Foundation.Core.Parameter.kind?,
XMI.extension*,
Foundation.Core.ModelElement.namespace?,
Foundation.Core.ModelElement.clientDependency*,
Foundation.Core.ModelElement.constraint*,
Foundation.Core.ModelElement.supplierDependency*,
Foundation.Core.ModelElement.presentation*,
Foundation.Core.ModelElement.targetFlow*,
Foundation.Core.ModelElement.sourceFlow*,
Foundation.Core.ModelElement.templateParameter3*,
Foundation.Core.ModelElement.binding*,
Foundation.Core.ModelElement.comment*,
Foundation.Core.ModelElement.elementResidence*,
Foundation.Core.ModelElement.templateParameter2*,
Foundation.Core.ModelElement.stereotype?,
Foundation.Core.ModelElement.behavior*,
Foundation.Core.ModelElement.classifierRole*,
Foundation.Core.ModelElement.collaboration*,
Foundation.Core.ModelElement.partition*,
Foundation.Core.ModelElement.elementImport*,
Foundation.Core.Parameter.behavioralFeature?,
Foundation.Core.Parameter.type?,
Foundation.Core.Parameter.event?,
Foundation.Core.Parameter.state*,
Foundation.Core.ModelElement.templateParameter*,
Foundation.Core.ModelElement.taggedValue*)?
>
<!ATTLIST Foundation.Core.Parameter
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL CLASS: Method -->
<!-- _______________________________________________________________ -->
<!ELEMENT Foundation.Core.Method.body
(Foundation.Data_Types.ProcedureExpression) >
<!ELEMENT Foundation.Core.Method.specification
(Foundation.Core.Operation)? >
<!ELEMENT Foundation.Core.Method (Foundation.Core.ModelElement.name?,
Foundation.Core.ModelElement.visibility?,
Foundation.Core.ModelElement.isSpecification?,
Foundation.Core.Feature.ownerScope?,
Foundation.Core.BehavioralFeature.isQuery?,
Foundation.Core.Method.body?,
XMI.extension*,
Foundation.Core.ModelElement.namespace?,
Foundation.Core.ModelElement.clientDependency*,
Foundation.Core.ModelElement.constraint*,
Foundation.Core.ModelElement.supplierDependency*,
Foundation.Core.ModelElement.presentation*,
Foundation.Core.ModelElement.targetFlow*,
Foundation.Core.ModelElement.sourceFlow*,
Foundation.Core.ModelElement.templateParameter3*,
Foundation.Core.ModelElement.binding*,
Foundation.Core.ModelElement.comment*,
Foundation.Core.ModelElement.elementResidence*,
Foundation.Core.ModelElement.templateParameter2*,
Foundation.Core.ModelElement.stereotype?,
Foundation.Core.ModelElement.behavior*,
Foundation.Core.ModelElement.classifierRole*,
Foundation.Core.ModelElement.collaboration*,
Foundation.Core.ModelElement.partition*,
Foundation.Core.ModelElement.elementImport*,
Foundation.Core.Feature.owner?,
Foundation.Core.Feature.classifierRole*,
Foundation.Core.BehavioralFeature.raisedSignal*,
Foundation.Core.Method.specification?,
Foundation.Core.ModelElement.templateParameter*,
Foundation.Core.ModelElement.taggedValue*,
Foundation.Core.BehavioralFeature.parameter*)?
>
<!ATTLIST Foundation.Core.Method
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL CLASS: Generalization -->
<!-- _______________________________________________________________ -->
<!ELEMENT Foundation.Core.Generalization.discriminator (#PCDATA |
XMI.reference)* >
<!ELEMENT Foundation.Core.Generalization.child (Foundation.Core.GeneralizableElement |
Foundation.Extension_Mechanisms.Stereotype |
Behavioral_Elements.Collaborations.Collaboration |
Model_Management.Package |
Model_Management.Subsystem |
Model_Management.Model |
Foundation.Core.Classifier |
Foundation.Core.Class |
Foundation.Core.AssociationClass |
Foundation.Core.DataType |
Foundation.Core.Interface |
Foundation.Core.Component |
Foundation.Core.Node |
Behavioral_Elements.Common_Behavior.Signal |
Behavioral_Elements.Common_Behavior.Exception |
Behavioral_Elements.Use_Cases.UseCase |
Behavioral_Elements.Use_Cases.Actor |
Behavioral_Elements.Collaborations.ClassifierRole |
Behavioral_Elements.Activity_Graphs.ClassifierInState |
Foundation.Core.Association |
Behavioral_Elements.Collaborations.AssociationRole)?
>
<!ELEMENT Foundation.Core.Generalization.parent (Foundation.Core.GeneralizableElement |
Foundation.Extension_Mechanisms.Stereotype |
Behavioral_Elements.Collaborations.Collaboration |
Model_Management.Package |
Model_Management.Subsystem |
Model_Management.Model |
Foundation.Core.Classifier |
Foundation.Core.Class |
Foundation.Core.AssociationClass |
Foundation.Core.DataType |
Foundation.Core.Interface |
Foundation.Core.Component |
Foundation.Core.Node |
Behavioral_Elements.Common_Behavior.Signal |
Behavioral_Elements.Common_Behavior.Exception |
Behavioral_Elements.Use_Cases.UseCase |
Behavioral_Elements.Use_Cases.Actor |
Behavioral_Elements.Collaborations.ClassifierRole |
Behavioral_Elements.Activity_Graphs.ClassifierInState |
Foundation.Core.Association |
Behavioral_Elements.Collaborations.AssociationRole)?
>
<!ELEMENT Foundation.Core.Generalization.powertype (Foundation.Core.Classifier |
Foundation.Core.Class |
Foundation.Core.AssociationClass |
Foundation.Core.DataType |
Foundation.Core.Interface |
Foundation.Core.Component |
Foundation.Core.Node |
Behavioral_Elements.Common_Behavior.Signal |
Behavioral_Elements.Common_Behavior.Exception |
Behavioral_Elements.Use_Cases.UseCase |
Behavioral_Elements.Use_Cases.Actor |
Behavioral_Elements.Collaborations.ClassifierRole |
Behavioral_Elements.Activity_Graphs.ClassifierInState |
Model_Management.Subsystem)?
>
<!ELEMENT Foundation.Core.Generalization (Foundation.Core.ModelElement.name?,
Foundation.Core.ModelElement.visibility?,
Foundation.Core.ModelElement.isSpecification?,
Foundation.Core.Generalization.discriminator?,
XMI.extension*,
Foundation.Core.ModelElement.namespace?,
Foundation.Core.ModelElement.clientDependency*,
Foundation.Core.ModelElement.constraint*,
Foundation.Core.ModelElement.supplierDependency*,
Foundation.Core.ModelElement.presentation*,
Foundation.Core.ModelElement.targetFlow*,
Foundation.Core.ModelElement.sourceFlow*,
Foundation.Core.ModelElement.templateParameter3*,
Foundation.Core.ModelElement.binding*,
Foundation.Core.ModelElement.comment*,
Foundation.Core.ModelElement.elementResidence*,
Foundation.Core.ModelElement.templateParameter2*,
Foundation.Core.ModelElement.stereotype?,
Foundation.Core.ModelElement.behavior*,
Foundation.Core.ModelElement.classifierRole*,
Foundation.Core.ModelElement.collaboration*,
Foundation.Core.ModelElement.partition*,
Foundation.Core.ModelElement.elementImport*,
Foundation.Core.Generalization.child?,
Foundation.Core.Generalization.parent?,
Foundation.Core.Generalization.powertype?,
Foundation.Core.ModelElement.templateParameter*,
Foundation.Core.ModelElement.taggedValue*)?
>
<!ATTLIST Foundation.Core.Generalization
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL CLASS: AssociationClass -->
<!-- _______________________________________________________________ -->
<!ELEMENT Foundation.Core.AssociationClass (Foundation.Core.ModelElement.name?,
Foundation.Core.ModelElement.visibility?,
Foundation.Core.ModelElement.isSpecification?,
Foundation.Core.GeneralizableElement.isRoot?,
Foundation.Core.GeneralizableElement.isLeaf?,
Foundation.Core.GeneralizableElement.isAbstract?,
Foundation.Core.Class.isActive?,
XMI.extension*,
Foundation.Core.ModelElement.namespace?,
Foundation.Core.ModelElement.clientDependency*,
Foundation.Core.ModelElement.constraint*,
Foundation.Core.ModelElement.supplierDependency*,
Foundation.Core.ModelElement.presentation*,
Foundation.Core.ModelElement.targetFlow*,
Foundation.Core.ModelElement.sourceFlow*,
Foundation.Core.ModelElement.templateParameter3*,
Foundation.Core.ModelElement.binding*,
Foundation.Core.ModelElement.comment*,
Foundation.Core.ModelElement.elementResidence*,
Foundation.Core.ModelElement.templateParameter2*,
Foundation.Core.ModelElement.stereotype?,
Foundation.Core.ModelElement.behavior*,
Foundation.Core.ModelElement.classifierRole*,
Foundation.Core.ModelElement.collaboration*,
Foundation.Core.ModelElement.partition*,
Foundation.Core.ModelElement.elementImport*,
Foundation.Core.GeneralizableElement.generalization*,
Foundation.Core.GeneralizableElement.specialization*,
Foundation.Core.Association.link*,
Foundation.Core.Association.associationRole*,
Foundation.Core.Classifier.participant*,
Foundation.Core.Classifier.powertypeRange*,
Foundation.Core.Classifier.instance*,
Foundation.Core.Classifier.createAction*,
Foundation.Core.Classifier.classifierRole*,
Foundation.Core.Classifier.collaboration*,
Foundation.Core.Classifier.classifierInState*,
Foundation.Core.Classifier.objectFlowState*,
Foundation.Core.ModelElement.templateParameter*,
Foundation.Core.ModelElement.taggedValue*,
Foundation.Core.Association.connection*,
Foundation.Core.Namespace.ownedElement*,
Foundation.Core.Classifier.feature*)?
>
<!ATTLIST Foundation.Core.AssociationClass
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL CLASS: Feature -->
<!-- _______________________________________________________________ -->
<!ELEMENT Foundation.Core.Feature.ownerScope EMPTY >
<!ATTLIST Foundation.Core.Feature.ownerScope
xmi.value ( classifier | instance ) #REQUIRED
>
<!ELEMENT Foundation.Core.Feature.owner (Foundation.Core.Classifier |
Foundation.Core.Class |
Foundation.Core.AssociationClass |
Foundation.Core.DataType |
Foundation.Core.Interface |
Foundation.Core.Component |
Foundation.Core.Node |
Behavioral_Elements.Common_Behavior.Signal |
Behavioral_Elements.Common_Behavior.Exception |
Behavioral_Elements.Use_Cases.UseCase |
Behavioral_Elements.Use_Cases.Actor |
Behavioral_Elements.Collaborations.ClassifierRole |
Behavioral_Elements.Activity_Graphs.ClassifierInState |
Model_Management.Subsystem)? >
<!ELEMENT Foundation.Core.Feature.classifierRole
(Behavioral_Elements.Collaborations.ClassifierRole)* >
<!ELEMENT Foundation.Core.Feature (Foundation.Core.ModelElement.name?,
Foundation.Core.ModelElement.visibility?,
Foundation.Core.ModelElement.isSpecification?,
Foundation.Core.Feature.ownerScope?,
XMI.extension*,
Foundation.Core.ModelElement.namespace?,
Foundation.Core.ModelElement.clientDependency*,
Foundation.Core.ModelElement.constraint*,
Foundation.Core.ModelElement.supplierDependency*,
Foundation.Core.ModelElement.presentation*,
Foundation.Core.ModelElement.targetFlow*,
Foundation.Core.ModelElement.sourceFlow*,
Foundation.Core.ModelElement.templateParameter3*,
Foundation.Core.ModelElement.binding*,
Foundation.Core.ModelElement.comment*,
Foundation.Core.ModelElement.elementResidence*,
Foundation.Core.ModelElement.templateParameter2*,
Foundation.Core.ModelElement.stereotype?,
Foundation.Core.ModelElement.behavior*,
Foundation.Core.ModelElement.classifierRole*,
Foundation.Core.ModelElement.collaboration*,
Foundation.Core.ModelElement.partition*,
Foundation.Core.ModelElement.elementImport*,
Foundation.Core.Feature.owner?,
Foundation.Core.Feature.classifierRole*,
Foundation.Core.ModelElement.templateParameter*,
Foundation.Core.ModelElement.taggedValue*)?
>
<!ATTLIST Foundation.Core.Feature
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL CLASS: BehavioralFeature -->
<!-- _______________________________________________________________ -->
<!ELEMENT Foundation.Core.BehavioralFeature.isQuery EMPTY >
<!ATTLIST Foundation.Core.BehavioralFeature.isQuery
xmi.value ( true | false ) #REQUIRED
>
<!ELEMENT Foundation.Core.BehavioralFeature.raisedSignal (Behavioral_Elements.Common_Behavior.Signal |
Behavioral_Elements.Common_Behavior.Exception)*
>
<!ELEMENT Foundation.Core.BehavioralFeature (Foundation.Core.ModelElement.name?,
Foundation.Core.ModelElement.visibility?,
Foundation.Core.ModelElement.isSpecification?,
Foundation.Core.Feature.ownerScope?,
Foundation.Core.BehavioralFeature.isQuery?,
XMI.extension*,
Foundation.Core.ModelElement.namespace?,
Foundation.Core.ModelElement.clientDependency*,
Foundation.Core.ModelElement.constraint*,
Foundation.Core.ModelElement.supplierDependency*,
Foundation.Core.ModelElement.presentation*,
Foundation.Core.ModelElement.targetFlow*,
Foundation.Core.ModelElement.sourceFlow*,
Foundation.Core.ModelElement.templateParameter3*,
Foundation.Core.ModelElement.binding*,
Foundation.Core.ModelElement.comment*,
Foundation.Core.ModelElement.elementResidence*,
Foundation.Core.ModelElement.templateParameter2*,
Foundation.Core.ModelElement.stereotype?,
Foundation.Core.ModelElement.behavior*,
Foundation.Core.ModelElement.classifierRole*,
Foundation.Core.ModelElement.collaboration*,
Foundation.Core.ModelElement.partition*,
Foundation.Core.ModelElement.elementImport*,
Foundation.Core.Feature.owner?,
Foundation.Core.Feature.classifierRole*,
Foundation.Core.BehavioralFeature.raisedSignal*,
Foundation.Core.ModelElement.templateParameter*,
Foundation.Core.ModelElement.taggedValue*,
Foundation.Core.BehavioralFeature.parameter*)?
>
<!ATTLIST Foundation.Core.BehavioralFeature
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL CLASS: ModelElement -->
<!-- _______________________________________________________________ -->
<!ELEMENT Foundation.Core.ModelElement.name (#PCDATA | XMI.reference)* >
<!ELEMENT Foundation.Core.ModelElement.visibility EMPTY >
<!ATTLIST Foundation.Core.ModelElement.visibility
xmi.value ( public | private | protected ) #REQUIRED
>
<!ELEMENT Foundation.Core.ModelElement.isSpecification EMPTY >
<!ATTLIST Foundation.Core.ModelElement.isSpecification
xmi.value ( true | false ) #REQUIRED
>
<!ELEMENT Foundation.Core.ModelElement.namespace (Foundation.Core.Namespace |
Behavioral_Elements.Collaborations.Collaboration |
Model_Management.Package |
Model_Management.Subsystem |
Model_Management.Model |
Foundation.Core.Classifier |
Foundation.Core.Class |
Foundation.Core.AssociationClass |
Foundation.Core.DataType |
Foundation.Core.Interface |
Foundation.Core.Component |
Foundation.Core.Node |
Behavioral_Elements.Common_Behavior.Signal |
Behavioral_Elements.Common_Behavior.Exception |
Behavioral_Elements.Use_Cases.UseCase |
Behavioral_Elements.Use_Cases.Actor |
Behavioral_Elements.Collaborations.ClassifierRole |
Behavioral_Elements.Activity_Graphs.ClassifierInState)?
>
<!ELEMENT Foundation.Core.ModelElement.clientDependency (Foundation.Core.Dependency |
Foundation.Core.Abstraction |
Foundation.Core.Usage |
Foundation.Core.Binding |
Foundation.Core.Permission)*
>
<!ELEMENT Foundation.Core.ModelElement.constraint
(Foundation.Core.Constraint)* >
<!ELEMENT Foundation.Core.ModelElement.supplierDependency (Foundation.Core.Dependency |
Foundation.Core.Abstraction |
Foundation.Core.Usage |
Foundation.Core.Binding |
Foundation.Core.Permission)*
>
<!ELEMENT Foundation.Core.ModelElement.presentation
(Foundation.Core.PresentationElement)* >
<!ELEMENT Foundation.Core.ModelElement.targetFlow
(Foundation.Core.Flow)* >
<!ELEMENT Foundation.Core.ModelElement.sourceFlow
(Foundation.Core.Flow)* >
<!ELEMENT Foundation.Core.ModelElement.templateParameter3
(Foundation.Core.TemplateParameter)* >
<!ELEMENT Foundation.Core.ModelElement.binding
(Foundation.Core.Binding)? >
<!ELEMENT Foundation.Core.ModelElement.comment
(Foundation.Core.Comment)* >
<!ELEMENT Foundation.Core.ModelElement.elementResidence
(Foundation.Core.ElementResidence)* >
<!ELEMENT Foundation.Core.ModelElement.templateParameter2
(Foundation.Core.TemplateParameter)* >
<!ELEMENT Foundation.Core.ModelElement.stereotype
(Foundation.Extension_Mechanisms.Stereotype)? >
<!ELEMENT Foundation.Core.ModelElement.behavior (Behavioral_Elements.State_Machines.StateMachine |
Behavioral_Elements.Activity_Graphs.ActivityGraph)*
>
<!ELEMENT Foundation.Core.ModelElement.classifierRole
(Behavioral_Elements.Collaborations.ClassifierRole)* >
<!ELEMENT Foundation.Core.ModelElement.collaboration
(Behavioral_Elements.Collaborations.Collaboration)* >
<!ELEMENT Foundation.Core.ModelElement.partition
(Behavioral_Elements.Activity_Graphs.Partition)* >
<!ELEMENT Foundation.Core.ModelElement.elementImport
(Model_Management.ElementImport)* >
<!ELEMENT Foundation.Core.ModelElement (Foundation.Core.ModelElement.name?,
Foundation.Core.ModelElement.visibility?,
Foundation.Core.ModelElement.isSpecification?,
XMI.extension*,
Foundation.Core.ModelElement.namespace?,
Foundation.Core.ModelElement.clientDependency*,
Foundation.Core.ModelElement.constraint*,
Foundation.Core.ModelElement.supplierDependency*,
Foundation.Core.ModelElement.presentation*,
Foundation.Core.ModelElement.targetFlow*,
Foundation.Core.ModelElement.sourceFlow*,
Foundation.Core.ModelElement.templateParameter3*,
Foundation.Core.ModelElement.binding*,
Foundation.Core.ModelElement.comment*,
Foundation.Core.ModelElement.elementResidence*,
Foundation.Core.ModelElement.templateParameter2*,
Foundation.Core.ModelElement.stereotype?,
Foundation.Core.ModelElement.behavior*,
Foundation.Core.ModelElement.classifierRole*,
Foundation.Core.ModelElement.collaboration*,
Foundation.Core.ModelElement.partition*,
Foundation.Core.ModelElement.elementImport*,
Foundation.Core.ModelElement.templateParameter*,
Foundation.Core.ModelElement.taggedValue*)?
>
<!ATTLIST Foundation.Core.ModelElement
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL CLASS: Dependency -->
<!-- _______________________________________________________________ -->
<!ELEMENT Foundation.Core.Dependency.client (Foundation.Core.ModelElement |
Foundation.Core.Comment |
Foundation.Core.Relationship |
Behavioral_Elements.Use_Cases.Extend |
Behavioral_Elements.Use_Cases.Include |
Foundation.Core.Generalization |
Foundation.Core.Flow |
Foundation.Core.Association |
Foundation.Core.AssociationClass |
Behavioral_Elements.Collaborations.AssociationRole |
Foundation.Core.Dependency |
Foundation.Core.Abstraction |
Foundation.Core.Usage |
Foundation.Core.Binding |
Foundation.Core.Permission |
Foundation.Extension_Mechanisms.TaggedValue |
Behavioral_Elements.Common_Behavior.Instance |
Behavioral_Elements.Common_Behavior.Object |
Behavioral_Elements.Common_Behavior.LinkObject |
Behavioral_Elements.Common_Behavior.DataValue |
Behavioral_Elements.Common_Behavior.ComponentInstance |
Behavioral_Elements.Common_Behavior.NodeInstance |
Behavioral_Elements.Use_Cases.UseCaseInstance |
Behavioral_Elements.Common_Behavior.Action |
Behavioral_Elements.Common_Behavior.CallAction |
Behavioral_Elements.Common_Behavior.SendAction |
Behavioral_Elements.Common_Behavior.ActionSequence |
Behavioral_Elements.Common_Behavior.ReturnAction |
Behavioral_Elements.Common_Behavior.TerminateAction |
Behavioral_Elements.Common_Behavior.DestroyAction |
Behavioral_Elements.Common_Behavior.CreateAction |
Behavioral_Elements.Common_Behavior.UninterpretedAction |
Behavioral_Elements.Common_Behavior.AttributeLink |
Behavioral_Elements.Common_Behavior.Argument |
Behavioral_Elements.Common_Behavior.Link |
Behavioral_Elements.Common_Behavior.LinkEnd |
Behavioral_Elements.Common_Behavior.Stimulus |
Behavioral_Elements.Use_Cases.ExtensionPoint |
Behavioral_Elements.State_Machines.StateMachine |
Behavioral_Elements.Activity_Graphs.ActivityGraph |
Behavioral_Elements.State_Machines.Event |
Behavioral_Elements.State_Machines.TimeEvent |
Behavioral_Elements.State_Machines.CallEvent |
Behavioral_Elements.State_Machines.SignalEvent |
Behavioral_Elements.State_Machines.ChangeEvent |
Behavioral_Elements.State_Machines.Transition |
Behavioral_Elements.State_Machines.StateVertex |
Behavioral_Elements.State_Machines.Pseudostate |
Behavioral_Elements.State_Machines.SynchState |
Behavioral_Elements.State_Machines.StubState |
Behavioral_Elements.State_Machines.State |
Behavioral_Elements.State_Machines.CompositeState |
Behavioral_Elements.State_Machines.SubmachineState |
Behavioral_Elements.Activity_Graphs.SubactivityState |
Behavioral_Elements.State_Machines.SimpleState |
Behavioral_Elements.Activity_Graphs.ObjectFlowState |
Behavioral_Elements.Activity_Graphs.ActionState |
Behavioral_Elements.Activity_Graphs.CallState |
Behavioral_Elements.State_Machines.FinalState |
Behavioral_Elements.State_Machines.Guard |
Behavioral_Elements.Collaborations.Message |
Behavioral_Elements.Collaborations.Interaction |
Behavioral_Elements.Activity_Graphs.Partition |
Foundation.Core.Feature |
Foundation.Core.BehavioralFeature |
Behavioral_Elements.Common_Behavior.Reception |
Foundation.Core.Operation |
Foundation.Core.Method |
Foundation.Core.StructuralFeature |
Foundation.Core.Attribute |
Foundation.Core.GeneralizableElement |
Foundation.Extension_Mechanisms.Stereotype |
Behavioral_Elements.Collaborations.Collaboration |
Model_Management.Package |
Model_Management.Subsystem |
Model_Management.Model |
Foundation.Core.Classifier |
Foundation.Core.Class |
Foundation.Core.DataType |
Foundation.Core.Interface |
Foundation.Core.Component |
Foundation.Core.Node |
Behavioral_Elements.Common_Behavior.Signal |
Behavioral_Elements.Common_Behavior.Exception |
Behavioral_Elements.Use_Cases.UseCase |
Behavioral_Elements.Use_Cases.Actor |
Behavioral_Elements.Collaborations.ClassifierRole |
Behavioral_Elements.Activity_Graphs.ClassifierInState |
Foundation.Core.AssociationEnd |
Behavioral_Elements.Collaborations.AssociationEndRole |
Foundation.Core.Namespace |
Foundation.Core.Parameter |
Foundation.Core.Constraint)*
>
<!ELEMENT Foundation.Core.Dependency.supplier (Foundation.Core.ModelElement |
Foundation.Core.Comment |
Foundation.Core.Relationship |
Behavioral_Elements.Use_Cases.Extend |
Behavioral_Elements.Use_Cases.Include |
Foundation.Core.Generalization |
Foundation.Core.Flow |
Foundation.Core.Association |
Foundation.Core.AssociationClass |
Behavioral_Elements.Collaborations.AssociationRole |
Foundation.Core.Dependency |
Foundation.Core.Abstraction |
Foundation.Core.Usage |
Foundation.Core.Binding |
Foundation.Core.Permission |
Foundation.Extension_Mechanisms.TaggedValue |
Behavioral_Elements.Common_Behavior.Instance |
Behavioral_Elements.Common_Behavior.Object |
Behavioral_Elements.Common_Behavior.LinkObject |
Behavioral_Elements.Common_Behavior.DataValue |
Behavioral_Elements.Common_Behavior.ComponentInstance |
Behavioral_Elements.Common_Behavior.NodeInstance |
Behavioral_Elements.Use_Cases.UseCaseInstance |
Behavioral_Elements.Common_Behavior.Action |
Behavioral_Elements.Common_Behavior.CallAction |
Behavioral_Elements.Common_Behavior.SendAction |
Behavioral_Elements.Common_Behavior.ActionSequence |
Behavioral_Elements.Common_Behavior.ReturnAction |
Behavioral_Elements.Common_Behavior.TerminateAction |
Behavioral_Elements.Common_Behavior.DestroyAction |
Behavioral_Elements.Common_Behavior.CreateAction |
Behavioral_Elements.Common_Behavior.UninterpretedAction |
Behavioral_Elements.Common_Behavior.AttributeLink |
Behavioral_Elements.Common_Behavior.Argument |
Behavioral_Elements.Common_Behavior.Link |
Behavioral_Elements.Common_Behavior.LinkEnd |
Behavioral_Elements.Common_Behavior.Stimulus |
Behavioral_Elements.Use_Cases.ExtensionPoint |
Behavioral_Elements.State_Machines.StateMachine |
Behavioral_Elements.Activity_Graphs.ActivityGraph |
Behavioral_Elements.State_Machines.Event |
Behavioral_Elements.State_Machines.TimeEvent |
Behavioral_Elements.State_Machines.CallEvent |
Behavioral_Elements.State_Machines.SignalEvent |
Behavioral_Elements.State_Machines.ChangeEvent |
Behavioral_Elements.State_Machines.Transition |
Behavioral_Elements.State_Machines.StateVertex |
Behavioral_Elements.State_Machines.Pseudostate |
Behavioral_Elements.State_Machines.SynchState |
Behavioral_Elements.State_Machines.StubState |
Behavioral_Elements.State_Machines.State |
Behavioral_Elements.State_Machines.CompositeState |
Behavioral_Elements.State_Machines.SubmachineState |
Behavioral_Elements.Activity_Graphs.SubactivityState |
Behavioral_Elements.State_Machines.SimpleState |
Behavioral_Elements.Activity_Graphs.ObjectFlowState |
Behavioral_Elements.Activity_Graphs.ActionState |
Behavioral_Elements.Activity_Graphs.CallState |
Behavioral_Elements.State_Machines.FinalState |
Behavioral_Elements.State_Machines.Guard |
Behavioral_Elements.Collaborations.Message |
Behavioral_Elements.Collaborations.Interaction |
Behavioral_Elements.Activity_Graphs.Partition |
Foundation.Core.Feature |
Foundation.Core.BehavioralFeature |
Behavioral_Elements.Common_Behavior.Reception |
Foundation.Core.Operation |
Foundation.Core.Method |
Foundation.Core.StructuralFeature |
Foundation.Core.Attribute |
Foundation.Core.GeneralizableElement |
Foundation.Extension_Mechanisms.Stereotype |
Behavioral_Elements.Collaborations.Collaboration |
Model_Management.Package |
Model_Management.Subsystem |
Model_Management.Model |
Foundation.Core.Classifier |
Foundation.Core.Class |
Foundation.Core.DataType |
Foundation.Core.Interface |
Foundation.Core.Component |
Foundation.Core.Node |
Behavioral_Elements.Common_Behavior.Signal |
Behavioral_Elements.Common_Behavior.Exception |
Behavioral_Elements.Use_Cases.UseCase |
Behavioral_Elements.Use_Cases.Actor |
Behavioral_Elements.Collaborations.ClassifierRole |
Behavioral_Elements.Activity_Graphs.ClassifierInState |
Foundation.Core.AssociationEnd |
Behavioral_Elements.Collaborations.AssociationEndRole |
Foundation.Core.Namespace |
Foundation.Core.Parameter |
Foundation.Core.Constraint)*
>
<!ELEMENT Foundation.Core.Dependency (Foundation.Core.ModelElement.name?,
Foundation.Core.ModelElement.visibility?,
Foundation.Core.ModelElement.isSpecification?,
XMI.extension*,
Foundation.Core.ModelElement.namespace?,
Foundation.Core.ModelElement.clientDependency*,
Foundation.Core.ModelElement.constraint*,
Foundation.Core.ModelElement.supplierDependency*,
Foundation.Core.ModelElement.presentation*,
Foundation.Core.ModelElement.targetFlow*,
Foundation.Core.ModelElement.sourceFlow*,
Foundation.Core.ModelElement.templateParameter3*,
Foundation.Core.ModelElement.binding*,
Foundation.Core.ModelElement.comment*,
Foundation.Core.ModelElement.elementResidence*,
Foundation.Core.ModelElement.templateParameter2*,
Foundation.Core.ModelElement.stereotype?,
Foundation.Core.ModelElement.behavior*,
Foundation.Core.ModelElement.classifierRole*,
Foundation.Core.ModelElement.collaboration*,
Foundation.Core.ModelElement.partition*,
Foundation.Core.ModelElement.elementImport*,
Foundation.Core.Dependency.client*,
Foundation.Core.Dependency.supplier*,
Foundation.Core.ModelElement.templateParameter*,
Foundation.Core.ModelElement.taggedValue*)?
>
<!ATTLIST Foundation.Core.Dependency
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL CLASS: Abstraction -->
<!-- _______________________________________________________________ -->
<!ELEMENT Foundation.Core.Abstraction.mapping
(Foundation.Data_Types.MappingExpression) >
<!ELEMENT Foundation.Core.Abstraction (Foundation.Core.ModelElement.name?,
Foundation.Core.ModelElement.visibility?,
Foundation.Core.ModelElement.isSpecification?,
Foundation.Core.Abstraction.mapping?,
XMI.extension*,
Foundation.Core.ModelElement.namespace?,
Foundation.Core.ModelElement.clientDependency*,
Foundation.Core.ModelElement.constraint*,
Foundation.Core.ModelElement.supplierDependency*,
Foundation.Core.ModelElement.presentation*,
Foundation.Core.ModelElement.targetFlow*,
Foundation.Core.ModelElement.sourceFlow*,
Foundation.Core.ModelElement.templateParameter3*,
Foundation.Core.ModelElement.binding*,
Foundation.Core.ModelElement.comment*,
Foundation.Core.ModelElement.elementResidence*,
Foundation.Core.ModelElement.templateParameter2*,
Foundation.Core.ModelElement.stereotype?,
Foundation.Core.ModelElement.behavior*,
Foundation.Core.ModelElement.classifierRole*,
Foundation.Core.ModelElement.collaboration*,
Foundation.Core.ModelElement.partition*,
Foundation.Core.ModelElement.elementImport*,
Foundation.Core.Dependency.client*,
Foundation.Core.Dependency.supplier*,
Foundation.Core.ModelElement.templateParameter*,
Foundation.Core.ModelElement.taggedValue*)?
>
<!ATTLIST Foundation.Core.Abstraction
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL CLASS: PresentationElement -->
<!-- _______________________________________________________________ -->
<!ELEMENT Foundation.Core.PresentationElement.subject (Foundation.Core.ModelElement |
Foundation.Core.Comment |
Foundation.Core.Relationship |
Behavioral_Elements.Use_Cases.Extend |
Behavioral_Elements.Use_Cases.Include |
Foundation.Core.Generalization |
Foundation.Core.Flow |
Foundation.Core.Association |
Foundation.Core.AssociationClass |
Behavioral_Elements.Collaborations.AssociationRole |
Foundation.Core.Dependency |
Foundation.Core.Abstraction |
Foundation.Core.Usage |
Foundation.Core.Binding |
Foundation.Core.Permission |
Foundation.Extension_Mechanisms.TaggedValue |
Behavioral_Elements.Common_Behavior.Instance |
Behavioral_Elements.Common_Behavior.Object |
Behavioral_Elements.Common_Behavior.LinkObject |
Behavioral_Elements.Common_Behavior.DataValue |
Behavioral_Elements.Common_Behavior.ComponentInstance |
Behavioral_Elements.Common_Behavior.NodeInstance |
Behavioral_Elements.Use_Cases.UseCaseInstance |
Behavioral_Elements.Common_Behavior.Action |
Behavioral_Elements.Common_Behavior.CallAction |
Behavioral_Elements.Common_Behavior.SendAction |
Behavioral_Elements.Common_Behavior.ActionSequence |
Behavioral_Elements.Common_Behavior.ReturnAction |
Behavioral_Elements.Common_Behavior.TerminateAction |
Behavioral_Elements.Common_Behavior.DestroyAction |
Behavioral_Elements.Common_Behavior.CreateAction |
Behavioral_Elements.Common_Behavior.UninterpretedAction |
Behavioral_Elements.Common_Behavior.AttributeLink |
Behavioral_Elements.Common_Behavior.Argument |
Behavioral_Elements.Common_Behavior.Link |
Behavioral_Elements.Common_Behavior.LinkEnd |
Behavioral_Elements.Common_Behavior.Stimulus |
Behavioral_Elements.Use_Cases.ExtensionPoint |
Behavioral_Elements.State_Machines.StateMachine |
Behavioral_Elements.Activity_Graphs.ActivityGraph |
Behavioral_Elements.State_Machines.Event |
Behavioral_Elements.State_Machines.TimeEvent |
Behavioral_Elements.State_Machines.CallEvent |
Behavioral_Elements.State_Machines.SignalEvent |
Behavioral_Elements.State_Machines.ChangeEvent |
Behavioral_Elements.State_Machines.Transition |
Behavioral_Elements.State_Machines.StateVertex |
Behavioral_Elements.State_Machines.Pseudostate |
Behavioral_Elements.State_Machines.SynchState |
Behavioral_Elements.State_Machines.StubState |
Behavioral_Elements.State_Machines.State |
Behavioral_Elements.State_Machines.CompositeState |
Behavioral_Elements.State_Machines.SubmachineState |
Behavioral_Elements.Activity_Graphs.SubactivityState |
Behavioral_Elements.State_Machines.SimpleState |
Behavioral_Elements.Activity_Graphs.ObjectFlowState |
Behavioral_Elements.Activity_Graphs.ActionState |
Behavioral_Elements.Activity_Graphs.CallState |
Behavioral_Elements.State_Machines.FinalState |
Behavioral_Elements.State_Machines.Guard |
Behavioral_Elements.Collaborations.Message |
Behavioral_Elements.Collaborations.Interaction |
Behavioral_Elements.Activity_Graphs.Partition |
Foundation.Core.Feature |
Foundation.Core.BehavioralFeature |
Behavioral_Elements.Common_Behavior.Reception |
Foundation.Core.Operation |
Foundation.Core.Method |
Foundation.Core.StructuralFeature |
Foundation.Core.Attribute |
Foundation.Core.GeneralizableElement |
Foundation.Extension_Mechanisms.Stereotype |
Behavioral_Elements.Collaborations.Collaboration |
Model_Management.Package |
Model_Management.Subsystem |
Model_Management.Model |
Foundation.Core.Classifier |
Foundation.Core.Class |
Foundation.Core.DataType |
Foundation.Core.Interface |
Foundation.Core.Component |
Foundation.Core.Node |
Behavioral_Elements.Common_Behavior.Signal |
Behavioral_Elements.Common_Behavior.Exception |
Behavioral_Elements.Use_Cases.UseCase |
Behavioral_Elements.Use_Cases.Actor |
Behavioral_Elements.Collaborations.ClassifierRole |
Behavioral_Elements.Activity_Graphs.ClassifierInState |
Foundation.Core.AssociationEnd |
Behavioral_Elements.Collaborations.AssociationEndRole |
Foundation.Core.Namespace |
Foundation.Core.Parameter |
Foundation.Core.Constraint)*
>
<!ELEMENT Foundation.Core.PresentationElement (XMI.extension*,
Foundation.Core.PresentationElement.subject*)?
>
<!ATTLIST Foundation.Core.PresentationElement
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL CLASS: Usage -->
<!-- _______________________________________________________________ -->
<!ELEMENT Foundation.Core.Usage (Foundation.Core.ModelElement.name?,
Foundation.Core.ModelElement.visibility?,
Foundation.Core.ModelElement.isSpecification?,
XMI.extension*,
Foundation.Core.ModelElement.namespace?,
Foundation.Core.ModelElement.clientDependency*,
Foundation.Core.ModelElement.constraint*,
Foundation.Core.ModelElement.supplierDependency*,
Foundation.Core.ModelElement.presentation*,
Foundation.Core.ModelElement.targetFlow*,
Foundation.Core.ModelElement.sourceFlow*,
Foundation.Core.ModelElement.templateParameter3*,
Foundation.Core.ModelElement.binding*,
Foundation.Core.ModelElement.comment*,
Foundation.Core.ModelElement.elementResidence*,
Foundation.Core.ModelElement.templateParameter2*,
Foundation.Core.ModelElement.stereotype?,
Foundation.Core.ModelElement.behavior*,
Foundation.Core.ModelElement.classifierRole*,
Foundation.Core.ModelElement.collaboration*,
Foundation.Core.ModelElement.partition*,
Foundation.Core.ModelElement.elementImport*,
Foundation.Core.Dependency.client*,
Foundation.Core.Dependency.supplier*,
Foundation.Core.ModelElement.templateParameter*,
Foundation.Core.ModelElement.taggedValue*)?
>
<!ATTLIST Foundation.Core.Usage
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL CLASS: Binding -->
<!-- _______________________________________________________________ -->
<!ELEMENT Foundation.Core.Binding.argument (Foundation.Core.ModelElement |
Foundation.Core.Comment |
Foundation.Core.Relationship |
Behavioral_Elements.Use_Cases.Extend |
Behavioral_Elements.Use_Cases.Include |
Foundation.Core.Generalization |
Foundation.Core.Flow |
Foundation.Core.Association |
Foundation.Core.AssociationClass |
Behavioral_Elements.Collaborations.AssociationRole |
Foundation.Core.Dependency |
Foundation.Core.Abstraction |
Foundation.Core.Usage |
Foundation.Core.Binding |
Foundation.Core.Permission |
Foundation.Extension_Mechanisms.TaggedValue |
Behavioral_Elements.Common_Behavior.Instance |
Behavioral_Elements.Common_Behavior.Object |
Behavioral_Elements.Common_Behavior.LinkObject |
Behavioral_Elements.Common_Behavior.DataValue |
Behavioral_Elements.Common_Behavior.ComponentInstance |
Behavioral_Elements.Common_Behavior.NodeInstance |
Behavioral_Elements.Use_Cases.UseCaseInstance |
Behavioral_Elements.Common_Behavior.Action |
Behavioral_Elements.Common_Behavior.CallAction |
Behavioral_Elements.Common_Behavior.SendAction |
Behavioral_Elements.Common_Behavior.ActionSequence |
Behavioral_Elements.Common_Behavior.ReturnAction |
Behavioral_Elements.Common_Behavior.TerminateAction |
Behavioral_Elements.Common_Behavior.DestroyAction |
Behavioral_Elements.Common_Behavior.CreateAction |
Behavioral_Elements.Common_Behavior.UninterpretedAction |
Behavioral_Elements.Common_Behavior.AttributeLink |
Behavioral_Elements.Common_Behavior.Argument |
Behavioral_Elements.Common_Behavior.Link |
Behavioral_Elements.Common_Behavior.LinkEnd |
Behavioral_Elements.Common_Behavior.Stimulus |
Behavioral_Elements.Use_Cases.ExtensionPoint |
Behavioral_Elements.State_Machines.StateMachine |
Behavioral_Elements.Activity_Graphs.ActivityGraph |
Behavioral_Elements.State_Machines.Event |
Behavioral_Elements.State_Machines.TimeEvent |
Behavioral_Elements.State_Machines.CallEvent |
Behavioral_Elements.State_Machines.SignalEvent |
Behavioral_Elements.State_Machines.ChangeEvent |
Behavioral_Elements.State_Machines.Transition |
Behavioral_Elements.State_Machines.StateVertex |
Behavioral_Elements.State_Machines.Pseudostate |
Behavioral_Elements.State_Machines.SynchState |
Behavioral_Elements.State_Machines.StubState |
Behavioral_Elements.State_Machines.State |
Behavioral_Elements.State_Machines.CompositeState |
Behavioral_Elements.State_Machines.SubmachineState |
Behavioral_Elements.Activity_Graphs.SubactivityState |
Behavioral_Elements.State_Machines.SimpleState |
Behavioral_Elements.Activity_Graphs.ObjectFlowState |
Behavioral_Elements.Activity_Graphs.ActionState |
Behavioral_Elements.Activity_Graphs.CallState |
Behavioral_Elements.State_Machines.FinalState |
Behavioral_Elements.State_Machines.Guard |
Behavioral_Elements.Collaborations.Message |
Behavioral_Elements.Collaborations.Interaction |
Behavioral_Elements.Activity_Graphs.Partition |
Foundation.Core.Feature |
Foundation.Core.BehavioralFeature |
Behavioral_Elements.Common_Behavior.Reception |
Foundation.Core.Operation |
Foundation.Core.Method |
Foundation.Core.StructuralFeature |
Foundation.Core.Attribute |
Foundation.Core.GeneralizableElement |
Foundation.Extension_Mechanisms.Stereotype |
Behavioral_Elements.Collaborations.Collaboration |
Model_Management.Package |
Model_Management.Subsystem |
Model_Management.Model |
Foundation.Core.Classifier |
Foundation.Core.Class |
Foundation.Core.DataType |
Foundation.Core.Interface |
Foundation.Core.Component |
Foundation.Core.Node |
Behavioral_Elements.Common_Behavior.Signal |
Behavioral_Elements.Common_Behavior.Exception |
Behavioral_Elements.Use_Cases.UseCase |
Behavioral_Elements.Use_Cases.Actor |
Behavioral_Elements.Collaborations.ClassifierRole |
Behavioral_Elements.Activity_Graphs.ClassifierInState |
Foundation.Core.AssociationEnd |
Behavioral_Elements.Collaborations.AssociationEndRole |
Foundation.Core.Namespace |
Foundation.Core.Parameter |
Foundation.Core.Constraint)* >
<!ELEMENT Foundation.Core.Binding (Foundation.Core.ModelElement.name?,
Foundation.Core.ModelElement.visibility?,
Foundation.Core.ModelElement.isSpecification?,
XMI.extension*,
Foundation.Core.ModelElement.namespace?,
Foundation.Core.ModelElement.clientDependency*,
Foundation.Core.ModelElement.constraint*,
Foundation.Core.ModelElement.supplierDependency*,
Foundation.Core.ModelElement.presentation*,
Foundation.Core.ModelElement.targetFlow*,
Foundation.Core.ModelElement.sourceFlow*,
Foundation.Core.ModelElement.templateParameter3*,
Foundation.Core.ModelElement.binding*,
Foundation.Core.ModelElement.comment*,
Foundation.Core.ModelElement.elementResidence*,
Foundation.Core.ModelElement.templateParameter2*,
Foundation.Core.ModelElement.stereotype?,
Foundation.Core.ModelElement.behavior*,
Foundation.Core.ModelElement.classifierRole*,
Foundation.Core.ModelElement.collaboration*,
Foundation.Core.ModelElement.partition*,
Foundation.Core.ModelElement.elementImport*,
Foundation.Core.Dependency.client*,
Foundation.Core.Dependency.supplier*,
Foundation.Core.Binding.argument*,
Foundation.Core.ModelElement.templateParameter*,
Foundation.Core.ModelElement.taggedValue*)?
>
<!ATTLIST Foundation.Core.Binding
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL CLASS: Component -->
<!-- _______________________________________________________________ -->
<!ELEMENT Foundation.Core.Component.deploymentLocation
(Foundation.Core.Node)* >
<!ELEMENT Foundation.Core.Component.residentElement
(Foundation.Core.ElementResidence)* >
<!ELEMENT Foundation.Core.Component (Foundation.Core.ModelElement.name?,
Foundation.Core.ModelElement.visibility?,
Foundation.Core.ModelElement.isSpecification?,
Foundation.Core.GeneralizableElement.isRoot?,
Foundation.Core.GeneralizableElement.isLeaf?,
Foundation.Core.GeneralizableElement.isAbstract?,
XMI.extension*,
Foundation.Core.ModelElement.namespace?,
Foundation.Core.ModelElement.clientDependency*,
Foundation.Core.ModelElement.constraint*,
Foundation.Core.ModelElement.supplierDependency*,
Foundation.Core.ModelElement.presentation*,
Foundation.Core.ModelElement.targetFlow*,
Foundation.Core.ModelElement.sourceFlow*,
Foundation.Core.ModelElement.templateParameter3*,
Foundation.Core.ModelElement.binding*,
Foundation.Core.ModelElement.comment*,
Foundation.Core.ModelElement.elementResidence*,
Foundation.Core.ModelElement.templateParameter2*,
Foundation.Core.ModelElement.stereotype?,
Foundation.Core.ModelElement.behavior*,
Foundation.Core.ModelElement.classifierRole*,
Foundation.Core.ModelElement.collaboration*,
Foundation.Core.ModelElement.partition*,
Foundation.Core.ModelElement.elementImport*,
Foundation.Core.GeneralizableElement.generalization*,
Foundation.Core.GeneralizableElement.specialization*,
Foundation.Core.Classifier.participant*,
Foundation.Core.Classifier.powertypeRange*,
Foundation.Core.Classifier.instance*,
Foundation.Core.Classifier.createAction*,
Foundation.Core.Classifier.classifierRole*,
Foundation.Core.Classifier.collaboration*,
Foundation.Core.Classifier.classifierInState*,
Foundation.Core.Classifier.objectFlowState*,
Foundation.Core.Component.deploymentLocation*,
Foundation.Core.Component.residentElement*,
Foundation.Core.ModelElement.templateParameter*,
Foundation.Core.ModelElement.taggedValue*,
Foundation.Core.Namespace.ownedElement*,
Foundation.Core.Classifier.feature*)?
>
<!ATTLIST Foundation.Core.Component
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL CLASS: Node -->
<!-- _______________________________________________________________ -->
<!ELEMENT Foundation.Core.Node.resident (Foundation.Core.Component)* >
<!ELEMENT Foundation.Core.Node (Foundation.Core.ModelElement.name?,
Foundation.Core.ModelElement.visibility?,
Foundation.Core.ModelElement.isSpecification?,
Foundation.Core.GeneralizableElement.isRoot?,
Foundation.Core.GeneralizableElement.isLeaf?,
Foundation.Core.GeneralizableElement.isAbstract?,
XMI.extension*,
Foundation.Core.ModelElement.namespace?,
Foundation.Core.ModelElement.clientDependency*,
Foundation.Core.ModelElement.constraint*,
Foundation.Core.ModelElement.supplierDependency*,
Foundation.Core.ModelElement.presentation*,
Foundation.Core.ModelElement.targetFlow*,
Foundation.Core.ModelElement.sourceFlow*,
Foundation.Core.ModelElement.templateParameter3*,
Foundation.Core.ModelElement.binding*,
Foundation.Core.ModelElement.comment*,
Foundation.Core.ModelElement.elementResidence*,
Foundation.Core.ModelElement.templateParameter2*,
Foundation.Core.ModelElement.stereotype?,
Foundation.Core.ModelElement.behavior*,
Foundation.Core.ModelElement.classifierRole*,
Foundation.Core.ModelElement.collaboration*,
Foundation.Core.ModelElement.partition*,
Foundation.Core.ModelElement.elementImport*,
Foundation.Core.GeneralizableElement.generalization*,
Foundation.Core.GeneralizableElement.specialization*,
Foundation.Core.Classifier.participant*,
Foundation.Core.Classifier.powertypeRange*,
Foundation.Core.Classifier.instance*,
Foundation.Core.Classifier.createAction*,
Foundation.Core.Classifier.classifierRole*,
Foundation.Core.Classifier.collaboration*,
Foundation.Core.Classifier.classifierInState*,
Foundation.Core.Classifier.objectFlowState*,
Foundation.Core.Node.resident*,
Foundation.Core.ModelElement.templateParameter*,
Foundation.Core.ModelElement.taggedValue*,
Foundation.Core.Namespace.ownedElement*,
Foundation.Core.Classifier.feature*)? >
<!ATTLIST Foundation.Core.Node
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL CLASS: Permission -->
<!-- _______________________________________________________________ -->
<!ELEMENT Foundation.Core.Permission (Foundation.Core.ModelElement.name?,
Foundation.Core.ModelElement.visibility?,
Foundation.Core.ModelElement.isSpecification?,
XMI.extension*,
Foundation.Core.ModelElement.namespace?,
Foundation.Core.ModelElement.clientDependency*,
Foundation.Core.ModelElement.constraint*,
Foundation.Core.ModelElement.supplierDependency*,
Foundation.Core.ModelElement.presentation*,
Foundation.Core.ModelElement.targetFlow*,
Foundation.Core.ModelElement.sourceFlow*,
Foundation.Core.ModelElement.templateParameter3*,
Foundation.Core.ModelElement.binding*,
Foundation.Core.ModelElement.comment*,
Foundation.Core.ModelElement.elementResidence*,
Foundation.Core.ModelElement.templateParameter2*,
Foundation.Core.ModelElement.stereotype?,
Foundation.Core.ModelElement.behavior*,
Foundation.Core.ModelElement.classifierRole*,
Foundation.Core.ModelElement.collaboration*,
Foundation.Core.ModelElement.partition*,
Foundation.Core.ModelElement.elementImport*,
Foundation.Core.Dependency.client*,
Foundation.Core.Dependency.supplier*,
Foundation.Core.ModelElement.templateParameter*,
Foundation.Core.ModelElement.taggedValue*)?
>
<!ATTLIST Foundation.Core.Permission
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL CLASS: Comment -->
<!-- _______________________________________________________________ -->
<!ELEMENT Foundation.Core.Comment.annotatedElement (Foundation.Core.ModelElement |
Foundation.Core.Comment |
Foundation.Core.Relationship |
Behavioral_Elements.Use_Cases.Extend |
Behavioral_Elements.Use_Cases.Include |
Foundation.Core.Generalization |
Foundation.Core.Flow |
Foundation.Core.Association |
Foundation.Core.AssociationClass |
Behavioral_Elements.Collaborations.AssociationRole |
Foundation.Core.Dependency |
Foundation.Core.Abstraction |
Foundation.Core.Usage |
Foundation.Core.Binding |
Foundation.Core.Permission |
Foundation.Extension_Mechanisms.TaggedValue |
Behavioral_Elements.Common_Behavior.Instance |
Behavioral_Elements.Common_Behavior.Object |
Behavioral_Elements.Common_Behavior.LinkObject |
Behavioral_Elements.Common_Behavior.DataValue |
Behavioral_Elements.Common_Behavior.ComponentInstance |
Behavioral_Elements.Common_Behavior.NodeInstance |
Behavioral_Elements.Use_Cases.UseCaseInstance |
Behavioral_Elements.Common_Behavior.Action |
Behavioral_Elements.Common_Behavior.CallAction |
Behavioral_Elements.Common_Behavior.SendAction |
Behavioral_Elements.Common_Behavior.ActionSequence |
Behavioral_Elements.Common_Behavior.ReturnAction |
Behavioral_Elements.Common_Behavior.TerminateAction |
Behavioral_Elements.Common_Behavior.DestroyAction |
Behavioral_Elements.Common_Behavior.CreateAction |
Behavioral_Elements.Common_Behavior.UninterpretedAction |
Behavioral_Elements.Common_Behavior.AttributeLink |
Behavioral_Elements.Common_Behavior.Argument |
Behavioral_Elements.Common_Behavior.Link |
Behavioral_Elements.Common_Behavior.LinkEnd |
Behavioral_Elements.Common_Behavior.Stimulus |
Behavioral_Elements.Use_Cases.ExtensionPoint |
Behavioral_Elements.State_Machines.StateMachine |
Behavioral_Elements.Activity_Graphs.ActivityGraph |
Behavioral_Elements.State_Machines.Event |
Behavioral_Elements.State_Machines.TimeEvent |
Behavioral_Elements.State_Machines.CallEvent |
Behavioral_Elements.State_Machines.SignalEvent |
Behavioral_Elements.State_Machines.ChangeEvent |
Behavioral_Elements.State_Machines.Transition |
Behavioral_Elements.State_Machines.StateVertex |
Behavioral_Elements.State_Machines.Pseudostate |
Behavioral_Elements.State_Machines.SynchState |
Behavioral_Elements.State_Machines.StubState |
Behavioral_Elements.State_Machines.State |
Behavioral_Elements.State_Machines.CompositeState |
Behavioral_Elements.State_Machines.SubmachineState |
Behavioral_Elements.Activity_Graphs.SubactivityState |
Behavioral_Elements.State_Machines.SimpleState |
Behavioral_Elements.Activity_Graphs.ObjectFlowState |
Behavioral_Elements.Activity_Graphs.ActionState |
Behavioral_Elements.Activity_Graphs.CallState |
Behavioral_Elements.State_Machines.FinalState |
Behavioral_Elements.State_Machines.Guard |
Behavioral_Elements.Collaborations.Message |
Behavioral_Elements.Collaborations.Interaction |
Behavioral_Elements.Activity_Graphs.Partition |
Foundation.Core.Feature |
Foundation.Core.BehavioralFeature |
Behavioral_Elements.Common_Behavior.Reception |
Foundation.Core.Operation |
Foundation.Core.Method |
Foundation.Core.StructuralFeature |
Foundation.Core.Attribute |
Foundation.Core.GeneralizableElement |
Foundation.Extension_Mechanisms.Stereotype |
Behavioral_Elements.Collaborations.Collaboration |
Model_Management.Package |
Model_Management.Subsystem |
Model_Management.Model |
Foundation.Core.Classifier |
Foundation.Core.Class |
Foundation.Core.DataType |
Foundation.Core.Interface |
Foundation.Core.Component |
Foundation.Core.Node |
Behavioral_Elements.Common_Behavior.Signal |
Behavioral_Elements.Common_Behavior.Exception |
Behavioral_Elements.Use_Cases.UseCase |
Behavioral_Elements.Use_Cases.Actor |
Behavioral_Elements.Collaborations.ClassifierRole |
Behavioral_Elements.Activity_Graphs.ClassifierInState |
Foundation.Core.AssociationEnd |
Behavioral_Elements.Collaborations.AssociationEndRole |
Foundation.Core.Namespace |
Foundation.Core.Parameter |
Foundation.Core.Constraint)*
>
<!ELEMENT Foundation.Core.Comment (Foundation.Core.ModelElement.name?,
Foundation.Core.ModelElement.visibility?,
Foundation.Core.ModelElement.isSpecification?,
XMI.extension*,
Foundation.Core.ModelElement.namespace?,
Foundation.Core.ModelElement.clientDependency*,
Foundation.Core.ModelElement.constraint*,
Foundation.Core.ModelElement.supplierDependency*,
Foundation.Core.ModelElement.presentation*,
Foundation.Core.ModelElement.targetFlow*,
Foundation.Core.ModelElement.sourceFlow*,
Foundation.Core.ModelElement.templateParameter3*,
Foundation.Core.ModelElement.binding*,
Foundation.Core.ModelElement.comment*,
Foundation.Core.ModelElement.elementResidence*,
Foundation.Core.ModelElement.templateParameter2*,
Foundation.Core.ModelElement.stereotype?,
Foundation.Core.ModelElement.behavior*,
Foundation.Core.ModelElement.classifierRole*,
Foundation.Core.ModelElement.collaboration*,
Foundation.Core.ModelElement.partition*,
Foundation.Core.ModelElement.elementImport*,
Foundation.Core.Comment.annotatedElement*,
Foundation.Core.ModelElement.templateParameter*,
Foundation.Core.ModelElement.taggedValue*)?
>
<!ATTLIST Foundation.Core.Comment
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL CLASS: Flow -->
<!-- _______________________________________________________________ -->
<!ELEMENT Foundation.Core.Flow.target (Foundation.Core.ModelElement |
Foundation.Core.Comment |
Foundation.Core.Relationship |
Behavioral_Elements.Use_Cases.Extend |
Behavioral_Elements.Use_Cases.Include |
Foundation.Core.Generalization |
Foundation.Core.Flow |
Foundation.Core.Association |
Foundation.Core.AssociationClass |
Behavioral_Elements.Collaborations.AssociationRole |
Foundation.Core.Dependency |
Foundation.Core.Abstraction |
Foundation.Core.Usage |
Foundation.Core.Binding |
Foundation.Core.Permission |
Foundation.Extension_Mechanisms.TaggedValue |
Behavioral_Elements.Common_Behavior.Instance |
Behavioral_Elements.Common_Behavior.Object |
Behavioral_Elements.Common_Behavior.LinkObject |
Behavioral_Elements.Common_Behavior.DataValue |
Behavioral_Elements.Common_Behavior.ComponentInstance |
Behavioral_Elements.Common_Behavior.NodeInstance |
Behavioral_Elements.Use_Cases.UseCaseInstance |
Behavioral_Elements.Common_Behavior.Action |
Behavioral_Elements.Common_Behavior.CallAction |
Behavioral_Elements.Common_Behavior.SendAction |
Behavioral_Elements.Common_Behavior.ActionSequence |
Behavioral_Elements.Common_Behavior.ReturnAction |
Behavioral_Elements.Common_Behavior.TerminateAction |
Behavioral_Elements.Common_Behavior.DestroyAction |
Behavioral_Elements.Common_Behavior.CreateAction |
Behavioral_Elements.Common_Behavior.UninterpretedAction |
Behavioral_Elements.Common_Behavior.AttributeLink |
Behavioral_Elements.Common_Behavior.Argument |
Behavioral_Elements.Common_Behavior.Link |
Behavioral_Elements.Common_Behavior.LinkEnd |
Behavioral_Elements.Common_Behavior.Stimulus |
Behavioral_Elements.Use_Cases.ExtensionPoint |
Behavioral_Elements.State_Machines.StateMachine |
Behavioral_Elements.Activity_Graphs.ActivityGraph |
Behavioral_Elements.State_Machines.Event |
Behavioral_Elements.State_Machines.TimeEvent |
Behavioral_Elements.State_Machines.CallEvent |
Behavioral_Elements.State_Machines.SignalEvent |
Behavioral_Elements.State_Machines.ChangeEvent |
Behavioral_Elements.State_Machines.Transition |
Behavioral_Elements.State_Machines.StateVertex |
Behavioral_Elements.State_Machines.Pseudostate |
Behavioral_Elements.State_Machines.SynchState |
Behavioral_Elements.State_Machines.StubState |
Behavioral_Elements.State_Machines.State |
Behavioral_Elements.State_Machines.CompositeState |
Behavioral_Elements.State_Machines.SubmachineState |
Behavioral_Elements.Activity_Graphs.SubactivityState |
Behavioral_Elements.State_Machines.SimpleState |
Behavioral_Elements.Activity_Graphs.ObjectFlowState |
Behavioral_Elements.Activity_Graphs.ActionState |
Behavioral_Elements.Activity_Graphs.CallState |
Behavioral_Elements.State_Machines.FinalState |
Behavioral_Elements.State_Machines.Guard |
Behavioral_Elements.Collaborations.Message |
Behavioral_Elements.Collaborations.Interaction |
Behavioral_Elements.Activity_Graphs.Partition |
Foundation.Core.Feature |
Foundation.Core.BehavioralFeature |
Behavioral_Elements.Common_Behavior.Reception |
Foundation.Core.Operation |
Foundation.Core.Method |
Foundation.Core.StructuralFeature |
Foundation.Core.Attribute |
Foundation.Core.GeneralizableElement |
Foundation.Extension_Mechanisms.Stereotype |
Behavioral_Elements.Collaborations.Collaboration |
Model_Management.Package |
Model_Management.Subsystem |
Model_Management.Model |
Foundation.Core.Classifier |
Foundation.Core.Class |
Foundation.Core.DataType |
Foundation.Core.Interface |
Foundation.Core.Component |
Foundation.Core.Node |
Behavioral_Elements.Common_Behavior.Signal |
Behavioral_Elements.Common_Behavior.Exception |
Behavioral_Elements.Use_Cases.UseCase |
Behavioral_Elements.Use_Cases.Actor |
Behavioral_Elements.Collaborations.ClassifierRole |
Behavioral_Elements.Activity_Graphs.ClassifierInState |
Foundation.Core.AssociationEnd |
Behavioral_Elements.Collaborations.AssociationEndRole |
Foundation.Core.Namespace |
Foundation.Core.Parameter |
Foundation.Core.Constraint)* >
<!ELEMENT Foundation.Core.Flow.source (Foundation.Core.ModelElement |
Foundation.Core.Comment |
Foundation.Core.Relationship |
Behavioral_Elements.Use_Cases.Extend |
Behavioral_Elements.Use_Cases.Include |
Foundation.Core.Generalization |
Foundation.Core.Flow |
Foundation.Core.Association |
Foundation.Core.AssociationClass |
Behavioral_Elements.Collaborations.AssociationRole |
Foundation.Core.Dependency |
Foundation.Core.Abstraction |
Foundation.Core.Usage |
Foundation.Core.Binding |
Foundation.Core.Permission |
Foundation.Extension_Mechanisms.TaggedValue |
Behavioral_Elements.Common_Behavior.Instance |
Behavioral_Elements.Common_Behavior.Object |
Behavioral_Elements.Common_Behavior.LinkObject |
Behavioral_Elements.Common_Behavior.DataValue |
Behavioral_Elements.Common_Behavior.ComponentInstance |
Behavioral_Elements.Common_Behavior.NodeInstance |
Behavioral_Elements.Use_Cases.UseCaseInstance |
Behavioral_Elements.Common_Behavior.Action |
Behavioral_Elements.Common_Behavior.CallAction |
Behavioral_Elements.Common_Behavior.SendAction |
Behavioral_Elements.Common_Behavior.ActionSequence |
Behavioral_Elements.Common_Behavior.ReturnAction |
Behavioral_Elements.Common_Behavior.TerminateAction |
Behavioral_Elements.Common_Behavior.DestroyAction |
Behavioral_Elements.Common_Behavior.CreateAction |
Behavioral_Elements.Common_Behavior.UninterpretedAction |
Behavioral_Elements.Common_Behavior.AttributeLink |
Behavioral_Elements.Common_Behavior.Argument |
Behavioral_Elements.Common_Behavior.Link |
Behavioral_Elements.Common_Behavior.LinkEnd |
Behavioral_Elements.Common_Behavior.Stimulus |
Behavioral_Elements.Use_Cases.ExtensionPoint |
Behavioral_Elements.State_Machines.StateMachine |
Behavioral_Elements.Activity_Graphs.ActivityGraph |
Behavioral_Elements.State_Machines.Event |
Behavioral_Elements.State_Machines.TimeEvent |
Behavioral_Elements.State_Machines.CallEvent |
Behavioral_Elements.State_Machines.SignalEvent |
Behavioral_Elements.State_Machines.ChangeEvent |
Behavioral_Elements.State_Machines.Transition |
Behavioral_Elements.State_Machines.StateVertex |
Behavioral_Elements.State_Machines.Pseudostate |
Behavioral_Elements.State_Machines.SynchState |
Behavioral_Elements.State_Machines.StubState |
Behavioral_Elements.State_Machines.State |
Behavioral_Elements.State_Machines.CompositeState |
Behavioral_Elements.State_Machines.SubmachineState |
Behavioral_Elements.Activity_Graphs.SubactivityState |
Behavioral_Elements.State_Machines.SimpleState |
Behavioral_Elements.Activity_Graphs.ObjectFlowState |
Behavioral_Elements.Activity_Graphs.ActionState |
Behavioral_Elements.Activity_Graphs.CallState |
Behavioral_Elements.State_Machines.FinalState |
Behavioral_Elements.State_Machines.Guard |
Behavioral_Elements.Collaborations.Message |
Behavioral_Elements.Collaborations.Interaction |
Behavioral_Elements.Activity_Graphs.Partition |
Foundation.Core.Feature |
Foundation.Core.BehavioralFeature |
Behavioral_Elements.Common_Behavior.Reception |
Foundation.Core.Operation |
Foundation.Core.Method |
Foundation.Core.StructuralFeature |
Foundation.Core.Attribute |
Foundation.Core.GeneralizableElement |
Foundation.Extension_Mechanisms.Stereotype |
Behavioral_Elements.Collaborations.Collaboration |
Model_Management.Package |
Model_Management.Subsystem |
Model_Management.Model |
Foundation.Core.Classifier |
Foundation.Core.Class |
Foundation.Core.DataType |
Foundation.Core.Interface |
Foundation.Core.Component |
Foundation.Core.Node |
Behavioral_Elements.Common_Behavior.Signal |
Behavioral_Elements.Common_Behavior.Exception |
Behavioral_Elements.Use_Cases.UseCase |
Behavioral_Elements.Use_Cases.Actor |
Behavioral_Elements.Collaborations.ClassifierRole |
Behavioral_Elements.Activity_Graphs.ClassifierInState |
Foundation.Core.AssociationEnd |
Behavioral_Elements.Collaborations.AssociationEndRole |
Foundation.Core.Namespace |
Foundation.Core.Parameter |
Foundation.Core.Constraint)* >
<!ELEMENT Foundation.Core.Flow (Foundation.Core.ModelElement.name?,
Foundation.Core.ModelElement.visibility?,
Foundation.Core.ModelElement.isSpecification?,
XMI.extension*,
Foundation.Core.ModelElement.namespace?,
Foundation.Core.ModelElement.clientDependency*,
Foundation.Core.ModelElement.constraint*,
Foundation.Core.ModelElement.supplierDependency*,
Foundation.Core.ModelElement.presentation*,
Foundation.Core.ModelElement.targetFlow*,
Foundation.Core.ModelElement.sourceFlow*,
Foundation.Core.ModelElement.templateParameter3*,
Foundation.Core.ModelElement.binding*,
Foundation.Core.ModelElement.comment*,
Foundation.Core.ModelElement.elementResidence*,
Foundation.Core.ModelElement.templateParameter2*,
Foundation.Core.ModelElement.stereotype?,
Foundation.Core.ModelElement.behavior*,
Foundation.Core.ModelElement.classifierRole*,
Foundation.Core.ModelElement.collaboration*,
Foundation.Core.ModelElement.partition*,
Foundation.Core.ModelElement.elementImport*,
Foundation.Core.Flow.target*,
Foundation.Core.Flow.source*,
Foundation.Core.ModelElement.templateParameter*,
Foundation.Core.ModelElement.taggedValue*)?
>
<!ATTLIST Foundation.Core.Flow
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL CLASS: Relationship -->
<!-- _______________________________________________________________ -->
<!ELEMENT Foundation.Core.Relationship (Foundation.Core.ModelElement.name?,
Foundation.Core.ModelElement.visibility?,
Foundation.Core.ModelElement.isSpecification?,
XMI.extension*,
Foundation.Core.ModelElement.namespace?,
Foundation.Core.ModelElement.clientDependency*,
Foundation.Core.ModelElement.constraint*,
Foundation.Core.ModelElement.supplierDependency*,
Foundation.Core.ModelElement.presentation*,
Foundation.Core.ModelElement.targetFlow*,
Foundation.Core.ModelElement.sourceFlow*,
Foundation.Core.ModelElement.templateParameter3*,
Foundation.Core.ModelElement.binding*,
Foundation.Core.ModelElement.comment*,
Foundation.Core.ModelElement.elementResidence*,
Foundation.Core.ModelElement.templateParameter2*,
Foundation.Core.ModelElement.stereotype?,
Foundation.Core.ModelElement.behavior*,
Foundation.Core.ModelElement.classifierRole*,
Foundation.Core.ModelElement.collaboration*,
Foundation.Core.ModelElement.partition*,
Foundation.Core.ModelElement.elementImport*,
Foundation.Core.ModelElement.templateParameter*,
Foundation.Core.ModelElement.taggedValue*)?
>
<!ATTLIST Foundation.Core.Relationship
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL CLASS: ElementResidence -->
<!-- _______________________________________________________________ -->
<!ELEMENT Foundation.Core.ElementResidence.visibility EMPTY >
<!ATTLIST Foundation.Core.ElementResidence.visibility
xmi.value ( public | private | protected ) #REQUIRED
>
<!ELEMENT Foundation.Core.ElementResidence.resident (Foundation.Core.ModelElement |
Foundation.Core.Comment |
Foundation.Core.Relationship |
Behavioral_Elements.Use_Cases.Extend |
Behavioral_Elements.Use_Cases.Include |
Foundation.Core.Generalization |
Foundation.Core.Flow |
Foundation.Core.Association |
Foundation.Core.AssociationClass |
Behavioral_Elements.Collaborations.AssociationRole |
Foundation.Core.Dependency |
Foundation.Core.Abstraction |
Foundation.Core.Usage |
Foundation.Core.Binding |
Foundation.Core.Permission |
Foundation.Extension_Mechanisms.TaggedValue |
Behavioral_Elements.Common_Behavior.Instance |
Behavioral_Elements.Common_Behavior.Object |
Behavioral_Elements.Common_Behavior.LinkObject |
Behavioral_Elements.Common_Behavior.DataValue |
Behavioral_Elements.Common_Behavior.ComponentInstance |
Behavioral_Elements.Common_Behavior.NodeInstance |
Behavioral_Elements.Use_Cases.UseCaseInstance |
Behavioral_Elements.Common_Behavior.Action |
Behavioral_Elements.Common_Behavior.CallAction |
Behavioral_Elements.Common_Behavior.SendAction |
Behavioral_Elements.Common_Behavior.ActionSequence |
Behavioral_Elements.Common_Behavior.ReturnAction |
Behavioral_Elements.Common_Behavior.TerminateAction |
Behavioral_Elements.Common_Behavior.DestroyAction |
Behavioral_Elements.Common_Behavior.CreateAction |
Behavioral_Elements.Common_Behavior.UninterpretedAction |
Behavioral_Elements.Common_Behavior.AttributeLink |
Behavioral_Elements.Common_Behavior.Argument |
Behavioral_Elements.Common_Behavior.Link |
Behavioral_Elements.Common_Behavior.LinkEnd |
Behavioral_Elements.Common_Behavior.Stimulus |
Behavioral_Elements.Use_Cases.ExtensionPoint |
Behavioral_Elements.State_Machines.StateMachine |
Behavioral_Elements.Activity_Graphs.ActivityGraph |
Behavioral_Elements.State_Machines.Event |
Behavioral_Elements.State_Machines.TimeEvent |
Behavioral_Elements.State_Machines.CallEvent |
Behavioral_Elements.State_Machines.SignalEvent |
Behavioral_Elements.State_Machines.ChangeEvent |
Behavioral_Elements.State_Machines.Transition |
Behavioral_Elements.State_Machines.StateVertex |
Behavioral_Elements.State_Machines.Pseudostate |
Behavioral_Elements.State_Machines.SynchState |
Behavioral_Elements.State_Machines.StubState |
Behavioral_Elements.State_Machines.State |
Behavioral_Elements.State_Machines.CompositeState |
Behavioral_Elements.State_Machines.SubmachineState |
Behavioral_Elements.Activity_Graphs.SubactivityState |
Behavioral_Elements.State_Machines.SimpleState |
Behavioral_Elements.Activity_Graphs.ObjectFlowState |
Behavioral_Elements.Activity_Graphs.ActionState |
Behavioral_Elements.Activity_Graphs.CallState |
Behavioral_Elements.State_Machines.FinalState |
Behavioral_Elements.State_Machines.Guard |
Behavioral_Elements.Collaborations.Message |
Behavioral_Elements.Collaborations.Interaction |
Behavioral_Elements.Activity_Graphs.Partition |
Foundation.Core.Feature |
Foundation.Core.BehavioralFeature |
Behavioral_Elements.Common_Behavior.Reception |
Foundation.Core.Operation |
Foundation.Core.Method |
Foundation.Core.StructuralFeature |
Foundation.Core.Attribute |
Foundation.Core.GeneralizableElement |
Foundation.Extension_Mechanisms.Stereotype |
Behavioral_Elements.Collaborations.Collaboration |
Model_Management.Package |
Model_Management.Subsystem |
Model_Management.Model |
Foundation.Core.Classifier |
Foundation.Core.Class |
Foundation.Core.DataType |
Foundation.Core.Interface |
Foundation.Core.Component |
Foundation.Core.Node |
Behavioral_Elements.Common_Behavior.Signal |
Behavioral_Elements.Common_Behavior.Exception |
Behavioral_Elements.Use_Cases.UseCase |
Behavioral_Elements.Use_Cases.Actor |
Behavioral_Elements.Collaborations.ClassifierRole |
Behavioral_Elements.Activity_Graphs.ClassifierInState |
Foundation.Core.AssociationEnd |
Behavioral_Elements.Collaborations.AssociationEndRole |
Foundation.Core.Namespace |
Foundation.Core.Parameter |
Foundation.Core.Constraint)?
>
<!ELEMENT Foundation.Core.ElementResidence.implementationLocation
(Foundation.Core.Component)? >
<!ELEMENT Foundation.Core.ElementResidence (Foundation.Core.ElementResidence.visibility?,
XMI.extension*,
Foundation.Core.ElementResidence.resident?,
Foundation.Core.ElementResidence.implementationLocation?)?
>
<!ATTLIST Foundation.Core.ElementResidence
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL CLASS: TemplateParameter -->
<!-- _______________________________________________________________ -->
<!ELEMENT Foundation.Core.TemplateParameter.defaultElement (Foundation.Core.ModelElement |
Foundation.Core.Comment |
Foundation.Core.Relationship |
Behavioral_Elements.Use_Cases.Extend |
Behavioral_Elements.Use_Cases.Include |
Foundation.Core.Generalization |
Foundation.Core.Flow |
Foundation.Core.Association |
Foundation.Core.AssociationClass |
Behavioral_Elements.Collaborations.AssociationRole |
Foundation.Core.Dependency |
Foundation.Core.Abstraction |
Foundation.Core.Usage |
Foundation.Core.Binding |
Foundation.Core.Permission |
Foundation.Extension_Mechanisms.TaggedValue |
Behavioral_Elements.Common_Behavior.Instance |
Behavioral_Elements.Common_Behavior.Object |
Behavioral_Elements.Common_Behavior.LinkObject |
Behavioral_Elements.Common_Behavior.DataValue |
Behavioral_Elements.Common_Behavior.ComponentInstance |
Behavioral_Elements.Common_Behavior.NodeInstance |
Behavioral_Elements.Use_Cases.UseCaseInstance |
Behavioral_Elements.Common_Behavior.Action |
Behavioral_Elements.Common_Behavior.CallAction |
Behavioral_Elements.Common_Behavior.SendAction |
Behavioral_Elements.Common_Behavior.ActionSequence |
Behavioral_Elements.Common_Behavior.ReturnAction |
Behavioral_Elements.Common_Behavior.TerminateAction |
Behavioral_Elements.Common_Behavior.DestroyAction |
Behavioral_Elements.Common_Behavior.CreateAction |
Behavioral_Elements.Common_Behavior.UninterpretedAction |
Behavioral_Elements.Common_Behavior.AttributeLink |
Behavioral_Elements.Common_Behavior.Argument |
Behavioral_Elements.Common_Behavior.Link |
Behavioral_Elements.Common_Behavior.LinkEnd |
Behavioral_Elements.Common_Behavior.Stimulus |
Behavioral_Elements.Use_Cases.ExtensionPoint |
Behavioral_Elements.State_Machines.StateMachine |
Behavioral_Elements.Activity_Graphs.ActivityGraph |
Behavioral_Elements.State_Machines.Event |
Behavioral_Elements.State_Machines.TimeEvent |
Behavioral_Elements.State_Machines.CallEvent |
Behavioral_Elements.State_Machines.SignalEvent |
Behavioral_Elements.State_Machines.ChangeEvent |
Behavioral_Elements.State_Machines.Transition |
Behavioral_Elements.State_Machines.StateVertex |
Behavioral_Elements.State_Machines.Pseudostate |
Behavioral_Elements.State_Machines.SynchState |
Behavioral_Elements.State_Machines.StubState |
Behavioral_Elements.State_Machines.State |
Behavioral_Elements.State_Machines.CompositeState |
Behavioral_Elements.State_Machines.SubmachineState |
Behavioral_Elements.Activity_Graphs.SubactivityState |
Behavioral_Elements.State_Machines.SimpleState |
Behavioral_Elements.Activity_Graphs.ObjectFlowState |
Behavioral_Elements.Activity_Graphs.ActionState |
Behavioral_Elements.Activity_Graphs.CallState |
Behavioral_Elements.State_Machines.FinalState |
Behavioral_Elements.State_Machines.Guard |
Behavioral_Elements.Collaborations.Message |
Behavioral_Elements.Collaborations.Interaction |
Behavioral_Elements.Activity_Graphs.Partition |
Foundation.Core.Feature |
Foundation.Core.BehavioralFeature |
Behavioral_Elements.Common_Behavior.Reception |
Foundation.Core.Operation |
Foundation.Core.Method |
Foundation.Core.StructuralFeature |
Foundation.Core.Attribute |
Foundation.Core.GeneralizableElement |
Foundation.Extension_Mechanisms.Stereotype |
Behavioral_Elements.Collaborations.Collaboration |
Model_Management.Package |
Model_Management.Subsystem |
Model_Management.Model |
Foundation.Core.Classifier |
Foundation.Core.Class |
Foundation.Core.DataType |
Foundation.Core.Interface |
Foundation.Core.Component |
Foundation.Core.Node |
Behavioral_Elements.Common_Behavior.Signal |
Behavioral_Elements.Common_Behavior.Exception |
Behavioral_Elements.Use_Cases.UseCase |
Behavioral_Elements.Use_Cases.Actor |
Behavioral_Elements.Collaborations.ClassifierRole |
Behavioral_Elements.Activity_Graphs.ClassifierInState |
Foundation.Core.AssociationEnd |
Behavioral_Elements.Collaborations.AssociationEndRole |
Foundation.Core.Namespace |
Foundation.Core.Parameter |
Foundation.Core.Constraint)?
>
<!ELEMENT Foundation.Core.TemplateParameter.modelElement (Foundation.Core.ModelElement |
Foundation.Core.Comment |
Foundation.Core.Relationship |
Behavioral_Elements.Use_Cases.Extend |
Behavioral_Elements.Use_Cases.Include |
Foundation.Core.Generalization |
Foundation.Core.Flow |
Foundation.Core.Association |
Foundation.Core.AssociationClass |
Behavioral_Elements.Collaborations.AssociationRole |
Foundation.Core.Dependency |
Foundation.Core.Abstraction |
Foundation.Core.Usage |
Foundation.Core.Binding |
Foundation.Core.Permission |
Foundation.Extension_Mechanisms.TaggedValue |
Behavioral_Elements.Common_Behavior.Instance |
Behavioral_Elements.Common_Behavior.Object |
Behavioral_Elements.Common_Behavior.LinkObject |
Behavioral_Elements.Common_Behavior.DataValue |
Behavioral_Elements.Common_Behavior.ComponentInstance |
Behavioral_Elements.Common_Behavior.NodeInstance |
Behavioral_Elements.Use_Cases.UseCaseInstance |
Behavioral_Elements.Common_Behavior.Action |
Behavioral_Elements.Common_Behavior.CallAction |
Behavioral_Elements.Common_Behavior.SendAction |
Behavioral_Elements.Common_Behavior.ActionSequence |
Behavioral_Elements.Common_Behavior.ReturnAction |
Behavioral_Elements.Common_Behavior.TerminateAction |
Behavioral_Elements.Common_Behavior.DestroyAction |
Behavioral_Elements.Common_Behavior.CreateAction |
Behavioral_Elements.Common_Behavior.UninterpretedAction |
Behavioral_Elements.Common_Behavior.AttributeLink |
Behavioral_Elements.Common_Behavior.Argument |
Behavioral_Elements.Common_Behavior.Link |
Behavioral_Elements.Common_Behavior.LinkEnd |
Behavioral_Elements.Common_Behavior.Stimulus |
Behavioral_Elements.Use_Cases.ExtensionPoint |
Behavioral_Elements.State_Machines.StateMachine |
Behavioral_Elements.Activity_Graphs.ActivityGraph |
Behavioral_Elements.State_Machines.Event |
Behavioral_Elements.State_Machines.TimeEvent |
Behavioral_Elements.State_Machines.CallEvent |
Behavioral_Elements.State_Machines.SignalEvent |
Behavioral_Elements.State_Machines.ChangeEvent |
Behavioral_Elements.State_Machines.Transition |
Behavioral_Elements.State_Machines.StateVertex |
Behavioral_Elements.State_Machines.Pseudostate |
Behavioral_Elements.State_Machines.SynchState |
Behavioral_Elements.State_Machines.StubState |
Behavioral_Elements.State_Machines.State |
Behavioral_Elements.State_Machines.CompositeState |
Behavioral_Elements.State_Machines.SubmachineState |
Behavioral_Elements.Activity_Graphs.SubactivityState |
Behavioral_Elements.State_Machines.SimpleState |
Behavioral_Elements.Activity_Graphs.ObjectFlowState |
Behavioral_Elements.Activity_Graphs.ActionState |
Behavioral_Elements.Activity_Graphs.CallState |
Behavioral_Elements.State_Machines.FinalState |
Behavioral_Elements.State_Machines.Guard |
Behavioral_Elements.Collaborations.Message |
Behavioral_Elements.Collaborations.Interaction |
Behavioral_Elements.Activity_Graphs.Partition |
Foundation.Core.Feature |
Foundation.Core.BehavioralFeature |
Behavioral_Elements.Common_Behavior.Reception |
Foundation.Core.Operation |
Foundation.Core.Method |
Foundation.Core.StructuralFeature |
Foundation.Core.Attribute |
Foundation.Core.GeneralizableElement |
Foundation.Extension_Mechanisms.Stereotype |
Behavioral_Elements.Collaborations.Collaboration |
Model_Management.Package |
Model_Management.Subsystem |
Model_Management.Model |
Foundation.Core.Classifier |
Foundation.Core.Class |
Foundation.Core.DataType |
Foundation.Core.Interface |
Foundation.Core.Component |
Foundation.Core.Node |
Behavioral_Elements.Common_Behavior.Signal |
Behavioral_Elements.Common_Behavior.Exception |
Behavioral_Elements.Use_Cases.UseCase |
Behavioral_Elements.Use_Cases.Actor |
Behavioral_Elements.Collaborations.ClassifierRole |
Behavioral_Elements.Activity_Graphs.ClassifierInState |
Foundation.Core.AssociationEnd |
Behavioral_Elements.Collaborations.AssociationEndRole |
Foundation.Core.Namespace |
Foundation.Core.Parameter |
Foundation.Core.Constraint)?
>
<!ELEMENT Foundation.Core.TemplateParameter.modelElement2 (Foundation.Core.ModelElement |
Foundation.Core.Comment |
Foundation.Core.Relationship |
Behavioral_Elements.Use_Cases.Extend |
Behavioral_Elements.Use_Cases.Include |
Foundation.Core.Generalization |
Foundation.Core.Flow |
Foundation.Core.Association |
Foundation.Core.AssociationClass |
Behavioral_Elements.Collaborations.AssociationRole |
Foundation.Core.Dependency |
Foundation.Core.Abstraction |
Foundation.Core.Usage |
Foundation.Core.Binding |
Foundation.Core.Permission |
Foundation.Extension_Mechanisms.TaggedValue |
Behavioral_Elements.Common_Behavior.Instance |
Behavioral_Elements.Common_Behavior.Object |
Behavioral_Elements.Common_Behavior.LinkObject |
Behavioral_Elements.Common_Behavior.DataValue |
Behavioral_Elements.Common_Behavior.ComponentInstance |
Behavioral_Elements.Common_Behavior.NodeInstance |
Behavioral_Elements.Use_Cases.UseCaseInstance |
Behavioral_Elements.Common_Behavior.Action |
Behavioral_Elements.Common_Behavior.CallAction |
Behavioral_Elements.Common_Behavior.SendAction |
Behavioral_Elements.Common_Behavior.ActionSequence |
Behavioral_Elements.Common_Behavior.ReturnAction |
Behavioral_Elements.Common_Behavior.TerminateAction |
Behavioral_Elements.Common_Behavior.DestroyAction |
Behavioral_Elements.Common_Behavior.CreateAction |
Behavioral_Elements.Common_Behavior.UninterpretedAction |
Behavioral_Elements.Common_Behavior.AttributeLink |
Behavioral_Elements.Common_Behavior.Argument |
Behavioral_Elements.Common_Behavior.Link |
Behavioral_Elements.Common_Behavior.LinkEnd |
Behavioral_Elements.Common_Behavior.Stimulus |
Behavioral_Elements.Use_Cases.ExtensionPoint |
Behavioral_Elements.State_Machines.StateMachine |
Behavioral_Elements.Activity_Graphs.ActivityGraph |
Behavioral_Elements.State_Machines.Event |
Behavioral_Elements.State_Machines.TimeEvent |
Behavioral_Elements.State_Machines.CallEvent |
Behavioral_Elements.State_Machines.SignalEvent |
Behavioral_Elements.State_Machines.ChangeEvent |
Behavioral_Elements.State_Machines.Transition |
Behavioral_Elements.State_Machines.StateVertex |
Behavioral_Elements.State_Machines.Pseudostate |
Behavioral_Elements.State_Machines.SynchState |
Behavioral_Elements.State_Machines.StubState |
Behavioral_Elements.State_Machines.State |
Behavioral_Elements.State_Machines.CompositeState |
Behavioral_Elements.State_Machines.SubmachineState |
Behavioral_Elements.Activity_Graphs.SubactivityState |
Behavioral_Elements.State_Machines.SimpleState |
Behavioral_Elements.Activity_Graphs.ObjectFlowState |
Behavioral_Elements.Activity_Graphs.ActionState |
Behavioral_Elements.Activity_Graphs.CallState |
Behavioral_Elements.State_Machines.FinalState |
Behavioral_Elements.State_Machines.Guard |
Behavioral_Elements.Collaborations.Message |
Behavioral_Elements.Collaborations.Interaction |
Behavioral_Elements.Activity_Graphs.Partition |
Foundation.Core.Feature |
Foundation.Core.BehavioralFeature |
Behavioral_Elements.Common_Behavior.Reception |
Foundation.Core.Operation |
Foundation.Core.Method |
Foundation.Core.StructuralFeature |
Foundation.Core.Attribute |
Foundation.Core.GeneralizableElement |
Foundation.Extension_Mechanisms.Stereotype |
Behavioral_Elements.Collaborations.Collaboration |
Model_Management.Package |
Model_Management.Subsystem |
Model_Management.Model |
Foundation.Core.Classifier |
Foundation.Core.Class |
Foundation.Core.DataType |
Foundation.Core.Interface |
Foundation.Core.Component |
Foundation.Core.Node |
Behavioral_Elements.Common_Behavior.Signal |
Behavioral_Elements.Common_Behavior.Exception |
Behavioral_Elements.Use_Cases.UseCase |
Behavioral_Elements.Use_Cases.Actor |
Behavioral_Elements.Collaborations.ClassifierRole |
Behavioral_Elements.Activity_Graphs.ClassifierInState |
Foundation.Core.AssociationEnd |
Behavioral_Elements.Collaborations.AssociationEndRole |
Foundation.Core.Namespace |
Foundation.Core.Parameter |
Foundation.Core.Constraint)?
>
<!ELEMENT Foundation.Core.TemplateParameter (XMI.extension*,
Foundation.Core.TemplateParameter.defaultElement?,
Foundation.Core.TemplateParameter.modelElement?,
Foundation.Core.TemplateParameter.modelElement2?)?
>
<!ATTLIST Foundation.Core.TemplateParameter
%XMI.element.att;
%XMI.link.att;
>
<!ELEMENT Foundation.Core ((Foundation.Core.Classifier |
Foundation.Core.Class |
Foundation.Core.DataType |
Foundation.Core.StructuralFeature |
Foundation.Core.Namespace |
Foundation.Core.AssociationEnd |
Foundation.Core.Interface |
Foundation.Core.Constraint |
Foundation.Core.Association |
Foundation.Core.Element |
Foundation.Core.GeneralizableElement |
Foundation.Core.Attribute |
Foundation.Core.Operation |
Foundation.Core.Parameter |
Foundation.Core.Method |
Foundation.Core.Generalization |
Foundation.Core.AssociationClass |
Foundation.Core.Feature |
Foundation.Core.BehavioralFeature |
Foundation.Core.ModelElement |
Foundation.Core.Dependency |
Foundation.Core.Abstraction |
Foundation.Core.PresentationElement |
Foundation.Core.Usage |
Foundation.Core.Binding |
Foundation.Core.Component |
Foundation.Core.Node |
Foundation.Core.Permission |
Foundation.Core.Comment |
Foundation.Core.Flow |
Foundation.Core.Relationship |
Foundation.Core.ElementResidence |
Foundation.Core.TemplateParameter)*) >
<!ATTLIST Foundation.Core
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL PACKAGE: Data_Types -->
<!-- _______________________________________________________________ -->
<!ELEMENT Foundation.Data_Types.Multiplicity.range
(Foundation.Data_Types.MultiplicityRange)* >
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL CLASS: Multiplicity -->
<!-- _______________________________________________________________ -->
<!ELEMENT Foundation.Data_Types.Multiplicity (XMI.extension*,
Foundation.Data_Types.Multiplicity.range*)?
>
<!ATTLIST Foundation.Data_Types.Multiplicity
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL CLASS: ObjectSetExpression -->
<!-- _______________________________________________________________ -->
<!ELEMENT Foundation.Data_Types.ObjectSetExpression (Foundation.Data_Types.Expression.language?,
Foundation.Data_Types.Expression.body?,
XMI.extension*)? >
<!ATTLIST Foundation.Data_Types.ObjectSetExpression
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL CLASS: TimeExpression -->
<!-- _______________________________________________________________ -->
<!ELEMENT Foundation.Data_Types.TimeExpression (Foundation.Data_Types.Expression.language?,
Foundation.Data_Types.Expression.body?,
XMI.extension*)? >
<!ATTLIST Foundation.Data_Types.TimeExpression
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL CLASS: Expression -->
<!-- _______________________________________________________________ -->
<!ELEMENT Foundation.Data_Types.Expression.language (#PCDATA |
XMI.reference)* >
<!ELEMENT Foundation.Data_Types.Expression.body (#PCDATA |
XMI.reference)* >
<!ELEMENT Foundation.Data_Types.Expression (Foundation.Data_Types.Expression.language?,
Foundation.Data_Types.Expression.body?,
XMI.extension*)? >
<!ATTLIST Foundation.Data_Types.Expression
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL CLASS: BooleanExpression -->
<!-- _______________________________________________________________ -->
<!ELEMENT Foundation.Data_Types.BooleanExpression (Foundation.Data_Types.Expression.language?,
Foundation.Data_Types.Expression.body?,
XMI.extension*)? >
<!ATTLIST Foundation.Data_Types.BooleanExpression
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL CLASS: ActionExpression -->
<!-- _______________________________________________________________ -->
<!ELEMENT Foundation.Data_Types.ActionExpression (Foundation.Data_Types.Expression.language?,
Foundation.Data_Types.Expression.body?,
XMI.extension*)? >
<!ATTLIST Foundation.Data_Types.ActionExpression
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL CLASS: MultiplicityRange -->
<!-- _______________________________________________________________ -->
<!ELEMENT Foundation.Data_Types.MultiplicityRange.lower (#PCDATA |
XMI.reference)* >
<!ELEMENT Foundation.Data_Types.MultiplicityRange.upper (#PCDATA |
XMI.reference)* >
<!ELEMENT Foundation.Data_Types.MultiplicityRange.multiplicity
(Foundation.Data_Types.Multiplicity)? >
<!ELEMENT Foundation.Data_Types.MultiplicityRange (Foundation.Data_Types.MultiplicityRange.lower?,
Foundation.Data_Types.MultiplicityRange.upper?,
XMI.extension*,
Foundation.Data_Types.MultiplicityRange.multiplicity?)?
>
<!ATTLIST Foundation.Data_Types.MultiplicityRange
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL CLASS: IterationExpression -->
<!-- _______________________________________________________________ -->
<!ELEMENT Foundation.Data_Types.IterationExpression (Foundation.Data_Types.Expression.language?,
Foundation.Data_Types.Expression.body?,
XMI.extension*)? >
<!ATTLIST Foundation.Data_Types.IterationExpression
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL CLASS: TypeExpression -->
<!-- _______________________________________________________________ -->
<!ELEMENT Foundation.Data_Types.TypeExpression (Foundation.Data_Types.Expression.language?,
Foundation.Data_Types.Expression.body?,
XMI.extension*)? >
<!ATTLIST Foundation.Data_Types.TypeExpression
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL CLASS: ArgListsExpression -->
<!-- _______________________________________________________________ -->
<!ELEMENT Foundation.Data_Types.ArgListsExpression (Foundation.Data_Types.Expression.language?,
Foundation.Data_Types.Expression.body?,
XMI.extension*)? >
<!ATTLIST Foundation.Data_Types.ArgListsExpression
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL CLASS: MappingExpression -->
<!-- _______________________________________________________________ -->
<!ELEMENT Foundation.Data_Types.MappingExpression (Foundation.Data_Types.Expression.language?,
Foundation.Data_Types.Expression.body?,
XMI.extension*)? >
<!ATTLIST Foundation.Data_Types.MappingExpression
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL CLASS: ProcedureExpression -->
<!-- _______________________________________________________________ -->
<!ELEMENT Foundation.Data_Types.ProcedureExpression (Foundation.Data_Types.Expression.language?,
Foundation.Data_Types.Expression.body?,
XMI.extension*)? >
<!ATTLIST Foundation.Data_Types.ProcedureExpression
%XMI.element.att;
%XMI.link.att;
>
<!ELEMENT Foundation.Data_Types ((Foundation.Data_Types.Multiplicity |
Foundation.Data_Types.ObjectSetExpression |
Foundation.Data_Types.TimeExpression |
Foundation.Data_Types.Expression |
Foundation.Data_Types.BooleanExpression |
Foundation.Data_Types.ActionExpression |
Foundation.Data_Types.MultiplicityRange |
Foundation.Data_Types.IterationExpression |
Foundation.Data_Types.TypeExpression |
Foundation.Data_Types.ArgListsExpression |
Foundation.Data_Types.MappingExpression |
Foundation.Data_Types.ProcedureExpression)*)
>
<!ATTLIST Foundation.Data_Types
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL PACKAGE: Extension_Mechanisms -->
<!-- _______________________________________________________________ -->
<!ELEMENT Foundation.Extension_Mechanisms.Stereotype.requiredTag
(Foundation.Extension_Mechanisms.TaggedValue)* >
<!ELEMENT Foundation.Extension_Mechanisms.Stereotype.stereotypeConstraint
(Foundation.Core.Constraint)* >
<!ELEMENT Foundation.Core.ModelElement.taggedValue
(Foundation.Extension_Mechanisms.TaggedValue)* >
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL CLASS: Stereotype -->
<!-- _______________________________________________________________ -->
<!ELEMENT Foundation.Extension_Mechanisms.Stereotype.icon (#PCDATA |
XMI.reference)*
>
<!ELEMENT Foundation.Extension_Mechanisms.Stereotype.baseClass (#PCDATA |
XMI.reference)*
>
<!ELEMENT Foundation.Extension_Mechanisms.Stereotype.extendedElement (Foundation.Core.ModelElement |
Foundation.Core.Comment |
Foundation.Core.Relationship |
Behavioral_Elements.Use_Cases.Extend |
Behavioral_Elements.Use_Cases.Include |
Foundation.Core.Generalization |
Foundation.Core.Flow |
Foundation.Core.Association |
Foundation.Core.AssociationClass |
Behavioral_Elements.Collaborations.AssociationRole |
Foundation.Core.Dependency |
Foundation.Core.Abstraction |
Foundation.Core.Usage |
Foundation.Core.Binding |
Foundation.Core.Permission |
Foundation.Extension_Mechanisms.TaggedValue |
Behavioral_Elements.Common_Behavior.Instance |
Behavioral_Elements.Common_Behavior.Object |
Behavioral_Elements.Common_Behavior.LinkObject |
Behavioral_Elements.Common_Behavior.DataValue |
Behavioral_Elements.Common_Behavior.ComponentInstance |
Behavioral_Elements.Common_Behavior.NodeInstance |
Behavioral_Elements.Use_Cases.UseCaseInstance |
Behavioral_Elements.Common_Behavior.Action |
Behavioral_Elements.Common_Behavior.CallAction |
Behavioral_Elements.Common_Behavior.SendAction |
Behavioral_Elements.Common_Behavior.ActionSequence |
Behavioral_Elements.Common_Behavior.ReturnAction |
Behavioral_Elements.Common_Behavior.TerminateAction |
Behavioral_Elements.Common_Behavior.DestroyAction |
Behavioral_Elements.Common_Behavior.CreateAction |
Behavioral_Elements.Common_Behavior.UninterpretedAction |
Behavioral_Elements.Common_Behavior.AttributeLink |
Behavioral_Elements.Common_Behavior.Argument |
Behavioral_Elements.Common_Behavior.Link |
Behavioral_Elements.Common_Behavior.LinkEnd |
Behavioral_Elements.Common_Behavior.Stimulus |
Behavioral_Elements.Use_Cases.ExtensionPoint |
Behavioral_Elements.State_Machines.StateMachine |
Behavioral_Elements.Activity_Graphs.ActivityGraph |
Behavioral_Elements.State_Machines.Event |
Behavioral_Elements.State_Machines.TimeEvent |
Behavioral_Elements.State_Machines.CallEvent |
Behavioral_Elements.State_Machines.SignalEvent |
Behavioral_Elements.State_Machines.ChangeEvent |
Behavioral_Elements.State_Machines.Transition |
Behavioral_Elements.State_Machines.StateVertex |
Behavioral_Elements.State_Machines.Pseudostate |
Behavioral_Elements.State_Machines.SynchState |
Behavioral_Elements.State_Machines.StubState |
Behavioral_Elements.State_Machines.State |
Behavioral_Elements.State_Machines.CompositeState |
Behavioral_Elements.State_Machines.SubmachineState |
Behavioral_Elements.Activity_Graphs.SubactivityState |
Behavioral_Elements.State_Machines.SimpleState |
Behavioral_Elements.Activity_Graphs.ObjectFlowState |
Behavioral_Elements.Activity_Graphs.ActionState |
Behavioral_Elements.Activity_Graphs.CallState |
Behavioral_Elements.State_Machines.FinalState |
Behavioral_Elements.State_Machines.Guard |
Behavioral_Elements.Collaborations.Message |
Behavioral_Elements.Collaborations.Interaction |
Behavioral_Elements.Activity_Graphs.Partition |
Foundation.Core.Feature |
Foundation.Core.BehavioralFeature |
Behavioral_Elements.Common_Behavior.Reception |
Foundation.Core.Operation |
Foundation.Core.Method |
Foundation.Core.StructuralFeature |
Foundation.Core.Attribute |
Foundation.Core.GeneralizableElement |
Foundation.Extension_Mechanisms.Stereotype |
Behavioral_Elements.Collaborations.Collaboration |
Model_Management.Package |
Model_Management.Subsystem |
Model_Management.Model |
Foundation.Core.Classifier |
Foundation.Core.Class |
Foundation.Core.DataType |
Foundation.Core.Interface |
Foundation.Core.Component |
Foundation.Core.Node |
Behavioral_Elements.Common_Behavior.Signal |
Behavioral_Elements.Common_Behavior.Exception |
Behavioral_Elements.Use_Cases.UseCase |
Behavioral_Elements.Use_Cases.Actor |
Behavioral_Elements.Collaborations.ClassifierRole |
Behavioral_Elements.Activity_Graphs.ClassifierInState |
Foundation.Core.AssociationEnd |
Behavioral_Elements.Collaborations.AssociationEndRole |
Foundation.Core.Namespace |
Foundation.Core.Parameter |
Foundation.Core.Constraint)*
>
<!ELEMENT Foundation.Extension_Mechanisms.Stereotype (Foundation.Core.ModelElement.name?,
Foundation.Core.ModelElement.visibility?,
Foundation.Core.ModelElement.isSpecification?,
Foundation.Core.GeneralizableElement.isRoot?,
Foundation.Core.GeneralizableElement.isLeaf?,
Foundation.Core.GeneralizableElement.isAbstract?,
Foundation.Extension_Mechanisms.Stereotype.icon?,
Foundation.Extension_Mechanisms.Stereotype.baseClass?,
XMI.extension*,
Foundation.Core.ModelElement.namespace?,
Foundation.Core.ModelElement.clientDependency*,
Foundation.Core.ModelElement.constraint*,
Foundation.Core.ModelElement.supplierDependency*,
Foundation.Core.ModelElement.presentation*,
Foundation.Core.ModelElement.targetFlow*,
Foundation.Core.ModelElement.sourceFlow*,
Foundation.Core.ModelElement.templateParameter3*,
Foundation.Core.ModelElement.binding*,
Foundation.Core.ModelElement.comment*,
Foundation.Core.ModelElement.elementResidence*,
Foundation.Core.ModelElement.templateParameter2*,
Foundation.Core.ModelElement.stereotype?,
Foundation.Core.ModelElement.behavior*,
Foundation.Core.ModelElement.classifierRole*,
Foundation.Core.ModelElement.collaboration*,
Foundation.Core.ModelElement.partition*,
Foundation.Core.ModelElement.elementImport*,
Foundation.Core.GeneralizableElement.generalization*,
Foundation.Core.GeneralizableElement.specialization*,
Foundation.Extension_Mechanisms.Stereotype.extendedElement*,
Foundation.Core.ModelElement.templateParameter*,
Foundation.Core.ModelElement.taggedValue*,
Foundation.Extension_Mechanisms.Stereotype.requiredTag*,
Foundation.Extension_Mechanisms.Stereotype.stereotypeConstraint*)?
>
<!ATTLIST Foundation.Extension_Mechanisms.Stereotype
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL CLASS: TaggedValue -->
<!-- _______________________________________________________________ -->
<!ELEMENT Foundation.Extension_Mechanisms.TaggedValue.tag (#PCDATA |
XMI.reference)*
>
<!ELEMENT Foundation.Extension_Mechanisms.TaggedValue.value (#PCDATA |
XMI.reference)*
>
<!ELEMENT Foundation.Extension_Mechanisms.TaggedValue.stereotype
(Foundation.Extension_Mechanisms.Stereotype)? >
<!ELEMENT Foundation.Extension_Mechanisms.TaggedValue.modelElement (Foundation.Core.ModelElement |
Foundation.Core.Comment |
Foundation.Core.Relationship |
Behavioral_Elements.Use_Cases.Extend |
Behavioral_Elements.Use_Cases.Include |
Foundation.Core.Generalization |
Foundation.Core.Flow |
Foundation.Core.Association |
Foundation.Core.AssociationClass |
Behavioral_Elements.Collaborations.AssociationRole |
Foundation.Core.Dependency |
Foundation.Core.Abstraction |
Foundation.Core.Usage |
Foundation.Core.Binding |
Foundation.Core.Permission |
Foundation.Extension_Mechanisms.TaggedValue |
Behavioral_Elements.Common_Behavior.Instance |
Behavioral_Elements.Common_Behavior.Object |
Behavioral_Elements.Common_Behavior.LinkObject |
Behavioral_Elements.Common_Behavior.DataValue |
Behavioral_Elements.Common_Behavior.ComponentInstance |
Behavioral_Elements.Common_Behavior.NodeInstance |
Behavioral_Elements.Use_Cases.UseCaseInstance |
Behavioral_Elements.Common_Behavior.Action |
Behavioral_Elements.Common_Behavior.CallAction |
Behavioral_Elements.Common_Behavior.SendAction |
Behavioral_Elements.Common_Behavior.ActionSequence |
Behavioral_Elements.Common_Behavior.ReturnAction |
Behavioral_Elements.Common_Behavior.TerminateAction |
Behavioral_Elements.Common_Behavior.DestroyAction |
Behavioral_Elements.Common_Behavior.CreateAction |
Behavioral_Elements.Common_Behavior.UninterpretedAction |
Behavioral_Elements.Common_Behavior.AttributeLink |
Behavioral_Elements.Common_Behavior.Argument |
Behavioral_Elements.Common_Behavior.Link |
Behavioral_Elements.Common_Behavior.LinkEnd |
Behavioral_Elements.Common_Behavior.Stimulus |
Behavioral_Elements.Use_Cases.ExtensionPoint |
Behavioral_Elements.State_Machines.StateMachine |
Behavioral_Elements.Activity_Graphs.ActivityGraph |
Behavioral_Elements.State_Machines.Event |
Behavioral_Elements.State_Machines.TimeEvent |
Behavioral_Elements.State_Machines.CallEvent |
Behavioral_Elements.State_Machines.SignalEvent |
Behavioral_Elements.State_Machines.ChangeEvent |
Behavioral_Elements.State_Machines.Transition |
Behavioral_Elements.State_Machines.StateVertex |
Behavioral_Elements.State_Machines.Pseudostate |
Behavioral_Elements.State_Machines.SynchState |
Behavioral_Elements.State_Machines.StubState |
Behavioral_Elements.State_Machines.State |
Behavioral_Elements.State_Machines.CompositeState |
Behavioral_Elements.State_Machines.SubmachineState |
Behavioral_Elements.Activity_Graphs.SubactivityState |
Behavioral_Elements.State_Machines.SimpleState |
Behavioral_Elements.Activity_Graphs.ObjectFlowState |
Behavioral_Elements.Activity_Graphs.ActionState |
Behavioral_Elements.Activity_Graphs.CallState |
Behavioral_Elements.State_Machines.FinalState |
Behavioral_Elements.State_Machines.Guard |
Behavioral_Elements.Collaborations.Message |
Behavioral_Elements.Collaborations.Interaction |
Behavioral_Elements.Activity_Graphs.Partition |
Foundation.Core.Feature |
Foundation.Core.BehavioralFeature |
Behavioral_Elements.Common_Behavior.Reception |
Foundation.Core.Operation |
Foundation.Core.Method |
Foundation.Core.StructuralFeature |
Foundation.Core.Attribute |
Foundation.Core.GeneralizableElement |
Foundation.Extension_Mechanisms.Stereotype |
Behavioral_Elements.Collaborations.Collaboration |
Model_Management.Package |
Model_Management.Subsystem |
Model_Management.Model |
Foundation.Core.Classifier |
Foundation.Core.Class |
Foundation.Core.DataType |
Foundation.Core.Interface |
Foundation.Core.Component |
Foundation.Core.Node |
Behavioral_Elements.Common_Behavior.Signal |
Behavioral_Elements.Common_Behavior.Exception |
Behavioral_Elements.Use_Cases.UseCase |
Behavioral_Elements.Use_Cases.Actor |
Behavioral_Elements.Collaborations.ClassifierRole |
Behavioral_Elements.Activity_Graphs.ClassifierInState |
Foundation.Core.AssociationEnd |
Behavioral_Elements.Collaborations.AssociationEndRole |
Foundation.Core.Namespace |
Foundation.Core.Parameter |
Foundation.Core.Constraint)?
>
<!ELEMENT Foundation.Extension_Mechanisms.TaggedValue (Foundation.Core.ModelElement.name?,
Foundation.Core.ModelElement.visibility?,
Foundation.Core.ModelElement.isSpecification?,
Foundation.Extension_Mechanisms.TaggedValue.tag?,
Foundation.Extension_Mechanisms.TaggedValue.value?,
XMI.extension*,
Foundation.Core.ModelElement.namespace?,
Foundation.Core.ModelElement.clientDependency*,
Foundation.Core.ModelElement.constraint*,
Foundation.Core.ModelElement.supplierDependency*,
Foundation.Core.ModelElement.presentation*,
Foundation.Core.ModelElement.targetFlow*,
Foundation.Core.ModelElement.sourceFlow*,
Foundation.Core.ModelElement.templateParameter3*,
Foundation.Core.ModelElement.binding*,
Foundation.Core.ModelElement.comment*,
Foundation.Core.ModelElement.elementResidence*,
Foundation.Core.ModelElement.templateParameter2*,
Foundation.Core.ModelElement.stereotype?,
Foundation.Core.ModelElement.behavior*,
Foundation.Core.ModelElement.classifierRole*,
Foundation.Core.ModelElement.collaboration*,
Foundation.Core.ModelElement.partition*,
Foundation.Core.ModelElement.elementImport*,
Foundation.Extension_Mechanisms.TaggedValue.stereotype?,
Foundation.Extension_Mechanisms.TaggedValue.modelElement?,
Foundation.Core.ModelElement.templateParameter*,
Foundation.Core.ModelElement.taggedValue*)?
>
<!ATTLIST Foundation.Extension_Mechanisms.TaggedValue
%XMI.element.att;
%XMI.link.att;
>
<!ELEMENT Foundation.Extension_Mechanisms ((Foundation.Extension_Mechanisms.Stereotype |
Foundation.Extension_Mechanisms.TaggedValue)*)
>
<!ATTLIST Foundation.Extension_Mechanisms
%XMI.element.att;
%XMI.link.att;
>
<!ELEMENT Foundation ((Foundation.Core | Foundation.Data_Types |
Foundation.Extension_Mechanisms)*) >
<!ATTLIST Foundation
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL PACKAGE: Behavioral_Elements -->
<!-- _______________________________________________________________ -->
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL PACKAGE: Common_Behavior -->
<!-- _______________________________________________________________ -->
<!ELEMENT Behavioral_Elements.Common_Behavior.Action.actualArgument
(Behavioral_Elements.Common_Behavior.Argument)* >
<!ELEMENT Behavioral_Elements.Common_Behavior.Instance.slot
(Behavioral_Elements.Common_Behavior.AttributeLink)* >
<!ELEMENT Behavioral_Elements.Common_Behavior.Link.connection
(Behavioral_Elements.Common_Behavior.LinkEnd)* >
<!ELEMENT Behavioral_Elements.Common_Behavior.ActionSequence.action (Behavioral_Elements.Common_Behavior.Action |
Behavioral_Elements.Common_Behavior.CallAction |
Behavioral_Elements.Common_Behavior.SendAction |
Behavioral_Elements.Common_Behavior.ActionSequence |
Behavioral_Elements.Common_Behavior.ReturnAction |
Behavioral_Elements.Common_Behavior.TerminateAction |
Behavioral_Elements.Common_Behavior.DestroyAction |
Behavioral_Elements.Common_Behavior.CreateAction |
Behavioral_Elements.Common_Behavior.UninterpretedAction)*
>
<!ELEMENT Behavioral_Elements.Common_Behavior.LinkEnd.qualifiedValue
(Behavioral_Elements.Common_Behavior.AttributeLink)* >
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL CLASS: Instance -->
<!-- _______________________________________________________________ -->
<!ELEMENT Behavioral_Elements.Common_Behavior.Instance.classifier (Foundation.Core.Classifier |
Foundation.Core.Class |
Foundation.Core.AssociationClass |
Foundation.Core.DataType |
Foundation.Core.Interface |
Foundation.Core.Component |
Foundation.Core.Node |
Behavioral_Elements.Common_Behavior.Signal |
Behavioral_Elements.Common_Behavior.Exception |
Behavioral_Elements.Use_Cases.UseCase |
Behavioral_Elements.Use_Cases.Actor |
Behavioral_Elements.Collaborations.ClassifierRole |
Behavioral_Elements.Activity_Graphs.ClassifierInState |
Model_Management.Subsystem)*
>
<!ELEMENT Behavioral_Elements.Common_Behavior.Instance.attributeLink
(Behavioral_Elements.Common_Behavior.AttributeLink)* >
<!ELEMENT Behavioral_Elements.Common_Behavior.Instance.linkEnd
(Behavioral_Elements.Common_Behavior.LinkEnd)* >
<!ELEMENT Behavioral_Elements.Common_Behavior.Instance.stimulus1
(Behavioral_Elements.Common_Behavior.Stimulus)* >
<!ELEMENT Behavioral_Elements.Common_Behavior.Instance.stimulus3
(Behavioral_Elements.Common_Behavior.Stimulus)* >
<!ELEMENT Behavioral_Elements.Common_Behavior.Instance.componentInstance
(Behavioral_Elements.Common_Behavior.ComponentInstance)? >
<!ELEMENT Behavioral_Elements.Common_Behavior.Instance.stimulus2
(Behavioral_Elements.Common_Behavior.Stimulus)* >
<!ELEMENT Behavioral_Elements.Common_Behavior.Instance (Foundation.Core.ModelElement.name?,
Foundation.Core.ModelElement.visibility?,
Foundation.Core.ModelElement.isSpecification?,
XMI.extension*,
Foundation.Core.ModelElement.namespace?,
Foundation.Core.ModelElement.clientDependency*,
Foundation.Core.ModelElement.constraint*,
Foundation.Core.ModelElement.supplierDependency*,
Foundation.Core.ModelElement.presentation*,
Foundation.Core.ModelElement.targetFlow*,
Foundation.Core.ModelElement.sourceFlow*,
Foundation.Core.ModelElement.templateParameter3*,
Foundation.Core.ModelElement.binding*,
Foundation.Core.ModelElement.comment*,
Foundation.Core.ModelElement.elementResidence*,
Foundation.Core.ModelElement.templateParameter2*,
Foundation.Core.ModelElement.stereotype?,
Foundation.Core.ModelElement.behavior*,
Foundation.Core.ModelElement.classifierRole*,
Foundation.Core.ModelElement.collaboration*,
Foundation.Core.ModelElement.partition*,
Foundation.Core.ModelElement.elementImport*,
Behavioral_Elements.Common_Behavior.Instance.classifier*,
Behavioral_Elements.Common_Behavior.Instance.attributeLink*,
Behavioral_Elements.Common_Behavior.Instance.linkEnd*,
Behavioral_Elements.Common_Behavior.Instance.stimulus1*,
Behavioral_Elements.Common_Behavior.Instance.stimulus3*,
Behavioral_Elements.Common_Behavior.Instance.componentInstance?,
Behavioral_Elements.Common_Behavior.Instance.stimulus2*,
Foundation.Core.ModelElement.templateParameter*,
Foundation.Core.ModelElement.taggedValue*,
Behavioral_Elements.Common_Behavior.Instance.slot*)?
>
<!ATTLIST Behavioral_Elements.Common_Behavior.Instance
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL CLASS: Signal -->
<!-- _______________________________________________________________ -->
<!ELEMENT Behavioral_Elements.Common_Behavior.Signal.reception
(Behavioral_Elements.Common_Behavior.Reception)* >
<!ELEMENT Behavioral_Elements.Common_Behavior.Signal.context (Foundation.Core.BehavioralFeature |
Behavioral_Elements.Common_Behavior.Reception |
Foundation.Core.Operation |
Foundation.Core.Method)*
>
<!ELEMENT Behavioral_Elements.Common_Behavior.Signal.sendAction
(Behavioral_Elements.Common_Behavior.SendAction)* >
<!ELEMENT Behavioral_Elements.Common_Behavior.Signal.occurrence
(Behavioral_Elements.State_Machines.SignalEvent)* >
<!ELEMENT Behavioral_Elements.Common_Behavior.Signal (Foundation.Core.ModelElement.name?,
Foundation.Core.ModelElement.visibility?,
Foundation.Core.ModelElement.isSpecification?,
Foundation.Core.GeneralizableElement.isRoot?,
Foundation.Core.GeneralizableElement.isLeaf?,
Foundation.Core.GeneralizableElement.isAbstract?,
XMI.extension*,
Foundation.Core.ModelElement.namespace?,
Foundation.Core.ModelElement.clientDependency*,
Foundation.Core.ModelElement.constraint*,
Foundation.Core.ModelElement.supplierDependency*,
Foundation.Core.ModelElement.presentation*,
Foundation.Core.ModelElement.targetFlow*,
Foundation.Core.ModelElement.sourceFlow*,
Foundation.Core.ModelElement.templateParameter3*,
Foundation.Core.ModelElement.binding*,
Foundation.Core.ModelElement.comment*,
Foundation.Core.ModelElement.elementResidence*,
Foundation.Core.ModelElement.templateParameter2*,
Foundation.Core.ModelElement.stereotype?,
Foundation.Core.ModelElement.behavior*,
Foundation.Core.ModelElement.classifierRole*,
Foundation.Core.ModelElement.collaboration*,
Foundation.Core.ModelElement.partition*,
Foundation.Core.ModelElement.elementImport*,
Foundation.Core.GeneralizableElement.generalization*,
Foundation.Core.GeneralizableElement.specialization*,
Foundation.Core.Classifier.participant*,
Foundation.Core.Classifier.powertypeRange*,
Foundation.Core.Classifier.instance*,
Foundation.Core.Classifier.createAction*,
Foundation.Core.Classifier.classifierRole*,
Foundation.Core.Classifier.collaboration*,
Foundation.Core.Classifier.classifierInState*,
Foundation.Core.Classifier.objectFlowState*,
Behavioral_Elements.Common_Behavior.Signal.reception*,
Behavioral_Elements.Common_Behavior.Signal.context*,
Behavioral_Elements.Common_Behavior.Signal.sendAction*,
Behavioral_Elements.Common_Behavior.Signal.occurrence*,
Foundation.Core.ModelElement.templateParameter*,
Foundation.Core.ModelElement.taggedValue*,
Foundation.Core.Namespace.ownedElement*,
Foundation.Core.Classifier.feature*)?
>
<!ATTLIST Behavioral_Elements.Common_Behavior.Signal
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL CLASS: CreateAction -->
<!-- _______________________________________________________________ -->
<!ELEMENT Behavioral_Elements.Common_Behavior.CreateAction.instantiation (Foundation.Core.Classifier |
Foundation.Core.Class |
Foundation.Core.AssociationClass |
Foundation.Core.DataType |
Foundation.Core.Interface |
Foundation.Core.Component |
Foundation.Core.Node |
Behavioral_Elements.Common_Behavior.Signal |
Behavioral_Elements.Common_Behavior.Exception |
Behavioral_Elements.Use_Cases.UseCase |
Behavioral_Elements.Use_Cases.Actor |
Behavioral_Elements.Collaborations.ClassifierRole |
Behavioral_Elements.Activity_Graphs.ClassifierInState |
Model_Management.Subsystem)?
>
<!ELEMENT Behavioral_Elements.Common_Behavior.CreateAction (Foundation.Core.ModelElement.name?,
Foundation.Core.ModelElement.visibility?,
Foundation.Core.ModelElement.isSpecification?,
Behavioral_Elements.Common_Behavior.Action.recurrence?,
Behavioral_Elements.Common_Behavior.Action.target?,
Behavioral_Elements.Common_Behavior.Action.isAsynchronous?,
Behavioral_Elements.Common_Behavior.Action.script?,
XMI.extension*,
Foundation.Core.ModelElement.namespace?,
Foundation.Core.ModelElement.clientDependency*,
Foundation.Core.ModelElement.constraint*,
Foundation.Core.ModelElement.supplierDependency*,
Foundation.Core.ModelElement.presentation*,
Foundation.Core.ModelElement.targetFlow*,
Foundation.Core.ModelElement.sourceFlow*,
Foundation.Core.ModelElement.templateParameter3*,
Foundation.Core.ModelElement.binding*,
Foundation.Core.ModelElement.comment*,
Foundation.Core.ModelElement.elementResidence*,
Foundation.Core.ModelElement.templateParameter2*,
Foundation.Core.ModelElement.stereotype?,
Foundation.Core.ModelElement.behavior*,
Foundation.Core.ModelElement.classifierRole*,
Foundation.Core.ModelElement.collaboration*,
Foundation.Core.ModelElement.partition*,
Foundation.Core.ModelElement.elementImport*,
Behavioral_Elements.Common_Behavior.Action.actionSequence?,
Behavioral_Elements.Common_Behavior.Action.stimulus*,
Behavioral_Elements.Common_Behavior.Action.state1?,
Behavioral_Elements.Common_Behavior.Action.state2?,
Behavioral_Elements.Common_Behavior.Action.transition?,
Behavioral_Elements.Common_Behavior.Action.state3?,
Behavioral_Elements.Common_Behavior.Action.message*,
Behavioral_Elements.Common_Behavior.CreateAction.instantiation?,
Foundation.Core.ModelElement.templateParameter*,
Foundation.Core.ModelElement.taggedValue*,
Behavioral_Elements.Common_Behavior.Action.actualArgument*)?
>
<!ATTLIST Behavioral_Elements.Common_Behavior.CreateAction
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL CLASS: DestroyAction -->
<!-- _______________________________________________________________ -->
<!ELEMENT Behavioral_Elements.Common_Behavior.DestroyAction (Foundation.Core.ModelElement.name?,
Foundation.Core.ModelElement.visibility?,
Foundation.Core.ModelElement.isSpecification?,
Behavioral_Elements.Common_Behavior.Action.recurrence?,
Behavioral_Elements.Common_Behavior.Action.target?,
Behavioral_Elements.Common_Behavior.Action.isAsynchronous?,
Behavioral_Elements.Common_Behavior.Action.script?,
XMI.extension*,
Foundation.Core.ModelElement.namespace?,
Foundation.Core.ModelElement.clientDependency*,
Foundation.Core.ModelElement.constraint*,
Foundation.Core.ModelElement.supplierDependency*,
Foundation.Core.ModelElement.presentation*,
Foundation.Core.ModelElement.targetFlow*,
Foundation.Core.ModelElement.sourceFlow*,
Foundation.Core.ModelElement.templateParameter3*,
Foundation.Core.ModelElement.binding*,
Foundation.Core.ModelElement.comment*,
Foundation.Core.ModelElement.elementResidence*,
Foundation.Core.ModelElement.templateParameter2*,
Foundation.Core.ModelElement.stereotype?,
Foundation.Core.ModelElement.behavior*,
Foundation.Core.ModelElement.classifierRole*,
Foundation.Core.ModelElement.collaboration*,
Foundation.Core.ModelElement.partition*,
Foundation.Core.ModelElement.elementImport*,
Behavioral_Elements.Common_Behavior.Action.actionSequence?,
Behavioral_Elements.Common_Behavior.Action.stimulus*,
Behavioral_Elements.Common_Behavior.Action.state1?,
Behavioral_Elements.Common_Behavior.Action.state2?,
Behavioral_Elements.Common_Behavior.Action.transition?,
Behavioral_Elements.Common_Behavior.Action.state3?,
Behavioral_Elements.Common_Behavior.Action.message*,
Foundation.Core.ModelElement.templateParameter*,
Foundation.Core.ModelElement.taggedValue*,
Behavioral_Elements.Common_Behavior.Action.actualArgument*)?
>
<!ATTLIST Behavioral_Elements.Common_Behavior.DestroyAction
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL CLASS: UninterpretedAction -->
<!-- _______________________________________________________________ -->
<!ELEMENT Behavioral_Elements.Common_Behavior.UninterpretedAction (Foundation.Core.ModelElement.name?,
Foundation.Core.ModelElement.visibility?,
Foundation.Core.ModelElement.isSpecification?,
Behavioral_Elements.Common_Behavior.Action.recurrence?,
Behavioral_Elements.Common_Behavior.Action.target?,
Behavioral_Elements.Common_Behavior.Action.isAsynchronous?,
Behavioral_Elements.Common_Behavior.Action.script?,
XMI.extension*,
Foundation.Core.ModelElement.namespace?,
Foundation.Core.ModelElement.clientDependency*,
Foundation.Core.ModelElement.constraint*,
Foundation.Core.ModelElement.supplierDependency*,
Foundation.Core.ModelElement.presentation*,
Foundation.Core.ModelElement.targetFlow*,
Foundation.Core.ModelElement.sourceFlow*,
Foundation.Core.ModelElement.templateParameter3*,
Foundation.Core.ModelElement.binding*,
Foundation.Core.ModelElement.comment*,
Foundation.Core.ModelElement.elementResidence*,
Foundation.Core.ModelElement.templateParameter2*,
Foundation.Core.ModelElement.stereotype?,
Foundation.Core.ModelElement.behavior*,
Foundation.Core.ModelElement.classifierRole*,
Foundation.Core.ModelElement.collaboration*,
Foundation.Core.ModelElement.partition*,
Foundation.Core.ModelElement.elementImport*,
Behavioral_Elements.Common_Behavior.Action.actionSequence?,
Behavioral_Elements.Common_Behavior.Action.stimulus*,
Behavioral_Elements.Common_Behavior.Action.state1?,
Behavioral_Elements.Common_Behavior.Action.state2?,
Behavioral_Elements.Common_Behavior.Action.transition?,
Behavioral_Elements.Common_Behavior.Action.state3?,
Behavioral_Elements.Common_Behavior.Action.message*,
Foundation.Core.ModelElement.templateParameter*,
Foundation.Core.ModelElement.taggedValue*,
Behavioral_Elements.Common_Behavior.Action.actualArgument*)?
>
<!ATTLIST Behavioral_Elements.Common_Behavior.UninterpretedAction
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL CLASS: Action -->
<!-- _______________________________________________________________ -->
<!ELEMENT Behavioral_Elements.Common_Behavior.Action.recurrence
(Foundation.Data_Types.IterationExpression) >
<!ELEMENT Behavioral_Elements.Common_Behavior.Action.target
(Foundation.Data_Types.ObjectSetExpression) >
<!ELEMENT Behavioral_Elements.Common_Behavior.Action.isAsynchronous
EMPTY >
<!ATTLIST Behavioral_Elements.Common_Behavior.Action.isAsynchronous
xmi.value ( true | false ) #REQUIRED
>
<!ELEMENT Behavioral_Elements.Common_Behavior.Action.script
(Foundation.Data_Types.ActionExpression) >
<!ELEMENT Behavioral_Elements.Common_Behavior.Action.actionSequence
(Behavioral_Elements.Common_Behavior.ActionSequence)? >
<!ELEMENT Behavioral_Elements.Common_Behavior.Action.stimulus
(Behavioral_Elements.Common_Behavior.Stimulus)* >
<!ELEMENT Behavioral_Elements.Common_Behavior.Action.state1 (Behavioral_Elements.State_Machines.State |
Behavioral_Elements.State_Machines.CompositeState |
Behavioral_Elements.State_Machines.SubmachineState |
Behavioral_Elements.Activity_Graphs.SubactivityState |
Behavioral_Elements.State_Machines.SimpleState |
Behavioral_Elements.Activity_Graphs.ObjectFlowState |
Behavioral_Elements.Activity_Graphs.ActionState |
Behavioral_Elements.Activity_Graphs.CallState |
Behavioral_Elements.State_Machines.FinalState)?
>
<!ELEMENT Behavioral_Elements.Common_Behavior.Action.state2 (Behavioral_Elements.State_Machines.State |
Behavioral_Elements.State_Machines.CompositeState |
Behavioral_Elements.State_Machines.SubmachineState |
Behavioral_Elements.Activity_Graphs.SubactivityState |
Behavioral_Elements.State_Machines.SimpleState |
Behavioral_Elements.Activity_Graphs.ObjectFlowState |
Behavioral_Elements.Activity_Graphs.ActionState |
Behavioral_Elements.Activity_Graphs.CallState |
Behavioral_Elements.State_Machines.FinalState)?
>
<!ELEMENT Behavioral_Elements.Common_Behavior.Action.transition
(Behavioral_Elements.State_Machines.Transition)? >
<!ELEMENT Behavioral_Elements.Common_Behavior.Action.state3 (Behavioral_Elements.State_Machines.State |
Behavioral_Elements.State_Machines.CompositeState |
Behavioral_Elements.State_Machines.SubmachineState |
Behavioral_Elements.Activity_Graphs.SubactivityState |
Behavioral_Elements.State_Machines.SimpleState |
Behavioral_Elements.Activity_Graphs.ObjectFlowState |
Behavioral_Elements.Activity_Graphs.ActionState |
Behavioral_Elements.Activity_Graphs.CallState |
Behavioral_Elements.State_Machines.FinalState)?
>
<!ELEMENT Behavioral_Elements.Common_Behavior.Action.message
(Behavioral_Elements.Collaborations.Message)* >
<!ELEMENT Behavioral_Elements.Common_Behavior.Action (Foundation.Core.ModelElement.name?,
Foundation.Core.ModelElement.visibility?,
Foundation.Core.ModelElement.isSpecification?,
Behavioral_Elements.Common_Behavior.Action.recurrence?,
Behavioral_Elements.Common_Behavior.Action.target?,
Behavioral_Elements.Common_Behavior.Action.isAsynchronous?,
Behavioral_Elements.Common_Behavior.Action.script?,
XMI.extension*,
Foundation.Core.ModelElement.namespace?,
Foundation.Core.ModelElement.clientDependency*,
Foundation.Core.ModelElement.constraint*,
Foundation.Core.ModelElement.supplierDependency*,
Foundation.Core.ModelElement.presentation*,
Foundation.Core.ModelElement.targetFlow*,
Foundation.Core.ModelElement.sourceFlow*,
Foundation.Core.ModelElement.templateParameter3*,
Foundation.Core.ModelElement.binding*,
Foundation.Core.ModelElement.comment*,
Foundation.Core.ModelElement.elementResidence*,
Foundation.Core.ModelElement.templateParameter2*,
Foundation.Core.ModelElement.stereotype?,
Foundation.Core.ModelElement.behavior*,
Foundation.Core.ModelElement.classifierRole*,
Foundation.Core.ModelElement.collaboration*,
Foundation.Core.ModelElement.partition*,
Foundation.Core.ModelElement.elementImport*,
Behavioral_Elements.Common_Behavior.Action.actionSequence?,
Behavioral_Elements.Common_Behavior.Action.stimulus*,
Behavioral_Elements.Common_Behavior.Action.state1?,
Behavioral_Elements.Common_Behavior.Action.state2?,
Behavioral_Elements.Common_Behavior.Action.transition?,
Behavioral_Elements.Common_Behavior.Action.state3?,
Behavioral_Elements.Common_Behavior.Action.message*,
Foundation.Core.ModelElement.templateParameter*,
Foundation.Core.ModelElement.taggedValue*,
Behavioral_Elements.Common_Behavior.Action.actualArgument*)?
>
<!ATTLIST Behavioral_Elements.Common_Behavior.Action
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL CLASS: AttributeLink -->
<!-- _______________________________________________________________ -->
<!ELEMENT Behavioral_Elements.Common_Behavior.AttributeLink.attribute
(Foundation.Core.Attribute)? >
<!ELEMENT Behavioral_Elements.Common_Behavior.AttributeLink.value (Behavioral_Elements.Common_Behavior.Instance |
Behavioral_Elements.Common_Behavior.Object |
Behavioral_Elements.Common_Behavior.LinkObject |
Behavioral_Elements.Common_Behavior.DataValue |
Behavioral_Elements.Common_Behavior.ComponentInstance |
Behavioral_Elements.Common_Behavior.NodeInstance |
Behavioral_Elements.Use_Cases.UseCaseInstance)?
>
<!ELEMENT Behavioral_Elements.Common_Behavior.AttributeLink.instance (Behavioral_Elements.Common_Behavior.Instance |
Behavioral_Elements.Common_Behavior.Object |
Behavioral_Elements.Common_Behavior.LinkObject |
Behavioral_Elements.Common_Behavior.DataValue |
Behavioral_Elements.Common_Behavior.ComponentInstance |
Behavioral_Elements.Common_Behavior.NodeInstance |
Behavioral_Elements.Use_Cases.UseCaseInstance)?
>
<!ELEMENT Behavioral_Elements.Common_Behavior.AttributeLink.linkEnd
(Behavioral_Elements.Common_Behavior.LinkEnd)? >
<!ELEMENT Behavioral_Elements.Common_Behavior.AttributeLink (Foundation.Core.ModelElement.name?,
Foundation.Core.ModelElement.visibility?,
Foundation.Core.ModelElement.isSpecification?,
XMI.extension*,
Foundation.Core.ModelElement.namespace?,
Foundation.Core.ModelElement.clientDependency*,
Foundation.Core.ModelElement.constraint*,
Foundation.Core.ModelElement.supplierDependency*,
Foundation.Core.ModelElement.presentation*,
Foundation.Core.ModelElement.targetFlow*,
Foundation.Core.ModelElement.sourceFlow*,
Foundation.Core.ModelElement.templateParameter3*,
Foundation.Core.ModelElement.binding*,
Foundation.Core.ModelElement.comment*,
Foundation.Core.ModelElement.elementResidence*,
Foundation.Core.ModelElement.templateParameter2*,
Foundation.Core.ModelElement.stereotype?,
Foundation.Core.ModelElement.behavior*,
Foundation.Core.ModelElement.classifierRole*,
Foundation.Core.ModelElement.collaboration*,
Foundation.Core.ModelElement.partition*,
Foundation.Core.ModelElement.elementImport*,
Behavioral_Elements.Common_Behavior.AttributeLink.attribute?,
Behavioral_Elements.Common_Behavior.AttributeLink.value?,
Behavioral_Elements.Common_Behavior.AttributeLink.instance?,
Behavioral_Elements.Common_Behavior.AttributeLink.linkEnd?,
Foundation.Core.ModelElement.templateParameter*,
Foundation.Core.ModelElement.taggedValue*)?
>
<!ATTLIST Behavioral_Elements.Common_Behavior.AttributeLink
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL CLASS: LinkObject -->
<!-- _______________________________________________________________ -->
<!ELEMENT Behavioral_Elements.Common_Behavior.LinkObject (Foundation.Core.ModelElement.name?,
Foundation.Core.ModelElement.visibility?,
Foundation.Core.ModelElement.isSpecification?,
XMI.extension*,
Foundation.Core.ModelElement.namespace?,
Foundation.Core.ModelElement.clientDependency*,
Foundation.Core.ModelElement.constraint*,
Foundation.Core.ModelElement.supplierDependency*,
Foundation.Core.ModelElement.presentation*,
Foundation.Core.ModelElement.targetFlow*,
Foundation.Core.ModelElement.sourceFlow*,
Foundation.Core.ModelElement.templateParameter3*,
Foundation.Core.ModelElement.binding*,
Foundation.Core.ModelElement.comment*,
Foundation.Core.ModelElement.elementResidence*,
Foundation.Core.ModelElement.templateParameter2*,
Foundation.Core.ModelElement.stereotype?,
Foundation.Core.ModelElement.behavior*,
Foundation.Core.ModelElement.classifierRole*,
Foundation.Core.ModelElement.collaboration*,
Foundation.Core.ModelElement.partition*,
Foundation.Core.ModelElement.elementImport*,
Behavioral_Elements.Common_Behavior.Instance.classifier*,
Behavioral_Elements.Common_Behavior.Instance.attributeLink*,
Behavioral_Elements.Common_Behavior.Instance.linkEnd*,
Behavioral_Elements.Common_Behavior.Instance.stimulus1*,
Behavioral_Elements.Common_Behavior.Instance.stimulus3*,
Behavioral_Elements.Common_Behavior.Instance.componentInstance?,
Behavioral_Elements.Common_Behavior.Instance.stimulus2*,
Behavioral_Elements.Common_Behavior.Link.association?,
Behavioral_Elements.Common_Behavior.Link.stimulus*,
Foundation.Core.ModelElement.templateParameter*,
Foundation.Core.ModelElement.taggedValue*,
Behavioral_Elements.Common_Behavior.Instance.slot*,
Behavioral_Elements.Common_Behavior.Link.connection*)?
>
<!ATTLIST Behavioral_Elements.Common_Behavior.LinkObject
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL CLASS: Object -->
<!-- _______________________________________________________________ -->
<!ELEMENT Behavioral_Elements.Common_Behavior.Object (Foundation.Core.ModelElement.name?,
Foundation.Core.ModelElement.visibility?,
Foundation.Core.ModelElement.isSpecification?,
XMI.extension*,
Foundation.Core.ModelElement.namespace?,
Foundation.Core.ModelElement.clientDependency*,
Foundation.Core.ModelElement.constraint*,
Foundation.Core.ModelElement.supplierDependency*,
Foundation.Core.ModelElement.presentation*,
Foundation.Core.ModelElement.targetFlow*,
Foundation.Core.ModelElement.sourceFlow*,
Foundation.Core.ModelElement.templateParameter3*,
Foundation.Core.ModelElement.binding*,
Foundation.Core.ModelElement.comment*,
Foundation.Core.ModelElement.elementResidence*,
Foundation.Core.ModelElement.templateParameter2*,
Foundation.Core.ModelElement.stereotype?,
Foundation.Core.ModelElement.behavior*,
Foundation.Core.ModelElement.classifierRole*,
Foundation.Core.ModelElement.collaboration*,
Foundation.Core.ModelElement.partition*,
Foundation.Core.ModelElement.elementImport*,
Behavioral_Elements.Common_Behavior.Instance.classifier*,
Behavioral_Elements.Common_Behavior.Instance.attributeLink*,
Behavioral_Elements.Common_Behavior.Instance.linkEnd*,
Behavioral_Elements.Common_Behavior.Instance.stimulus1*,
Behavioral_Elements.Common_Behavior.Instance.stimulus3*,
Behavioral_Elements.Common_Behavior.Instance.componentInstance?,
Behavioral_Elements.Common_Behavior.Instance.stimulus2*,
Foundation.Core.ModelElement.templateParameter*,
Foundation.Core.ModelElement.taggedValue*,
Behavioral_Elements.Common_Behavior.Instance.slot*)?
>
<!ATTLIST Behavioral_Elements.Common_Behavior.Object
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL CLASS: DataValue -->
<!-- _______________________________________________________________ -->
<!ELEMENT Behavioral_Elements.Common_Behavior.DataValue (Foundation.Core.ModelElement.name?,
Foundation.Core.ModelElement.visibility?,
Foundation.Core.ModelElement.isSpecification?,
XMI.extension*,
Foundation.Core.ModelElement.namespace?,
Foundation.Core.ModelElement.clientDependency*,
Foundation.Core.ModelElement.constraint*,
Foundation.Core.ModelElement.supplierDependency*,
Foundation.Core.ModelElement.presentation*,
Foundation.Core.ModelElement.targetFlow*,
Foundation.Core.ModelElement.sourceFlow*,
Foundation.Core.ModelElement.templateParameter3*,
Foundation.Core.ModelElement.binding*,
Foundation.Core.ModelElement.comment*,
Foundation.Core.ModelElement.elementResidence*,
Foundation.Core.ModelElement.templateParameter2*,
Foundation.Core.ModelElement.stereotype?,
Foundation.Core.ModelElement.behavior*,
Foundation.Core.ModelElement.classifierRole*,
Foundation.Core.ModelElement.collaboration*,
Foundation.Core.ModelElement.partition*,
Foundation.Core.ModelElement.elementImport*,
Behavioral_Elements.Common_Behavior.Instance.classifier*,
Behavioral_Elements.Common_Behavior.Instance.attributeLink*,
Behavioral_Elements.Common_Behavior.Instance.linkEnd*,
Behavioral_Elements.Common_Behavior.Instance.stimulus1*,
Behavioral_Elements.Common_Behavior.Instance.stimulus3*,
Behavioral_Elements.Common_Behavior.Instance.componentInstance?,
Behavioral_Elements.Common_Behavior.Instance.stimulus2*,
Foundation.Core.ModelElement.templateParameter*,
Foundation.Core.ModelElement.taggedValue*,
Behavioral_Elements.Common_Behavior.Instance.slot*)?
>
<!ATTLIST Behavioral_Elements.Common_Behavior.DataValue
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL CLASS: CallAction -->
<!-- _______________________________________________________________ -->
<!ELEMENT Behavioral_Elements.Common_Behavior.CallAction.operation
(Foundation.Core.Operation)? >
<!ELEMENT Behavioral_Elements.Common_Behavior.CallAction (Foundation.Core.ModelElement.name?,
Foundation.Core.ModelElement.visibility?,
Foundation.Core.ModelElement.isSpecification?,
Behavioral_Elements.Common_Behavior.Action.recurrence?,
Behavioral_Elements.Common_Behavior.Action.target?,
Behavioral_Elements.Common_Behavior.Action.isAsynchronous?,
Behavioral_Elements.Common_Behavior.Action.script?,
XMI.extension*,
Foundation.Core.ModelElement.namespace?,
Foundation.Core.ModelElement.clientDependency*,
Foundation.Core.ModelElement.constraint*,
Foundation.Core.ModelElement.supplierDependency*,
Foundation.Core.ModelElement.presentation*,
Foundation.Core.ModelElement.targetFlow*,
Foundation.Core.ModelElement.sourceFlow*,
Foundation.Core.ModelElement.templateParameter3*,
Foundation.Core.ModelElement.binding*,
Foundation.Core.ModelElement.comment*,
Foundation.Core.ModelElement.elementResidence*,
Foundation.Core.ModelElement.templateParameter2*,
Foundation.Core.ModelElement.stereotype?,
Foundation.Core.ModelElement.behavior*,
Foundation.Core.ModelElement.classifierRole*,
Foundation.Core.ModelElement.collaboration*,
Foundation.Core.ModelElement.partition*,
Foundation.Core.ModelElement.elementImport*,
Behavioral_Elements.Common_Behavior.Action.actionSequence?,
Behavioral_Elements.Common_Behavior.Action.stimulus*,
Behavioral_Elements.Common_Behavior.Action.state1?,
Behavioral_Elements.Common_Behavior.Action.state2?,
Behavioral_Elements.Common_Behavior.Action.transition?,
Behavioral_Elements.Common_Behavior.Action.state3?,
Behavioral_Elements.Common_Behavior.Action.message*,
Behavioral_Elements.Common_Behavior.CallAction.operation?,
Foundation.Core.ModelElement.templateParameter*,
Foundation.Core.ModelElement.taggedValue*,
Behavioral_Elements.Common_Behavior.Action.actualArgument*)?
>
<!ATTLIST Behavioral_Elements.Common_Behavior.CallAction
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL CLASS: SendAction -->
<!-- _______________________________________________________________ -->
<!ELEMENT Behavioral_Elements.Common_Behavior.SendAction.signal (Behavioral_Elements.Common_Behavior.Signal |
Behavioral_Elements.Common_Behavior.Exception)?
>
<!ELEMENT Behavioral_Elements.Common_Behavior.SendAction (Foundation.Core.ModelElement.name?,
Foundation.Core.ModelElement.visibility?,
Foundation.Core.ModelElement.isSpecification?,
Behavioral_Elements.Common_Behavior.Action.recurrence?,
Behavioral_Elements.Common_Behavior.Action.target?,
Behavioral_Elements.Common_Behavior.Action.isAsynchronous?,
Behavioral_Elements.Common_Behavior.Action.script?,
XMI.extension*,
Foundation.Core.ModelElement.namespace?,
Foundation.Core.ModelElement.clientDependency*,
Foundation.Core.ModelElement.constraint*,
Foundation.Core.ModelElement.supplierDependency*,
Foundation.Core.ModelElement.presentation*,
Foundation.Core.ModelElement.targetFlow*,
Foundation.Core.ModelElement.sourceFlow*,
Foundation.Core.ModelElement.templateParameter3*,
Foundation.Core.ModelElement.binding*,
Foundation.Core.ModelElement.comment*,
Foundation.Core.ModelElement.elementResidence*,
Foundation.Core.ModelElement.templateParameter2*,
Foundation.Core.ModelElement.stereotype?,
Foundation.Core.ModelElement.behavior*,
Foundation.Core.ModelElement.classifierRole*,
Foundation.Core.ModelElement.collaboration*,
Foundation.Core.ModelElement.partition*,
Foundation.Core.ModelElement.elementImport*,
Behavioral_Elements.Common_Behavior.Action.actionSequence?,
Behavioral_Elements.Common_Behavior.Action.stimulus*,
Behavioral_Elements.Common_Behavior.Action.state1?,
Behavioral_Elements.Common_Behavior.Action.state2?,
Behavioral_Elements.Common_Behavior.Action.transition?,
Behavioral_Elements.Common_Behavior.Action.state3?,
Behavioral_Elements.Common_Behavior.Action.message*,
Behavioral_Elements.Common_Behavior.SendAction.signal?,
Foundation.Core.ModelElement.templateParameter*,
Foundation.Core.ModelElement.taggedValue*,
Behavioral_Elements.Common_Behavior.Action.actualArgument*)?
>
<!ATTLIST Behavioral_Elements.Common_Behavior.SendAction
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL CLASS: ActionSequence -->
<!-- _______________________________________________________________ -->
<!ELEMENT Behavioral_Elements.Common_Behavior.ActionSequence (Foundation.Core.ModelElement.name?,
Foundation.Core.ModelElement.visibility?,
Foundation.Core.ModelElement.isSpecification?,
Behavioral_Elements.Common_Behavior.Action.recurrence?,
Behavioral_Elements.Common_Behavior.Action.target?,
Behavioral_Elements.Common_Behavior.Action.isAsynchronous?,
Behavioral_Elements.Common_Behavior.Action.script?,
XMI.extension*,
Foundation.Core.ModelElement.namespace?,
Foundation.Core.ModelElement.clientDependency*,
Foundation.Core.ModelElement.constraint*,
Foundation.Core.ModelElement.supplierDependency*,
Foundation.Core.ModelElement.presentation*,
Foundation.Core.ModelElement.targetFlow*,
Foundation.Core.ModelElement.sourceFlow*,
Foundation.Core.ModelElement.templateParameter3*,
Foundation.Core.ModelElement.binding*,
Foundation.Core.ModelElement.comment*,
Foundation.Core.ModelElement.elementResidence*,
Foundation.Core.ModelElement.templateParameter2*,
Foundation.Core.ModelElement.stereotype?,
Foundation.Core.ModelElement.behavior*,
Foundation.Core.ModelElement.classifierRole*,
Foundation.Core.ModelElement.collaboration*,
Foundation.Core.ModelElement.partition*,
Foundation.Core.ModelElement.elementImport*,
Behavioral_Elements.Common_Behavior.Action.actionSequence?,
Behavioral_Elements.Common_Behavior.Action.stimulus*,
Behavioral_Elements.Common_Behavior.Action.state1?,
Behavioral_Elements.Common_Behavior.Action.state2?,
Behavioral_Elements.Common_Behavior.Action.transition?,
Behavioral_Elements.Common_Behavior.Action.state3?,
Behavioral_Elements.Common_Behavior.Action.message*,
Foundation.Core.ModelElement.templateParameter*,
Foundation.Core.ModelElement.taggedValue*,
Behavioral_Elements.Common_Behavior.Action.actualArgument*,
Behavioral_Elements.Common_Behavior.ActionSequence.action*)?
>
<!ATTLIST Behavioral_Elements.Common_Behavior.ActionSequence
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL CLASS: Argument -->
<!-- _______________________________________________________________ -->
<!ELEMENT Behavioral_Elements.Common_Behavior.Argument.value (Foundation.Data_Types.Expression |
Foundation.Data_Types.BooleanExpression |
Foundation.Data_Types.ActionExpression |
Foundation.Data_Types.IterationExpression |
Foundation.Data_Types.TypeExpression |
Foundation.Data_Types.ArgListsExpression |
Foundation.Data_Types.MappingExpression |
Foundation.Data_Types.ProcedureExpression |
Foundation.Data_Types.TimeExpression |
Foundation.Data_Types.ObjectSetExpression)
>
<!ELEMENT Behavioral_Elements.Common_Behavior.Argument.action (Behavioral_Elements.Common_Behavior.Action |
Behavioral_Elements.Common_Behavior.CallAction |
Behavioral_Elements.Common_Behavior.SendAction |
Behavioral_Elements.Common_Behavior.ActionSequence |
Behavioral_Elements.Common_Behavior.ReturnAction |
Behavioral_Elements.Common_Behavior.TerminateAction |
Behavioral_Elements.Common_Behavior.DestroyAction |
Behavioral_Elements.Common_Behavior.CreateAction |
Behavioral_Elements.Common_Behavior.UninterpretedAction)?
>
<!ELEMENT Behavioral_Elements.Common_Behavior.Argument (Foundation.Core.ModelElement.name?,
Foundation.Core.ModelElement.visibility?,
Foundation.Core.ModelElement.isSpecification?,
Behavioral_Elements.Common_Behavior.Argument.value?,
XMI.extension*,
Foundation.Core.ModelElement.namespace?,
Foundation.Core.ModelElement.clientDependency*,
Foundation.Core.ModelElement.constraint*,
Foundation.Core.ModelElement.supplierDependency*,
Foundation.Core.ModelElement.presentation*,
Foundation.Core.ModelElement.targetFlow*,
Foundation.Core.ModelElement.sourceFlow*,
Foundation.Core.ModelElement.templateParameter3*,
Foundation.Core.ModelElement.binding*,
Foundation.Core.ModelElement.comment*,
Foundation.Core.ModelElement.elementResidence*,
Foundation.Core.ModelElement.templateParameter2*,
Foundation.Core.ModelElement.stereotype?,
Foundation.Core.ModelElement.behavior*,
Foundation.Core.ModelElement.classifierRole*,
Foundation.Core.ModelElement.collaboration*,
Foundation.Core.ModelElement.partition*,
Foundation.Core.ModelElement.elementImport*,
Behavioral_Elements.Common_Behavior.Argument.action?,
Foundation.Core.ModelElement.templateParameter*,
Foundation.Core.ModelElement.taggedValue*)?
>
<!ATTLIST Behavioral_Elements.Common_Behavior.Argument
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL CLASS: Reception -->
<!-- _______________________________________________________________ -->
<!ELEMENT Behavioral_Elements.Common_Behavior.Reception.specification (#PCDATA |
XMI.reference)*
>
<!ELEMENT Behavioral_Elements.Common_Behavior.Reception.isRoot EMPTY >
<!ATTLIST Behavioral_Elements.Common_Behavior.Reception.isRoot
xmi.value ( true | false ) #REQUIRED
>
<!ELEMENT Behavioral_Elements.Common_Behavior.Reception.isLeaf EMPTY >
<!ATTLIST Behavioral_Elements.Common_Behavior.Reception.isLeaf
xmi.value ( true | false ) #REQUIRED
>
<!ELEMENT Behavioral_Elements.Common_Behavior.Reception.isAbstract
EMPTY >
<!ATTLIST Behavioral_Elements.Common_Behavior.Reception.isAbstract
xmi.value ( true | false ) #REQUIRED
>
<!ELEMENT Behavioral_Elements.Common_Behavior.Reception.signal (Behavioral_Elements.Common_Behavior.Signal |
Behavioral_Elements.Common_Behavior.Exception)?
>
<!ELEMENT Behavioral_Elements.Common_Behavior.Reception (Foundation.Core.ModelElement.name?,
Foundation.Core.ModelElement.visibility?,
Foundation.Core.ModelElement.isSpecification?,
Foundation.Core.Feature.ownerScope?,
Foundation.Core.BehavioralFeature.isQuery?,
Behavioral_Elements.Common_Behavior.Reception.specification?,
Behavioral_Elements.Common_Behavior.Reception.isRoot?,
Behavioral_Elements.Common_Behavior.Reception.isLeaf?,
Behavioral_Elements.Common_Behavior.Reception.isAbstract?,
XMI.extension*,
Foundation.Core.ModelElement.namespace?,
Foundation.Core.ModelElement.clientDependency*,
Foundation.Core.ModelElement.constraint*,
Foundation.Core.ModelElement.supplierDependency*,
Foundation.Core.ModelElement.presentation*,
Foundation.Core.ModelElement.targetFlow*,
Foundation.Core.ModelElement.sourceFlow*,
Foundation.Core.ModelElement.templateParameter3*,
Foundation.Core.ModelElement.binding*,
Foundation.Core.ModelElement.comment*,
Foundation.Core.ModelElement.elementResidence*,
Foundation.Core.ModelElement.templateParameter2*,
Foundation.Core.ModelElement.stereotype?,
Foundation.Core.ModelElement.behavior*,
Foundation.Core.ModelElement.classifierRole*,
Foundation.Core.ModelElement.collaboration*,
Foundation.Core.ModelElement.partition*,
Foundation.Core.ModelElement.elementImport*,
Foundation.Core.Feature.owner?,
Foundation.Core.Feature.classifierRole*,
Foundation.Core.BehavioralFeature.raisedSignal*,
Behavioral_Elements.Common_Behavior.Reception.signal?,
Foundation.Core.ModelElement.templateParameter*,
Foundation.Core.ModelElement.taggedValue*,
Foundation.Core.BehavioralFeature.parameter*)?
>
<!ATTLIST Behavioral_Elements.Common_Behavior.Reception
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL CLASS: Link -->
<!-- _______________________________________________________________ -->
<!ELEMENT Behavioral_Elements.Common_Behavior.Link.association (Foundation.Core.Association |
Foundation.Core.AssociationClass |
Behavioral_Elements.Collaborations.AssociationRole)?
>
<!ELEMENT Behavioral_Elements.Common_Behavior.Link.stimulus
(Behavioral_Elements.Common_Behavior.Stimulus)* >
<!ELEMENT Behavioral_Elements.Common_Behavior.Link (Foundation.Core.ModelElement.name?,
Foundation.Core.ModelElement.visibility?,
Foundation.Core.ModelElement.isSpecification?,
XMI.extension*,
Foundation.Core.ModelElement.namespace?,
Foundation.Core.ModelElement.clientDependency*,
Foundation.Core.ModelElement.constraint*,
Foundation.Core.ModelElement.supplierDependency*,
Foundation.Core.ModelElement.presentation*,
Foundation.Core.ModelElement.targetFlow*,
Foundation.Core.ModelElement.sourceFlow*,
Foundation.Core.ModelElement.templateParameter3*,
Foundation.Core.ModelElement.binding*,
Foundation.Core.ModelElement.comment*,
Foundation.Core.ModelElement.elementResidence*,
Foundation.Core.ModelElement.templateParameter2*,
Foundation.Core.ModelElement.stereotype?,
Foundation.Core.ModelElement.behavior*,
Foundation.Core.ModelElement.classifierRole*,
Foundation.Core.ModelElement.collaboration*,
Foundation.Core.ModelElement.partition*,
Foundation.Core.ModelElement.elementImport*,
Behavioral_Elements.Common_Behavior.Link.association?,
Behavioral_Elements.Common_Behavior.Link.stimulus*,
Foundation.Core.ModelElement.templateParameter*,
Foundation.Core.ModelElement.taggedValue*,
Behavioral_Elements.Common_Behavior.Link.connection*)?
>
<!ATTLIST Behavioral_Elements.Common_Behavior.Link
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL CLASS: LinkEnd -->
<!-- _______________________________________________________________ -->
<!ELEMENT Behavioral_Elements.Common_Behavior.LinkEnd.instance (Behavioral_Elements.Common_Behavior.Instance |
Behavioral_Elements.Common_Behavior.Object |
Behavioral_Elements.Common_Behavior.LinkObject |
Behavioral_Elements.Common_Behavior.DataValue |
Behavioral_Elements.Common_Behavior.ComponentInstance |
Behavioral_Elements.Common_Behavior.NodeInstance |
Behavioral_Elements.Use_Cases.UseCaseInstance)?
>
<!ELEMENT Behavioral_Elements.Common_Behavior.LinkEnd.link (Behavioral_Elements.Common_Behavior.Link |
Behavioral_Elements.Common_Behavior.LinkObject)?
>
<!ELEMENT Behavioral_Elements.Common_Behavior.LinkEnd.associationEnd (Foundation.Core.AssociationEnd |
Behavioral_Elements.Collaborations.AssociationEndRole)?
>
<!ELEMENT Behavioral_Elements.Common_Behavior.LinkEnd (Foundation.Core.ModelElement.name?,
Foundation.Core.ModelElement.visibility?,
Foundation.Core.ModelElement.isSpecification?,
XMI.extension*,
Foundation.Core.ModelElement.namespace?,
Foundation.Core.ModelElement.clientDependency*,
Foundation.Core.ModelElement.constraint*,
Foundation.Core.ModelElement.supplierDependency*,
Foundation.Core.ModelElement.presentation*,
Foundation.Core.ModelElement.targetFlow*,
Foundation.Core.ModelElement.sourceFlow*,
Foundation.Core.ModelElement.templateParameter3*,
Foundation.Core.ModelElement.binding*,
Foundation.Core.ModelElement.comment*,
Foundation.Core.ModelElement.elementResidence*,
Foundation.Core.ModelElement.templateParameter2*,
Foundation.Core.ModelElement.stereotype?,
Foundation.Core.ModelElement.behavior*,
Foundation.Core.ModelElement.classifierRole*,
Foundation.Core.ModelElement.collaboration*,
Foundation.Core.ModelElement.partition*,
Foundation.Core.ModelElement.elementImport*,
Behavioral_Elements.Common_Behavior.LinkEnd.instance?,
Behavioral_Elements.Common_Behavior.LinkEnd.link?,
Behavioral_Elements.Common_Behavior.LinkEnd.associationEnd?,
Foundation.Core.ModelElement.templateParameter*,
Foundation.Core.ModelElement.taggedValue*,
Behavioral_Elements.Common_Behavior.LinkEnd.qualifiedValue*)?
>
<!ATTLIST Behavioral_Elements.Common_Behavior.LinkEnd
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL CLASS: ReturnAction -->
<!-- _______________________________________________________________ -->
<!ELEMENT Behavioral_Elements.Common_Behavior.ReturnAction (Foundation.Core.ModelElement.name?,
Foundation.Core.ModelElement.visibility?,
Foundation.Core.ModelElement.isSpecification?,
Behavioral_Elements.Common_Behavior.Action.recurrence?,
Behavioral_Elements.Common_Behavior.Action.target?,
Behavioral_Elements.Common_Behavior.Action.isAsynchronous?,
Behavioral_Elements.Common_Behavior.Action.script?,
XMI.extension*,
Foundation.Core.ModelElement.namespace?,
Foundation.Core.ModelElement.clientDependency*,
Foundation.Core.ModelElement.constraint*,
Foundation.Core.ModelElement.supplierDependency*,
Foundation.Core.ModelElement.presentation*,
Foundation.Core.ModelElement.targetFlow*,
Foundation.Core.ModelElement.sourceFlow*,
Foundation.Core.ModelElement.templateParameter3*,
Foundation.Core.ModelElement.binding*,
Foundation.Core.ModelElement.comment*,
Foundation.Core.ModelElement.elementResidence*,
Foundation.Core.ModelElement.templateParameter2*,
Foundation.Core.ModelElement.stereotype?,
Foundation.Core.ModelElement.behavior*,
Foundation.Core.ModelElement.classifierRole*,
Foundation.Core.ModelElement.collaboration*,
Foundation.Core.ModelElement.partition*,
Foundation.Core.ModelElement.elementImport*,
Behavioral_Elements.Common_Behavior.Action.actionSequence?,
Behavioral_Elements.Common_Behavior.Action.stimulus*,
Behavioral_Elements.Common_Behavior.Action.state1?,
Behavioral_Elements.Common_Behavior.Action.state2?,
Behavioral_Elements.Common_Behavior.Action.transition?,
Behavioral_Elements.Common_Behavior.Action.state3?,
Behavioral_Elements.Common_Behavior.Action.message*,
Foundation.Core.ModelElement.templateParameter*,
Foundation.Core.ModelElement.taggedValue*,
Behavioral_Elements.Common_Behavior.Action.actualArgument*)?
>
<!ATTLIST Behavioral_Elements.Common_Behavior.ReturnAction
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL CLASS: TerminateAction -->
<!-- _______________________________________________________________ -->
<!ELEMENT Behavioral_Elements.Common_Behavior.TerminateAction (Foundation.Core.ModelElement.name?,
Foundation.Core.ModelElement.visibility?,
Foundation.Core.ModelElement.isSpecification?,
Behavioral_Elements.Common_Behavior.Action.recurrence?,
Behavioral_Elements.Common_Behavior.Action.target?,
Behavioral_Elements.Common_Behavior.Action.isAsynchronous?,
Behavioral_Elements.Common_Behavior.Action.script?,
XMI.extension*,
Foundation.Core.ModelElement.namespace?,
Foundation.Core.ModelElement.clientDependency*,
Foundation.Core.ModelElement.constraint*,
Foundation.Core.ModelElement.supplierDependency*,
Foundation.Core.ModelElement.presentation*,
Foundation.Core.ModelElement.targetFlow*,
Foundation.Core.ModelElement.sourceFlow*,
Foundation.Core.ModelElement.templateParameter3*,
Foundation.Core.ModelElement.binding*,
Foundation.Core.ModelElement.comment*,
Foundation.Core.ModelElement.elementResidence*,
Foundation.Core.ModelElement.templateParameter2*,
Foundation.Core.ModelElement.stereotype?,
Foundation.Core.ModelElement.behavior*,
Foundation.Core.ModelElement.classifierRole*,
Foundation.Core.ModelElement.collaboration*,
Foundation.Core.ModelElement.partition*,
Foundation.Core.ModelElement.elementImport*,
Behavioral_Elements.Common_Behavior.Action.actionSequence?,
Behavioral_Elements.Common_Behavior.Action.stimulus*,
Behavioral_Elements.Common_Behavior.Action.state1?,
Behavioral_Elements.Common_Behavior.Action.state2?,
Behavioral_Elements.Common_Behavior.Action.transition?,
Behavioral_Elements.Common_Behavior.Action.state3?,
Behavioral_Elements.Common_Behavior.Action.message*,
Foundation.Core.ModelElement.templateParameter*,
Foundation.Core.ModelElement.taggedValue*,
Behavioral_Elements.Common_Behavior.Action.actualArgument*)?
>
<!ATTLIST Behavioral_Elements.Common_Behavior.TerminateAction
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL CLASS: Stimulus -->
<!-- _______________________________________________________________ -->
<!ELEMENT Behavioral_Elements.Common_Behavior.Stimulus.argument (Behavioral_Elements.Common_Behavior.Instance |
Behavioral_Elements.Common_Behavior.Object |
Behavioral_Elements.Common_Behavior.LinkObject |
Behavioral_Elements.Common_Behavior.DataValue |
Behavioral_Elements.Common_Behavior.ComponentInstance |
Behavioral_Elements.Common_Behavior.NodeInstance |
Behavioral_Elements.Use_Cases.UseCaseInstance)*
>
<!ELEMENT Behavioral_Elements.Common_Behavior.Stimulus.sender (Behavioral_Elements.Common_Behavior.Instance |
Behavioral_Elements.Common_Behavior.Object |
Behavioral_Elements.Common_Behavior.LinkObject |
Behavioral_Elements.Common_Behavior.DataValue |
Behavioral_Elements.Common_Behavior.ComponentInstance |
Behavioral_Elements.Common_Behavior.NodeInstance |
Behavioral_Elements.Use_Cases.UseCaseInstance)?
>
<!ELEMENT Behavioral_Elements.Common_Behavior.Stimulus.receiver (Behavioral_Elements.Common_Behavior.Instance |
Behavioral_Elements.Common_Behavior.Object |
Behavioral_Elements.Common_Behavior.LinkObject |
Behavioral_Elements.Common_Behavior.DataValue |
Behavioral_Elements.Common_Behavior.ComponentInstance |
Behavioral_Elements.Common_Behavior.NodeInstance |
Behavioral_Elements.Use_Cases.UseCaseInstance)?
>
<!ELEMENT Behavioral_Elements.Common_Behavior.Stimulus.communicationLink (Behavioral_Elements.Common_Behavior.Link |
Behavioral_Elements.Common_Behavior.LinkObject)?
>
<!ELEMENT Behavioral_Elements.Common_Behavior.Stimulus.dispatchAction (Behavioral_Elements.Common_Behavior.Action |
Behavioral_Elements.Common_Behavior.CallAction |
Behavioral_Elements.Common_Behavior.SendAction |
Behavioral_Elements.Common_Behavior.ActionSequence |
Behavioral_Elements.Common_Behavior.ReturnAction |
Behavioral_Elements.Common_Behavior.TerminateAction |
Behavioral_Elements.Common_Behavior.DestroyAction |
Behavioral_Elements.Common_Behavior.CreateAction |
Behavioral_Elements.Common_Behavior.UninterpretedAction)?
>
<!ELEMENT Behavioral_Elements.Common_Behavior.Stimulus (Foundation.Core.ModelElement.name?,
Foundation.Core.ModelElement.visibility?,
Foundation.Core.ModelElement.isSpecification?,
XMI.extension*,
Foundation.Core.ModelElement.namespace?,
Foundation.Core.ModelElement.clientDependency*,
Foundation.Core.ModelElement.constraint*,
Foundation.Core.ModelElement.supplierDependency*,
Foundation.Core.ModelElement.presentation*,
Foundation.Core.ModelElement.targetFlow*,
Foundation.Core.ModelElement.sourceFlow*,
Foundation.Core.ModelElement.templateParameter3*,
Foundation.Core.ModelElement.binding*,
Foundation.Core.ModelElement.comment*,
Foundation.Core.ModelElement.elementResidence*,
Foundation.Core.ModelElement.templateParameter2*,
Foundation.Core.ModelElement.stereotype?,
Foundation.Core.ModelElement.behavior*,
Foundation.Core.ModelElement.classifierRole*,
Foundation.Core.ModelElement.collaboration*,
Foundation.Core.ModelElement.partition*,
Foundation.Core.ModelElement.elementImport*,
Behavioral_Elements.Common_Behavior.Stimulus.argument*,
Behavioral_Elements.Common_Behavior.Stimulus.sender?,
Behavioral_Elements.Common_Behavior.Stimulus.receiver?,
Behavioral_Elements.Common_Behavior.Stimulus.communicationLink?,
Behavioral_Elements.Common_Behavior.Stimulus.dispatchAction?,
Foundation.Core.ModelElement.templateParameter*,
Foundation.Core.ModelElement.taggedValue*)?
>
<!ATTLIST Behavioral_Elements.Common_Behavior.Stimulus
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL CLASS: Exception -->
<!-- _______________________________________________________________ -->
<!ELEMENT Behavioral_Elements.Common_Behavior.Exception (Foundation.Core.ModelElement.name?,
Foundation.Core.ModelElement.visibility?,
Foundation.Core.ModelElement.isSpecification?,
Foundation.Core.GeneralizableElement.isRoot?,
Foundation.Core.GeneralizableElement.isLeaf?,
Foundation.Core.GeneralizableElement.isAbstract?,
XMI.extension*,
Foundation.Core.ModelElement.namespace?,
Foundation.Core.ModelElement.clientDependency*,
Foundation.Core.ModelElement.constraint*,
Foundation.Core.ModelElement.supplierDependency*,
Foundation.Core.ModelElement.presentation*,
Foundation.Core.ModelElement.targetFlow*,
Foundation.Core.ModelElement.sourceFlow*,
Foundation.Core.ModelElement.templateParameter3*,
Foundation.Core.ModelElement.binding*,
Foundation.Core.ModelElement.comment*,
Foundation.Core.ModelElement.elementResidence*,
Foundation.Core.ModelElement.templateParameter2*,
Foundation.Core.ModelElement.stereotype?,
Foundation.Core.ModelElement.behavior*,
Foundation.Core.ModelElement.classifierRole*,
Foundation.Core.ModelElement.collaboration*,
Foundation.Core.ModelElement.partition*,
Foundation.Core.ModelElement.elementImport*,
Foundation.Core.GeneralizableElement.generalization*,
Foundation.Core.GeneralizableElement.specialization*,
Foundation.Core.Classifier.participant*,
Foundation.Core.Classifier.powertypeRange*,
Foundation.Core.Classifier.instance*,
Foundation.Core.Classifier.createAction*,
Foundation.Core.Classifier.classifierRole*,
Foundation.Core.Classifier.collaboration*,
Foundation.Core.Classifier.classifierInState*,
Foundation.Core.Classifier.objectFlowState*,
Behavioral_Elements.Common_Behavior.Signal.reception*,
Behavioral_Elements.Common_Behavior.Signal.context*,
Behavioral_Elements.Common_Behavior.Signal.sendAction*,
Behavioral_Elements.Common_Behavior.Signal.occurrence*,
Foundation.Core.ModelElement.templateParameter*,
Foundation.Core.ModelElement.taggedValue*,
Foundation.Core.Namespace.ownedElement*,
Foundation.Core.Classifier.feature*)?
>
<!ATTLIST Behavioral_Elements.Common_Behavior.Exception
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL CLASS: ComponentInstance -->
<!-- _______________________________________________________________ -->
<!ELEMENT Behavioral_Elements.Common_Behavior.ComponentInstance.nodeInstance
(Behavioral_Elements.Common_Behavior.NodeInstance)? >
<!ELEMENT Behavioral_Elements.Common_Behavior.ComponentInstance.resident (Behavioral_Elements.Common_Behavior.Instance |
Behavioral_Elements.Common_Behavior.Object |
Behavioral_Elements.Common_Behavior.LinkObject |
Behavioral_Elements.Common_Behavior.DataValue |
Behavioral_Elements.Common_Behavior.ComponentInstance |
Behavioral_Elements.Common_Behavior.NodeInstance |
Behavioral_Elements.Use_Cases.UseCaseInstance)*
>
<!ELEMENT Behavioral_Elements.Common_Behavior.ComponentInstance (Foundation.Core.ModelElement.name?,
Foundation.Core.ModelElement.visibility?,
Foundation.Core.ModelElement.isSpecification?,
XMI.extension*,
Foundation.Core.ModelElement.namespace?,
Foundation.Core.ModelElement.clientDependency*,
Foundation.Core.ModelElement.constraint*,
Foundation.Core.ModelElement.supplierDependency*,
Foundation.Core.ModelElement.presentation*,
Foundation.Core.ModelElement.targetFlow*,
Foundation.Core.ModelElement.sourceFlow*,
Foundation.Core.ModelElement.templateParameter3*,
Foundation.Core.ModelElement.binding*,
Foundation.Core.ModelElement.comment*,
Foundation.Core.ModelElement.elementResidence*,
Foundation.Core.ModelElement.templateParameter2*,
Foundation.Core.ModelElement.stereotype?,
Foundation.Core.ModelElement.behavior*,
Foundation.Core.ModelElement.classifierRole*,
Foundation.Core.ModelElement.collaboration*,
Foundation.Core.ModelElement.partition*,
Foundation.Core.ModelElement.elementImport*,
Behavioral_Elements.Common_Behavior.Instance.classifier*,
Behavioral_Elements.Common_Behavior.Instance.attributeLink*,
Behavioral_Elements.Common_Behavior.Instance.linkEnd*,
Behavioral_Elements.Common_Behavior.Instance.stimulus1*,
Behavioral_Elements.Common_Behavior.Instance.stimulus3*,
Behavioral_Elements.Common_Behavior.Instance.componentInstance?,
Behavioral_Elements.Common_Behavior.Instance.stimulus2*,
Behavioral_Elements.Common_Behavior.ComponentInstance.nodeInstance?,
Behavioral_Elements.Common_Behavior.ComponentInstance.resident*,
Foundation.Core.ModelElement.templateParameter*,
Foundation.Core.ModelElement.taggedValue*,
Behavioral_Elements.Common_Behavior.Instance.slot*)?
>
<!ATTLIST Behavioral_Elements.Common_Behavior.ComponentInstance
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL CLASS: NodeInstance -->
<!-- _______________________________________________________________ -->
<!ELEMENT Behavioral_Elements.Common_Behavior.NodeInstance.resident
(Behavioral_Elements.Common_Behavior.ComponentInstance)* >
<!ELEMENT Behavioral_Elements.Common_Behavior.NodeInstance (Foundation.Core.ModelElement.name?,
Foundation.Core.ModelElement.visibility?,
Foundation.Core.ModelElement.isSpecification?,
XMI.extension*,
Foundation.Core.ModelElement.namespace?,
Foundation.Core.ModelElement.clientDependency*,
Foundation.Core.ModelElement.constraint*,
Foundation.Core.ModelElement.supplierDependency*,
Foundation.Core.ModelElement.presentation*,
Foundation.Core.ModelElement.targetFlow*,
Foundation.Core.ModelElement.sourceFlow*,
Foundation.Core.ModelElement.templateParameter3*,
Foundation.Core.ModelElement.binding*,
Foundation.Core.ModelElement.comment*,
Foundation.Core.ModelElement.elementResidence*,
Foundation.Core.ModelElement.templateParameter2*,
Foundation.Core.ModelElement.stereotype?,
Foundation.Core.ModelElement.behavior*,
Foundation.Core.ModelElement.classifierRole*,
Foundation.Core.ModelElement.collaboration*,
Foundation.Core.ModelElement.partition*,
Foundation.Core.ModelElement.elementImport*,
Behavioral_Elements.Common_Behavior.Instance.classifier*,
Behavioral_Elements.Common_Behavior.Instance.attributeLink*,
Behavioral_Elements.Common_Behavior.Instance.linkEnd*,
Behavioral_Elements.Common_Behavior.Instance.stimulus1*,
Behavioral_Elements.Common_Behavior.Instance.stimulus3*,
Behavioral_Elements.Common_Behavior.Instance.componentInstance?,
Behavioral_Elements.Common_Behavior.Instance.stimulus2*,
Behavioral_Elements.Common_Behavior.NodeInstance.resident*,
Foundation.Core.ModelElement.templateParameter*,
Foundation.Core.ModelElement.taggedValue*,
Behavioral_Elements.Common_Behavior.Instance.slot*)?
>
<!ATTLIST Behavioral_Elements.Common_Behavior.NodeInstance
%XMI.element.att;
%XMI.link.att;
>
<!ELEMENT Behavioral_Elements.Common_Behavior ((Behavioral_Elements.Common_Behavior.Instance |
Behavioral_Elements.Common_Behavior.Signal |
Behavioral_Elements.Common_Behavior.CreateAction |
Behavioral_Elements.Common_Behavior.DestroyAction |
Behavioral_Elements.Common_Behavior.UninterpretedAction |
Behavioral_Elements.Common_Behavior.Action |
Behavioral_Elements.Common_Behavior.AttributeLink |
Behavioral_Elements.Common_Behavior.LinkObject |
Behavioral_Elements.Common_Behavior.Object |
Behavioral_Elements.Common_Behavior.DataValue |
Behavioral_Elements.Common_Behavior.CallAction |
Behavioral_Elements.Common_Behavior.SendAction |
Behavioral_Elements.Common_Behavior.ActionSequence |
Behavioral_Elements.Common_Behavior.Argument |
Behavioral_Elements.Common_Behavior.Reception |
Behavioral_Elements.Common_Behavior.Link |
Behavioral_Elements.Common_Behavior.LinkEnd |
Behavioral_Elements.Common_Behavior.ReturnAction |
Behavioral_Elements.Common_Behavior.TerminateAction |
Behavioral_Elements.Common_Behavior.Stimulus |
Behavioral_Elements.Common_Behavior.Exception |
Behavioral_Elements.Common_Behavior.ComponentInstance |
Behavioral_Elements.Common_Behavior.NodeInstance)*)
>
<!ATTLIST Behavioral_Elements.Common_Behavior
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL PACKAGE: Use_Cases -->
<!-- _______________________________________________________________ -->
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL CLASS: UseCase -->
<!-- _______________________________________________________________ -->
<!ELEMENT Behavioral_Elements.Use_Cases.UseCase.extend2
(Behavioral_Elements.Use_Cases.Extend)* >
<!ELEMENT Behavioral_Elements.Use_Cases.UseCase.extend
(Behavioral_Elements.Use_Cases.Extend)* >
<!ELEMENT Behavioral_Elements.Use_Cases.UseCase.include
(Behavioral_Elements.Use_Cases.Include)* >
<!ELEMENT Behavioral_Elements.Use_Cases.UseCase.include2
(Behavioral_Elements.Use_Cases.Include)* >
<!ELEMENT Behavioral_Elements.Use_Cases.UseCase.extensionPoint
(Behavioral_Elements.Use_Cases.ExtensionPoint)* >
<!ELEMENT Behavioral_Elements.Use_Cases.UseCase (Foundation.Core.ModelElement.name?,
Foundation.Core.ModelElement.visibility?,
Foundation.Core.ModelElement.isSpecification?,
Foundation.Core.GeneralizableElement.isRoot?,
Foundation.Core.GeneralizableElement.isLeaf?,
Foundation.Core.GeneralizableElement.isAbstract?,
XMI.extension*,
Foundation.Core.ModelElement.namespace?,
Foundation.Core.ModelElement.clientDependency*,
Foundation.Core.ModelElement.constraint*,
Foundation.Core.ModelElement.supplierDependency*,
Foundation.Core.ModelElement.presentation*,
Foundation.Core.ModelElement.targetFlow*,
Foundation.Core.ModelElement.sourceFlow*,
Foundation.Core.ModelElement.templateParameter3*,
Foundation.Core.ModelElement.binding*,
Foundation.Core.ModelElement.comment*,
Foundation.Core.ModelElement.elementResidence*,
Foundation.Core.ModelElement.templateParameter2*,
Foundation.Core.ModelElement.stereotype?,
Foundation.Core.ModelElement.behavior*,
Foundation.Core.ModelElement.classifierRole*,
Foundation.Core.ModelElement.collaboration*,
Foundation.Core.ModelElement.partition*,
Foundation.Core.ModelElement.elementImport*,
Foundation.Core.GeneralizableElement.generalization*,
Foundation.Core.GeneralizableElement.specialization*,
Foundation.Core.Classifier.participant*,
Foundation.Core.Classifier.powertypeRange*,
Foundation.Core.Classifier.instance*,
Foundation.Core.Classifier.createAction*,
Foundation.Core.Classifier.classifierRole*,
Foundation.Core.Classifier.collaboration*,
Foundation.Core.Classifier.classifierInState*,
Foundation.Core.Classifier.objectFlowState*,
Behavioral_Elements.Use_Cases.UseCase.extend2*,
Behavioral_Elements.Use_Cases.UseCase.extend*,
Behavioral_Elements.Use_Cases.UseCase.include*,
Behavioral_Elements.Use_Cases.UseCase.include2*,
Behavioral_Elements.Use_Cases.UseCase.extensionPoint*,
Foundation.Core.ModelElement.templateParameter*,
Foundation.Core.ModelElement.taggedValue*,
Foundation.Core.Namespace.ownedElement*,
Foundation.Core.Classifier.feature*)?
>
<!ATTLIST Behavioral_Elements.Use_Cases.UseCase
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL CLASS: Actor -->
<!-- _______________________________________________________________ -->
<!ELEMENT Behavioral_Elements.Use_Cases.Actor (Foundation.Core.ModelElement.name?,
Foundation.Core.ModelElement.visibility?,
Foundation.Core.ModelElement.isSpecification?,
Foundation.Core.GeneralizableElement.isRoot?,
Foundation.Core.GeneralizableElement.isLeaf?,
Foundation.Core.GeneralizableElement.isAbstract?,
XMI.extension*,
Foundation.Core.ModelElement.namespace?,
Foundation.Core.ModelElement.clientDependency*,
Foundation.Core.ModelElement.constraint*,
Foundation.Core.ModelElement.supplierDependency*,
Foundation.Core.ModelElement.presentation*,
Foundation.Core.ModelElement.targetFlow*,
Foundation.Core.ModelElement.sourceFlow*,
Foundation.Core.ModelElement.templateParameter3*,
Foundation.Core.ModelElement.binding*,
Foundation.Core.ModelElement.comment*,
Foundation.Core.ModelElement.elementResidence*,
Foundation.Core.ModelElement.templateParameter2*,
Foundation.Core.ModelElement.stereotype?,
Foundation.Core.ModelElement.behavior*,
Foundation.Core.ModelElement.classifierRole*,
Foundation.Core.ModelElement.collaboration*,
Foundation.Core.ModelElement.partition*,
Foundation.Core.ModelElement.elementImport*,
Foundation.Core.GeneralizableElement.generalization*,
Foundation.Core.GeneralizableElement.specialization*,
Foundation.Core.Classifier.participant*,
Foundation.Core.Classifier.powertypeRange*,
Foundation.Core.Classifier.instance*,
Foundation.Core.Classifier.createAction*,
Foundation.Core.Classifier.classifierRole*,
Foundation.Core.Classifier.collaboration*,
Foundation.Core.Classifier.classifierInState*,
Foundation.Core.Classifier.objectFlowState*,
Foundation.Core.ModelElement.templateParameter*,
Foundation.Core.ModelElement.taggedValue*,
Foundation.Core.Namespace.ownedElement*,
Foundation.Core.Classifier.feature*)?
>
<!ATTLIST Behavioral_Elements.Use_Cases.Actor
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL CLASS: UseCaseInstance -->
<!-- _______________________________________________________________ -->
<!ELEMENT Behavioral_Elements.Use_Cases.UseCaseInstance (Foundation.Core.ModelElement.name?,
Foundation.Core.ModelElement.visibility?,
Foundation.Core.ModelElement.isSpecification?,
XMI.extension*,
Foundation.Core.ModelElement.namespace?,
Foundation.Core.ModelElement.clientDependency*,
Foundation.Core.ModelElement.constraint*,
Foundation.Core.ModelElement.supplierDependency*,
Foundation.Core.ModelElement.presentation*,
Foundation.Core.ModelElement.targetFlow*,
Foundation.Core.ModelElement.sourceFlow*,
Foundation.Core.ModelElement.templateParameter3*,
Foundation.Core.ModelElement.binding*,
Foundation.Core.ModelElement.comment*,
Foundation.Core.ModelElement.elementResidence*,
Foundation.Core.ModelElement.templateParameter2*,
Foundation.Core.ModelElement.stereotype?,
Foundation.Core.ModelElement.behavior*,
Foundation.Core.ModelElement.classifierRole*,
Foundation.Core.ModelElement.collaboration*,
Foundation.Core.ModelElement.partition*,
Foundation.Core.ModelElement.elementImport*,
Behavioral_Elements.Common_Behavior.Instance.classifier*,
Behavioral_Elements.Common_Behavior.Instance.attributeLink*,
Behavioral_Elements.Common_Behavior.Instance.linkEnd*,
Behavioral_Elements.Common_Behavior.Instance.stimulus1*,
Behavioral_Elements.Common_Behavior.Instance.stimulus3*,
Behavioral_Elements.Common_Behavior.Instance.componentInstance?,
Behavioral_Elements.Common_Behavior.Instance.stimulus2*,
Foundation.Core.ModelElement.templateParameter*,
Foundation.Core.ModelElement.taggedValue*,
Behavioral_Elements.Common_Behavior.Instance.slot*)?
>
<!ATTLIST Behavioral_Elements.Use_Cases.UseCaseInstance
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL CLASS: Extend -->
<!-- _______________________________________________________________ -->
<!ELEMENT Behavioral_Elements.Use_Cases.Extend.condition
(Foundation.Data_Types.BooleanExpression) >
<!ELEMENT Behavioral_Elements.Use_Cases.Extend.base
(Behavioral_Elements.Use_Cases.UseCase)? >
<!ELEMENT Behavioral_Elements.Use_Cases.Extend.extension
(Behavioral_Elements.Use_Cases.UseCase)? >
<!ELEMENT Behavioral_Elements.Use_Cases.Extend.extensionPoint
(Behavioral_Elements.Use_Cases.ExtensionPoint)* >
<!ELEMENT Behavioral_Elements.Use_Cases.Extend (Foundation.Core.ModelElement.name?,
Foundation.Core.ModelElement.visibility?,
Foundation.Core.ModelElement.isSpecification?,
Behavioral_Elements.Use_Cases.Extend.condition?,
XMI.extension*,
Foundation.Core.ModelElement.namespace?,
Foundation.Core.ModelElement.clientDependency*,
Foundation.Core.ModelElement.constraint*,
Foundation.Core.ModelElement.supplierDependency*,
Foundation.Core.ModelElement.presentation*,
Foundation.Core.ModelElement.targetFlow*,
Foundation.Core.ModelElement.sourceFlow*,
Foundation.Core.ModelElement.templateParameter3*,
Foundation.Core.ModelElement.binding*,
Foundation.Core.ModelElement.comment*,
Foundation.Core.ModelElement.elementResidence*,
Foundation.Core.ModelElement.templateParameter2*,
Foundation.Core.ModelElement.stereotype?,
Foundation.Core.ModelElement.behavior*,
Foundation.Core.ModelElement.classifierRole*,
Foundation.Core.ModelElement.collaboration*,
Foundation.Core.ModelElement.partition*,
Foundation.Core.ModelElement.elementImport*,
Behavioral_Elements.Use_Cases.Extend.base?,
Behavioral_Elements.Use_Cases.Extend.extension?,
Behavioral_Elements.Use_Cases.Extend.extensionPoint*,
Foundation.Core.ModelElement.templateParameter*,
Foundation.Core.ModelElement.taggedValue*)?
>
<!ATTLIST Behavioral_Elements.Use_Cases.Extend
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL CLASS: Include -->
<!-- _______________________________________________________________ -->
<!ELEMENT Behavioral_Elements.Use_Cases.Include.addition
(Behavioral_Elements.Use_Cases.UseCase)? >
<!ELEMENT Behavioral_Elements.Use_Cases.Include.base
(Behavioral_Elements.Use_Cases.UseCase)? >
<!ELEMENT Behavioral_Elements.Use_Cases.Include (Foundation.Core.ModelElement.name?,
Foundation.Core.ModelElement.visibility?,
Foundation.Core.ModelElement.isSpecification?,
XMI.extension*,
Foundation.Core.ModelElement.namespace?,
Foundation.Core.ModelElement.clientDependency*,
Foundation.Core.ModelElement.constraint*,
Foundation.Core.ModelElement.supplierDependency*,
Foundation.Core.ModelElement.presentation*,
Foundation.Core.ModelElement.targetFlow*,
Foundation.Core.ModelElement.sourceFlow*,
Foundation.Core.ModelElement.templateParameter3*,
Foundation.Core.ModelElement.binding*,
Foundation.Core.ModelElement.comment*,
Foundation.Core.ModelElement.elementResidence*,
Foundation.Core.ModelElement.templateParameter2*,
Foundation.Core.ModelElement.stereotype?,
Foundation.Core.ModelElement.behavior*,
Foundation.Core.ModelElement.classifierRole*,
Foundation.Core.ModelElement.collaboration*,
Foundation.Core.ModelElement.partition*,
Foundation.Core.ModelElement.elementImport*,
Behavioral_Elements.Use_Cases.Include.addition?,
Behavioral_Elements.Use_Cases.Include.base?,
Foundation.Core.ModelElement.templateParameter*,
Foundation.Core.ModelElement.taggedValue*)?
>
<!ATTLIST Behavioral_Elements.Use_Cases.Include
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL CLASS: ExtensionPoint -->
<!-- _______________________________________________________________ -->
<!ELEMENT Behavioral_Elements.Use_Cases.ExtensionPoint.location (#PCDATA |
XMI.reference)*
>
<!ELEMENT Behavioral_Elements.Use_Cases.ExtensionPoint.useCase
(Behavioral_Elements.Use_Cases.UseCase)? >
<!ELEMENT Behavioral_Elements.Use_Cases.ExtensionPoint.extend
(Behavioral_Elements.Use_Cases.Extend)* >
<!ELEMENT Behavioral_Elements.Use_Cases.ExtensionPoint (Foundation.Core.ModelElement.name?,
Foundation.Core.ModelElement.visibility?,
Foundation.Core.ModelElement.isSpecification?,
Behavioral_Elements.Use_Cases.ExtensionPoint.location?,
XMI.extension*,
Foundation.Core.ModelElement.namespace?,
Foundation.Core.ModelElement.clientDependency*,
Foundation.Core.ModelElement.constraint*,
Foundation.Core.ModelElement.supplierDependency*,
Foundation.Core.ModelElement.presentation*,
Foundation.Core.ModelElement.targetFlow*,
Foundation.Core.ModelElement.sourceFlow*,
Foundation.Core.ModelElement.templateParameter3*,
Foundation.Core.ModelElement.binding*,
Foundation.Core.ModelElement.comment*,
Foundation.Core.ModelElement.elementResidence*,
Foundation.Core.ModelElement.templateParameter2*,
Foundation.Core.ModelElement.stereotype?,
Foundation.Core.ModelElement.behavior*,
Foundation.Core.ModelElement.classifierRole*,
Foundation.Core.ModelElement.collaboration*,
Foundation.Core.ModelElement.partition*,
Foundation.Core.ModelElement.elementImport*,
Behavioral_Elements.Use_Cases.ExtensionPoint.useCase?,
Behavioral_Elements.Use_Cases.ExtensionPoint.extend*,
Foundation.Core.ModelElement.templateParameter*,
Foundation.Core.ModelElement.taggedValue*)?
>
<!ATTLIST Behavioral_Elements.Use_Cases.ExtensionPoint
%XMI.element.att;
%XMI.link.att;
>
<!ELEMENT Behavioral_Elements.Use_Cases ((Behavioral_Elements.Use_Cases.UseCase |
Behavioral_Elements.Use_Cases.Actor |
Behavioral_Elements.Use_Cases.UseCaseInstance |
Behavioral_Elements.Use_Cases.Extend |
Behavioral_Elements.Use_Cases.Include |
Behavioral_Elements.Use_Cases.ExtensionPoint)*)
>
<!ATTLIST Behavioral_Elements.Use_Cases
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL PACKAGE: State_Machines -->
<!-- _______________________________________________________________ -->
<!ELEMENT Behavioral_Elements.State_Machines.State.entry (Behavioral_Elements.Common_Behavior.Action |
Behavioral_Elements.Common_Behavior.CallAction |
Behavioral_Elements.Common_Behavior.SendAction |
Behavioral_Elements.Common_Behavior.ActionSequence |
Behavioral_Elements.Common_Behavior.ReturnAction |
Behavioral_Elements.Common_Behavior.TerminateAction |
Behavioral_Elements.Common_Behavior.DestroyAction |
Behavioral_Elements.Common_Behavior.CreateAction |
Behavioral_Elements.Common_Behavior.UninterpretedAction)?
>
<!ELEMENT Behavioral_Elements.State_Machines.State.exit (Behavioral_Elements.Common_Behavior.Action |
Behavioral_Elements.Common_Behavior.CallAction |
Behavioral_Elements.Common_Behavior.SendAction |
Behavioral_Elements.Common_Behavior.ActionSequence |
Behavioral_Elements.Common_Behavior.ReturnAction |
Behavioral_Elements.Common_Behavior.TerminateAction |
Behavioral_Elements.Common_Behavior.DestroyAction |
Behavioral_Elements.Common_Behavior.CreateAction |
Behavioral_Elements.Common_Behavior.UninterpretedAction)?
>
<!ELEMENT Behavioral_Elements.State_Machines.Event.parameter
(Foundation.Core.Parameter)* >
<!ELEMENT Behavioral_Elements.State_Machines.Transition.guard
(Behavioral_Elements.State_Machines.Guard)? >
<!ELEMENT Behavioral_Elements.State_Machines.StateMachine.top (Behavioral_Elements.State_Machines.State |
Behavioral_Elements.State_Machines.CompositeState |
Behavioral_Elements.State_Machines.SubmachineState |
Behavioral_Elements.Activity_Graphs.SubactivityState |
Behavioral_Elements.State_Machines.SimpleState |
Behavioral_Elements.Activity_Graphs.ObjectFlowState |
Behavioral_Elements.Activity_Graphs.ActionState |
Behavioral_Elements.Activity_Graphs.CallState |
Behavioral_Elements.State_Machines.FinalState)?
>
<!ELEMENT Behavioral_Elements.State_Machines.CompositeState.subvertex (Behavioral_Elements.State_Machines.StateVertex |
Behavioral_Elements.State_Machines.Pseudostate |
Behavioral_Elements.State_Machines.SynchState |
Behavioral_Elements.State_Machines.StubState |
Behavioral_Elements.State_Machines.State |
Behavioral_Elements.State_Machines.CompositeState |
Behavioral_Elements.State_Machines.SubmachineState |
Behavioral_Elements.Activity_Graphs.SubactivityState |
Behavioral_Elements.State_Machines.SimpleState |
Behavioral_Elements.Activity_Graphs.ObjectFlowState |
Behavioral_Elements.Activity_Graphs.ActionState |
Behavioral_Elements.Activity_Graphs.CallState |
Behavioral_Elements.State_Machines.FinalState)*
>
<!ELEMENT Behavioral_Elements.State_Machines.Transition.effect (Behavioral_Elements.Common_Behavior.Action |
Behavioral_Elements.Common_Behavior.CallAction |
Behavioral_Elements.Common_Behavior.SendAction |
Behavioral_Elements.Common_Behavior.ActionSequence |
Behavioral_Elements.Common_Behavior.ReturnAction |
Behavioral_Elements.Common_Behavior.TerminateAction |
Behavioral_Elements.Common_Behavior.DestroyAction |
Behavioral_Elements.Common_Behavior.CreateAction |
Behavioral_Elements.Common_Behavior.UninterpretedAction)?
>
<!ELEMENT Behavioral_Elements.State_Machines.State.internalTransition
(Behavioral_Elements.State_Machines.Transition)* >
<!ELEMENT Behavioral_Elements.State_Machines.StateMachine.transitions
(Behavioral_Elements.State_Machines.Transition)* >
<!ELEMENT Behavioral_Elements.State_Machines.State.doActivity (Behavioral_Elements.Common_Behavior.Action |
Behavioral_Elements.Common_Behavior.CallAction |
Behavioral_Elements.Common_Behavior.SendAction |
Behavioral_Elements.Common_Behavior.ActionSequence |
Behavioral_Elements.Common_Behavior.ReturnAction |
Behavioral_Elements.Common_Behavior.TerminateAction |
Behavioral_Elements.Common_Behavior.DestroyAction |
Behavioral_Elements.Common_Behavior.CreateAction |
Behavioral_Elements.Common_Behavior.UninterpretedAction)?
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL CLASS: StateMachine -->
<!-- _______________________________________________________________ -->
<!ELEMENT Behavioral_Elements.State_Machines.StateMachine.context (Foundation.Core.ModelElement |
Foundation.Core.Comment |
Foundation.Core.Relationship |
Behavioral_Elements.Use_Cases.Extend |
Behavioral_Elements.Use_Cases.Include |
Foundation.Core.Generalization |
Foundation.Core.Flow |
Foundation.Core.Association |
Foundation.Core.AssociationClass |
Behavioral_Elements.Collaborations.AssociationRole |
Foundation.Core.Dependency |
Foundation.Core.Abstraction |
Foundation.Core.Usage |
Foundation.Core.Binding |
Foundation.Core.Permission |
Foundation.Extension_Mechanisms.TaggedValue |
Behavioral_Elements.Common_Behavior.Instance |
Behavioral_Elements.Common_Behavior.Object |
Behavioral_Elements.Common_Behavior.LinkObject |
Behavioral_Elements.Common_Behavior.DataValue |
Behavioral_Elements.Common_Behavior.ComponentInstance |
Behavioral_Elements.Common_Behavior.NodeInstance |
Behavioral_Elements.Use_Cases.UseCaseInstance |
Behavioral_Elements.Common_Behavior.Action |
Behavioral_Elements.Common_Behavior.CallAction |
Behavioral_Elements.Common_Behavior.SendAction |
Behavioral_Elements.Common_Behavior.ActionSequence |
Behavioral_Elements.Common_Behavior.ReturnAction |
Behavioral_Elements.Common_Behavior.TerminateAction |
Behavioral_Elements.Common_Behavior.DestroyAction |
Behavioral_Elements.Common_Behavior.CreateAction |
Behavioral_Elements.Common_Behavior.UninterpretedAction |
Behavioral_Elements.Common_Behavior.AttributeLink |
Behavioral_Elements.Common_Behavior.Argument |
Behavioral_Elements.Common_Behavior.Link |
Behavioral_Elements.Common_Behavior.LinkEnd |
Behavioral_Elements.Common_Behavior.Stimulus |
Behavioral_Elements.Use_Cases.ExtensionPoint |
Behavioral_Elements.State_Machines.StateMachine |
Behavioral_Elements.Activity_Graphs.ActivityGraph |
Behavioral_Elements.State_Machines.Event |
Behavioral_Elements.State_Machines.TimeEvent |
Behavioral_Elements.State_Machines.CallEvent |
Behavioral_Elements.State_Machines.SignalEvent |
Behavioral_Elements.State_Machines.ChangeEvent |
Behavioral_Elements.State_Machines.Transition |
Behavioral_Elements.State_Machines.StateVertex |
Behavioral_Elements.State_Machines.Pseudostate |
Behavioral_Elements.State_Machines.SynchState |
Behavioral_Elements.State_Machines.StubState |
Behavioral_Elements.State_Machines.State |
Behavioral_Elements.State_Machines.CompositeState |
Behavioral_Elements.State_Machines.SubmachineState |
Behavioral_Elements.Activity_Graphs.SubactivityState |
Behavioral_Elements.State_Machines.SimpleState |
Behavioral_Elements.Activity_Graphs.ObjectFlowState |
Behavioral_Elements.Activity_Graphs.ActionState |
Behavioral_Elements.Activity_Graphs.CallState |
Behavioral_Elements.State_Machines.FinalState |
Behavioral_Elements.State_Machines.Guard |
Behavioral_Elements.Collaborations.Message |
Behavioral_Elements.Collaborations.Interaction |
Behavioral_Elements.Activity_Graphs.Partition |
Foundation.Core.Feature |
Foundation.Core.BehavioralFeature |
Behavioral_Elements.Common_Behavior.Reception |
Foundation.Core.Operation |
Foundation.Core.Method |
Foundation.Core.StructuralFeature |
Foundation.Core.Attribute |
Foundation.Core.GeneralizableElement |
Foundation.Extension_Mechanisms.Stereotype |
Behavioral_Elements.Collaborations.Collaboration |
Model_Management.Package |
Model_Management.Subsystem |
Model_Management.Model |
Foundation.Core.Classifier |
Foundation.Core.Class |
Foundation.Core.DataType |
Foundation.Core.Interface |
Foundation.Core.Component |
Foundation.Core.Node |
Behavioral_Elements.Common_Behavior.Signal |
Behavioral_Elements.Common_Behavior.Exception |
Behavioral_Elements.Use_Cases.UseCase |
Behavioral_Elements.Use_Cases.Actor |
Behavioral_Elements.Collaborations.ClassifierRole |
Behavioral_Elements.Activity_Graphs.ClassifierInState |
Foundation.Core.AssociationEnd |
Behavioral_Elements.Collaborations.AssociationEndRole |
Foundation.Core.Namespace |
Foundation.Core.Parameter |
Foundation.Core.Constraint)?
>
<!ELEMENT Behavioral_Elements.State_Machines.StateMachine.subMachineState
(Behavioral_Elements.State_Machines.SubmachineState |
Behavioral_Elements.Activity_Graphs.SubactivityState)*
>
<!ELEMENT Behavioral_Elements.State_Machines.StateMachine (Foundation.Core.ModelElement.name?,
Foundation.Core.ModelElement.visibility?,
Foundation.Core.ModelElement.isSpecification?,
XMI.extension*,
Foundation.Core.ModelElement.namespace?,
Foundation.Core.ModelElement.clientDependency*,
Foundation.Core.ModelElement.constraint*,
Foundation.Core.ModelElement.supplierDependency*,
Foundation.Core.ModelElement.presentation*,
Foundation.Core.ModelElement.targetFlow*,
Foundation.Core.ModelElement.sourceFlow*,
Foundation.Core.ModelElement.templateParameter3*,
Foundation.Core.ModelElement.binding*,
Foundation.Core.ModelElement.comment*,
Foundation.Core.ModelElement.elementResidence*,
Foundation.Core.ModelElement.templateParameter2*,
Foundation.Core.ModelElement.stereotype?,
Foundation.Core.ModelElement.behavior*,
Foundation.Core.ModelElement.classifierRole*,
Foundation.Core.ModelElement.collaboration*,
Foundation.Core.ModelElement.partition*,
Foundation.Core.ModelElement.elementImport*,
Behavioral_Elements.State_Machines.StateMachine.context?,
Behavioral_Elements.State_Machines.StateMachine.subMachineState*,
Foundation.Core.ModelElement.templateParameter*,
Foundation.Core.ModelElement.taggedValue*,
Behavioral_Elements.State_Machines.StateMachine.top?,
Behavioral_Elements.State_Machines.StateMachine.transitions*)?
>
<!ATTLIST Behavioral_Elements.State_Machines.StateMachine
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL CLASS: Event -->
<!-- _______________________________________________________________ -->
<!ELEMENT Behavioral_Elements.State_Machines.Event.state (Behavioral_Elements.State_Machines.State |
Behavioral_Elements.State_Machines.CompositeState |
Behavioral_Elements.State_Machines.SubmachineState |
Behavioral_Elements.Activity_Graphs.SubactivityState |
Behavioral_Elements.State_Machines.SimpleState |
Behavioral_Elements.Activity_Graphs.ObjectFlowState |
Behavioral_Elements.Activity_Graphs.ActionState |
Behavioral_Elements.Activity_Graphs.CallState |
Behavioral_Elements.State_Machines.FinalState)*
>
<!ELEMENT Behavioral_Elements.State_Machines.Event.transition
(Behavioral_Elements.State_Machines.Transition)* >
<!ELEMENT Behavioral_Elements.State_Machines.Event (Foundation.Core.ModelElement.name?,
Foundation.Core.ModelElement.visibility?,
Foundation.Core.ModelElement.isSpecification?,
XMI.extension*,
Foundation.Core.ModelElement.namespace?,
Foundation.Core.ModelElement.clientDependency*,
Foundation.Core.ModelElement.constraint*,
Foundation.Core.ModelElement.supplierDependency*,
Foundation.Core.ModelElement.presentation*,
Foundation.Core.ModelElement.targetFlow*,
Foundation.Core.ModelElement.sourceFlow*,
Foundation.Core.ModelElement.templateParameter3*,
Foundation.Core.ModelElement.binding*,
Foundation.Core.ModelElement.comment*,
Foundation.Core.ModelElement.elementResidence*,
Foundation.Core.ModelElement.templateParameter2*,
Foundation.Core.ModelElement.stereotype?,
Foundation.Core.ModelElement.behavior*,
Foundation.Core.ModelElement.classifierRole*,
Foundation.Core.ModelElement.collaboration*,
Foundation.Core.ModelElement.partition*,
Foundation.Core.ModelElement.elementImport*,
Behavioral_Elements.State_Machines.Event.state*,
Behavioral_Elements.State_Machines.Event.transition*,
Foundation.Core.ModelElement.templateParameter*,
Foundation.Core.ModelElement.taggedValue*,
Behavioral_Elements.State_Machines.Event.parameter*)?
>
<!ATTLIST Behavioral_Elements.State_Machines.Event
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL CLASS: State -->
<!-- _______________________________________________________________ -->
<!ELEMENT Behavioral_Elements.State_Machines.State.stateMachine (Behavioral_Elements.State_Machines.StateMachine |
Behavioral_Elements.Activity_Graphs.ActivityGraph)?
>
<!ELEMENT Behavioral_Elements.State_Machines.State.deferrableEvent (Behavioral_Elements.State_Machines.Event |
Behavioral_Elements.State_Machines.TimeEvent |
Behavioral_Elements.State_Machines.CallEvent |
Behavioral_Elements.State_Machines.SignalEvent |
Behavioral_Elements.State_Machines.ChangeEvent)*
>
<!ELEMENT Behavioral_Elements.State_Machines.State.classifierInState
(Behavioral_Elements.Activity_Graphs.ClassifierInState)* >
<!ELEMENT Behavioral_Elements.State_Machines.State (Foundation.Core.ModelElement.name?,
Foundation.Core.ModelElement.visibility?,
Foundation.Core.ModelElement.isSpecification?,
XMI.extension*,
Foundation.Core.ModelElement.namespace?,
Foundation.Core.ModelElement.clientDependency*,
Foundation.Core.ModelElement.constraint*,
Foundation.Core.ModelElement.supplierDependency*,
Foundation.Core.ModelElement.presentation*,
Foundation.Core.ModelElement.targetFlow*,
Foundation.Core.ModelElement.sourceFlow*,
Foundation.Core.ModelElement.templateParameter3*,
Foundation.Core.ModelElement.binding*,
Foundation.Core.ModelElement.comment*,
Foundation.Core.ModelElement.elementResidence*,
Foundation.Core.ModelElement.templateParameter2*,
Foundation.Core.ModelElement.stereotype?,
Foundation.Core.ModelElement.behavior*,
Foundation.Core.ModelElement.classifierRole*,
Foundation.Core.ModelElement.collaboration*,
Foundation.Core.ModelElement.partition*,
Foundation.Core.ModelElement.elementImport*,
Behavioral_Elements.State_Machines.StateVertex.container?,
Behavioral_Elements.State_Machines.StateVertex.outgoing*,
Behavioral_Elements.State_Machines.StateVertex.incoming*,
Behavioral_Elements.State_Machines.State.stateMachine?,
Behavioral_Elements.State_Machines.State.deferrableEvent*,
Behavioral_Elements.State_Machines.State.classifierInState*,
Foundation.Core.ModelElement.templateParameter*,
Foundation.Core.ModelElement.taggedValue*,
Behavioral_Elements.State_Machines.State.entry?,
Behavioral_Elements.State_Machines.State.exit?,
Behavioral_Elements.State_Machines.State.internalTransition*,
Behavioral_Elements.State_Machines.State.doActivity?)?
>
<!ATTLIST Behavioral_Elements.State_Machines.State
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL CLASS: TimeEvent -->
<!-- _______________________________________________________________ -->
<!ELEMENT Behavioral_Elements.State_Machines.TimeEvent.when
(Foundation.Data_Types.TimeExpression) >
<!ELEMENT Behavioral_Elements.State_Machines.TimeEvent (Foundation.Core.ModelElement.name?,
Foundation.Core.ModelElement.visibility?,
Foundation.Core.ModelElement.isSpecification?,
Behavioral_Elements.State_Machines.TimeEvent.when?,
XMI.extension*,
Foundation.Core.ModelElement.namespace?,
Foundation.Core.ModelElement.clientDependency*,
Foundation.Core.ModelElement.constraint*,
Foundation.Core.ModelElement.supplierDependency*,
Foundation.Core.ModelElement.presentation*,
Foundation.Core.ModelElement.targetFlow*,
Foundation.Core.ModelElement.sourceFlow*,
Foundation.Core.ModelElement.templateParameter3*,
Foundation.Core.ModelElement.binding*,
Foundation.Core.ModelElement.comment*,
Foundation.Core.ModelElement.elementResidence*,
Foundation.Core.ModelElement.templateParameter2*,
Foundation.Core.ModelElement.stereotype?,
Foundation.Core.ModelElement.behavior*,
Foundation.Core.ModelElement.classifierRole*,
Foundation.Core.ModelElement.collaboration*,
Foundation.Core.ModelElement.partition*,
Foundation.Core.ModelElement.elementImport*,
Behavioral_Elements.State_Machines.Event.state*,
Behavioral_Elements.State_Machines.Event.transition*,
Foundation.Core.ModelElement.templateParameter*,
Foundation.Core.ModelElement.taggedValue*,
Behavioral_Elements.State_Machines.Event.parameter*)?
>
<!ATTLIST Behavioral_Elements.State_Machines.TimeEvent
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL CLASS: CallEvent -->
<!-- _______________________________________________________________ -->
<!ELEMENT Behavioral_Elements.State_Machines.CallEvent.operation
(Foundation.Core.Operation)? >
<!ELEMENT Behavioral_Elements.State_Machines.CallEvent (Foundation.Core.ModelElement.name?,
Foundation.Core.ModelElement.visibility?,
Foundation.Core.ModelElement.isSpecification?,
XMI.extension*,
Foundation.Core.ModelElement.namespace?,
Foundation.Core.ModelElement.clientDependency*,
Foundation.Core.ModelElement.constraint*,
Foundation.Core.ModelElement.supplierDependency*,
Foundation.Core.ModelElement.presentation*,
Foundation.Core.ModelElement.targetFlow*,
Foundation.Core.ModelElement.sourceFlow*,
Foundation.Core.ModelElement.templateParameter3*,
Foundation.Core.ModelElement.binding*,
Foundation.Core.ModelElement.comment*,
Foundation.Core.ModelElement.elementResidence*,
Foundation.Core.ModelElement.templateParameter2*,
Foundation.Core.ModelElement.stereotype?,
Foundation.Core.ModelElement.behavior*,
Foundation.Core.ModelElement.classifierRole*,
Foundation.Core.ModelElement.collaboration*,
Foundation.Core.ModelElement.partition*,
Foundation.Core.ModelElement.elementImport*,
Behavioral_Elements.State_Machines.Event.state*,
Behavioral_Elements.State_Machines.Event.transition*,
Behavioral_Elements.State_Machines.CallEvent.operation?,
Foundation.Core.ModelElement.templateParameter*,
Foundation.Core.ModelElement.taggedValue*,
Behavioral_Elements.State_Machines.Event.parameter*)?
>
<!ATTLIST Behavioral_Elements.State_Machines.CallEvent
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL CLASS: SignalEvent -->
<!-- _______________________________________________________________ -->
<!ELEMENT Behavioral_Elements.State_Machines.SignalEvent.signal (Behavioral_Elements.Common_Behavior.Signal |
Behavioral_Elements.Common_Behavior.Exception)?
>
<!ELEMENT Behavioral_Elements.State_Machines.SignalEvent (Foundation.Core.ModelElement.name?,
Foundation.Core.ModelElement.visibility?,
Foundation.Core.ModelElement.isSpecification?,
XMI.extension*,
Foundation.Core.ModelElement.namespace?,
Foundation.Core.ModelElement.clientDependency*,
Foundation.Core.ModelElement.constraint*,
Foundation.Core.ModelElement.supplierDependency*,
Foundation.Core.ModelElement.presentation*,
Foundation.Core.ModelElement.targetFlow*,
Foundation.Core.ModelElement.sourceFlow*,
Foundation.Core.ModelElement.templateParameter3*,
Foundation.Core.ModelElement.binding*,
Foundation.Core.ModelElement.comment*,
Foundation.Core.ModelElement.elementResidence*,
Foundation.Core.ModelElement.templateParameter2*,
Foundation.Core.ModelElement.stereotype?,
Foundation.Core.ModelElement.behavior*,
Foundation.Core.ModelElement.classifierRole*,
Foundation.Core.ModelElement.collaboration*,
Foundation.Core.ModelElement.partition*,
Foundation.Core.ModelElement.elementImport*,
Behavioral_Elements.State_Machines.Event.state*,
Behavioral_Elements.State_Machines.Event.transition*,
Behavioral_Elements.State_Machines.SignalEvent.signal?,
Foundation.Core.ModelElement.templateParameter*,
Foundation.Core.ModelElement.taggedValue*,
Behavioral_Elements.State_Machines.Event.parameter*)?
>
<!ATTLIST Behavioral_Elements.State_Machines.SignalEvent
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL CLASS: Transition -->
<!-- _______________________________________________________________ -->
<!ELEMENT Behavioral_Elements.State_Machines.Transition.state (Behavioral_Elements.State_Machines.State |
Behavioral_Elements.State_Machines.CompositeState |
Behavioral_Elements.State_Machines.SubmachineState |
Behavioral_Elements.Activity_Graphs.SubactivityState |
Behavioral_Elements.State_Machines.SimpleState |
Behavioral_Elements.Activity_Graphs.ObjectFlowState |
Behavioral_Elements.Activity_Graphs.ActionState |
Behavioral_Elements.Activity_Graphs.CallState |
Behavioral_Elements.State_Machines.FinalState)?
>
<!ELEMENT Behavioral_Elements.State_Machines.Transition.trigger (Behavioral_Elements.State_Machines.Event |
Behavioral_Elements.State_Machines.TimeEvent |
Behavioral_Elements.State_Machines.CallEvent |
Behavioral_Elements.State_Machines.SignalEvent |
Behavioral_Elements.State_Machines.ChangeEvent)?
>
<!ELEMENT Behavioral_Elements.State_Machines.Transition.stateMachine (Behavioral_Elements.State_Machines.StateMachine |
Behavioral_Elements.Activity_Graphs.ActivityGraph)?
>
<!ELEMENT Behavioral_Elements.State_Machines.Transition.source (Behavioral_Elements.State_Machines.StateVertex |
Behavioral_Elements.State_Machines.Pseudostate |
Behavioral_Elements.State_Machines.SynchState |
Behavioral_Elements.State_Machines.StubState |
Behavioral_Elements.State_Machines.State |
Behavioral_Elements.State_Machines.CompositeState |
Behavioral_Elements.State_Machines.SubmachineState |
Behavioral_Elements.Activity_Graphs.SubactivityState |
Behavioral_Elements.State_Machines.SimpleState |
Behavioral_Elements.Activity_Graphs.ObjectFlowState |
Behavioral_Elements.Activity_Graphs.ActionState |
Behavioral_Elements.Activity_Graphs.CallState |
Behavioral_Elements.State_Machines.FinalState)?
>
<!ELEMENT Behavioral_Elements.State_Machines.Transition.target (Behavioral_Elements.State_Machines.StateVertex |
Behavioral_Elements.State_Machines.Pseudostate |
Behavioral_Elements.State_Machines.SynchState |
Behavioral_Elements.State_Machines.StubState |
Behavioral_Elements.State_Machines.State |
Behavioral_Elements.State_Machines.CompositeState |
Behavioral_Elements.State_Machines.SubmachineState |
Behavioral_Elements.Activity_Graphs.SubactivityState |
Behavioral_Elements.State_Machines.SimpleState |
Behavioral_Elements.Activity_Graphs.ObjectFlowState |
Behavioral_Elements.Activity_Graphs.ActionState |
Behavioral_Elements.Activity_Graphs.CallState |
Behavioral_Elements.State_Machines.FinalState)?
>
<!ELEMENT Behavioral_Elements.State_Machines.Transition (Foundation.Core.ModelElement.name?,
Foundation.Core.ModelElement.visibility?,
Foundation.Core.ModelElement.isSpecification?,
XMI.extension*,
Foundation.Core.ModelElement.namespace?,
Foundation.Core.ModelElement.clientDependency*,
Foundation.Core.ModelElement.constraint*,
Foundation.Core.ModelElement.supplierDependency*,
Foundation.Core.ModelElement.presentation*,
Foundation.Core.ModelElement.targetFlow*,
Foundation.Core.ModelElement.sourceFlow*,
Foundation.Core.ModelElement.templateParameter3*,
Foundation.Core.ModelElement.binding*,
Foundation.Core.ModelElement.comment*,
Foundation.Core.ModelElement.elementResidence*,
Foundation.Core.ModelElement.templateParameter2*,
Foundation.Core.ModelElement.stereotype?,
Foundation.Core.ModelElement.behavior*,
Foundation.Core.ModelElement.classifierRole*,
Foundation.Core.ModelElement.collaboration*,
Foundation.Core.ModelElement.partition*,
Foundation.Core.ModelElement.elementImport*,
Behavioral_Elements.State_Machines.Transition.state?,
Behavioral_Elements.State_Machines.Transition.trigger?,
Behavioral_Elements.State_Machines.Transition.stateMachine?,
Behavioral_Elements.State_Machines.Transition.source?,
Behavioral_Elements.State_Machines.Transition.target?,
Foundation.Core.ModelElement.templateParameter*,
Foundation.Core.ModelElement.taggedValue*,
Behavioral_Elements.State_Machines.Transition.guard?,
Behavioral_Elements.State_Machines.Transition.effect?)?
>
<!ATTLIST Behavioral_Elements.State_Machines.Transition
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL CLASS: StateVertex -->
<!-- _______________________________________________________________ -->
<!ELEMENT Behavioral_Elements.State_Machines.StateVertex.container (Behavioral_Elements.State_Machines.CompositeState |
Behavioral_Elements.State_Machines.SubmachineState |
Behavioral_Elements.Activity_Graphs.SubactivityState)?
>
<!ELEMENT Behavioral_Elements.State_Machines.StateVertex.outgoing
(Behavioral_Elements.State_Machines.Transition)* >
<!ELEMENT Behavioral_Elements.State_Machines.StateVertex.incoming
(Behavioral_Elements.State_Machines.Transition)* >
<!ELEMENT Behavioral_Elements.State_Machines.StateVertex (Foundation.Core.ModelElement.name?,
Foundation.Core.ModelElement.visibility?,
Foundation.Core.ModelElement.isSpecification?,
XMI.extension*,
Foundation.Core.ModelElement.namespace?,
Foundation.Core.ModelElement.clientDependency*,
Foundation.Core.ModelElement.constraint*,
Foundation.Core.ModelElement.supplierDependency*,
Foundation.Core.ModelElement.presentation*,
Foundation.Core.ModelElement.targetFlow*,
Foundation.Core.ModelElement.sourceFlow*,
Foundation.Core.ModelElement.templateParameter3*,
Foundation.Core.ModelElement.binding*,
Foundation.Core.ModelElement.comment*,
Foundation.Core.ModelElement.elementResidence*,
Foundation.Core.ModelElement.templateParameter2*,
Foundation.Core.ModelElement.stereotype?,
Foundation.Core.ModelElement.behavior*,
Foundation.Core.ModelElement.classifierRole*,
Foundation.Core.ModelElement.collaboration*,
Foundation.Core.ModelElement.partition*,
Foundation.Core.ModelElement.elementImport*,
Behavioral_Elements.State_Machines.StateVertex.container?,
Behavioral_Elements.State_Machines.StateVertex.outgoing*,
Behavioral_Elements.State_Machines.StateVertex.incoming*,
Foundation.Core.ModelElement.templateParameter*,
Foundation.Core.ModelElement.taggedValue*)?
>
<!ATTLIST Behavioral_Elements.State_Machines.StateVertex
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL CLASS: CompositeState -->
<!-- _______________________________________________________________ -->
<!ELEMENT Behavioral_Elements.State_Machines.CompositeState.isConcurrent
EMPTY >
<!ATTLIST Behavioral_Elements.State_Machines.CompositeState.isConcurrent
xmi.value ( true | false ) #REQUIRED
>
<!ELEMENT Behavioral_Elements.State_Machines.CompositeState (Foundation.Core.ModelElement.name?,
Foundation.Core.ModelElement.visibility?,
Foundation.Core.ModelElement.isSpecification?,
Behavioral_Elements.State_Machines.CompositeState.isConcurrent?,
XMI.extension*,
Foundation.Core.ModelElement.namespace?,
Foundation.Core.ModelElement.clientDependency*,
Foundation.Core.ModelElement.constraint*,
Foundation.Core.ModelElement.supplierDependency*,
Foundation.Core.ModelElement.presentation*,
Foundation.Core.ModelElement.targetFlow*,
Foundation.Core.ModelElement.sourceFlow*,
Foundation.Core.ModelElement.templateParameter3*,
Foundation.Core.ModelElement.binding*,
Foundation.Core.ModelElement.comment*,
Foundation.Core.ModelElement.elementResidence*,
Foundation.Core.ModelElement.templateParameter2*,
Foundation.Core.ModelElement.stereotype?,
Foundation.Core.ModelElement.behavior*,
Foundation.Core.ModelElement.classifierRole*,
Foundation.Core.ModelElement.collaboration*,
Foundation.Core.ModelElement.partition*,
Foundation.Core.ModelElement.elementImport*,
Behavioral_Elements.State_Machines.StateVertex.container?,
Behavioral_Elements.State_Machines.StateVertex.outgoing*,
Behavioral_Elements.State_Machines.StateVertex.incoming*,
Behavioral_Elements.State_Machines.State.stateMachine?,
Behavioral_Elements.State_Machines.State.deferrableEvent*,
Behavioral_Elements.State_Machines.State.classifierInState*,
Foundation.Core.ModelElement.templateParameter*,
Foundation.Core.ModelElement.taggedValue*,
Behavioral_Elements.State_Machines.State.entry?,
Behavioral_Elements.State_Machines.State.exit?,
Behavioral_Elements.State_Machines.State.internalTransition*,
Behavioral_Elements.State_Machines.State.doActivity?,
Behavioral_Elements.State_Machines.CompositeState.subvertex*)?
>
<!ATTLIST Behavioral_Elements.State_Machines.CompositeState
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL CLASS: ChangeEvent -->
<!-- _______________________________________________________________ -->
<!ELEMENT Behavioral_Elements.State_Machines.ChangeEvent.changeExpression
(Foundation.Data_Types.BooleanExpression) >
<!ELEMENT Behavioral_Elements.State_Machines.ChangeEvent (Foundation.Core.ModelElement.name?,
Foundation.Core.ModelElement.visibility?,
Foundation.Core.ModelElement.isSpecification?,
Behavioral_Elements.State_Machines.ChangeEvent.changeExpression?,
XMI.extension*,
Foundation.Core.ModelElement.namespace?,
Foundation.Core.ModelElement.clientDependency*,
Foundation.Core.ModelElement.constraint*,
Foundation.Core.ModelElement.supplierDependency*,
Foundation.Core.ModelElement.presentation*,
Foundation.Core.ModelElement.targetFlow*,
Foundation.Core.ModelElement.sourceFlow*,
Foundation.Core.ModelElement.templateParameter3*,
Foundation.Core.ModelElement.binding*,
Foundation.Core.ModelElement.comment*,
Foundation.Core.ModelElement.elementResidence*,
Foundation.Core.ModelElement.templateParameter2*,
Foundation.Core.ModelElement.stereotype?,
Foundation.Core.ModelElement.behavior*,
Foundation.Core.ModelElement.classifierRole*,
Foundation.Core.ModelElement.collaboration*,
Foundation.Core.ModelElement.partition*,
Foundation.Core.ModelElement.elementImport*,
Behavioral_Elements.State_Machines.Event.state*,
Behavioral_Elements.State_Machines.Event.transition*,
Foundation.Core.ModelElement.templateParameter*,
Foundation.Core.ModelElement.taggedValue*,
Behavioral_Elements.State_Machines.Event.parameter*)?
>
<!ATTLIST Behavioral_Elements.State_Machines.ChangeEvent
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL CLASS: Guard -->
<!-- _______________________________________________________________ -->
<!ELEMENT Behavioral_Elements.State_Machines.Guard.expression
(Foundation.Data_Types.BooleanExpression) >
<!ELEMENT Behavioral_Elements.State_Machines.Guard.transition
(Behavioral_Elements.State_Machines.Transition)? >
<!ELEMENT Behavioral_Elements.State_Machines.Guard (Foundation.Core.ModelElement.name?,
Foundation.Core.ModelElement.visibility?,
Foundation.Core.ModelElement.isSpecification?,
Behavioral_Elements.State_Machines.Guard.expression?,
XMI.extension*,
Foundation.Core.ModelElement.namespace?,
Foundation.Core.ModelElement.clientDependency*,
Foundation.Core.ModelElement.constraint*,
Foundation.Core.ModelElement.supplierDependency*,
Foundation.Core.ModelElement.presentation*,
Foundation.Core.ModelElement.targetFlow*,
Foundation.Core.ModelElement.sourceFlow*,
Foundation.Core.ModelElement.templateParameter3*,
Foundation.Core.ModelElement.binding*,
Foundation.Core.ModelElement.comment*,
Foundation.Core.ModelElement.elementResidence*,
Foundation.Core.ModelElement.templateParameter2*,
Foundation.Core.ModelElement.stereotype?,
Foundation.Core.ModelElement.behavior*,
Foundation.Core.ModelElement.classifierRole*,
Foundation.Core.ModelElement.collaboration*,
Foundation.Core.ModelElement.partition*,
Foundation.Core.ModelElement.elementImport*,
Behavioral_Elements.State_Machines.Guard.transition?,
Foundation.Core.ModelElement.templateParameter*,
Foundation.Core.ModelElement.taggedValue*)?
>
<!ATTLIST Behavioral_Elements.State_Machines.Guard
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL CLASS: Pseudostate -->
<!-- _______________________________________________________________ -->
<!ELEMENT Behavioral_Elements.State_Machines.Pseudostate.kind EMPTY >
<!ATTLIST Behavioral_Elements.State_Machines.Pseudostate.kind
xmi.value ( initial | deepHistory | shallowHistory | join | fork | branch | junction | final ) #REQUIRED
>
<!ELEMENT Behavioral_Elements.State_Machines.Pseudostate (Foundation.Core.ModelElement.name?,
Foundation.Core.ModelElement.visibility?,
Foundation.Core.ModelElement.isSpecification?,
Behavioral_Elements.State_Machines.Pseudostate.kind?,
XMI.extension*,
Foundation.Core.ModelElement.namespace?,
Foundation.Core.ModelElement.clientDependency*,
Foundation.Core.ModelElement.constraint*,
Foundation.Core.ModelElement.supplierDependency*,
Foundation.Core.ModelElement.presentation*,
Foundation.Core.ModelElement.targetFlow*,
Foundation.Core.ModelElement.sourceFlow*,
Foundation.Core.ModelElement.templateParameter3*,
Foundation.Core.ModelElement.binding*,
Foundation.Core.ModelElement.comment*,
Foundation.Core.ModelElement.elementResidence*,
Foundation.Core.ModelElement.templateParameter2*,
Foundation.Core.ModelElement.stereotype?,
Foundation.Core.ModelElement.behavior*,
Foundation.Core.ModelElement.classifierRole*,
Foundation.Core.ModelElement.collaboration*,
Foundation.Core.ModelElement.partition*,
Foundation.Core.ModelElement.elementImport*,
Behavioral_Elements.State_Machines.StateVertex.container?,
Behavioral_Elements.State_Machines.StateVertex.outgoing*,
Behavioral_Elements.State_Machines.StateVertex.incoming*,
Foundation.Core.ModelElement.templateParameter*,
Foundation.Core.ModelElement.taggedValue*)?
>
<!ATTLIST Behavioral_Elements.State_Machines.Pseudostate
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL CLASS: SimpleState -->
<!-- _______________________________________________________________ -->
<!ELEMENT Behavioral_Elements.State_Machines.SimpleState (Foundation.Core.ModelElement.name?,
Foundation.Core.ModelElement.visibility?,
Foundation.Core.ModelElement.isSpecification?,
XMI.extension*,
Foundation.Core.ModelElement.namespace?,
Foundation.Core.ModelElement.clientDependency*,
Foundation.Core.ModelElement.constraint*,
Foundation.Core.ModelElement.supplierDependency*,
Foundation.Core.ModelElement.presentation*,
Foundation.Core.ModelElement.targetFlow*,
Foundation.Core.ModelElement.sourceFlow*,
Foundation.Core.ModelElement.templateParameter3*,
Foundation.Core.ModelElement.binding*,
Foundation.Core.ModelElement.comment*,
Foundation.Core.ModelElement.elementResidence*,
Foundation.Core.ModelElement.templateParameter2*,
Foundation.Core.ModelElement.stereotype?,
Foundation.Core.ModelElement.behavior*,
Foundation.Core.ModelElement.classifierRole*,
Foundation.Core.ModelElement.collaboration*,
Foundation.Core.ModelElement.partition*,
Foundation.Core.ModelElement.elementImport*,
Behavioral_Elements.State_Machines.StateVertex.container?,
Behavioral_Elements.State_Machines.StateVertex.outgoing*,
Behavioral_Elements.State_Machines.StateVertex.incoming*,
Behavioral_Elements.State_Machines.State.stateMachine?,
Behavioral_Elements.State_Machines.State.deferrableEvent*,
Behavioral_Elements.State_Machines.State.classifierInState*,
Foundation.Core.ModelElement.templateParameter*,
Foundation.Core.ModelElement.taggedValue*,
Behavioral_Elements.State_Machines.State.entry?,
Behavioral_Elements.State_Machines.State.exit?,
Behavioral_Elements.State_Machines.State.internalTransition*,
Behavioral_Elements.State_Machines.State.doActivity?)?
>
<!ATTLIST Behavioral_Elements.State_Machines.SimpleState
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL CLASS: SubmachineState -->
<!-- _______________________________________________________________ -->
<!ELEMENT Behavioral_Elements.State_Machines.SubmachineState.submachine (Behavioral_Elements.State_Machines.StateMachine
|
Behavioral_Elements.Activity_Graphs.ActivityGraph)?
>
<!ELEMENT Behavioral_Elements.State_Machines.SubmachineState (Foundation.Core.ModelElement.name?,
Foundation.Core.ModelElement.visibility?,
Foundation.Core.ModelElement.isSpecification?,
Behavioral_Elements.State_Machines.CompositeState.isConcurrent?,
XMI.extension*,
Foundation.Core.ModelElement.namespace?,
Foundation.Core.ModelElement.clientDependency*,
Foundation.Core.ModelElement.constraint*,
Foundation.Core.ModelElement.supplierDependency*,
Foundation.Core.ModelElement.presentation*,
Foundation.Core.ModelElement.targetFlow*,
Foundation.Core.ModelElement.sourceFlow*,
Foundation.Core.ModelElement.templateParameter3*,
Foundation.Core.ModelElement.binding*,
Foundation.Core.ModelElement.comment*,
Foundation.Core.ModelElement.elementResidence*,
Foundation.Core.ModelElement.templateParameter2*,
Foundation.Core.ModelElement.stereotype?,
Foundation.Core.ModelElement.behavior*,
Foundation.Core.ModelElement.classifierRole*,
Foundation.Core.ModelElement.collaboration*,
Foundation.Core.ModelElement.partition*,
Foundation.Core.ModelElement.elementImport*,
Behavioral_Elements.State_Machines.StateVertex.container?,
Behavioral_Elements.State_Machines.StateVertex.outgoing*,
Behavioral_Elements.State_Machines.StateVertex.incoming*,
Behavioral_Elements.State_Machines.State.stateMachine?,
Behavioral_Elements.State_Machines.State.deferrableEvent*,
Behavioral_Elements.State_Machines.State.classifierInState*,
Behavioral_Elements.State_Machines.SubmachineState.submachine?,
Foundation.Core.ModelElement.templateParameter*,
Foundation.Core.ModelElement.taggedValue*,
Behavioral_Elements.State_Machines.State.entry?,
Behavioral_Elements.State_Machines.State.exit?,
Behavioral_Elements.State_Machines.State.internalTransition*,
Behavioral_Elements.State_Machines.State.doActivity?,
Behavioral_Elements.State_Machines.CompositeState.subvertex*)?
>
<!ATTLIST Behavioral_Elements.State_Machines.SubmachineState
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL CLASS: SynchState -->
<!-- _______________________________________________________________ -->
<!ELEMENT Behavioral_Elements.State_Machines.SynchState.bound (#PCDATA |
XMI.reference)*
>
<!ELEMENT Behavioral_Elements.State_Machines.SynchState (Foundation.Core.ModelElement.name?,
Foundation.Core.ModelElement.visibility?,
Foundation.Core.ModelElement.isSpecification?,
Behavioral_Elements.State_Machines.SynchState.bound?,
XMI.extension*,
Foundation.Core.ModelElement.namespace?,
Foundation.Core.ModelElement.clientDependency*,
Foundation.Core.ModelElement.constraint*,
Foundation.Core.ModelElement.supplierDependency*,
Foundation.Core.ModelElement.presentation*,
Foundation.Core.ModelElement.targetFlow*,
Foundation.Core.ModelElement.sourceFlow*,
Foundation.Core.ModelElement.templateParameter3*,
Foundation.Core.ModelElement.binding*,
Foundation.Core.ModelElement.comment*,
Foundation.Core.ModelElement.elementResidence*,
Foundation.Core.ModelElement.templateParameter2*,
Foundation.Core.ModelElement.stereotype?,
Foundation.Core.ModelElement.behavior*,
Foundation.Core.ModelElement.classifierRole*,
Foundation.Core.ModelElement.collaboration*,
Foundation.Core.ModelElement.partition*,
Foundation.Core.ModelElement.elementImport*,
Behavioral_Elements.State_Machines.StateVertex.container?,
Behavioral_Elements.State_Machines.StateVertex.outgoing*,
Behavioral_Elements.State_Machines.StateVertex.incoming*,
Foundation.Core.ModelElement.templateParameter*,
Foundation.Core.ModelElement.taggedValue*)?
>
<!ATTLIST Behavioral_Elements.State_Machines.SynchState
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL CLASS: StubState -->
<!-- _______________________________________________________________ -->
<!ELEMENT Behavioral_Elements.State_Machines.StubState.referenceState (#PCDATA |
XMI.reference)*
>
<!ELEMENT Behavioral_Elements.State_Machines.StubState (Foundation.Core.ModelElement.name?,
Foundation.Core.ModelElement.visibility?,
Foundation.Core.ModelElement.isSpecification?,
Behavioral_Elements.State_Machines.StubState.referenceState?,
XMI.extension*,
Foundation.Core.ModelElement.namespace?,
Foundation.Core.ModelElement.clientDependency*,
Foundation.Core.ModelElement.constraint*,
Foundation.Core.ModelElement.supplierDependency*,
Foundation.Core.ModelElement.presentation*,
Foundation.Core.ModelElement.targetFlow*,
Foundation.Core.ModelElement.sourceFlow*,
Foundation.Core.ModelElement.templateParameter3*,
Foundation.Core.ModelElement.binding*,
Foundation.Core.ModelElement.comment*,
Foundation.Core.ModelElement.elementResidence*,
Foundation.Core.ModelElement.templateParameter2*,
Foundation.Core.ModelElement.stereotype?,
Foundation.Core.ModelElement.behavior*,
Foundation.Core.ModelElement.classifierRole*,
Foundation.Core.ModelElement.collaboration*,
Foundation.Core.ModelElement.partition*,
Foundation.Core.ModelElement.elementImport*,
Behavioral_Elements.State_Machines.StateVertex.container?,
Behavioral_Elements.State_Machines.StateVertex.outgoing*,
Behavioral_Elements.State_Machines.StateVertex.incoming*,
Foundation.Core.ModelElement.templateParameter*,
Foundation.Core.ModelElement.taggedValue*)?
>
<!ATTLIST Behavioral_Elements.State_Machines.StubState
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL CLASS: FinalState -->
<!-- _______________________________________________________________ -->
<!ELEMENT Behavioral_Elements.State_Machines.FinalState (Foundation.Core.ModelElement.name?,
Foundation.Core.ModelElement.visibility?,
Foundation.Core.ModelElement.isSpecification?,
XMI.extension*,
Foundation.Core.ModelElement.namespace?,
Foundation.Core.ModelElement.clientDependency*,
Foundation.Core.ModelElement.constraint*,
Foundation.Core.ModelElement.supplierDependency*,
Foundation.Core.ModelElement.presentation*,
Foundation.Core.ModelElement.targetFlow*,
Foundation.Core.ModelElement.sourceFlow*,
Foundation.Core.ModelElement.templateParameter3*,
Foundation.Core.ModelElement.binding*,
Foundation.Core.ModelElement.comment*,
Foundation.Core.ModelElement.elementResidence*,
Foundation.Core.ModelElement.templateParameter2*,
Foundation.Core.ModelElement.stereotype?,
Foundation.Core.ModelElement.behavior*,
Foundation.Core.ModelElement.classifierRole*,
Foundation.Core.ModelElement.collaboration*,
Foundation.Core.ModelElement.partition*,
Foundation.Core.ModelElement.elementImport*,
Behavioral_Elements.State_Machines.StateVertex.container?,
Behavioral_Elements.State_Machines.StateVertex.outgoing*,
Behavioral_Elements.State_Machines.StateVertex.incoming*,
Behavioral_Elements.State_Machines.State.stateMachine?,
Behavioral_Elements.State_Machines.State.deferrableEvent*,
Behavioral_Elements.State_Machines.State.classifierInState*,
Foundation.Core.ModelElement.templateParameter*,
Foundation.Core.ModelElement.taggedValue*,
Behavioral_Elements.State_Machines.State.entry?,
Behavioral_Elements.State_Machines.State.exit?,
Behavioral_Elements.State_Machines.State.internalTransition*,
Behavioral_Elements.State_Machines.State.doActivity?)?
>
<!ATTLIST Behavioral_Elements.State_Machines.FinalState
%XMI.element.att;
%XMI.link.att;
>
<!ELEMENT Behavioral_Elements.State_Machines ((Behavioral_Elements.State_Machines.StateMachine |
Behavioral_Elements.State_Machines.Event |
Behavioral_Elements.State_Machines.State |
Behavioral_Elements.State_Machines.TimeEvent |
Behavioral_Elements.State_Machines.CallEvent |
Behavioral_Elements.State_Machines.SignalEvent |
Behavioral_Elements.State_Machines.Transition |
Behavioral_Elements.State_Machines.StateVertex |
Behavioral_Elements.State_Machines.CompositeState |
Behavioral_Elements.State_Machines.ChangeEvent |
Behavioral_Elements.State_Machines.Guard |
Behavioral_Elements.State_Machines.Pseudostate |
Behavioral_Elements.State_Machines.SimpleState |
Behavioral_Elements.State_Machines.SubmachineState |
Behavioral_Elements.State_Machines.SynchState |
Behavioral_Elements.State_Machines.StubState |
Behavioral_Elements.State_Machines.FinalState)*)
>
<!ATTLIST Behavioral_Elements.State_Machines
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL PACKAGE: Collaborations -->
<!-- _______________________________________________________________ -->
<!ELEMENT Behavioral_Elements.Collaborations.Interaction.message
(Behavioral_Elements.Collaborations.Message)* >
<!ELEMENT Behavioral_Elements.Collaborations.Collaboration.interaction
(Behavioral_Elements.Collaborations.Interaction)* >
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL CLASS: Collaboration -->
<!-- _______________________________________________________________ -->
<!ELEMENT Behavioral_Elements.Collaborations.Collaboration.representedClassifier (Foundation.Core.Classifier |
Foundation.Core.Class |
Foundation.Core.AssociationClass |
Foundation.Core.DataType |
Foundation.Core.Interface |
Foundation.Core.Component |
Foundation.Core.Node |
Behavioral_Elements.Common_Behavior.Signal |
Behavioral_Elements.Common_Behavior.Exception |
Behavioral_Elements.Use_Cases.UseCase |
Behavioral_Elements.Use_Cases.Actor |
Behavioral_Elements.Collaborations.ClassifierRole |
Behavioral_Elements.Activity_Graphs.ClassifierInState |
Model_Management.Subsystem)?
>
<!ELEMENT Behavioral_Elements.Collaborations.Collaboration.representedOperation
(Foundation.Core.Operation)? >
<!ELEMENT Behavioral_Elements.Collaborations.Collaboration.constrainingElement (Foundation.Core.ModelElement |
Foundation.Core.Comment |
Foundation.Core.Relationship |
Behavioral_Elements.Use_Cases.Extend |
Behavioral_Elements.Use_Cases.Include |
Foundation.Core.Generalization |
Foundation.Core.Flow |
Foundation.Core.Association |
Foundation.Core.AssociationClass |
Behavioral_Elements.Collaborations.AssociationRole |
Foundation.Core.Dependency |
Foundation.Core.Abstraction |
Foundation.Core.Usage |
Foundation.Core.Binding |
Foundation.Core.Permission |
Foundation.Extension_Mechanisms.TaggedValue |
Behavioral_Elements.Common_Behavior.Instance |
Behavioral_Elements.Common_Behavior.Object |
Behavioral_Elements.Common_Behavior.LinkObject |
Behavioral_Elements.Common_Behavior.DataValue |
Behavioral_Elements.Common_Behavior.ComponentInstance |
Behavioral_Elements.Common_Behavior.NodeInstance |
Behavioral_Elements.Use_Cases.UseCaseInstance |
Behavioral_Elements.Common_Behavior.Action |
Behavioral_Elements.Common_Behavior.CallAction |
Behavioral_Elements.Common_Behavior.SendAction |
Behavioral_Elements.Common_Behavior.ActionSequence |
Behavioral_Elements.Common_Behavior.ReturnAction |
Behavioral_Elements.Common_Behavior.TerminateAction |
Behavioral_Elements.Common_Behavior.DestroyAction |
Behavioral_Elements.Common_Behavior.CreateAction |
Behavioral_Elements.Common_Behavior.UninterpretedAction |
Behavioral_Elements.Common_Behavior.AttributeLink |
Behavioral_Elements.Common_Behavior.Argument |
Behavioral_Elements.Common_Behavior.Link |
Behavioral_Elements.Common_Behavior.LinkEnd |
Behavioral_Elements.Common_Behavior.Stimulus |
Behavioral_Elements.Use_Cases.ExtensionPoint |
Behavioral_Elements.State_Machines.StateMachine |
Behavioral_Elements.Activity_Graphs.ActivityGraph |
Behavioral_Elements.State_Machines.Event |
Behavioral_Elements.State_Machines.TimeEvent |
Behavioral_Elements.State_Machines.CallEvent |
Behavioral_Elements.State_Machines.SignalEvent |
Behavioral_Elements.State_Machines.ChangeEvent |
Behavioral_Elements.State_Machines.Transition |
Behavioral_Elements.State_Machines.StateVertex |
Behavioral_Elements.State_Machines.Pseudostate |
Behavioral_Elements.State_Machines.SynchState |
Behavioral_Elements.State_Machines.StubState |
Behavioral_Elements.State_Machines.State |
Behavioral_Elements.State_Machines.CompositeState |
Behavioral_Elements.State_Machines.SubmachineState |
Behavioral_Elements.Activity_Graphs.SubactivityState |
Behavioral_Elements.State_Machines.SimpleState |
Behavioral_Elements.Activity_Graphs.ObjectFlowState |
Behavioral_Elements.Activity_Graphs.ActionState |
Behavioral_Elements.Activity_Graphs.CallState |
Behavioral_Elements.State_Machines.FinalState |
Behavioral_Elements.State_Machines.Guard |
Behavioral_Elements.Collaborations.Message |
Behavioral_Elements.Collaborations.Interaction |
Behavioral_Elements.Activity_Graphs.Partition |
Foundation.Core.Feature |
Foundation.Core.BehavioralFeature |
Behavioral_Elements.Common_Behavior.Reception |
Foundation.Core.Operation |
Foundation.Core.Method |
Foundation.Core.StructuralFeature |
Foundation.Core.Attribute |
Foundation.Core.GeneralizableElement |
Foundation.Extension_Mechanisms.Stereotype |
Behavioral_Elements.Collaborations.Collaboration |
Model_Management.Package |
Model_Management.Subsystem |
Model_Management.Model |
Foundation.Core.Classifier |
Foundation.Core.Class |
Foundation.Core.DataType |
Foundation.Core.Interface |
Foundation.Core.Component |
Foundation.Core.Node |
Behavioral_Elements.Common_Behavior.Signal |
Behavioral_Elements.Common_Behavior.Exception |
Behavioral_Elements.Use_Cases.UseCase |
Behavioral_Elements.Use_Cases.Actor |
Behavioral_Elements.Collaborations.ClassifierRole |
Behavioral_Elements.Activity_Graphs.ClassifierInState |
Foundation.Core.AssociationEnd |
Behavioral_Elements.Collaborations.AssociationEndRole |
Foundation.Core.Namespace |
Foundation.Core.Parameter |
Foundation.Core.Constraint)*
>
<!ELEMENT Behavioral_Elements.Collaborations.Collaboration (Foundation.Core.ModelElement.name?,
Foundation.Core.ModelElement.visibility?,
Foundation.Core.ModelElement.isSpecification?,
Foundation.Core.GeneralizableElement.isRoot?,
Foundation.Core.GeneralizableElement.isLeaf?,
Foundation.Core.GeneralizableElement.isAbstract?,
XMI.extension*,
Foundation.Core.ModelElement.namespace?,
Foundation.Core.ModelElement.clientDependency*,
Foundation.Core.ModelElement.constraint*,
Foundation.Core.ModelElement.supplierDependency*,
Foundation.Core.ModelElement.presentation*,
Foundation.Core.ModelElement.targetFlow*,
Foundation.Core.ModelElement.sourceFlow*,
Foundation.Core.ModelElement.templateParameter3*,
Foundation.Core.ModelElement.binding*,
Foundation.Core.ModelElement.comment*,
Foundation.Core.ModelElement.elementResidence*,
Foundation.Core.ModelElement.templateParameter2*,
Foundation.Core.ModelElement.stereotype?,
Foundation.Core.ModelElement.behavior*,
Foundation.Core.ModelElement.classifierRole*,
Foundation.Core.ModelElement.collaboration*,
Foundation.Core.ModelElement.partition*,
Foundation.Core.ModelElement.elementImport*,
Foundation.Core.GeneralizableElement.generalization*,
Foundation.Core.GeneralizableElement.specialization*,
Behavioral_Elements.Collaborations.Collaboration.representedClassifier?,
Behavioral_Elements.Collaborations.Collaboration.representedOperation?,
Behavioral_Elements.Collaborations.Collaboration.constrainingElement*,
Foundation.Core.ModelElement.templateParameter*,
Foundation.Core.ModelElement.taggedValue*,
Foundation.Core.Namespace.ownedElement*,
Behavioral_Elements.Collaborations.Collaboration.interaction*)?
>
<!ATTLIST Behavioral_Elements.Collaborations.Collaboration
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL CLASS: ClassifierRole -->
<!-- _______________________________________________________________ -->
<!ELEMENT Behavioral_Elements.Collaborations.ClassifierRole.multiplicity
(Foundation.Data_Types.Multiplicity) >
<!ELEMENT Behavioral_Elements.Collaborations.ClassifierRole.base (Foundation.Core.Classifier |
Foundation.Core.Class |
Foundation.Core.AssociationClass |
Foundation.Core.DataType |
Foundation.Core.Interface |
Foundation.Core.Component |
Foundation.Core.Node |
Behavioral_Elements.Common_Behavior.Signal |
Behavioral_Elements.Common_Behavior.Exception |
Behavioral_Elements.Use_Cases.UseCase |
Behavioral_Elements.Use_Cases.Actor |
Behavioral_Elements.Collaborations.ClassifierRole |
Behavioral_Elements.Activity_Graphs.ClassifierInState |
Model_Management.Subsystem)*
>
<!ELEMENT Behavioral_Elements.Collaborations.ClassifierRole.associationEndRole
(Behavioral_Elements.Collaborations.AssociationEndRole)* >
<!ELEMENT Behavioral_Elements.Collaborations.ClassifierRole.collaboration
(Behavioral_Elements.Collaborations.Collaboration)? >
<!ELEMENT Behavioral_Elements.Collaborations.ClassifierRole.availableFeature (Foundation.Core.Feature |
Foundation.Core.BehavioralFeature |
Behavioral_Elements.Common_Behavior.Reception |
Foundation.Core.Operation |
Foundation.Core.Method |
Foundation.Core.StructuralFeature |
Foundation.Core.Attribute)*
>
<!ELEMENT Behavioral_Elements.Collaborations.ClassifierRole.message2
(Behavioral_Elements.Collaborations.Message)* >
<!ELEMENT Behavioral_Elements.Collaborations.ClassifierRole.message1
(Behavioral_Elements.Collaborations.Message)* >
<!ELEMENT Behavioral_Elements.Collaborations.ClassifierRole.availableContents (Foundation.Core.ModelElement |
Foundation.Core.Comment |
Foundation.Core.Relationship |
Behavioral_Elements.Use_Cases.Extend |
Behavioral_Elements.Use_Cases.Include |
Foundation.Core.Generalization |
Foundation.Core.Flow |
Foundation.Core.Association |
Foundation.Core.AssociationClass |
Behavioral_Elements.Collaborations.AssociationRole |
Foundation.Core.Dependency |
Foundation.Core.Abstraction |
Foundation.Core.Usage |
Foundation.Core.Binding |
Foundation.Core.Permission |
Foundation.Extension_Mechanisms.TaggedValue |
Behavioral_Elements.Common_Behavior.Instance |
Behavioral_Elements.Common_Behavior.Object |
Behavioral_Elements.Common_Behavior.LinkObject |
Behavioral_Elements.Common_Behavior.DataValue |
Behavioral_Elements.Common_Behavior.ComponentInstance |
Behavioral_Elements.Common_Behavior.NodeInstance |
Behavioral_Elements.Use_Cases.UseCaseInstance |
Behavioral_Elements.Common_Behavior.Action |
Behavioral_Elements.Common_Behavior.CallAction |
Behavioral_Elements.Common_Behavior.SendAction |
Behavioral_Elements.Common_Behavior.ActionSequence |
Behavioral_Elements.Common_Behavior.ReturnAction |
Behavioral_Elements.Common_Behavior.TerminateAction |
Behavioral_Elements.Common_Behavior.DestroyAction |
Behavioral_Elements.Common_Behavior.CreateAction |
Behavioral_Elements.Common_Behavior.UninterpretedAction |
Behavioral_Elements.Common_Behavior.AttributeLink |
Behavioral_Elements.Common_Behavior.Argument |
Behavioral_Elements.Common_Behavior.Link |
Behavioral_Elements.Common_Behavior.LinkEnd |
Behavioral_Elements.Common_Behavior.Stimulus |
Behavioral_Elements.Use_Cases.ExtensionPoint |
Behavioral_Elements.State_Machines.StateMachine |
Behavioral_Elements.Activity_Graphs.ActivityGraph |
Behavioral_Elements.State_Machines.Event |
Behavioral_Elements.State_Machines.TimeEvent |
Behavioral_Elements.State_Machines.CallEvent |
Behavioral_Elements.State_Machines.SignalEvent |
Behavioral_Elements.State_Machines.ChangeEvent |
Behavioral_Elements.State_Machines.Transition |
Behavioral_Elements.State_Machines.StateVertex |
Behavioral_Elements.State_Machines.Pseudostate |
Behavioral_Elements.State_Machines.SynchState |
Behavioral_Elements.State_Machines.StubState |
Behavioral_Elements.State_Machines.State |
Behavioral_Elements.State_Machines.CompositeState |
Behavioral_Elements.State_Machines.SubmachineState |
Behavioral_Elements.Activity_Graphs.SubactivityState |
Behavioral_Elements.State_Machines.SimpleState |
Behavioral_Elements.Activity_Graphs.ObjectFlowState |
Behavioral_Elements.Activity_Graphs.ActionState |
Behavioral_Elements.Activity_Graphs.CallState |
Behavioral_Elements.State_Machines.FinalState |
Behavioral_Elements.State_Machines.Guard |
Behavioral_Elements.Collaborations.Message |
Behavioral_Elements.Collaborations.Interaction |
Behavioral_Elements.Activity_Graphs.Partition |
Foundation.Core.Feature |
Foundation.Core.BehavioralFeature |
Behavioral_Elements.Common_Behavior.Reception |
Foundation.Core.Operation |
Foundation.Core.Method |
Foundation.Core.StructuralFeature |
Foundation.Core.Attribute |
Foundation.Core.GeneralizableElement |
Foundation.Extension_Mechanisms.Stereotype |
Behavioral_Elements.Collaborations.Collaboration |
Model_Management.Package |
Model_Management.Subsystem |
Model_Management.Model |
Foundation.Core.Classifier |
Foundation.Core.Class |
Foundation.Core.DataType |
Foundation.Core.Interface |
Foundation.Core.Component |
Foundation.Core.Node |
Behavioral_Elements.Common_Behavior.Signal |
Behavioral_Elements.Common_Behavior.Exception |
Behavioral_Elements.Use_Cases.UseCase |
Behavioral_Elements.Use_Cases.Actor |
Behavioral_Elements.Collaborations.ClassifierRole |
Behavioral_Elements.Activity_Graphs.ClassifierInState |
Foundation.Core.AssociationEnd |
Behavioral_Elements.Collaborations.AssociationEndRole |
Foundation.Core.Namespace |
Foundation.Core.Parameter |
Foundation.Core.Constraint)*
>
<!ELEMENT Behavioral_Elements.Collaborations.ClassifierRole (Foundation.Core.ModelElement.name?,
Foundation.Core.ModelElement.visibility?,
Foundation.Core.ModelElement.isSpecification?,
Foundation.Core.GeneralizableElement.isRoot?,
Foundation.Core.GeneralizableElement.isLeaf?,
Foundation.Core.GeneralizableElement.isAbstract?,
Behavioral_Elements.Collaborations.ClassifierRole.multiplicity?,
XMI.extension*,
Foundation.Core.ModelElement.namespace?,
Foundation.Core.ModelElement.clientDependency*,
Foundation.Core.ModelElement.constraint*,
Foundation.Core.ModelElement.supplierDependency*,
Foundation.Core.ModelElement.presentation*,
Foundation.Core.ModelElement.targetFlow*,
Foundation.Core.ModelElement.sourceFlow*,
Foundation.Core.ModelElement.templateParameter3*,
Foundation.Core.ModelElement.binding*,
Foundation.Core.ModelElement.comment*,
Foundation.Core.ModelElement.elementResidence*,
Foundation.Core.ModelElement.templateParameter2*,
Foundation.Core.ModelElement.stereotype?,
Foundation.Core.ModelElement.behavior*,
Foundation.Core.ModelElement.classifierRole*,
Foundation.Core.ModelElement.collaboration*,
Foundation.Core.ModelElement.partition*,
Foundation.Core.ModelElement.elementImport*,
Foundation.Core.GeneralizableElement.generalization*,
Foundation.Core.GeneralizableElement.specialization*,
Foundation.Core.Classifier.participant*,
Foundation.Core.Classifier.powertypeRange*,
Foundation.Core.Classifier.instance*,
Foundation.Core.Classifier.createAction*,
Foundation.Core.Classifier.classifierRole*,
Foundation.Core.Classifier.collaboration*,
Foundation.Core.Classifier.classifierInState*,
Foundation.Core.Classifier.objectFlowState*,
Behavioral_Elements.Collaborations.ClassifierRole.base*,
Behavioral_Elements.Collaborations.ClassifierRole.associationEndRole*,
Behavioral_Elements.Collaborations.ClassifierRole.collaboration?,
Behavioral_Elements.Collaborations.ClassifierRole.availableFeature*,
Behavioral_Elements.Collaborations.ClassifierRole.message2*,
Behavioral_Elements.Collaborations.ClassifierRole.message1*,
Behavioral_Elements.Collaborations.ClassifierRole.availableContents*,
Foundation.Core.ModelElement.templateParameter*,
Foundation.Core.ModelElement.taggedValue*,
Foundation.Core.Namespace.ownedElement*,
Foundation.Core.Classifier.feature*)?
>
<!ATTLIST Behavioral_Elements.Collaborations.ClassifierRole
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL CLASS: AssociationRole -->
<!-- _______________________________________________________________ -->
<!ELEMENT Behavioral_Elements.Collaborations.AssociationRole.multiplicity
(Foundation.Data_Types.Multiplicity) >
<!ELEMENT Behavioral_Elements.Collaborations.AssociationRole.base (Foundation.Core.Association |
Foundation.Core.AssociationClass |
Behavioral_Elements.Collaborations.AssociationRole)?
>
<!ELEMENT Behavioral_Elements.Collaborations.AssociationRole.collaboration
(Behavioral_Elements.Collaborations.Collaboration)? >
<!ELEMENT Behavioral_Elements.Collaborations.AssociationRole.message
(Behavioral_Elements.Collaborations.Message)* >
<!ELEMENT Behavioral_Elements.Collaborations.AssociationRole (Foundation.Core.ModelElement.name?,
Foundation.Core.ModelElement.visibility?,
Foundation.Core.ModelElement.isSpecification?,
Foundation.Core.GeneralizableElement.isRoot?,
Foundation.Core.GeneralizableElement.isLeaf?,
Foundation.Core.GeneralizableElement.isAbstract?,
Behavioral_Elements.Collaborations.AssociationRole.multiplicity?,
XMI.extension*,
Foundation.Core.ModelElement.namespace?,
Foundation.Core.ModelElement.clientDependency*,
Foundation.Core.ModelElement.constraint*,
Foundation.Core.ModelElement.supplierDependency*,
Foundation.Core.ModelElement.presentation*,
Foundation.Core.ModelElement.targetFlow*,
Foundation.Core.ModelElement.sourceFlow*,
Foundation.Core.ModelElement.templateParameter3*,
Foundation.Core.ModelElement.binding*,
Foundation.Core.ModelElement.comment*,
Foundation.Core.ModelElement.elementResidence*,
Foundation.Core.ModelElement.templateParameter2*,
Foundation.Core.ModelElement.stereotype?,
Foundation.Core.ModelElement.behavior*,
Foundation.Core.ModelElement.classifierRole*,
Foundation.Core.ModelElement.collaboration*,
Foundation.Core.ModelElement.partition*,
Foundation.Core.ModelElement.elementImport*,
Foundation.Core.GeneralizableElement.generalization*,
Foundation.Core.GeneralizableElement.specialization*,
Foundation.Core.Association.link*,
Foundation.Core.Association.associationRole*,
Behavioral_Elements.Collaborations.AssociationRole.base?,
Behavioral_Elements.Collaborations.AssociationRole.collaboration?,
Behavioral_Elements.Collaborations.AssociationRole.message*,
Foundation.Core.ModelElement.templateParameter*,
Foundation.Core.ModelElement.taggedValue*,
Foundation.Core.Association.connection*)?
>
<!ATTLIST Behavioral_Elements.Collaborations.AssociationRole
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL CLASS: AssociationEndRole -->
<!-- _______________________________________________________________ -->
<!ELEMENT Behavioral_Elements.Collaborations.AssociationEndRole.collaborationMultiplicity
(Foundation.Data_Types.Multiplicity) >
<!ELEMENT Behavioral_Elements.Collaborations.AssociationEndRole.associationRole
(Behavioral_Elements.Collaborations.AssociationRole)? >
<!ELEMENT Behavioral_Elements.Collaborations.AssociationEndRole.base (Foundation.Core.AssociationEnd |
Behavioral_Elements.Collaborations.AssociationEndRole)?
>
<!ELEMENT Behavioral_Elements.Collaborations.AssociationEndRole.availableQualifier
(Foundation.Core.Attribute)* >
<!ELEMENT Behavioral_Elements.Collaborations.AssociationEndRole (Foundation.Core.ModelElement.name?,
Foundation.Core.ModelElement.visibility?,
Foundation.Core.ModelElement.isSpecification?,
Foundation.Core.AssociationEnd.isNavigable?,
Foundation.Core.AssociationEnd.ordering?,
Foundation.Core.AssociationEnd.aggregation?,
Foundation.Core.AssociationEnd.targetScope?,
Foundation.Core.AssociationEnd.multiplicity?,
Foundation.Core.AssociationEnd.changeability?,
Behavioral_Elements.Collaborations.AssociationEndRole.collaborationMultiplicity?,
XMI.extension*,
Foundation.Core.ModelElement.namespace?,
Foundation.Core.ModelElement.clientDependency*,
Foundation.Core.ModelElement.constraint*,
Foundation.Core.ModelElement.supplierDependency*,
Foundation.Core.ModelElement.presentation*,
Foundation.Core.ModelElement.targetFlow*,
Foundation.Core.ModelElement.sourceFlow*,
Foundation.Core.ModelElement.templateParameter3*,
Foundation.Core.ModelElement.binding*,
Foundation.Core.ModelElement.comment*,
Foundation.Core.ModelElement.elementResidence*,
Foundation.Core.ModelElement.templateParameter2*,
Foundation.Core.ModelElement.stereotype?,
Foundation.Core.ModelElement.behavior*,
Foundation.Core.ModelElement.classifierRole*,
Foundation.Core.ModelElement.collaboration*,
Foundation.Core.ModelElement.partition*,
Foundation.Core.ModelElement.elementImport*,
Foundation.Core.AssociationEnd.association?,
Foundation.Core.AssociationEnd.type?,
Foundation.Core.AssociationEnd.specification*,
Foundation.Core.AssociationEnd.linkEnd*,
Foundation.Core.AssociationEnd.associationEndRole*,
Behavioral_Elements.Collaborations.AssociationEndRole.associationRole?,
Behavioral_Elements.Collaborations.AssociationEndRole.base?,
Behavioral_Elements.Collaborations.AssociationEndRole.availableQualifier*,
Foundation.Core.ModelElement.templateParameter*,
Foundation.Core.ModelElement.taggedValue*,
Foundation.Core.AssociationEnd.qualifier*)?
>
<!ATTLIST Behavioral_Elements.Collaborations.AssociationEndRole
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL CLASS: Message -->
<!-- _______________________________________________________________ -->
<!ELEMENT Behavioral_Elements.Collaborations.Message.interaction
(Behavioral_Elements.Collaborations.Interaction)? >
<!ELEMENT Behavioral_Elements.Collaborations.Message.activator
(Behavioral_Elements.Collaborations.Message)? >
<!ELEMENT Behavioral_Elements.Collaborations.Message.message4
(Behavioral_Elements.Collaborations.Message)* >
<!ELEMENT Behavioral_Elements.Collaborations.Message.sender
(Behavioral_Elements.Collaborations.ClassifierRole)? >
<!ELEMENT Behavioral_Elements.Collaborations.Message.receiver
(Behavioral_Elements.Collaborations.ClassifierRole)? >
<!ELEMENT Behavioral_Elements.Collaborations.Message.message3
(Behavioral_Elements.Collaborations.Message)* >
<!ELEMENT Behavioral_Elements.Collaborations.Message.predecessor
(Behavioral_Elements.Collaborations.Message)* >
<!ELEMENT Behavioral_Elements.Collaborations.Message.communicationConnection
(Behavioral_Elements.Collaborations.AssociationRole)? >
<!ELEMENT Behavioral_Elements.Collaborations.Message.action (Behavioral_Elements.Common_Behavior.Action |
Behavioral_Elements.Common_Behavior.CallAction |
Behavioral_Elements.Common_Behavior.SendAction |
Behavioral_Elements.Common_Behavior.ActionSequence |
Behavioral_Elements.Common_Behavior.ReturnAction |
Behavioral_Elements.Common_Behavior.TerminateAction |
Behavioral_Elements.Common_Behavior.DestroyAction |
Behavioral_Elements.Common_Behavior.CreateAction |
Behavioral_Elements.Common_Behavior.UninterpretedAction)?
>
<!ELEMENT Behavioral_Elements.Collaborations.Message (Foundation.Core.ModelElement.name?,
Foundation.Core.ModelElement.visibility?,
Foundation.Core.ModelElement.isSpecification?,
XMI.extension*,
Foundation.Core.ModelElement.namespace?,
Foundation.Core.ModelElement.clientDependency*,
Foundation.Core.ModelElement.constraint*,
Foundation.Core.ModelElement.supplierDependency*,
Foundation.Core.ModelElement.presentation*,
Foundation.Core.ModelElement.targetFlow*,
Foundation.Core.ModelElement.sourceFlow*,
Foundation.Core.ModelElement.templateParameter3*,
Foundation.Core.ModelElement.binding*,
Foundation.Core.ModelElement.comment*,
Foundation.Core.ModelElement.elementResidence*,
Foundation.Core.ModelElement.templateParameter2*,
Foundation.Core.ModelElement.stereotype?,
Foundation.Core.ModelElement.behavior*,
Foundation.Core.ModelElement.classifierRole*,
Foundation.Core.ModelElement.collaboration*,
Foundation.Core.ModelElement.partition*,
Foundation.Core.ModelElement.elementImport*,
Behavioral_Elements.Collaborations.Message.interaction?,
Behavioral_Elements.Collaborations.Message.activator?,
Behavioral_Elements.Collaborations.Message.message4*,
Behavioral_Elements.Collaborations.Message.sender?,
Behavioral_Elements.Collaborations.Message.receiver?,
Behavioral_Elements.Collaborations.Message.message3*,
Behavioral_Elements.Collaborations.Message.predecessor*,
Behavioral_Elements.Collaborations.Message.communicationConnection?,
Behavioral_Elements.Collaborations.Message.action?,
Foundation.Core.ModelElement.templateParameter*,
Foundation.Core.ModelElement.taggedValue*)?
>
<!ATTLIST Behavioral_Elements.Collaborations.Message
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL CLASS: Interaction -->
<!-- _______________________________________________________________ -->
<!ELEMENT Behavioral_Elements.Collaborations.Interaction.context
(Behavioral_Elements.Collaborations.Collaboration)? >
<!ELEMENT Behavioral_Elements.Collaborations.Interaction (Foundation.Core.ModelElement.name?,
Foundation.Core.ModelElement.visibility?,
Foundation.Core.ModelElement.isSpecification?,
XMI.extension*,
Foundation.Core.ModelElement.namespace?,
Foundation.Core.ModelElement.clientDependency*,
Foundation.Core.ModelElement.constraint*,
Foundation.Core.ModelElement.supplierDependency*,
Foundation.Core.ModelElement.presentation*,
Foundation.Core.ModelElement.targetFlow*,
Foundation.Core.ModelElement.sourceFlow*,
Foundation.Core.ModelElement.templateParameter3*,
Foundation.Core.ModelElement.binding*,
Foundation.Core.ModelElement.comment*,
Foundation.Core.ModelElement.elementResidence*,
Foundation.Core.ModelElement.templateParameter2*,
Foundation.Core.ModelElement.stereotype?,
Foundation.Core.ModelElement.behavior*,
Foundation.Core.ModelElement.classifierRole*,
Foundation.Core.ModelElement.collaboration*,
Foundation.Core.ModelElement.partition*,
Foundation.Core.ModelElement.elementImport*,
Behavioral_Elements.Collaborations.Interaction.context?,
Foundation.Core.ModelElement.templateParameter*,
Foundation.Core.ModelElement.taggedValue*,
Behavioral_Elements.Collaborations.Interaction.message*)?
>
<!ATTLIST Behavioral_Elements.Collaborations.Interaction
%XMI.element.att;
%XMI.link.att;
>
<!ELEMENT Behavioral_Elements.Collaborations ((Behavioral_Elements.Collaborations.Collaboration |
Behavioral_Elements.Collaborations.ClassifierRole |
Behavioral_Elements.Collaborations.AssociationRole |
Behavioral_Elements.Collaborations.AssociationEndRole |
Behavioral_Elements.Collaborations.Message |
Behavioral_Elements.Collaborations.Interaction)*)
>
<!ATTLIST Behavioral_Elements.Collaborations
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL PACKAGE: Activity_Graphs -->
<!-- _______________________________________________________________ -->
<!ELEMENT Behavioral_Elements.Activity_Graphs.ActivityGraph.partition
(Behavioral_Elements.Activity_Graphs.Partition)* >
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL CLASS: ActivityGraph -->
<!-- _______________________________________________________________ -->
<!ELEMENT Behavioral_Elements.Activity_Graphs.ActivityGraph (Foundation.Core.ModelElement.name?,
Foundation.Core.ModelElement.visibility?,
Foundation.Core.ModelElement.isSpecification?,
XMI.extension*,
Foundation.Core.ModelElement.namespace?,
Foundation.Core.ModelElement.clientDependency*,
Foundation.Core.ModelElement.constraint*,
Foundation.Core.ModelElement.supplierDependency*,
Foundation.Core.ModelElement.presentation*,
Foundation.Core.ModelElement.targetFlow*,
Foundation.Core.ModelElement.sourceFlow*,
Foundation.Core.ModelElement.templateParameter3*,
Foundation.Core.ModelElement.binding*,
Foundation.Core.ModelElement.comment*,
Foundation.Core.ModelElement.elementResidence*,
Foundation.Core.ModelElement.templateParameter2*,
Foundation.Core.ModelElement.stereotype?,
Foundation.Core.ModelElement.behavior*,
Foundation.Core.ModelElement.classifierRole*,
Foundation.Core.ModelElement.collaboration*,
Foundation.Core.ModelElement.partition*,
Foundation.Core.ModelElement.elementImport*,
Behavioral_Elements.State_Machines.StateMachine.context?,
Behavioral_Elements.State_Machines.StateMachine.subMachineState*,
Foundation.Core.ModelElement.templateParameter*,
Foundation.Core.ModelElement.taggedValue*,
Behavioral_Elements.State_Machines.StateMachine.top?,
Behavioral_Elements.State_Machines.StateMachine.transitions*,
Behavioral_Elements.Activity_Graphs.ActivityGraph.partition*)?
>
<!ATTLIST Behavioral_Elements.Activity_Graphs.ActivityGraph
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL CLASS: Partition -->
<!-- _______________________________________________________________ -->
<!ELEMENT Behavioral_Elements.Activity_Graphs.Partition.contents (Foundation.Core.ModelElement |
Foundation.Core.Comment |
Foundation.Core.Relationship |
Behavioral_Elements.Use_Cases.Extend |
Behavioral_Elements.Use_Cases.Include |
Foundation.Core.Generalization |
Foundation.Core.Flow |
Foundation.Core.Association |
Foundation.Core.AssociationClass |
Behavioral_Elements.Collaborations.AssociationRole |
Foundation.Core.Dependency |
Foundation.Core.Abstraction |
Foundation.Core.Usage |
Foundation.Core.Binding |
Foundation.Core.Permission |
Foundation.Extension_Mechanisms.TaggedValue |
Behavioral_Elements.Common_Behavior.Instance |
Behavioral_Elements.Common_Behavior.Object |
Behavioral_Elements.Common_Behavior.LinkObject |
Behavioral_Elements.Common_Behavior.DataValue |
Behavioral_Elements.Common_Behavior.ComponentInstance |
Behavioral_Elements.Common_Behavior.NodeInstance |
Behavioral_Elements.Use_Cases.UseCaseInstance |
Behavioral_Elements.Common_Behavior.Action |
Behavioral_Elements.Common_Behavior.CallAction |
Behavioral_Elements.Common_Behavior.SendAction |
Behavioral_Elements.Common_Behavior.ActionSequence |
Behavioral_Elements.Common_Behavior.ReturnAction |
Behavioral_Elements.Common_Behavior.TerminateAction |
Behavioral_Elements.Common_Behavior.DestroyAction |
Behavioral_Elements.Common_Behavior.CreateAction |
Behavioral_Elements.Common_Behavior.UninterpretedAction |
Behavioral_Elements.Common_Behavior.AttributeLink |
Behavioral_Elements.Common_Behavior.Argument |
Behavioral_Elements.Common_Behavior.Link |
Behavioral_Elements.Common_Behavior.LinkEnd |
Behavioral_Elements.Common_Behavior.Stimulus |
Behavioral_Elements.Use_Cases.ExtensionPoint |
Behavioral_Elements.State_Machines.StateMachine |
Behavioral_Elements.Activity_Graphs.ActivityGraph |
Behavioral_Elements.State_Machines.Event |
Behavioral_Elements.State_Machines.TimeEvent |
Behavioral_Elements.State_Machines.CallEvent |
Behavioral_Elements.State_Machines.SignalEvent |
Behavioral_Elements.State_Machines.ChangeEvent |
Behavioral_Elements.State_Machines.Transition |
Behavioral_Elements.State_Machines.StateVertex |
Behavioral_Elements.State_Machines.Pseudostate |
Behavioral_Elements.State_Machines.SynchState |
Behavioral_Elements.State_Machines.StubState |
Behavioral_Elements.State_Machines.State |
Behavioral_Elements.State_Machines.CompositeState |
Behavioral_Elements.State_Machines.SubmachineState |
Behavioral_Elements.Activity_Graphs.SubactivityState |
Behavioral_Elements.State_Machines.SimpleState |
Behavioral_Elements.Activity_Graphs.ObjectFlowState |
Behavioral_Elements.Activity_Graphs.ActionState |
Behavioral_Elements.Activity_Graphs.CallState |
Behavioral_Elements.State_Machines.FinalState |
Behavioral_Elements.State_Machines.Guard |
Behavioral_Elements.Collaborations.Message |
Behavioral_Elements.Collaborations.Interaction |
Behavioral_Elements.Activity_Graphs.Partition |
Foundation.Core.Feature |
Foundation.Core.BehavioralFeature |
Behavioral_Elements.Common_Behavior.Reception |
Foundation.Core.Operation |
Foundation.Core.Method |
Foundation.Core.StructuralFeature |
Foundation.Core.Attribute |
Foundation.Core.GeneralizableElement |
Foundation.Extension_Mechanisms.Stereotype |
Behavioral_Elements.Collaborations.Collaboration |
Model_Management.Package |
Model_Management.Subsystem |
Model_Management.Model |
Foundation.Core.Classifier |
Foundation.Core.Class |
Foundation.Core.DataType |
Foundation.Core.Interface |
Foundation.Core.Component |
Foundation.Core.Node |
Behavioral_Elements.Common_Behavior.Signal |
Behavioral_Elements.Common_Behavior.Exception |
Behavioral_Elements.Use_Cases.UseCase |
Behavioral_Elements.Use_Cases.Actor |
Behavioral_Elements.Collaborations.ClassifierRole |
Behavioral_Elements.Activity_Graphs.ClassifierInState |
Foundation.Core.AssociationEnd |
Behavioral_Elements.Collaborations.AssociationEndRole |
Foundation.Core.Namespace |
Foundation.Core.Parameter |
Foundation.Core.Constraint)*
>
<!ELEMENT Behavioral_Elements.Activity_Graphs.Partition.activityGraph
(Behavioral_Elements.Activity_Graphs.ActivityGraph)? >
<!ELEMENT Behavioral_Elements.Activity_Graphs.Partition (Foundation.Core.ModelElement.name?,
Foundation.Core.ModelElement.visibility?,
Foundation.Core.ModelElement.isSpecification?,
XMI.extension*,
Foundation.Core.ModelElement.namespace?,
Foundation.Core.ModelElement.clientDependency*,
Foundation.Core.ModelElement.constraint*,
Foundation.Core.ModelElement.supplierDependency*,
Foundation.Core.ModelElement.presentation*,
Foundation.Core.ModelElement.targetFlow*,
Foundation.Core.ModelElement.sourceFlow*,
Foundation.Core.ModelElement.templateParameter3*,
Foundation.Core.ModelElement.binding*,
Foundation.Core.ModelElement.comment*,
Foundation.Core.ModelElement.elementResidence*,
Foundation.Core.ModelElement.templateParameter2*,
Foundation.Core.ModelElement.stereotype?,
Foundation.Core.ModelElement.behavior*,
Foundation.Core.ModelElement.classifierRole*,
Foundation.Core.ModelElement.collaboration*,
Foundation.Core.ModelElement.partition*,
Foundation.Core.ModelElement.elementImport*,
Behavioral_Elements.Activity_Graphs.Partition.contents*,
Behavioral_Elements.Activity_Graphs.Partition.activityGraph?,
Foundation.Core.ModelElement.templateParameter*,
Foundation.Core.ModelElement.taggedValue*)?
>
<!ATTLIST Behavioral_Elements.Activity_Graphs.Partition
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL CLASS: SubactivityState -->
<!-- _______________________________________________________________ -->
<!ELEMENT Behavioral_Elements.Activity_Graphs.SubactivityState.isDynamic
EMPTY >
<!ATTLIST Behavioral_Elements.Activity_Graphs.SubactivityState.isDynamic
xmi.value ( true | false ) #REQUIRED
>
<!ELEMENT Behavioral_Elements.Activity_Graphs.SubactivityState.dynamicArguments
(Foundation.Data_Types.ArgListsExpression) >
<!ELEMENT Behavioral_Elements.Activity_Graphs.SubactivityState.dynamicMultiplicity
(Foundation.Data_Types.Multiplicity) >
<!ELEMENT Behavioral_Elements.Activity_Graphs.SubactivityState (Foundation.Core.ModelElement.name?,
Foundation.Core.ModelElement.visibility?,
Foundation.Core.ModelElement.isSpecification?,
Behavioral_Elements.State_Machines.CompositeState.isConcurrent?,
Behavioral_Elements.Activity_Graphs.SubactivityState.isDynamic?,
Behavioral_Elements.Activity_Graphs.SubactivityState.dynamicArguments?,
Behavioral_Elements.Activity_Graphs.SubactivityState.dynamicMultiplicity?,
XMI.extension*,
Foundation.Core.ModelElement.namespace?,
Foundation.Core.ModelElement.clientDependency*,
Foundation.Core.ModelElement.constraint*,
Foundation.Core.ModelElement.supplierDependency*,
Foundation.Core.ModelElement.presentation*,
Foundation.Core.ModelElement.targetFlow*,
Foundation.Core.ModelElement.sourceFlow*,
Foundation.Core.ModelElement.templateParameter3*,
Foundation.Core.ModelElement.binding*,
Foundation.Core.ModelElement.comment*,
Foundation.Core.ModelElement.elementResidence*,
Foundation.Core.ModelElement.templateParameter2*,
Foundation.Core.ModelElement.stereotype?,
Foundation.Core.ModelElement.behavior*,
Foundation.Core.ModelElement.classifierRole*,
Foundation.Core.ModelElement.collaboration*,
Foundation.Core.ModelElement.partition*,
Foundation.Core.ModelElement.elementImport*,
Behavioral_Elements.State_Machines.StateVertex.container?,
Behavioral_Elements.State_Machines.StateVertex.outgoing*,
Behavioral_Elements.State_Machines.StateVertex.incoming*,
Behavioral_Elements.State_Machines.State.stateMachine?,
Behavioral_Elements.State_Machines.State.deferrableEvent*,
Behavioral_Elements.State_Machines.State.classifierInState*,
Behavioral_Elements.State_Machines.SubmachineState.submachine?,
Foundation.Core.ModelElement.templateParameter*,
Foundation.Core.ModelElement.taggedValue*,
Behavioral_Elements.State_Machines.State.entry?,
Behavioral_Elements.State_Machines.State.exit?,
Behavioral_Elements.State_Machines.State.internalTransition*,
Behavioral_Elements.State_Machines.State.doActivity?,
Behavioral_Elements.State_Machines.CompositeState.subvertex*)?
>
<!ATTLIST Behavioral_Elements.Activity_Graphs.SubactivityState
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL CLASS: CallState -->
<!-- _______________________________________________________________ -->
<!ELEMENT Behavioral_Elements.Activity_Graphs.CallState (Foundation.Core.ModelElement.name?,
Foundation.Core.ModelElement.visibility?,
Foundation.Core.ModelElement.isSpecification?,
Behavioral_Elements.Activity_Graphs.ActionState.isDynamic?,
Behavioral_Elements.Activity_Graphs.ActionState.dynamicArguments?,
Behavioral_Elements.Activity_Graphs.ActionState.dynamicMultiplicity?,
XMI.extension*,
Foundation.Core.ModelElement.namespace?,
Foundation.Core.ModelElement.clientDependency*,
Foundation.Core.ModelElement.constraint*,
Foundation.Core.ModelElement.supplierDependency*,
Foundation.Core.ModelElement.presentation*,
Foundation.Core.ModelElement.targetFlow*,
Foundation.Core.ModelElement.sourceFlow*,
Foundation.Core.ModelElement.templateParameter3*,
Foundation.Core.ModelElement.binding*,
Foundation.Core.ModelElement.comment*,
Foundation.Core.ModelElement.elementResidence*,
Foundation.Core.ModelElement.templateParameter2*,
Foundation.Core.ModelElement.stereotype?,
Foundation.Core.ModelElement.behavior*,
Foundation.Core.ModelElement.classifierRole*,
Foundation.Core.ModelElement.collaboration*,
Foundation.Core.ModelElement.partition*,
Foundation.Core.ModelElement.elementImport*,
Behavioral_Elements.State_Machines.StateVertex.container?,
Behavioral_Elements.State_Machines.StateVertex.outgoing*,
Behavioral_Elements.State_Machines.StateVertex.incoming*,
Behavioral_Elements.State_Machines.State.stateMachine?,
Behavioral_Elements.State_Machines.State.deferrableEvent*,
Behavioral_Elements.State_Machines.State.classifierInState*,
Foundation.Core.ModelElement.templateParameter*,
Foundation.Core.ModelElement.taggedValue*,
Behavioral_Elements.State_Machines.State.entry?,
Behavioral_Elements.State_Machines.State.exit?,
Behavioral_Elements.State_Machines.State.internalTransition*,
Behavioral_Elements.State_Machines.State.doActivity?)?
>
<!ATTLIST Behavioral_Elements.Activity_Graphs.CallState
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL CLASS: ObjectFlowState -->
<!-- _______________________________________________________________ -->
<!ELEMENT Behavioral_Elements.Activity_Graphs.ObjectFlowState.isSynch
EMPTY >
<!ATTLIST Behavioral_Elements.Activity_Graphs.ObjectFlowState.isSynch
xmi.value ( true | false ) #REQUIRED
>
<!ELEMENT Behavioral_Elements.Activity_Graphs.ObjectFlowState.parameter
(Foundation.Core.Parameter)* >
<!ELEMENT Behavioral_Elements.Activity_Graphs.ObjectFlowState.type (Foundation.Core.Classifier |
Foundation.Core.Class |
Foundation.Core.AssociationClass |
Foundation.Core.DataType |
Foundation.Core.Interface |
Foundation.Core.Component |
Foundation.Core.Node |
Behavioral_Elements.Common_Behavior.Signal |
Behavioral_Elements.Common_Behavior.Exception |
Behavioral_Elements.Use_Cases.UseCase |
Behavioral_Elements.Use_Cases.Actor |
Behavioral_Elements.Collaborations.ClassifierRole |
Behavioral_Elements.Activity_Graphs.ClassifierInState |
Model_Management.Subsystem)?
>
<!ELEMENT Behavioral_Elements.Activity_Graphs.ObjectFlowState (Foundation.Core.ModelElement.name?,
Foundation.Core.ModelElement.visibility?,
Foundation.Core.ModelElement.isSpecification?,
Behavioral_Elements.Activity_Graphs.ObjectFlowState.isSynch?,
XMI.extension*,
Foundation.Core.ModelElement.namespace?,
Foundation.Core.ModelElement.clientDependency*,
Foundation.Core.ModelElement.constraint*,
Foundation.Core.ModelElement.supplierDependency*,
Foundation.Core.ModelElement.presentation*,
Foundation.Core.ModelElement.targetFlow*,
Foundation.Core.ModelElement.sourceFlow*,
Foundation.Core.ModelElement.templateParameter3*,
Foundation.Core.ModelElement.binding*,
Foundation.Core.ModelElement.comment*,
Foundation.Core.ModelElement.elementResidence*,
Foundation.Core.ModelElement.templateParameter2*,
Foundation.Core.ModelElement.stereotype?,
Foundation.Core.ModelElement.behavior*,
Foundation.Core.ModelElement.classifierRole*,
Foundation.Core.ModelElement.collaboration*,
Foundation.Core.ModelElement.partition*,
Foundation.Core.ModelElement.elementImport*,
Behavioral_Elements.State_Machines.StateVertex.container?,
Behavioral_Elements.State_Machines.StateVertex.outgoing*,
Behavioral_Elements.State_Machines.StateVertex.incoming*,
Behavioral_Elements.State_Machines.State.stateMachine?,
Behavioral_Elements.State_Machines.State.deferrableEvent*,
Behavioral_Elements.State_Machines.State.classifierInState*,
Behavioral_Elements.Activity_Graphs.ObjectFlowState.parameter*,
Behavioral_Elements.Activity_Graphs.ObjectFlowState.type?,
Foundation.Core.ModelElement.templateParameter*,
Foundation.Core.ModelElement.taggedValue*,
Behavioral_Elements.State_Machines.State.entry?,
Behavioral_Elements.State_Machines.State.exit?,
Behavioral_Elements.State_Machines.State.internalTransition*,
Behavioral_Elements.State_Machines.State.doActivity?)?
>
<!ATTLIST Behavioral_Elements.Activity_Graphs.ObjectFlowState
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL CLASS: ClassifierInState -->
<!-- _______________________________________________________________ -->
<!ELEMENT Behavioral_Elements.Activity_Graphs.ClassifierInState.type (Foundation.Core.Classifier |
Foundation.Core.Class |
Foundation.Core.AssociationClass |
Foundation.Core.DataType |
Foundation.Core.Interface |
Foundation.Core.Component |
Foundation.Core.Node |
Behavioral_Elements.Common_Behavior.Signal |
Behavioral_Elements.Common_Behavior.Exception |
Behavioral_Elements.Use_Cases.UseCase |
Behavioral_Elements.Use_Cases.Actor |
Behavioral_Elements.Collaborations.ClassifierRole |
Behavioral_Elements.Activity_Graphs.ClassifierInState |
Model_Management.Subsystem)?
>
<!ELEMENT Behavioral_Elements.Activity_Graphs.ClassifierInState.inState (Behavioral_Elements.State_Machines.State |
Behavioral_Elements.State_Machines.CompositeState |
Behavioral_Elements.State_Machines.SubmachineState |
Behavioral_Elements.Activity_Graphs.SubactivityState |
Behavioral_Elements.State_Machines.SimpleState |
Behavioral_Elements.Activity_Graphs.ObjectFlowState |
Behavioral_Elements.Activity_Graphs.ActionState |
Behavioral_Elements.Activity_Graphs.CallState |
Behavioral_Elements.State_Machines.FinalState)*
>
<!ELEMENT Behavioral_Elements.Activity_Graphs.ClassifierInState (Foundation.Core.ModelElement.name?,
Foundation.Core.ModelElement.visibility?,
Foundation.Core.ModelElement.isSpecification?,
Foundation.Core.GeneralizableElement.isRoot?,
Foundation.Core.GeneralizableElement.isLeaf?,
Foundation.Core.GeneralizableElement.isAbstract?,
XMI.extension*,
Foundation.Core.ModelElement.namespace?,
Foundation.Core.ModelElement.clientDependency*,
Foundation.Core.ModelElement.constraint*,
Foundation.Core.ModelElement.supplierDependency*,
Foundation.Core.ModelElement.presentation*,
Foundation.Core.ModelElement.targetFlow*,
Foundation.Core.ModelElement.sourceFlow*,
Foundation.Core.ModelElement.templateParameter3*,
Foundation.Core.ModelElement.binding*,
Foundation.Core.ModelElement.comment*,
Foundation.Core.ModelElement.elementResidence*,
Foundation.Core.ModelElement.templateParameter2*,
Foundation.Core.ModelElement.stereotype?,
Foundation.Core.ModelElement.behavior*,
Foundation.Core.ModelElement.classifierRole*,
Foundation.Core.ModelElement.collaboration*,
Foundation.Core.ModelElement.partition*,
Foundation.Core.ModelElement.elementImport*,
Foundation.Core.GeneralizableElement.generalization*,
Foundation.Core.GeneralizableElement.specialization*,
Foundation.Core.Classifier.participant*,
Foundation.Core.Classifier.powertypeRange*,
Foundation.Core.Classifier.instance*,
Foundation.Core.Classifier.createAction*,
Foundation.Core.Classifier.classifierRole*,
Foundation.Core.Classifier.collaboration*,
Foundation.Core.Classifier.classifierInState*,
Foundation.Core.Classifier.objectFlowState*,
Behavioral_Elements.Activity_Graphs.ClassifierInState.type?,
Behavioral_Elements.Activity_Graphs.ClassifierInState.inState*,
Foundation.Core.ModelElement.templateParameter*,
Foundation.Core.ModelElement.taggedValue*,
Foundation.Core.Namespace.ownedElement*,
Foundation.Core.Classifier.feature*)?
>
<!ATTLIST Behavioral_Elements.Activity_Graphs.ClassifierInState
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL CLASS: ActionState -->
<!-- _______________________________________________________________ -->
<!ELEMENT Behavioral_Elements.Activity_Graphs.ActionState.isDynamic
EMPTY >
<!ATTLIST Behavioral_Elements.Activity_Graphs.ActionState.isDynamic
xmi.value ( true | false ) #REQUIRED
>
<!ELEMENT Behavioral_Elements.Activity_Graphs.ActionState.dynamicArguments
(Foundation.Data_Types.ArgListsExpression) >
<!ELEMENT Behavioral_Elements.Activity_Graphs.ActionState.dynamicMultiplicity
(Foundation.Data_Types.Multiplicity) >
<!ELEMENT Behavioral_Elements.Activity_Graphs.ActionState (Foundation.Core.ModelElement.name?,
Foundation.Core.ModelElement.visibility?,
Foundation.Core.ModelElement.isSpecification?,
Behavioral_Elements.Activity_Graphs.ActionState.isDynamic?,
Behavioral_Elements.Activity_Graphs.ActionState.dynamicArguments?,
Behavioral_Elements.Activity_Graphs.ActionState.dynamicMultiplicity?,
XMI.extension*,
Foundation.Core.ModelElement.namespace?,
Foundation.Core.ModelElement.clientDependency*,
Foundation.Core.ModelElement.constraint*,
Foundation.Core.ModelElement.supplierDependency*,
Foundation.Core.ModelElement.presentation*,
Foundation.Core.ModelElement.targetFlow*,
Foundation.Core.ModelElement.sourceFlow*,
Foundation.Core.ModelElement.templateParameter3*,
Foundation.Core.ModelElement.binding*,
Foundation.Core.ModelElement.comment*,
Foundation.Core.ModelElement.elementResidence*,
Foundation.Core.ModelElement.templateParameter2*,
Foundation.Core.ModelElement.stereotype?,
Foundation.Core.ModelElement.behavior*,
Foundation.Core.ModelElement.classifierRole*,
Foundation.Core.ModelElement.collaboration*,
Foundation.Core.ModelElement.partition*,
Foundation.Core.ModelElement.elementImport*,
Behavioral_Elements.State_Machines.StateVertex.container?,
Behavioral_Elements.State_Machines.StateVertex.outgoing*,
Behavioral_Elements.State_Machines.StateVertex.incoming*,
Behavioral_Elements.State_Machines.State.stateMachine?,
Behavioral_Elements.State_Machines.State.deferrableEvent*,
Behavioral_Elements.State_Machines.State.classifierInState*,
Foundation.Core.ModelElement.templateParameter*,
Foundation.Core.ModelElement.taggedValue*,
Behavioral_Elements.State_Machines.State.entry?,
Behavioral_Elements.State_Machines.State.exit?,
Behavioral_Elements.State_Machines.State.internalTransition*,
Behavioral_Elements.State_Machines.State.doActivity?)?
>
<!ATTLIST Behavioral_Elements.Activity_Graphs.ActionState
%XMI.element.att;
%XMI.link.att;
>
<!ELEMENT Behavioral_Elements.Activity_Graphs ((Behavioral_Elements.Activity_Graphs.ActivityGraph |
Behavioral_Elements.Activity_Graphs.Partition |
Behavioral_Elements.Activity_Graphs.SubactivityState |
Behavioral_Elements.Activity_Graphs.CallState |
Behavioral_Elements.Activity_Graphs.ObjectFlowState |
Behavioral_Elements.Activity_Graphs.ClassifierInState |
Behavioral_Elements.Activity_Graphs.ActionState)*)
>
<!ATTLIST Behavioral_Elements.Activity_Graphs
%XMI.element.att;
%XMI.link.att;
>
<!ELEMENT Behavioral_Elements ((Behavioral_Elements.Common_Behavior |
Behavioral_Elements.Use_Cases |
Behavioral_Elements.State_Machines |
Behavioral_Elements.Collaborations |
Behavioral_Elements.Activity_Graphs)*) >
<!ATTLIST Behavioral_Elements
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL PACKAGE: Model_Management -->
<!-- _______________________________________________________________ -->
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL CLASS: Model -->
<!-- _______________________________________________________________ -->
<!ELEMENT Model_Management.Model (Foundation.Core.ModelElement.name?,
Foundation.Core.ModelElement.visibility?,
Foundation.Core.ModelElement.isSpecification?,
Foundation.Core.GeneralizableElement.isRoot?,
Foundation.Core.GeneralizableElement.isLeaf?,
Foundation.Core.GeneralizableElement.isAbstract?,
XMI.extension*,
Foundation.Core.ModelElement.namespace?,
Foundation.Core.ModelElement.clientDependency*,
Foundation.Core.ModelElement.constraint*,
Foundation.Core.ModelElement.supplierDependency*,
Foundation.Core.ModelElement.presentation*,
Foundation.Core.ModelElement.targetFlow*,
Foundation.Core.ModelElement.sourceFlow*,
Foundation.Core.ModelElement.templateParameter3*,
Foundation.Core.ModelElement.binding*,
Foundation.Core.ModelElement.comment*,
Foundation.Core.ModelElement.elementResidence*,
Foundation.Core.ModelElement.templateParameter2*,
Foundation.Core.ModelElement.stereotype?,
Foundation.Core.ModelElement.behavior*,
Foundation.Core.ModelElement.classifierRole*,
Foundation.Core.ModelElement.collaboration*,
Foundation.Core.ModelElement.partition*,
Foundation.Core.ModelElement.elementImport*,
Foundation.Core.GeneralizableElement.generalization*,
Foundation.Core.GeneralizableElement.specialization*,
Model_Management.Package.elementImport*,
Foundation.Core.ModelElement.templateParameter*,
Foundation.Core.ModelElement.taggedValue*,
Foundation.Core.Namespace.ownedElement*)?
>
<!ATTLIST Model_Management.Model
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL CLASS: Package -->
<!-- _______________________________________________________________ -->
<!ELEMENT Model_Management.Package.elementImport
(Model_Management.ElementImport)* >
<!ELEMENT Model_Management.Package (Foundation.Core.ModelElement.name?,
Foundation.Core.ModelElement.visibility?,
Foundation.Core.ModelElement.isSpecification?,
Foundation.Core.GeneralizableElement.isRoot?,
Foundation.Core.GeneralizableElement.isLeaf?,
Foundation.Core.GeneralizableElement.isAbstract?,
XMI.extension*,
Foundation.Core.ModelElement.namespace?,
Foundation.Core.ModelElement.clientDependency*,
Foundation.Core.ModelElement.constraint*,
Foundation.Core.ModelElement.supplierDependency*,
Foundation.Core.ModelElement.presentation*,
Foundation.Core.ModelElement.targetFlow*,
Foundation.Core.ModelElement.sourceFlow*,
Foundation.Core.ModelElement.templateParameter3*,
Foundation.Core.ModelElement.binding*,
Foundation.Core.ModelElement.comment*,
Foundation.Core.ModelElement.elementResidence*,
Foundation.Core.ModelElement.templateParameter2*,
Foundation.Core.ModelElement.stereotype?,
Foundation.Core.ModelElement.behavior*,
Foundation.Core.ModelElement.classifierRole*,
Foundation.Core.ModelElement.collaboration*,
Foundation.Core.ModelElement.partition*,
Foundation.Core.ModelElement.elementImport*,
Foundation.Core.GeneralizableElement.generalization*,
Foundation.Core.GeneralizableElement.specialization*,
Model_Management.Package.elementImport*,
Foundation.Core.ModelElement.templateParameter*,
Foundation.Core.ModelElement.taggedValue*,
Foundation.Core.Namespace.ownedElement*)?
>
<!ATTLIST Model_Management.Package
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL CLASS: Subsystem -->
<!-- _______________________________________________________________ -->
<!ELEMENT Model_Management.Subsystem.isInstantiable EMPTY >
<!ATTLIST Model_Management.Subsystem.isInstantiable
xmi.value ( true | false ) #REQUIRED
>
<!ELEMENT Model_Management.Subsystem (Foundation.Core.ModelElement.name?,
Foundation.Core.ModelElement.visibility?,
Foundation.Core.ModelElement.isSpecification?,
Foundation.Core.GeneralizableElement.isRoot?,
Foundation.Core.GeneralizableElement.isLeaf?,
Foundation.Core.GeneralizableElement.isAbstract?,
Model_Management.Subsystem.isInstantiable?,
XMI.extension*,
Foundation.Core.ModelElement.namespace?,
Foundation.Core.ModelElement.clientDependency*,
Foundation.Core.ModelElement.constraint*,
Foundation.Core.ModelElement.supplierDependency*,
Foundation.Core.ModelElement.presentation*,
Foundation.Core.ModelElement.targetFlow*,
Foundation.Core.ModelElement.sourceFlow*,
Foundation.Core.ModelElement.templateParameter3*,
Foundation.Core.ModelElement.binding*,
Foundation.Core.ModelElement.comment*,
Foundation.Core.ModelElement.elementResidence*,
Foundation.Core.ModelElement.templateParameter2*,
Foundation.Core.ModelElement.stereotype?,
Foundation.Core.ModelElement.behavior*,
Foundation.Core.ModelElement.classifierRole*,
Foundation.Core.ModelElement.collaboration*,
Foundation.Core.ModelElement.partition*,
Foundation.Core.ModelElement.elementImport*,
Foundation.Core.GeneralizableElement.generalization*,
Foundation.Core.GeneralizableElement.specialization*,
Model_Management.Package.elementImport*,
Foundation.Core.Classifier.participant*,
Foundation.Core.Classifier.powertypeRange*,
Foundation.Core.Classifier.instance*,
Foundation.Core.Classifier.createAction*,
Foundation.Core.Classifier.classifierRole*,
Foundation.Core.Classifier.collaboration*,
Foundation.Core.Classifier.classifierInState*,
Foundation.Core.Classifier.objectFlowState*,
Foundation.Core.ModelElement.templateParameter*,
Foundation.Core.ModelElement.taggedValue*,
Foundation.Core.Namespace.ownedElement*,
Foundation.Core.Classifier.feature*)?
>
<!ATTLIST Model_Management.Subsystem
%XMI.element.att;
%XMI.link.att;
>
<!-- _______________________________________________________________ -->
<!-- -->
<!-- METAMODEL CLASS: ElementImport -->
<!-- _______________________________________________________________ -->
<!ELEMENT Model_Management.ElementImport.visibility EMPTY >
<!ATTLIST Model_Management.ElementImport.visibility
xmi.value ( public | private | protected ) #REQUIRED
>
<!ELEMENT Model_Management.ElementImport.alias (#PCDATA |
XMI.reference)* >
<!ELEMENT Model_Management.ElementImport.modelElement (Foundation.Core.ModelElement |
Foundation.Core.Comment |
Foundation.Core.Relationship |
Behavioral_Elements.Use_Cases.Extend |
Behavioral_Elements.Use_Cases.Include |
Foundation.Core.Generalization |
Foundation.Core.Flow |
Foundation.Core.Association |
Foundation.Core.AssociationClass |
Behavioral_Elements.Collaborations.AssociationRole |
Foundation.Core.Dependency |
Foundation.Core.Abstraction |
Foundation.Core.Usage |
Foundation.Core.Binding |
Foundation.Core.Permission |
Foundation.Extension_Mechanisms.TaggedValue |
Behavioral_Elements.Common_Behavior.Instance |
Behavioral_Elements.Common_Behavior.Object |
Behavioral_Elements.Common_Behavior.LinkObject |
Behavioral_Elements.Common_Behavior.DataValue |
Behavioral_Elements.Common_Behavior.ComponentInstance |
Behavioral_Elements.Common_Behavior.NodeInstance |
Behavioral_Elements.Use_Cases.UseCaseInstance |
Behavioral_Elements.Common_Behavior.Action |
Behavioral_Elements.Common_Behavior.CallAction |
Behavioral_Elements.Common_Behavior.SendAction |
Behavioral_Elements.Common_Behavior.ActionSequence |
Behavioral_Elements.Common_Behavior.ReturnAction |
Behavioral_Elements.Common_Behavior.TerminateAction |
Behavioral_Elements.Common_Behavior.DestroyAction |
Behavioral_Elements.Common_Behavior.CreateAction |
Behavioral_Elements.Common_Behavior.UninterpretedAction |
Behavioral_Elements.Common_Behavior.AttributeLink |
Behavioral_Elements.Common_Behavior.Argument |
Behavioral_Elements.Common_Behavior.Link |
Behavioral_Elements.Common_Behavior.LinkEnd |
Behavioral_Elements.Common_Behavior.Stimulus |
Behavioral_Elements.Use_Cases.ExtensionPoint |
Behavioral_Elements.State_Machines.StateMachine |
Behavioral_Elements.Activity_Graphs.ActivityGraph |
Behavioral_Elements.State_Machines.Event |
Behavioral_Elements.State_Machines.TimeEvent |
Behavioral_Elements.State_Machines.CallEvent |
Behavioral_Elements.State_Machines.SignalEvent |
Behavioral_Elements.State_Machines.ChangeEvent |
Behavioral_Elements.State_Machines.Transition |
Behavioral_Elements.State_Machines.StateVertex |
Behavioral_Elements.State_Machines.Pseudostate |
Behavioral_Elements.State_Machines.SynchState |
Behavioral_Elements.State_Machines.StubState |
Behavioral_Elements.State_Machines.State |
Behavioral_Elements.State_Machines.CompositeState |
Behavioral_Elements.State_Machines.SubmachineState |
Behavioral_Elements.Activity_Graphs.SubactivityState |
Behavioral_Elements.State_Machines.SimpleState |
Behavioral_Elements.Activity_Graphs.ObjectFlowState |
Behavioral_Elements.Activity_Graphs.ActionState |
Behavioral_Elements.Activity_Graphs.CallState |
Behavioral_Elements.State_Machines.FinalState |
Behavioral_Elements.State_Machines.Guard |
Behavioral_Elements.Collaborations.Message |
Behavioral_Elements.Collaborations.Interaction |
Behavioral_Elements.Activity_Graphs.Partition |
Foundation.Core.Feature |
Foundation.Core.BehavioralFeature |
Behavioral_Elements.Common_Behavior.Reception |
Foundation.Core.Operation |
Foundation.Core.Method |
Foundation.Core.StructuralFeature |
Foundation.Core.Attribute |
Foundation.Core.GeneralizableElement |
Foundation.Extension_Mechanisms.Stereotype |
Behavioral_Elements.Collaborations.Collaboration |
Model_Management.Package |
Model_Management.Subsystem |
Model_Management.Model |
Foundation.Core.Classifier |
Foundation.Core.Class |
Foundation.Core.DataType |
Foundation.Core.Interface |
Foundation.Core.Component |
Foundation.Core.Node |
Behavioral_Elements.Common_Behavior.Signal |
Behavioral_Elements.Common_Behavior.Exception |
Behavioral_Elements.Use_Cases.UseCase |
Behavioral_Elements.Use_Cases.Actor |
Behavioral_Elements.Collaborations.ClassifierRole |
Behavioral_Elements.Activity_Graphs.ClassifierInState |
Foundation.Core.AssociationEnd |
Behavioral_Elements.Collaborations.AssociationEndRole |
Foundation.Core.Namespace |
Foundation.Core.Parameter |
Foundation.Core.Constraint)?
>
<!ELEMENT Model_Management.ElementImport.package (Model_Management.Package |
Model_Management.Subsystem |
Model_Management.Model)?
>
<!ELEMENT Model_Management.ElementImport (Model_Management.ElementImport.visibility?,
Model_Management.ElementImport.alias?,
XMI.extension*,
Model_Management.ElementImport.modelElement?,
Model_Management.ElementImport.package?)?
>
<!ATTLIST Model_Management.ElementImport
%XMI.element.att;
%XMI.link.att;
>
<!ELEMENT Model_Management ((Model_Management.Model |
Model_Management.Package |
Model_Management.Subsystem |
Model_Management.ElementImport)*) >
<!ATTLIST Model_Management
%XMI.element.att;
%XMI.link.att;
>
