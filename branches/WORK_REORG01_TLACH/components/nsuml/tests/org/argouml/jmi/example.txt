




ConnectionFactory cxf = new ConnectionFactory();
Connection cx = cxf.getConnection(properties);
RefPackage msTlp = Connection.getTopLevelPackage();
XmiReader xmiReader = Connection.getXmiReader();
xmiReader.read("http://www.omg.org/cwm/1.0/cwm_1.0.xmi", msTlp);

// Get the DimensionClass proxy
org.omg.java.cwm.analysis.olap.DimensionClass dc = olapPkg.getDimension();
// Create a Time Dimension
org.omg.java.cwm.analysis.olap.Dimension timeDim = dc.createDimension();
timeDim.setName("Time");
timeDim.setTime(true);








import javax.jmi.reflect.RefObject;
import javax.jmi.model.MofClass;
import javax.jmi.model.ModelElement;
import java.util.Iterator;
public void readAttributes(RefObject object) {
// metaobject of any RefObject is an instance of MofClass
MofClass metaObject = (MofClass) object.refMetaObject();
// explore the object's metamodel to get object's attrs.
for (Iterator it=metaObject.getContents().iterator(); it.hasNext();) {
ModelElement element = (ModelElement) it.next();
if (element instanceof javax.jmi.model.Attribute) {
// print the attribute's name
System.out.print(element.getName() + " = ");
// get the value of the attribute
Object value = object.refGetValue(element);
// print the attribute value
System.out.println(value.toString());
}
}
}











public void generateXML(Node parent, java.io.PrintStream stream)
throws java.io.IOException {
// write the current node
if (parent instanceof TextNode) {
// write text node
stream.print(parent.getName());
}
else {
// write node opening
stream.print("<" + parent.getName() + ">");
// write contained nodes
for (Iterator it=parent.getElements().iterator(); it.hasNext();) {
Object element = it.next();
if (element instanceof Node) {
generateXML((Node) element, stream);
}
}
// write node ending
stream.print("</" + parent.getName() + ">");
}
}














// create the root node
RootNode root = service.getRootNode().createRootNode("test",
"test.xml");
// create the first node
Node node = service.getNode().createNode("node");
// set root as its container
node.setContainer(root);
// now create the two attributes
Attribute attr1 = service.getAttribute().createAttribute("attr1",
"value1");
Attribute attr2 = service.getAttribute().createAttribute("attr2",
"value2");
// add the two attributes as contained elements of node
// (this is an alternative way of setting the container)
node.getElements().add(attr1);
node.getElements().add(attr2);
// create the text node
TextNode text = service.getTextNode().createTextNode("text");
// set node as its container
text.setContainer(node);

















