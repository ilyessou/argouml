<?xml version="1.0" encoding="UTF-8"?>
<part
	xmlns="http://docbook.org/ns/docbook" 
	version="5.0" 
	xml:lang="en"
	xmlns:xi="http://www.w3.org/2001/XInclude" 
	xmlns:xlink="http://www.w3.org/1999/xlink"
	>
	
	<title>User Interface Reference</title>

	<chapter xml:id="ch.ref.ui">
		<title>Introduction</title>

		<para>This chapter describes the overall behavior of the user interface. Description of the various component parts&#8212;the menu bar, panes and various diagrams&#8212; is in separate chapters.</para>

		<section>
			<title>Overview of the Window</title>

			<para><xref xlink:href="fig.ref.gui_overview" /> shows the main ArgoUML window.</para>
			<para>The titlebar of the window shows the following 4 parts of information, separated from each other by a dash.</para>

			<itemizedlist>
				<listitem>
					<para>The current filename. If no filename for the project is set yet, then the titlebar shows &quot;Unititled&quot;.</para>
				</listitem>
				<listitem>
					<para>The name of the currently active diagram.</para>
				</listitem>
				<listitem>
					<para>The name <quote>ArgoUML</quote>.</para>
				</listitem>
				<listitem>
					<para>An asterisk (*). This item is only present if the current project file is <quote>dirty</quote>, i.e. it is altered, but not yet saved. In other words, if the asterisk is absent, then the current file has not been altered.</para>
				</listitem>
			</itemizedlist>
			<figure float="1" xml:id="fig.ref.gui_overview">
				<title>Overview of the ArgoUML window</title>
				<screenshot><mediaobject><imageobject> <imagedata align="center" fileref="images/reference/gui_overview.png" format="PNG" /></imageobject></mediaobject></screenshot>
			</figure>
			<para>At the top of screen is a <emphasis>menu bar</emphasis>, which is described in <xref
					xlink:href="ch.ref.menu"
					 />. Below that is the <emphasis>toolbar</emphasis>, as described in <xref
					xlink:href="ch.ref.toolbar" />.</para>
			<para>The bulk of the window comprises four sub-windows or <emphasis>panes</emphasis>. Clockwise from top left these are the <emphasis>explorer</emphasis> (see <xref
					xlink:href="ch.ref.navpane" />), <emphasis>editing pane</emphasis> (see <xref
					xlink:href="ch.ref.editpane" />), <emphasis>details pane</emphasis> (see <xref
					xlink:href="ch.ref.detpane" />) and <emphasis>to-do pane</emphasis> (see <xref
					xlink:href="ch.ref.todopane"
					 />). All 4 panes have a <emphasis>tool bar</emphasis> at the top (in the <emphasis>details pane</emphasis> it is located under the <emphasis>properties</emphasis> tab). An overview of the panes is given in <xref
					xlink:href="s1.ref.panes"
					 />. Finally at the bottom of the window is a <emphasis>status bar</emphasis> described in <xref
					xlink:href="s1.ref.status" />.</para>
		</section>
		<section xml:id="s1.ref.mouse">
			<title>General Mouse Behavior in ArgoUML</title>
			<para>Mouse behavior that is specific to the various panes of ArgoUML (see <xref
					xlink:href="s1.ref.panes"
				 />) or the menu bar, is discussed in the chapters covering those panes and the menu bar. In this section we cover behavior that is general across all of ArgoUML.</para>
			<para>In a number of places in ArgoUML text may be directly edited (for example the constraint editor&#8212;see <xref
					xlink:href="s2.ref.details_constraint_editor"
				 />). The behavior of the mouse when handling text is discussed in the sections that follow.</para>
			<section>
				<title>Mouse Button Terminology</title>
				<para>ArgoUML assumes a two button mouse. We will refer to the buttons as <quote>button&nbsp;1</quote> and <quote>button&nbsp;2</quote>. Button&nbsp;1 is the leftmost button on a right-handed mouse, and sometimes referred to as the <emphasis>select</emphasis> button. Button&nbsp;2 is the rightmost button on a right-handed mouse, and is sometimes referred to as the <emphasis>adjust</emphasis> button.</para>
				<para>A single depress and release of a mouse button with the mouse is referred to as a <emphasis>click</emphasis>. Two clicks in quick succession is referred to as a <emphasis>double click</emphasis>. Moving the mouse while holding a button down is referred to as <emphasis>button motion</emphasis> with the starting point being at <emphasis>button down</emphasis> and the end point at <emphasis>button up</emphasis>.</para>
			</section>
			<section>
				<title>Button&nbsp;1 Click</title>
				<para>Clicking on an user-interface object or on a diagram model element may establish many different things. Most of the behaviour is experienced quite intuitive by the user, mainly because the high degree of standardisation, even spanning different computer platforms (Macintosh, PC, UNIX,â€¦). ArgoUML follows the <emphasis>Java Look and Feel Design Guidelines</emphasis> by Sun. See <link
						xlink:href="http://java.sun.com/products/jlf/"
					 />. Hence, behaviour of common user-interface components is generally not discussed in this document.</para>
				<para>On the other hand, mouse actions in a diagram may not seem so intuitive to the user, since it is specific for ArgoUML. Hence they are explained here. In short, clicking selects or activates the object beneath the mouse-pointer, and moves the focus (i.e. navigation).</para>
				<para>More in detail, the button&nbsp;1 click may cause the following result:</para>
				<section>
					<title>Selection</title>
					<para>Here button&nbsp;1 is used to choose (select) a model element (in a list or tree or on a diagram) on which subsequent operations will take place. Multiple model elements may be selected by using Shift and/or Ctrl in combination with button&nbsp;1, see <xref
							xlink:href="s2.ref.mouse.shift_control"
						 />. Selection is always clearly indicated by a colored background.</para>
					<para>On a diagram, the selected model element is indicated with colored &quot;blocks&quot; at the corners/ends of the object. Model elements can be selected or deselected in different ways:</para>
					<itemizedlist>
						<listitem>
							<para>Button&nbsp;1 click. Deselects all model elements, and selects the one clicked on.</para>
						</listitem>
						<listitem>
							<para>Button&nbsp;1 motion. Button motion (moving the mouse with the button down) in the diagram, not on any model element, allows to draw a rectangle around model elements which will be selected when the button&nbsp;1 is released.</para>
						</listitem>
						<listitem>
							<para>Menu functions and shortcuts. Many menu operations change selection as side-effect, e.g. creating a new diagram. Many keyboard shortcuts for menu operations change the selection, e.g. Ctrl-A, which stands for the <literal>Select All</literal> function.</para>
						</listitem>
					</itemizedlist>
				</section>
				<section>
					<title>Activation</title>
					<para>Here button&nbsp;1 is used to activate the user interface component, e.g. a button. The object is usually highlighted when the mouse button is pressed and then activated when the mouse button is released. Activating an user-interface object means that its function is executed.</para>
				</section>
				<section>
					<title>Navigation</title>
					<para>Here button&nbsp;1 is used to move the focus from one user interface component or diagram model element to another. It is better known under the term keyboard focus. This because keyboard commands usually work on the model element that has the focus. The focus is indicated by a (hardly visible) box around the model element, or for a text entry box, by a flashing cursor.</para>
				</section>
				<section>
					<title>General Behavior When Editing Text</title>
					<para>Here button&nbsp;1 is used to select the point within the text at which operations (text entry and deletion) will take place.</para>
				</section>
			</section>
			<section>
				<title>Button&nbsp;1 Double Click</title>
				<para>The behavior of button&nbsp;1 double click varies betweens panes and is discussed in their chapters.</para>
				<section>
					<title>General Behavior When Editing Text</title>
					<para>Here button&nbsp;1 double click is used to select a complete word, or other syntactic unit within the text. Subsequent operations (text entry and deletion) will replace the selected text.</para>
				</section>
			</section>
			<section>
				<title>Button&nbsp;1 Motion</title>
				<section>
					<title>General Behavior When Editing Text</title>
					<para>Here button&nbsp;1 motion is used to select a range of text. Subsequent operations (text entry and deletion) will replace the selected text.</para>
				</section>
			</section>
			<section xml:id="s2.ref.mouse.shift_control">
				<title>Shift and Ctrl modifiers with Button&nbsp;1</title>
				<section>
					<title>Within Lists</title>
					<para>This behavior applies where there is a list of things that may be selected. This includes various dialog boxes, and the to-do pane, where there is a list of to-do items to be selected.</para>
					<para>Where selections are to be made, the SHIFT key is used to with button&nbsp;1 to <emphasis>extend</emphasis> from the original button&nbsp;1 selection to the current position.</para>
					<para>Similarly the CTRL key with button&nbsp;1 is used to add individual items to the current selection. Where Ctrl-button&nbsp;1 is used on an item already selected, that item is removed from the selection.</para>
					<caution>
						<para>Users of Microsoft Windows might be familiar with the use of SHIFT-CTRL-Click (i.e. holding both the Shift and Ctrl key down when clicking), to add sub-lists to an existing selection. ArgoUML does not support this. SHIFT-CTRL-Click will behave as CTRL-Click.</para>
					</caution>
				</section>
				<section>
					<title>General Behavior When Editing Text</title>
					<para>In a number of places in ArgoUML text may be directly edited (for example when naming a model&#8212;element in the properties pane, or when typing a UML note / comment). Here SHIFT button&nbsp;1 is used to select a range of text from the previously selected point. Subsequent operations (text entry and deletion) will replace the selected text.</para>
				</section>
			</section>
			<section xml:id="s2.ref.mouse.alt">
				<title>Alt with Button&nbsp;1: Panning</title>
				<para>When holding down the Alt key during button&nbsp;1 down on a diagram, movement of the mouse pans the drawing area. The function is indicated by the mousepointer which turns into a crosshair with arrows.</para>
			</section>
			<section xml:id="s2.ref.mouse.ctrl">
				<title>Ctrl with Button&nbsp;1: Constrained Drag</title>
				<para>When holding down the Ctrl key while dragging with mouse button&nbsp;1 down on a diagram, the movement of the dragged element element will be constrained to one of eight cardinal directions : North, South, East, West, NE, SE, SW, NW. </para>
			</section>
			<section>
				<title>Button&nbsp;2 Actions</title>
				<para>Button&nbsp;2 actions are all dependent on the pane or menu bar, and discussed in their various chapters.</para>
			</section>
			<section>
				<title>Button&nbsp;2 Double Click</title>
				<para>Button&nbsp;2 actions are all dependent on the pane or menu bar, and discussed in their various chapters.</para>
			</section>
			<section>
				<title>Button&nbsp;2 Motion</title>
				<para>Button&nbsp;2 actions are all dependent on the pane or menu bar, and discussed in their various chapters.</para>
			</section>
		</section>
		<section xml:id="s1.ref.panes">
			<title>General Information About Panes</title>
			<para>The four sub-windows of the main ArgoUML window are called <emphasis>panes</emphasis>. Clockwise from top left these are the <emphasis>explorer</emphasis> (see <xref
					xlink:href="ch.ref.navpane" />), <emphasis>editing pane</emphasis> (see <xref
					xlink:href="ch.ref.editpane" />), <emphasis>details pane</emphasis> (see <xref
					xlink:href="ch.ref.detpane" />) and <emphasis>to-do pane</emphasis> (see <xref
					xlink:href="ch.ref.todopane"
					 />). At the top the editing pane is a <emphasis>tool bar</emphasis>.</para>
			<section>
				<title>Re-sizing Panes</title>
				<para>You can re-size panes by dragging on the divider bars between them. To indicate this possibility, the mouse cursor changes shape when hovering over the divider bars.</para>
				<para>In addition you will see there are two small left pointing arrows within the vertical divider bars, one at the top of the vertical divider bar between explorer and editing pane and one at the top of the vertical divider bar between to-do pane and details pane. Button&nbsp;1 click on the first of these will expand the editing pane to the full width of the window, button&nbsp;1 click on the second will expand the details pane to the full width of the window.</para>
				<para>There is also a small downward pointing arrow within the horizontal divider bar at its leftmost end. Clicking on this will expand the explorer and editing panes to the full depth of the window.</para>
				<para>By using both the top arrow on the vertical divider and the arrow on the horizontal divider, it is possible to expand the editing pane to use the entire window.</para>
				<para>The original configuration can be restored by clicking again on these arrows, which are now located at the edge of the window.</para>
			</section>
		</section>
		<section xml:id="s1.ref.status">
			<title>The status bar</title>
			<para>The status bar is at the very bottom of the ArgoUML window and is used to display short advisory messages. In general such messages are self explanatory. It is e.g. used for displaying parsing error messages in case a text entered on the diagram can not be interpreted.</para>
		</section>
	</chapter>

	<chapter xml:id="ch.ref.toolbar">

		<title>The Toolbar</title>

		<section>

			<title>File operations</title>

			<para>These buttons have identical functions as their 
        counterparts in the <literal>File</literal> menu.</para>

			<itemizedlist>

				<listitem>

					<para><guiicon>
							<inlinemediaobject>
								<imageobject>
									<imagedata align="center" fileref="images/icons/new.gif"
										format="GIF" />
								</imageobject>
							</inlinemediaobject>
						</guiicon>
						<literal>New</literal> See for a full description 
            <xref
							xlink:href="s2.ref.menu_new" />.</para>

				</listitem>

				<listitem>

					<para><guiicon>
							<inlinemediaobject>
								<imageobject>
									<imagedata align="center"
										fileref="images/icons/open_project.gif" format="GIF" />
								</imageobject>
							</inlinemediaobject>
						</guiicon>
						<literal>Open Projectâ€¦</literal> See for a full 
            description <xref
							xlink:href="s2.ref.menu_open_project" />
            .</para>

				</listitem>

				<listitem>

					<para><guiicon>
							<inlinemediaobject>
								<imageobject>
									<imagedata align="center"
										fileref="images/icons/save_project.gif" format="GIF" />
								</imageobject>
							</inlinemediaobject>
						</guiicon>
						<literal>Save Project</literal> See for a full description 
            <xref
							xlink:href="s2.ref.menu_save_project" />.</para>

				</listitem>

				<listitem>

					<para><guiicon>
							<inlinemediaobject>
								<imageobject>
									<imagedata align="center" fileref="images/icons/print.gif"
										format="GIF" />
								</imageobject>
							</inlinemediaobject>
						</guiicon>
						<literal>Print</literal> See for a full description 
            <xref
							xlink:href="s2.ref.menu_print" />.</para>

				</listitem>

			</itemizedlist>

		</section>

		<section>

			<title>Edit operations</title>

			<para>These buttons have identical functions as their 
        counterparts in the <literal>Edit</literal> menu.</para>

			<itemizedlist>

				<!--      <listitem>

            <para><guiicon><inlinemediaobject><imageobject>
            <imagedata align="center" fileref="images/icons/cut.gif"
             format="GIF"/></imageobject></inlinemediaobject></guiicon> 
            <literal>Cut</literal> See for a full description 
            <xref xlink:href="s2.ref.menu_cut"/>.</para>

          </listitem>

          <listitem>

            <para><guiicon><inlinemediaobject><imageobject>
            <imagedata align="center" fileref="images/icons/copy.gif"
             format="GIF"/></imageobject></inlinemediaobject></guiicon> 
            <literal>Copy</literal> See for a full description 
            <xref xlink:href="s2.ref.menu_copy"/>.</para>

          </listitem>

          <listitem>

            <para><guiicon><inlinemediaobject><imageobject>
            <imagedata align="center" fileref="images/icons/paste.gif"
             format="GIF"/></imageobject></inlinemediaobject></guiicon> 
            <literal>Paste</literal> See for a full description 
            <xref xlink:href="s2.ref.menu_paste"/>.</para>

          </listitem>
-->
				<listitem>

					<para><guiicon>
							<inlinemediaobject>
								<imageobject>
									<imagedata align="center"
										fileref="images/icons/remove_from_diagram.gif" format="GIF"
									 />
								</imageobject>
							</inlinemediaobject>
						</guiicon>
						<literal>Remove From Diagram</literal> See for a full 
            description 
            <xref
							xlink:href="s2.menu_edit_remove_from_diagram" />.</para>

				</listitem>

				<listitem>

					<para><guiicon>
							<inlinemediaobject>
								<imageobject>
									<imagedata align="center"
										fileref="images/icons/navigate_back.gif" format="GIF" />
								</imageobject>
							</inlinemediaobject>
						</guiicon>
						<literal>Navigate Back</literal> See for a full description 
            <xref
							xlink:href="s2.ref.menu_select" />.</para>

				</listitem>

				<listitem>

					<para><guiicon>
							<inlinemediaobject>
								<imageobject>
									<imagedata align="center"
										fileref="images/icons/navigate_forward.gif" format="GIF" />
								</imageobject>
							</inlinemediaobject>
						</guiicon>
						<literal>Navigate Forward</literal> See for a full 
            description <xref
							xlink:href="s2.ref.menu_select" />.</para>

				</listitem>

			</itemizedlist>

		</section>

		<section>

			<title>View operations</title>

			<para>The <literal>Findâ€¦</literal> button has identical 
        behaviour as its counterpart in the <literal>View</literal> 
        menu. The <literal>Zoom</literal> button is a more luxurously 
        version of the function in the <literal>View</literal> 
        menu.</para>

			<itemizedlist>

				<listitem>

					<para><guiicon>
							<inlinemediaobject>
								<imageobject>
									<imagedata align="center" fileref="images/icons/find.gif"
										format="GIF" />
								</imageobject>
							</inlinemediaobject>
						</guiicon>
						<literal>Findâ€¦</literal> See for a full description 
            <xref
							xlink:href="s2.ref.menu_find" />.</para>

				</listitem>

				<listitem>

					<para>
						<guiicon>
							<inlinemediaobject>
								<imageobject>
									<imagedata align="center" fileref="images/icons/zoom.gif"
										format="GIF" />
								</imageobject>
							</inlinemediaobject>
						</guiicon>
						<literal>Zoom</literal>
               This is a different version of the menu-item for 
              zooming, as described in 
              <xref
							xlink:href="s2.ref.menu_zoom"
							 />
              . Clicking with button&nbsp;1 on the zoom-icon opens a panel 
              as in the figure below.
              <figure
							float="1" xml:id="fig.ref.toolbar_zoom">

							<title>The Zoom slider on the Toolbar</title>

							<screenshot>
								<mediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/reference/toolbar_zoom_slider.png"
											format="PNG" />
									</imageobject>
								</mediaobject>
							</screenshot>
						</figure>

              Once the panel is open, the following actions are 
              possible:
            </para>

					<itemizedlist>

						<listitem>

							<para>Clicking with button&nbsp;1 on the &quot;knob&quot; 
                followed by button&nbsp;1 movement will adjust the 
                zoomfactor.</para>

						</listitem>

						<listitem>

							<para>Clicking with button&nbsp;1 on the shown percentage 
                allows editing the given zoomfactor (in percent) 
                directly with the keyboard. Double clicking on the 
                value shown selects the whole entry for easy 
                overtyping.</para>

						</listitem>

						<listitem>

							<para>Clicking with button&nbsp;1 below or above the knob 
                increases or decreass the zoom factor with 1%. Use this 
                function to easily fine-adjust the percentage.</para>

						</listitem>

						<listitem>

							<para>Clicking with button&nbsp;1 or button&nbsp;2 on the 
                <literal>Zoom</literal> tool, or anywhere outside the 
                slider panel closes the panel.</para>

						</listitem>

						<listitem>

							<para>The keyboard can be used to operate the Zoom 
                Slider as follows: When the <literal>Zoom</literal> 
                icon in the toolbar has the focus (indicated by the 
                thin blue box around it), then pressing the <keycap>
                spacebar</keycap> opens the zoon slider panel. Use the 
                <keycap>arrow</keycap> keys to increase and decrease 
                the percentage 1 by 1. Use <keycap>Shift-Tab</keycap> 
                to set the focus to the percentage box, where you can 
                edit the given value directly. Pressing <keycap>
                Enter</keycap> activates the changed value. When the 
                &quot;knob&quot; has the focus, pressing <keycap>
                PageUp</keycap>/<keycap>PageDown</keycap> 
                increases/decreases the percentage by 50. Pressing 
                <keycap>Home</keycap> sets the percentage to 500%, and 
                <keycap>End</keycap> sets it to 0%.</para>

						</listitem>

					</itemizedlist>

				</listitem>

			</itemizedlist>

		</section>

		<section xml:id="ch.ref.toolbar.create">

			<title>Create operations</title>

			<para>These buttons have identical functions as their 
        counterparts in the <literal>Create</literal> menu.</para>

			<itemizedlist>

				<listitem>

					<para><guiicon>
							<inlinemediaobject>
								<imageobject>
									<imagedata align="center"
										fileref="images/icons/use_case_diagram.gif" format="GIF" />
								</imageobject>
							</inlinemediaobject>
						</guiicon>
						<literal>New Use Case Diagram</literal> See for a full 
            description 
            <xref
							xlink:href="s2.ref.create.diagram.use_case_diagram" />
            .</para>

				</listitem>

				<listitem>

					<para><guiicon>
							<inlinemediaobject>
								<imageobject>
									<imagedata align="center"
										fileref="images/icons/class_diagram.gif" format="GIF" />
								</imageobject>
							</inlinemediaobject>
						</guiicon>
						<literal>New Class Diagram</literal> See for a full 
            description 
            <xref
							xlink:href="s2.ref.create.diagram.class_diagram" />
            .</para>

				</listitem>

				<listitem>

					<para><guiicon>
							<inlinemediaobject>
								<imageobject>
									<imagedata align="center"
										fileref="images/icons/sequence_diagram.gif" format="GIF" />
								</imageobject>
							</inlinemediaobject>
						</guiicon>
						<literal>New Sequence Diagram</literal> See for a full 
            description 
            <xref
							xlink:href="s2.ref.create.diagram.sequence_diagram" />
            .</para>

				</listitem>

				<listitem>

					<para><guiicon>
							<inlinemediaobject>
								<imageobject>
									<imagedata align="center"
										fileref="images/icons/collaboration_diagram.gif"
										format="GIF" />
								</imageobject>
							</inlinemediaobject>
						</guiicon>
						<literal>New Collaboration Diagram</literal> See for a full 
            description 
            <xref
							xlink:href="s2.ref.create.diagram.collaboration_diagram"
						 />
            .</para>

				</listitem>

				<listitem>

					<para><guiicon>
							<inlinemediaobject>
								<imageobject>
									<imagedata align="center"
										fileref="images/icons/state_diagram.gif" format="GIF" />
								</imageobject>
							</inlinemediaobject>
						</guiicon>
						<literal>New Statechart Diagram</literal> See for a full 
            description 
            <xref
							xlink:href="s2.ref.create.diagram.state_diagram" />
            .</para>

				</listitem>

				<listitem>

					<para><guiicon>
							<inlinemediaobject>
								<imageobject>
									<imagedata align="center"
										fileref="images/icons/activity_diagram.gif" format="GIF" />
								</imageobject>
							</inlinemediaobject>
						</guiicon>
						<literal>New Activity Diagram</literal> See for a full 
            description 
            <xref
							xlink:href="s2.ref.create.diagram.activity_diagram" />
            .</para>

				</listitem>

				<listitem>

					<para><guiicon>
							<inlinemediaobject>
								<imageobject>
									<imagedata align="center"
										fileref="images/icons/deployment_diagram.gif" format="GIF"
									 />
								</imageobject>
							</inlinemediaobject>
						</guiicon>
						<literal>New Deployment Diagram</literal> See for a full 
            description 
            <xref
							xlink:href="s2.ref.create.diagram.deployment_diagram" />
            .</para>

				</listitem>

			</itemizedlist>

		</section>

	</chapter>

	<chapter xml:id="ch.ref.menu">

		<title>The Menu bar</title>

		<section>

			<title>Introduction</title>

			<para>An important principle behind ArgoUML is that actions 
        should be able to be invoked in whatever way the user finds 
        convenient. As a result many (but not all) actions that can be 
        carried out on the menu can be carried out in other ways as 
        well under ArgoUML.</para>

			<para>A number of the common menu entries are also available 
        through keyboard shortcuts.</para>

			<para>It is also be possible to navigate the menu from the 
        keyboard. Each level of each menu is identified by a letter 
        (shown underlined in the menu or entry name from the moment the 
        ALT key is pressed). This sequence of letters while holding 
        down the ALT key selects the entry. 
        </para>

			<para>The following is an explanation of why the menuitems are 
        grouped as they are.</para>

			<para>

				<itemizedlist>

					<listitem>

						<para>The <emphasis>File</emphasis> menu contains 
              operations that affect on the whole project/file. All the 
              items in this menu can be explained as such.</para>

					</listitem>

					<listitem>

						<para>The <emphasis>Edit</emphasis> menu is generally 
              intended for editing the model or changing the content of 
              a diagram. It also contains functions to enable editing, 
              like e.g. selecting. This menu is not intended for 
              diagram layout functions. Most functions here do 
              something with the selected modelelement and diagram. The 
              items &quot;Configure Perspectivesâ€¦&quot;
              and &quot;Settingsâ€¦&quot; are a bit different,
              since they adjust the way ArgoUML works - but they do not 
              belong in the File menu, since their settings are not
              stored in the project.</para>

					</listitem>

					<listitem>

						<para>The <emphasis>View</emphasis> menu is for functions 
              that do never alter the model, nor the diagram layout, 
              only the way you view the diagram. A good example is
              &quot;zoom&quot;. 
              Also navigational functions belong here, e.g. &quot;Find&quot; 
              and &quot;Goto Diagramâ€¦&quot;. All changes of settings 
              in this menu apply to all diagrams (e.g. zoom).</para>

					</listitem>

					<listitem>

						<para>The <emphasis>Create</emphasis> menu contains all 
              possible diagrams that can be created. 
              These functions are
              context dependend, since they work on the 
              selected modelelement.
              </para>

					</listitem>

					<listitem>

						<para>The <emphasis>Arrange</emphasis> menu allows layout 
              changes in the current diagram, which is not the same as 
              the items in the View menu. Functions here can not alter 
              the UML model.</para>

					</listitem>

					<listitem>

						<para>The <emphasis>Generation</emphasis> menu is for 
              Code Generation. The functions here work either on the 
              selected modelelements, or on the whole project.</para>

					</listitem>

					<listitem>

						<para>The <emphasis>Critique</emphasis> menu is specific 
              for settings related to critics, 
              which apply for all  projects.</para>

					</listitem>

					<listitem>

						<para>The <emphasis>Tools</emphasis> menu is currently 
              empty. If 
              plugins are installed, then their functions appear 
              here.</para>

					</listitem>

					<listitem>

						<para>The <emphasis>Help</emphasis> menu contains the 
              usual &quot;information&quot; and 
              &quot;about&quot;.</para>

					</listitem>

				</itemizedlist>

			</para>

		</section>

		<section xml:id="s1.ref.menu_mouse">

			<title>Mouse Behavior in the Menu Bar</title>

			<para>Behavior of the mouse in general, and the naming of the 
        buttons is covered in the chapter on the overall user interface 
        (see <xref
					xlink:href="s1.ref.mouse"
				 />). There is no ArgoUML 
        specific behaviour for the menu.</para>

		</section>

		<section>

			<title>The File Menu</title>

			<para>These are actions concerned with input and output and the 
        overall management of projects and the ArgoUML system.</para>

			<section xml:id="s2.ref.menu_new">

				<title><guiicon>
						<inlinemediaobject>
							<imageobject>
								<imagedata align="center" fileref="images/icons/new.gif"
									format="GIF" />
							</imageobject>
						</inlinemediaobject>
					</guiicon> 
          New</title>

				<indexterm>
					<primary>New</primary>
				</indexterm>
				<indexterm>
					<primary>Shortcut 
          key</primary>
					<secondary>Ctrl-N</secondary>
				</indexterm>
				<para>Shortcut Ctrl-N.</para>

				<para>This initializes a new project within ArgoUML. The 
          project is created without a the name. It contains a 
          (top-level) <literal>Model</literal> named <literal>
          untitledModel</literal> and two empty diagrams: a class 
          diagram and a use case diagram.</para>

				<caution>

					<para><literal>untitledModel</literal> is not a 
            conventional model name (most processes suggest models 
            should be build from lower case letters). ArgoUML permits 
            you to use any case letters, but a critic will trigger to 
            warn that this is not conventional. See 
            <xref
							xlink:href="s1.ref.model" /> for a discussion of 
            this.</para>

				</caution>

				<para>If the model has been altered (as indicated by the 
          &quot;*&quot; in the titlebar of ArgoUML&#039;s window), then 
          activating the &quot;New&quot; function is potentionally not 
          the user&#039;s intention, since it will erase the changes. 
          Hence a confirmation dialog appears to allow the user to save 
          his work first, or cancel the operation completely.</para>

				<figure float="1">

					<title>The confirmation dialog for <literal>
            New</literal>.</title>

					<screenshot><mediaobject><imageobject>
            <imagedata align="center" fileref="images/reference/menu_dialog_confirm_new.png" format="PNG" /></imageobject></mediaobject></screenshot>
				</figure>

			</section>

			<section xml:id="s2.ref.menu_open_project">

				<title><guiicon>
						<inlinemediaobject>
							<imageobject>
								<imagedata align="center" fileref="images/icons/open_project.gif"
									format="GIF" />
							</imageobject>
						</inlinemediaobject>
					</guiicon> 
          Open Projectâ€¦</title>

				<indexterm>
					<primary>Open Projectâ€¦</primary>
				</indexterm>
				<indexterm>
					<primary>Shortcut 
          key</primary>
					<secondary>Ctrl-O</secondary>
				</indexterm>
				<para>Shortcut Ctrl-O.</para>

				<para>This opens an existing project from a file. Selecting 
          this menu option will open a file selection dialog (see 
          <xref
						xlink:href="fig.ref.menu_open_project" />).</para>

				<figure float="1" xml:id="fig.ref.menu_open_project">

					<title>The file selection dialog for <literal>
            Open Projectâ€¦</literal>.</title>

					<screenshot><mediaobject><imageobject>
            <imagedata align="center" fileref="images/reference/menu_open_project.png" format="PNG" /></imageobject></mediaobject></screenshot>
				</figure>

				<para>The main body of the dialog is a text area with a 
          listing of all directories and files in the currently 
          selected directory which match the current filter (see 
          below).</para>

				<para>Navigating in the directory tree is possible by 
          selecting a directory in the drop down selector at the top of 
          this dialog. Navigating deeper in the tree may be done by 
          double clicking button&nbsp;1 on the directory shown in the main 
          text area.</para>

				<para>In the lower portion of the dialog is a text box 
          labeled <literal>File name:</literal> for the name of the 
          file to be opened. The file name may be typed directly in 
          here, or selected from the directory listing above using 
          button&nbsp;1 click.</para>

				<para>Beneath this is a drop down selector labeled <literal>
          Files of type:</literal> to specify a filter on the files to 
          be shown in the directory listing. Only files that match the 
          filter are listed. The available filters are listed below. 
          The default filter is the first one, 
          which combines all available formats.</para>

				<itemizedlist>

					<listitem>
						<para>ArgoUML file (*.zargo, *.uml, *.xmi, *.xml, *.zip)</para>
					</listitem>

					<listitem>
						<para>ArgoUML compressed project file (*.zargo)</para>
					</listitem>

					<listitem>
						<para>ArgoUML project file (*.uml)</para>
					</listitem>

					<listitem>
						<para>XML Metadata Interchange (*.xmi)</para>
					</listitem>

					<listitem>
						<para>XML Metadata Interchange (*.xml)</para>
					</listitem>

					<listitem>
						<para>XMI compressed project file (*.zip)</para>
					</listitem>

				</itemizedlist>

			</section>

			<section xml:id="s2.ref.menu_save_project">

				<title><guiicon>
						<inlinemediaobject>
							<imageobject>
								<imagedata align="center" fileref="images/icons/save_project.gif"
									format="GIF" />
							</imageobject>
						</inlinemediaobject>
					</guiicon> 
          Save Project</title>

				<indexterm>
					<primary>Save Project</primary>
				</indexterm>
				<indexterm>
					<primary>Shortcut 
          key</primary>
					<secondary>Ctrl-S</secondary>
				</indexterm>
				<para>Shortcut Ctrl-S.</para>

				<para>This saves the project using its current file name. Use 
          <literal>Save Project Asâ€¦</literal> to save the project to a 
          different file. If no filename is given yet (e.g. after 
          <literal>New</literal>), then this function works exactly as 
          <literal>Save Project Asâ€¦</literal>.</para>

				<note>

					<para>In certain circumstances, there is nothing to save, 
            and this menuitem is downlighted. E.g. when the user did 
            not yet alter a loaded project. The presence of a 
            <quote>*</quote> in the titlebar of ArgoUML&#039;s window 
            indicates that the current project is <quote>dirty</quote> 
            (has been altered), and can be saved.</para>

				</note>

			</section>

			<section xml:id="s2.ref.menu_save_project_as">

				<title><guiicon>
						<inlinemediaobject>
							<imageobject>
								<imagedata align="center" fileref="images/icons/save_project_as.gif"
									format="GIF" />
							</imageobject>
						</inlinemediaobject>
					</guiicon> 
          Save Project Asâ€¦</title>

				<para>This opens a dialog allowing you to save the project 
          under a different file name (or to specify a file name for 
          the first time if the project is a new project).</para>

				<para>The dialog box is almost identical to that for <literal>
          Open Project</literal> (see 
          <xref
						xlink:href="fig.ref.menu_open_project"
					 />). The extension 
          of the filename is automatically set.</para>

			</section>

			<section xml:id="s2.ref.menu_revert_to_saved">

				<title>Revert to Saved</title>

				<para>This menu-item allows you to throw away all your recent 
          changes, and reload the last saved version of the current 
          project. It works a bit like an <literal>Undo</literal> 
          feature, but only restores changes done since the last time 
          the file was saved.</para>

				<para>This menu-item is downlighted unless the currentproject 
          has been saved or loaded before (i.e. it has a name), and it 
          has been altered.</para>

				<para>When this menu-item is activated, a small confirmation 
          dialog box opens, as shown in the figure below. This warning 
          that all recent changes will be discarded, is needed because 
          the action can not be undone. Selecting <literal>No</literal> 
          cancels the whole action as if you did not select the 
          menu-item in the first place. Selecting <literal>
          Yes</literal> reloads the last saved file.</para>

				<figure float="1" xml:id="fig.ref.menu_revert_to_saved">

					<title>The warning dialog for Revert to Saved.</title>

					<screenshot><mediaobject><imageobject>
            <imagedata align="center" fileref="images/reference/menu_revert_to_saved.png" format="PNG" /></imageobject></mediaobject></screenshot>
				</figure>

			</section>

			<section>

				<title>Import XMIâ€¦</title>

				<para>This menu-item allows to load an 
          UML 1.3 or 1.4 model which was exported by e.g. another tool,
          as a XMI file, according the XMI V1.0, V1.1 or V1.2 standard. 
          The extension of such file should be <literal>.xmi</literal>.
          </para>

				<para>If the model has been altered (as indicated by the 
          &quot;*&quot; in the titlebar of ArgoUML&#039;s window), then 
          activating the &quot;Import XMIâ€¦&quot; 
          function is potentionally not 
          the user&#039;s intention, since it will erase the changes. 
          Hence a confirmation dialog appears to allow the user to save 
          his work first, or cancel the operation completely.</para>

				<figure float="1">

					<title>The confirmation dialog for <literal>
            Import XMIâ€¦</literal>.</title>

					<screenshot><mediaobject><imageobject>
            <imagedata align="center" fileref="images/reference/menu_dialog_confirm_new.png" format="PNG" /></imageobject></mediaobject></screenshot>
				</figure>

				<para>When the menu is activated, the standard filechooser 
          appears, see <xref
						xlink:href="fig.ref.menu_import_xmi"
					 />.
          Beware the fact that this file will only contain the model, 
          not any diagram layout. Hence, 
          the new project will not contain any diagrams.</para>

				<figure float="1" xml:id="fig.ref.menu_import_xmi">

					<title>The dialog for <literal>
            Import XMIâ€¦</literal>.</title>

					<screenshot><mediaobject><imageobject>
            <imagedata align="center" fileref="images/reference/menu_import_xmi.png" format="PNG" /></imageobject></mediaobject></screenshot>
				</figure>

			</section>

			<section>

				<title>Export XMIâ€¦</title>

				<para>This menu-item allows to save the complete structure of 
          the UML 1.4 model as a XMI file, according the XMI V1.2 standard. 
          Beware the fact that this file will only contain the model, 
          not any diagram layout. Hence, if the XMI file is reloaded 
          with the <literal>File - Open Projectâ€¦</literal> menu, then 
          the diagrams are lost.</para>

				<para>When the menu is activated, the standard filechooser 
          appears, see <xref
						xlink:href="fig.ref.menu_export_xmi" />.</para>

				<figure float="1" xml:id="fig.ref.menu_export_xmi">

					<title>The dialog for <literal>
            Export XMIâ€¦</literal>.</title>

					<screenshot><mediaobject><imageobject>
            <imagedata align="center" fileref="images/reference/menu_export_xmi.png" format="PNG" /></imageobject></mediaobject></screenshot>
				</figure>

			</section>

			<section xml:id="s3.ref.menu_import_sources">

				<title><guiicon>
						<inlinemediaobject>
							<imageobject>
								<imagedata align="center" fileref="images/icons/import_sources.gif"
									format="GIF" />
							</imageobject>
						</inlinemediaobject>
					</guiicon> 
          Import Sourcesâ€¦</title>

				<para>A very powerful feature of ArgoUML is that it can 
          <quote>Reverse Engineer</quote> Java code to yield a class 
          diagram. This sub-menu entry specifies Java code to be 
          imported for reverse engineering.</para>

				<para>The dialog box is similar to that for <literal>
          Open Project</literal> (see 
          <xref
						xlink:href="fig.ref.menu_open_project"
						 />), but with two 
          extra tabs placed alongside the directory listing, as shown 
          in <xref
						xlink:href="fig.ref.menu_import_sources" />).</para>

				<figure float="1" xml:id="fig.ref.menu_import_sources">

					<title>The file selection dialog for <literal>
            Import Sourcesâ€¦</literal>.</title>

					<screenshot><mediaobject><imageobject>
            <imagedata align="center" fileref="images/reference/menu_import_sources.png" format="PNG" /></imageobject></mediaobject></screenshot>
				</figure>

				<para>Those fields that are the same as <literal>
          Open Project</literal> behave in the same way (see 
          <xref
						xlink:href="s2.ref.menu_open_project" />).</para>

				<para>Next to the &quot;All Files&quot; file filter, there is 
          the default filter &quot;Java Source File 
          (*.java)&quot;.</para>

				<para>The first of the two tabs is labeled <literal>
          General</literal> and is selected by button&nbsp;1 click on its 
          tab. It provides a combo box for the language selection (in 
          V0.18 of ArgoUML only Java can be chosen), and the following 
          selections:</para>

				<itemizedlist>

					<listitem>

						<para><literal>Descend directories recursively</literal>. 
              If enabled (the default), reverse engineering will track 
              through sub-directories for any further Java files. If 
              not it will restrict to the selected directory.</para>

					</listitem>

					<listitem>

						<para><literal>Changed/new files only</literal>. 
              If enabled (the default), only changed and new files are imported. 
              If not all classes will be replaced.</para>

					</listitem>

					<listitem>

						<para><literal>Create diagrams from imported 
              code</literal>. If you unselect this, then no diagrams 
              are created, i.e. all data will only be visible in the 
              explorer.</para>

					</listitem>

					<listitem>

						<para><literal>Minimise Class icons in 
              diagrams</literal>. If enabled, then the attributes and 
              operations compartiments will not be shown in the classes 
              on the generated class diagrams. Note: This item is 
              checked by default, and is overseen by many users, which 
              are then surprised by the result.</para>

					</listitem>

					<listitem>

						<para><literal>Perform Automatic Diagram 
              Layout</literal>. If selected, then ArgoUML will do its 
              best to layout the generated diagrams automatically. If 
              not, then all items will be placed at the top left corner 
              of the diagram.</para>

					</listitem>

					<listitem>

						<para><literal>Level of import detail: Classifiers only / 
              Classifiers plus feature specifications / Full 
              import</literal>. The latter is the default.</para>

					</listitem>

					<listitem>

						<para><literal>Import source file encoding:</literal>. 
              The value <literal>Cp1252</literal> is often the default. 
              This string represents the <literal>coded character set 
              identifier (CCSID)</literal>.</para>

					</listitem>

				</itemizedlist>

				<para>The second of the two tabs is labeled <literal>
          Java</literal> and is selected by button&nbsp;1 click on its tab. 
          It provides two pairs of radio boxes.</para>

				<itemizedlist>

					<listitem>

						<para>The first radio box allows selection between 
              modeling attributes of Java classes as UML attributes 
              (the default) or as UML associations to the class 
              specified.</para>

					</listitem>

					<listitem>

						<para>The second radio box allows selection between 
              modeling arrays as new datatypes in their own right (the 
              default) or as their base datatype with 
              multiplicity.</para>

					</listitem>

				</itemizedlist>

			</section>

			<section>

				<title><guiicon>
						<inlinemediaobject>
							<imageobject>
								<imagedata align="center" fileref="images/icons/page_setup.gif"
									format="GIF" />
							</imageobject>
						</inlinemediaobject>
					</guiicon> 
          Page Setupâ€¦</title>

				<indexterm>
					<primary>Page Setup â€¦</primary>
				</indexterm>
				<para>This brings up the standard dialog box provided by the 
          operating system to adjust printer paper size, orientation, 
          and other options.</para>

			</section>

			<section xml:id="s2.ref.menu_print">

				<title><guiicon>
						<inlinemediaobject>
							<imageobject>
								<imagedata align="center" fileref="images/icons/print.gif"
									format="GIF" />
							</imageobject>
						</inlinemediaobject>
					</guiicon> 
          Printâ€¦</title>

				<indexterm>
					<primary>Print â€¦</primary>
				</indexterm>
				<indexterm>
					<primary>Shortcut 
          key</primary>
					<secondary>Ctrl-P</secondary>
				</indexterm>
				<para>Shortcut Ctrl-P.</para>

				<para>This brings up the standard dialog box provided by the 
          operating system allowing the current diagram to be printed 
          out.</para>

				<para>In some cases, when the printing is started, the dialog 
          box of <xref
						xlink:href="fig.ref.menu_diagram_exceeds_page"
					 /> 
          appears. Selecting the &quot;Fit to page&quot; button does 
          print the whole diagram fitted on one page by scaling it 
          down. Which might cause all text to be too small to read in 
          case of big diagrams, but it is a quick and easy way to get 
          an usable printout. Selecting the &quot;Multiple pages&quot; 
          option does print unscaled, by dividing the diagram in 
          pieces, on as many pages as needed. Pressing the close button 
          of the dialog does the former option.</para>

				<figure float="1" xml:id="fig.ref.menu_diagram_exceeds_page">

					<title>The diagram exceeds page size dialog.</title>

					<screenshot><mediaobject><imageobject>
            <imagedata align="center" fileref="images/reference/menu_diagram_exceeds_page.png" format="PNG" /></imageobject></mediaobject></screenshot>
				</figure>

				<warning>

					<para>If the current diagram contains no selected 
            model elements, then the whole diagram is printed. However, if 
            one or more model elements are selected, then only the area they 
            cover is printed! If scaling is selected (by the &quot;Fit 
            to page&quot; choice in the dialog box descibed above), 
            then the scaling is done on basis of the selected model elements 
            only. If scaling is not chosen (or in case it is not 
            needed), then all pages containing a selected model element are 
            printed.</para>

				</warning>

			</section>

			<section xml:id="s2.ref.menu_export_graphics">

				<title>Export Graphicsâ€¦</title>

				<para>This menu entry brings up a dialog box allowing the 
          currently selected diagram (in the editing pane) to be saved 
          in one of a number of graphic formats.</para>

				<para>The dialog box is identical to that for <literal>
          Open Project</literal> (see 
          <xref
						xlink:href="fig.ref.menu_open_project"
						 />), except for the 
          <literal>Files of type:</literal>. The chosen filetype 
          specifies the graphics format used for saving. The filename 
          is automatically extended with the corresponding ending (if 
          not entered already). A default filename is generated based 
          on the diagram name.</para>

				<para>The available graphics types are:</para>

				<itemizedlist>

					<listitem>
						<para>GIF image (*.gif)</para>
					</listitem>
					<listitem>
						<para>Encapsulated Postscript file (*.eps)</para>
					</listitem>
					<listitem>
						<para>PNG image (*.png)</para>
					</listitem>
					<listitem>
						<para>Postscript file (*.ps)</para>
					</listitem>
					<listitem>
						<para>Scalable Vector Graphics file (*.svg)</para>
					</listitem>

				</itemizedlist>

				<para>The graphics format that is selected by default
          is set in the dialog under the menu entry Edit - Settingsâ€¦</para>

				<!--caution>
            TODO: Is this still true?

            <para>The PNG graphics does not support shadows very well, 
            so maybe it is better to either save in GIF format, or 
            switch shadows off before saving in PNG format.</para>

          </caution-->

			</section>

			<section xml:id="s2.ref.menu_export_all_graphics">

				<title>Export All Graphicsâ€¦</title>

				<para>This menu entry brings up a dialog box 
          to select a directory. 
          In this directory, for all diagrams in the current project,
          a graphics file is generated.</para>

				<para>The names of the files are deducted from the diagram names.
          The graphics format that is produced
          is set in the dialog under the Edit menu 
          (see <xref
						xlink:href="s2.ref.menu_settings" />).</para>

			</section>

			<section xml:id="s2.ref.menu_notation">

				<title>Notation</title>

				<para>This sub-menu presents a radio button selection for 
          notation, i.e. the language in which all textual adornments 
          are shown on the diagrams. 
          </para>

				<para>This feature defines the project&#039;s notation language.
          </para>

				<para>There are 2 ways to set the notation language:</para>

				<itemizedlist>

					<listitem>

						<para>In the Edit menu,
              see <xref
								xlink:href="s3.ref.menu_settings_notations"
								 />
              in the notation tab of the settings dialog,
              which defines the default notation language for new projects.
              This choice is stored in the 
              <filename>argouml.properties</filename> file.
              </para>

					</listitem>

					<listitem>

						<para>In the File menu, item Notation. This determines  
              how all textual adornments of figures 
              on all diagrams 
              of the current project are shown.
              This choice is stored in the project file.
              </para>

					</listitem>

				</itemizedlist>

				<para>The following 2 notations are build in ArgoUML:</para>

				<itemizedlist>

					<listitem>

						<para><guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/uml_notation.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>UML 1.4</literal>. Uses UML notation as the 
              default notation for every modelelement on any diagram.</para>

					</listitem>

					<listitem>

						<para><guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/java_notation.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Java</literal>. Uses Java notation as the 
              default notation for every modelelement on any diagram.</para>

					</listitem>

				</itemizedlist>

				<para>The following choices are only available if the 
          corresponding plugin languages are installed.</para>

				<itemizedlist>

					<listitem>

						<para><literal>Cpp</literal>.</para>

					</listitem>

					<listitem>

						<para><literal>CSharp</literal>.</para>

					</listitem>

					<listitem>

						<para><literal>PHP</literal>.</para>

					</listitem>

				</itemizedlist>

				<remark>Besides UML, 
          only Java is partly implemented in V0.22 of ArgoUML.</remark>

			</section>

			<section xml:id="s2.ref.menu_properties">

				<title><guiicon>
						<inlinemediaobject>
							<imageobject>
								<imagedata align="center" fileref="images/icons/settings.gif"
									format="GIF" />
							</imageobject>
						</inlinemediaobject>
					</guiicon>
           Properties</title>

				<para>This menu entry brings up a dialog box, which allows 
          the user to set various options
          of the currently loaded project.</para>

				<para>All settings in this dialog 
          are stored in the project-file 
          together with the model.</para>

				<figure float="1" xml:id="fig.ref.menu_properties_user">

					<title>The dialog for Properties - 
            Notation: The User tab.</title>

					<screenshot><mediaobject><imageobject>
            <imagedata align="center" fileref="images/reference/properties-user.gif" format="GIF" /></imageobject></mediaobject></screenshot>
				</figure>

				<para>In the User tab, 
          you are able to set the following fields:
          </para>

				<itemizedlist>

					<listitem>
						<para>The first field contains 
          the name of the author or responsible 
          for the current project.
          By default the name and email of the creator
          are filled in, 
          so probably you will never need to edit this, 
          but it is possible.
          </para>
					</listitem>

					<listitem>
						<para>The Project Description field may contain any text
          that you need to describe the project.
          By default it is empty.</para>
					</listitem>

					<listitem>
						<para>The "Last saved with ArgoUML" field 
          indicates the version of ArgoUML 
          that was used to save this project 
          (the last time it was saved).
          This may be usefull if multiple designers have different 
          versions of ArgoUML, 
          which may not be backwards compatible all the time.
          </para>
					</listitem>

				</itemizedlist>

				<figure float="1" xml:id="fig.ref.menu_properties_notations">

					<title>The dialog for Properties - 
            Notation: The Notations tab.</title>

					<screenshot><mediaobject><imageobject>
            <imagedata align="center" fileref="images/reference/properties-notations.gif" format="GIF" /></imageobject></mediaobject></screenshot>
				</figure>

				<para>In the Notations tab, 
          you are able to set the following fields:
          </para>

				<itemizedlist>

					<listitem>
						<para>The first field is a combobox that allows
            selection of the project's Notation language.
            By default, it lists UML and Java, 
            but other languages may be added by plugins.
            See the chapter on Notation for more explanation:
            <xref
								xlink:href="s1.ref.notation" />.
            </para>

					</listitem>

					<listitem>
						<para><literal>Use guillemots</literal> (&laquo;&nbsp;&raquo;) for 
                stereotypes (clear by default). By default ArgoUML uses 
                pairs of <emphasis>less than</emphasis> and 
                <emphasis>greater than</emphasis> (&lt;&lt; &gt;&gt;) 
                characters for stereotypes. If this box is checked 
                stereotypes on diagrams are shown between true 
                guillemots (&laquo;&nbsp;&raquo;).</para>

						<para>This feature is presumably added to ArgoUML 
                because guillemots are poorly supported by various 
                fonts, and if they are present, then they are quite 
                small and poorly visible.</para>
					</listitem>

					<listitem>
						<para><literal>Show visibility</literal> (clear by 
                default). If this is selected, then ArgoUML will
                show the visibility indicators in front of e.g. attributes
                in the diagram.
                In UML the notation is "+" for public, "-" for private,
                "#" for protected, and "~" for package. 
                E.g. for an attribute, it may show:
                <literal>+newAttr : int</literal>.
            </para>
					</listitem>

					<listitem>
						<para><literal>Show multiplicity</literal> (clear by 
                default). If this is selected, then ArgoUML will show 
                the multiplicity of e.g. attributes in the diagram. 
                In UML notation, the multiplicity is shown between [], such as: 
                <literal>+newAttr [0..*] : int</literal>.
                This setting has no impact on showing multiplicity 
                near associationends.
                </para>
					</listitem>

					<listitem>
						<para><literal>Show initial value</literal> (clear by 
                default). If this is selected, then ArgoUML will show
                the initial value of e.g. attributes in the diagram.
                In UML notation, the initial value is shown e.g. like this:
                <literal>+newAttr : int = 1</literal>.
              </para>
					</listitem>

					<listitem>
						<para><literal>Show properties</literal> (clear by 
                default). If this is selected, then ArgoUML will show
                various properties between braces {}.
                E.g. for an attribute, it may show:
                <literal>+newAttr : int { frozen }</literal>.
                </para>
					</listitem>

					<listitem>
						<para><literal>Show types and parameters</literal> 
                (set by default). When this checkbox is unmarked, 
                attributes in classes are shown without type indication, 
                and operations are shown without parameters.
                This feature may be usefull during 
                the analysis phase of your project.
                If all checkmarks in 
                the Notation Tab are unchecked, then
                e.g. for an attribute, ArgoUML may show:
                <literal>newAttr</literal>. And for an operation: 
                <literal>newOperation()</literal>.
                </para>
					</listitem>

					<listitem>
						<para><literal>Show stereotypes in explorer</literal> 
                (clear by default). If this is selected, then ArgoUML will show
                stereotypes next to the icons of the modelelements 
                in the Explorer, i.e. the tree structure at the left hand side.
                </para>
					</listitem>

					<listitem>
						<para><literal>Default shadow width</literal> (set to 1 
                by default). ArgoUML is able to draw all elements 
                on a diagram with a shadow,
                for esthetical reasons. 
                Use this setting to adjust the 
                size of the shadow, used when the modelelement is created.
                The details tab "Presentation" allows to set the shadow per
                modelelement, after they are created, but ArgoUML V0.22 does
                not retain this latter change after save and load.
                </para>
					</listitem>

				</itemizedlist>

			</section>

			<section>

				<title>Most Recent Used Files</title>

				<para>ArgoUML remembers a few of the most recently saved 
          files, and lists them here, to enable loading then in the 
          most simple way.</para>

				<para>The maximum number of files that is listed here, can be 
          adjusted in the <literal>Edit</literal> -&gt; <literal>
          Settingsâ€¦</literal> menu. The list of files is stored in the 
          <filename>argo.user.properties</filename> file in the 
          user&#039;s home directory.</para>

			</section>

			<section>

				<title>Exit</title>

				<indexterm>
					<primary>Exit</primary>
				</indexterm>
				<indexterm>
					<primary>Shortcut 
          key</primary>
					<secondary>Alt-F4.</secondary>
				</indexterm>
				<para>Shortcut Alt-F4.</para>

				<para>This closes down ArgoUML. A warning message will pop-up 
          if you have a project open with unsaved changes asking if you 
          wish to save it. See 
          <xref
						xlink:href="fig.ref.menu_save_changes" />. The options 
          are:</para>

				<itemizedlist>

					<listitem>

						<para><literal>Yes</literal> (save the project and exit 
              ArgoUML);</para>

					</listitem>

					<listitem>

						<para><literal>No</literal> (do not save the project, but 
              still exit ArgoUML); and</para>

					</listitem>

					<listitem>

						<para><literal>Cancel</literal> (do not save the project 
              and do not exit ArgoUML).</para>

					</listitem>

					<listitem>

						<para>The dialog box can also be closed by clicking in 
              the close button in the window border. The effect is the 
              same as selecting &quot;Cancel&quot;.</para>

					</listitem>

				</itemizedlist>

				<figure float="1" xml:id="fig.ref.menu_save_changes">

					<title>The save changes dialog.</title>

					<screenshot><mediaobject><imageobject>
            <imagedata align="center" fileref="images/reference/menu_save_changes.png" format="PNG" /></imageobject></mediaobject></screenshot>
				</figure>

			</section>

		</section>

		<section>

			<title>The Edit Menu</title>

			<para>This menu provides support for 
        selecting model elements on the editing pane; 
        removal of model elements from diagrams and the model; 
        and control of user settings.</para>

			<section xml:id="s2.ref.menu_select">

				<title>Select</title>

				<para>This sub-menu provides for selection of items on the 
          editing menu. It has the following entries.</para>

				<itemizedlist>

					<listitem>

						<para><literal>Select All</literal> (shortcut Ctrl-A). 
              <indexterm>
								<primary>Select All</primary>
							</indexterm>
							<indexterm>
								<primary>Shortcut 
              key</primary>
								<secondary>Ctrl-A</secondary>
							</indexterm> 
              Selects all model elements on the current pane or in the 
              current field. The exact behaviour depends on the 
              <literal>current pane</literal> (i.e. the last one you 
              clicked in): explorer pane, editing pane, to-do pane, 
              details pane. One rule applies in all cases though: the 
              selection on the diagram (editing pane) and in the 
              explorer are always synchronised.</para>

						<para>If the editing pane is the <literal>current 
              pane</literal>: First everything in the explorer and on 
              the current diagram is deselected, and then everything 
              that is on the current diagram is selected (and if the 
              same items apear in the explorer, then they are also 
              there indicated as selected, because they are always 
              synchronised).</para>

						<para>If the explorer pane is the <literal>current 
              pane</literal>: All visible items in the explorer pane 
              are selected, and non-visible items are deselected.</para>

						<para>If the to-do pane is the <literal>current 
              pane</literal>: All visible items in the to-do pane are 
              selected, and non-visible items are deselected. In fact, 
              this works the same as for the explorer pane, because 
              both are tree structures.</para>

						<para>If the details pane is the <literal>current 
              pane</literal>: The function only works when the cursor 
              is in certain fields, where selecting is possible, e.g. a 
              Name field. In such a case, the Select All function 
              extends the current selection to the whole field 
              contents.</para>

					</listitem>

					<listitem>

						<para><guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/navigate_back.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Navigate Back</literal>. ArgoUML keeps a record 
              of the model elements that you have been selecting while 
              navigating the model. This button moves you back to the 
              previous one selected. If there are no more previous 
              model elements, the button is grayed out.</para>

					</listitem>

					<listitem>

						<para><guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/navigate_forward.gif" format="GIF"
										 />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Navigate Forward</literal>. ArgoUML keeps a 
              record of the model elements that you have been selecting 
              while navigating the model. This button moves you forward 
              to the next one selected (after you have used the 
              Navigate Back button to move back). If there are no more 
              next model elements, the button is grayed out.</para>

					</listitem>

					<listitem>

						<para><literal>Invert Selection</literal>. This inverts 
              the current selection on the <literal>current 
              pane</literal>. More exact: everything that was selected 
              is de-selected and everything that was not selected 
              within the current pane is selected.</para>

					</listitem>

				</itemizedlist>

			</section>

			<!--
        <sect2 xml:id="s2.ref.menu_cut">

          <title><guiicon><inlinemediaobject><imageobject>
          <imagedata align="center" fileref="images/icons/cut.gif"
           format="GIF"/></imageobject></inlinemediaobject></guiicon> 
          Cut</title>

          <indexterm><primary>Cut</primary></indexterm>
          <indexterm><primary>Shortcut 
          key</primary><secondary>Ctrl-X</secondary></indexterm>
          <para>Shortcut Ctrl-X.</para>

          <para>This takes the currently selected items, remove them 
          from the diagram, and place them on the clipboard for 
          subsequent pasting.</para>

          <warning>

            <para>In the V0.18 implementation of ArgoUML there are some 
            difficulties with clipboard based functions. This menu 
            option is best avoided.</para>

          </warning>

        </sect2>
-->
			<!--
        <sect2 xml:id="s2.ref.menu_copy">

          <title><guiicon><inlinemediaobject><imageobject>
          <imagedata align="center" fileref="images/icons/copy.gif"
           format="GIF"/></imageobject></inlinemediaobject></guiicon> 
          Copy</title>

          <indexterm><primary>Copy</primary></indexterm>
          <indexterm><primary>Shortcut 
          key</primary><secondary>Ctrl-C</secondary></indexterm>
          <para>Shortcut Ctrl-C.</para>

          <para>This takes the currently selected items and make a copy 
          of them on the clipboard for subsequent pasting.</para>

          <warning>

            <para>In the V0.18 implementation of ArgoUML there are some 
            difficulties with clipboard based functions. This menu 
            option is best avoided.</para>

          </warning>

        </sect2>
-->
			<!--
        <sect2 xml:id="s2.ref.menu_paste">

          <title><guiicon><inlinemediaobject><imageobject>
          <imagedata align="center" fileref="images/icons/paste.gif"
           format="GIF"/></imageobject></inlinemediaobject></guiicon> 
          Paste</title>

          <indexterm><primary>Paste</primary></indexterm>
          <indexterm><primary>Shortcut 
          key</primary><secondary>Ctrl-V</secondary></indexterm>
          <para>Shortcut Ctrl-V.</para>

          <para>This pastes the item(s) last cut or copied to the 
          clipboard on to the current diagram in the drawing 
          pane.</para>

          <warning>

            <para>In the V0.18 implementation of ArgoUML there are some 
            difficulties with clipboard based functions. This menu 
            option is best avoided.</para>

          </warning>

        </sect2>
-->

			<section xml:id="s2.menu_edit_remove_from_diagram">

				<title><guiicon>
						<inlinemediaobject>
							<imageobject>
								<imagedata align="center"
									fileref="images/icons/remove_from_diagram.gif" format="GIF" />
							</imageobject>
						</inlinemediaobject>
					</guiicon> 
          Remove From Diagram</title>

				<indexterm>
					<primary>Remove From Diagram</primary>
				</indexterm>
				<indexterm>
					<primary>Shortcut 
          key</primary>
					<secondary>Delete</secondary>
				</indexterm>
				<para>Shortcut Delete.</para>

				<para>This removes the currently selected item(s) from the 
          diagram, but not from the model.</para>

				<para>The modelelement can be re-added to the diagram by 
          button&nbsp;2 click on the modelelement in the explorer, 
          or by dragging it onto the diagram.</para>

			</section>

			<section>

				<title><guiicon>
						<inlinemediaobject>
							<imageobject>
								<imagedata align="center"
									fileref="images/icons/delete_from_model.gif" format="GIF" />
							</imageobject>
						</inlinemediaobject>
					</guiicon> 
          Delete From Model</title>

				<indexterm>
					<primary>Delete From Model</primary>
				</indexterm>
				<indexterm>
					<primary>Shortcut 
          key</primary>
					<secondary>Ctrl-Delete</secondary>
				</indexterm>
				<para>Shortcut Ctrl-Delete.</para>

				<para>This function deletes the selected item(s) from the 
          model completely.</para>

				<para>If the item to be deleted is also present on another 
          diagram than the current one, the dialog box from figure x 
          appears.</para>

				<figure float="1" xml:id="fig.ref.menu_remove_from_model">

					<title>The dialog for confirmation of <literal>Remove from 
            Model</literal>.</title>

					<screenshot><mediaobject><imageobject>
            <imagedata align="center" fileref="images/reference/confirm_remove.png" format="PNG" /></imageobject></mediaobject></screenshot>
				</figure>

			</section>

			<section>

				<title><guiicon>
						<inlinemediaobject>
							<imageobject>
								<imagedata align="center" fileref="images/icons/nav_config.gif"
									format="GIF" />
							</imageobject>
						</inlinemediaobject>
					</guiicon>
           Configure Perspectivesâ€¦</title>

				<para>This menu-item invokes the same dialog 
		  as the button at the top of the explorer.
		  See 
          <xref
						xlink:href="s1.ref.configure_perspectives"
					 />.
          for a complete description.</para>

			</section>

			<section xml:id="s2.ref.menu_settings">

				<title><guiicon>
						<inlinemediaobject>
							<imageobject>
								<imagedata align="center" fileref="images/icons/settings.gif"
									format="GIF" />
							</imageobject>
						</inlinemediaobject>
					</guiicon> 
          Settingsâ€¦</title>

				<para>This menu entry brings up a dialog box, which allows 
          the user to set various options that control the behavior of 
          ArgoUML (see <xref
						xlink:href="fig.ref.menu_settings" />).</para>
				<para>These settings are saved persistently for use by
          	subsequent ArgoUML sessions.
          </para>

				<para>ArgoUML has various user specific configurations that can
          	be set in this dialog box,
          	or directly on the various panes. Also the main window
          	size and location is such a setting. Activating this menu
          	entry causes the information to be saved in the file
          	<literal>argo.user.properties</literal>.
          	The location of this file is in the &quot;users home
          	directory&quot;, which is defined as
          	<literal>${user.home}</literal>
          	, and can be determined as described in
          	<xref
						xlink:href="s3.ref.menu.environment" />
          	.
          </para>

				<tip>
					<para>This is a text file, which you can edit to configure
            	ArgoUML.
            </para>
				</tip>

				<figure float="1" xml:id="fig.ref.menu_settings">

					<title>The dialog for <literal>Settings - 
            Preferences</literal>.</title>

					<screenshot><mediaobject><imageobject>
            <imagedata align="center" fileref="images/reference/menu_settings.png" format="PNG" /></imageobject></mediaobject></screenshot>
				</figure>

				<para>The options that can be set up on the various tabs are 
          described in the following sections. For each tab there are 
          three buttons at the bottom of the dialog box.</para>

				<itemizedlist>

					<listitem>

						<para><literal>OK</literal>. Activating this button 
              (button&nbsp;1 click) applies the chosen settings and exits 
              the dialog.</para>

					</listitem>

					<listitem>

						<para><literal>Cancel</literal>. Selecting this button 
              (button&nbsp;1 click) exits the dialog without applying any 
              settings changed since the last <literal>Apply</literal> 
              (or since the dialog started if <literal>Apply</literal> 
              has not been used).</para>

					</listitem>

					<listitem>

						<para><literal>Apply</literal>. Selecting this button 
              (button&nbsp;1 click) applies the chosen settings and remains 
              in the dialog.</para>

					</listitem>

				</itemizedlist>

				<para>Closing the dialog (with the close button in the top 
          corner in the border of the window) causes the same effect as 
          <literal>Cancel</literal>.</para>

				<section>

					<title>Preferences Tab</title>

					<para>Selecting the <literal>Preferences</literal> tab 
            (button&nbsp;1 click on the tab) gives the following options as 
            check boxes.</para>

					<itemizedlist>

						<listitem>

							<para><literal>Show Splash Panel</literal> (set by 
                default). If enabled ArgoUML will show a small panel 
                with a picture while starting up.</para>

							<tip>

								<para>The splash panel can be seen by using the Help 
                  menu (see <xref
										xlink:href="s2.ref.menu_help_about" />
                  ).</para>

							</tip>

						</listitem>

						<listitem>

							<para><literal>Reload last saved project on 
                startup</literal> (clear by default). Check this item 
                if you always work on the same project, and wish to 
                load it automatically when you start up ArgoUML.</para>

						</listitem>

						<listitem>

							<para><literal>Strip (non-standard) diagrams 
                from XMI file during import</literal>
                (clear by default). Checking this item will tell
                ArgoUML to ignore the "Diagram" elements when 
                importing XMI files. </para>

							<para>You only need to use this setting, if
                ArgoUML gives an error while importing your
                XMI file saying that it encountered unrecognized
                elements named "Diagram."  Some versions of Poseidon
                are known to create this type of file by default
                although there's usually an export option to
                force them to create standard XMI files.</para>

						</listitem>

						<listitem>

							<para><literal>UML Profile file</literal> (
                /org/argouml/model/mdr/mof/default-uml14.xmi 
                by default). </para>
							<para>This is a read-only field which shows the current
                profile being used by ArgoUML.  If you specified an alternate
                profile at startup time or a plugin-module installed a
                different profile, it will display here.</para>

							<para>In the future this will be a settable field that
                allows you to select different profiles to match different
                modeling environments (Java, C++, AndroMDA, etc).</para>

						</listitem>
					</itemizedlist>

				</section>

				<section xml:id="s3.ref.menu.environment">

					<title>Environment Tab</title>

					<para>Selecting the <literal>Environment</literal> tab 
            (button&nbsp;1 click on the tab) lists several environmental items. 
            Note that none of the paths can be altered &#8212; these are 
            just a matter of record.</para>

					<figure float="1">

						<title>The dialog for <literal>Settings - 
              Environment</literal>.</title>

						<screenshot><mediaobject><imageobject>
              <imagedata align="center" fileref="images/reference/menu_settings_environment.png" format="PNG" /></imageobject></mediaobject></screenshot>
					</figure>

					<itemizedlist>

						<listitem>

							<para><literal>Default Graphics Format</literal>. 
                Here you can select the same graphics formats as in the 
                menu <xref
									xlink:href="s2.ref.menu_export_graphics"
								 />.
                The chosen format is selected by default 
                in the Export Graphics and Export All Graphics menu-items.
                </para>

						</listitem>

						<listitem>

							<para><literal>Graphics Export Resolution</literal>.
                This allows you to artificially increase 
                the resolution of produced graphics.
                The advised setting is "Standard". 
                To be able to use "High" or "Extra High", 
                you usually need to start the Java virtual machine 
                with extra memory.
                </para>

						</listitem>

						<listitem>

							<para><literal>${argo.root}</literal>. The full path to 
                the ArgoUML program, i.e. the <literal>
                argouml.jar</literal> file.</para>

						</listitem>

						<listitem>

							<para><literal>${argo.home}</literal>. The ArgoUML home 
                directory which contains the &quot;jar&quot; files 
                needed by ArgoUML.</para>

						</listitem>

						<listitem>

							<para><literal>${argo.ext.dir}</literal>. The directory 
                holding ArgoUML extensions&#8212;by default the <literal>
                ext</literal> sub-directory of the ArgoUML build 
                directory.</para>

						</listitem>

						<listitem>

							<para><literal>${java.home}</literal>. The home 
                directory of the Java Runtime Environment (JRE).</para>

						</listitem>

						<listitem>

							<para><literal>${user.home}</literal>. The user&#039;s 
                home directory. Used for storing the <literal>
                argo.user.properties</literal> file.</para>

						</listitem>

						<listitem>

							<para><literal>${user.dir}</literal>. The directory 
                from which ArgoUML was started.</para>

						</listitem>

						<listitem>

							<para><literal>Startup Directory</literal>. The 
                directory in which ArgoUML starts file searches 
                etc.</para>

						</listitem>

					</itemizedlist>

				</section>

				<section>

					<title>User Tab</title>

					<para>This tab allows the user to record additional 
            information of use to the system. There are two text boxes 
            provided.</para>

					<figure float="1">

						<title>The dialog for <literal>Settings - 
              User</literal>.</title>

						<screenshot><mediaobject><imageobject>
              <imagedata align="center" fileref="images/reference/menu_settings_user.png" format="PNG" /></imageobject></mediaobject></screenshot>
					</figure>

					<itemizedlist>

						<listitem>

							<para><literal>Full Name</literal>. Allows the user to 
                record her full name.</para>

						</listitem>

						<listitem>

							<para><literal>Email Address</literal>. Allows the 
                user to record his Email address.</para>

						</listitem>

					</itemizedlist>

					<para>This information is used when requesting to-do help 
            by Email.</para>

				</section>

				<section xml:id="s3.ref.menu_settings_appearance">

					<title>Appearance Tab</title>

					<para>This tab allows the user to specify the LAF (Look And 
            Feel) and theme, i.e. what the complete ArgoUML UI looks 
            like. It comprises the following settings.</para>

					<figure float="1">

						<title>The dialog for <literal>Settings - 
              Appearance</literal>.</title>

						<screenshot><mediaobject><imageobject>
              <imagedata align="center" fileref="images/reference/menu_settings_appearance.png" format="PNG" /></imageobject></mediaobject></screenshot>
					</figure>

					<itemizedlist>

						<listitem>

							<para><literal>Look and Feel</literal>. The choice made 
                here influences the complete User Interface. It only 
                becomes effective when ArgoUML is exited and 
                restarted.</para>

						</listitem>

						<listitem>

							<para><literal>Metal Theme</literal>. This item is 
                downlighted if the Metal LAF is not chosen. The choice 
                made here influences the complete User Interface. It 
                only becomes effective when ArgoUML is exited and 
                restarted.</para>

						</listitem>

						<listitem>

							<para><literal>Smooth edges of diagram lines and 
                text</literal>. This feature is known as 
                <quote>anti-aliasing</quote> on certain platforms. It 
                causes diagonal lines to look much less jagged, by 
                making use of several shades of gray. This feature only 
                works if the operating system supports it.</para>

						</listitem>

					</itemizedlist>

				</section>

				<section xml:id="s3.ref.menu_settings_notations">

					<title>Notation Tab</title>

					<para>This tab allows the user to specify certain notation 
            settings, i.e. how things are shown on diagrams. It 
            comprises the following check boxes.</para>

					<para>All settings here, only define the defaults used for new projects.
            If you want to change the way 
            the diagrams in your current project look, 
            then see the File - Properties menu.</para>

					<figure float="1">

						<title>The dialog for <literal>Settings - 
              Notations</literal>.</title>

						<screenshot><mediaobject><imageobject>
              <imagedata align="center" fileref="images/reference/menu_settings_notations.png" format="PNG" /></imageobject></mediaobject></screenshot>
					</figure>

					<itemizedlist>

						<listitem>

							<para><literal>Notation Language</literal> (
                UML 1.4
                by default). This feature allows changing the default notation 
                (i.e. language: UML, Java,â€¦) used on the diagrams 
                for new projects. 
                Suppose that a designer indicates that the 
                default notation of a project is Java.
                When he saves the project, 
                the choice for Java is stored inside the project file.
                If someone else is viewing the 
                diagram, he will see the Java notation, too.
                This person can select the UML notation in the 
                File - Notation menu, and see all diagrams in UML language.
                See
                <xref
									xlink:href="s2.ref.menu_notation" />).</para>

						</listitem>

						<listitem>

							<para><literal>Use guillemots</literal> (&laquo;&nbsp;&raquo;) for 
                stereotypes (clear by default). By default ArgoUML uses 
                pairs of <emphasis>less than</emphasis> and 
                <emphasis>greater than</emphasis> (&lt;&lt; &gt;&gt;) 
                characters for stereotypes. If this box is checked 
                stereotypes on diagrams are shown between true 
                guillemots (&laquo;&nbsp;&raquo;).</para>

							<para>This feature is presumably added to ArgoUML 
                because guillemots are poorly supported by various 
                fonts, and if they are present, then they are quite 
                small and poorly visible.</para>

							<para>Independent of the way they are shown, 
                when entering stereotypes, you can always type
                real guillemots (if your keyboard supports it)
                or their &lt;&lt; &gt;&gt; equivalents.</para>

						</listitem>

						<listitem>

							<para><literal>Show visibility</literal> (clear by 
                default). If this is selected, then ArgoUML will
                show the visibility indicators in front of e.g. attributes
                in the diagram.
                In UML the notation is "+" for public, "-" for private,
                "#" for protected, and "~" for package. 
                E.g. for an attribute, it may show:
                <literal>+newAttr : int</literal>.
                </para>

						</listitem>

						<listitem>

							<para><literal>Show multiplicity</literal> (clear by 
                default). If this is selected, then ArgoUML will show 
                the multiplicity of e.g. attributes in the diagram. 
                In UML notation, the multiplicity is shown between [], such as: 
                <literal>+newAttr [0..*] : int</literal>.
                This setting has no impact on showing multiplicity 
                near associationends.
                </para>

						</listitem>

						<listitem>

							<para><literal>Show initial value</literal> (clear by 
                default). If this is selected, then ArgoUML will show
                the initial value of e.g. attributes in the diagram.
                In UML notation, the initial value is shown e.g. like this:
                <literal>+newAttr : int = 1</literal>.
              </para>

						</listitem>

						<listitem>

							<para><literal>Show properties</literal> (clear by 
                default). If this is selected, then ArgoUML will show
                various properties between braces {}.
                E.g. for an attribute, it may show:
                <literal>+newAttr : int { frozen }</literal>.
                </para>

						</listitem>

						<listitem>

							<para><literal>Show types and parameters</literal> 
                (set by default). When this checkbox is unmarked, 
                attributes in classes are shown without type indication, 
                and operations are shown without parameters.
                This feature may be usefull during 
                the analysis phase of your project.
                If all checkmarks in 
                the Notation Tab are unchecked, then
                e.g. for an attribute, ArgoUML may show:
                <literal>newAttr</literal>. And for an operation: 
                <literal>newOperation()</literal>.
                </para>

						</listitem>

						<listitem>

							<para><literal>Show stereotypes in explorer</literal> 
                (clear by default). If this is selected, then ArgoUML will show
                stereotypes next to the icons of the modelelements 
                in the Explorer, i.e. the tree structure at the left hand side.
                </para>

						</listitem>

						<listitem>

							<para><literal>Default shadow width</literal> (set to 1 
                by default). ArgoUML is able to draw all elements 
                on a diagram with a shadow. Use this setting to adjust the 
                size of the shadow, used when the modelelement is created.
                The details tab "Presentation" allows to set the shadow per
                modelelement, after they are created.
                </para>

						</listitem>

					</itemizedlist>

				</section>

				<section xml:id="s3.ref.menu_settings_modules">

					<title>Modules Tab</title>

					<para>This tab shows a list of modules that are installed, 
            which may be enabled or disabled. Since this is a new 
            concept for ArgoUML, it currently contains a list of modules that 
            can not be removed, and a button to test the concept. 
            Pressing this button adds a useless menu-item
            on the Tools menu, nothing else.</para>

					<para>Notice also that this is a &quot;new&quot; modules 
            concept so the old Pluggable modules do not work this way, 
            and are not listed.</para>

				</section>

				<section xml:id="s3.ref.menu_settings_plugins">

					<title>Extra Tabs added by Plugins</title>

					<para>A plug-in module has the possibility to add 
            extra tabs. 
            One example is C++; it adds the following tab.
            </para>

					<figure float="1">

						<title>The dialog for <literal>Settings - 
              C++</literal>.</title>

						<screenshot><mediaobject><imageobject>
              <imagedata align="center" fileref="images/reference/menu_settings_cpp.png" format="PNG" /></imageobject></mediaobject></screenshot>
					</figure>

				</section>

			</section>

		</section>

		<section>

			<title>The View Menu</title>

			<para>This menu is used for actions that affect how the various 
        panes are viewed.</para>

			<section>

				<title>Goto Diagramâ€¦</title>

				<para>This menu entry brings up a dialog box, describing all 
          the diagrams in the current project under ArgoUML.</para>

				<figure float="1" xml:id="fig.ref.menu_goto_diagram">

					<title>The dialog for <literal>Goto 
            Diagramâ€¦</literal>.</title>

					<screenshot><mediaobject><imageobject>
            <imagedata align="center" fileref="images/reference/menu_goto_diagram.png" format="PNG" /></imageobject></mediaobject></screenshot>
				</figure>

				<para>The dialog box contains a table with three columns and 
          one row for each diagram in the current project. A scroll bar 
          gives access if the table is too long for the box. Double 
          button&nbsp;1 click on any row will select that diagram in the 
          editing pane. The three columns are as follows.</para>

				<itemizedlist>

					<listitem>

						<para><literal>Type</literal>. Lists the type of 
              diagram.</para>

					</listitem>

					<listitem>

						<para><literal>Name</literal>. Lists the name given to 
              the diagram.</para>

					</listitem>

					<listitem>

						<para><literal>Description</literal>. Shows how many 
              nodes and edges there are on the diagrams. A node is a 
              <quote>2-D</quote> model element and an edge is a connector 
              model element.</para>

					</listitem>

				</itemizedlist>

				<para>This dialog box is not modal, which allows it to remain 
          open while editing the model for easy navigation.</para>

				<warning>

					<para>The V0.22 implementation of ArgoUML does not 
            inmediately update the dialog box with changes made to 
            diagrams: change of name, addition of diagrams, deletion of 
            diagrams.<!-- This is issue 2475. -->
					</para>

				</warning>

			</section>

			<section xml:id="s2.ref.menu_find">

				<title><guiicon>
						<inlinemediaobject>
							<imageobject>
								<imagedata align="center" fileref="images/icons/find.gif"
									format="GIF" />
							</imageobject>
						</inlinemediaobject>
					</guiicon> 
          Findâ€¦</title>

				<para>This menu entry brings up a non-modal dialog box for 
          the ArgoUML search engine.</para>

				<figure float="1" xml:id="fig.ref.menu_find">

					<title>The dialog for <literal>Findâ€¦</literal>.</title>

					<screenshot><mediaobject><imageobject>
            <imagedata align="center" fileref="images/reference/menu_find.png" format="PNG" /></imageobject></mediaobject></screenshot>
				</figure>

				<para>At the top, the dialog box has four tabs labeled 
          <literal>Name and Location</literal>, <literal>
          Last Modified</literal>, <literal>Tagged Values</literal> and 
          <literal>Constraints</literal>. Of these all but the first 
          are grayed out in the V0.22 version of ArgoUML (because they 
          <!-- This is issue 2501 -->
          are not imlemented yet), so the first tab is always 
          selected.</para>

				<para>The <literal>Name and Location</literal> specifies the 
          search to be made. It contains the following:</para>

				<itemizedlist>

					<listitem>

						<para>A text box labeled <literal>Element Name:</literal> 
              specifies the name of the model element to search 
              for. Wild cards (<literal>*</literal>, <literal>
              ?</literal>) may be used here. A drop down gives access 
              to find expressions previously used.</para>

					</listitem>

					<listitem>

						<para>A text box labeled <literal>In Diagram:</literal> 
              specifies which diagrams are to be searched. Again wild 
              cards may be used. Both these two text boxes have a 
              default entry of <literal>*</literal>, i.e. match 
              anything.</para>

					</listitem>

					<listitem>

						<para>To the right of these two text boxes, a selector 
              labeled <literal>Element Type:</literal> allows you to 
              specify the UML metaclass for which you are 
              searching.</para>

					</listitem>

					<listitem>

						<para>A selector labeled <literal>Find in:</literal> 
              allows the search to be made over the entire project (the 
              default) or as a sub-search over the results of a 
              previous search. When opened, a list of all the search 
              result tabs appears.</para>

					</listitem>

					<listitem>

						<para>Beneath these boxes is the button <literal>Clear 
              Tabs</literal>. This clears the display of tabs with the 
              results from previous searches (see below). This button 
              is downlighted if there are no tabs but the <literal>
              Help</literal> tab.</para>

					</listitem>

					<listitem>

						<para>And finally, there is the button <literal>
              Find</literal>. This causes the search specified in the 
              text boxes and selectors above to be executed. The 
              results are displayed in a tab taking up the lower two 
              thirds of the page.</para>

					</listitem>

				</itemizedlist>

				<para>The lower two thirds of the dialog comprises an initial 
          tab (labeled <literal>Help</literal>) giving summary help, 
          and further tabs displaying the results of searches. These 
          search tabs are labeled with a summary of the search 
          <emphasis>element</emphasis>
					<literal>in</literal>
					<emphasis>diagram</emphasis> and are 
          divided horizontally in two halves.</para>

				<para>Button&nbsp;1 double clicking on these tabs removes the tab, 
          and spawns a new window that contains the tab contents, i.e. 
          the search results. This window can be moved and sized at 
          will. This does not work for the help tab.</para>

				<para>The top half is labeled <literal>Search 
          Results:</literal> followed by a count of the number of items 
          found. It comprises a table with one row for each
          model element and four columns. The width of the columns can be 
          adjusted.</para>

				<itemizedlist>

					<listitem>

						<para><literal>Type</literal>. Lists the type of
              model element.</para>

					</listitem>

					<listitem>

						<para><literal>Name</literal>. Lists the name given to 
              the model element.</para>

					</listitem>

					<listitem>

						<para><literal>In Diagram</literal>. Where the model element 
              is visible on a diagram, this lists the name of the 
              diagram, otherwise it shows <literal>N/A</literal>.</para>

					</listitem>

					<listitem>

						<para><literal>Description</literal>. Contains a 
              description of the model element. In ArgoUML V0.18 
              this seems to be restricted to the single entry <literal>
              docs</literal>.</para>

					</listitem>

				</itemizedlist>

				<para>Button&nbsp;1 click on any row will give more information on 
          that model element by showing related model elements in the bottom half 
          (see below). Double click on any row describing a model element 
          on a diagram and that item and diagram will be 
          selected.</para>

				<para>The bottom half of the tab is a table labeled <literal>
          Related Elements:</literal> and is a table with the same 
          columns as the top half. When a model element has been 
          selected in the top half, this table shows the details of any 
          related elements.</para>

				<tip>

					<para>Enlarging the dialog vertically shows that the 
            &quot;Related Items&quot; part changes in size, but not the 
            Search results part. However, between them is a divider 
            line and when hovering over this line, the mouse pointer 
            changes into a sizing icon, and the border between these 2 
            areas can be moved up or down to redistribute the space in 
            the window.</para>

				</tip>

				<warning>

					<para>This dialog box is not modal, which allows it to 
            remain open while editing the model for easy navigation. 
            But the V0.22 implementation of ArgoUML does not inmediately 
            update the dialog box with changes made to the found 
            model elements: change of model element name, change of diagram name. 
            Deletion of a diagram does not stop the possibility to 
            navigate to it.
            <!-- This is issue 4376. -->
					</para>

				</warning>

			</section>

			<section xml:id="s2.ref.menu_zoom">

				<title>Zoom</title>

				<para>This entry brings up a sub-entry, which allows scaling 
          the view of all diagrams to a factor of its normal size. This 
          setting is not saved persistently.</para>

				<para>The sub-menu items that can be selected are:</para>

				<itemizedlist>

					<listitem>

						<para><literal>Zoom Out</literal>. Shortcut (Ctrl-Minus). 
              Gives more overview over the drawing.</para>

					</listitem>

					<listitem>

						<para><literal>Zoom Reset</literal>. Returns to the 
              default zoom ratio (i.e. 100%).</para>

					</listitem>

					<listitem>

						<para><literal>Zoom In</literal>. Shortcut (Ctrl-Plus). 
              Makes the items on the drawings bigger.</para>

					</listitem>

				</itemizedlist>

			</section>

			<section xml:id="s2.ref.menu_adjust_grid">

				<title>Adjust Grid</title>

				<para>This allows selection of the grid representation on the screen 
          between the following:</para>

				<itemizedlist>

					<listitem>

						<para><literal>Lines 16</literal>: 
              full grid at 16 pixel spacing. </para>

					</listitem>

					<listitem>

						<para><literal>Lines 8</literal>:
              full grid at 8 pixel spacing.</para>

					</listitem>

					<listitem>

						<para><literal>Dots 16</literal>:
              dots at 16 pixel spacing (the default).</para>

					</listitem>

					<listitem>

						<para><literal>Dots 32</literal>:
              dots at 32 pixel spacing.</para>

					</listitem>

					<listitem>

						<para><literal>None</literal>:
              no grid of any form.</para>

					</listitem>

				</itemizedlist>

			</section>

			<section xml:id="s2.ref.menu_grid_snap">

				<title>Adjust Snap</title>

				<para>This allows selection of the spacing of grid snapping
          between the following:</para>

				<itemizedlist>

					<listitem>

						<para><literal>Snap 4</literal>:
              snap at 4 pixel spacing.</para>

					</listitem>

					<listitem>

						<para><literal>Snap 8</literal>:
              snap at 8 pixel spacing (the default).</para>

					</listitem>

					<listitem>

						<para><literal>Snap 16</literal>:
              snap at 16 pixel spacing.</para>

					</listitem>

					<listitem>

						<para><literal>Snap 32</literal>:
              snap at 32 pixel spacing.</para>

					</listitem>

				</itemizedlist>

				<note>

					<para>There is no option to turn off snap to grid 
            altogether</para>

				</note>

				<note>

					<para>If you wish to align existing elements to changed
            snap boundaries, 
            you can use the <literal>
            Arrange &gt; Align To Grid Snap</literal> menu (see 
            <xref
							xlink:href="s2.ref.menu_align" />).</para>

				</note>

			</section>

			<section>

				<title>Page Breaks</title>

				<para>This toggles whether page breaks are shown on the 
          diagram (as white dotted lines).</para>

				<warning>
					<para>This menu item does not work in ArgoUML V0.24.</para>
					<!-- This menu-item is incorrectly implemented in the 
            V0.22 version of ArgoUML, since it should be a tick box 
            toggle.  This is issue  604.
            Also, the lines are reported to be incorrect 
            regarding the chosen paper format and orientation.
            This is issue 1874. 
            And the lines are reported not visible at all in ArgoUML V0.24.
            This is mentioned in issue 604 and in issue 1874. 
            -->
				</warning>

			</section>

			<section>

				<title>XML Dump</title>

				<para>
        		This activates a window that shows the complete contents 
        		of the current project in XML format. 
        	</para>

				<para>Although very useful for debugging ArgoUML, 
        	this menu function is hardly interesting to the common user.</para>

			</section>

		</section>

		<section xml:id="s1.ref.create.diagram.menu">

			<title>The Create Menu</title>

			<para>This menu provides for creating the various types of UML 
        diagrams supported by ArgoUML.</para>

			<section xml:id="s2.ref.create.diagram.use_case_diagram">

				<title><guiicon>
						<inlinemediaobject>
							<imageobject>
								<imagedata align="center"
									fileref="images/icons/use_case_diagram.gif" format="GIF" />
							</imageobject>
						</inlinemediaobject>
					</guiicon> 
          New Use Case Diagram</title>

				<para>This menu entry creates a blank use case diagram, and 
          selects that diagram in the editing pane. If a package is 
          currently selected, then the use case diagram will be created 
          within that package. 
          This means that it will be shown within the package on 
          the explorer hierarchy (under Package-centric view) and 
          model elements created on the diagram will be created within the 
          namespace of the package. This does not only apply to a 
          package, but also to a class, interface, use case, etc.</para>

				<tip>

					<para>This does not prevent model elements from other 
            namespaces/packages appearing on the diagram. They can be 
            added from the explorer using <literal>Add to 
            Diagram</literal> from the button&nbsp;2 pop-up menu.</para>

				</tip>

			</section>

			<section xml:id="s2.ref.create.diagram.class_diagram">

				<title><guiicon>
						<inlinemediaobject>
							<imageobject>
								<imagedata align="center" fileref="images/icons/class_diagram.gif"
									format="GIF" />
							</imageobject>
						</inlinemediaobject>
					</guiicon> 
          New Class Diagram</title>

				<para>This menu entry creates a blank class diagram, and 
          selects that diagram in the editing pane. If a package is 
          currently selected, the class diagram will be created within 
          that package. 
          This means that it will be shown within the package on the 
          explorer hierarchy (under Package-centric view) and model elements 
          created on the diagram will be created within the namespace 
          of the package. This does not only apply to a package, but 
          also to a class, interface, use case, etc.</para>

				<tip>

					<para>This does not prevent model elements from other 
            namespaces/packages appearing on the diagram. They can be 
            added from the explorer using <literal>Add to 
            Diagram</literal> from the button&nbsp;2 pop-up menu.</para>

				</tip>

			</section>

			<section xml:id="s2.ref.create.diagram.sequence_diagram">

				<title><guiicon>
						<inlinemediaobject>
							<imageobject>
								<imagedata align="center"
									fileref="images/icons/sequence_diagram.gif" format="GIF" />
							</imageobject>
						</inlinemediaobject>
					</guiicon> 
          New Sequence Diagram</title>

				<para>This menu entry creates a blank sequence diagram, and 
          selects that diagram in the editing pane. 
          It also creates a <literal>
          Collaboration</literal> UML element, 
          which is a container for the elements shown on the new diagram.
          If a class is 
          currently selected, a sequence diagram and a collaboration
          will be created
          that represent the behaviour of that class. 
          This means that the created elements 
          will be shown within the class in the 
          explorer hierarchy (under Package-centric view) and model elements 
          created on the diagram will be created within the namespace 
          of the collaboration. A sequence diagram may 
          not only represent the behavior of a class, but 
          also of any other classifier, such as interface, use case, etc.
          It is also possible to make sequence diagrams for an operation.
          </para>

			</section>

			<section xml:id="s2.ref.create.diagram.collaboration_diagram">

				<title><guiicon>
						<inlinemediaobject>
							<imageobject>
								<imagedata align="center"
									fileref="images/icons/collaboration_diagram.gif" format="GIF" />
							</imageobject>
						</inlinemediaobject>
					</guiicon> 
          New Collaboration Diagram</title>

				<para>This menu entry creates a blank collaboration diagram, 
          and selects that diagram. 
          It also creates a <literal>
          Collaboration</literal> UML element, 
          which is a container for the elements shown on the new diagram.
          If a 
          package is selected when this menu item is activated, 
          the collaboration diagram will 
          be created within a collaboration within that package.
          This means that it 
          will be shown within the collaboration within the package on 
          the explorer hierarchy (under Package-centric view) and 
          model elements created on the diagram will be created within the 
          namespace of the collaboration within the package.</para>

				<tip>

					<para>This does not prevent model elements from other 
            namespaces/packages appearing on the diagram. They can 
            added from the explorer by 
            dragging or by 
            using <literal>Add to Diagram</literal> 
            from the button&nbsp;2 pop-up menu.</para>

				</tip>

			</section>

			<section xml:id="s2.ref.create.diagram.state_diagram">

				<title><guiicon>
						<inlinemediaobject>
							<imageobject>
								<imagedata align="center" fileref="images/icons/state_diagram.gif"
									format="GIF" />
							</imageobject>
						</inlinemediaobject>
					</guiicon> 
          New Statechart Diagram</title>

				<para>This menu entry creates a blank statechart diagram 
          associated with the currently selected class, and selects 
          that diagram in the editing pane. 
          It also creates a <literal>
          Statemachine</literal> UML element, 
          which is a container for the elements shown on the new diagram.
          </para>

				<para>Statechart diagrams are
            associated with a model element capable of dynamic behavior, such as
            a classifier or a behavioral feature, 
            which provides the context for the
            state machine it represents. 
            Suitable model elements are e.g. a class,
            an operation, and a use case. 
            If such element is not selected at the time the
           <literal>New Statechart Diagram</literal> 
            menu is activated,
            then an unattached  
            statemachine is created.
            To obtain a well-formed UML model, 
            you have to set the context of the statemachine 
            on its details pane.
            </para>

			</section>

			<section xml:id="s2.ref.create.diagram.activity_diagram">

				<title><guiicon>
						<inlinemediaobject>
							<imageobject>
								<imagedata align="center"
									fileref="images/icons/activity_diagram.gif" format="GIF" />
							</imageobject>
						</inlinemediaobject>
					</guiicon> 
          New Activity Diagram</title>

				<para>This menu entry creates a blank activity diagram 
          associated with the currently selected class, and selects 
          that diagram in the editing pane. 
          It also creates a <literal>
          ActivityGraph</literal> UML element, 
          which is a container for the elements shown on the new diagram.
          </para>

				<para>Activity diagrams are 
            associated with a model element capable of dynamic behavior, such as
            packages, classifiers (including use cases) 
            and behavioral features. Suitable model elements are e.g. a 
            class, a use case, an operation, and a package. 
            If such element is not selected at the time the
           <literal>New Activity Diagram</literal> 
            menu is activated,
            then an unattached  
            ActivityGraph is created.
            To obtain a well-formed UML model, 
            you have to set the context of the ActivityGraph 
            on its details pane.
          </para>

			</section>

			<section xml:id="s2.ref.create.diagram.deployment_diagram">

				<title><guiicon>
						<inlinemediaobject>
							<imageobject>
								<imagedata align="center"
									fileref="images/icons/deployment_diagram.gif" format="GIF" />
							</imageobject>
						</inlinemediaobject>
					</guiicon> 
          New Deployment Diagram</title>

				<para>This menu entry creates a blank deployment diagram, and 
          selects that diagram in the editing pane. 
          <!--If a package is 
          currently selected, the deployment diagram will be created 
          within that package, it will be shown within the package on 
          the explorer hierarchy (under Package-centric view) and 
          model elements created on the diagram will be created within the 
          namespace of the package.-->
				</para>

				<tip>

					<para>Model elements from other 
            namespaces/packages can be
            added from the explorer by
            dragging or by
            using <literal>Add to Diagram</literal> 
            from the button&nbsp;2 pop-up menu.</para>

				</tip>

			</section>

		</section>

		<section xml:id="s1.ref.menu_arrange">

			<title>The Arrange Menu</title>

			<para>This menu provides a range of functions to help in the 
        alignment of model elements on diagrams within the editing pane. In 
        general the menu function invoked is applied to any model element or 
        model elements currently selected in the editing pane.</para>

			<section xml:id="s2.ref.menu_align">

				<title>Align</title>

				<para>This sub-menu aligns the selected items. There are 
          seven alignment options provided.</para>

				<itemizedlist>

					<listitem>

						<para><guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/align_tops.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Align Tops</literal>. Aligns the selected 
              model elements by their top edges.</para>

					</listitem>

					<listitem>

						<para><guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/align_bottoms.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Align Bottoms</literal>. Aligns the selected 
              model elements by their bottom edges.</para>

					</listitem>

					<listitem>

						<para><guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/align_rights.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Align Rights</literal> (Shortcut Ctrl-R). Aligns 
              the selected model elements by their right edges.</para>

					</listitem>

					<listitem>

						<para><guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/align_lefts.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Align Lefts</literal> (Shortcut Ctrl-L). Aligns 
              the selected model elements by their left edges.</para>

					</listitem>

					<listitem>

						<para><guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/align_horizontal_centers.gif"
											format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Align Horizontal Centers</literal>. Aligns the 
              selected model elements so their horizontal centers are in a 
              vertical line.</para>

					</listitem>

					<listitem>

						<para><guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/align_vertical_centers.gif"
											format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Align Vertical Centers</literal>. Aligns the 
              selected model elements so their vertical centers are in a 
              horizontal line.</para>

					</listitem>

					<listitem>

						<para><guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/align_to_grid.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Align To Grid</literal>. Aligns the selected 
              model elements so their top and right edges are on the grid 
              snap boundary (see <xref
								xlink:href="s2.ref.menu_grid_snap" />
              ) edge.</para>

						<tip>

							<para>The alignment is to the current <emphasis>grid 
                snap</emphasis> setting, which may be smaller, larger 
                or the same as the displayed grid. Since items are 
                aligned to the grid snap boundary any way when you 
                place them, this menu entry has no effect unless you 
                have either changed the grid snap to a larger value or 
                used one of the other <literal>Arrange</literal> menu 
                entries to push items off their initial 
                positions.</para>

						</tip>

					</listitem>

				</itemizedlist>

			</section>

			<section>

				<title>Distribute</title>

				<para>This sub-menu distributes the selected items. There are 
          four distribution options provided.</para>

				<itemizedlist>

					<listitem>

						<para><guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/distribute_horizontal_spacing.gif"
											format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Distribute Horizontal Spacing</literal>. The 
              leftmost and rightmost selected model elements are not moved. 
              The others are adjusted horizontally until the horizontal 
              space (i.e. from the right edge of the left model element to 
              the left edge of the right model element) is the same for all 
              of the selected items</para>

					</listitem>

					<listitem>

						<para><guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/distribute_horizontal_centers.gif"
											format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Distribute Horizontal Centers</literal>. The 
              leftmost and rightmost selected model elements are not moved. 
              The others are adjusted horizontally until the distance 
              between the horizontal centers of all the selected items 
              is the same.</para>

					</listitem>

					<listitem>

						<para><guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/distribute_vertical_spacing.gif"
											format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Distribute Vertical Spacing</literal>. The top 
              and bottom selected model elements are not moved. The others 
              are adjusted vertically until the vertical space (i.e. 
              from the bottom edge of the top model element to the top edge 
              of the bottom model element) is the same for all of the 
              selected items</para>

					</listitem>

					<listitem>

						<para><guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/distribute_vertical_centers.gif"
											format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Distribute Vertical Centers</literal>. The top 
              and bottom selected model elements are not moved. The others 
              are adjusted vertically until the distance between the 
              vertical centers of all the selected items is the 
              same.</para>

					</listitem>

				</itemizedlist>

			</section>

			<section xml:id="s2.ref.menu_reorder">

				<title>Reorder</title>

				<para>This sub-menu adjusts the ordering of overlapping 
          items. There are four reorder options provided.</para>

				<itemizedlist>

					<listitem>

						<para><guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center" fileref="images/icons/forward.gif"
											format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Forward</literal>. The selected model elements are 
              moved one step forward in the ordering hierarchy with 
              respect to other model elements they overlap.</para>

					</listitem>

					<listitem>

						<para><guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/backward.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Backward</literal>. The selected model elements are 
              moved one step back in the ordering hierarchy with 
              respect to other model elements they overlap.</para>

					</listitem>

					<listitem>

						<para><guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/to_front.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>To Front</literal>. The selected model elements are 
              moved to the front of any other model elements they 
              overlap.</para>

					</listitem>

					<listitem>

						<para><guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center" fileref="images/icons/to_back.gif"
											format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>To Back</literal>. The selected model elements are 
              moved to the back of any other model elements they 
              overlap.</para>

					</listitem>

				</itemizedlist>

			</section>

			<section>

				<title>Size To Fit Contents</title>

				<para>This menu-item acts on all selected items on the 
          current diagram. It resets all sizes of all model elements to its 
          minimum size for 
          which all text fits inside.</para>

			</section>

			<!--sect2>

          <title>Toggle Auto Resizing</title>

          <para>This menu-item is a checkbox 
          that currently does not do anything.
          </para>

        </sect2-->

			<section>

				<title>Layout</title>

				<para>This menu-item provides an automatic diagram layout 
          function, i.e. when activating this menu-item, all items on 
          the current class diagram are rearranged according a certain 
          layout algorithm.</para>

				<para>This function currently only works for classdiagrams. 
          For all other types of diagrams, the menu-item is 
          downlighted.</para>

			</section>

		</section>

		<section>

			<title>The Generation Menu</title>

			<para>This menu provides support for code generation from UML 
        diagrams. The functionality is built around the structural 
        information of class diagrams.</para>

			<note>

				<para>Without any plugin modules installed, ArgoUML supports 
          only code generation of Java. ArgoUML V0.20 supports the 
          following languages by plugin: C#, C++, php4, php5.</para>

			</note>

			<warning>

				<para>Code generation is still very much a work in progress. 
          The current version of ArgoUML will generate a structural 
          template for your code, but is not able to handle behavioral 
          specifications to generate code for the dynamic behavior of 
          the model.</para>

			</warning>

			<section xml:id="s2.ref.menu_generate_selected_classes">

				<title>Generate Selected Classes â€¦</title>

				<para>This menu entry brings up a dialog box for the ArgoUML 
          code generator (see 
          <xref
						xlink:href="fig.ref.menu_generate_selected_classes" />
          ).</para>

				<figure float="1" xml:id="fig.ref.menu_generate_selected_classes">

					<title>The dialog for <literal>Generate Selected 
            Classesâ€¦</literal>.</title>

					<screenshot><mediaobject><imageobject>
            <imagedata align="center" fileref="images/reference/menu_generate_dialog.png" format="PNG" /></imageobject></mediaobject></screenshot>
				</figure>

				<para>Below a label <literal>Available Classes</literal> the 
          dialog box lists each of the selected classes by name with a 
          check box to the left, for each language installed. All the 
          checkboxes are initially unchecked. Checking any of these 
          boxes will cause code generation for that class. Checking 
          multiple languages for a class causes it to be generated in 
          all these languages.</para>

				<para>The buttons <literal>Select All</literal> and <literal>
          Select None</literal> may help when a lot of items have to be 
          selected or deselected.</para>

				<para>In the lower portion of the dialog box is an editable 
          combo box labeled <literal>Output Directory</literal> to 
          specify the directory in which code is generated. Within this 
          directory, a top level directory will be created with the 
          name of the model. Further sub-directories will be created to 
          reflect the package/namespace hierarchy of the model. A drop 
          down selector gives access to previously selected output 
          directories.</para>

				<para>Finally, at the bottom of the dialog box are two 
          buttons, labeled <literal>Generate</literal> and <literal>
          Cancel</literal>. Button&nbsp;1 click on the former will cause the 
          code to be generated, button&nbsp;1 click on the latter will 
          cancel code generation.</para>

			</section>

			<section>

				<title>Generate All Classesâ€¦</title>

				<indexterm>
					<primary>Generate All Classes</primary>
				</indexterm>
				<indexterm>
					<primary>Shortcut 
          key</primary>
					<secondary>F7</secondary>
				</indexterm>
				<para>Shortcut F7.</para>

				<para>This function behaves as <literal>
          Generate Selected Classesâ€¦</literal> (see 
          <xref
						xlink:href="s2.ref.menu_generate_selected_classes"
					 />) 
          would with all classes in the current diagram selected.</para>

			</section>

			<section>

				<title>Generate Code for Projectâ€¦ (To be Written)</title>

				<para />

			</section>

			<section>

				<title>Settings for Generate for Projectâ€¦ (To be 
          Written)</title>

				<para />

			</section>

		</section>

		<section xml:id="s1.ref.menu_critique">

			<title>The Critique Menu</title>

			<para>This menu controls one of ArgoUML&#039;s unique 
        features&#8212;the use of critics to guide the designer. The theory 
        behind this is well described in Jason Robbins&#039; PhD 
        dissertation 
        <link
					xlink:href="http://argouml.tigris.org/docs/robbins_dissertation/"
					>
        http://argouml.tigris.org/docs/robbins_dissertation/</link>.</para>

			<note>

				<para>A word about terminology: The 
          <emphasis>critics</emphasis> are background processes, which 
          evaluate the current model according to various 
          <quote>good</quote> design criteria. There is one critic for 
          every design criterion.</para>

				<para>The output of a critic is a 
          <emphasis>critique</emphasis>&#8212;a statement about some aspect 
          of the model that does not appear to follow good design 
          practice.</para>

				<para>Finally a critique will generally suggest how the bad 
          design issue it has identified can be rectified, by raising a 
          <emphasis>to-do item</emphasis>.</para>

			</note>

			<note>

				<para>The critics run as asynchronous processes in parallel 
          with the main ArgoUML tool. Changes typically take a second 
          or two to propagate as the critics wake up.</para>

			</note>

			<section>

				<title>Toggle Auto-Critique</title>

				<para>This is a check box, controlling whether the critics 
          are running. By default it is checked. If unchecked, then all 
          critics are disabled, and any to-do items generated by 
          critics (the only others being those the designer has added 
          by hand) are hidden in the to-do pane.</para>

			</section>

			<section xml:id="s2.ref.menu_design_issues">

				<title>Design Issuesâ€¦</title>

				<para>This menu entry brings up a dialog box controlling how 
          critics associated with a particular design area are to be 
          handled (see <xref
						xlink:href="fig.ref.menu_design_issues" />
          ).</para>

				<figure float="1" xml:id="fig.ref.menu_design_issues">

					<title>The dialog for <literal>
            Design Issuesâ€¦</literal>.</title>

					<screenshot><mediaobject><imageobject>
            <imagedata align="center" fileref="images/reference/menu_design_issues.png" format="PNG" /></imageobject></mediaobject></screenshot>
				</figure>

				<para>ArgoUML categorizes critics according the the design 
          issue they address. There are 16 such categories. The critics 
          in each category are discussed in detail in the chapter on 
          critics (<xref
						xlink:href="ch.ref.critics" />).</para>

				<para>The sliders may be set for each category to control the 
          critics that trigger for that category. Setting a slider to 
          <literal>Off</literal> will disable all critics in that 
          category, and remove all associated to-do items from the 
          to-do pane.</para>

				<para>Setting a slider to a higher priority value will enable 
          all critics at or above that priority level within the design 
          issue category (<literal>Off</literal> being the lowest 
          priority).</para>

				<note>

					<para>The sliders are set by default to <literal>
            High</literal> for all design categories.</para>

				</note>

			</section>

			<section>

				<title>Design Goalsâ€¦</title>

				<para>This menu entry brings up a dialog box controlling how 
          design goals are to be handled (see 
          <xref
						xlink:href="fig.ref.menu_design_goals" />).</para>

				<figure float="1" xml:id="fig.ref.menu_design_goals">

					<title>The dialog for <literal>
            Design Goalsâ€¦</literal>.</title>

					<screenshot><mediaobject><imageobject>
            <imagedata align="center" fileref="images/reference/menu_design_goals.png" format="PNG" /></imageobject></mediaobject></screenshot>
				</figure>

				<para>ArgoUML has the concept that the designer will have a 
          number of design goals to be achieved (for example good 
          structural representation, detailed behavioral representation 
          etc). Critics are associated with one or more goals.</para>

				<para>This dialog allows the user to specify the priority of 
          each design goal.</para>

				<para>The sliders may be set for each design goal to control 
          the critics that trigger for that goal. Setting a slider to 
          zero will disable all critics in that goal, and remove all 
          associated to-do items from the to-do pane.</para>

				<para>Setting a slider to a higher value will enable all 
          critics at or above that priority level within the design 
          issue category (1 being the highest priority and 5 the 
          lowest).</para>

				<tip>

					<para>It may be useful to think of this function as very 
            similar to <literal>Design Issuesâ€¦</literal> (see 
            <xref
							xlink:href="s2.ref.menu_design_issues"
						 />), but with 
            grouping of critics according to the outcomes of OOA&amp;D 
            rather than grouping according to the structure of 
            UML.</para>

				</tip>

				<warning>

					<para>The V0.20 version of ArgoUML provides a single design 
            goal, <literal>Unspecified</literal>, with its slider set 
            by default to priority 1. However it contains no critics 
            and so has no effect.</para>

				</warning>

			</section>

			<section xml:id="s2.ref.menu_browse_critics">

				<title>Browse Criticsâ€¦</title>

				<para>This menu entry brings up a dialog box controlling the 
          individual critics (see 
          <xref
						xlink:href="fig.ref.menu_browse_critics" />).</para>

				<figure float="1" xml:id="fig.ref.menu_browse_critics">

					<title>The dialog for <literal>
            Browse Criticsâ€¦</literal>.</title>

					<screenshot><mediaobject><imageobject>
            <imagedata align="center" fileref="images/reference/menu_browse_critics.png" format="PNG" /></imageobject></mediaobject></screenshot>
				</figure>

				<para>This dialog controls the behavior of individual 
          critics. To the left is a list of all the critics, to enable 
          them to be switched on or off individually. For each critic 
          there are three columns, labeled <literal>Active</literal>, 
          <literal>Headline</literal> and <literal>Snoozed</literal>. 
          The first of these is a check box, which may be toggled with 
          button&nbsp;1 click. The second is the headline name of the 
          critic, the third indicates if the critic has been snoozed 
          from the to-do pane (see <xref
						xlink:href="ch.ref.todopane"
						 />. A 
          critic is only really active if the box in the first column 
          is checked <emphasis>and</emphasis> the critic has not been 
          snoozed.</para>

				<para>Any critic for which the box in the first column is 
          unchecked is inactive and will not trigger. In addition any 
          to-do items associated with that critic will be removed from 
          the to-do pane.</para>

				<para>The V0.20 version of ArgoUML has a total of 90 critics, 
          a few of which are incompletely implemented. They are 
          described in detail by design issue category in the chapter 
          on critics (see <xref
						xlink:href="ch.ref.critics" />).</para>

				<para>To the right of the list are a series of fields, titled 
          <literal>Critic Details</literal>, giving detailed control 
          over individual critics. Selecting a critic in the list on 
          the left will populate the fields for that critic.</para>

				<para>The first field on the right is titled <literal>Critic 
          Class:</literal> and then the full name of the class in 
          ArgoUML that implements the critic. This name can be used as 
          unique identifier of the critique, e.g. in conversations 
          about the critic.</para>

				<para>The first field below this title is a text box labeled 
          <literal>Headline:</literal> giving the complete headline of 
          the critic (which may be truncated in the list on the 
          left).</para>

				<note>

					<para>In the headline you may see the text <literal>
            &lt;ocl&gt;self&lt;/ocl&gt;</literal>, which will be 
            replaced by the name of the model element in question when the 
            critic is triggered.</para>

				</note>

				<para>The next field is a drop-down selector, labeled 
          <literal>Priority:</literal>. The three options available are 
          <literal>High</literal>, <literal>Medium</literal> and 
          <literal>Low</literal> and specify the priority category of 
          any to-do item generated by this critic. This does not alter 
          the priority of the already existing todo items, only the 
          newly generated ones. Changing the priority of a critic is 
          not saved persistently.</para>

				<para>The next field is labeled <literal>MoreInfo:</literal> 
          and contains a URL pointing to further information with a 
          button to the right labeled <literal>Go</literal> to navigate 
          to that URL.</para>

				<warning>

					<para>In the V0.20 release of ArgoUML there is no further 
            information available, and the <literal>Go</literal> button 
            is always grayed out and disabled.</para>

				</warning>

				<para>The next field is labeled <literal>
          Description:</literal> and is a text area with a detailed 
          explanation of what this critic means. If the text is too 
          large for the area a scroll bar is provided to the 
          right.</para>

				<note>

					<para>In this text area you may see the text <literal>
            &lt;ocl&gt;self&lt;/ocl&gt;</literal>, which will be 
            replaced by the name of the model element in question when the 
            critic is triggered.</para>

				</note>

				<para>The last field is a drop-down selector labeled <literal>
          Use Clarifier</literal>, with three options, <literal>
          Always</literal>, <literal>If Only One</literal> and <literal>
          Never</literal>.</para>

				<para>Clarifiers are the icons and wavy red underlines drawn 
          on the actual diagrams to indicate the artefact to which the 
          critic refers. The original intention was to make the mapping 
          from critics to clarifiers somewhat customizable.</para>

				<para>For example one user might make a <literal>Missing 
          Name</literal> critic show a red underline, another user 
          might turn off the clarifier, or have it draw a wavy green 
          underline or a blue questionmark. Critics with their 
          clarifier&#039;s disabled would still produce feedback that 
          is listed in the to-do pane.</para>

				<caution>

					<para>In the V0.20 release of ArgoUML this selector has no 
            function whatsoever. It is for future development.</para>

				</caution>

				<para>Underneath the fields are three buttons in a horizontal 
          row.</para>

				<itemizedlist>

					<listitem>

						<para><literal>Wake</literal>. It is possible to snooze a 
              critic from the to-do pane (see 
              <xref
								xlink:href="ch.ref.todopane"
							 />), which makes the 
              critic inactive for a period. If the critic has been 
              snoozed, this button is enabled and will wake the critic 
              back up again. Otherwise it is grayed out.</para>

						<tip>

							<para>You can tell a snoozed critic, because in the 
                list on the left it will be indicated in the third 
                column.</para>

						</tip>

					</listitem>

					<listitem>

						<para><literal>Configure</literal>. This button is for 
              configuring the critic.</para>

						<caution>

							<para>In the V0.20 version of ArgoUML this function is 
                not implemented, and this button is always grayed out. 
                It is for future development.</para>

						</caution>

					</listitem>

					<listitem>

						<para><literal>Edit Network</literal>. Right now critics 
              are implemented in java code. That means end-users cannot 
              add new critics.</para>

						<para>The idea of a critic network is that they would be 
              a state machine like diagram with several steps. Each 
              step would express a condition which, collectively with 
              the other steps associated with that critic, articulates 
              the <quote>rule</quote> that the critic is providing. If 
              the rule fires, then remaining steps would define the 
              steps of the wizard to help the user fix the 
              problem.</para>

						<para>The ideas behind this are discussed in Chapter 4 of 
              Jason Robbins PhD disseration (
              <link
								xlink:href="http://argouml.tigris.org/docs/robbins_dissertation/diss4.html"
								>http://argouml.tigris.org/docs/robbins_dissertation/diss4.html</link>. 
              In particular look at Figure 1-6 in this chapter and the 
              related discussion.</para>

						<para>A suggested implementation is that the conditions 
              could be written in OCL against the UML meta-model. A 
              library of predefined conditions and steps would allow 
              end-users to build new critics by combining those in 
              novel ways.</para>

						<caution>

							<para>In the V0.20 version of ArgoUML this function is 
                not implemented, and this button is always grayed out. 
                It is for future development.</para>

						</caution>

					</listitem>

				</itemizedlist>

				<para>Finally the bottom right of the dialog contains a 
          button labeled <literal>OK</literal>. Button&nbsp;1 click here 
          dismisses the dialog.</para>

			</section>

		</section>

		<section>

			<title>The Tools Menu</title>

			<para>This menu provides a generic menu attachment point for 
        any plug-ins provided with ArgoUML. The standard system has no 
        plug-in, and this menu entry 
        is empty by 
        default.</para>

		</section>

		<section>

			<title>The Help Menu</title>

			<para>This menu provides help on the use of ArgoUML. It has two 
        entries.</para>

			<section>

				<title>System Information</title>

				<para>This menu entry brings up the system information 
          dialog, see <xref
						xlink:href="fig.ref.menu_help_system_info" />
				</para>

				<figure float="1" xml:id="fig.ref.menu_help_system_info">

					<title>The dialog for <literal>
            System Information</literal>.</title>

					<screenshot><mediaobject><imageobject>
            <imagedata align="center" fileref="images/reference/menu_help_system_info.png" format="PNG" /></imageobject></mediaobject></screenshot>
				</figure>

				<para>Use this menu to describe the system that runs ArgoUML 
          to the system manager or developer. Pressing the button 
          <literal>Run Garbage Collector</literal> not only runs the 
          Java gargage collector, but also refreshes the information 
          shown. To facilitate copy and paste into (e.g.) an email, the 
          button <literal>Copy Information to System 
          Clipboard</literal> is foreseen. The <literal>
          Cancel</literal> button dismisses the dialog box.</para>

			</section>

			<section xml:id="s2.ref.menu_help_about">

				<title>About ArgoUML</title>

				<para>This menu entry brings up the help window for ArgoUML 
          (see <xref
						xlink:href="fig.ref.menu_help" />).</para>

				<figure float="1" xml:id="fig.ref.menu_help">

					<title>The help window for ArgoUML</title>

					<screenshot><mediaobject><imageobject>
            <imagedata align="center" fileref="images/reference/menu_help.png" format="PNG" /></imageobject></mediaobject></screenshot>
				</figure>

				<para>The window has six tabs, which are selected by button&nbsp;1 
          click. By default the first tab (<literal>Splash</literal>) 
          is shown.</para>

				<itemizedlist>

					<listitem>

						<para><literal>Splash</literal>. This displays the 
              picture shown when ArgoUML starts up, and the current 
              version number.</para>

					</listitem>

					<listitem>

						<para><literal>Version</literal>. This provides version 
              information on the various packages that make up ArgoUML, 
              and some operating system and environment 
              information.</para>

					</listitem>

					<listitem>

						<para><literal>Credits</literal>. This details all those 
              who have created ArgoUML, including contact details for 
              the various module owners.</para>

					</listitem>

					<listitem>

						<para><literal>Contact Info</literal>. This gives the 
              major contact points for the ArgoUML project&#8212;the web 
              site, and the developers mailing list.</para>

					</listitem>

					<listitem>

						<para><literal>Report bugs</literal>. This gives 
              information about how to deal with bugs in ArgoUML. It is 
              important that all bugs are reported, and all cooperation 
              is appreciated.</para>

					</listitem>

					<listitem>

						<para><literal>Legal</literal>. A statement of the 
              FreeBSD license which covers all the ArgoUML 
              software.</para>

						<caution>

							<para>The various documentation of the project are not 
                all covered by FreeBSD (which is really meant for 
                software). In particular this manual is covered by the 
                OpenPub license (see <xref
									xlink:href="app.legal" />
                ).</para>

						</caution>

					</listitem>

				</itemizedlist>

			</section>

		</section>

	</chapter>

	<chapter xml:id="ch.ref.navpane">

		<title>The Explorer</title>

		<indexterm>
			<primary>Explorer</primary>
		</indexterm>
		<indexterm>
			<primary>Navigation</primary>
			<secondary>Tree</secondary>
		</indexterm>
		<indexterm>
			<primary>Navigation</primary>
			<secondary>Pane</secondary>
		</indexterm>
		<indexterm>
			<primary>Navigator</primary>
			<secondary>Tree</secondary>
		</indexterm>
		<indexterm>
			<primary>Navigator</primary>
			<secondary>Pane</secondary>
		</indexterm>
		<para>The Explorer was previously called Navigation Pane/Tree or 
      sometimes Navigator Pane/Tree.</para>

		<section>

			<title>Introduction</title>

			<para><xref xlink:href="fig.ref.navigation_pane"
				 /> shows the 
        ArgoUML window, with the explorer highlighted.</para>

			<figure float="1" xml:id="fig.ref.navigation_pane">
				<!-- This diagram shows the navigation overview. 
          It is a complete ArgoUML
          window, but with all except the explorer grayed out. This was
          done using GIMP with selected areas using Filters->Color->Map->
          Color Range Mapping from black to black & white to HSV 0,0,75.-->
				<title>Overview of the explorer</title>

				<screenshot><mediaobject><imageobject>
          <imagedata align="center" fileref="images/reference/navigator_pane.png" format="PNG" /></imageobject></mediaobject></screenshot>
			</figure>

			<para>The explorer allows the user to view the structure of the 
        model from a number of predefined perspectives. It also allows 
        the user to define their own perspetives for custom exploring 
        of the model.</para>

			<para>An important feature, related to the cognitive psychology 
        ideas behind ArgoUML is that not all model elements are necessarily 
        shown in all perspectives. Rather, the perspectives are used to 
        implement hiding of uninteresting parts of the model.</para>

		</section>

		<section xml:id="s1.ref.nav_mouse">

			<title>Mouse Behavior in the Explorer</title>

			<indexterm>
				<primary>Explorer</primary>
				<secondary>Mouse 
        Behavior</secondary>
			</indexterm>
			<indexterm>
				<primary>Mouse Behavior</primary>
				<secondary>in the 
        Explorer</secondary>
			</indexterm>
			<para>Behavior of the mouse in general, and the naming of the 
        buttons is covered in the chapter on the overall user interface 
        (see <xref
					xlink:href="ch.ref.ui" />).</para>

			<section>

				<title>Button&nbsp;1 Click</title>

				<para>Within the hierarchical display, elements which have 
          sub-hierarchies are indicated by <guiicon>
						<inlinemediaobject>
							<imageobject>
								<imagedata align="center"
									fileref="images/icons/hierarchy_closed.gif" format="GIF" />
							</imageobject>
						</inlinemediaobject>
					</guiicon> 
          when the hierarchy is hidden and <guiicon>
						<inlinemediaobject>
							<imageobject>
								<imagedata align="center" fileref="images/icons/hierarchy_open.gif"
									format="GIF" />
							</imageobject>
						</inlinemediaobject>
					</guiicon> 
          when the hierarchy is open.</para>

				<para>Button&nbsp;1 click over the name of any diagram model element 
          will cause the diagram to be selected and displayed in the 
          editing pane. Its details will also be displayed in the 
          details pane.</para>

				<para>Button&nbsp;1 click over the name of any model element other than 
          a diagram in the main area of the explorer will cause it to 
          be selected, and its details shown in the details pane. If 
          the model element is part of a diagram currently displayed in the 
          editing pane, it will be highlighted there.</para>

				<note>

					<para>If the model element is part of a diagram other than that 
            currently displayed in the Editing Pane, there will be 
            <emphasis>no</emphasis> change of diagram in the Editing 
            Pane.</para>

				</note>

				<para>Where button&nbsp;2 click has been used to bring up a 
          context sensitive pop-up menu (see below), button&nbsp;1 click is 
          used to select the menu entry required. button&nbsp;1 click 
          outside the menu area will remove it.</para>

			</section>

			<section>

				<title>Button&nbsp;1 Double Click</title>

				<para>This has the effect of a button&nbsp;1 single click, and if 
          the tree item was not a leaf, it will toggle the hierarchy 
          open or close.</para>

			</section>

			<section>

				<title>Button&nbsp;1 Motion</title>

				<para>Button&nbsp;1 motion means that you pick up one or more 
          modelelements, and drag them to a new location. 
          Dropping the modelelement somewhere 
          causes ArgoUML to execute some function 
          that depends on where you drop the modelelements. 
          </para>

				<section>
					<title>From Explorer to Explorer</title>
					<para>
          Releasing the mouse button above a namespace, 
          makes the modelelement owned by the namespace.
          In the Package-centric explorer perspective, this
          means a straigh-forward drag-and-drop function.
		  </para>

					<para>Use this drap and drop feature to easily move 
		  e.g. classes from one package into another.
		  </para>
				</section>

				<section>
					<title>From Explorer to Diagram</title>
					<para>Dropping a modelelement on the diagram 
          is the equivalent of the "Add to Diagram" function.
          Hence, if the diagram did not yet show this modelelement, 
          it is added.
		  </para>

					<para>Use this drap and drop feature e.g. to easily create 
		  a diagram from imported XMI files. 
		  This because XMI files contain all the modelelements, 
		  but not any diagram information.
		  </para>
				</section>

			</section>

			<section>

				<title>Button&nbsp;2 Actions</title>

				<para>When used in the the explorer, this will display a 
          selection dependent pop-up menu. Menu entries are highlighted 
          (but not selected) and sub-menus exposed by subsequent mouse 
          motion (without any buttons). Menu entry selection is with 
          button&nbsp;1 or button&nbsp;2.</para>

			</section>

			<section>

				<title>Button&nbsp;2 Double Click</title>

				<para>This has no effect other than that of button&nbsp;2 single 
          click.</para>

			</section>

		</section>

		<section xml:id="s1.ref.explorer_keyboard">

			<title>Keyboard Behavior in the Explorer</title>

			<para>All keys active in a tree widget have their normal 
        behaviour.</para>

			<para>When a diagram is selected, pressing Ctrl-C will copy the 
        diagram in GIF format to the system clipboard.</para>

		</section>

		<section>

			<title>Perspective Selection</title>

			<para>The model elements in the ArgoUML model may be configured for 
        displaying in the tree by a number of perspectives. To this 
        end, a drop-down at the top allows selection of the explorer 
        perspective.</para>

			<para>Below that, there is a drop-down to select the ordering 
        of the atifacts within the hierarchy. The two possibilities are 
        &quot;Order by Type, Name&quot; and &quot;Order by Name&quot;. 
        The former groups all items per type, and sorts them per group 
        alphabetically on the name. The lattter simply sorts on name 
        only.</para>

			<para>The following explorer perspectives may be selected in 
        the drop-down at the top:</para>

			<itemizedlist>

				<listitem>

					<para><literal>Package-centric</literal> (the default). The 
            exploring hierarchy is organized by package hierarchy. The 
            top level shows the model. Under this are all the top level 
            packages in the model and all the model elements that are 
            directly in the namespace of the model.</para>

					<para>Beneath each package are all the model elements that sit 
            within the namespace of that package, including any further 
            sub-packages (which in turn have their own 
            sub-hierarchies).</para>

				</listitem>

				<listitem>

					<para><literal>Class-centric</literal>. 
            Shows classes in their package hierarchy as well as  
            datatypes and use case diagram elements. Similar to the  
            Package-centric view but it doesn't show connecting or  
            associating elements.  
            <!-- Got this from 
            http://www.devshed.com/c/a/Practices/Design-with-ArgoUML/3/ -->
					</para>

				</listitem>

				<listitem>

					<para><literal>Diagram-centric</literal>. In this view the 
            top level comprises all the diagrams in the model. Beneath 
            each diagram is a flat listing of all the model elements on the 
            diagram. Model elements that have sub-model elements that do not 
            appear on the diagram have their own hierarchy (for example 
            attributes and operations of classes).</para>

				</listitem>

				<listitem>

					<para><literal>Inheritance-centric</literal>. In this view 
            the top level shows the model. Beneath this are all 
            model elements that have no generalization in the model. Those 
            model elements that have specializations have a sub-hierarchy 
            showing the specializations.</para>

				</listitem>

				<listitem>

					<para><literal>Class Associations</literal>. In this view 
            the top level shows the model. Beneath this are all 
            diagrams and all classes. All classes that have 
            associations have a hierarchy tracking through the 
            associated classes.</para>

				</listitem>

				<listitem>

					<para><literal>Residence-centric</literal>. In this view 
            the model is shown at the top-level, with below it only 
            Nodes, and below these only components that reside on the 
            nodes, and below these components all elements that reside 
            on the components.</para>

				</listitem>

				<listitem>

					<para><literal>State-centric</literal>. In this view the 
            top level shows all the state machines and all activity 
            graphics associated with classes.</para>

					<para>Beneath each state machine is a hierarchy showing the 
            statechart diagram and all of the states. Beneath each state is 
            a list of the transitions in and out of the state.</para>

					<para>Beneath each activity graph is a hierarchy showing 
            the activity diagram and all of the action states. Beneath 
            each action state is a list of the transitions in and out 
            of the action state.</para>

				</listitem>

				<listitem>

					<para><literal>Transitions-centric</literal>. This is very 
            similar to <literal>State-centric</literal> view, but under 
            each state machine is listed the diagrams and all 
            transitions on the diagram, with states being shown as 
            sub-hierarchies under their connected transitions.</para>

					<para>Similarly under each activity graph is listed the 
            diagrams and all transitions on the diagram, with action 
            states being shown as sub-hierarchies under their connected 
            transitions.</para>

				</listitem>

				<listitem>

					<para><literal>Composite-centric</literal>. In this 
            view, all modelelements are shown
            according their composition in the UML metamodel.</para>

					<para>This perspective shows far more modelelements 
            then all others - it does not hide anything. 
            Hence, this view is not so user-friendly, but very suited
            for the UML specialist.</para>

				</listitem>

			</itemizedlist>

		</section>

		<section xml:id="s1.ref.configure_perspectives">

			<title>Configuring Perspectives</title>

			<para>The explorer is designed to be user configurable, to 
        allow the designer to view in his or her preferred way.</para>

			<section>

				<title>The Configure Perspectives dialog</title>

				<para>button&nbsp;1 click on the &quot;Configure 
          Perspectives&quot; icon (
          <guiicon>
						<inlinemediaobject>
							<imageobject>
								<imagedata align="center" fileref="images/icons/nav_config.gif"
									format="GIF" />
							</imageobject>
						</inlinemediaobject>
					</guiicon>) 
          at the top left of the explorer brings up the explorer 
          perspectives dialog (see 
          <xref
						xlink:href="fig.ref.navigator_pane_perspectives" />).</para>

				<figure float="1" xml:id="fig.ref.navigator_pane_perspectives">

					<title>The Configure Perspectives dialog box</title>

					<screenshot><mediaobject><imageobject>
            <imagedata align="center" fileref="images/reference/navigator_pane_perspectives.png" format="PNG" /></imageobject></mediaobject></screenshot>
				</figure>

				<para>The top half of the dialog contains a list of all the 
          currently defined perspectives and to the right a series of 
          buttons stacked vertically. Button&nbsp;1 click can be used to 
          select a perspective. You can select only one perspective at 
          a time.</para>

				<para>Selecting a perspective reveals a text field above the 
          list, where the name of the perspective can be edited.</para>

				<para>The lower half of the dialog contains two list areas. 
          The one on the left, labeled <literal>
          Rules Library</literal>, contains the list of available rules 
          that may be used to create the perspective. The one on the 
          right, labeled <literal>Selected Rules</literal> contains the 
          actual rules chosen for the perspective that has been 
          selected in the list of perspectives at the top. In both 
          lists, you can select only one rule at a time.</para>

				<para>Separating the two areas in the lower half of the 
          dialog are buttons labeled <literal>&gt;&gt;</literal> and 
          <literal>&lt;&lt;</literal>. The first of these transfers the 
          rule selected in the library on the left to the list of rules 
          on the right&#8212;i.e. it adds a rule to the perspective. The 
          second one transfers the rule selected on the right to the 
          library list on the left&#8212;i.e. it removes a rule from the 
          perspective.</para>

				<para>If you hover the mouse over the horizontal line that 
          separates the two halves of the dialog, then you see it 
          change shape, to indicate that you can grab this line and 
          drag it up or down.</para>

				<para>All three titles of the lists show the number of 
          items in the list. ArgoUML V0.24 has 9 default perspectives, 
          and 72 rules in the library to build perspectives from.</para>

				<para>The buttons at the top right are explained as 
          follows:</para>

				<itemizedlist>

					<listitem>

						<para><literal>New</literal>. This creates a new 
              perspective from scratch with no rules selected, with an 
              automatically generated name.</para>

					</listitem>

					<listitem>

						<para><literal>Remove</literal>. This removes the 
              selected perspective.</para>

					</listitem>

					<listitem>

						<para><literal>Duplicate</literal>. This creates a copy 
              the selected perspective so it can be used as the basis 
              of a new perspective. The new one is named &quot;Copy 
              of&quot; followed by the original name.</para>

					</listitem>

					<listitem>

						<para><literal>Move Up</literal>. This moves the selected 
              perspective one place up in the list. This button is 
              downlighted for the topmost perspective.</para>

					</listitem>

					<listitem>

						<para><literal>Move Down</literal>. This moves the 
              selected perspective one place down in the list. This 
              button is downlighted for the last perspective.</para>

					</listitem>

					<listitem>

						<para><literal>Restore Defaults</literal>. This restores 
              all perspectives and their selected rules to the build-in 
              defaults of ArgoUML.</para>

					</listitem>

				</itemizedlist>

				<para>At the very bottom right is a button labeled <literal>
          OK</literal> to be used when all changes are complete. 
          button&nbsp;1 click on this button will close the dialog window. 
          The changes are saved when you exit ArgoUML in 
          the <literal>argo.user.properties</literal> file.</para>

				<para>Then there is the <literal>Cancel</literal> button, 
          which cancels all changes made in the dialog. Pressing the 
          dialog close icon (usually at the top right corner) has the 
          same effect as pressing the cancel button.</para>

			</section>

			<!--sect2>

          <title>The Explorer Panes</title>

          <para>The explorer was conceived as being able to offer 
          multiple views simultaneously, with up to three panels of 
          hierarchy. A dialog offers control of these panels, with an 
          option to show or not show each panel, and the option of the 
          second and third panels to be rooted at the selection on the 
          previous panel, or to show the previously used 
          hierarchy.</para>

          <caution>

            <para>This functionality is not yet implemented in ArgoUML. 
            The dialog is never shown.</para>

          </caution>

          <para>When using the explorer, it is worth bearing in mind 
          that this is a useful visualization of the model, it is not 
          <emphasis>solely</emphasis> for navigation and selection. It 
          is also useful for users to easily (meaning a few mouse 
          clicks without having to arrange a diagram) visualize the 
          model structured according to some perspective. For example, 
          show me the state nesting, or show me the class inheritance 
          tree, or show me the package nesting, or show me the list of 
          actors.</para>

          <para>The idea with the second and third explorer tree panes, 
          is that sometimes it is easier to explore the tree to a 
          certain level in one tree and then continue expanding in a 
          second tree. Since each tree will not be so deep, it will 
          look more like a list.</para>

          <para>For example, look at the way javadocs are viewed with 
          frames: the packages are selected from one list, and 
          interfaces, classes, and exceptions in that package are shown 
          in a second pane. In the case of javadocs, the second pane 
          has a tree with three roots that are always expanded, but it 
          is visually presented as three lists with three 
          headers.</para>

          <para>The other suggested use of a second or third nav panel 
          is to list recently visited model elements. This is simliar 
          to the recently visited files listed on the <literal>
          File</literal> menu of most applications, but for model 
          elements rather than files.</para>

          <para>The motivtion is the fact that designers frequently 
          <quote>interrupt</quote> themselves: they are thinking of 
          working on one part of the design, and then they make a 
          decision that needs a change in some other part, and then 
          that has an implication on some other part, andâ€¦ andâ€¦ andâ€¦ 
          the designer forgets what it was they were originally trying 
          to accomplish. They need to <quote>pop their mental 
          stack</quote> to come back to finish what the started. If 
          they fail to do that, they leave half-finished fragments all 
          over the design which always seem to come out as soon as it 
          is presented to someone else.</para>

          <para>A recently visited list should be LIFO (stack) ordered, 
          or FIFO (queue) ordered. The goal would be to help designers 
          come back to finish what they were doing, or simply to help 
          them switch between two or three related parts of the design. 
          The <literal>Navigate Back</literal> and <literal>Navigate 
          Forward</literal> buttons in the toolbar serve the same basic 
          purpose and use a lot less screen space.</para>

          <para>Tear-off tabs would also help with alternating between 
          views, but sometimes users don&#039;t want to work with so 
          many separate windows.</para>

          <para>This is the theory that motivates the idea of multiple 
          nav panes. For more information see Jason Robbins&#039; PhD 
          dissertation 
          <link xlink:href="http://argouml.tigris.org/docs/robbins_dissertation/">
          http://argouml.tigris.org/docs/robbins_dissertation/</link>. 
          One practical usability concern is available screen space and 
          another is visual complexity. For this reason the multiple 
          panes have yet to be implemented in ArgoUML while more 
          pressing issues are addressed.</para>

        </sect2-->

		</section>

		<section>

			<title>Context Sensitive Menu</title>

			<para>Button&nbsp;2 Click over any selected model element in the main 
        area of the explorer will cause a pop-up menu to appear.</para>

			<section>
				<title>Create Diagram</title>

				<para>This entry on the pop-up menu opens a choice
            of submenus, one for each diagram type. </para>
				<para>The namespace of the new diagram 
            will be based on the selected modelelement.</para>
			</section>

			<section>
				<title>Copy Diagram to Clipboard as Image</title>

				<para>This entry on the pop-up menu creates a graphical file,
          in the default graphical format, and puts it on the clipboard of your PC. 
          The graphics can inmediately be pasted into 
          e.g. a requirements document in OpenOffice.Org.</para>

				<para>The graphics format and its resolution are determined by 
          ArgoUML's default setting: Select in the menu 
          <literal>Edit</literal>, then <literal>Settingsâ€¦</literal>,
          then the tab <literal>Environment</literal>.
          The PNG and GIF formats are advised, 
          and the resolution <literal>Standard</literal>.
          </para>

				<tip>
					<para>Some applications (such as Doors from Telelogic) 
          require the background color 
          of the generated graphics to be adapted (else the image is empty). 
          This can be done with a tool like IrfanView; 
          it is as easy as clicking its paste button, 
          and then its copy button.
          </para>
				</tip>
			</section>

			<section>

				<title>Add to Diagram</title>

				<para>This entry on the pop-up menu appears for any model element 
          that could be added to the diagram in the editing pane.</para>

				<para>The item can be placed in a diagram by moving the 
          cursor to the editing pane or a spawned editing pane window 
          (where it will appear as a cross) and clicking 
          button&nbsp;1.</para>

				<caution>

					<para>This menu entry only appears as not grayed out, if 
            the diagram in the editor pane allows to contain the 
            model element, and the model element is not present yet in the 
            diagram. ArgoUML will not let you place more than one copy 
            of any particular model element on a diagram.</para>

				</caution>

			</section>

			<section>

				<title><guiicon>
						<inlinemediaobject>
							<imageobject>
								<imagedata align="center"
									fileref="images/icons/delete_from_model.gif" format="GIF" />
							</imageobject>
						</inlinemediaobject>
					</guiicon> 
          Delete From Model</title>

				<para>This entry on the pop-up menu appears for any model element 
          that could be deleted from the model.</para>

				<warning>

					<para>This deletes the model element from the model completely, 
            not just from the diagram. To remove the model element just from 
            the diagram, use the edit menu (see 
            <xref
							xlink:href="s2.menu_edit_remove_from_diagram" />).</para>

				</warning>

				<caution>

					<para>You can delete a diagram from the model. Depending on 
            the type of diagram, that might delete all model elements shown 
            on the diagram. To illustrate the differences, consider the 
            following examples:</para>

					<itemizedlist>

						<listitem>

							<para>Deleting a class diagram does not delete any 
                model element drawn on it. All model elements that were shown on 
                the diagram remain present in the model. This because a 
                class diagram does not &quot;map&quot; on any model element 
                according the UML standard V1.4.</para>

						</listitem>

						<listitem>

							<para>Deleting a statechart diagram also deletes the 
                statemachine it represents, and hence also all the 
                model elements owned by the statemachine. This because a 
                statechart diagram does &quot;map&quot; into a 
                StateMachine according the UML standard V1.4.</para>

						</listitem>

					</itemizedlist>

				</caution>

			</section>

			<section>

				<title>Set Source Pathâ€¦ (To be written)</title>

				<para>This entry on the pop-up menu â€¦</para>

			</section>

			<section>

				<title>Add Package</title>

				<para>This entry on the pop-up menu is available whenever a 
          model element is selected that may contain a package, e.g. a 
          package. After activating this menu the model element will own a 
          new package.</para>

			</section>

			<section>

				<title>Add All Classes in Namespace</title>

				<para>This entry on the pop-up menu is available for Class 
          Diagrams only. Activating this menu-item will add all classes 
          in the current namespace to the diagram. They will be located 
          at the top left corner&#8212;obviously a perfect occasion to use 
          the <quote>Arrange-&gt;Layout</quote> function in the 
          menu.</para>

			</section>

		</section>

	</chapter>

	<chapter xml:id="ch.ref.editpane">

		<title>The Editing Pane</title>

		<section>

			<title>Introduction</title>

			<para><xref xlink:href="fig.ref.editing_pane"
				 /> shows the ArgoUML 
        window with the editing pane highlighted.</para>

			<figure float="1" xml:id="fig.ref.editing_pane">

				<title>Overview of the editing pane</title>

				<screenshot><mediaobject><imageobject>
          <imagedata align="center" fileref="images/reference/editing_pane.png" format="PNG" /></imageobject></mediaobject></screenshot>
			</figure>

			<para>This is where all the diagrams are drawn. In earlier 
        versions of ArgoUML this pane went under a variety of names. 
        You may encounter <quote>drawing pane</quote>, <quote>diagram 
        pane</quote> or <quote>multi-editor pane</quote> in other 
        documentation that is still being updated.</para>

			<para>The pane has a tool bar at the top, and a single tab 
        labeled <literal>As Diagram</literal> at the bottom, which has 
        no function in the 0.20 version of ArgoUML. The main area shows 
        the currently selected diagram, of which the name is shown in 
        the window title bar.</para>

		</section>

		<section xml:id="s1.ref.edit_mouse">

			<title>Mouse Behavior in the Editing Pane</title>

			<para>Behavior of the mouse in general, and the naming of the 
        buttons is covered in the chapter on the overall user interface 
        (see <xref
					xlink:href="ch.ref.ui" />).</para>

			<section>

				<title>Button&nbsp;1 Click</title>

				<para>In the tool bar of the editing pane, button&nbsp;1 click is 
          used to select a tool for creating a new model element and adding 
          it to the diagram (see double clicking for creating multiple 
          model elements). For most tools, adding a new model element to the 
          diagram is achieved by moving the mouse into the editing area 
          and clicking again.</para>

				<para>In the main editing area button&nbsp;1 click is used to 
          select an individual model element.</para>

				<para>Many model elements (e.g. actor, class) show special handles 
          when selected and the mouse hovers over them. These are 
          called <quote>Selection Action Buttons</quote>, see 
          <xref
						xlink:href="s1.ref.edit_pane_selection_action_buttons"
					 />. 
          They appear at the sides, top and bottom, and indicate a 
          relationship type. Clicking on a Selection Action Button 
          creates a new related model element, with the relation of the type 
          that was indicated. If the shift key is pressed when hovering 
          the mouse over a selected model element, sometimes different 
          handles are shown, which stand for different relation 
          types.</para>

				<para>Where button&nbsp;2 click has been used to bring up a 
          context sensitive pop-up menu (see below), button&nbsp;1 click is 
          used to select the menu entry required. The pop-up menu will 
          be removed by any button&nbsp;1 click outside of the menu 
          area.</para>

				<para>There are various more detailed effects, which are 
          discussed under the descriptions of the various tools (see 
          <xref
						xlink:href="s1.ref.edit_pane_tool_bar" />).</para>

			</section>

			<section xml:id="s2.ref.edit_button1_double_click">

				<title>Button&nbsp;1 Double Click</title>

				<para>When used on the tool bar with a tool to add a 
          model element, the selected model element will be added multiple times 
          to the drawing area, once for each further button click, 
          until the tool is again selected or another tool 
          chosen.</para>

				<para>When used within the drawing area on a model element that 
          has sub-components, double click will select the 
          sub-component for editing (creating it if necessary).</para>

				<para>For example double clicking over an operation 
          compartment of a class will select the operation. Or create 
          one if there is none yet.</para>

				<para>A special use is with package model elements on the class 
          diagram. A double click on a package will navigate to the 
          class diagram associated with a package (the first created if 
          there is more than one), or will offer to create one for you 
          if there is none. See 
          <xref
						xlink:href="fig.ref.edit_add_class_diagram" /></para>

				<figure float="1" xml:id="fig.ref.edit_add_class_diagram">

					<title>The dialog for adding a new class diagram</title>

					<screenshot><mediaobject><imageobject>
            <imagedata align="center" fileref="images/reference/edit_add_class_diagram.png" format="PNG" /></imageobject></mediaobject></screenshot>
				</figure>

			</section>

			<section>

				<title>Button&nbsp;1 Motion</title>

				<!-- This has never worked AFAIK!
          <para>When adding a model element using the toolbar, button&nbsp;1 
          motion can generally be used to define the size of the new 
          model element. Its dimensions (line ends, diagonal corners of a 
          rectangular model element etc) are defined by button&nbsp;1 down and 
          button&nbsp;1 up.</para>
          -->

				<para>Where the model element being added is some form of 
          connector its termination point is shown with button&nbsp;1 up 
          over the terminating model element. button&nbsp;1 click may be used in 
          the space between model elements to create articulation points in 
          the connector. This is particularly useful where connectors 
          must loopback on themselves.</para>

				<para>Over graphical model elements button&nbsp;1 motion will move the 
          model element to a new position.</para>

				<para>Graphical model elements that are selected show handles at 
          the corners or ends, and these can be used for 
          re-sizing.</para>

				<para>Some model elements (e.g. actor, class) show special handles 
          (called <quote>Selection Action Buttons</quote>, see 
          <xref
						xlink:href="s1.ref.edit_pane_selection_action_buttons"
					 />) 
          at the sides, top and bottom, which can be dragged to form 
          types of relationship with other model elements.</para>

				<para>Where the model element is some form of connector between 
          other items, button&nbsp;1 motion other than at a handle will 
          cause a new handle to be created, allowing the connector to 
          be articulated at that point. This only works when the 
          connecting line is not straight angled. Such new handles can 
          be removed by moving them to the end of the connector.</para>

				<para>There are various more detailed effects, which are 
          discussed under the descriptions of the various tools (see 
          <xref
						xlink:href="s1.ref.edit_pane_tool_bar" />).</para>

			</section>

			<section>

				<title>Shift and Ctrl modifiers with Button&nbsp;1</title>

				<para>Where multiple selections are to be made, the CTRL key 
          is used with button&nbsp;1 to <emphasis>add</emphasis> unselected 
          model elements to the current selection. Where a model element is 
          already selected, it is removed from the current 
          selection.</para>

				<para>Clicking Button&nbsp;1 while the SHIFT key is pressed, 
          invokes the broom tool, which causes the selected model elements 
          (and any others swept up with them) to be moved with the 
          broom tool (see <xref
						xlink:href="s2.ref.edit_layout" />).</para>

			</section>

			<section>

				<title>Alt with Button&nbsp;1 motion</title>

				<para>Button&nbsp;1 down anywhere in the diagram while the ALT key 
          is pressed, allows to scroll the canvas in all directions 
          with button&nbsp;1 motion.</para>

			</section>

			<section>

				<title>Button&nbsp;2 Actions</title>

				<para>When used over model elements in the the editing pane, this 
          will display a context dependent pop-up menu. Menu entries 
          are highlighted (but not selected) and sub-menus exposed by 
          subsequent mouse motion (without any buttons). Menu entry 
          selection is with button&nbsp;1 or button&nbsp;2. See 
          <xref
						xlink:href="s1.ref.edit_pane_pop_up"
					 /> for details of the 
          specific pop-up menus.</para>

				<para>In case multiple elements are selected, the pop-up menu 
          only appears if all the items are of the same kind. 
          In this case, the 
          functions apply to all selected elements.</para>

			</section>

			<section>

				<title>Button&nbsp;2 Double Click</title>

				<para>This has no effect other than that of button&nbsp;2 single 
          click.</para>

			</section>

			<section>

				<title>Button&nbsp;2 Motion</title>

				<para>This is used to select items in a context sensitive 
          menu popped up by use of button&nbsp;2 click.</para>

			</section>

		</section>

		<section xml:id="s1.ref.edit_pane_keyboard">

			<title>Keyboard Behavior in the Editing Pane</title>

			<para>Many keyboard shortcuts can be used when the editing pane
        is active, mainly to change the selection or to move across the
        model elements.</para>

			<section>

				<title>Nudging a model element</title>

				<para>You can nudge a fig by selecting an element and using
          arrow keys. Keeping the shift or the alt key pressed will produce
          a wider movement.</para>

			</section>

			<section>

				<title>Moving across the model elements</title>

				<para>You can select the model element nearer to the selected one by 
          using the arrow keys while clicking the right button of the mouse.
          You can also select the next model element using the tab key, or the
          previous using the ctrl+tab keys.</para>

			</section>

		</section>

		<section xml:id="s1.ref.edit_pane_tool_bar">

			<title>The tool bar</title>

			<para>The toolbar at the top of the editing pane provides the 
        main functions of the pane. The default tool is the <literal>
        Select</literal> tool (<guiicon>
					<inlinemediaobject>
						<imageobject>
							<imagedata align="center" fileref="images/icons/select.gif" format="GIF"
							 />
						</imageobject>
					</inlinemediaobject>
				</guiicon>). 
        In general button&nbsp;1 click on any tool selects a tool for one 
        use, before reverting to the default tool, and button&nbsp;1 double 
        click selects a tool for repeated use.</para>

			<para>The tools fall into four categories.</para>

			<itemizedlist>

				<listitem>

					<para><emphasis>Layout tools.</emphasis> Provide assistance 
            in laying out model elements on the diagram.</para>

				</listitem>

				<listitem>

					<para><emphasis>Annotation tools.</emphasis> Used to 
            annotate model elements on the diagram.</para>

				</listitem>

				<listitem>

					<para><emphasis>Drawing tools.</emphasis> Used to add 
            general graphic objects to diagrams.</para>

				</listitem>

				<listitem>

					<para><emphasis>Diagram specific tools.</emphasis> Used to 
            add UML model elements specific to a particular diagram type to 
            the diagram.</para>

				</listitem>

			</itemizedlist>

			<para>Some of the tools that are generally not all used so often, 
        are combined in a dropdown, 
        to take less space on the toolbar. 
        See e.g. <xref
					xlink:href="fig.ref.edit_graphical_tools"
				 />.
        Press the symbol at the right of the tool to pop it open.
        These drop-down tools remember their last used tool persistently. 
        This means that when ArgoUML starts, 
        they show the last tool that was activated 
        the previous time ArgoUML was run.
        </para>

			<section xml:id="s2.ref.edit_layout">

				<title>Layout Tools</title>

				<para>The following two tools are provided in all diagrams in 
          this category.</para>

				<itemizedlist>

					<listitem>

						<para><guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center" fileref="images/icons/select.gif"
											format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Select</literal>. This tool provides for general 
              selection of model elements on the diagram. Button&nbsp;1 click 
              will select a model element. CTRL with button&nbsp;1 can be used 
              to select (or deselect) multiple model elements. Button&nbsp;1 
              motion will move selected 2D items or add and move a new 
              control point on a link. Button&nbsp;1 motion on a selected 
              component&#039;s control point will stretch that 
              component&#039;s shape.</para>

					</listitem>

					<listitem>

						<para><guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center" fileref="images/icons/broom.gif"
											format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<emphasis>Broom</emphasis>. Button&nbsp;1 motion with this 
              tool provide a <quote>broom</quote> which will sweep all 
              model elements along. This is a very shortcut way of lining 
              things up.</para>

						<para>The Broom can also be invoked by using SHIFT with 
              button&nbsp;1 motion when the <literal>Select</literal> tool 
              is in use.</para>

						<para>The Broom is discussed at length in its own 
              chapter, see <xref
								xlink:href="s1.ref.edit_pane_broom" />
						</para>

					</listitem>

				</itemizedlist>

				<tip>

					<para>Additional control of model element layout is provided 
            through the <literal>Arrange</literal> menu (see 
            <xref
							xlink:href="s1.ref.menu_arrange" />).</para>

				</tip>

			</section>

			<section>

				<title>Annotation Tools</title>

				<para>The annotation tool <literal>Comment</literal> (
          <guiicon>
						<inlinemediaobject>
							<imageobject>
								<imagedata align="center" fileref="images/icons/note.gif"
									format="GIF" />
							</imageobject>
						</inlinemediaobject>
					</guiicon>) 
          is used to add a comment to a selected UML model element.</para>

				<caution>

					<para>Unlike most other tools you use the <literal>
            Select</literal> tool to select a model element, and then 
            button&nbsp;1 click on <literal>Comment</literal> to create the 
            comment. If no element is selected when the comment tool is 
            clicked, then the comment is created and put at the left 
            top corner.</para>

				</caution>

				<para>The comment is created alongside the selected model element, 
          empty by default. The text can be selected with button&nbsp;1 
          double-click and edited from the keyboard.</para>

				<para>The UML standard allows comments to be attached to any 
          model element.</para>

				<para>You can link any comment to aditional elements using 
          the <literal>CommentLink</literal> (
          <guiicon>
						<inlinemediaobject>
							<imageobject>
								<imagedata align="center" fileref="images/icons/commentlink.gif"
									format="GIF" />
							</imageobject>
						</inlinemediaobject>
					</guiicon>) 
          tool.</para>

			</section>

			<section xml:id="s2.ref.edit_pane_drawing_tools">

				<title>Drawing Tools</title>

				<para>These are a series of tools for providing graphical 
          additions to diagrams. Although they are not UML model elements, 
          the UML standard provides for such decoration to improve the 
          readability of diagrams.</para>

				<tip>

					<para>These drawing tools provide a useful way to partially 
            support some of the UML features (such as general purpose 
            notes) that are missing from the current release of 
            ArgoUML.</para>

				</tip>

				<para>Eight tools are provided, all grouped into one 
          drop-down widget. See 
          <xref
						xlink:href="fig.ref.edit_graphical_tools"
						 />. Button&nbsp;1 
          click on the diagram will place an instance of the graphical 
          item of the same size as the last one placed. The size can be 
          controlled by button&nbsp;1 motion during placement. One side or 
          end of the element will be at button&nbsp;1 down, the other side 
          or end at button&nbsp;1 up. In general after they are placed on 
          the diagram, graphical elements can be dragged with the 
          <literal>Select</literal> tool and button&nbsp;1 and re-sized by 
          button&nbsp;1 motion on the handles after they have been 
          selected.</para>

				<figure float="1" xml:id="fig.ref.edit_graphical_tools">

					<title>The drawing tools selector.</title>

					<screenshot><mediaobject><imageobject>
            <imagedata align="center" fileref="images/reference/edit_graphical_tools.png" format="PNG" /></imageobject></mediaobject></screenshot>
				</figure>

				<itemizedlist>

					<listitem>

						<para><guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/rectangle.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Rectangle</literal>. Provides a rectangle.</para>

					</listitem>

					<listitem>

						<para><guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/rounded_rectangle.gif"
											format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Rounded Rectangle</literal>. Provides a 
              rectangle with rounded corners. There is no control over 
              the degree of rounding.</para>

					</listitem>

					<listitem>

						<para><guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center" fileref="images/icons/circle.gif"
											format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Circle</literal>. Provides a circle.</para>

					</listitem>

					<listitem>

						<para><guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center" fileref="images/icons/line.gif"
											format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Line</literal>. Provides a line.</para>

					</listitem>

					<listitem>

						<para><guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center" fileref="images/icons/text.gif"
											format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Text</literal>. Provides a text box. The text is 
              entered by selecting the box and typing. Text is centered 
              horizontally and after typing, the box will shrink to the 
              size of the text. However it can be re-sized by dragging 
              on the corners.</para>

					</listitem>

					<listitem>

						<para><guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center" fileref="images/icons/polygon.gif"
											format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Polygon</literal>. Provides a polygon. The 
              points of the polygon are selected by button&nbsp;1 click and 
              the polygon closed with button&nbsp;1 double click (which will 
              link the final point to the first point).</para>

					</listitem>

					<listitem>

						<para><guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center" fileref="images/icons/spline.gif"
											format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Spline</literal>. Provide an open spline. The 
              control points of the spline are selected with button&nbsp;1 
              and the last point selected with button&nbsp;1 double 
              click.</para>

					</listitem>

					<listitem>

						<para><guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center" fileref="images/icons/ink.gif"
											format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Ink</literal>. Provide a polyline. The points 
              are provided by button&nbsp;1 motion.</para>

					</listitem>

				</itemizedlist>

			</section>

			<section>

				<title>Use Case Diagram Specific Tools</title>

				<para>Several tools are provided specific to UML model elements on 
          use case diagrams. The detailed properties of these model elements 
          are described in the section on use case diagram model elements 
          (see <xref
						xlink:href="ch.ref.entusecase" />).</para>

				<itemizedlist>

					<listitem>

						<para><guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center" fileref="images/icons/actor.gif"
											format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Actor</literal>. Add an actor to the diagram. 
              For convenience, when the mouse is over a selected actor 
              it displays two handles to left and right which may be 
              dragged to form association relationships.</para>

					</listitem>

					<listitem>

						<para><guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/use_case.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Use Case</literal>. Add a use case to the 
              diagram. For convenience, when the mouse is over a 
              selected use case it displays two handles to left and 
              right which may be dragged to form association 
              relationships and two handles top and bottom which may be 
              dragged to form generalization and specialization 
              relationships respectively.</para>

					</listitem>

					<listitem>

						<para><guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/association_plain.gif"
											format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Association</literal>. Add an association 
              between two model elements selected using button&nbsp;1 motion 
              (from the first model element to the second). There are 6 
              types of association offered here, see 
              <xref
								xlink:href="fig.ref.edit_association_tools"
								 />: 
              <literal>association</literal>, <literal>
              aggregation</literal> and <literal>composition</literal>, 
              and all these three can be <literal>
              bidirectional</literal> or <literal>
              unidirectional</literal>.</para>

						<figure float="1" xml:id="fig.ref.edit_association_tools">

							<title>The association tool selector.</title>

							<screenshot><mediaobject><imageobject>
                <imagedata align="center" fileref="images/reference/edit_association_tools.png" format="PNG" /></imageobject></mediaobject></screenshot>
						</figure>

					</listitem>

					<listitem>

						<para><guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/dependency.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Dependency</literal>. Add a dependency between 
              two model elements selected using button&nbsp;1 motion (from the 
              dependent model element).</para>

					</listitem>

					<listitem>

						<para><guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/generalization.gif" format="GIF"
										 />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Generalization</literal>. Add a generalization 
              between two model elements selected using button&nbsp;1 motion 
              (from the child to the parent).</para>

					</listitem>

					<listitem>

						<para><guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center" fileref="images/icons/extend.gif"
											format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Extend</literal>. Add an extend relationship 
              between two model elements selected using button&nbsp;1 motion 
              (from the extended to the extending use case).</para>

					</listitem>

					<listitem>

						<para><guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center" fileref="images/icons/include.gif"
											format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Include</literal>. Add an include relationship 
              between two model elements selected using button&nbsp;1 motion 
              (from the including to the included use case).</para>

					</listitem>

					<listitem>

						<para><guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/extension_point.gif" format="GIF"
										 />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Add Extension Point</literal>. Add an extension 
              point to a selected use case. The extension point is 
              given the default name <literal>newEP</literal> and 
              location <literal>loc</literal>. Where the extension 
              point compartment is displayed, the extension point may 
              be edited by button&nbsp;1 double click and using the 
              keyboard, or by selecting with button&nbsp;1 click (after the 
              use case has been selected) and using the property tab. 
              Otherwise it may be edited through its property tab, 
              selected through the property tab of the owning use 
              case.</para>

						<note>

							<para>This tool is grayed out except when a use case is 
                selected.</para>

						</note>

					</listitem>

				</itemizedlist>

			</section>

			<section>

				<title>Class Diagram Specific Tools</title>

				<para>Several tools are provided specific to UML model elements on 
          class diagrams. The detailed properties of these model elements 
          are described in the section on class diagram model elements (see 
          <xref
						xlink:href="ch.ref.entclass" />).</para>

				<itemizedlist>

					<listitem>

						<para><guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center" fileref="images/icons/package.gif"
											format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Package</literal>. Add a package to the 
              diagram.</para>

					</listitem>

					<listitem>

						<para><guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center" fileref="images/icons/class.gif"
											format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Class</literal>. Add a class to the diagram. For 
              convenience, when the mouse is over a selected class it 
              displays two handles to left and right which may be 
              clicked or
              dragged to form association relationships (or composition 
              in case SHIFT has been pressed) and two handles top and 
              bottom which may be dragged or clicked
              to form generalization and 
              specialization relationships respectively.</para>

					</listitem>

					<listitem>

						<para><guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/association_plain.gif"
											format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Association</literal>. Add an association 
              between two model elements selected using button&nbsp;1 motion 
              (from the first model element to the second). There are 2 
              types of association offered here, <literal>
              bidirectional</literal> or <literal>
              unidirectional</literal>.</para>

					</listitem>

					<listitem>

						<para><guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/aggregation_plain.gif"
											format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Aggregation</literal>. Add an aggregation
              between two model elements selected using button&nbsp;1 motion 
              (from the first model element to the second). There are 2
              types of aggregation offered here, <literal>
              bidirectional</literal> or <literal>
              unidirectional</literal>.</para>

					</listitem>

					<listitem>

						<para><guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/composition_plain.gif"
											format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Composition</literal>. Add an composition 
              between two model elements selected using button&nbsp;1 motion 
              (from the first model element to the second). There are 2 
              types of composition offered here, <literal>
              bidirectional</literal> or <literal>
              unidirectional</literal>.</para>

					</listitem>

					<listitem>

						<para><guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/association_end.gif" format="GIF"
										 />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Association-end</literal>. Add 
              another end to an already existing association 
              using button&nbsp;1 (from the 
              association middle to a class, or vice versa).
              This is the way to create so-calld N-ary associations.</para>

					</listitem>

					<listitem>

						<para><guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/generalization.gif" format="GIF"
										 />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Generalization</literal>. Add a generalization 
              between two model elements selected using button&nbsp;1 (from the 
              child to the parent).</para>

					</listitem>

					<listitem>

						<para><guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/interface.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Interface</literal>. Add an interface to the 
              diagram. For convenience, when the mouse is over a 
              selected interface it displays a handle at the bottom 
              which may be dragged to form a realization relationship 
              (the target being the realizing class).</para>

					</listitem>

					<listitem>

						<para><guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/realization.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Realization</literal>. Add a realization between 
              a class and an interface selected using button&nbsp;1 motion 
              (from the realizing class to the realized 
              interface).</para>

					</listitem>

					<listitem>

						<para><guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/dependency.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Dependency</literal>. Add a dependency between 
              two model elements selected using button&nbsp;1 motion (from the 
              dependent model element). There are also 2 special types of 
              dependency offered here, <literal>Permission</literal> (
              <guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/permission.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>) 
              and <literal>Usage</literal> (
              <guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center" fileref="images/icons/usage.gif"
											format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>).
               A <literal>Permission</literal> is created by default 
               with stereotype <literal>Import</literal>, and is used to import
               elements from one package into another.
              </para>

					</listitem>

					<listitem>

						<para><guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/attribute.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Attribute</literal>. Add a new attribute to the 
              currently selected class. The attribute is given the 
              default name <literal>newAttr</literal> of type <literal>
              int</literal> and may be edited by button&nbsp;1 double click 
              and using the keyboard, or by selecting with button&nbsp;1 
              click (after the class has been selected) and using the 
              property tab.</para>

						<note>

							<para>This tool is grayed out except when a class is 
                selected.</para>

						</note>

					</listitem>

					<listitem>

						<para><guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/operation.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Operation</literal>. Add a new operation to the 
              currently selected class or interface. The operation is 
              given the default name <literal>newOperation</literal> 
              with no arguments and return type <literal>void</literal> 
              and may be edited by button&nbsp;1 double click and using the 
              keyboard, or by selecting with button&nbsp;1 click (after the 
              class has been selected) and using the property 
              tab.</para>

						<note>

							<para>This tool is grayed out except when a class or 
                interface is selected.</para>

						</note>

					</listitem>

					<listitem>

						<para><guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/associationclass.gif" format="GIF"
										 />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Association Class</literal>. 
              Add a new association class 
              between two model elements selected using button&nbsp;1 motion 
              (from the first model element to the second).</para>

					</listitem>

					<listitem>

						<para><guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/datatype.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Datatype</literal>. 
              Add a datatype to the 
              diagram. For convenience, when the mouse is over a 
              selected datatype it displays handles 
              at the top and at the bottom 
              which may be clicked or dragged 
              to form a generalization relationship 
              (the target being another datatype).
              There are 2 other elements available here, 
              <guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/enumeration.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Enumeration</literal>
              and
              <guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/stereotype.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Stereotype</literal>.
              These two have similar handles, 
              except the one at the top of a stereotype: 
              when clicked, it creates a metaclass, 
              connected by a dependency marked with &laquo;stereotype&raquo;.
              This eases the creation of "stereotype declaration" diagrams - 
              see the literature on the subject.
              </para>

					</listitem>

				</itemizedlist>

			</section>

			<section>

				<title>Sequence Diagram Specific Tools</title>

				<para>Seven tools are provided specific to UML model elements on 
          sequence diagrams. The detailed properties of these model elements 
          are described in the section on sequence diagram model elements 
          (see <xref
						xlink:href="ch.ref.entseq" />).</para>

				<itemizedlist>

					<listitem>

						<para><guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/classifierrole_sd.gif"
											format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>ClassifierRole</literal>. Add a classifierrole to the 
              diagram.</para>

					</listitem>

					<listitem>

						<para><guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/call_action.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Message with Call Action</literal>. 
              Add a call message 
              between two classifierroles selected using button&nbsp;1 motion (from 
              the originating classifierrole to the receiving classifierrole).
              </para>

					</listitem>

					<listitem>

						<para><guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/return_action.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Message with Return Action</literal>. 
              Add a return message 
              between two classifierroles selected using button&nbsp;1 motion (from 
              the originating classifierrole to the receiving classifierrole).
              </para>

					</listitem>

					<listitem>

						<para><guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/create_action.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Message with Create Action</literal>. 
              Add a create message 
              between two classifierroles selected using button&nbsp;1 motion (from 
              the originating classifierrole to the receiving classifierrole).
              </para>

					</listitem>

					<listitem>

						<para><guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/destroy_action.gif" format="GIF"
										 />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Message with Destroy Action</literal>. 
              Add a destroy message 
              between two classifierroles selected using button&nbsp;1 motion (from 
              the originating classifierrole to the receiving classifierrole).
              </para>

					</listitem>

					<listitem>

						<para><guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/sequence_expand.gif" format="GIF"
										 />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Add Vertical Space to Diagram</literal>.  
              Add vertical space to a diagram by moving all messages
              below this down.  Click the mouse at the point where you 
              want the space to be added and drag down the screen vertically
              the distance which matches the height of the space you'd 
              like to have added.
              </para>

					</listitem>

					<listitem>

						<para><guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/sequence_contract.gif"
											format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Remove Vertical Space in Diagram</literal>. 
              Remove vertical space from diagram and move all elements
              below up vertically.  Click and drag the mouse vertically
              over the space that you want deleted.
              </para>

					</listitem>

				</itemizedlist>

			</section>

			<section>

				<title>Collaboration Diagram Specific Tools</title>

				<para>Three tools are provided specific to UML model elements on 
          collaboration diagrams. The detailed properties of these 
          model elements are described in the section on collaboration 
          diagram model elements (see <xref
						xlink:href="ch.ref.entcollab" />
          ).</para>

				<itemizedlist>

					<listitem>

						<para><guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/classifier_role.gif" format="GIF"
										 />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Classifier Role</literal>. Add a classifier role 
              to the diagram.</para>

					</listitem>

					<listitem>

						<para><guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/association_plain.gif"
											format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Association Role</literal>. Add an association 
              role between two classifier roles selected using button&nbsp;1 
              motion (from the originating classifier role to the 
              receiving classifier role). There are 6 types of 
              association roles offered here, see 
              <xref
								xlink:href="fig.ref.edit_association_tools"
								 />: 
              <literal>association</literal>, <literal>
              aggregation</literal> and <literal>composition</literal>, 
              and all these three can be <literal>
              bidirectional</literal> or <literal>
              unidirectional</literal>.</para>

					</listitem>

					<listitem>

						<para><guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/generalization.gif" format="GIF"
										 />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Generalization</literal>. Add a generalization 
              between two model elements selected using button&nbsp;1 (from the 
              child to the parent).</para>

					</listitem>

					<listitem>

						<para><guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/dependency.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Dependency</literal>. Add a dependency between 
              two model elements selected using button&nbsp;1 motion (from the 
              dependent model element).</para>

					</listitem>

					<listitem>

						<para><guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center" fileref="images/icons/message.gif"
											format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Add Message</literal>. Add a message to the 
              selected association role.</para>

						<note>

							<para>This tool is grayed out except when an 
                association role is selected.</para>

						</note>

					</listitem>

				</itemizedlist>

			</section>

			<section>

				<title>Statechart Diagram Specific Tools</title>

				<para>Eleven tools are provided specific to UML model elements on 
          statechart diagrams. The detailed properties of these model elements 
          are described in the section on statechart diagram model elements 
          (see <xref
						xlink:href="ch.ref.entstate" />).</para>

				<itemizedlist>

					<listitem>

						<para><guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center" fileref="images/icons/state.gif"
											format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Simple State</literal>. Add a simple state to the 
              diagram.</para>

					</listitem>

					<listitem>

						<para><guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/composite_state.gif" format="GIF"
										 />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Composite State</literal>. Add a composite state 
              to the diagram. All model elements that are subsequently 
              placed on the diagram on top of the composite state will 
              form part of that composite state.</para>

					</listitem>

					<listitem>

						<para><guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/transition.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Transition</literal>. Add a transition between 
              two states selected using button&nbsp;1 motion (from the 
              originating state to the receiving state).</para>

					</listitem>

					<listitem>

						<para><guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/synchstate.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Synch State</literal>. Add a synchstate to the 
              diagram.</para>

					</listitem>

					<listitem>

						<para><guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/submachinestate.gif" format="GIF"
										 />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Submachine State</literal>. Add a submachinestate to the 
              diagram.</para>

					</listitem>

					<listitem>

						<para><guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/stubstate.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Stub State</literal>. Add a stubstate to the 
              diagram.</para>

					</listitem>

					<listitem>

						<para><guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/initial_state.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Initial</literal>. Add an initial pseudostate to 
              the diagram.</para>

						<caution>

							<para>There is nothing to stop you adding more than one 
                initial state to a diagram or composite state. However 
                to do so is meaningless, and one of the critics will 
                complain.</para>

						</caution>

					</listitem>

					<listitem>

						<para><guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/final_state.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Final State</literal>. Add a final state to the 
              diagram.</para>

					</listitem>

					<listitem>

						<para><guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/junction.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Junction</literal>. Add a junction pseudostate 
              to the diagram.</para>

						<caution>

							<para>A well formed junction should have at least one incoming 
                transition and at least one outgoing. ArgoUML does not 
                enforce this, but an ArgoUML critic will complain about 
                any junction that does not follow this rule.</para>

						</caution>
					</listitem>

					<listitem>

						<para><guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center" fileref="images/icons/branch.gif"
											format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Choice</literal>. Add a choice pseudostate to 
              the diagram.</para>

						<caution>

							<para>A well formed choice should have at least one incoming 
                transition and at least one outgoing. ArgoUML does not 
                enforce this, but an ArgoUML critic will complain about 
                any choice that does not follow this rule.</para>

						</caution>

					</listitem>

					<listitem>

						<para><guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center" fileref="images/icons/fork.gif"
											format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Fork</literal>. Add a fork pseudostate to the 
              diagram.</para>

						<caution>

							<para>A well formed fork should have exactly one incoming 
                transition and two or more outgoing. ArgoUML does not 
                enforce this, but an ArgoUML critic will complain about 
                any fork that does not follow this rule.</para>

						</caution>

					</listitem>

					<listitem>

						<para><guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center" fileref="images/icons/join.gif"
											format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Join</literal>. Add a join pseudostate to the 
              diagram.</para>

						<caution>

							<para>A well formed join should have exactly one outgoing 
                transition and two or more incoming. ArgoUML does not 
                enforce this, but an ArgoUML critic will complain about 
                any join that does not follow this rule.</para>

						</caution>

					</listitem>

					<listitem>

						<para><guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/shallow_history.gif" format="GIF"
										 />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Shallow History</literal>. Add a shallow history 
              pseudostate to the diagram.</para>

					</listitem>

					<listitem>

						<para><guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/deep_history.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Deep History</literal>. Add a deep history 
              pseudostate to the diagram.</para>

					</listitem>

					<listitem>

						<para><guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/call_event.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Call Event</literal>. Add a Call Event as trigger
              to a transition.
              There are 4 types of 
              events offered here: 
              <literal>Call Event</literal>, <literal>
              Change Event</literal>, 
              <literal>Signal Event</literal> and <literal>
              Time Event</literal>.</para>

					</listitem>

					<listitem>

						<para><guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center" fileref="images/icons/guard.gif"
											format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Guard</literal>. Add a guard 
              to a transition.</para>

					</listitem>

					<listitem>

						<para><guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/call_action.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Call Action</literal>. Add a call action 
              (i.e. the effect)
              to a transition.
              There are 7 types of 
              actions offered here: 
              <literal>Call Action</literal>, 
              <literal>Create Action</literal>, 
              <literal>Destroy Action</literal>, 
              <literal>Return Action</literal>, 
              <literal>Send Action</literal>, 
              <literal>Terminate Action</literal>, 
              <literal>Uninterpreted Action</literal> and 
              <literal>Action Sequence</literal>.
              </para>

					</listitem>

				</itemizedlist>

			</section>

			<section>

				<title>Activity Diagram Specific Tools</title>

				<para>Seven tools are provided specific to UML model elements on 
          activity diagrams. The detailed properties of these model elements 
          are described in the section on activity diagram model elements 
          (see <xref
						xlink:href="ch.ref.entactiv" />).</para>

				<itemizedlist>

					<listitem>

						<para><guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/action_state.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Action State</literal>. Add an action state to 
              the diagram.</para>

					</listitem>

					<listitem>

						<para><guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/transition.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Transition</literal>. Add a transition between 
              two action states selected using button&nbsp;1 motion (from 
              the originating action state to the receiving action 
              state).</para>

					</listitem>

					<listitem>

						<para><guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/initial_state.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Initial</literal>. Add an initial pseudostate to 
              the diagram.</para>

						<caution>

							<para>There is nothing to stop you adding more than one 
                initial state to a diagram. However to do so is 
                meaningless, and one of the critics will 
                complain.</para>

						</caution>

					</listitem>

					<listitem>

						<para><guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/final_state.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Final State</literal>. Add a final state to the 
              diagram.</para>

					</listitem>

					<listitem>

						<para><guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/junction.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Junction</literal>. Add a junction (decision) 
              pseudostate to the diagram.</para>

						<caution>

							<para>A well formed junction should have one incoming 
                transition and two or more outgoing. ArgoUML does not 
                enforce this, but an ArgoUML critic will complain about 
                any junction that does not follow this rule.</para>

						</caution>

					</listitem>

					<listitem>

						<para><guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center" fileref="images/icons/fork.gif"
											format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Fork</literal>. Add a fork pseudostate to the 
              diagram.</para>

						<caution>

							<para>A well formed fork should have one incoming 
                transition and two or more outgoing. ArgoUML does not 
                enforce this, but an ArgoUML critic will complain about 
                any fork that does not follow this rule.</para>

						</caution>

					</listitem>

					<listitem>

						<para><guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center" fileref="images/icons/join.gif"
											format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Join</literal>. Add a join pseudostate to the 
              diagram.</para>

						<caution>

							<para>A well formed join should have one outgoing 
                transition and two or more incoming. ArgoUML does not 
                enforce this, but an ArgoUML critic will complain about 
                any join that does not follow this rule.</para>

						</caution>

					</listitem>

					<listitem>

						<para><guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/callstate.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>CallState</literal>. Add a callstate to the 
              diagram. 
              A call state is an action state that calls a single operation.
              Hence, the name of the operation being called 
              is put in the symbol, 
              along with the name of the classifier that
              hosts the operation in parentheses under it.
              </para>

					</listitem>

					<listitem>

						<para><guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/objectflowstate.gif" format="GIF"
										 />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>ObjectFlowState</literal>. Add a objectflowstate to the 
              diagram.
              An objectflowstate is 
              an object that is input to or output from 
              an action.</para>

					</listitem>

				</itemizedlist>

			</section>

			<section>

				<title>Deployment Diagram Specific Tools</title>

				<para>Ten tools are provided specific to UML model elements on 
          deployment diagrams. The detailed properties of these 
          model elements are described in the section on deployment diagram 
          model elements (see <xref
						xlink:href="ch.ref.entdeploy" />).</para>

				<note>

					<para>Remember that ArgoUML&#039;s deployment diagrams are 
            also used for component diagrams.</para>

				</note>

				<itemizedlist>

					<listitem>

						<para><guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center" fileref="images/icons/node.gif"
											format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Node</literal>. Add a node to the diagram. For 
              convenience, when the mouse is over a selected node it 
              displays four handles to left, right, top and bottom 
              which may be dragged to form association 
              relationships.</para>

					</listitem>

					<listitem>

						<para><guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/node_instance.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Node Instance</literal>. Add a node instance to 
              the diagram. For convenience, when the mouse is over a 
              selected node instance it displays four handles to left, 
              right, top and bottom which may be dragged to form link 
              relationships.</para>

					</listitem>

					<listitem>

						<para><guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/component.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Component</literal>. Add a component to the 
              diagram. For convenience, when the mouse is over a 
              selected component it displays four handles to left, 
              right, top and bottom which may be dragged to form 
              dependency relationships.</para>

					</listitem>

					<listitem>

						<para><guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/component_instance.gif"
											format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Component Instance</literal>. Add a component 
              instance to the diagram. For convenience, when the mouse 
              is over a selected component instance it displays four 
              handles to left, right, top and bottom which may be 
              dragged to form dependency relationships.</para>

					</listitem>

					<listitem>

						<para><guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/generalization.gif" format="GIF"
										 />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Generalization</literal>. Add a generalization 
              between two model elements selected using button&nbsp;1 (from the 
              child to the parent).</para>

					</listitem>

					<listitem>

						<para><guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/realization.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Realization</literal>. Add a realization between 
              a class and an interface selected using button&nbsp;1 motion 
              (from the realizing class to the realized 
              interface).</para>

					</listitem>

					<listitem>

						<para><guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/dependency.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Dependency</literal>. Add a dependency between 
              two model elements selected using button&nbsp;1 motion (from the 
              dependent model element).</para>

					</listitem>

					<listitem>

						<para><guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/association_plain.gif"
											format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Association</literal>. Add an association 
              between two model elements (node, component, class or 
              interface) selected using button&nbsp;1 motion (from the first 
              model element to the second model element). There are 6 types of 
              association offered here, see 
              <xref
								xlink:href="fig.ref.edit_association_tools"
								 />: 
              <literal>association</literal>, <literal>
              aggregation</literal> and <literal>composition</literal>, 
              and all these three can be <literal>
              bidirectional</literal> or <literal>
              unidirectional</literal>.</para>

						<caution>

							<para>The constraint that associations between classes 
                and interfaces must not be navigable 
                <emphasis>from</emphasis> the interface still applies 
                on deployment diagrams.</para>

						</caution>

					</listitem>

					<listitem>

						<para><guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center" fileref="images/icons/object.gif"
											format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Object</literal>. Add an object to the diagram. 
              For convenience, when the mouse is over a selected object 
              it displays four handles to left, right, top and bottom, 
              which may be dragged to form link relationships.</para>

					</listitem>

					<listitem>

						<para><guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center" fileref="images/icons/link.gif"
											format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Link</literal>. Add a link between two model elements 
              (node instance, component instance or object) selected 
              using button&nbsp;1 motion.</para>

					</listitem>

				</itemizedlist>

			</section>

		</section>

		<section xml:id="s1.ref.edit_pane_broom">

			<title>The Broom</title>

			<para>ArgoUML&#039;s broom alignment tool is specialized to 
        support the needs of designers in achieving the kind of 
        alignment used in UML diagrams. It is common for designers to 
        roughly align objects as they are created or by using simple 
        movement commands. The broom is an easy way to precisely align 
        objects that are already roughly aligned. Furthermore, the 
        broom&#039;s distribution options are suited to the needs of 
        UML designers: making related objects appear evenly spaced, 
        packing objects to save diagram space, and spreading objects 
        out to make room for new objects. The broom also makes it easy 
        to change from horizontal to vertical alignment or from 
        left-alignment to right-alignment.</para>

			<para>The T-shaped icon in ArgoUML&#039;s diagram toolbar 
        invokes the broom alignment tool. When the mouse button&nbsp;1 is 
        pressed while in broom-mode, the designer&#039;s initial mouse 
        movement orients the broom to face in one of four directions: 
        north, south, east, or west. After that, mouse drag events 
        cause the broom to advance in the chosen direction, withdraw, 
        or grow in a lateral direction. Like a real-world push broom, 
        the broom tool pushes diagram elements that come in contact 
        with it. This has the effect of aligning objects along the face 
        of the broom and provides immediate visual feedback (see the 
        figure below). Unlike a real-world broom, moving backwards 
        allows diagram elements to return to their original position. 
        Growing the broom makes it possible to align objects that are 
        not near each other. When the mouse button is released, the 
        broom disappears and the moved objects are selected to make it 
        easy to manipulate them further.</para>

			<figure float="1" xml:id="fig.ref.editpane_broom">

				<title>The Broom.</title>

				<informaltable frame="none">

					<tgroup cols="2">

						<tbody>

							<row>
								<entry>
									<screenshot><mediaobject><imageobject>
                <imagedata align="center" fileref="images/reference/edit_broom1.png" format="PNG" /></imageobject></mediaobject></screenshot>
								</entry>
								<entry>
									<screenshot><mediaobject><imageobject>
                <imagedata align="center" fileref="images/reference/edit_broom2.png" format="PNG" /></imageobject></mediaobject></screenshot>
								</entry>
							</row>

							<row>
								<entry>
									<screenshot><mediaobject><imageobject>
                <imagedata align="center" fileref="images/reference/edit_broom3.png" format="PNG" /></imageobject></mediaobject></screenshot>
								</entry>
								<entry>
									<screenshot><mediaobject><imageobject>
                <imagedata align="center" fileref="images/reference/edit_broom4.png" format="PNG" /></imageobject></mediaobject></screenshot>
								</entry>
							</row>

						</tbody>

					</tgroup>

				</informaltable>

			</figure>

			<para>If the designer presses the space bar while using the 
        broom, objects on the face of the broom are distributed (i.e., 
        spaced evenly). ArgoUML&#039;s broom supports three 
        distribution modes: objects can be spaced evenly across the 
        space that they use, objects can be packed together with only a 
        small gap between them, or objects can be distributed evenly 
        over the entire length of the broom&#039;s face. Repeatedly 
        pressing the space bar cycles among these three distribution 
        modes and displays a brief message indicating the operation 
        just performed: Space evenly, Pack tightly, Spread out and 
        Original.</para>

		</section>

		<section xml:id="s1.ref.edit_pane_selection_action_buttons">

			<title>Selection Action Buttons</title>

			<para>When the user selects a model element in a UML diagram, 
        several handles are drawn on it to indicate that it is selected 
        and to provide user interface affordances to resize the node. 
        ArgoUML also displays some <quote>selection-action 
        buttons</quote> around the selected model element. See the figure 
        below for some examples of the handles and 
        <quote>selection-action buttons</quote>. The two figures for a 
        class differ because for creating the second one, the shift key 
        has been depressed.</para>

			<figure float="1" xml:id="fig.ref.editpane_selection_action_buttons">

				<title>Some examples of <quote>Selection Action 
          Buttons</quote>.</title>

				<informaltable frame="none">

					<tgroup cols="3">

						<tbody>

							<row>
								<entry>
									<screenshot><mediaobject><imageobject>
                <imagedata align="center" fileref="images/reference/edit_selection_action_buttons1.png" format="PNG" /></imageobject></mediaobject></screenshot>
								</entry>
								<entry>
									<screenshot><mediaobject><imageobject>
                <imagedata align="center" fileref="images/reference/edit_selection_action_buttons2.png" format="PNG" /></imageobject></mediaobject></screenshot>
								</entry>
								<entry>
									<screenshot><mediaobject><imageobject>
                <imagedata align="center" fileref="images/reference/edit_selection_action_buttons3.png" format="PNG" /></imageobject></mediaobject></screenshot>
								</entry>
							</row>

							<row>
								<entry>
									<screenshot><mediaobject><imageobject>
                <imagedata align="center" fileref="images/reference/edit_selection_action_buttons4.png" format="PNG" /></imageobject></mediaobject></screenshot>
								</entry>
								<entry>
									<screenshot><mediaobject><imageobject>
                <imagedata align="center" fileref="images/reference/edit_selection_action_buttons5.png" format="PNG" /></imageobject></mediaobject></screenshot>
								</entry>
								<entry>
									<screenshot><mediaobject><imageobject>
                <imagedata align="center" fileref="images/reference/edit_selection_action_buttons6.png" format="PNG" /></imageobject></mediaobject></screenshot>
								</entry>
							</row>

						</tbody>

					</tgroup>

				</informaltable>

			</figure>

			<para>Selection-action buttons offer common operations on the 
        selected object. For example, a class node has a button at 
        12-o&#039;clock for adding a superclass, one at 6-o&#039;clock 
        for adding a subclass, and buttons at 3-o&#039;clock and 
        9-o&#039;clock for adding associations. These buttons support a 
        &quot;click or drag&quot; interaction: a single click creates a 
        new related class at a default position relative to the 
        original class and creates a generalization or association; a 
        drag from the button to an existing class creates only the 
        generalization or association; and, a drag to an empty space in 
        the diagram creates a new class at the mouse position and the 
        generalization or association. ArgoUML provides some automated 
        layout support so that clicking the subclass button will 
        position the new classes so that they do not overlap.</para>

			<para>Selection-action buttons are transparent. They have a 
        visibly recognizable rectangular shape and size and they 
        contain an icon that is the same as the icon used for the 
        corresponding type of design element on the standard toolbar. 
        However, these icons are unfilled line drawings with many 
        transparent pixels. This allows selection-action buttons to be 
        overlaid onto the drawing area without overly obscuring the 
        diagram itself. Also, the buttons are only drawn when the mouse 
        is over the selected model element; if any part of the diagram is 
        obscured, the mouse can simply be moved away to get a clearer 
        view of the diagram.</para>

		</section>

		<section>

			<title>Clarifiers</title>

			<para>A key feature of ArgoUML are the critics, which run in 
        parallel with the main ArgoUML tool. When they find a problem, 
        they typically raise a to-do item, and also highlight the 
        problem on the editing pane. The graphical techniques used for 
        highlighting are called <emphasis>Clarifiers</emphasis></para>

			<itemizedlist>

				<listitem>

					<para>Note icon (<guiicon>
							<inlinemediaobject>
								<imageobject>
									<imagedata align="center" fileref="images/icons/note.gif"
										format="GIF" />
								</imageobject>
							</inlinemediaobject>
						</guiicon>). 
            Displayed at the top left of a model element indicates a critic 
            of that model element. Moving the mouse over the icon will pop 
            up the critic headline.</para>

				</listitem>

				<listitem>

					<para>Colored wavy line (
            <guiicon>
							<inlinemediaobject>
								<imageobject>
									<imagedata align="center"
										fileref="images/reference/wavy_line.png" format="PNG" />
								</imageobject>
							</inlinemediaobject>
						</guiicon>). 
            Used for critics specific to sub-components of graphical 
            model elements. For example to underline attributes with a 
            problem within a class.</para>

				</listitem>

				<listitem>

					<para>Solid colored line (
            <guiicon>
							<inlinemediaobject>
								<imageobject>
									<imagedata align="center"
										fileref="images/reference/solid_line.png" format="PNG" />
								</imageobject>
							</inlinemediaobject>
						</guiicon>). 
            Not seen in ordinary editing, but used when a to-do item is 
            highlighted from the to-do pane (see 
            <xref
							xlink:href="ch.ref.todopane"
						 />) by button&nbsp;1 double 
            click. The solid line is used to show all the model elements 
            affected by the critic, for example all stimuli that are 
            out of order.</para>

				</listitem>

			</itemizedlist>

		</section>

		<section>

			<title>The Drawing Grid</title>

			<para>The editing pane is provided with a background grid which 
        can be set in various styles or turned off altogether through 
        the menu (see <xref
					xlink:href="s2.ref.menu_adjust_grid" />).</para>

			<para>Whatever grid is actually displayed, placement of items 
        on the diagram is always controlled by the setting for grid 
        snap, which ranges from 4 to 32 pixels (see 
        <xref
					xlink:href="s2.ref.menu_grid_snap" />).</para>

		</section>

		<section>

			<title>The Diagram Tab</title>

			<para>At the bottom of the editing pane is a small tab labeled 
        as <literal>As Diagram</literal>. The concept is that a UML 
        diagram can be displayed in a number of ways, for example as a 
        graphical diagram or as a table. Each representation would have 
        its own tab and be selected by button&nbsp;1 click on the tab.</para>

			<para>Earlier versions of ArgoUML did implement a tabular 
        representation, but the current release only supports a diagram 
        representation, so this tab does not have any function.</para>

		</section>

		<section xml:id="s1.ref.edit_pane_pop_up">

			<title>Pop-Up Menus</title>

			<para>Within the editing pane, button&nbsp;2 click over a model element 
        will bring up a pop-up menu with a variable number of main 
        entries, many with a sub-menu.</para>

			<section>

				<title>Critiques</title>

				<para>This sub-menu gives list of all the critics that have 
          triggered for this model element. Selection of a menu entry causes 
          that entry to be highlighted in the to-do pane and its 
          detailed explanation to be placed in the <literal>
          ToDoItem</literal> tab of the details pane. A solid colored 
          line indicates the offending element.</para>

			</section>

			<section>

				<title>Ordering</title>

				<para>This menu controls the ordering of overlapping 
          model elements on the diagram. It is equivalent to the <literal>
          Reorder</literal> sub-menu of the <literal>Arrange</literal> 
          menu (see <xref
						xlink:href="s2.ref.menu_reorder" />). There are 
          four entries.</para>

				<itemizedlist>

					<listitem>

						<para><guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center" fileref="images/icons/forward.gif"
											format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Forward</literal>. The selected model elements are 
              moved one step forward in the ordering hierarchy with 
              respect to other model elements they overlap.</para>

					</listitem>

					<listitem>

						<para><guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/backward.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Backward</literal>. The selected model elements are 
              moved one step back in the ordering hierarchy with 
              respect to other model elements they overlap.</para>

					</listitem>

					<listitem>

						<para><guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/to_front.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>To Front</literal>. The selected model elements are 
              moved to the front of any other model elements they 
              overlap.</para>

					</listitem>

					<listitem>

						<para><guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center" fileref="images/icons/to_back.gif"
											format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>To Back</literal>. The selected model elements are 
              moved to the back of any other model elements they 
              overlap.</para>

					</listitem>

				</itemizedlist>

			</section>

			<section>

				<title>Add</title>

				<para>This sub-menu only appears for model elements that can have 
          notes attached (class, interface, object, state, pseudostate) 
          or have operations or attributes added (class, interface). 
          There are at most three entries.</para>

				<itemizedlist>

					<listitem>

						<para><guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/attribute.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>New Attribute</literal>. Only appears where the 
              selected model element is a class. Creates a new attribute on 
              the model element.</para>

					</listitem>

					<listitem>

						<para><guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/operation.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>New Operation</literal>. Only appears where the 
              selected model element is a class or interface. Creates a new 
              operation on the model element.</para>

					</listitem>

					<listitem>

						<para><guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center" fileref="images/icons/note.gif"
											format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>New Comment</literal>. Attaches a new comment to 
              the selected model element.</para>

					</listitem>

					<listitem>

						<para><literal>Add All Relations</literal>. 
              Only appears where the 
              selected model element is a class or interface. 
              Makes all relations visible that exist in the model and
              that are connected to the selected model element.
              </para>

					</listitem>

					<listitem>

						<para><literal>Remove all Relations</literal>. 
              Only appears where the 
              selected model element is a class or interface.
              Removes all connected relations from the diagram 
              (without removing them from the model).
              </para>

					</listitem>
				</itemizedlist>

			</section>

			<section>

				<title>Show</title>

				<para>This sub-menu only appears with certain model elements. It 
          is completely context dependent. There are many possible 
          entries, depending on the selected model element and its 
          state.</para>

				<itemizedlist>

					<listitem>

						<para><literal>Hide Extension Point 
              Compartment</literal>. Only appears when the extension 
              point compartment of a use case is displayed. Hides the 
              compartment.</para>

					</listitem>

					<listitem>

						<para><literal>Show Extension Point 
              Compartment</literal>. Only appears when the extension 
              point compartment of a use case is hidden. Displays the 
              compartment.</para>

					</listitem>

					<listitem>

						<para><literal>Hide All Compartments</literal>. Only 
              appears when both attribute and operation compartments 
              are displayed on a class or object. Hides both 
              compartments.</para>

					</listitem>

					<listitem>

						<para><literal>Show All Compartments</literal>. Only 
              appears when both attribute and operation compartments 
              are hidden on a class or object. Displays both 
              compartments.</para>

					</listitem>

					<listitem>

						<para><literal>Hide Attribute Compartment</literal>. Only 
              appears when the attribute compartment of a class or 
              object is displayed. Hides the compartment.</para>

					</listitem>

					<listitem>

						<para><literal>Show Attribute Compartment</literal>. Only 
              appears when the attribute compartment of a class or 
              object is hidden. Displays the compartment.</para>

					</listitem>

					<listitem>

						<para><literal>Hide Operation Compartment</literal>. Only 
              appears when the operation compartment of a class or 
              object is displayed. Hides the compartment.</para>

					</listitem>

					<listitem>

						<para><literal>Show Operation Compartment</literal>. Only 
              appears when the operation compartment of a class or 
              object is hidden. Displays the compartment.</para>

					</listitem>

					<listitem>

						<para><literal>Hide Enumeration Literal Compartment</literal>. Only 
              appears when the enumeration literal compartment 
              of an enumeration 
              is displayed. Hides the compartment.</para>

					</listitem>

					<listitem>

						<para><literal>Show Enumeration Literal Compartment</literal>. Only 
              appears when the enumeration literal compartment of an enumeration
              is hidden. Displays the compartment.</para>

					</listitem>

					<listitem>

						<para><literal>Show All Edges</literal>. Only appears on 
              a class. Displays all associations (to shown model elements) 
              that are not shown yet. This is the same function as the 
              &quot;add to Diagram&quot; on the asociation in the 
              explorer context menu. currently.</para>

					</listitem>

					<listitem>

						<para><literal>Hide All Edges</literal>. Only appears on 
              a class. Hides all associations. This is the same 
              function as <quote>Remove from Diagram</quote> on all the 
              associations of this class.</para>

					</listitem>

					<listitem>

						<para><literal>Hide Stereotype</literal>. Only appears 
              when the Stereotype of a package is displayed. Hides the 
              stereotype.</para>

					</listitem>

					<listitem>

						<para><literal>Show Stereotype</literal>. Only appears 
              when the Stereotype of a package is hidden. Displays the 
              stereotype.</para>

					</listitem>

					<listitem>

						<para><literal>Hide Visibility</literal>. Only appears 
              when the visibility of a package is displayed. Hides the 
              visibility.</para>

					</listitem>

					<listitem>

						<para><literal>Show Visibility</literal>. Only appears 
              when the visibility of a package is hidden. Displays the 
              visibility.</para>

					</listitem>
				</itemizedlist>

			</section>

			<section>

				<title>Modifiers</title>

				<para>This sub-menu only appears with class, interface, 
          package and use case model elements. It is used to set or clear 
          the values of the various modifiers available.</para>

				<itemizedlist>

					<listitem>

						<para><literal>Abstract</literal>. Set for an abstract 
              model element.</para>

					</listitem>

					<listitem>

						<para><literal>Leaf</literal>. Set for a final model element, 
              i.e. one with no sub-model elements.</para>

					</listitem>

					<listitem>

						<para><literal>Root</literal>. Set for a root model element, 
              i.e. one with no super-model elements.</para>

					</listitem>

					<listitem>

						<para><literal>Active</literal>. Set for a model element with 
              dynamic behavior.</para>

						<note>

							<para>This really ought to be set automatically for 
                model elements with state machines or activity 
                diagrams.</para>

						</note>

					</listitem>

				</itemizedlist>

			</section>

			<section>

				<title>Multiplicity</title>

				<para>This sub-menu only appears with association model elements, 
          when clicking at one end of the association. It is used to 
          control the multiplicity at the end of the association 
          nearest the mouse click point. There are only four entries, a 
          sub-set of the range of multiplicities that are available 
          through the property sheet of a association end (see 
          <xref
						xlink:href="s1.ref.association_end_use_case" />).</para>

				<itemizedlist>

					<listitem>

						<para>
							<literal>1</literal>
						</para>

					</listitem>

					<listitem>

						<para>
							<literal>0..1</literal>
						</para>

					</listitem>

					<listitem>

						<para>
							<literal>1..*</literal>
						</para>

					</listitem>

					<listitem>

						<para>
							<literal>0..*</literal>
						</para>

					</listitem>

				</itemizedlist>

			</section>

			<section>

				<title>Aggregation</title>

				<para>This sub-menu only appears with association model elements, 
          when clicking at one end of the association. It is used to 
          control the aggregation at the end of the association nearest 
          the mouse click point. There are three entries.</para>

				<itemizedlist>

					<listitem>

						<para><literal>none</literal>. Remove any 
              aggregation.</para>

					</listitem>

					<listitem>

						<para><literal>aggregate</literal>. Make this end a 
              shared aggregation (loosely known as an 
              <quote>aggregation</quote>).</para>

					</listitem>

					<listitem>

						<para><literal>composite</literal>. Make this end a 
              composite aggregation (loosely known as a 
              <quote>composition</quote>).</para>

					</listitem>

				</itemizedlist>

				<caution>

					<para>UML requires that an end with a composition 
            relationship must have a multiplicity of 1 (the 
            default).</para>

				</caution>

			</section>

			<section>

				<title>Navigability</title>

				<para>This sub-menu only appears with association model elements, 
          when clicking at one end of the association. It is used to 
          control the navigability of the association. There are three 
          entries.</para>

				<itemizedlist>

					<listitem>

						<para><literal>bidirectional</literal>. Make the 
              association navigable in both directions.</para>

					</listitem>

					<listitem>

						<para><literal>&lt;class1&gt; to 
              &lt;class2&gt;</literal>. Make the association navigable 
              only from &lt;class1&gt; to &lt;class2&gt;. In other 
              words &lt;class1&gt; can reference &lt;class2&gt; but not 
              the other way round.</para>

					</listitem>

					<listitem>

						<para><literal>&lt;class2&gt; to 
              &lt;class1&gt;</literal>. Make the association navigable 
              only from &lt;class2&gt; to &lt;class1&gt;. In other 
              words &lt;class2&gt; can reference &lt;class1&gt; but not 
              the other way round.</para>

					</listitem>

				</itemizedlist>

				<note>

					<para>UML does permit an association to be non-navigable in 
            both directions. ArgoUML will allow this, but you will have 
            to set each of the association ends navigation property, 
            reached from the property tab of the association - and the 
            diagram does not show any arrows in this case.</para>

					<para>This is considered bad design practice (it will 
            trigger a critic in ArgoUML), so is only of theoretical 
            interest.</para>

				</note>

				<note>

					<para>UML does not permit navigability from an interface to 
            a class. ArgoUML does not prevent this.</para>

				</note>

			</section>

		</section>

		<section xml:id="s1.ref.notation">

			<title>Notation</title>

			<para>Notation is the textual representation 
        on the diagram of a modelelement or its properties.
        </para>

			<section>
				<title>Notation Languages</title>
				<para>ArgoUML supports showing notation in different languages.
        By default, all text is shown in UML notation, 
        but the menus contain an item to select between
        Java and UML.
        With plugin modules, 
        it is even possible to select other languages, 
        such as C++.
        </para>

				<para><xref xlink:href="fig.ref.notation_uml"
						 />
        shows a class in UML notation, while
        <xref
						xlink:href="fig.ref.notation_java"
					 />
        shows the same class in Java notation. 
        </para>

				<figure float="1" xml:id="fig.ref.notation_uml">

					<title>A class in UML notation</title>

					<screenshot><mediaobject><imageobject>
          <imagedata align="center" fileref="images/reference/notation_uml.png" format="PNG" /></imageobject></mediaobject></screenshot>
				</figure>

				<figure float="1" xml:id="fig.ref.notation_java">

					<title>A class in Java notation</title>

					<screenshot><mediaobject><imageobject>
          <imagedata align="center" fileref="images/reference/notation_java.png" format="PNG" /></imageobject></mediaobject></screenshot>
				</figure>

			</section>

			<section>
				<title>Notation Editing on the diagram</title>

				<para>Most text shown on a diagram may be edited by
        double-clicking button&nbsp;1 on the text. 
        This causes a edit box to be shown, 
        with the previous text selected,
        ready for amending.</para>

				<para>Also, the status bar of ArgoUML 
        (i.e. the small area at the bottom of the ArgoUML window),
        shows an help text that indicates the syntax of the text to be entered.
        Text entry can be concluded by pressing F2, 
        or for single-line fields, by pressing the enter key.
        Additionally, editing can be concluded by 
        clicking somewhere in the diagram outside the edit area.
        </para>

				<para>Editing notation on the diagram is a very powerful way
        to enter a lot of model-information in a very compact way. 
        It is e.g. possible to create an operation, 
        its stereotype,
        all parameters and their types, 
        and operation properties (visibility, concurrency), all
        at once by typing:</para>

				<programlisting>+Order(customerID : int,items : List) : void {sequential}</programlisting>

				<para>An association (e.g. between two classes) is showing many
        texts close to its middle and ends, 
        so it deserves some extra explanation.
        <xref
						xlink:href="fig.ref.notation_association"
					 /> shows two associations
        to clarify the following:
        </para>

				<figure float="1" xml:id="fig.ref.notation_association">

					<title>A couple of associations with adornments</title>

					<screenshot><mediaobject><imageobject>
          <imagedata align="center" fileref="images/reference/notation_association.png" format="PNG" /></imageobject></mediaobject></screenshot>
				</figure>

				<para>The association on the right shows that 
        invisible fields where text can be entered
        become visible once the modelelement is selected.
        The fields are indicated by blue rectangles - 
        double-click on them with mouse button&nbsp;1 to start editing.</para>

				<para>The visibility (the +, -, # or ~) is shown 
        together with the association-end name, 
        but it is not shown 
        for an unnamed association end.</para>

				<para>Likewise, the multiplicity is not shown if it is 1, 
        unless the setting 
        <literal>Show "1" multiplicities</literal>
        in the menu 
        <literal>File=&gt;Properties</literal>
        is checked.</para>

				<para>The example figure does not demonstrate this, but 
        stereotypes of an association are shown on the diagram, 
        but are not editable. 
        And stereotypes of association-ends are shown
        together with the association-end name.
        </para>

			</section>

			<section>
				<title>Notation Parsing</title>
				<para>(to be written)</para>
				<!-- TODO: Describe all Notation providers' syntax. -->
			</section>

		</section>

	</chapter>

	<chapter xml:id="ch.ref.detpane">

		<title>The Details Pane</title>

		<section>

			<title>Introduction</title>

			<para><xref xlink:href="fig.ref.details_pane"
				 /> shows the ArgoUML 
        window, with the details pane highlighted.</para>

			<figure float="1" xml:id="fig.ref.details_pane">

				<title>Overview of the details pane</title>

				<screenshot><mediaobject><imageobject>
          <imagedata align="center" fileref="images/reference/details_pane.png" format="PNG" /></imageobject></mediaobject></screenshot>
			</figure>

			<para>For any model element within the system, this pane is where 
        all its associated data is viewed and entered.</para>

			<para>The Pane has a series of tabs at the top, which are 
        selected by button&nbsp;1 click The body of a tab is a menu of items 
        to be checked, selected or entered specific to the particular 
        tab selected.</para>

			<para>Of these, the <literal>Properties</literal> Tab is by far 
        the most complex, with a different presentation for each 
        model element within the system. The detailed descriptions of the 
        properties tab for each model element are the subject of separate 
        chapters covering the model elements that may appear on the various 
        diagrams (see <xref
					xlink:href="ch.ref.entities" /> through 
        <xref
					xlink:href="ch.ref.entdeploy" />).</para>

		</section>

		<section xml:id="s1.ref.to_do">

			<title>To Do Item Tab</title>

			<para>This tab provides control over the various to-do items 
        created by the user, or raised automatically by the ArgoUML 
        critics (discussed in more detail in the section on the 
        <literal>Critique</literal> menu&#8212;see 
        <xref
					xlink:href="s1.ref.menu_critique" />). 
        <xref
					xlink:href="fig.ref.details_to_do"
					 /> shows a typical pane. 
        The to-do item is selected with button&nbsp;1 in the to-do pane (see 
        <xref
					xlink:href="ch.ref.todopane"
				 />) or by using the <literal>
        Critiques</literal> context sensitive pop-up menu on the 
        editing pane.</para>

			<figure float="1" xml:id="fig.ref.details_to_do">

				<title>Example of the <literal>To Do Item</literal> tab on 
          the properties pane</title>

				<screenshot><mediaobject><imageobject>
          <imagedata align="center" fileref="images/reference/details_to_do.png" format="PNG" /></imageobject></mediaobject></screenshot>
			</figure>

			<para>Customization of the critics behaviour is possible 
        through the <literal>Browse criticsâ€¦</literal> menu (see 
        <xref
					xlink:href="s2.ref.menu_browse_critics" />).</para>

			<para>The body of the tab describes the problem found by the 
        critic and outlines how it can be fixed. To the left are four 
        buttons.</para>

			<itemizedlist>

				<listitem>

					<para><guiicon>
							<inlinemediaobject>
								<imageobject>
									<imagedata align="center"
										fileref="images/icons/new_to_do_item.gif" format="GIF" />
								</imageobject>
							</inlinemediaobject>
						</guiicon>
						<literal>New To Do Itemâ€¦</literal> This launches a dialog 
            box (see <xref
							xlink:href="fig.ref.details_new_to_do"
						 />), 
            which allows you to create your own to-do item, with its 
            own headline (which appears in the to-do pane), priority 
            for the to-do pane, reference URL and detailed description 
            for further information.</para>

					<figure float="1" xml:id="fig.ref.details_new_to_do">

						<title>Dialog box for <literal>
              New To Do Item</literal></title>

						<screenshot><mediaobject><imageobject>
              <imagedata align="center" fileref="images/reference/details_new_to_do.png" format="PNG" /></imageobject></mediaobject></screenshot>
					</figure>

				</listitem>

				<listitem>

					<para><guiicon>
							<inlinemediaobject>
								<imageobject>
									<imagedata align="center"
										fileref="images/icons/resolve_item.gif" format="GIF" />
								</imageobject>
							</inlinemediaobject>
						</guiicon>
						<literal>Resolve Itemâ€¦</literal> This pops up a dialog 
            allowing the user to resolve the selected to-do item (see 
            <xref
							xlink:href="fig.ref.details_resolve_to_do"
						 />). This is 
            an important dialog, because it allows you to deal with 
            to-do items in ways other than the recommendation of the 
            to-do item (which is the whole point of their being 
            advisory).</para>

					<para>This dialog box is intended to be used for the 
            following reasons: deleting todo items that were manually 
            created, preventing a single critic to trigger on a single 
            object, and dismissing categories of todo items by lowering 
            design concerns or design goals.</para>

					<figure float="1" xml:id="fig.ref.details_resolve_to_do">

						<title>Dialog box for <literal>
              Resolve Item</literal></title>

						<screenshot><mediaobject><imageobject>
              <imagedata align="center" fileref="images/reference/details_resolve_to_do.png" format="PNG" /></imageobject></mediaobject></screenshot>
					</figure>

					<para>At the top are three radio-buttons, of which by 
            default the last is selected, labeled 1) <literal>It is not 
            relevant to my goals</literal>, 2) <literal>It is not of 
            concern at the moment</literal>, and 3) <literal>Reason 
            given below</literal>. If you choose the third of these you 
            should enter a reason in the main text box.</para>

					<tip>

						<para>If you wish to resolve a to-do item (that is 
              generated by a critic) by following its recommendations, 
              just make the recommended changes and the to-do item will 
              disappear of its own accord. There is no need to use this 
              dialog.</para>

					</tip>

					<warning>

						<para>The V0.20 version of ArgoUML implementation is 
              incomplete: The reason given is not stored when the 
              project is saved. And there is no way to retrieve todo 
              items that were resolved. So, it is not usefull to give a 
              reason at all.</para>

						<para>When a todo item generated by a critic is resolved, 
              then there is no way to undo this (unless by re-creating 
              the object that triggered the critic).</para>

					</warning>

				</listitem>

				<listitem>

					<para><guiicon>
							<inlinemediaobject>
								<imageobject>
									<imagedata align="center"
										fileref="images/icons/snooze_critic.gif" format="GIF" />
								</imageobject>
							</inlinemediaobject>
						</guiicon>
						<literal>Snooze Critic</literal> This suspends the activity 
            of the critic that generated the current to-do item. The 
            to-do item (and all others generated by the critic) will 
            disappear from the to-do pane.</para>

					<para>The critic will wake up after a period of time. 
            Initially this period is 10 minutes, but it doubles on each 
            successive application of the Snooze button. The critic can 
            be awakened explicitly through the <literal>
            Critique &gt; Browse Criticsâ€¦</literal> menu (see 
            <xref
							xlink:href="s2.ref.menu_browse_critics" />).</para>

					<tip>

						<para>Some common critics can fire the whole time as you 
              build a big diagram. Some users find it useful to snooze 
              these critics until the diagram has been completed.</para>

					</tip>

				</listitem>

			</itemizedlist>

			<section>

				<title>Wizards</title>

				<para>Some of the more common critics have a 
          <quote>wizard</quote> available to help in fixing the 
          problem. The wizard comprises a series of pages (one or more) 
          in the <literal>ToDo Item</literal> tab that step you through 
          the changes. Start the wizard by clicking the 
          <literal>Next&gt;</literal> button.
          </para>

				<figure float="1" xml:id="fig.ref.details_wizard">

					<title>Example of a <literal>Wizard</literal></title>

					<screenshot><mediaobject><imageobject>
            <imagedata align="center" fileref="images/reference/details_wizard.png" format="PNG" /></imageobject></mediaobject></screenshot>
				</figure>

				<para>The wizard is driven through the first three buttons at 
          the bottom of the <literal>ToDo Item</literal> tab.</para>

				<itemizedlist>

					<listitem>

						<para><literal>&lt;Back</literal>. This will take you back to 
              the previous step in the wizard. Grayed out if this is 
              the first step.</para>

					</listitem>

					<listitem>

						<para><literal>Next&gt;</literal>. This will take you back to 
              the next step in the wizard. Grayed out if this is the 
              last step.</para>

					</listitem>

					<listitem>

						<para><literal>Finish</literal>. This will commit the 
              changes you have made through the wizard in previous 
              steps, and/or use the defaults for all next steps.</para>

					</listitem>

				</itemizedlist>

				<note>

					<para>Not all to-do items have wizards. If there is no 
            wizard all three buttons will remain grayed out.</para>

				</note>

				<para>
          The ArgoUML wizards are <emphasis>non-modal</emphasis>, i.e. 
          once started, you may select other todo items, 
          or do some other actions, and all the while the wizard will
          remeber where it was, so if you return to the todo item,
          the wizard will indicate the same step it was on when you left it.
          </para>

			</section>

			<section>

				<title>The Help Button</title>

				<para>There is one remaining button at the bottom of the 
          <literal>To Do Item</literal> tab, labeled <literal>
          Help</literal>. This will fire up a browser to a URL with 
          further help.</para>

				<!--warning>

            <para>In the V0.20 release of ArgoUML the URLs are 
            generally invalid. The few that are valid have no 
            information.</para>

          </warning-->

			</section>

		</section>

		<section xml:id="s1.ref.proptab">

			<title>Properties Tab</title>

			<para>Through this tab, the properties of model elements selected in 
        the explorer or editing pane may be set. The properties of an 
        model element may be displayed in one of the following ways:</para>

			<orderedlist>

				<listitem>

					<para>Selection of the model element in the explorer or editing 
            panes, followed by selection of the properties tab in the 
            details pane; or</para>

				</listitem>

				<listitem>

					<para>Navigation buttons cause different model elements to be 
            selected. I.e. the <literal>Go Up</literal> button on the 
            properties tab, the <literal>Navigate Back</literal> and 
            <literal>Navigate Forward</literal> buttons in the main 
            tool bar, and the various menu-items under <literal>Edit - 
            Select</literal>.</para>

				</listitem>

			</orderedlist>

			<para><xref xlink:href="fig.ref.details_properties"
				 /> shows a 
        typical properties tab for a model element in ArgoUML (in this case 
        a class).</para>

			<figure float="1" xml:id="fig.ref.details_properties">

				<title>A typical <literal>Properties</literal> tab on the 
          details pane</title>

				<screenshot><mediaobject><imageobject>
          <imagedata align="center" fileref="images/reference/details_properties.png" format="PNG" /></imageobject></mediaobject></screenshot>
			</figure>

			<para>At the top left is the icon and name of the type of 
        model element (i.e. the UML metaclass, not the actual name of this 
        particular model element). In this example the property tab is for a 
        class.</para>

			<para>To the right of this is a toolbar of icons relevant to 
        this property tab. The first one is always navigation <literal>
        Go up</literal>. The last is always <literal>Delete</literal> 
        to delete the selected model element from the model. The ones in 
        between depend on the model element.</para>

			<para>The remainder of the tab comprises fields, laid out in 
        two or three columns. Each field has a label to its left. The 
        fields may be text boxes, text areas, drop down selectors, 
        radio boxes and check boxes. In most (but not all cases) the 
        values can be changed. In the case of text boxes this is 
        sometimes by just typing the required value.</para>

			<para>However for many text boxes and text areas, data entry is 
        via a context sensitive pop-up menu (using button&nbsp;2 click), 
        which offers options to add a new entry, delete an entry or 
        move entries up and down (in text areas with multiple 
        entries).</para>

			<para>The first field is almost always a text field <literal>
        Name</literal>, where the name of the specific model element can be 
        entered. The remaining fields vary depending on the model element 
        selected.</para>

			<para>The detailed property sheets for all ArgoUML model elements 
        are discussed in separate chapters for each of the diagram 
        types (use case diagram (<xref
					xlink:href="ch.ref.entusecase" />, 
        class diagram (<xref
					xlink:href="ch.ref.entclass" />, sequence 
        diagram (<xref
					xlink:href="ch.ref.entseq" />, statechart diagram (
        <xref
					xlink:href="ch.ref.entstate" />, collaboration diagram (
        <xref
					xlink:href="ch.ref.entcollab" />, activity diagram (
        <xref
					xlink:href="ch.ref.entactiv" />, deployment diagram (
        <xref
					xlink:href="ch.ref.entdeploy"
					 />). Property sheets for 
        model elements that are common to all diagram types have their own 
        chapter (<xref
					xlink:href="ch.ref.entities" />).</para>

			<caution>

				<para>ArgoUML will always try to squeeze all fields on to the 
          property sheet. If the size of the property tab is too small, 
          it may become unusable. The solution is to either enlarge the 
          property tab by enlarging the main window, or by moving the 
          dividers to left and top.</para>

			</caution>

		</section>

		<section xml:id="s2.ref.documentation_tab">

			<title>Documentation Tab</title>

			<para>Within the UML&nbsp;1.4 standard, all model elements are children 
        of the <literal>Element</literal> metaclass. The <literal>
        Element</literal> metaclass defines a tagged value <literal>
        documentation</literal> for comment, description or explanation 
        of the element to which it is attached. Since this tagged value 
        applies to every model element, it is given its own tab in the 
        details pane, rather than being part of the <literal>
        Tagged Values</literal> tab.</para>

			<para><xref xlink:href="fig.ref.details_documentation"
				 /> shows a 
        typical documentation tab for a model element in ArgoUML.</para>

			<figure float="1" xml:id="fig.ref.details_documentation">

				<title>A typical <literal>Documentation</literal> tab on the 
          details pane</title>

				<screenshot><mediaobject><imageobject>
          <imagedata align="center" fileref="images/reference/details_documentation.png" format="PNG" /></imageobject></mediaobject></screenshot>
			</figure>

			<para>As you can see, many more fields have been added 
        to the Documentation field alone. The other fields 
        similarly store their information under tagged values:
        <literal>author</literal>,
        <literal>version</literal>, 
        <literal>since</literal>, 
        <literal>deprecated</literal>, 
        <literal>see</literal>.
        </para>

			<para>The fields on this tab are the same for all 
        model elements.</para>

			<para>Since UML comments are a kind of documentation, 
        they are also shown on this tab, with name and body.</para>

			<itemizedlist>

				<listitem>

					<para><literal>Author:</literal> A text box for the author 
            of the documentation.</para>

				</listitem>

				<listitem>

					<para><literal>Version:</literal> A text box for the 
            version of the documentation.</para>

				</listitem>

				<listitem>

					<para><literal>Since:</literal> A text box to show how long 
            the documentation has been valid.</para>

				</listitem>

				<listitem>

					<para><literal>Deprecated:</literal> A check box to 
            indicate whether this model element is deprecated (i.e. planned 
            for removal in future versions of the design model).</para>

				</listitem>

				<listitem>

					<para><literal>See:</literal> Pointers to documentation 
            outside the system.</para>

				</listitem>

				<listitem>

					<para><literal>Documentation:</literal> Literal text of any 
            documentation.</para>

				</listitem>

				<listitem>

					<para><literal>Comment Name:</literal> 
            The names of all comments attached to the modelelement.
            </para>

				</listitem>

				<listitem>

					<para><literal>Body:</literal> 
            The bodies of all comments attached to this modelelement.
            </para>

				</listitem>

			</itemizedlist>

			<tip>

				<para>ArgoUML is not primarily a documentation system. For 
          model elements that require heavy documentation, notably use 
          cases, the use of the <literal>See:</literal> field to point 
          to external documents is more practical.</para>

			</tip>

		</section>

		<section>

			<title>Presentation Tab</title>

			<para>This tab provides some limited control over the graphical 
        representation of model elements in the diagram in the editing 
        pane.</para>

			<para>Model elements that do not have any specific direct graphical 
        representation on the screen (beyond their textual description) 
        do not have style tabs of their own. For example the style 
        sheet of an operation on a class will be downlighted.</para>

			<para>Style sheets vary a little from model element to model element, but 
        <xref
					xlink:href="fig.ref.details_style"
				 /> shows a typical style 
        tab for a model element in ArgoUML (in this case a class).</para>

			<figure float="1" xml:id="fig.ref.details_style">

				<title>A typical <literal>Presentation</literal> tab on the 
          details pane</title>

				<screenshot><mediaobject><imageobject>
          <imagedata align="center" fileref="images/reference/details_style.png" format="PNG" /></imageobject></mediaobject></screenshot>
			</figure>

			<para>There may be further fields in some cases, e.g. for a 
        package, but most fields are common to many model elements.</para>

			<itemizedlist>

				<listitem>
					<para><literal>Path</literal>
              This checkbox allow to display or hide the path  
              in front of the name of the modelelement. 
              It is shown in UML notation with <literal>::</literal>
              seperators. E.g. the ArgoUML Main class would be shown as: 
              <literal>org::argouml::application::Main</literal>.
            </para>
				</listitem>

				<listitem>
					<para><literal>Attributes</literal>
            This checkbox allows to hide or show the attributes compartment of 
            a class.
            </para>
				</listitem>

				<listitem>
					<para><literal>Operation</literal>
            This checkbox allows to hide or show the operations compartment of 
            a class or interface.
            </para>
				</listitem>

				<listitem>
					<para><literal>Stereotype</literal>
            This checkbox allows to reveal or hide the stereotypes of 
            a package, shown above the name.
            </para>
				</listitem>

				<listitem>
					<para><literal>Visibility</literal>
            This checkbox allows to hide the visibility of 
            a package. 
            The visibility is shown in UML notation as +, -, # or ~.
            </para>
				</listitem>

				<listitem>
					<para><literal>Extension Points</literal>
            This checkbox allows to reveal or hide 
            the extensions points compartment of 
            a usecase.
            </para>
				</listitem>

				<listitem>
					<para><literal>Bounds:</literal> This defines the corners 
            of the bounding box for a 2D model element. It comprises four 
            numbers separated by commas. These four numbers are 
            respectively: i) the X coordinate of the upper left corner 
            of the box; ii) the Y coordinate of the upper left corner 
            of the box; iii) the width of the box; and iv) the height 
            of the box. All units are pixels on the editing pane.</para>

					<para>This field has no effect on 1D model elements that link 
            other model elements (associations, generalizations etc), since 
            their position is constrained by their connectedness. In 
            this case the field is downlighted.</para>

				</listitem>

				<listitem>

					<para><literal>Fill:</literal> This drop-down selector 
            specifies the fill color for 2D model elements. It is not 
            present for line model elements. Selecting <literal>No 
            Fill</literal> makes the model element transparant. Selecting 
            <literal>Custom</literal> allows to create other colors 
            then the ones listed. It causes the color selector dialog 
            box to appear, see 
            <xref
							xlink:href="fig.ref.details_style_colorpicker1" />.</para>

				</listitem>

				<listitem>

					<para><literal>Line:</literal> This drop-down selector 
            specifies the line color for model elements. Selecting <literal>
            No Fill</literal> makes the model element transparant. Selecting 
            <literal>Custom</literal> allows to create other colors 
            then the ones listed. It causes the color selector dialog 
            box to appear, see 
            <xref
							xlink:href="fig.ref.details_style_colorpicker1" />.</para>

				</listitem>

			</itemizedlist>

			<figure float="1" xml:id="fig.ref.details_style_colorpicker1">

				<title>The <literal>Custom Fill/Line Color</literal> dialog 
          box</title>

				<screenshot><mediaobject><imageobject>
          <imagedata align="center" fileref="images/reference/details_style_colorpicker1.png" format="PNG" /></imageobject></mediaobject></screenshot>
			</figure>

			<figure float="1" xml:id="fig.ref.details_style_colorpicker2">

				<title>The <literal>Custom Fill/Line Color</literal> dialog 
          box</title>

				<screenshot><mediaobject><imageobject>
          <imagedata align="center" fileref="images/reference/details_style_colorpicker2.png" format="PNG" /></imageobject></mediaobject></screenshot>
			</figure>

			<figure float="1" xml:id="fig.ref.details_style_colorpicker3">

				<title>The <literal>Custom Fill/Line Color</literal> dialog 
          box</title>

				<screenshot><mediaobject><imageobject>
          <imagedata align="center" fileref="images/reference/details_style_colorpicker3.png" format="PNG" /></imageobject></mediaobject></screenshot>
			</figure>

		</section>

		<section>

			<title>Source Tab</title>

			<para>This tab shows the source code that 
        will be generated for this model element, in the selected language. 
        ArgoUML generates the code e.g. for classes and interfaces. 
        The code shown here, may be saved in the indicated files 
        with the aid of the functions in the Generation menu.
        </para>

			<figure float="1" xml:id="fig.ref.details_source">

				<title>The Source Tab of a class.</title>

				<screenshot><mediaobject><imageobject>
          <imagedata align="center" fileref="images/reference/details_source.png" format="PNG" /></imageobject></mediaobject></screenshot>
			</figure>

			<para>Any code you add will be lost - that 
        is not the intention of ArgoUML - use an IDE instead.
        </para>

			<para>The dropdown at the right allows selection of the output file. 
        This function is not very useful for languages 
        that generate all code for a class within one file,
        but serves its purpose for e.g. C++, where a .h and .cpp file
        are generated. See the figure below.</para>

			<figure float="1" xml:id="fig.ref.details_source_cpp">

				<title>A C++ example.</title>

				<screenshot><mediaobject><imageobject>
          <imagedata align="center" fileref="images/reference/details_source_cpp.png" format="PNG" /></imageobject></mediaobject></screenshot>
			</figure>

		</section>

		<section xml:id="s1.ref.details_constraints">

			<title>Constraints Tab</title>

			<para>Constraints are one of the extension mechanisms provided 
        for UML. ArgoUML is equipped with a powerful constraint editor 
        based on the <emphasis>Object Constraint Language 
        (OCL)</emphasis> defined in the UML&nbsp;1.4 standard.</para>

			<caution>

				<para>The OCL editor implementation for ArgoUML V0.24 
          doesn&#039;t support OCL constraints for elements other than 
          Classes and Features.</para>

				<para>This is something of a general restriction of OCL. 
          Although the UML specification claims that there may be a 
          constraint for every model element, the OCL specification 
          only defines classes/interfaces and operations as allowable 
          contexts.</para>

				<para>It is not before OCL 2.0 that a more general definition 
          of allowable contexts is introduced. The key issue is that 
          for each context definition you need to define what is the 
          contextualClassifier, i.e., the classifier that will be 
          associated with the self keyword. The creators of the OCL 
          specification claim that this is not an issue for the OCL 
          specification, but rather for UML or some integration task 
          force. Conversely, it seems that the UML specification people 
          seem to expect this to be defined in the OCL specification 
          (which is why we did a first step in that direction in OCL 
          2.0).</para>

				<para>So, to cut a long story short, it appeared that the 
          simplest solution for ArgoUML at the moment would be to 
          enable the OCL property panel only for those model elements 
          for which there actually exists a definition of the 
          contextualClassifier in OCL 1.4. These are (s. above) 
          Class/Interface and Feature.</para>

			</caution>

			<para>The standard pre-defines a small number of constraints 
        (for example the <literal>xor</literal> constraint over a set 
        of associations indicating that only one may be manifest for 
        any particular instance).</para>

			<para>The standard also envisages a number of circumstances 
        where general purpose constraints may be useful:</para>

			<itemizedlist>

				<listitem>

					<para>To specify invariants on classes and types in the 
            class model;</para>

				</listitem>

				<listitem>

					<para>To specify type invariants for stereotypes;</para>

				</listitem>

				<listitem>

					<para>To describe pre-conditions and post-conditions on operations 
            and methods;</para>

				</listitem>

				<listitem>

					<para>To describe guards;</para>

				</listitem>

				<listitem>

					<para>As a navigation language; and</para>

				</listitem>

				<listitem>

					<para>To specify constraints on operations.</para>

				</listitem>

			</itemizedlist>

			<para><xref xlink:href="fig.ref.details_constraints"
				 /> shows a 
        typical constraint tab for a model element in ArgoUML (in this case 
        a class).</para>

			<figure float="1" xml:id="fig.ref.details_constraints">

				<title>A typical <literal>Constraints</literal> tab on the 
          details pane</title>

				<screenshot><mediaobject><imageobject>
          <imagedata align="center" fileref="images/reference/details_constraints.png" format="PNG" /></imageobject></mediaobject></screenshot>
			</figure>

			<para>Along the top of the tab are a series of icons.</para>

			<itemizedlist>

				<listitem>

					<para><guiicon>
							<inlinemediaobject>
								<imageobject>
									<imagedata align="center"
										fileref="images/icons/new_constraint.gif" format="GIF" />
								</imageobject>
							</inlinemediaobject>
						</guiicon>
						<literal>New Constraint</literal>. This creates a new 
            constraint and launches the constraint editor in the 
            <literal>Constraints tab</literal> for that new constraint 
            (see <xref
							xlink:href="s2.ref.details_constraint_editor"
						 />). 
            The new constraint is created with a context declaration 
            for the currently selected model element.</para>

					<warning>

						<para>It seems logical, that when a new constraint is 
              created, it needs to be edited. But ArgoUML V0.24 fails 
              to start the OCL editor upon creation; you have to do 
              this by primo selecting the new constraint first, secundo 
              rename it, and tertio press the <literal>Edit 
              Constraint</literal> button. It is essental for 
              successfully creating a constraint to follow these 4 
              steps accurately: create, select, rename, edit. The step 
              to rename is necessary, because the validity check will 
              refuse the constraint if its name differs from the name 
              mentioned in the constraint text. For the same reason, 
              renaming a constraint afterwards is impossible.</para>

					</warning>

				</listitem>

				<listitem>

					<para><guiicon>
							<inlinemediaobject>
								<imageobject>
									<imagedata align="center"
										fileref="images/icons/delete_constraint.gif" format="GIF" />
								</imageobject>
							</inlinemediaobject>
						</guiicon>
						<literal>Delete Constraint</literal>. The constraint 
            currently selected in the <literal>
            Constraint Name</literal> box (see below) is deleted.</para>

					<caution>

						<para>In V0.24 of ArgoUML this button is not downlighted 
              when it is not functional, i.e. when no constraint is 
              selected.</para>

					</caution>

				</listitem>

				<listitem>

					<para><guiicon>
							<inlinemediaobject>
								<imageobject>
									<imagedata align="center"
										fileref="images/icons/edit_constraint.gif" format="GIF" />
								</imageobject>
							</inlinemediaobject>
						</guiicon>
						<literal>Edit Constraint</literal>. This launches the 
            constraint editor in the <literal>Constraints</literal> tab 
            (see <xref
							xlink:href="s2.ref.details_constraint_editor"
							 />). 
            The editor is invoked on the constraint currently selected 
            in the <literal>Constraint Name</literal> box.</para>

					<caution>

						<para>In V0.24 of ArgoUML this button is not downlighted 
              when it is not functional, i.e. when no constraint is 
              selected.</para>

					</caution>

				</listitem>

				<listitem>

					<para><guiicon>
							<inlinemediaobject>
								<imageobject>
									<imagedata align="center"
										fileref="images/icons/configure_constraints.gif"
										format="GIF" />
								</imageobject>
							</inlinemediaobject>
						</guiicon>
						<literal>Configure Constraint Editor</literal>. This a 
            dialog to configure options in the constraint editor (see 
            <xref
							xlink:href="fig.ref.details_constraints_dialog" />
            ).</para>

					<figure float="1" xml:id="fig.ref.details_constraints_dialog">

						<title>Dialog box for configuring constraints</title>

						<screenshot><mediaobject><imageobject>
              <imagedata align="center" fileref="images/reference/details_constraints_dialog.png" format="PNG" /></imageobject></mediaobject></screenshot>
					</figure>

					<para>The dialog box has a check box for the following 
            option.</para>

					<itemizedlist>

						<listitem>

							<para><literal>Check type conformance of OCL 
                constraints</literal>. OCL is strictly typed. At the 
                early stages of design it may be helpful to disable 
                type checking, rather than follow through all the 
                detailed specification needed to get type 
                consistency.</para>

						</listitem>

					</itemizedlist>

					<para>At the bottom are two buttons, labeled <literal>
            OK</literal> (to accept the option changes) and <literal>
            Cancel</literal> (to discard the changes).</para>

				</listitem>

			</itemizedlist>

			<para>The main body of the constraints tab comprises two boxes, 
        a smaller to the left and a larger one to the right. The two 
        are separated by two small arrow buttons which control the size 
        of the boxes.</para>

			<itemizedlist>

				<listitem>

					<para><guiicon>
							<inlinemediaobject>
								<imageobject>
									<imagedata align="center"
										fileref="images/icons/constraints_left.gif" format="GIF" />
								</imageobject>
							</inlinemediaobject>
						</guiicon>
						<literal>Shrink Left</literal>. Button&nbsp;1 click on this icon 
            shrinks the box on the left. Its effect may be reversed by 
            use of the <literal>Shrink Right</literal> button (see 
            below).</para>

				</listitem>

				<listitem>

					<para><guiicon>
							<inlinemediaobject>
								<imageobject>
									<imagedata align="center"
										fileref="images/icons/constraints_right.gif" format="GIF" />
								</imageobject>
							</inlinemediaobject>
						</guiicon>
						<literal>Shrink Right</literal>. Button&nbsp;1 click on this 
            icon shrinks the box on the right. Its effect may be 
            reversed by use of the <literal>Shrink Left</literal> 
            button (see above).</para>

				</listitem>

			</itemizedlist>

			<para>Finer control can be achieved by using button&nbsp;1 motion to 
        drag the dividing bar to left and right.</para>

			<para>The box on the left is titled <literal>Constraint 
        Name</literal> and lists all the constraints (if any) so far 
        defined for the selected model element. A constraint may be selected 
        by button&nbsp;1 click.</para>

			<para>The box on the right is labeled <literal>
        Preview</literal> and contains the text of the constraint. This 
        box only shows some contents if a constraint is selected. Where 
        a constraint is too large for the box, a scroll bar is provided 
        to the right.</para>

			<section xml:id="s2.ref.details_constraint_editor">

				<title>The Constraint Editor</title>

				<para>This is invoked through the use of the <literal>
          Edit Constraint</literal> button on the main <literal>
          Constraints</literal> tab. The constraint editor takes up the 
          whole tab (see 
          <xref
						xlink:href="fig.ref.details_constraint_editor" />).</para>

				<figure float="1" xml:id="fig.ref.details_constraint_editor">

					<title>Dialog box for configuring constraints</title>

					<screenshot><mediaobject><imageobject>
            <imagedata align="center" fileref="images/reference/details_constraint_editor.png" format="PNG" /></imageobject></mediaobject></screenshot>
				</figure>

				<para>Along the top of the tab are a series of icons.</para>

				<itemizedlist>

					<listitem>

						<para><guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/cancel_edit_constraint.gif"
											format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Cancel Edit Constraint</literal>. This exits the 
              constraint editor without saving any changes and returns 
              to the main <literal>Constraints</literal> tab.</para>

					</listitem>

					<listitem>

						<para><guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/check_constraint.gif" format="GIF"
										 />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Check OCL Syntax</literal>. This button invokes 
              a full syntax check of the OCL written in the editor. If 
              the syntax is valid, the constraint is saved, and control 
              returns to the main <literal>Constraints</literal> tab. 
              If the syntax is not valid, a dialog box explains the 
              problem.</para>

						<warning>

							<para>Whether type checking is included should be 
                configurable with the <literal>
                Configure Constraint Editor</literal> button (see 
                below). But ArgoUML V0.20 does always check, and 
                refuses to accept any constraint with the slightest 
                error.</para>

						</warning>

					</listitem>

					<listitem>

						<para><guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/configure_constraints.gif"
											format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Configure Constraint Editor</literal>. This a 
              dialog to configure options in the constraint editor. It 
              is also available in the main <literal>
              Constraints</literal> tab and is discussed in detail 
              there (see <xref
								xlink:href="s1.ref.details_constraints" />
              ).</para>

					</listitem>

				</itemizedlist>

				<para>To the right of the toolbar is a check box labeled 
          <literal>Syntax Assistant</literal> (unchecked by default), 
          which will enable the syntax assistant in the constraint 
          editor.</para>

				<para>If the syntax assistant is enabled, six drop down menus 
          are provided in a row immediately below the toolbar. These 
          provide standard templates for OCL that, when selected, will 
          be inserted into the constraint being edited.</para>

				<para>The syntax assistant can be made floating in a separate 
          window by button&nbsp;1 motion on the small divider area to the 
          left of the row of drop-down menus.</para>

				<itemizedlist>

					<listitem>

						<para><literal>General</literal>. General OCL 
              constructors. Entries: <literal>inv</literal> (inserts an 
              invariant); <literal>pre</literal> (inserts a 
              pre-condition); <literal>post</literal> (inserts a 
              post-condition); <literal>self</literal> (inserts a 
              self-reference); <literal>@pre</literal> (inserts a 
              reference to a value at the start of an operation); and 
              <literal>result</literal> (inserts a reference to a 
              previous result).</para>

					</listitem>

					<listitem>

						<para><literal>Basic Operators</literal>. Relational 
              operators and parentheses. Entries: <literal>=</literal>; 
              <literal>&lt;&gt;</literal>; <literal>&lt;</literal>; 
              <literal>&gt;</literal>; <literal>&lt;=</literal>; 
              <literal>&gt;=</literal>; and <literal>
              ()</literal>.</para>

					</listitem>

					<listitem>

						<para><literal>Numbers</literal>. Arithmetic operators 
              and functions. Entries: <literal>+</literal>; <literal>
              -</literal>; <literal>*</literal>; <literal>/</literal>; 
              <literal>mod</literal>; <literal>div</literal>; <literal>
              abs</literal>; <literal>max</literal>; <literal>
              min</literal>; <literal>round</literal>; and <literal>
              floor</literal>.</para>

					</listitem>

					<listitem>

						<para><literal>Strings</literal>. String functions. 
              Entries: <literal>concat</literal>; <literal>
              size</literal>; <literal>toLower</literal>; <literal>
              toUpper</literal>; and <literal>
              substring</literal>.</para>

					</listitem>

					<listitem>

						<para><literal>Booleans</literal>. Logical functions. 
              Entries: <literal>or</literal>; <literal>and</literal>; 
              <literal>xor</literal>; <literal>not</literal>; <literal>
              implies</literal>; and <literal>
              if then else</literal>.</para>

					</listitem>

					<listitem>

						<para><literal>Collections</literal>. Operators and 
              functions on collections&#8212;bags, sets and sequences. The 
              large number of functions are organized into 
              sub-groups.</para>

						<itemizedlist>

							<listitem>

								<para><literal>General</literal>. Functions that 
                  apply to all types of collection. Entries: <literal>
                  Collection {}</literal> (insert a new collection); 
                  <literal>Set {}</literal> (insert a a new set); 
                  <literal>Bag {}</literal> (insert a new bag); 
                  <literal>Sequence {}</literal> (insert a new 
                  sequence); <literal>size</literal>; <literal>
                  count</literal>; <literal>isEmpty</literal>; <literal>
                  notEmpty</literal>; <literal>includes</literal>; 
                  <literal>includesAll</literal>; <literal>
                  iterate</literal>; <literal>exists</literal>; 
                  <literal>forAll</literal>; <literal>
                  collect</literal>; <literal>select</literal>; 
                  <literal>reject</literal>; <literal>union</literal>; 
                  <literal>intersection</literal>; <literal>
                  including</literal>; <literal>excluding</literal>; 
                  and <literal>sum</literal>.</para>

							</listitem>

							<listitem>

								<para><literal>Sets</literal>. Operators and 
                  functions that apply only to sets. Entries: <literal>
                  -</literal> (set difference); and <literal>
                  symmetricDifference</literal>.</para>

							</listitem>

							<listitem>

								<para><literal>Sequences</literal>. Functions that 
                  apply to sequences. Entries: <literal>
                  first</literal>; <literal>last</literal>; <literal>
                  at</literal>; <literal>append</literal>; <literal>
                  prepend</literal>; and <literal>
                  subSequence</literal>.</para>

							</listitem>

						</itemizedlist>

					</listitem>

				</itemizedlist>

				<para>The remainder of the tab comprises a writable text area 
          containing the text to be edited. The mouse buttons have 
          their standard behavior within an editable text area (see 
          <xref
						xlink:href="s1.ref.mouse" />).</para>

				<para>In addition, cut, copy and paste operations may be 
          invoked through the keyboard shortcuts <literal>
          Ctrl-X</literal>, <literal>Ctrl-C</literal> and <literal>
          Ctrl-V</literal> respectively.</para>

				<!--warning>

            <para>There is a known problem with the V0.20 release of 
            ArgoUML. The <literal>Cut</literal>, <literal>
            Copy</literal> and <literal>Paste</literal> functions on 
            the <literal>Edit</literal> menu cannot be used within the 
            constraint editor. If used they will work on the currently 
            selected model element in the editing pane.</para>

          </warning-->

			</section>

		</section>

		<section>
			<title>Stereotype Tab</title>

			<para>This tab shows the available and applied stereotypes for the 
      currently selected modelelement. 
      It consists of 2 panels and 2 buttons.
      The buttons allow to move the stereotypes
      from one list to the other.
      </para>

			<figure float="1" xml:id="fig.ref.detpane_stereotype">

				<title>An example of a stereotype tab for a class.</title>

				<screenshot><mediaobject><imageobject>
          <imagedata align="center" fileref="images/reference/detpane_stereotype.png" format="PNG" /></imageobject></mediaobject></screenshot>
			</figure>

			<para>In the lists, between <literal>[]</literal> 
        the baseclass of the stereotypes is shown.
        E.g. in the figure above, 
        the <literal>thread [Classifier]</literal> stereotype 
        may be applied to all types of classifiers, 
        such as Class, UseCase,â€¦
        </para>

		</section>

		<section>

			<title>Tagged Values Tab</title>

			<para>Tagged values are another extension mechanism provided by 
        UML. The user can define name-value pairs to be associated with 
        model elements which define properties of that model element. The names 
        are known as <emphasis>tags</emphasis>. UML pre-defines a 
        number of tags that are useful for many of its model elements.</para>

			<note>

				<para>The tag <literal>documentation</literal> is defined for 
          the top UML metaclass, <literal>Element</literal> and is so 
          available to all model elements. In ArgoUML documentation values 
          are provided through the <literal>Documentation</literal> 
          tab, rather than by using the <literal>
          Tagged Values</literal> tab.</para>

			</note>

			<para>The <literal>Tagged Values</literal> tab in ArgoUML 
        comprises a two column table, with a combo-box on 
        the left to select the tagdefinition
        and an editable box on the right for 
        the associated value. There is always at least one empty row 
        available for any new tag. 
        </para>

			<para>The button at the top of this tab allows creation of a new 
        tagdefinition. 
        After clicking this button, go to the properties tab first
        to set the name of the new tagdefinition. 
        <!-- Why does ArgoUML not do this? TODO: Create issue. -->
			</para>

			<para>The mouse buttons have their 
        standard behavior within the editable value area (see 
        <xref
					xlink:href="s1.ref.mouse"
					 />).
        In addition, 
        when in the value field,
        cut, copy and paste operations may be 
        invoked through the keyboard shortcuts <literal>
        Ctrl-X</literal>, <literal>Ctrl-C</literal> and <literal>
        Ctrl-V</literal> respectively.</para>

		</section>

		<section>

			<title>Checklist Tab</title>

			<para>Conducting design reviews and inspections is one of the 
        most effective ways of detecting errors during software 
        development. A design review typically consists of a small 
        number of designers, implementers, or other project 
        stakeholders holding a meeting to review a software development 
        artifact. Many development organizations have developed 
        checklists of common design problems for use in design review 
        meetings. Recent research indicated that reviewers inspecting 
        code without meeting, makeing use of these checklists, are just 
        as effective as design review meetings.</para>

			<para>Hence, a checklist feature has been added to ArgoUML, 
        that is much in the spirit of design review checklists. 
        However, ArgoUML&#039;s checklists are integrated into the 
        design tool user interface and the design task.</para>

			<para>A software designer using ArgoUML can see a review 
        checklist for any design element. The <quote>Checklist</quote> 
        tab presents a list of check-off items that is appropriate to 
        the currently selected design element. For example, when a 
        class is selected in a design diagram, the checklist tab shows 
        items that prompt critical thinking about classes. See the 
        figure below. Designers may check off items as they consider 
        them. Checked items are kept in the list to show what has 
        already been considered, while unchecked items prompt the 
        designer to consider new design issues. ArgoUML supplies many 
        different checklists with many possible items.</para>

			<figure float="1" xml:id="fig.ref.detpane_checklist">

				<title>An example of a checklist for a class.</title>

				<screenshot><mediaobject><imageobject>
          <imagedata align="center" fileref="images/reference/detpane_checklist.png" format="PNG" /></imageobject></mediaobject></screenshot>
			</figure>

			<caution>

				<para>In the V0.22 release of ArgoUML, this tab is not 
          completely implemented. E.g. the checks are not saved.</para>

			</caution>

		</section>

	</chapter>

	<chapter xml:id="ch.ref.todopane">

		<title>The To-Do Pane</title>

		<section>

			<title>Introduction</title>

			<para><xref xlink:href="fig.ref.todo_pane"
				 /> shows the ArgoUML 
        window with the to-do pane highlighted.</para>

			<figure float="1" xml:id="fig.ref.todo_pane">

				<title>Overview of the to-do pane</title>

				<screenshot><mediaobject><imageobject>
          <imagedata align="center" fileref="images/reference/todo_pane.png" format="PNG" /></imageobject></mediaobject></screenshot>
			</figure>

			<para>This pane provides access to the advice that comes from 
        the critics processes running within ArgoUML.</para>

			<para>A selector box at the top allows a choice of how the data 
        is presented, a button allows the display of the hierarchy to 
        be changed, and there is an indicator of the number of to-do 
        items identified.</para>

			<para>More information on critics can be found in the 
        discussion of the <literal>Critique</literal> menu (see 
        <xref
					xlink:href="s1.ref.menu_critique" />).</para>

		</section>

		<section xml:id="s1.ref.todo_mouse">

			<title>Mouse Behavior in the To-Do Pane</title>

			<para>Behavior of the mouse in general, and the naming of the 
        buttons is covered in the chapter on the overall user interface 
        (see <xref
					xlink:href="ch.ref.ui" />).</para>

			<section>

				<title>Button&nbsp;1 Click</title>

				<para>This action is generally used to select an item for 
          subsequent operations.</para>

				<para>Within the hierarchical display, elements which have 
          sub-hierarchies may be indicated by <guiicon>
						<inlinemediaobject>
							<imageobject>
								<imagedata align="center"
									fileref="images/icons/hierarchy_closed.gif" format="GIF" />
							</imageobject>
						</inlinemediaobject>
					</guiicon> 
          when the hierarchy is hidden and <guiicon>
						<inlinemediaobject>
							<imageobject>
								<imagedata align="center" fileref="images/icons/hierarchy_open.gif"
									format="GIF" />
							</imageobject>
						</inlinemediaobject>
					</guiicon> 
          when the hierarchy is open.</para>

				<para>When these icons are displayed, the display of the 
          hierarchy is toggled by button&nbsp;1 click on these icons.</para>

				<para>Button&nbsp;1 click over the headline of any to-do item will 
          cause its details to be shown in the <literal>
          To Do Item</literal> tab of the details pane. That tab is 
          automatically selected if it is not currently visible.</para>

			</section>

			<section>

				<title>Button&nbsp;1 Double Click</title>

				<para>When applied to the folder icon alongside a hierarchy 
          category, this will cause the display of that hierarchy to be 
          toggled.</para>

				<para>When applied to a headline, button&nbsp;1 double click will 
          show the diagram for the model element to which the to-do item 
          applies in the editing pane and select the model element on the 
          diagram using an appropriate clarifier (the model element may be 
          highlighted, underlined with a wavy line or surrounded by a 
          colored box as appropriate).</para>

			</section>

			<section>

				<title>Button&nbsp;2 Actions</title>

				<para>There are no button&nbsp;2 functions in the to-do 
          pane.</para>

			</section>

			<section>

				<title>Button&nbsp;2 Double Click</title>

				<para>There are no button&nbsp;2 functions in the to-do 
          pane.</para>

			</section>

		</section>

		<section>

			<title>Presentation Selection</title>

			<para>At the top of the pane is a drop-down selector 
        controlling how the to-do items are presented. The to-do items 
        may be presented in six different ways. This setting is not 
        stored persistently, i.e. it is on its default vallue when 
        ArgoUML is started.</para>

			<itemizedlist>

				<listitem>

					<para><literal>By Priority</literal>. This is the default 
            setting. The to-do items are organized into three 
            hierarchies by priority: <literal>High</literal>, <literal>
            Medium</literal> and <literal>Low</literal>. The priority 
            associated with the to-do items generated by a particular 
            critic may be altered through the <literal>
            Critique &gt; Browse Criticsâ€¦</literal> menu (see 
            <xref
							xlink:href="s2.ref.menu_browse_critics" />).</para>

				</listitem>

				<listitem>

					<para><literal>By Decision</literal>. The to-do items are 
            organized into 17 hierarchies by design issue: <literal>
            Uncategorized</literal>, <literal>
            Class Selection</literal>, <literal>Behavior</literal>, 
            <literal>Naming</literal>, <literal>Storage</literal>, 
            <literal>Inheritance</literal>, <literal>
            Containment</literal>, <literal>
            Planned Extensions</literal>, <literal>
            State Machines</literal>, <literal>
            Design Patterns</literal>, <literal>
            Relationships</literal>, <literal>Instantiation</literal>, 
            <literal>Modularity</literal>, <literal>
            Expected Usage</literal>, <literal>Methods</literal>, 
            <literal>Code Generation</literal> and <literal>
            Stereotypes</literal>. The details of the critics in each 
            category are discussed in 
            <xref
							xlink:href="s2.ref.menu_design_issues" />.</para>

				</listitem>

				<listitem>

					<para><literal>By Goal</literal>. ArgoUML has a concept 
            that critics may be grouped according to the user goals 
            they affect. This presentation groups the to-do items into 
            hierarchies by goal.</para>

					<caution>

						<para>In the current release of ArgoUML there is only one 
              goal, <literal>Unspecified</literal> and all to-do items 
              will appear under this heading.</para>

					</caution>

				</listitem>

				<listitem>

					<para><literal>By Offender</literal>. The to-do items are 
            organized into a hierarchy according to the model element that 
            caused the problem. Todo items that were manually created 
            with the &quot;New ToDo item&quot; button (i.e. not by a 
            critic), are not listed here.</para>

				</listitem>

				<listitem>

					<para><literal>By Poster</literal>. The to-do items are 
            organized into a hierarchy according to which critic 
            generated the to-do item. The class name of the critic is 
            listed instead of just its headline name since the former 
            is guaranteed to be a unique name.</para>

				</listitem>

				<listitem>

					<para><literal>By Knowledge Type</literal>. ArgoUML has the 
            concept that a critic reflects a deficiency in a category 
            of knowledge. This presentation option groups the critics 
            according to their knowledge category: <literal>
            Designer&#039;s</literal>, <literal>Correctness</literal>, 
            <literal>Completeness</literal>, <literal>
            Consistency</literal>, <literal>Syntax</literal>, <literal>
            Semantics</literal>, <literal>Optimization</literal>, 
            <literal>Presentational</literal>, <literal>
            Organizational</literal>, <literal>Experiencial</literal> 
            and <literal>Tool</literal>. The former category 
            (Designer&#039;s) contains the manually entered todo 
            items.</para>

				</listitem>

			</itemizedlist>

		</section>

		<section>

			<title>Item Count</title>

			<para>To the right of the flat/hierarchical button is a count 
        of the number of to-do items currently found. It will be 
        highlighted in yellow when the number of to-do items grows 
        above 50 todo items, and red when above 100.</para>

		</section>

	</chapter>

	<chapter xml:id="ch.ref.critics">

		<title>The Critics</title>

		<section>

			<title>Introduction</title>

			<para>The key feature that distinguishes ArgoUML from other UML 
        CASE tools is its use of concepts from cognitive psychology. 
        The theory behind this is well described in Jason Robbins&#039; 
        PhD dissertation 
        <link
					xlink:href="http://argouml.tigris.org/docs/robbins_dissertation/"
					>
        http://argouml.tigris.org/docs/robbins_dissertation/</link>.</para>

			<para>Critics are one of the main ways in which these ideas are 
        implemented. Running in the background they offer advice to the 
        designer which may be accepted or ignored. A key point is that 
        they do not <emphasis>impose</emphasis> a decision on the 
        designer.</para>

			<note>

				<para>The critics are asynchronous processes that run in 
          parallel with the main ArgoUML tool. Changes typically take a 
          second or two to propagate as the critics wake up.</para>

			</note>

			<section>

				<title>Terminology</title>

				<para>The <emphasis>critics</emphasis> are background 
          processes, which evaluate the current model according to 
          various <quote>good</quote> design criteria. There is one 
          critic for every design criterion.</para>

				<para>The output of a critic is a 
          <emphasis>critique</emphasis>&#8212;a statement about some aspect 
          of the model that does not appear to follow good design 
          practice.</para>

				<para>Finally a critique will generally suggest how the bad 
          design issue it has identified can be rectified, by raising a 
          <emphasis>to-do item</emphasis>.</para>

			</section>

			<section>

				<title>Design Issues</title>

				<para>ArgoUML categorizes critics according the the design 
          issue they address (some critics may be in more than one 
          category). At present there are 16 such categories.</para>

				<para>Within this manual the descriptions of critics are 
          grouped in sections by design issue.</para>

			</section>

		</section>

		<section xml:id="s1.ref.design_issues_uncategorized">

			<title>Uncategorized</title>

			<para>These are critics that do not fit into any other 
        category.</para>

			<para>ArgoUML has no critics in this category. Maybe some will 
        be added in later versions.</para>

		</section>

		<section xml:id="s1.ref.design_issues_class_selection">

			<title>Class Selection</title>

			<para>These are critics concerning how classes are chosen and 
        used.</para>

			<para>ArgoUML has the following critics in this category.</para>

			<section xml:id="critics.CrNonAggDataType">

				<title>Wrap DataType</title>

				<para>DataTypes are not full classes within UML 1.4. They can 
          only have enumeration literals as values, and only support 
          <literal>query</literal> operations (that is operations that 
          do not change the DataType&#039;s state).</para>

				<para>DataTypes cannot be associated with classes, unless the 
          DataType is part of a composite (black diamond) aggregation. 
          Such an association relects the tight binding of a collection 
          of DataType instances to a class instance. In effect such a 
          DataType is an attribute of the class with 
          multiplicity.</para>

				<para>Good OOA&amp;D depends on careful choices about which 
          entities to represent as full objects and which to represent 
          as attributes of objects.</para>

				<para>There are two options to fix this problem.</para>

				<itemizedlist>

					<listitem>

						<para>Replace the DataType with a full class.</para>

					</listitem>

					<listitem>

						<para>or change the association aggregation to composite 
              relationship at the DataType end.</para>

					</listitem>

				</itemizedlist>

			</section>

			<section xml:id="critics.CrTooManyClasses">

				<title>Reduce Classes in namespace &lt;namespace&gt;</title>

				<para>Suggestion to improve understandability by having fewer 
          classes in one namespace. If one namespace 
          (such as the model, a package, or a class) 
          has too many classes
          it may become very difficult for humans to 
          understand. Defining an understandable set of
          namespaces 
          is an important part of your design.</para>

				<para>The Wizard of this critic allows setting of the treshold, 
          i.e. the maximum number of classes
          allowed before this critic fires.  </para>

				<caution>
					<para>This number is not stored persistently, and
            there is no way to reduce it after it has been set higher,
            except by creating more classes until the critic fires again.
            Restarting ArgoUML resets this number to its default: 20.
            </para>
				</caution>

			</section>

			<section xml:id="critics.CrNodesOverlap">

				<title>Clean Up Diagram</title>

				<para>Suggestion that the diagram could be improved by moving 
          model elements that are overlapping.</para>

			</section>

		</section>

		<section xml:id="s1.ref.design_issues_naming">

			<title>Naming</title>

			<para>These are critics concerning the naming of model elements. The 
        current version of ArgoUML has 18 critics in this 
        category.</para>

			<section xml:id="critics.CrAssocNameConflict">

				<title>Resolve Association Name Conflict</title>

				<para>Suggestion that two association names in the same 
          namespace have the same name. This is not permitted in 
          UML.</para>

			</section>

			<section xml:id="critics.CrAttrNameConflict">

				<title>Revise Attribute Names to Avoid Conflict</title>

				<para>Suggestion that two attribute names of a class have the 
          same name. This is not permitted in UML.</para>

				<note>

					<para>The problem may be caused by inheritance of an 
            attribute through a generalization relationship.</para>

				</note>

			</section>

			<section xml:id="critics.CrOperNameConflict">

				<title>Change Names or Signatures in a model element</title>

				<para>Two operations in &lt;model element&gt; have the same 
          signature. This means their name is the same, and the list of 
          parameters has the same type.</para>

				<para>Where there are conflicting signatures, correct code 
          cannot be generated for mainstream OO languages. It also 
          leads to very unclear semantics of the design.</para>

				<para>In comparing signatures, this critic considers:</para>

				<orderedlist>

					<listitem>

						<para>the name;</para>

					</listitem>

					<listitem>

						<para>the list of in, out and in-out parameter types 
              <emphasis>in order</emphasis>; and</para>

					</listitem>

				</orderedlist>

				<para>Only if these all match in both type and order, will 
          the signatures be considered as the same.</para>

				<para>This follows the line of Java/C++ in ignoring the 
          return parameters for the signature. This 
          <emphasis>may</emphasis> be unsatisfactory for some 
          functional OO languages.</para>

				<note>

					<para>Some purists would argue that the comparison should 
            really differentiate between in, out and in-out parameters. 
            However no practical programming language can do this when 
            resolving an overloaded method invocation, so this critic 
            lumps them all together.</para>

				</note>

			</section>

			<section xml:id="critics.CrDupRoleNames">

				<title>Duplicate End (Role) Names for an Association</title>

				<para>The specified association has two (or more) ends 
          (roles) with the same name. One of the well-formedness rules 
          in UML 1.4 for associations, is that all end (role) names 
          must be unique.</para>

				<para>This ensures that there can be unambiguous reference to 
          the ends of the association.</para>

				<para>To fix this, manually select the association and change 
          the names of one or more of the offending ends (roles) using 
          the button&nbsp;2 pop-up menu or the property sheet.</para>

			</section>

			<section xml:id="critics.CrNameConflictAC">

				<title>Role name conflicts with member</title>

				<para>A suggestions that good design avoids role names for 
          associations that clash with attributes or operations of the 
          source class. Roles may be realized in the code as attributes 
          or operations, causing code generation problems.</para>

			</section>

			<section xml:id="critics.CrMissingClassName">

				<title>Choose a Name (Classes and Interfaces)</title>

				<para>The class or interface concerned has been given no name 
          (it will appear in the model as <literal>Unnamed</literal>). 
          Suggestion that good design requires that all interfaces and 
          classes are named.</para>

			</section>

			<section xml:id="critics.CrDisambigClassName">

				<title>Choose a Unique Name for a model element (Classes and 
          Interfaces)</title>

				<para>Suggestion that the class or interface specified has 
          the same name as another (in the namespace), which is bad 
          design and will prevent valid code generation.</para>

			</section>

			<section xml:id="critics.CrMissingAttrName">

				<title>Choose a Name (Attributes)</title>

				<para>The attribute concerned has been given no name (it will 
          appear in the model as <literal>(Unnamed Attribute)</literal>). 
          Suggestion that good design requires that all attributes are 
          named.</para>

			</section>

			<section xml:id="critics.CrMissingOperName">

				<title>Choose a Name (Operations)</title>

				<para>The operation concerned has been given no name (it will 
          appear in the model as <literal>(Unnamed Operation)</literal>). 
          Suggestion that good design requires that all operations are 
          named.</para>

			</section>

			<section xml:id="critics.CrMissingStateName">

				<title>Choose a Name (States)</title>

				<para>The state concerned has been given no name (it will 
          appear in the model as <literal>(Unnamed State)</literal>). 
          Suggestion that good design requires that all states are 
          named.</para>

			</section>

			<section xml:id="critics.CrDisambigStateName">

				<title>Choose a Unique Name for a (State related) 
          model element</title>

				<para>Suggestion that the state specified has the same name 
          as another (in the current statechart diagram), which is bad 
          design and will prevent valid code generation.</para>

			</section>

			<section xml:id="critics.CrNameConfusion">

				<title>Revise Name to Avoid Confusion</title>

				<para>Two names in the same namespace have very similar names 
          (differing only by one character). Suggestion this could 
          potentially lead to confusion.</para>

				<caution>

					<para>This critic can be particularly annoying, since at 
            times it is useful and good design to have a series of 
            model elements <literal>var1</literal>, <literal>var2</literal> 
            etc.</para>

					<para>It is important to remember that critics offer 
            guidance, and are not always correct. ArgoUML lets you 
            dismiss the resulting to-do items through the to-do pane 
            (see <xref
							xlink:href="ch.ref.todopane" />).</para>

				</caution>

			</section>

			<section xml:id="critics.CrIllegalName">

				<title>Choose a Legal Name</title>

				<para>All model element names in ArgoUML must use only letters, 
          digits and underscore characters. This critic suggests an 
          entity has not met this requirement.</para>

			</section>

			<section xml:id="critics.CrReservedName">

				<title>Change a model element to a Non-Reserved Word</title>

				<para>Suggestion that this model element&#039;s name is the same 
          as a reserved word in UML (or within one character of one), 
          which is not permitted.</para>

			</section>

			<section xml:id="critics.CrUnconventionalOperName">

				<title>Choose a Better Operation Name</title>

				<para>Suggestion that an operation has not followed the 
          naming convention that operation names begin with lower case 
          letters.</para>

				<caution>

					<para>Following the Java and C++ convention most designers 
            give their constructors the same name as the class, which 
            begins with an upper case character. In ArgoUML, this will 
            trigger this critic, unless the constructor is stereotyped 
            <literal>&laquo;create&raquo;</literal>.</para>

					<para>It is important to remember that critics offer 
            guidance, and are not always correct. ArgoUML lets you 
            dismiss the resulting to-do items through the to-do pane 
            (see <xref
							xlink:href="ch.ref.todopane" />).</para>

				</caution>

			</section>

			<section xml:id="critics.CrUnconventionalAttrName">

				<title>Choose a Better Attribute Name</title>

				<para>Suggestion that an attribute has not followed the 
          naming convention that attribute names begin with lower case 
          letters.</para>

			</section>

			<section xml:id="critics.CrUnconventionalClassName">

				<title>Capitalize Class Name</title>

				<para>Suggestion that a class has not followed the naming 
          convention that classes begin with upper case letters.</para>

				<note>

					<para>Although not triggering this critic, the same 
            convention should apply to interfaces.</para>

				</note>

			</section>

			<section xml:id="critics.CrUnconventionalPackName">

				<title>Revise Package Name</title>

				<para>Suggestion that a package has not followed the naming 
          convention of using lower case letters with periods used to 
          indicated sub-packages.</para>

			</section>

		</section>

		<section xml:id="s1.ref.design_issues_storage">

			<title>Storage</title>

			<para>Critics concerning attributes of classes.</para>

			<para>The current version of ArgoUML has the following critics 
        in this category.</para>

			<section>

				<title>Revise Attribute Names to Avoid Conflict</title>

				<para>This critic is discussed under an earlier design issues 
          category (see <xref
						xlink:href="critics.CrAttrNameConflict" />
          ).</para>

			</section>

			<section xml:id="critics.CrNoInstanceVariables">

				<title>Add Instance Variables to a Class</title>

				<para>Suggestion that no instance variables have been 
          specified for the given class. Such classes may be created to 
          specify static attributes and methods, but by convention 
          should then be given the stereotype <literal>
          &laquo;utility&raquo;</literal>.</para>

			</section>

			<section xml:id="critics.CrConstructorNeeded">

				<title>Add a Constructor to a Class</title>

				<para>You have not yet defined a constructor for class 
          <emphasis>class</emphasis>. Constructors initialize new 
          instances such that their attributes have valid values. This 
          class probably needs a constructor because not all of its 
          attributes have initial values.</para>

				<para>Defining good constructors is key to establishing class 
          invariants, and class invariants are a powerful aid in 
          writing solid code.</para>

				<para>To fix this, add a constructor manually by clicking on 
          <emphasis>class</emphasis> in the explorer and adding an 
          operation using the context sensitive pop-up menu in the 
          property tab, or select <emphasis>class</emphasis> where it 
          appears on a class diagram and use the <literal>Add 
          Operation</literal> tool.</para>

				<para>In the UML 1.4 standard, a constructor is an operation 
          with the stereotype &laquo;create&raquo;. Although not strictly standard, 
          ArgoUML will also accept &laquo;Create&raquo; as a stereotype for 
          constructors.</para>

				<para>By convention in Java and C++ a constructor has the 
          same name as the class, is not static, and returns no value. 
          ArgoUML will also accept any operation that follows these 
          conventions as a constructor even if it is not stereotyped 
          &laquo;create&raquo;.</para>

				<caution>

					<para>Operators are created in ArgoUML with a default 
            return parameter (named <literal>return</literal>). You 
            will need to remove this parameter to meet the Java/C++ 
            convention.</para>

				</caution>

			</section>

			<section xml:id="critics.CrTooManyAttr">

				<title>Reduce Attributes on a Class</title>

				<para>Suggestion that the class has too many attributes for a 
          good design, and is at risk of becoming a design 
          bottleneck.</para>

				<para>The Wizard of this critic allows setting of the treshold, 
          i.e. the maximum number of attributes 
          allowed before this critic fires.  </para>

				<caution>
					<para>This number is not stored persistently, and
            there is no way to reduce it after it has been set higher,
            except by creating more attributes until the critic fires again.
            Restarting ArgoUML resets this number to its default: 7.
            </para>
				</caution>

			</section>

		</section>

		<section xml:id="s1.ref.design_issues_planned_extensions">

			<title>Planned Extensions</title>

			<para>Critics concerning interfaces and subclasses.</para>

			<note>

				<para>It is not clear why this category has the name 
          <quote>Planned Extensions</quote>.</para>

			</note>

			<para>The current version of ArgoUML has three critics in this 
        category.</para>

			<section xml:id="critics.CrIntefaceAllPublic">

				<title>Operations in Interfaces must be public</title>

				<para>Suggestion that there is no point in having non-public 
          operations in Interfaces, since they must be visible to be 
          realized by a class.</para>

			</section>

			<section xml:id="critics.CrInterfaceOperOnly">

				<title>Interfaces may only have operations</title>

				<para>Suggestion that an interfaces has attributes defined. 
          The UML standard defines interfaces to have operations.</para>

				<caution>

					<para>ArgoUML does not allow you to add attributes to 
            interfaces, so this should never occur in the ArgoUML 
            model. It might trigger if a project has been loaded with 
            XMI created by another tool.</para>

				</caution>

			</section>

			<section xml:id="critics.CrSubclassReference">

				<title>Remove Reference to Specific Subclass</title>

				<para>Suggestion that in a good design, a class should not 
          reference its subclasses directly through attributes, 
          operations or associations.</para>

			</section>

		</section>

		<section xml:id="s1.ref.design_issues_state_machines">

			<title>State Machines</title>

			<para>Critics concerning state machines.</para>

			<para>ArgoUML has the following critics in this category.</para>

			<section xml:id="critics.CrTooManyTransitions">

				<title>Reduce Transitions on &lt;state&gt;</title>

				<para>Suggestion given state is involved in so many 
          transitions it may be a maintenance bottleneck.</para>

				<para>The Wizard of this critic allows setting of the treshold, 
          i.e. the maximum number of transitions 
          allowed before this critic fires.  </para>

				<caution>
					<para>This number is not stored persistently, and
            there is no way to reduce it after it has been set higher,
            except by creating more transition until the critic fires again.
            Restarting ArgoUML resets this number to its default: 10.
            </para>
				</caution>


			</section>

			<section xml:id="critics.CrTooManyStates">

				<title>Reduce States in machine &lt;machine&gt;</title>

				<para>Suggestion that the given state machine has so many 
          states as to be confusing and should be simplified (perhaps 
          by breaking into several machines, or using a 
          hierarchy).</para>

				<para>The Wizard of this critic allows setting of the treshold, 
          i.e. the maximum number of states 
          allowed before this critic fires.  </para>

				<caution>
					<para>This number is not stored persistently, and
            there is no way to reduce it after it has been set higher,
            except by creating more states until the critic fires again.
            Restarting ArgoUML resets this number to its default: 20.
            </para>
				</caution>


			</section>

			<section xml:id="critics.CrNoTransitions">

				<title>Add Transitions to &lt;state&gt;</title>

				<para>Suggestion that the given state requires both incoming 
          and outgoing transitions.</para>

			</section>

			<section xml:id="critics.CrNoIncomingTransitions">

				<title>Add Incoming Transitions to &lt;model element&gt;</title>

				<para>Suggestion that the given state requires incoming 
          transitions.</para>

			</section>

			<section xml:id="critics.CrNoOutgoingTransitions">

				<title>Add Outgoing Transitions from &lt;model element&gt;</title>

				<para>Suggestion that the given state requires outgoing 
          transitions.</para>

			</section>

			<section xml:id="critics.CrMultipleInitialStates">

				<title>Remove Extra Initial States</title>

				<para>Suggestion that there is more than one initial state in 
          the state machine or composite state, which is not permitted 
          in UML.</para>

			</section>

			<section xml:id="critics.CrNoInitialState">

				<title>Place an Initial State</title>

				<para>Suggestion that there is no initial state in the state 
          machine or composite state.</para>

			</section>

			<section xml:id="critics.CrNoTriggerOrGuard">

				<title>Add Trigger or Guard to Transition</title>

				<para>Suggestion that a transition is missing either a 
          trigger or guard, one at least of which is required for it to 
          be taken.</para>

			</section>

			<section xml:id="critics.CrInvalidJoin">

				<title>Change Join Transitions</title>

				<para>Suggestion that the join pseudostate has an invalid 
          number of transitions. Normally there should be one outgoing 
          and two or more incoming.</para>

			</section>

			<section xml:id="critics.CrInvalidFork">

				<title>Change Fork Transitions</title>

				<para>Suggestion that the fork pseudostate has an invalid 
          number of transitions. Normally there should be one incoming 
          and two or more outgoing.</para>

			</section>

			<section xml:id="critics.CrInvalidBranch">

				<title>Add Choice/Junction Transitions</title>

				<para>Suggestion that the branch (choice or junction) 
          pseudostate has an invalid number of transitions. Normally 
          there should be at least one incoming transition and at least 
          one outgoing transition.</para>

			</section>

			<section xml:id="critics.CrNoGuard">

				<title>Add Guard to Transition</title>

				<para>Suggestion that the transition requires a guard.</para>

				<caution>

					<para>It is not clear that this is a valid critic. It is 
            perfectly acceptable to have a transition without a 
            guard&#8212;the transition is always taken when the trigger is 
            invoked.</para>

				</caution>

			</section>

			<section>

				<title>Clean Up Diagram</title>

				<para>This critic is discussed under an earlier design issues 
          category (see <xref
						xlink:href="critics.CrNodesOverlap" />
          ).</para>

			</section>

			<section xml:id="critics.CrZeroLengthEdge">

				<title>Make Edge More Visible</title>

				<para>Suggestion that an edge model element such as an association 
          or abstraction is so short it may be missed. Move the 
          connected model elements apart to make the edge more 
          visible.</para>

			</section>

			<section xml:id="critics.CrMultiComposite">

				<title>Composite Association End with Multiplicity &gt; 
          1</title>

				<para>An instance may not belong by composition to more than 
          one composite instance. You must change the multiplicity at 
          the composite end of the association to either 0..1 or 1..1 
          (1) for your model to make sense.</para>

				<para>Remember that composition is the stronger aggregation 
          kind and aggregation is the weaker. The problem can be 
          compared to a model where a finger can be an integral part of 
          several hands at the same time.</para>

				<para>This is the second well-formedness rule on 
          AssociationEnd in UML 1.4.</para>

			</section>

		</section>

		<section xml:id="s1.ref.design_issues_design_patterns">

			<title>Design Patterns</title>

			<para>Critics concerning design pattern usage in ArgoUML.</para>

			<para>These relate to the use of patterns as described by the 
        so called <quote>Gang of Four</quote>. ArgoUML also uses this 
        category for critics associated with deployment and sequence 
        diagrams. The current version of ArgoUML has the following 
        critics in this category.</para>

			<section xml:id="critics.CrConsiderSingleton">

				<title>Consider using Singleton Pattern for 
          &lt;class&gt;</title>

				<para>The <emphasis>class</emphasis> has no non-static 
          attributes nor any associations that are navigable away from 
          instances of this class. This means that every instance of 
          this class will be identical to every other instance, since 
          there will be nothing about the instances that can 
          differentiate them.</para>

				<para>Under these circumstances you should consider making 
          explicit that you have exactly one instance of this class, by 
          using the singleton Pattern. Using the singleton pattern can 
          save time and memory space. Within ArgoUML this can be done 
          by using the &laquo;singleton&raquo; stereotype on this class.</para>

				<para>If it is not your intent to have a single instance, you 
          should define instance variables (i.e. non-static attributes) 
          and/or outgoing associations that will represent differences 
          bewteen instances.</para>

				<para>Having specified <emphasis>class</emphasis> as a 
          singleton, you need to define the class so there can only be 
          a single instance. This will complete the information 
          representation part of your design. To achieve this you need 
          to do the following.</para>

				<orderedlist>

					<listitem>

						<para>You must define a static attribute (a class 
              variable) holding the instance. This must therefore have 
              <emphasis>class</emphasis> as its type.</para>

					</listitem>

					<listitem>

						<para>You must have only private constructors so that new 
              instances cannot be made by other code. The creation of 
              the single instance could be through a suitable helper 
              operation, which invokes this private constructor just 
              once.</para>

					</listitem>

					<listitem>

						<para>You must have at least one constructor to override 
              the default constructor, so that the default constructor 
              is not used to create multiple instances.</para>

					</listitem>

				</orderedlist>

				<para>For the definition of a constructor under the UML 1.4 
          standard, and extensions to that definition accepted by 
          ArgoUML see <xref
						xlink:href="critics.CrConstructorNeeded" />
          .</para>

			</section>

			<section xml:id="critics.CrSingletonViolated">

				<title>Singleton Stereotype Violated in &lt;class&gt;</title>

				<para>This class is marked with the &laquo;singleton&raquo; stereotype, 
          but it does not satisfy the constraints imposed on singletons 
          (ArgoUML will also accept &laquo;Singleton&raquo; stereotype as defining 
          a singleton). A singleton class can have at most one 
          instance. This means that the class must meet the design 
          criteria for a singleton (see 
          <xref
						xlink:href="critics.CrConsiderSingleton" />).</para>

				<para>Whenever you mark a class with a stereotype, the class 
          should satisfy all constraints of the stereotype. This is an 
          important part of making a self-consistent and understangle 
          design. Using the singleton pattern can save time and memory 
          space.</para>

				<para>If you no longer want this class to be a singleton, 
          remove the &laquo;singleton&raquo; stereotype by clicking on the class 
          and selecting the blank selection on the stereotype drop-down 
          within the properties tab.</para>

				<para>To apply the singleton pattern you should follow the 
          directions in <xref
						xlink:href="critics.CrConsiderSingleton" />
          .</para>

			</section>

			<section xml:id="critics.CrNodeInsideElement">

				<title>Nodes normally have no enclosers</title>

				<para>A suggestion that nodes should not be drawn inside 
          other model elements on the deployment diagram, since they 
          represent an autonomous physical object.</para>

			</section>

			<section xml:id="critics.CrNodeInstanceInsideElement">

				<title>NodeInstances normally have no enclosers</title>

				<para>A suggestion that node instances should not be drawn 
          inside other model elements on the deployment diagram, since they 
          represent an autonomous physical object.</para>

			</section>

			<section xml:id="critics.CrComponentWithoutNode">

				<title>Components normally are inside nodes</title>

				<para>A suggestion that components represent the logical 
          entities within physical nodes, and so should be drawn within 
          a node, where nodes are shown on the deployment 
          diagram.</para>

			</section>

			<section xml:id="critics.CrCompInstanceWithoutNode">

				<title>ComponentInstances normally are inside nodes</title>

				<para>A suggestion that component instances represent the 
          logical entities within physical nodes, and so should be 
          drawn within a node instance, where node instances are shown 
          on the deployment diagram.</para>

			</section>

			<section xml:id="critics.CrClassWithoutComponent">

				<title>Classes normally are inside components</title>

				<para>A suggestion that classes, as model elements making up 
          components, should be drawn within components on the 
          deployment diagram.</para>

			</section>

			<section xml:id="critics.CrInterfaceWithoutComponent">

				<title>Interfaces normally are inside components</title>

				<para>A suggestion that interfaces, as model elements making up 
          components, should be drawn within components on the 
          deployment diagram.</para>

			</section>

			<section xml:id="critics.CrObjectWithoutComponent">

				<title>Objects normally are inside components</title>

				<para>A suggestion that objects, as instances of model elements 
          making up components, should be drawn within components or 
          component instances on the deployment diagram.</para>

			</section>

			<section xml:id="critics.CrWrongLinkEnds">

				<title>LinkEnds have not the same locations</title>

				<para>A suggestion that a link (e.g. association) connecting 
          objects on a deployment diagram has one end in a component 
          and the other in a component instance (since objects can be 
          in either). This makes no sense.</para>

			</section>

			<section xml:id="critics.CrInstanceWithoutClassifier">

				<title>Set classifier (Deployment Diagram)</title>

				<para>Suggestion that there is an instance (object) without 
          an associated classifier (class, datatype) on a deployment 
          diagram.</para>

			</section>

			<section xml:id="critics.CrCallWithoutReturn">

				<title>Missing return-actions</title>

				<para>Suggestion that a sequence diagram has a send or call 
          action without a corresponding return action.</para>

			</section>

			<section xml:id="critics.CrReturnWithoutCall">

				<title>Missing call(send)-action</title>

				<para>Suggestion that a sequence diagram has a return action, 
          but no preceding call or send action.</para>

			</section>

			<section xml:id="critics.CrLinkWithoutStimulus">

				<title>No Stimuli on these links</title>

				<para>Suggestion that a sequence diagram has a link 
          connecting objects without an associated stimulus (without 
          which the link is meaningless).</para>

				<warning>

					<para>Triggering this critic indicates a serious problem, 
            since ArgoUML provides no mechanism for creating a link 
            without a stimulus. It probably indicates that the diagram 
            was created by loading a corrupt project, with an XMI file 
            describing a link without a stimulus, possibly created by a 
            tool other than ArgoUML.</para>

				</warning>

			</section>

			<section xml:id="critics.CrSeqInstanceWithoutClassifier">

				<title>Set Classifier (Sequence Diagram)</title>

				<para>Suggestion that there is an object without an 
          associated classifier (class, datatype) on a sequence 
          diagram.</para>

			</section>

			<section xml:id="critics.CrStimulusWithWrongPosition">

				<title>Wrong position of these stimuli</title>

				<para>Suggestion that the initiation of send/call-return 
          message exchanges in a sequence diagram does not properly 
          initiate from left to right.</para>

			</section>

		</section>

		<section xml:id="s1.ref.design_issues_relationships">

			<title>Relationships</title>

			<para>Critics concerning associations in ArgoUML.</para>

			<para>The current version of ArgoUML has the following critics 
        in this category.</para>

			<section xml:id="critics.CrCircularAssocClass">

				<title>Circular Association</title>

				<para>Suggestion that an association class has a role that 
          refers back directly to itself, which is not permitted.</para>

				<warning>

					<para>This critic is meaningless in the V0.14 version of 
            ArgoUML which does not support association classes.</para>

				</warning>

			</section>

			<section xml:id="critics.CrUnnavigableAssoc">

				<title>Make &lt;association&gt; Navigable</title>

				<para>Suggestion that the association referred to is not 
          navigable in either direction. This is permitted in the UML 
          standard, but has no obvious meaning in any practical 
          design.</para>

			</section>

			<section xml:id="critics.CrNavFromInterface">

				<title>Remove Navigation from Interface via 
          &lt;association&gt;</title>

				<para>Associations involving an interface can be not be 
          navigable in the direction from the interface. This is 
          because interfaces contain only operation declarations and 
          cannot hold pointers to other objects.</para>

				<para>This part of the design should be changed before you 
          can generate code from this design. If you do generate code 
          before fixing this problem, the code will not match the 
          design.</para>

				<para>To fix this, select the association and use the 
          <literal>Properties</literal> tab to select in turn each 
          association end that is <emphasis>not</emphasis> connected to 
          the interface. Uncheck <literal>Navigable</literal> for each 
          of these ends.</para>

				<para>The association should then appear with a stick 
          arrowhead pointed towards the interface</para>

				<para>When an association between a class and interface is 
          created in ArgoUML, it is by default navigable only from the 
          class to the interface. However, ArgoUML does not prevent to 
          change the navigability afterwards into a wrong situation. 
          Which will cause this critic to be triggered.</para>

			</section>

			<section xml:id="critics.CrNoAssociations">

				<title>Add Associations to &lt;model element&gt;</title>

				<para>Suggestion that the specified model element (actor, use case 
          or class) has no associations connecting it to other 
          model elements. This is required for the model element to be useful in 
          a design.</para>

			</section>

			<section>

				<title>Remove Reference to Specific Subclass</title>

				<para>This critic is discussed under an earlier design issues 
          category (see <xref
						xlink:href="critics.CrSubclassReference" />
          ).</para>

			</section>

			<section xml:id="critics.CrTooManyAssoc">

				<title>Reduce Associations on &lt;model element&gt;</title>

				<para>Suggestion that the given model element (actor, use case, 
          class or interface) has so many associations it may be a 
          maintenance bottleneck.</para>

				<para>The Wizard of this critic allows setting of the treshold, 
          i.e. the maximum number of associations 
          allowed before this critic fires.  </para>

				<caution>
					<para>This number is not stored persistently, and
            there is no way to reduce it after it has been set higher,
            except by creating more associations until the critic fires again.
            Restarting ArgoUML resets this number to its default: 7.
            </para>
				</caution>

			</section>

			<section>

				<title>Make Edge More Visible</title>

				<para>This critic is discussed under an earlier design issues 
          category (see <xref
						xlink:href="critics.CrZeroLengthEdge" />
          ).</para>

			</section>

		</section>

		<section xml:id="s1.ref.design_issues_instantiation">

			<title>Instantiation</title>

			<para>Critics concerning instantiation of classifiers in 
        ArgoUML.</para>

			<para>The current version of ArgoUML has no critics in this 
        category.</para>

		</section>

		<section xml:id="s1.ref.design_issues_modularity">

			<title>Modularity</title>

			<para>Critics concerning modular development in ArgoUML.</para>

			<para>The current version of ArgoUML has the following critics 
        in this category.</para>

			<section xml:id="critics.CrCrossNamespaceAssoc">

				<title>Classifier not in Namespace of its Association</title>

				<para>One of the well-formedness rules in UML 1.4 for 
          associations, is that all the classifiers attached to the 
          ends of the association should belong to the same namespace 
          as the association.</para>

				<para>If this were not the case, there would be no naming, by 
          which each end could refer to all the others.</para>

				<para>This critic is triggered when an association does not 
          meet this criterion. The solution is to delete the 
          association, and recreate it on a diagram, whose namespace 
          includes those of all the attached classifiers.</para>

				<caution>

					<para>In the current implementation of ArgoUML this critic 
            does not handle hierarchical namespaces. As a consequence 
            it will trigger for associations where the immediate 
            namespaces of the attached classifiers is different, even 
            though they are part of the same namespace hierarchy.</para>

				</caution>

			</section>

			<section xml:id="critics.CrEmptyPackage">

				<title>Add Elements to Package &lt;package&gt;</title>

				<para>Suggestion that the specified package has no content. 
          Good design suggests packages are created to put things 
          in.</para>

				<note>

					<para>This will always trigger when you first create a 
            package, since you cannot create one that is not 
            empty!</para>

				</note>

			</section>

		</section>

		<section xml:id="s1.ref.design_issues_expected_usage">

			<title>Expected Usage</title>

			<para>Critics concerning generally accepted good practice in 
        ArgoUML.</para>

			<para>The current version of ArgoUML has one critic in this 
        category.</para>

			<section>

				<title>Clean Up Diagram</title>

				<para>This critic is discussed under an earlier design issues 
          category (see <xref
						xlink:href="critics.CrNodesOverlap" />
          ).</para>

			</section>

		</section>

		<section xml:id="s1.ref.design_issues_methods">

			<title>Methods</title>

			<para>Critics concerning operations in ArgoUML.</para>

			<para>The current version of ArgoUML has the following critics 
        in this category.</para>

			<section>

				<title>Change Names or Signatures in &lt;model element&gt;</title>

				<para>This critic is discussed under an earlier design issues 
          category (see <xref
						xlink:href="critics.CrOperNameConflict" />
          ).</para>

			</section>

			<section xml:id="critics.CrClassMustBeAbstract">

				<title>Class Must be Abstract</title>

				<para>Suggestion that a class that inherits or defines 
          abstract operations must be marked abstract.</para>

			</section>

			<section xml:id="critics.CrNoOperations">

				<title>Add Operations to &lt;class&gt;</title>

				<para>Suggestion that the specified class has no operations 
          defined. This is required for the class to be useful in a 
          design.</para>

			</section>

			<section xml:id="critics.CrTooManyOper">

				<title>Reduce Operations on &lt;model element&gt;</title>

				<para>Suggestion that the model element (class or interface) has 
          too many operations for a good design, and is at risk of 
          becoming a design bottleneck.</para>

				<para>The Wizard of this critic allows setting of the treshold, 
          i.e. the maximum number of operations 
          allowed before this critic fires.  </para>

				<caution>
					<para>This number is not stored persistently, and
            there is no way to reduce it after it has been set higher,
            except by creating more operations until the critic fires again.
            Restarting ArgoUML resets this number to its default: 20.
            </para>
				</caution>

			</section>

		</section>

		<section xml:id="s1.ref.design_issues_code_generation">

			<title>Code Generation</title>

			<para>Critics concerning code generation in ArgoUML.</para>

			<para>The current version of ArgoUML has one critic in this 
        category.</para>

			<section xml:id="critics.CrMultipleInheritance">

				<title>Change Multiple Inheritance to interfaces</title>

				<para>Suggestion that a class has multiple generalizations, 
          which is permitted by UML, but cannot be generated into Java 
          code, because Java does not support multiple 
          inheritance.</para>

			</section>

		</section>

		<section xml:id="s1.ref.design_issues_stereotypes">

			<title>Stereotypes</title>

			<para>Critics concerning stereotypes in ArgoUML.</para>

			<para>The current version of ArgoUML has no critics in this 
        category.</para>

		</section>

		<section xml:id="s1.ref.design_issues_inheritance">

			<title>Inheritance</title>

			<para>Critics concerning generalization and specialization in 
        ArgoUML.</para>

			<para>The current version of ArgoUML has the following critics 
        in this category.</para>

			<section>

				<title>Revise Attribute Names to Avoid Conflict</title>

				<para>This critic is discussed under an earlier design issues 
          category (see <xref
						xlink:href="critics.CrAttrNameConflict" />
          ).</para>

			</section>

			<section xml:id="critics.CrCircularInheritance">

				<title>Remove &lt;class&gt;&#039;s Circular 
          Inheritance</title>

				<para>Suggestion that a class inherits from itself, through a 
          chain of generalizations, which is not permitted.</para>

				<caution>

					<para>This critic is marked inactive by default in the 
            current release of ArgoUML (the only one so marked). It 
            will not trigger unless made active.</para>

				</caution>

			</section>

			<section>

				<title>Class Must be Abstract</title>

				<para>This critic is discussed under an earlier design issues 
          category (see <xref
						xlink:href="critics.CrClassMustBeAbstract" />
          ).</para>

			</section>

			<section xml:id="critics.CrFinalSubclassed">

				<title>Remove final keyword or remove subclasses</title>

				<para>Suggestion that a class that is final has 
          specializations, which is not permitted in UML.</para>

			</section>

			<section xml:id="critics.CrIllegalGeneralization">

				<title>Illegal Generalization</title>

				<para>Suggestion that there is a generalization between 
          model elements of different UML metaclasses, which is not 
          permitted.</para>

				<caution>

					<para>It is not clear that such a generalization can be 
            created within ArgoUML. It probably indicates that the 
            diagram was created by loading a corrupt project, with an 
            XMI file describing such a generalization, possibly created 
            by a tool other than ArgoUML.</para>

				</caution>

			</section>

			<section xml:id="critics.CrAlreadyRealizes">

				<title>Remove Unneeded Realizes from &lt;class&gt;</title>

				<para>Suggestion that the specified class has a realization 
          relationship both directly and indirectly to the same 
          interface (by realization from two interfaces, one of which 
          is a generalization of the other for example). Good design 
          deprecates such duplication.</para>

			</section>

			<section xml:id="critics.CrUselessAbstract">

				<title>Define Concrete (Sub)Class</title>

				<para>Suggestion that a class is abstract with no concrete 
          subclasses, and so can never be realized.</para>

			</section>

			<section xml:id="critics.CrUselessInterface">

				<title>Define Class to Implement &lt;interface&gt;</title>

				<para>Suggestion that the interface referred to has no 
          influence on the running system, since it is never 
          implemented by a class.</para>

			</section>

			<section>

				<title>Change Multiple Inheritance to interfaces</title>

				<para>This critic is discussed under an earlier design issues 
          category (see <xref
						xlink:href="critics.CrMultipleInheritance" />
          ).</para>

			</section>

			<section>

				<title>Make Edge More Visible</title>

				<para>This critic is discussed under an earlier design issues 
          category (see <xref
						xlink:href="critics.CrZeroLengthEdge" />
          ).</para>

			</section>

		</section>

		<section xml:id="s1.ref.design_issues_containment">

			<title>Containment</title>

			<para>Critics concerning containment in ArgoUML, that is where 
        one model element forms a component part of another.</para>

			<para>The current version of ArgoUML has the following critics 
        in this category.</para>

			<section xml:id="critics.CrCircularComposition">

				<title>Remove Circular Composition</title>

				<para>Suggestion that there is a series of composition 
          relationships (associations with black diamonds) that form a 
          cycle, which is not permitted.</para>

			</section>

			<section xml:id="critics.CrDupParamName">

				<title>Duplicate Parameter Name</title>

				<para>Suggestion that a parameter list to an operation or 
          event has two or more parameters with the same name, which is 
          not permitted.</para>

			</section>

			<section xml:id="critics.CrMultipleAgg">

				<title>Two Aggregate Ends (Roles) in Binary 
          Association</title>

				<para>Only one end (role) of a binary association can be 
          aggregate or composite. This a well-formedness rule of the 
          UML 1.4 standard.</para>

				<para>Aggregation and composition are used to indicate 
          whole-part relationships, and by definition, the 
          <quote>part</quote> end cannot be aggregate.</para>

				<para>To fix this, identify the <quote>part</quote> end of 
          the association, and use the critic wizard (the <literal>
          Next&gt;</literal> button, or manually set its aggregation to 
          <literal>none</literal> using the button&nbsp;2 pop-up menu or the 
          property sheet.</para>

				<para>Composition (more correctly called composite 
          aggregation) is used where there is a whole-part relationship 
          that is one-to-one or one-to-many, and the lifetime of the 
          part is inextricably tied to the lifetime of the whole. 
          Instances of the whole will have responsibility for creating 
          and destroying instances of the associated part. This also 
          means that a class can only be a part in one composite 
          aggregation.</para>

				<para>An example of a composite aggregation might be a 
          database of cars and their wheels. This is a one-to-four 
          relationship, and the database entry for a wheel is 
          associated with its car. When the car ceases to exist in the 
          database, so do its wheels.</para>

				<para>Aggregation (more correctly called shared aggregation) 
          is used where there is a whole-part relationship, that does 
          not meet the criteria for a composite aggregation. An example 
          might be a database of university courses and the students 
          that attend them. There is a whole-part relationship between 
          courses and students. However there is no lifetime 
          relationship between students and course (a student continues 
          to exist even after a course is finished) and the 
          relationship is many-to-many.</para>

			</section>

			<section xml:id="critics.CrNWayAgg">

				<title>Aggregate End (Role) in 3-way (or More) 
          Association</title>

				<para>Three-way (or more) associations can not have aggregate 
          ends (roles). This a well-formedness rule of the UML 1.4 
          standard.</para>

				<para>Aggregation and composition are used to indicate 
          whole-part relationships, and by definition can only apply to 
          binary associations between model elements.</para>

				<para>To fix this, manually select the association, and set 
          the aggregation of each of its ends (roles) to <literal>
          none</literal> using the button&nbsp;2 pop-up menu or the property 
          sheet.</para>

			</section>

			<section>

				<title>Wrap DataType</title>

				<para>This critic is discussed under an earlier design issues 
          category (see <xref
						xlink:href="critics.CrNonAggDataType" />
          ).</para>

			</section>

		</section>

	</chapter>

</part>