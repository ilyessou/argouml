<?xml version="1.0" encoding="UTF-8"?>
<part
	xmlns="http://docbook.org/ns/docbook" 
	version="5.0" 
	xml:lang="en"
	xmlns:xi="http://www.w3.org/2001/XInclude" 
	xmlns:xlink="http://www.w3.org/1999/xlink"
	>
	
	<title>Model Reference</title>

	<chapter xml:id="ch.ref.entities">
		<title>Top Level Model Element Reference</title>

		<section>
			<title>Introduction</title>

			<para>This chapter describes each model element that can be created within ArgoUML. The chapter covers top-level <quote>general</quote> model elements. The following chapters (see <xref xlink:href="ch.ref.entusecase" /> through <xref xlink:href="ch.ref.entdeploy" />) cover each of the ArgoUML diagrams.</para>
			<para>There is a close relationship between this material and the properties tab of the details pane (see <xref xlink:href="s1.ref.proptab" />). That section covers properties in general, in this chapter they are linked to specific model elements.</para>
		</section>

		<section xml:id="s1.ref.model">
			<title>The Model</title>

			<indexterm>
				<primary>Model, The</primary>
			</indexterm>

			<para>The model is the top level model element within ArgoUML. In the UML meta-model it is a sub-class of package. In many respects within ArgoUML it behaves similarly to a package (see <xref xlink:href="s1.ref.package" />).</para>

			<note>
				<para>ArgoUML is restricted to one model within the tool.</para>
			</note>

			<para>Standard data types, classes and packages are loaded (the default, see <xref xlink:href="ch.ref.entbuiltin" />) as sub-packages of the model. These sub-packages are not initially present in the model but are added to the model when used.</para>
			
			<section>
				<title>Model Details Tabs</title>
				
				<indexterm>
					<primary>Model Details Tabs</primary>
				</indexterm>
				<indexterm>
					<primary>Details Tabs</primary>
					<secondary>for Model</secondary>
				</indexterm>
				
				<para>The details tabs that are active for the model are as follows.</para>
				
				<variablelist>
					<varlistentry>
						<term>
							<literal>ToDoItem</literal>
						</term>
						<listitem>
							<para>Standard tab.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Properties</literal>
						</term>
						<listitem>
							<para>See <xref xlink:href="s2.ref.model_property_toolbar" /> and <xref xlink:href="s2.ref.model_property_fields" /> below.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Documentation</literal>
						</term>
						<listitem>
							<para>Standard tab. See <xref xlink:href="s2.ref.documentation_tab"
							 />.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Stereotype</literal>
						</term>
						<listitem>
							<para>Standard tab. This contains a a list of the stereotypes applied to this model, and a list of available stereotypes that may be applied to the model. </para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Tagged Values</literal>
						</term>
						<listitem>
							<para>Standard tab. In the UML meta-model, <literal> Model</literal> has the following standard tagged values defined.</para>
							<itemizedlist>
								<listitem>
									<para><literal>derived</literal> (from the superclass, <literal>ModelElement</literal>).</para>
									<para>Values <literal>true</literal>, meaning the class is redundant &#8212; it can be formally derived from other elements, or <literal>false</literal> meaning it cannot.</para>
									<para>Derived models have their value in analysis to introduce useful names or concepts, and in design to avoid re-computation.</para>
								</listitem>
							</itemizedlist>
						</listitem>
					</varlistentry>
				</variablelist>
			</section>
			
			<section xml:id="s2.ref.model_property_toolbar">
				<title>Model Property Toolbar</title>
				
				<variablelist>
					<varlistentry>
						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/navigate_up.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Go up</literal>
						</term>
						<listitem>
							<para>Navigate up through the composition structure of the model.</para>
							<para>Since the model is the top package nothing can happen, and this button is allways downlighted.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center" fileref="images/icons/package.gif"
											format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>New Package</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Add Package</primary>
							</indexterm>
							<indexterm>
								<primary>New Package</primary>
							</indexterm>
							<indexterm>
								<primary>Create New</primary>
								<secondary>Package</secondary>
							</indexterm>
							<para>This creates a new Package (see <xref xlink:href="s1.ref.package"
								 />) within the model (which appears on no diagram), navigating immediately to the properties tab for that package.</para>
							<tip>
								<para>While it can make sense to create Packages of the model this way, it is usually a lot clearer to create them within diagrams where you want them.</para>
							</tip>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/datatype.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>New DataType</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Add DataType</primary>
							</indexterm>
							<indexterm>
								<primary>New DataType</primary>
							</indexterm>
							<indexterm>
								<primary>Create New</primary>
								<secondary>DataType</secondary>
							</indexterm>
							<para>This creates a new DataType (see <xref
									xlink:href="s1.ref.datatype"
								 />) within the model (which appears on no diagram), navigating immediately to the properties tab for that DataType.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/enumeration.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>New Enumeration</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Add Enumeration</primary>
							</indexterm>
							<indexterm>
								<primary>New Enumeration</primary>
							</indexterm>
							<indexterm>
								<primary>Create New</primary>
								<secondary>Enumeration</secondary>
							</indexterm>
							<para>This creates a new Enumeration (see <xref
									xlink:href="s1.ref.enumeration"
								 />) within the model (which appears on no diagram), navigating immediately to the properties tab for that Enumeration.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/stereotype.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>New Stereotype</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Add Stereotype</primary>
							</indexterm>
							<indexterm>
								<primary>New Stereotype</primary>
							</indexterm>
							<indexterm>
								<primary>Create New</primary>
								<secondary>Stereotype</secondary>
							</indexterm>
							<para>This creates a new Stereotype (see <xref
									xlink:href="s1.ref.stereotype"
								 />) within the model, navigating immediately to the properties tab for that stereotype.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/property_delete.gif" format="GIF"
										 />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Delete</literal>
						</term>
						<listitem>
							<para>This tool is always downlighted, since it is meaningless to delete the model!</para>
						</listitem>
					</varlistentry>
				</variablelist>
			</section>
			
			<section xml:id="s2.ref.model_property_fields">
				<title>Property Fields For The Model</title>
				
				<variablelist>
					<varlistentry>
						<term>
							<literal>Name</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Model Name</primary>
							</indexterm>
							<indexterm>
								<primary>Name</primary>
								<secondary>of Model</secondary>
							</indexterm>
							<para>Text box. The name of the model. The name of a model, like all packages, is by convention all lower case.</para>
							<note>
								<para>The default name supplied to a new model by ArgoUML, <literal>untitledModel</literal>, is thus erroneous and guarantees that ArgoUML always starts up with at least one problem being reported by the design critics.</para>
							</note>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Stereotype</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Model Stereotype</primary>
							</indexterm>
							<indexterm>
								<primary>Stereotype</primary>
								<secondary>of Model</secondary>
							</indexterm>
							<para>Drop down selector. Model is provided by default with the UML standard stereotypes for model ( <literal>systemModel</literal> and <literal> metamodel</literal>) and package ( <literal>facade</literal>, <literal> framework</literal>, <literal>stub</literal>).</para>
							<para>Stereotyping models is a useful thing, although it is of limited value in ArgoUML where you have only a single model.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Navigate Stereotype</literal>
						</term>
						<listitem>
							<para><guiicon>
									<inlinemediaobject>
										<imageobject>
											<imagedata align="center"
												fileref="images/icons/navigate_stereotype.gif"
												format="GIF" />
										</imageobject>
									</inlinemediaobject>
								</guiicon> icon. If a stereotype has been selected, this will navigate to the stereotype property panel (see <xref
									xlink:href="s1.ref.stereotype" />).</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Namespace</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Model Namespace</primary>
							</indexterm>
							<indexterm>
								<primary>Namespace</primary>
								<secondary>of Model</secondary>
							</indexterm>
							<para>Text box. Records the namespace for the model. This is the package hierarchy. However since the model is at the top of the hierarchy in ArgoUML, this box is always empty.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Visibility</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Model Visibility</primary>
							</indexterm>
							<indexterm>
								<primary>Visibility</primary>
								<secondary>of Model</secondary>
							</indexterm>
							<para>Radio box, with entries <literal> public</literal>, <literal>private</literal>, <literal>protected</literal>, and <literal>package</literal>.</para>
							<para>Records the visibility for the model. Since ArgoUML only permits one model, this has no meaningful use.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Modifiers</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Model Modifiers</primary>
							</indexterm>
							<indexterm>
								<primary>Modifiers</primary>
								<secondary>of Model</secondary>
							</indexterm>
							<para>Check box, with entries <literal> Abstract</literal>, <literal>Leaf</literal> and <literal>Root</literal>.</para>
							<itemizedlist>
								<listitem>
									<para><literal>abstract</literal> is used to declare that this model cannot be instantiated, but must always be specialized.</para>
									<para>The meaning of <literal>abstract</literal> applied to a model is not that clear. It might mean that the model contains interfaces or abstract classes without realizations. Since ArgoUML only permits one model, this is not a meaningful box to check.</para>
								</listitem>
								<listitem>
									<para><literal>Leaf</literal> indicates that this model can have no further subpackages, while <literal>root</literal> indicates it is the top level model.</para>
									<para>Within ArgoUML <literal>root</literal> only meaningfully applies to the Model, since all packages sit within the model. In the absence of the <literal>topLevel</literal> stereotype, this could be used to emphasize that the Model is at the top level.</para>
								</listitem>
							</itemizedlist>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Generalizations</literal>
						</term>
						<listitem>
							<para>Text area. Lists any model that <emphasis>generalizes</emphasis> this model.</para>
							<note>
								<para>Since there is only one model in ArgoUML there is no sensible specialization or generalization that could be created.</para>
							</note>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Specializations</literal>
						</term>
						<listitem>
							<para>Text box. Lists any specialized model (i.e. for which this model is a generalization.</para>
							<note>
								<para>Since there is only one model in ArgoUML there is no sensible specialization or generalization that could be created.</para>
							</note>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Owned Elements</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Model Owned Elements</primary>
							</indexterm>
							<indexterm>
								<primary>Owned Elements</primary>
								<secondary>of Model</secondary>
							</indexterm>
							<para>Text area. A listing of the top level packages, classes, interfaces, datatypes, actors, use cases, associations, generalizations, and stereotypes within the model.</para>
							<para>Button&nbsp;1 double click on any of the model elements yields navigating to that model element.</para>
						</listitem>
					</varlistentry>
				</variablelist>
			</section>
		</section>
		
		<section xml:id="s1.ref.datatype">
			<title>Datatype</title>
			
			<indexterm>
				<primary>Datatype</primary>
			</indexterm>
			
			<para>Datatypes can be thought of as simple classes. They have no attributes, and any operations on them must have no side-effects. A useful analogy is primitive datatypes in a language like Java. The integer <quote>3</quote> stands on its own&#8212;it has no inner structure. There are operations (for example addition) on the integers, but when I perform <literal> 3&nbsp;+&nbsp;4</literal> the result is a new number, <quote>3</quote> and <quote>4</quote> are unchanged by the exercise.</para>
			<para>Within UML&nbsp;1.4, <literal>DataType</literal> is a sub-class of the <literal>Classifier</literal> metaclass. It embraces the predefined primitive types ( <literal>byte</literal>, <literal>char</literal>, <literal> double</literal>, <literal>float</literal>, <literal> int</literal>, <literal>long</literal> and <literal> short</literal>), the predefined enumeration, <literal> boolean</literal> and user defined <emphasis>enumeration types</emphasis>.</para>
			
			<note>
				<para>Also <literal>void</literal> is implemented as a datatype within ArgoUML</para>
			</note>
			
			<para>Within ArgoUML new datatypes may be created using the <literal>New datatype</literal> button on the property tabs of the model and packages (in which case the new datatype is restricted in scope to the package), as well as the properties tab for datatype. Datatypes can also be created with the tool in the diagram toolbar of a class diagram.</para>
			<para>The UML&nbsp;1.4 standard allows user defined datatypes to be placed on class diagrams to define their inheritence structure. This is also possible in ArgoUML. It is represented on the diagram by a box with two compartments, of which the top one is marked with <literal>&laquo;datatype&raquo;</literal>, and contains the name. The lower one contains operations. </para>
			
			<section>
				<title>Datatype Details Tabs</title>
				
				<indexterm>
					<primary>Datatype Details Tabs</primary>
				</indexterm>
				<indexterm>
					<primary>Details Tabs</primary>
					<secondary>for Datatype</secondary>
				</indexterm>
				
				<para>The details tabs that are active for datatypes are as follows.</para>
				
				<variablelist>
					<varlistentry>
						<term>
							<literal>ToDoItem</literal>
						</term>
						<listitem>
							<para>Standard tab.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Properties</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Datatype Properties</primary>
							</indexterm>
							<indexterm>
								<primary>Properties</primary>
								<secondary>of Datatype</secondary>
							</indexterm>
							<para>See <xref xlink:href="s2.ref.datatype_property_toolbar"
									 /> and <xref xlink:href="s2.ref.datatype_property_fields"
								 /> below.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Documentation</literal>
						</term>
						<listitem>
							<para>Standard tab. See <xref xlink:href="s2.ref.documentation_tab"
							 />.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Source</literal>
						</term>
						<listitem>
							<para>Standard tab. Unused. One would expect a class declaration for the new datatype to support code generation.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Tagged Values</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Datatype Tagged Values</primary>
							</indexterm>
							<indexterm>
								<primary>Tagged Values</primary>
								<secondary>of Datatype</secondary>
							</indexterm>
							<para>Standard tab. In the UML metamodel, <literal> Datatype</literal> has the following standard tagged values defined.</para>
							<itemizedlist>
								<listitem>
									<para><literal>persistence</literal> (from the superclass, <literal>Classifier</literal>). Values <literal>transitory</literal>, indicating state is destroyed when an instance is destroyed or <literal> persistent</literal>, marking state is preserved when an instance is destroyed.</para>
									<tip>
										<para>Since user defined datatypes are enumerations, they have no state to preserve, and the value of this tagged value is irrelevant.</para>
									</tip>
								</listitem>
								<listitem>
									<para><literal>semantics</literal> (from the superclass, <literal>Classifier</literal>). The value is a specification of the semantics of the datatype.</para>
								</listitem>
								<listitem>
									<para><literal>derived</literal> (from the superclass, <literal>ModelElement</literal>). Values <literal>true</literal>, meaning the class is redundant&#8212;it can be formally derived from other elements, or <literal>false</literal> meaning it cannot.</para>
									<tip>
										<para>While formally available, a derived datatype does not have an obvious value, and so datatypes should always be marked with <literal> derived=false</literal>.</para>
									</tip>
								</listitem>
							</itemizedlist>
						</listitem>
					</varlistentry>
				</variablelist>
			</section>
			
			<section xml:id="s2.ref.datatype_property_toolbar">
				<title>Datatype Property Toolbar</title>
				
				<indexterm>
					<primary>Datatype Property Toolbar</primary>
				</indexterm>
				<indexterm>
					<primary>Property Toolbar</primary>
					<secondary>for Datatype</secondary>
				</indexterm>
				
				<variablelist>
					<varlistentry>
						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/navigate_up.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Go up</literal>
						</term>
						<listitem>
							<para>Navigate up through the package structure.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/datatype.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>New datatype</literal>
						</term>
						<listitem>
							<para>This creates a new datatype (see <xref
									xlink:href="s1.ref.class_class"
								 />) within the same package as the current datatype.</para>
							<tip>
								<para>While it can make sense to create datatypes this way, it can be clearer to create them within the package or model where you want them.</para>
							</tip>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/enumeration.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>New Enumeration</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Add Enumeration</primary>
							</indexterm>
							<indexterm>
								<primary>New Enumeration</primary>
							</indexterm>
							<indexterm>
								<primary>Create New</primary>
								<secondary>Enumeration</secondary>
							</indexterm>
							<para>This creates a new Enumeration (see <xref
									xlink:href="s1.ref.enumeration"
								 />) in the same package as the datatype, navigating immediately to the properties tab for that Enumeration.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/operation.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>New Operation</literal>
						</term>
						<listitem>
							<para>This creates a new operation within the datatype, navigating immediately to the properties tab for that operation.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/stereotype.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>New Stereotype</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Add Stereotype</primary>
							</indexterm>
							<indexterm>
								<primary>New Stereotype</primary>
							</indexterm>
							<indexterm>
								<primary>Create New</primary>
								<secondary>Stereotype</secondary>
							</indexterm>
							<para>This creates a new Stereotype (see <xref
									xlink:href="s1.ref.stereotype"
								 />) within the same package as the datatype, navigating immediately to the properties tab for that stereotype.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/property_delete.gif" format="GIF"
										 />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Delete</literal>
						</term>
						<listitem>
							<para>This deletes the datatype from the model.</para>
						</listitem>
					</varlistentry>
				</variablelist>
			</section>
			
			<section xml:id="s2.ref.datatype_property_fields">
				<title>Property Fields For Datatype</title>
				
				<indexterm>
					<primary>Datatype Property Fields</primary>
				</indexterm>
				<indexterm>
					<primary>Property Fields</primary>
					<secondary>for Datatype</secondary>
				</indexterm>
				
				<variablelist>
					<varlistentry>
						<term>
							<literal>Name</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Datatype Name</primary>
							</indexterm>
							<indexterm>
								<primary>Name</primary>
								<secondary>of Datatype</secondary>
							</indexterm>
							<para>Text box. The name of the datatype. The primitive datatypes all have lower case names, but there is no formal convention.</para>
							<note>
								<para>The default name supplied for a newly created datatype is the empty string <quote />. Datatypes with empty string names will appear with the name <literal>(Unnamed Datatype)</literal> in the explorer.</para>
							</note>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Namespace</literal>
						</term>
						<listitem>
							<para>Drop down selector with navigate button. Allows changing the namespace for the datatype. This is the package hierarchy.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Modifiers</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Datatype Modifiers</primary>
							</indexterm>
							<indexterm>
								<primary>Modifiers</primary>
								<secondary>of Datatype</secondary>
							</indexterm>
							<para>Check box, with entries <literal> Abstract</literal>, <literal>Leaf</literal> and <literal>Root</literal>.</para>
							<itemizedlist>
								<listitem>
									<para><literal>Abstract</literal> is used to declare that this datatype cannot be instantiated, but must always be specialized.</para>
									<note>
										<para>ArgoUML provides no mechanism for specializing datatypes, so this check box is of little use.</para>
									</note>
								</listitem>
								<listitem>
									<para><literal>Leaf</literal> indicates that this datatype can have no further sub-types, while <literal>Root</literal> indicates it is a top level datatype.</para>
									<tip>
										<para>You can define the specialization of datatypes in a class diagram by drawing generalizations between them.</para>
									</tip>
								</listitem>
							</itemizedlist>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Visibility</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Datatype Visibility</primary>
							</indexterm>
							<indexterm>
								<primary>Visibility</primary>
								<secondary>of Datatype</secondary>
							</indexterm>
							<para>Radio box, with entries <literal> public</literal>, <literal>private</literal>, <literal>protected</literal>, and <literal>package</literal>.</para>
							<para>Records the visibility for the Datatype.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Client Dependencies</literal>
						</term>
						<listitem>
							<para>Text area. Lists any elements that depend on this datatype.</para>
							<caution>
								<para>It is not clear that dependencies between datatypes makes much sense.</para>
							</caution>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Supplier Dependencies</literal>
						</term>
						<listitem>
							<para>Text area. Lists any elements that this datatype depends on.</para>
							<caution>
								<para>It is not clear that dependencies between datatypes makes much sense.</para>
							</caution>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Generalizations</literal>
						</term>
						<listitem>
							<para>Text area. Lists any datatype that <emphasis>generalizes</emphasis> this datatype.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Specializations</literal>
						</term>
						<listitem>
							<para>Text box. Lists any specialized datatype (i.e. for which this datatype is a generalization.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Operations</literal>
						</term>
						<listitem>
							<para>Text area. Lists all the operations defined on this datatype. Button&nbsp;1 double click navigates to the selected operation. button&nbsp;2 click brings up a pop up menu with two entries.</para>
							<itemizedlist>
								<listitem>
									<para><literal>Move Up</literal>. Only available where there are two or more operations, and the operation selected is not at the top. It is moved up one.</para>
								</listitem>
								<listitem>
									<para><literal>Move Down</literal>. Only available where there are two or more operations listed, and the operation selected is not at the bottom. It is moved down one.</para>
								</listitem>
							</itemizedlist>
							<para>See <xref xlink:href="s1.ref.operation"
								 /> for details of operations.</para>
							<caution>
								<para>ArgoUML treats all operations as equivalent. Any operations created here will use the same mechanism as operations for classes. Remember that operations on datatypes must have no side effects (they are read-only). This means the <literal> query</literal> modifier <emphasis>must</emphasis> be checked for all operations.</para>
							</caution>
						</listitem>
					</varlistentry>
				</variablelist>
			</section>
		</section>
		
		<section xml:id="s1.ref.enumeration">
			<title>Enumeration</title>
			
			<indexterm>
				<primary>Enumeration</primary>
			</indexterm>
			
			<para>An enumeration is a primitive datatype that can have a fixed short list of values. It has no attributes, and any operations on them must have no side-effects. A useful analogy is the primitive datatype boolean in a language like Java. The boolean stands on its own&#8212;it has no inner structure. There are operations (for example logical xor) on the booleans, but when I perform <literal> true xor true</literal> the result is a new boolean, and the original 2 booleans <quote>true</quote> are unchanged by the exercise.</para>
			<para>Within UML&nbsp;1.4, <literal>Enumeration</literal> is a sub-class of the <literal>DataType</literal> metaclass. </para>
			<para>The big difference with other DataTypes, is that an Enumeration has <literal>EnumerationLiteral</literal>s. E.g. the Enumeration <quote>boolean</quote> is defined as having 2 EnumerationLiterals, <quote>true</quote> and <quote>false</quote>. </para>
			<para>Within ArgoUML new enumerations may be created using the <literal>New Enumeration</literal> button on the property tabs of the model and packages (in which case the new enumeration is restricted in scope to the package), as well as the properties tab for datatype and enumeration. Enumerations can also be created with the tool in the diagram toolbar of a class diagram. </para>
			<para>The UML&nbsp;1.4 standard allows user defined enumerations to be placed on class diagrams to define their inheritence structure. This is also possible in ArgoUML. It is represented on the diagram by a box with three compartments, of which the top one is marked with <literal>&laquo;enumeration&raquo;</literal>, and contains the name. The middle compartment shows the enumeration literals. The lower one contains operations. </para>
			
			<section>
				<title>Enumeration Details Tabs</title>
				
				<indexterm>
					<primary>Enumeration Details Tabs</primary>
				</indexterm>
				<indexterm>
					<primary>Details Tabs</primary>
					<secondary>for Enumeration</secondary>
				</indexterm>
				
				<para>The details tabs that are active for enumerations are as follows.</para>
				
				<variablelist>
					<varlistentry>
						<term>
							<literal>ToDoItem</literal>
						</term>
						<listitem>
							<para>Standard tab.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Properties</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Enumeration Properties</primary>
							</indexterm>
							<indexterm>
								<primary>Properties</primary>
								<secondary>of Enumeration</secondary>
							</indexterm>
							<para>See <xref xlink:href="s2.ref.enumeration_property_toolbar"
									 /> and <xref xlink:href="s2.ref.enumeration_property_fields"
								 /> below.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Documentation</literal>
						</term>
						<listitem>
							<para>Standard tab. See <xref xlink:href="s2.ref.documentation_tab"
							 />.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Presentation</literal>
						</term>
						<listitem>
							<para>Standard tab. </para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Source</literal>
						</term>
						<listitem>
							<para>Standard tab. </para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Stereotype</literal>
						</term>
						<listitem>
							<para>Standard tab. The UML metamodel has the following stereotypes defined by default for a Classifier, which also apply to an Enumeration: </para>
							<itemizedlist>
								<listitem>
									<para><literal>metaclass</literal> (from the superclass, <literal>Classifier</literal>). <!-- TODO: Not present! -->
									</para>
								</listitem>
								<listitem>
									<para><literal>powertype</literal> (from the superclass, <literal>Classifier</literal>). <!-- TODO: Not present! -->
									</para>
								</listitem>
								<listitem>
									<para><literal>process</literal> (from the superclass, <literal>Classifier</literal>). </para>
								</listitem>
								<listitem>
									<para><literal>thread</literal> (from the superclass, <literal>Classifier</literal>). </para>
								</listitem>
								<listitem>
									<para><literal>utility</literal> (from the superclass, <literal>Classifier</literal>). </para>
								</listitem>
							</itemizedlist>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Tagged Values</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Enumeration Tagged Values</primary>
							</indexterm>
							<indexterm>
								<primary>Tagged Values</primary>
								<secondary>of Enumeration</secondary>
							</indexterm>
							<para>Standard tab. In the UML metamodel, <literal> Enumeration</literal> has no standard tagged values defined.</para>
						</listitem>
					</varlistentry>
				</variablelist>
			</section>
			
			<section xml:id="s2.ref.enumeration_property_toolbar">
				<title>Enumeration Property Toolbar</title>
				
				<indexterm>
					<primary>Enumeration Property Toolbar</primary>
				</indexterm>
				<indexterm>
					<primary>Property Toolbar</primary>
					<secondary>for Enumeration</secondary>
				</indexterm>
				
				<variablelist>
					<varlistentry>
						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/navigate_up.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Go up</literal>
						</term>
						<listitem>
							<para>Navigate up through the composition structure.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/datatype.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>New datatype</literal>
						</term>
						<listitem>
							<para>This creates a new datatype (see <xref
									xlink:href="s1.ref.class_class"
								 />) within the same package as the current enumeration.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/enumeration.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>New enumeration</literal>
						</term>
						<listitem>
							<para>This creates a new enumeration within the same namespace as the current enumeration, navigating immediately to the properties tab for new enumeration.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/enumeration_literal.gif"
											format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>New enumeration literal</literal>
						</term>
						<listitem>
							<para>This creates a new enumeration literal within the enumeration, navigating immediately to the properties tab for that literal.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/operation.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>New Operation</literal>
						</term>
						<listitem>
							<para>This creates a new operation within the enumeration, navigating immediately to the properties tab for that operation.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/stereotype.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>New Stereotype</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Add Stereotype</primary>
							</indexterm>
							<indexterm>
								<primary>New Stereotype</primary>
							</indexterm>
							<indexterm>
								<primary>Create New</primary>
								<secondary>Stereotype</secondary>
							</indexterm>
							<para>This creates a new Stereotype (see <xref
									xlink:href="s1.ref.stereotype"
								 />) within the same package as the enumeration, navigating immediately to the properties tab for that stereotype.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/property_delete.gif" format="GIF"
										 />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Delete from Model</literal>
						</term>
						<listitem>
							<para>This deletes the datatype from the model.</para>
						</listitem>
					</varlistentry>
				</variablelist>
			</section>
			
			<section xml:id="s2.ref.enumeration_property_fields">
				<title>Property Fields For Enumeration</title>
				
				<indexterm>
					<primary>Enumeration Property Fields</primary>
				</indexterm>
				<indexterm>
					<primary>Property Fields</primary>
					<secondary>for Enumeration</secondary>
				</indexterm>
				
				<variablelist>
					<varlistentry>
						<term>
							<literal>Name</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Enumeration Name</primary>
							</indexterm>
							<indexterm>
								<primary>Name</primary>
								<secondary>of Enumeration</secondary>
							</indexterm>
							<para>Text box. The name of the enumeration. The primitive enumerations all have lower case names, but there is no formal convention.</para>
							<note>
								<para>The default name supplied for a newly created datatype is the empty string <quote />. Enumerations with empty string names will appear with the name <literal>(Unnamed Enumeration)</literal> in the explorer.</para>
							</note>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Namespace</literal>
						</term>
						<listitem>
							<para>Drop down selector with navigation button. Allows changing the namespace for the enumeration. This is the composition hierarchy.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Modifiers</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Enumeration Modifiers</primary>
							</indexterm>
							<indexterm>
								<primary>Modifiers</primary>
								<secondary>of Enumeration</secondary>
							</indexterm>
							<para>Check box, with entries <literal> Abstract</literal>, <literal>Leaf</literal> and <literal>Root</literal>.</para>
							<itemizedlist>
								<listitem>
									<para><literal>Abstract</literal> is used to declare that this enumeration cannot be instantiated, but must always be specialized.</para>
								</listitem>
								<listitem>
									<para><literal>Leaf</literal> indicates that this enumeration can have no further sub-types, while <literal>Root</literal> indicates it is a top level enumeration.</para>
								</listitem>
							</itemizedlist>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Visibility</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Enumeration Visibility</primary>
							</indexterm>
							<indexterm>
								<primary>Visibility</primary>
								<secondary>of Enumeration</secondary>
							</indexterm>
							<para>Radio box, with entries <literal> public</literal>, <literal>private</literal>, <literal>protected</literal>, and <literal>package</literal>.</para>
							<para>Records the visibility for the Enumeration.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Client Dependencies</literal>
						</term>
						<listitem>
							<para>Text area. Lists any elements that depend on this enumeration. Button&nbsp;1 double click navigates to the selected modelelement. Button&nbsp;2 click brings up a pop up menu with following entry.</para>
							<itemizedlist>
								<listitem>
									<para><literal>Add…</literal>. This brings up a dialog box that allows to create dependencies from other modelelements.</para>
								</listitem>
							</itemizedlist>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Supplier Dependencies</literal>
						</term>
						<listitem>
							<para>Text area. Lists any elements that this enumeration depends on. Button&nbsp;1 double click navigates to the selected modelelement. Button&nbsp;2 click brings up a pop up menu with the following entry.</para>
							<itemizedlist>
								<listitem>
									<para><literal>Add…</literal>. This brings up a dialog box that allows to create dependencies to other modelelements.</para>
								</listitem>
							</itemizedlist>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Generalizations</literal>
						</term>
						<listitem>
							<para>Text area. Lists any enumeration that <emphasis>generalizes</emphasis> this enumeration.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Specializations</literal>
						</term>
						<listitem>
							<para>Text box. Lists any specialized enumerations (i.e. for which this enumeration is a generalization.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Operations</literal>
						</term>
						<listitem>
							<para>Text area. Lists all the operations defined on this enumeration. Button&nbsp;1 double click navigates to the selected operation. Button&nbsp;2 click brings up a pop up menu with two entries.</para>
							<itemizedlist>
								<listitem>
									<para><literal>Move Up</literal>. Only available where there are two or more operations, and the operation selected is not at the top. It is moved up one.</para>
								</listitem>
								<listitem>
									<para><literal>Move Down</literal>. Only available where there are two or more operations listed, and the operation selected is not at the bottom. It is moved down one.</para>
								</listitem>
							</itemizedlist>
							<para>See <xref xlink:href="s1.ref.operation"
								 /> for details of operations.</para>
							<caution>
								<para>ArgoUML treats all operations as equivalent. Any operations created here will use the same mechanism as operations for classes. Remember that operations on enumerations must have no side effects (they are read-only). This means the <literal> query</literal> modifier <emphasis>must</emphasis> be checked for all operations.</para>
							</caution>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Literals</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Enumeration Literals</primary>
							</indexterm>
							<indexterm>
								<primary>Literals</primary>
								<secondary>of Enumeration</secondary>
							</indexterm>
							<para>Text area. Lists all the enumeration literals defined for this enumeration. Button&nbsp;1 double click navigates to the selected literal, button&nbsp;2 click brings up a pop up menu with two entries.</para>
							<itemizedlist>
								<listitem>
									<para><literal>Move Up</literal>. Only available where there are two or more literals, and the literal selected is not at the top. It is moved up one.</para>
								</listitem>
								<listitem>
									<para><literal>Move Down</literal>. Only available where there are two or more literals listed, and the literal selected is not at the bottom. It is moved down one.</para>
								</listitem>
							</itemizedlist>
						</listitem>
					</varlistentry>
				</variablelist>
			</section>
		</section>
		
		<section xml:id="s1.ref.enumeration-literal">
			<title>Enumeration Literal</title>
			
			<indexterm>
				<primary>Enumeration Literal</primary>
			</indexterm>
			
			<para>An enumeration literal is one of the predefined values of an Enumeration.</para>
		</section>
		
		<section xml:id="s1.ref.stereotype">
			<title>Stereotype</title>
			
			<indexterm>
				<primary>Stereotype</primary>
			</indexterm>
			
			<para>Stereotypes are the main extension mechanism of UML, providing a way to derive specializations of the standard metaclasses. <literal>Stereotype</literal> is a sub-class of <literal>GeneralizableElement</literal> in the UML metamodel. Stereotypes are supplemented by <emphasis>constraints</emphasis> and <emphasis>tagged values</emphasis>.</para>
			<para>New stereotypes are added from the property tab of almost any model element. Properties of existing stereotypes can be reached by selecting the property tab for any model element with that stereotype and using the navigate button ( <guiicon> <inlinemediaobject> <imageobject> <imagedata align="center" fileref="images/icons/navigate_stereotype.gif" format="GIF" /> </imageobject> </inlinemediaobject> </guiicon>) within the property tab.</para>
			
			<section>
				<title>Stereotype Details Tabs</title>
				
				<indexterm>
					<primary>Stereotype Details Tabs</primary>
				</indexterm>
				<indexterm>
					<primary>Details Tabs</primary>
					<secondary>for Stereotype</secondary>
				</indexterm>
				
				<para>The details tabs that are active for stereotypes are as follows.</para>
				
				<variablelist>
					<varlistentry>
						<term>
							<literal>ToDoItem</literal>
						</term>
						<listitem>
							<para>Standard tab.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Properties</literal>
						</term>
						<listitem>
							<para>See <xref xlink:href="s2.ref.stereotype_property_toolbar"
									 /> and <xref xlink:href="s2.ref.stereotype_property_fields"
								 /> below.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Documentation</literal>
						</term>
						<listitem>
							<para>Standard tab. See <xref xlink:href="s2.ref.documentation_tab"
							 />.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Stereotype</literal>
						</term>
						<listitem>
							<para>Standard tab.</para>
							<warning>
								<para>Here you can set stereotypes of stereotypes, not a very usefull thing to do.</para>
							</warning>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Tagged Values</literal>
						</term>
						<listitem>
							<para>Standard tab. In the UML metamodel, <literal> Stereotype</literal> has the following standard tagged values defined.</para>
							<itemizedlist>
								<listitem>
									<para><literal>derived</literal> (from the superclass, <literal>ModelElement</literal>). Values <literal>true</literal>, meaning the class is redundant&#8212;it can be formally derived from other elements, or <literal>false</literal> meaning it cannot.</para>
									<note>
										<para>This indicates any element with this stereotype has the <literal>derived</literal> tag set accordingly.</para>
									</note>
								</listitem>
							</itemizedlist>
							<caution>
								<para>Tagged values for a stereotype are rather different to those for elements in the UML core architecture, in that they apply to all model elements to which the stereotype is applied, <emphasis>not</emphasis> just the stereotype itself.</para>
							</caution>
						</listitem>
					</varlistentry>
				</variablelist>
			</section>
			
			<section xml:id="s2.ref.stereotype_property_toolbar">
				<title>Stereotype Property Toolbar</title>
				
				<indexterm>
					<primary>Stereotype Property Toolbar</primary>
				</indexterm>
				<indexterm>
					<primary>Property Toolbar</primary>
					<secondary>for Stereotype</secondary>
				</indexterm>
				
				<variablelist>
					<varlistentry>
						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/navigate_up.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Go up</literal>
						</term>
						<listitem>
							<para>Navigate up through the package structure of the model.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/stereotype.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Add stereotype</literal>
						</term>
						<listitem>
							<para>This creates a new stereotype (see <xref
									xlink:href="s1.ref.stereotype"
								 />) within the model (which appears on no diagram), navigating immediately to the properties tab for that stereotype.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/tag_definition.gif" format="GIF"
										 />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>New Tag Definition</literal>
						</term>
						<listitem>
							<para>This creates a new tag definition (see <xref
									xlink:href="s1.ref.tagdefinition"
								 />) within the model (which appears on no diagram), navigating immediately to the properties tab for that tagdefinition.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/property_delete.gif" format="GIF"
										 />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Delete</literal>
						</term>
						<listitem>
							<para>This deletes the stereotype from the model.</para>
						</listitem>
					</varlistentry>
				</variablelist>
			</section>
			
			<section xml:id="s2.ref.stereotype_property_fields">
				<title>Property Fields For Stereotype</title>
				
				<indexterm>
					<primary>Stereotype Property Fields</primary>
				</indexterm>
				<indexterm>
					<primary>Property Fields</primary>
					<secondary>for Stereotype</secondary>
				</indexterm>
				
				<variablelist>
					<varlistentry>
						<term>
							<literal>Name</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Stereotype Name</primary>
							</indexterm>
							<indexterm>
								<primary>Name</primary>
								<secondary>of Stereotype</secondary>
							</indexterm>
							<para>Text box. The name of the stereotype. There is no convention for naming stereotypes, beyond starting them with a lower case letter. Even the standard UML stereotypes vary between all lower case (e.g. <literal> metamodel</literal>), bumpy caps (e.g. <literal> systemModel</literal>) and space separated (e.g. <literal>object model</literal>).</para>
							<note>
								<para>ArgoUML does not enforce any naming convention for stereotypes</para>
							</note>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Base Class</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Stereotype Base Class</primary>
							</indexterm>
							<indexterm>
								<primary>Base Class</primary>
								<secondary>of Stereotype</secondary>
							</indexterm>
							<para>Drop down selector. Any stereotype must be derived from one of the metaclasses in the UML metamodel <!-- <literal>Abstraction</literal>, <literal> Actor</literal>, <literal>Association</literal>, <literal>AssociationEnd</literal>, <literal> Attribute</literal>, <literal> BehavioralFeature</literal>, <literal> CallEvent</literal>, <literal>Class</literal>, <literal> Classifier</literal>, <literal>Collaboration</literal>, <literal>Comment</literal>, <literal> Component</literal>, <literal>Constraint</literal>, <literal>DataType</literal>, <literal> Exception</literal>, <literal>Flow</literal>, <literal> Generalization</literal>, <literal>Interface</literal>, <literal>Link</literal>, <literal>Model</literal>, <literal>ModelElement</literal>, <literal> Node</literal>, <literal>NodeInstance</literal>, <literal>ObjectFlowState</literal>, <literal> Operation</literal>, <literal>Package</literal>, <literal>Permission</literal>, <literal> Signal</literal>, <literal>Subsystem</literal> and <literal>Usage</literal>) --> or the model element classes that derive from them. The stereotype will then be available to model elements that derive from that same metaclass or that model element.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Namespace</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Stereotype Namespace</primary>
							</indexterm>
							<indexterm>
								<primary>Namespace</primary>
								<secondary>of Stereotype</secondary>
							</indexterm>
							<para>Drop down selector with navigation button. Records the namespace for the stereotype. This is the package hierarchy.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Modifiers</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Stereotype Modifiers</primary>
							</indexterm>
							<indexterm>
								<primary>Modifiers</primary>
								<secondary>of Stereotype</secondary>
							</indexterm>
							<para>Check box, with entries <literal> Abstract</literal>, <literal>Leaf</literal> and <literal>Root</literal>.</para>
							<itemizedlist>
								<listitem>
									<para><literal>Abstract</literal> is used to declare that model elements that use this stereotype cannot be instantiated, but must always be specialized.</para>
								</listitem>
								<listitem>
									<para><literal>Leaf</literal> indicates that model elements that use this stereotype can have no further sub-types, while <literal>Root</literal> indicates it is a top level model element.</para>
								</listitem>
							</itemizedlist>
							<caution>
								<para>Remember that these modifiers apply to the model elements using the stereotype, not just the stereotype. <!-- TODO: MVW: I strongly doubt this. The standard says: "Tag definitions and constraints attached to a stereotype apply to all model elements branded by that stereotype." But it does not say the same for modifiers. -->
								</para>
							</caution>
							<warning>
								<para>ArgoUML neither imposes, nor checks that model elements using a stereotype adopt the stereotype&#039;s modifiers.</para>
							</warning>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Visibility</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Stereotype Visibility</primary>
							</indexterm>
							<indexterm>
								<primary>Visibility</primary>
								<secondary>of Stereotype</secondary>
							</indexterm>
							<para>Radio box, with entries <literal> public</literal>, <literal>private</literal>, <literal>protected</literal>, and <literal>package</literal>.</para>
							<para>Records the visibility for the stereotype.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Generalizations</literal>
						</term>
						<listitem>
							<para>Text area. Lists any stereotype that <emphasis>generalizes</emphasis> this stereotype.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Specializations</literal>
						</term>
						<listitem>
							<para>Text area. Lists any specialized stereotype (i.e. for which this stereotype is a generalization.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Tag Definitions</literal>
						</term>
						<listitem>
							<para>Text area. Lists any tag definitions that are defined for this stereotype.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Extended Elements</literal>
						</term>
						<listitem>
							<para>Text area. Lists all modelelements that are stereotyped by this stereotype.</para>
						</listitem>
					</varlistentry>
				</variablelist>
			</section>
		</section>
		
		<section xml:id="s1.ref.tagdefinition">
			<title>Tag Definition</title>
			<para>(To Be Written)</para>
		</section>
		
		<section xml:id="s1.ref.diagram_types">
			<title>Diagram</title>
			
			<indexterm>
				<primary>Diagram</primary>
			</indexterm>
			
			<para>The UML standard specifies eight principal diagrams, all of which are supported by ArgoUML.</para>
			
			<itemizedlist>
				<listitem>
					<para><emphasis>Use case diagram</emphasis>. Used to capture and analyse the requirements for any OOA&amp;D project. See <xref
							xlink:href="ch.ref.entusecase"
						 /> for details of the ArgoUML use case diagram and the model elements it supports.</para>
				</listitem>
				<listitem>
					<para><emphasis>Class diagram</emphasis>. This diagram captures the static structure of the system being designed, showing the classes, interfaces and datatypes and how they are related. Variants of this diagram are used to show package structures within a system (the <emphasis>package diagram</emphasis>) and the relationships between particular instances (the <emphasis>object diagram</emphasis>).</para>
					<para>The ArgoUML class diagram provides support for class and package diagrams. See <xref
							xlink:href="ch.ref.entclass"
						 /> for details of the model elements it supports. The object diagram is suported on the Deployment diagram.</para>
				</listitem>
				<listitem>
					<para><emphasis>Behavior diagrams</emphasis>. There are four such diagrams (or strictly speaking, five, since the use case diagram is a type of behavior diagram), which show the dynamic behavior of the system at all levels.</para>
					<itemizedlist>
						<listitem>
							<para><emphasis>Statechart diagram</emphasis>. Used to show the dynamic behavior of a single object (class instance). This diagram is of particular use in systems using complex communication protocols, such as in telecommunications. See <xref
									xlink:href="ch.ref.entstate"
								 /> for details of the ArgoUML statechart diagram and the model elements it supports.</para>
						</listitem>
						<listitem>
							<para><emphasis>Activity diagram</emphasis>. Used to show the dynamic behavior of groups of objects (class instance). This diagram is an alternative to the statechart diagram, and is better suited to systems with a great deal of user interaction. See <xref
									xlink:href="ch.ref.entactiv"
								 /> for details of the ArgoUML activity diagram and the model elements it supports.</para>
						</listitem>
						<listitem>
							<para><emphasis>Interaction diagrams</emphasis>. There are two diagrams in this category, used to show the dynamic interaction between objects (class instances) in the system.</para>
							<itemizedlist>
								<listitem>
									<para><emphasis>Sequence diagram</emphasis>. Shows the interactions (typically messages or procedure calls) between instances of classes (objects) and actors against a timeline. Particularly useful where the timing relationships between interactions are important. See <xref
											xlink:href="ch.ref.entseq"
										 /> for details of the ArgoUML sequence diagram and the model elements it supports.</para>
								</listitem>
								<listitem>
									<para><emphasis>Collaboration diagram</emphasis>. Shows the interactions (typically messages or procedure calls) between instances of classes (objects) and actors against the structural relationships between those instances. Particularly suitable where it is useful to relate interactions to the static structure of the system. See <xref
											xlink:href="ch.ref.entcollab"
										 /> for details of the ArgoUML collaboration diagram and the model elements it supports.</para>
								</listitem>
							</itemizedlist>
						</listitem>
					</itemizedlist>
				</listitem>
				<listitem>
					<para><emphasis>Implementation diagrams</emphasis>. UML defines two implementation diagrams to show the relationship between the software components that make up a system (the <emphasis>component diagram</emphasis>) and the relationship between the software and the hardware on which it is deployed at run-time (the <emphasis>deployment diagram</emphasis>.</para>
					<para>The ArgoUML deployment diagram provides support for both component and deployment diagrams, and additionally for object diagrams. See <xref
							xlink:href="ch.ref.entdeploy"
						 /> for details of the diagram and the model elements it supports.</para>
				</listitem>
			</itemizedlist>
			
			<para>Diagrams are created using the <literal>Create</literal> drop down menu (see <xref xlink:href="s1.ref.create.diagram.menu" /> ), or with the tools on the toolbar (see <xref xlink:href="ch.ref.toolbar.create" />), or with the pop-up menus in the explorer.</para>
			
			<note>
				<para>ArgoUML uses its deployment diagram to create the UML 1.4 component, deployment and object diagrams.</para>
			</note>
			
			<caution>
				<para>Statechart and activity diagrams are associated with a particular class or operation (or the latter also with a package), and can only be created when this modelelement has been selected.</para>
			</caution>
			
			<warning>
				<para>In ArgoUML version 0.24, the UML 1.4 object diagram as a variant of the class diagram is not directly supported. However, it is possible to create simple object diagrams within the ArgoUML deployment diagram.</para>
			</warning>
			
			<section>
				<title>Diagram Details Tabs</title>
				
				<indexterm>
					<primary>Diagram Details Tabs</primary>
				</indexterm>
				<indexterm>
					<primary>Details Tabs</primary>
					<secondary>for Diagrams</secondary>
				</indexterm>
				
				<para>The details tabs that are active for diagrams are as follows.</para>
				
				<variablelist>
					<varlistentry>
						<term>
							<literal>ToDoItem</literal>
						</term>
						<listitem>
							<para>Standard tab.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Properties</literal>
						</term>
						<listitem>
							<para>See <xref xlink:href="s2.ref.diagram_property_fields"
							 /> below.</para>
						</listitem>
					</varlistentry>
				</variablelist>
			</section>
			
			<section>
				<title>Diagram Property Toolbar</title>
				
				<variablelist>
					<varlistentry>
						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/navigate_up.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Go up</literal>
						</term>
						<listitem>
							<para>Navigate up through the package structure of the model.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/property_delete.gif" format="GIF"
										 />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Delete</literal>
						</term>
						<listitem>
							<para>This deletes the diagram from the model. As a consequence, in case of a statechart diagram or an activity diagram, all contained elements are deleted, too.</para>
						</listitem>
					</varlistentry>
				</variablelist>
			</section>
			
			<section xml:id="s2.ref.diagram_property_fields">
				<title>Property Fields For Diagram</title>
				
				<indexterm>
					<primary>Diagram Property Fields</primary>
				</indexterm>
				<indexterm>
					<primary>Property Fields</primary>
					<secondary>for Diagrams</secondary>
				</indexterm>
				
				<variablelist>
					<varlistentry>
						<term>
							<literal>Name</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Diagram Name</primary>
							</indexterm>
							<indexterm>
								<primary>Name</primary>
								<secondary>of Diagrams</secondary>
							</indexterm>
							<para>The name of the diagram. There are no conventions for naming diagrams. By default, ArgoUML uses the (space separated) diagram name and a sequence number, thus <literal>Use Case Diagram 1</literal>.</para>
							<tip>
								<para>This name is used to generate a filename when activating the <quote>Save Graphics…</quote> menu-item.</para>
							</tip>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Home Model</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Home Model</primary>
							</indexterm>
							<indexterm>
								<primary>Home Model</primary>
								<secondary>of Diagrams</secondary>
							</indexterm>
							<para>The Home Model of the diagram is not something defined in the UML specification. The Home Model is the modelelement represented by the diagram. Hence its type depends on the type of diagram: e.g. it is the namespace represented by a class diagram, or the statemachine in case of a Statechart diagram. </para>
						</listitem>
					</varlistentry>
				</variablelist>
			</section>
		</section>
	</chapter>

	<chapter xml:id="ch.ref.entusecase">

		<title>Use Case Diagram Model Element Reference</title>

		<indexterm>
			<primary>Use Case Diagram</primary>
		</indexterm>
		
		<section>
			<title>Introduction</title>
			
			<para>This chapter describes each model element that can be created within a use case diagram. Note that some sub-model elements of model elements on the diagram may not actually themselves appear on the diagram.</para>
			<para>There is a close relationship between this material and the properties tab of the details pane (see <xref xlink:href="s1.ref.proptab" />). That section covers properties in general, in this chapter they are linked to specific model elements.</para>
			<para><xref xlink:href="fig.ref.use_case_diagram" /> shows a use case diagram with all typical model elements displayed.</para>
			
			<figure float="1" xml:id="fig.ref.use_case_diagram">
				<title>Typical model elements on a use case diagram.</title>
				<screenshot><mediaobject><imageobject> <imagedata align="center" fileref="images/reference/use_case_diagram.gif" format="GIF" /></imageobject></mediaobject></screenshot>
			</figure>
			
			<section>
				<title>ArgoUML Limitations Concerning Use Case Diagrams</title>
				
				<para>Use case diagrams are now well supported within ArgoUML. There still are some minor limitations though, especially with extension points.</para>
				
				<note>
					<para>Earlier versions of ArgoUML (0.9 and earlier) implemented extend and include relationships by using a stereotyped dependency relationship. Although such diagrams will show correctly on the diagram, they will not link correctly to the use cases, and should be replaced by proper extend and include relationships using the current system.</para>
				</note>
			</section>
		</section>

		<section xml:id="s1.ref.actor">

			<title>Actor</title>

			<indexterm>
				<primary>Actor</primary>
			</indexterm>
			<indexterm>
				<primary>External entity</primary>
			</indexterm>
			
			<para>An actor represents any external entity (human or machine) that interacts with the system, providing input, receiving output, or both.</para>
			<para>Within the UML metamodel, actor is a sub-class of <literal>classifier</literal>.</para>
			<para>The actor is represented by a <quote>stick man</quote> figure on the diagram (see <xref xlink:href="fig.ref.use_case_diagram" />).</para>

			<section>
				<title>Actor Details Tabs</title>
				
				<indexterm>
					<primary>Actor Details Tabs</primary>
				</indexterm>
				<indexterm>
					<primary>Details Tabs</primary>
					<secondary>for Actor</secondary>
				</indexterm>
				
				<para>The details tabs that are active for actors are as follows.</para>
				
				<variablelist>
					<varlistentry>
						<term>
							<literal>ToDoItem</literal>
						</term>
						<listitem>
							<para>Standard tab.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Properties</literal>
						</term>
						<listitem>
							<para>See <xref xlink:href="s2.ref.actor_property_toolbar" /> and <xref
									xlink:href="s2.ref.actor_property_fields" /> below.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Documentation</literal>
						</term>
						<listitem>
							<para>Standard tab. See <xref xlink:href="s2.ref.documentation_tab"
							 />.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Presentation</literal>
						</term>
						<listitem>
							<para>Standard tab. The fill color is used for the stick man&#039;s head.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Source</literal>
						</term>
						<listitem>
							<para>Standard tab. Usually, no code is provided for an actor, since it is external to the system.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Stereotype</literal>
						</term>
						<listitem>
							<para>Standard tab.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Tagged Values</literal>
						</term>
						<listitem>
							<para>Standard tab. In the UML metamodel, <literal> Actor</literal> has the following standard tagged values defined.</para>
							<itemizedlist>
								<listitem>
									<para><literal>persistence</literal> (from the superclass, <literal>Classifier</literal>). Values <literal>transitory</literal>, indicating state is destroyed when an instance is destroyed or <literal> persistent</literal>, marking state is preserved when an instance is destroyed.</para>
									<tip>
										<para>Actors sit outside the system, and so their internal behavior is of little concern, and this tagged value is best ignored.</para>
									</tip>
								</listitem>
								<listitem>
									<para><literal>semantics</literal> (from the superclass, <literal>Classifier</literal>). The value is a specification of the semantics of the actor.</para>
								</listitem>
								<listitem>
									<para><literal>derived</literal> (from the superclass, <literal>ModelElement</literal>). Values <literal>true</literal>, meaning the actor is redundant&#8212;it can be formally derived from other elements, or <literal>false</literal> meaning it cannot.</para>
									<note>
										<para>Derived actors have limited value, since they sit outside the system being designed. They may have their value in analysis to introduce useful names or concepts.</para>
									</note>
								</listitem>
							</itemizedlist>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Checklist</literal>
						</term>
						<listitem>
							<para>Standard tab for a Classifier.</para>
						</listitem>
					</varlistentry>
				</variablelist>
			</section>

			<section xml:id="s2.ref.actor_property_toolbar">

				<title>Actor Property Toolbar</title>

				<variablelist>
					<varlistentry>
						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/navigate_up.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Go up</literal>
						</term>

						<listitem>

							<para>Navigate up through the package structure of the 
                model.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center" fileref="images/icons/actor.gif"
											format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Add Actor</literal>
						</term>

						<listitem>

							<indexterm>
								<primary>Add Actor</primary>
							</indexterm>
							<indexterm>
								<primary>New Actor</primary>
							</indexterm>
							<indexterm>
								<primary>Create 
                New</primary>
								<secondary>Actor</secondary>
							</indexterm>
							<para>This creates a new actor within the model, (but 
                not within the diagram), navigating immediately to the 
                properties tab for that actor.</para>

							<tip>

								<para>This method of creating a new actor may be 
                  confusing. It is much better to create an actor on 
                  the diagram.</para>

							</tip>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/reception.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>New Reception</literal>
						</term>

						<listitem>

							<indexterm>
								<primary>Add Reception</primary>
							</indexterm>
							<indexterm>
								<primary>New Reception</primary>
							</indexterm>
							<indexterm>
								<primary>Create 
                New</primary>
								<secondary>Reception</secondary>
							</indexterm>

							<para>This creates a new reception within the model,(but 
                not within the diagram), navigating immediately to the 
                properties tab for that rception.</para>

							<tip>

								<para>A reception is a declaration that the actor
                  handles a signal, but the actual handling 
                  is specified by a state machine.</para>

							</tip>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/property_delete.gif" format="GIF"
										 />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Delete</literal>
						</term>

						<listitem>

							<para>This deletes the selected actor from the 
                model.</para>

							<warning>

								<para>This is a deletion from the model 
                  <emphasis>not</emphasis> just the diagram. To delete 
                  an actor from the diagram, but keep it within the 
                  model, use the main menu <literal>Remove From 
                  Diagram</literal> (or press the Delete key).</para>

							</warning>

						</listitem>

					</varlistentry>

				</variablelist>

			</section>

			<section xml:id="s2.ref.actor_property_fields">
				<title>Property Fields For Actor</title>
				
				<variablelist>
					<varlistentry>
						<term>
							<literal>Name</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Actor Name</primary>
							</indexterm>
							<indexterm>
								<primary>Name</primary>
								<secondary>of Actor</secondary>
							</indexterm>
							<para>Text box. The name of the actor. The diagram shows this name below the stick man figure. Since an actor is a classifier, it would be conventional to Capitalize the first letter (and initial letters of any component words), e.g. <literal> RemoteSensor</literal>.</para>
							<note>
								<para>ArgoUML does not enforce any naming convention for actors</para>
							</note>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Namespace</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Actor Namespace</primary>
							</indexterm>
							<indexterm>
								<primary>Namespace</primary>
								<secondary>of Actor</secondary>
							</indexterm>
							<para>Text box with navigation button. Records the namespace for the actor. This is the package hierarchy.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Modifiers</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Actor Modifiers</primary>
							</indexterm>
							<indexterm>
								<primary>Modifiers</primary>
								<secondary>of Actor</secondary>
							</indexterm>
							<para>Check box, with entries <literal> Abstract</literal>, <literal>Leaf</literal> and <literal>Root</literal>.</para>
							<itemizedlist>
								<listitem>
									<para><literal>Abstract</literal> is used to declare that this actor cannot be instantiated, but must always be specialized.</para>
									<caution>
										<para>While actors can be specialized and generalized, it is not clear that an abstract actor has any meaning. Perhaps it might be used to indicate an actor that does not itself interact with a use case, but whose children do.</para>
									</caution>
								</listitem>
								<listitem>
									<para><literal>leaf</literal> indicates that this actor can have no further children, while <literal> Root</literal> indicates it is a top level actor with no parent.</para>
								</listitem>
							</itemizedlist>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Generalizations</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Actor Generalizations</primary>
							</indexterm>
							<indexterm>
								<primary>Generalizations</primary>
								<secondary>of Actor</secondary>
							</indexterm>
							<para>Text area. Lists any actor that <emphasis>generalizes</emphasis> this actor.</para>
							<para>Button&nbsp;1 double click navigates to the generalization and opens its property tab.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Specializations</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Actor Specializations</primary>
							</indexterm>
							<indexterm>
								<primary>Specializations</primary>
								<secondary>of Actor</secondary>
							</indexterm>
							<para>Text box. Lists any specialized actor (i.e. for which this actor is a generalization. The specialized actors can communicate with the same use case instances as this actor.</para>
							<para>Button&nbsp;1 double click navigates to the generalization and opens its property tab.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Association Ends</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Actor Association Ends</primary>
							</indexterm>
							<indexterm>
								<primary>Association Ends</primary>
								<secondary>of Actor</secondary>
							</indexterm>
							<para>Text area. Lists any association ends of associations connected to this actor.</para>
							<para>Button&nbsp;1 double click navigates to the selected entry.</para>
						</listitem>
					</varlistentry>
				</variablelist>
			</section>
		</section>

		<section xml:id="s1.ref.use_case">
			<title>Use Case</title>
			
			<indexterm>
				<primary>Use Case</primary>
			</indexterm>
			
			<para>A use case represents a complete meaningful <quote>chunk</quote> of activity by the system in relation to its external users (actors), human or machine. It represents the primary route through which requirements are captured for the system under construction</para>
			<para>Within the UML metamodel, use case is a sub-class of <literal>classifier</literal>.</para>
			<para>The use case icon is an oval (see <xref xlink:href="fig.ref.use_case_diagram"
				 />). It may be split in two, with the lower compartment showing extension points</para>
			
			<caution>
				<para>By default ArgoUML does not show the extension point compartment. It may be revealed by the context sensitive <literal>Show</literal> menu (using button&nbsp;2 click), or from the Presentation tab.</para>
			</caution>
			
			<section>
				<title>Use Case Details Tabs</title>
				
				<indexterm>
					<primary>Use Case Details Tabs</primary>
				</indexterm>
				<indexterm>
					<primary>Details Tabs</primary>
					<secondary>for Use Case</secondary>
				</indexterm>
				
				<para>The details tabs that are active for use cases are as follows.</para>
				
				<variablelist>
					<varlistentry>
						<term>
							<literal>ToDoItem</literal>
						</term>
						<listitem>
							<para>Standard tab.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Properties</literal>
						</term>
						<listitem>
							<para>See <xref xlink:href="s2.ref.use_case_property_toolbar"
									 /> and <xref xlink:href="s2.ref.use_case_property_fields"
								 /> below.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Documentation</literal>
						</term>
						<listitem>
							<para>Standard tab. See <xref xlink:href="s2.ref.documentation_tab"
							 />.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Presentation</literal>
						</term>
						<listitem>
							<para>Standard tab. The Fill color is used for the use case oval.</para>
							<para>The <literal>Display: Extension Points</literal> check box is used to control whether an extension point compartment is displayed.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Source</literal>
						</term>
						<listitem>
							<para>Standard tab. It would not be usual to provide any code for a use case, since it is primarily a vehicle for capturing requirements about the system under construction, not creating the solution.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Stereotype</literal>
						</term>
						<listitem>
							<para>Standard tab.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Tagged Values</literal>
						</term>
						<listitem>
							<para>Standard tab. In the UML metamodel, <literal> UseCase</literal> has the following standard tagged values defined.</para>
							<itemizedlist>
								<listitem>
									<para><literal>persistence</literal> (from the superclass, <literal>Classifier</literal>). Values <literal>transitory</literal>, indicating state is destroyed when an instance is destroyed or <literal> persistent</literal>, marking state is preserved when an instance is destroyed.</para>
									<tip>
										<para>In general the instantiation of use cases is not a major aspect of any design method (they are mostly concerned with requirements capture. For most OOA&amp;D methodologies, this tag can safely be ignored.</para>
									</tip>
								</listitem>
								<listitem>
									<para><literal>semantics</literal> (from the superclass, <literal>Classifier</literal>). The value is a specification of the semantics of the use case.</para>
								</listitem>
								<listitem>
									<para><literal>derived</literal> (from the superclass, <literal>ModelElement</literal>). Values <literal>true</literal>, meaning the use case is redundant&#8212;it can be formally derived from other elements, or <literal>false</literal> meaning it cannot.</para>
									<note>
										<para>Derived use cases still have their value in analysis to introduce useful names or concepts.</para>
									</note>
								</listitem>
							</itemizedlist>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Checklist</literal>
						</term>
						<listitem>
							<para>Standard tab for a Classifier.</para>
						</listitem>
					</varlistentry>
				</variablelist>
			</section>
			<section xml:id="s2.ref.use_case_property_toolbar">
				<title>Use Case Property Toolbar</title>
				<variablelist>
					<varlistentry>
						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/navigate_up.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Go up</literal>
						</term>
						<listitem>
							<para>Navigate up through the package structure of the model.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/use_case.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>New use case</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Add Use Case</primary>
							</indexterm>
							<indexterm>
								<primary>New Use Case</primary>
							</indexterm>
							<indexterm>
								<primary>Create New</primary>
								<secondary>Use Case</secondary>
							</indexterm>
							<para>This creates a new use case within the model, (but not within the diagram), and shows immediately the properties tab for that use case.</para>
							<tip>
								<para>This method of creating a new use case can be confusing. It is much better to create a new use case on the diagram of your choice.</para>
							</tip>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/extension_point.gif" format="GIF"
										 />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>New extension point</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Add Extension Point</primary>
							</indexterm>
							<indexterm>
								<primary>New Extension Point</primary>
							</indexterm>
							<indexterm>
								<primary>Create New</primary>
								<secondary>Extension Point</secondary>
							</indexterm>
							<para>This creates a new use extension point within the namespace of the current use case, with the current use case as its associated use case, navigating immediately to the properties tab for that extension point.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/attribute.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>New Attribute</literal>
						</term>
						<listitem>
							<para>This creates a new attribute within the current use case, navigating immediately to the properties tab for that attribute.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/operation.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>New Operation</literal>
						</term>
						<listitem>
							<para>This creates a new operation within the current use case, navigating immediately to the properties tab for that operation.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/reception.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>New Reception</literal>
						</term>
						<listitem>
							<para>This creates a new reception within the current use case, navigating immediately to the properties tab for that reception.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/stereotype.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>New Stereotype</literal>
						</term>
						<listitem>
							<para>This creates a new stereotype within the current use case, navigating immediately to the properties tab for that stereotype.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/property_delete.gif" format="GIF"
										 />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Delete</literal>
						</term>
						<listitem>
							<para>This deletes the selected use case from the model.</para>
							<warning>
								<para>This is a deletion from the model <emphasis>not</emphasis> just the diagram. To delete a use case from the diagram, but keep it within the model, use the main menu <literal>Remove From Diagram</literal> (or press the Delete key).</para>
							</warning>
						</listitem>
					</varlistentry>
				</variablelist>
			</section>
			<section xml:id="s2.ref.use_case_property_fields">
				<title>Property Fields For Use Case</title>
				<variablelist>
					<varlistentry>
						<term>
							<literal>Name</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Use Case Name</primary>
							</indexterm>
							<indexterm>
								<primary>Name</primary>
								<secondary>of Use Case</secondary>
							</indexterm>
							<para>Text box. The name of the use case. Since a use case is a classifier, it would be conventional to Capitalize the first letter (and initial letters of any component words), e.g. <literal>RemoteSensor</literal>. The name is shown inside the oval representation of the use case on the diagram.</para>
							<note>
								<para>ArgoUML does not enforce any naming convention for use cases</para>
							</note>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Namespace</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Use Case Namespace</primary>
							</indexterm>
							<indexterm>
								<primary>Namespace</primary>
								<secondary>of Use Case</secondary>
							</indexterm>
							<para>Text box with navigation button. Records the namespace for the use case. This is the package hierarchy.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Modifiers</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Use Case Modifiers</primary>
							</indexterm>
							<indexterm>
								<primary>Modifiers</primary>
								<secondary>of Use Case</secondary>
							</indexterm>
							<para>Check box, with entries <literal> Abstract</literal>
								<literal>Leaf</literal> and <literal> Root</literal>.</para>
							<itemizedlist>
								<listitem>
									<para><literal>Abstract</literal> is used to declare that this actor cannot be instantiated, but must always be specialized. .</para>
								</listitem>
								<listitem>
									<para><literal>Leaf</literal> indicates that this use case can have no further children, while <literal>Root</literal> indicates it is a top level use case with no parent.</para>
								</listitem>
							</itemizedlist>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Client Dependencies</literal>
						</term>
						<listitem>
							<para>Text area. Lists the <quote>depending</quote> ends of the relationship, i.e. the end that makes use of the other end.</para>
							<para>Button&nbsp;1 double click navigates to the dependency and opens its property tab.</para>
							<para>Button&nbsp;2 click shows a pop-up menu with one entry <literal>Add…</literal> that opens a dialog box where you can add and remove depending modelelements.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Supplier Dependencies</literal>
						</term>
						<listitem>
							<para>Text area. Lists the <quote>supplying</quote> ends of the relationship, i.e. the end supplying what is needed by the other end.</para>
							<para>Button&nbsp;1 double click navigates to the dependency and opens its property tab.</para>
							<para>Button&nbsp;2 click shows a pop-up menu with one entry <literal>Add…</literal> that opens a dialog box where you can add and remove dependent modelelements.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>
								<anchor xml:id="ref.use_case_generalization"
							 />Generalizations</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Use Case Generalization</primary>
							</indexterm>
							<indexterm>
								<primary>Generalizations</primary>
								<secondary>of Use Case</secondary>
							</indexterm>
							<para>Text area. Lists use cases which are generalizations of this one. Will be set whenever a generalization is created on the from this Use Case. Button&nbsp;1 Double Click on a generalization will navigate to that generalization.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Specializations</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Use Case Specialization</primary>
							</indexterm>
							<indexterm>
								<primary>Specializations</primary>
								<secondary>of Use Case</secondary>
							</indexterm>
							<para>Text box. Lists any specialized use case (i.e. for which this use case is a generalization.</para>
							<para>Button&nbsp;1 double click navigates to the generalization and opens its property tab.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Extends</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Use Case Extend Relationships</primary>
							</indexterm>
							<indexterm>
								<primary>Extend Relationship</primary>
								<secondary>of Use Case</secondary>
							</indexterm>
							<para>Text box. Lists any class that is extended by this use case.</para>
							<para>Where an extends relationship has been created, button&nbsp;1 double click will navigate to that relationship.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Includes</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Use Case Include Relationships</primary>
							</indexterm>
							<indexterm>
								<primary>Include Relationship</primary>
								<secondary>of Use Case</secondary>
							</indexterm>
							<para>Text box. Lists any use case that this use case includes.</para>
							<para>Where an include relationship has been created, button&nbsp;1 Double Click will navigate to that relationship.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Attributes</literal>
						</term>
						<listitem>
							<para>Text area. Lists all the attributes (see <xref
									xlink:href="s1.ref.attribute"
								 />) defined for this use case. Button&nbsp;1 double click navigates to the selected attribute. Button&nbsp;2 gives a pop up menu with two entries, which allow reordering the attributes.</para>
							<itemizedlist>
								<listitem>
									<para><literal>Move Up</literal>. Only available where there are two or more attributes listed, and the attribute selected is not at the top. It moves the attribute up one position.</para>
								</listitem>
								<listitem>
									<para><literal>Move Down</literal>. Only available where there are two or more attributes listed, and the attribute selected is not at the bottom. It moves the attribute down one position.</para>
								</listitem>
							</itemizedlist>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Association Ends</literal>
						</term>
						<listitem>
							<para>Text box. Lists any association ends (see <xref
									xlink:href="s1.ref.association_class"
								 />) of associations connected to this use case.</para>
							<para>Button&nbsp;1 double click navigates to the selected entry.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Operations</literal>
						</term>
						<listitem>
							<para>Text area. Lists all the operations (see <xref
									xlink:href="s1.ref.operation"
								 />) defined on this use case. Button&nbsp;1 click navigates to the selected operation. Button&nbsp;2 gives a pop up menu with two entries, which allow reordering the operations.</para>
							<itemizedlist>
								<listitem>
									<para><literal>Move Up</literal>. Only available where there are two or more operations listed, and the operation selected is not at the top. It moves the operation up one position.</para>
								</listitem>
								<listitem>
									<para><literal>Move Down</literal>. Only available where there are two or more operations listed, and the operation selected is not at the bottom. It moves the operation down one position.</para>
								</listitem>
							</itemizedlist>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Extension Points</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Use Case Extension Points</primary>
							</indexterm>
							<indexterm>
								<primary>Extension Point</primary>
								<secondary>of Use Case</secondary>
							</indexterm>
							<para>Text box. If this use case is, or can be extended, this field lists the extension points for the use case.</para>
							<note>
								<para>Extension points are listed by their location point rather than their name.</para>
							</note>
							<para>Where an extension point has been created (see below), button&nbsp;1 Double Click will navigate to that relationship. Button&nbsp;2 gives a pop up menu with the following entries.</para>
							<itemizedlist>
								<listitem>
									<para><literal>New</literal>. Add a new extension point and navigate to it, making this use case the owning use case of the extension point.</para>
								</listitem>
								<listitem>
									<para><literal>Move Up</literal>. Only available where there are two or more extension points listed, and the extension point selected is not at the top. It moves the extension point up one position.</para>
								</listitem>
								<listitem>
									<para><literal>Move Down</literal>. Only available where there are two or more extension points listed, and the extension point selected is not at the bottom. It moves the extension point down one position.</para>
								</listitem>
							</itemizedlist>
						</listitem>
					</varlistentry>
				</variablelist>
			</section>
		</section>

		<section xml:id="s1.ref.extension_point">
			<title>Extension Point</title>
			
			<indexterm>
				<primary>Extension Point</primary>
			</indexterm>
			
			<para>An extension point describes a point in a use case where an extending use case may provide additional behavior.</para>
			<para>Examples for a travel agent sales system might be the use case for paying for a ticket, which has an extension point in the specification of the payment. Extending use cases may then extend at this point to pay by cash, credit card etc.</para>
			<para>Within the UML metamodel, <literal>Extension Point</literal> is a sub-class of <literal> ModelElement</literal>. A use case may display an extension point compartment (see <xref xlink:href="s1.ref.use_case" /> for details), in which extension points are shown with the following syntax.</para>
			
			<blockquote>
				<para><emphasis>name</emphasis>
					<literal>:</literal><emphasis>location</emphasis>.</para>
			</blockquote>
			
			<section>
				<title>Extension Point Details Tabs</title>
				
				<indexterm>
					<primary>Extension Point Details Tabs</primary>
				</indexterm>
				<indexterm>
					<primary>Details Tabs</primary>
					<secondary>for Extension Point</secondary>
				</indexterm>
				
				<para>The details tabs that are active for extension points are as follows.</para>
				
				<variablelist>
					<varlistentry>
						<term>
							<literal>ToDoItem</literal>
						</term>
						<listitem>
							<para>Standard tab.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Properties</literal>
						</term>
						<listitem>
							<para>See <xref xlink:href="s2.ref.extension_point_property_toolbar"
									 /> and <xref
									xlink:href="s2.ref.extension_point_property_fields"
							 /> below.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Documentation</literal>
						</term>
						<listitem>
							<para>Standard tab. See <xref xlink:href="s2.ref.documentation_tab"
							 />.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Stereotype</literal>
						</term>
						<listitem>
							<para>Standard tab. </para>
							<para>Extensionpoints do not have any stereotypes defined by default.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Tagged Values</literal>
						</term>
						<listitem>
							<para>Standard tab. In the UML metamodel, <literal> ExtensionPoint</literal> has the following standard tagged values defined.</para>
							<itemizedlist>
								<listitem>
									<para><literal>derived</literal> (from the superclass, <literal>ModelElement</literal>). Values <literal>true</literal>, meaning the extension point is redundant&#8212;it can be formally derived from other elements, or <literal> false</literal> meaning it cannot.</para>
									<note>
										<para>It is not clear how derived extension points could have any value in analysis.</para>
									</note>
								</listitem>
							</itemizedlist>
						</listitem>
					</varlistentry>
				</variablelist>
			</section>
			
			<section xml:id="s2.ref.extension_point_property_toolbar">
				<title>Extension Point Property Toolbar</title>
				
				<variablelist>
					<varlistentry>
						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/navigate_up.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Go up</literal>
						</term>
						<listitem>
							<para>Navigate up to the use case which owns this extension point.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/extension_point.gif" format="GIF"
										 />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>New Extension Point</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Add Extension Point</primary>
							</indexterm>
							<indexterm>
								<primary>New Extension Point</primary>
							</indexterm>
							<indexterm>
								<primary>Create New</primary>
								<secondary>Extension Point</secondary>
							</indexterm>
							<para>This creates a new Extension Point below the selected extension point, navigating immediately to the properties tab of the newly created extension point.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/stereotype.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>New Stereotype</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Add Stereotype</primary>
							</indexterm>
							<indexterm>
								<primary>New Stereotype</primary>
							</indexterm>
							<indexterm>
								<primary>Create New</primary>
								<secondary>Stereotype</secondary>
							</indexterm>
							<para>This creates a new Stereotype (see <xref
									xlink:href="s1.ref.stereotype"
								 />) for the selected extension point, navigating immediately to the properties tab for that stereotype.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/property_delete.gif" format="GIF"
										 />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Delete</literal>
						</term>
						<listitem>
							<para>This deletes the selected extension point from the model.</para>
						</listitem>
					</varlistentry>
				</variablelist>
			</section>
			
			<section xml:id="s2.ref.extension_point_property_fields">
				<title>Property Fields For Extension Point</title>
				
				<variablelist>
					<varlistentry>
						<term>
							<literal>Name</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Extension Point Name</primary>
							</indexterm>
							<indexterm>
								<primary>Name</primary>
								<secondary>of Extension Point</secondary>
							</indexterm>
							<para>Text box. The name of the extension point.</para>
							<tip>
								<para>It is quite common to leave extension points unnamed in use case analysis, since they are always listed (within use cases and extend relationships) by their location.</para>
							</tip>
							<note>
								<para>ArgoUML does not enforce any naming convention for extension points.</para>
							</note>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Location</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Extension Point Location</primary>
							</indexterm>
							<indexterm>
								<primary>Location</primary>
								<secondary>of Extension Point</secondary>
							</indexterm>
							<para>Text box. A description of the location of this extension point within the owning use case.</para>
							<tip>
								<para>Extension points are always listed (within use cases and extend relationships) by their location. Typically this will be the number/name of the paragraph in the specification.</para>
							</tip>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Base Use Case</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Extension Point Base Use Case</primary>
							</indexterm>
							<indexterm>
								<primary>Base Use Case</primary>
								<secondary>of Extension Point</secondary>
							</indexterm>
							<para>Text box. Shows the base use case within which this extension point is defined. Button&nbsp;1 Double Click will navigate to the use case.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Extend</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Extension Point Extending Use Cases</primary>
							</indexterm>
							<indexterm>
								<primary>Extending Use Cases</primary>
								<secondary>of Extension Point</secondary>
							</indexterm>
							<para>Text box. Lists all use cases which extend the base use case through this extension point.</para>
							<para>Where an extending use case exists, button&nbsp;1 double click will navigate to that relationship.</para>
						</listitem>
					</varlistentry>
				</variablelist>
			</section>
		</section>

		<section xml:id="s1.ref.association_use_case">
			<title>Association</title>
			
			<para>An association on a use case diagram represents a relationship between an actor and a use case showing that actor&#039;s involvement in the use case. The invocation of the use case will involve some (significant) change perceived by the actor.</para>
			<para>Associations are described fully under class diagrams (see <xref xlink:href="s1.ref.association_class" />).</para>
		</section>

		<section xml:id="s1.ref.association_end_use_case">
			<title>Association End</title>

			<para>Association ends are described under class diagrams (see <xref xlink:href="s1.ref.association_end_class" />).</para>
		</section>

		<section xml:id="s1.ref.dependency_use_case">
			<title>Dependency</title>
			
			<para>Dependencies are described under class diagrams (see <xref xlink:href="s1.ref.dependency_class" />).</para>
			
			<caution>
				<para>Dependency has little use in use case diagrams. It is provided, because earlier versions of ArgoUML used it (incorrectly) to implement include and extends relationships.</para>
			</caution>
		</section>

		<section xml:id="s1.ref.generalization_use_case">
			<title>Generalization</title>
			
			<indexterm>
				<primary>Generalization</primary>
			</indexterm>
			
			<para>Generalization is a relationship between two use cases or two actors. Where A is a generalization of B, it means A describes more general behavior and B a more specific version of that behavior.</para>
			<para>Examples for a travel agent sales system might be the use case for making a booking as a generalization of the use case for making a flight booking and a salesman actor being a generalization of a supervisor actor (since supervisors can also act as salesmen, but not vice versa).</para>
			<para>Generalization is analogous to class inheritance within OO programming.</para>
			
			<note>
				<para>It is easy to confuse <emphasis>extends</emphasis> relationships between use cases with generalization. However extends is about augmenting a use case&#039;s behavior at a specific point. Generalization is about specializing the behavior throughout the use case.</para>
			</note>
			
			<para>Within the UML metamodel, <literal> Generalization</literal> is a sub-class of <literal> Relationship</literal>.</para>
			<para>Generalization is represented as an arrow with white filled head from the specialized use case or actor to the generalized use case or actor (see <xref xlink:href="fig.ref.use_case_diagram" />).</para>
			
			<section>
				<title>Generalization Details Tabs</title>
				
				<indexterm>
					<primary>Generalization Details Tabs</primary>
				</indexterm>
				<indexterm>
					<primary>Details Tabs</primary>
					<secondary>for Generalization</secondary>
				</indexterm>
				
				<para>The details tabs that are active for associations are as follows.</para>
				
				<variablelist>
					<varlistentry>
						<term>
							<literal>ToDoItem</literal>
						</term>
						<listitem>
							<para>Standard tab.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Properties</literal>
						</term>
						<listitem>
							<para>See <xref xlink:href="s2.ref.generalization_property_toolbar"
									 /> and <xref xlink:href="s2.ref.generalization_property_fields"
								 /> below.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Documentation</literal>
						</term>
						<listitem>
							<para>Standard tab. See <xref xlink:href="s2.ref.documentation_tab"
							 />.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Presentation</literal>
						</term>
						<listitem>
							<para>Standard tab.</para>
							<note>
								<para>The values in the "bounds" field of the generalization are not editable, since they are determined by the properties of the endpoints of the line.</para>
							</note>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Stereotype</literal>
						</term>
						<listitem>
							<para>Standard tab. </para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Tagged Values</literal>
						</term>
						<listitem>
							<para>Standard tab. In the UML metamodel, <literal> Generalization</literal> has the following standard tagged values defined.</para>
							<itemizedlist>
								<listitem>
									<para><literal>derived</literal> (from the superclass, <literal>ModelElement</literal>). Values <literal>true</literal>, meaning the generalization is redundant&#8212;it can be formally derived from other elements, or <literal> false</literal> meaning it cannot.</para>
									<note>
										<para>Derived generalizations still have their value in analysis to introduce useful names or concepts, and in design to avoid re-computation.</para>
									</note>
								</listitem>
							</itemizedlist>
						</listitem>
					</varlistentry>
				</variablelist>
			</section>
			
			<section xml:id="s2.ref.generalization_property_toolbar">
				<title>Generalization Property Toolbar</title>
				
				<variablelist>
					<varlistentry>
						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/navigate_up.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Go up</literal>
						</term>
						<listitem>
							<para>Navigate up through the package structure of the model. For a generalization this will be the package containing the generalization.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/stereotype.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>New Stereotype</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Add Stereotype</primary>
							</indexterm>
							<indexterm>
								<primary>New Stereotype</primary>
							</indexterm>
							<indexterm>
								<primary>Create New</primary>
								<secondary>Stereotype</secondary>
							</indexterm>
							<para>This creates a new Stereotype (see <xref
									xlink:href="s1.ref.stereotype"
								 />) for the selected generalization, navigating immediately to the properties tab for that generalization.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/property_delete.gif" format="GIF"
										 />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Delete</literal>
						</term>
						<listitem>
							<para>This deletes the selected generalization from the model.</para>
							<warning>
								<para>This is a deletion from the model <emphasis>not</emphasis> just the diagram. To delete a generalization from the diagram, but keep it within the model, use the main menu <literal>Remove From Diagram</literal> (or press the Delete key).</para>
							</warning>
						</listitem>
					</varlistentry>
				</variablelist>
			</section>
			
			<section xml:id="s2.ref.generalization_property_fields">
				<title>Property Fields For Generalization</title>
				
				<variablelist>
					<varlistentry>
						<term>
							<literal>Name</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Generalization Name</primary>
							</indexterm>
							<indexterm>
								<primary>Name</primary>
								<secondary>of Generalization</secondary>
							</indexterm>
							<para>Text box. The name of the generalization.</para>
							<tip>
								<para>It is quite common to leave generalizations unnamed in use case analysis.</para>
							</tip>
							<note>
								<para>ArgoUML does not enforce any naming convention for associations.</para>
							</note>
							<note>
								<para>There is no representation of the name of a generalization on the diagram.</para>
							</note>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Discriminator</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Generalization Discriminator</primary>
							</indexterm>
							<indexterm>
								<primary>Discriminator</primary>
								<secondary>of Generalization</secondary>
							</indexterm>
							<para>Text box. The name of a discriminator for the specialization. UML&nbsp;1.4 allows grouping of specializations into a number of sets, on the basis of this value.</para>
							<tip>
								<para>The empty string <quote /> is a valid entry (and the default) for this field. The discriminator is only of practical use in cases of multiple inheritance. A (class diagram) example is shown in <xref
										xlink:href="fig.discriminator_example"
									 />. Here each type of user should inherit from two sorts of user. One distinguishing between local or remote user (which can be identified by one discriminator) and one indicating their function as a user (identified by a different discriminator).</para>
								<para>There is little point in using this within a use case diagram.</para>
							</tip>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Namespace</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Generalization Namespace</primary>
							</indexterm>
							<indexterm>
								<primary>Namespace</primary>
								<secondary>of Generalization</secondary>
							</indexterm>
							<para>Text box with navigation button. Records the namespace for the generalization. This is the package hierarchy.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Parent</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Generalization Parent</primary>
							</indexterm>
							<indexterm>
								<primary>Parent</primary>
								<secondary>of Generalization</secondary>
							</indexterm>
							<para>Text box. Shows the use case or actor that is the <emphasis>parent</emphasis> in this relationship, i.e. the more general end of the relationship. Button&nbsp;1 Double Click on this entry will navigate to that use case or actor. </para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Child</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Generalization Child</primary>
							</indexterm>
							<indexterm>
								<primary>Child</primary>
								<secondary>of Generalization</secondary>
							</indexterm>
							<para>Text box. Shows the use case or actor that is the <emphasis>child</emphasis> in this relationship, i.e. the more specific end of the relationship. Button&nbsp;1 Double Click on this entry will navigate to that use case or actor. </para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Powertype</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Generalization Powertype</primary>
							</indexterm>
							<indexterm>
								<primary>Powertype</primary>
								<secondary>of Generalization</secondary>
							</indexterm>
							<para>Drop down selector providing access to all standard UML types provided by ArgoUML and all new classes created within the current model.</para>
							<para>This is the type of the child entity of the generalization.</para>
							<tip>
								<para>This can be ignored for use case analysis. The only sensible value to put in would be the child use case type (as a classifier, this appears in the drop down list.</para>
							</tip>
						</listitem>
					</varlistentry>
				</variablelist>
				
				<figure float="1" xml:id="fig.discriminator_example">
					<title>Example use of a discriminator with generalization</title>
					<screenshot><mediaobject><imageobject> <imagedata align="center" fileref="images/reference/discriminator_example.gif" format="GIF" /></imageobject></mediaobject></screenshot>
				</figure>
			</section>
		</section>

		<section xml:id="s1.ref.extend">
			<title>Extend</title>
			
			<indexterm>
				<primary>Extend Relationship</primary>
			</indexterm>
			
			<para>Extend is a relationship between two use cases. Where A extends B, it means A describes some additional behavior that is executed conditionally (under exceptional circumstances) at some point during the normal behavior of B. </para>
			<para>In some respects extend is like generalization. However the key difference is that the extended use case defines <emphasis>extension points</emphasis> (see <xref xlink:href="s1.ref.extension_point" />), which are the only places where its behavior may be extended. The extending use case must define at which of these extension points it adds behavior.</para>
			<para>This makes the use of extend more tightly controlled than general extension, and it is thus preferred wherever possible.</para>
			<para>Examples for a travel agent sales system might be the use case for paying for a ticket, which has an extension point in the specification of the payment. Extending use cases may then extend at this point to pay by cash, credit card etc.</para>
			<para>Within the UML metamodel, <literal>Extend</literal> is a sub-class of <literal>Relationship</literal>.</para>
			<para>An extend relationship is represented as a dotted link with an open arrow head and a label <literal> &laquo;extend&raquo;</literal>. If a condition is defined, it is shown under the <literal>&laquo;extend&raquo;</literal> label (see <xref xlink:href="fig.ref.use_case_diagram" />).</para>
			
			<section>
				<title>Extend Details Tabs</title>
				
				<indexterm>
					<primary>Extend Relationship Details Tabs</primary>
				</indexterm>
				<indexterm>
					<primary>Details Tabs</primary>
					<secondary>for Extend Relationship</secondary>
				</indexterm>
				
				<para>The details tabs that are active for extend relationships are as follows.</para>
				
				<note>
					<para>There is no source tab, since there is no source code that could be generated for an extend relationship.</para>
				</note>
				
				<variablelist>
					<varlistentry>
						<term>
							<literal>ToDoItem</literal>
						</term>
						<listitem>
							<para>Standard tab.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Properties</literal>
						</term>
						<listitem>
							<para>See <xref xlink:href="s2.ref.extend_property_toolbar" /> and <xref
									xlink:href="s2.ref.extend_property_fields" /> below.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Documentation</literal>
						</term>
						<listitem>
							<para>Standard tab. See <xref xlink:href="s2.ref.documentation_tab"
							 />.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Presentation</literal>
						</term>
						<listitem>
							<para>Standard tab</para>
							<note>
								<para>The values in the "bounds" field of the extend are not editable, since they are determined by the properties of the endpoints of the line. </para>
							</note>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Stereotype</literal>
						</term>
						<listitem>
							<para>Standard tab. </para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Tagged Values</literal>
						</term>
						<listitem>
							<para>Standard tab. In the UML metamodel, <literal> Extend</literal> has the following standard tagged values defined.</para>
							<itemizedlist>
								<listitem>
									<para><literal>derived</literal> (from the superclass, <literal>ModelElement</literal>). Values <literal>true</literal>, meaning the extend relationship is redundant&#8212;it can be formally derived from other elements, or <literal> false</literal> meaning it cannot.</para>
									<note>
										<para>Derived extend relationships could have their value in analysis to introduce useful names or concepts.</para>
									</note>
								</listitem>
							</itemizedlist>
						</listitem>
					</varlistentry>
				</variablelist>
			</section>
			
			<section xml:id="s2.ref.extend_property_toolbar">
				<title>Extend Property Toolbar</title>
				
				<variablelist>
					<varlistentry>
						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/navigate_up.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Go up</literal>
						</term>
						<listitem>
							<para>Navigate up through the package structure of the model. For a extend this will be the package containing the extend.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/extension_point.gif" format="GIF"
										 />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>New extension point</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Add Extend Relationship</primary>
							</indexterm>
							<indexterm>
								<primary>New Extend Relationship</primary>
							</indexterm>
							<indexterm>
								<primary>Create New</primary>
								<secondary>Extend Relationship</secondary>
							</indexterm>
							<para>This creates a new use case extension point within the namespace of the current extend relationship, with the current extend relationship as its first extending relationship.</para>
							<tip>
								<para>While it is perfectly valid to create extension points from an extend relationship, the created extension point will have no associated use case (it can subsequently be set up).</para>
								<para>It would be more usual to instead create the extension point within a use case and subsequently link to it from an extend relationship (see <xref
										xlink:href="s2.ref.extend_property_fields" /> below).</para>
							</tip>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/stereotype.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>New Stereotype</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Add Stereotype</primary>
							</indexterm>
							<indexterm>
								<primary>New Stereotype</primary>
							</indexterm>
							<indexterm>
								<primary>Create New</primary>
								<secondary>Stereotype</secondary>
							</indexterm>
							<para>This creates a new Stereotype (see <xref
									xlink:href="s1.ref.stereotype"
								 />) for the selected extent relationship, navigating immediately to the properties tab for that stereotype.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/property_delete.gif" format="GIF"
										 />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Delete</literal>
						</term>
						<listitem>
							<para>This deletes the selected extend relationship from the model.</para>
							<warning>
								<para>This is a deletion from the model <emphasis>not</emphasis> just the diagram. To delete a extend from the diagram, but keep it within the model, use the main menu <literal>Remove From Diagram</literal> (or press the Delete key).</para>
							</warning>
						</listitem>
					</varlistentry>
				</variablelist>
			</section>
			
			<section xml:id="s2.ref.extend_property_fields">
				<title>Property Fields For Extend</title>
				
				<variablelist>
					<varlistentry>
						<term>
							<literal>Name</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Extend Relationship Name</primary>
							</indexterm>
							<indexterm>
								<primary>Name</primary>
								<secondary>of Extend Relationship</secondary>
							</indexterm>
							<para>Text box. The name of the extend relationship.</para>
							<tip>
								<para>It is quite common to leave extends unnamed in use case analysis.</para>
							</tip>
							<note>
								<para>ArgoUML does not enforce any naming convention for extend relationships.</para>
							</note>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Namespace</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Extend Relationship Namespace</primary>
							</indexterm>
							<indexterm>
								<primary>Namespace</primary>
								<secondary>of Extend Relationship</secondary>
							</indexterm>
							<para>Text box. Records the namespace for the extend relationship. This is the package hierarchy.</para>
							<para>Button&nbsp;1 Double Click on the entry will navigate to the package defining this namespace (or the model for the top level namespace).</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Base Use Case</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Extend Relationship Base Use Case</primary>
							</indexterm>
							<indexterm>
								<primary>Base Use Case</primary>
								<secondary>of Extend Relationship</secondary>
							</indexterm>
							<para>Text box. Shows the use case that is being extended by this extend relationship. Button&nbsp;1 double click on this entry will navigate to the base use case.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Extension</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Extend Relationship Extension</primary>
							</indexterm>
							<indexterm>
								<primary>Extension</primary>
								<secondary>of Extend Relationship</secondary>
							</indexterm>
							<para>Text box. Show the use case that is doing the extending through this extend relationship. Button&nbsp;1 double click on this entry will navigate to the extension use case.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Extension Points</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Extend Relationship Extension Point</primary>
							</indexterm>
							<indexterm>
								<primary>Extension Point</primary>
								<secondary>of Extend Relationship</secondary>
							</indexterm>
							<para>Text box. Lists the extension points of the base use case where the extension will be applied if the condition holds. </para>
							<note>
								<para>If the condition is fulfilled, the sequence obeyed by the use-case instance is extended to include the sequence of the extending use case. The different parts of the extending use case are inserted at the locations defined by the sequence of extension points in the relationship -- one part at each referenced extension point. Note that the condition is only evaluated once: at the first referenced extension point, and if it is fulfilled all of the extending use case is inserted in the original sequence.</para>
								<para>Hence, the sequence of the extension points is irrelevant, except for the position of the first one; since that one determines where the condition is evaluated. </para>
							</note>
							<para>Where an extension point has been created, button&nbsp;1 double click will navigate to that relationship. Button&nbsp;2 gives a pop up menu with the following entries.</para>
							<itemizedlist>
								<listitem>
									<para><literal>Add</literal>. The <quote>Ad/Remove ExtensionPoints</quote> window opens. In this window it is possible to build a list of extension points.</para>
								</listitem>
								<listitem>
									<para><literal>New</literal>. Add a new extension point in the list and navigate to it. The current extend relationship is added as the first in list of extending relationships of the new extension point.</para>
								</listitem>
								<listitem>
									<para><literal>Move Up</literal>. Only available where there are two or more extension points listed, and the extension point selected is not at the top. It moves the extension point up one position.</para>
								</listitem>
								<listitem>
									<para><literal>Move Down</literal>. Only available where there are two or more extension points listed, and the extension point selected is not at the bottom. It moves the extension point down one position.</para>
								</listitem>
							</itemizedlist>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Condition</literal>
						</term>
						<listitem>
							<para>Text area. Multi-line textual description of any condition attached to the extend relationship.</para>
							<para>The text entered here is shown on the diagram.</para>
						</listitem>
					</varlistentry>
				</variablelist>
			</section>
		</section>

		<section xml:id="s1.ref.include">
			<title>Include</title>
			
			<indexterm>
				<primary>Include Relationship</primary>
			</indexterm>
			
			<para>Include is a relationship between two use cases. Where A includes B, it means B described behavior that is to be included in the description of the behavior of A at some point (defined internally by A).</para>
			<para>Examples for a travel agent sales system might be the use case for booking travel, which includes use cases for booking flights and taking payment.</para>
			<para>Within the UML metamodel, <literal>Include</literal> is a sub-class of <literal>Relationship</literal>.</para>
			<para>An include relationship is represented as a dotted link with an open arrow head and a label <literal> &laquo;include&raquo;</literal> (see <xref xlink:href="fig.ref.use_case_diagram" />).</para>
			
			<section>
				<title>Include Details Tabs</title>
				
				<indexterm>
					<primary>Include Relationship Details Tabs</primary>
				</indexterm>
				<indexterm>
					<primary>Details Tabs</primary>
					<secondary>for Include Relationship</secondary>
				</indexterm>
				
				<para>The details tabs that are active for include relationships are as follows.</para>
				
				<note>
					<para>There is no source tab, since there is no source code that could be generated for an include relationship.</para>
				</note>
				
				<variablelist>
					<varlistentry>
						<term>
							<literal>ToDoItem</literal>
						</term>
						<listitem>
							<para>Standard tab.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Properties</literal>
						</term>
						<listitem>
							<para>See <xref xlink:href="s2.ref.include_property_toolbar"
									 /> and <xref xlink:href="s2.ref.include_property_fields"
								 /> below.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Documentation</literal>
						</term>
						<listitem>
							<para>Standard tab. See <xref xlink:href="s2.ref.documentation_tab"
							 />.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Presentation</literal>
						</term>
						<listitem>
							<para>Standard tab</para>
							<note>
								<para>The values in the "bounds" field of the include relationships are not editable, since they are determined by the properties of the endpoints of the line. </para>
							</note>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Tagged Values</literal>
						</term>
						<listitem>
							<para>Standard tab. In the UML metamodel, <literal> Include</literal> has the following standard tagged values defined.</para>
							<itemizedlist>
								<listitem>
									<para><literal>derived</literal> (from the superclass, <literal>ModelElement</literal>). Values <literal>true</literal>, meaning the include relationship is redundant&#8212;it can be formally derived from other elements, or <literal> false</literal> meaning it cannot.</para>
									<note>
										<para>Derived include relationships could have their value in analysis to introduce useful names or concepts.</para>
									</note>
								</listitem>
							</itemizedlist>
						</listitem>
					</varlistentry>
				</variablelist>
			</section>
			
			<section xml:id="s2.ref.include_property_toolbar">
				<title>Include Property Toolbar</title>
				
				<variablelist>
					<varlistentry>
						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/navigate_up.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Go up</literal>
						</term>
						<listitem>
							<para>Navigate up through the package structure of the model. For a include this will be the package containing the include.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/stereotype.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>New Stereotype</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Add Stereotype</primary>
							</indexterm>
							<indexterm>
								<primary>New Stereotype</primary>
							</indexterm>
							<indexterm>
								<primary>Create New</primary>
								<secondary>Stereotype</secondary>
							</indexterm>
							<para>This creates a new Stereotype (see <xref
									xlink:href="s1.ref.stereotype"
								 />) for the selected include relationship, navigating immediately to the properties tab for that stereotype.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/property_delete.gif" format="GIF"
										 />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Delete</literal>
						</term>
						<listitem>
							<para>This deletes the selected include relationship from the model.</para>
							<warning>
								<para>This is a deletion from the model <emphasis>not</emphasis> just the diagram. To delete a include from the diagram, but keep it within the model, use the main menu <literal>Remove From Diagram</literal> (or press the Delete key).</para>
							</warning>
						</listitem>
					</varlistentry>
				</variablelist>
			</section>
			
			<section xml:id="s2.ref.include_property_fields">
				<title>Property Fields For Include</title>
				
				<variablelist>
					<varlistentry>
						<term>
							<literal>Name</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Include Relationship Name</primary>
							</indexterm>
							<indexterm>
								<primary>Name</primary>
								<secondary>of Include Relationship</secondary>
							</indexterm>
							<para>Text box. The name of the include relationship.</para>
							<tip>
								<para>It is quite common to leave include relationships unnamed in use case analysis.</para>
							</tip>
							<note>
								<para>ArgoUML does not enforce any naming convention for include relationships.</para>
							</note>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Namespace</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Include Relationship Namespace</primary>
							</indexterm>
							<indexterm>
								<primary>Namespace</primary>
								<secondary>of Include Relationship</secondary>
							</indexterm>
							<para>Text box. Records the namespace for the include. This is the package hierarchy.</para>
							<para>Button&nbsp;1 click on the entry will navigate to the package defining this namespace (or the model for the top level namespace).</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Base Use Case</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Include Relationship Base</primary>
							</indexterm>
							<indexterm>
								<primary>Base</primary>
								<secondary>of Include Relationship</secondary>
							</indexterm>
							<para>Drop down selector. Records the use case that is doing the including in this include relationship. Button&nbsp;1 click on this entry will give a drop down menu of all available use cases which may be selected by button&nbsp;1 click.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Included Use Case</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Include Relationship Included Use Case</primary>
							</indexterm>
							<indexterm>
								<primary>Included Use Case</primary>
								<secondary>of Include Relationship</secondary>
							</indexterm>
							<para>Drop down selector. Records the use case that is being included by this include relationship. Button&nbsp;1 click on this entry will give a drop down menu of all available use cases (and an empty entry) which may be selected by button&nbsp;1 click.</para>
						</listitem>
					</varlistentry>
				</variablelist>
			</section>
		</section>

	</chapter>

	<chapter xml:id="ch.ref.entclass">
		<title>Class Diagram Model Element Reference</title>
		
		<indexterm>
			<primary>Class Diagram</primary>
		</indexterm>
		<indexterm>
			<primary>Object Diagrams</primary>
		</indexterm>
		<indexterm>
			<primary>Package Diagrams</primary>
		</indexterm>
		
		<section>
			<title>Introduction</title>
			
			<para>This chapter describes each model element that can be created within a class diagram. Note that some sub-model elements of model elements on the diagram may not actually themselves appear on the diagram.</para>
			<para>Class diagrams are used for only one of the UML static structure diagrams, the class diagram itself. Object diagrams are represented on the ArgoUML deployment diagram.</para>
			<para>In addition, ArgoUML uses the class diagram to show model structure through the use of packages.</para>
			<para>There is a close relationship between this material and the Properties Tab of the Details Pane (see <xref xlink:href="s1.ref.proptab" />). That section covers Properties in general, in this chapter they are linked to specific model elements.</para>
			<para><xref xlink:href="fig.ref.class_diagram" /> shows a class diagram with all possible model elements displayed.</para>
			
			<figure float="1" xml:id="fig.ref.class_diagram">
				<title>Possible model elements on a class diagram.</title>
				<screenshot><mediaobject><imageobject> <imagedata align="center" fileref="images/reference/class_diagram.gif" format="GIF" /></imageobject></mediaobject></screenshot>
			</figure>
			
			<para><xref xlink:href="fig.ref.package_diagram" /> shows a package diagram with all possible model elements displayed.</para>
			
			<figure float="1" xml:id="fig.ref.package_diagram">
				<title>Possible model elements on a package diagram.</title>
				<screenshot><mediaobject><imageobject> <imagedata align="center" fileref="images/reference/package_diagram.gif" format="GIF" /></imageobject></mediaobject></screenshot>
			</figure>
			
			<para><xref xlink:href="fig.ref.datatype_diagram" /> shows a datatype diagram with a datatype and an enumeration displayed.</para>
			
			<figure float="1" xml:id="fig.ref.datatype_diagram">
				<title>Possible model elements on a datatype diagram.</title>
				<!-- See ClassDiagram-Datatypes.zargo -->
				<screenshot><mediaobject><imageobject> <imagedata align="center" fileref="images/reference/classdiagram-datatypes.png" format="PNG" /></imageobject></mediaobject></screenshot>
			</figure>
			
			<para><xref xlink:href="fig.ref.stereotype_diagram" /> shows a stereotype definition diagram with all possible model elements displayed.</para>
			
			<figure float="1" xml:id="fig.ref.stereotype_diagram">
				<title>Possible model elements on a stereotype definition diagram.</title>
				<!-- See ClassDiagram-Datatypes.zargo -->
				<screenshot><mediaobject><imageobject> <imagedata align="center" fileref="images/reference/classdiagram-stereotype-definition.png" format="PNG" /></imageobject></mediaobject></screenshot>
			</figure>
			
			<section>
				<title>Limitations Concerning Class Diagrams in ArgoUML</title>
				
				<para>Various limitations exist in V0.24 of ArgoUML for stereotype definition diagrams. E.g. the current implementation does not allow stereotype compartments to be shown on stereotype definition diagrams.</para>
				<para>Another variant of the class diagram within the UML standard is the <emphasis>object diagram</emphasis>. There is currently no support for objects or links within ArgoUML class diagrams. Instead the ArgoUML deployment diagram does have both objects and links, and can be used to draw object diagrams.</para>
			</section>
		</section>
		
		<section xml:id="s1.ref.package">
			<title>Package</title>
			
			<indexterm>
				<primary>Package</primary>
			</indexterm>
			
			<para>The package is the main organizational model element within ArgoUML. In the UML metamodel it is a sub-class of both <literal>Namespace</literal> and <literal> GeneralizableElement</literal>.</para>
			
			<note>
				<para>ArgoUML also implements the UML <literal> Model</literal> model element as a sub-class of package, but <emphasis>not</emphasis> the <literal>Subsystem</literal> model element.</para>
			</note>
			
			<para>ArgoUML also implements some less common aspects of UML model management. In particular the relationship UML 1.4 defines as <literal>Generalization</literal> and the sub-class dependency <literal>Permission</literal> for use between packages.</para>
			
			<section>
				<title>Package Details Tabs</title>
				
				<indexterm>
					<primary>Package Details Tabs</primary>
				</indexterm>
				<indexterm>
					<primary>Details Tabs</primary>
					<secondary>for Package</secondary>
				</indexterm>
				
				<para>The details tabs that are active for packages are as follows.</para>
				
				<variablelist>
					<varlistentry>
						<term>
							<literal>ToDoItem</literal>
						</term>
						<listitem>
							<para>Standard tab.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Properties</literal>
						</term>
						<listitem>
							<para>See <xref xlink:href="s2.ref.package_property_toolbar"
									 /> and <xref xlink:href="s2.ref.package_property_fields"
								 /> below.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Documentation</literal>
						</term>
						<listitem>
							<para>Standard tab. See <xref xlink:href="s2.ref.documentation_tab"
							 />.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Presentation</literal>
						</term>
						<listitem>
							<para>Standard tab. The editable <literal>Bounds</literal> field defines the bounding box for the package on the diagram.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Stereotype</literal>
						</term>
						<listitem>
							<para>Standard tab. </para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Tagged Values</literal>
						</term>
						<listitem>
							<para>Standard tab. In the UML metamodel, <literal> Package</literal> has the following standard tagged values defined.</para>
							<itemizedlist>
								<listitem>
									<para><literal>derived</literal> (from the superclass, <literal>ModelElement</literal>). Values <literal>true</literal>, meaning the package is redundant&#8212;it can be formally derived from other elements, or <literal>false</literal> meaning it cannot.</para>
									<note>
										<para>Derived packages still have their value in analysis to introduce useful names or concepts, and in design to avoid re-computation.</para>
									</note>
								</listitem>
							</itemizedlist>
						</listitem>
					</varlistentry>
				</variablelist>
			</section>
			
			<section xml:id="s2.ref.package_property_toolbar">
				<title>Package Property Toolbar</title>
				
				<variablelist>
					<varlistentry>
						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/navigate_up.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Go up</literal>
						</term>
						<listitem>
							<para>Navigate up through the package structure.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center" fileref="images/icons/package.gif"
											format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>New Package</literal>
						</term>
						<listitem>
							<para>This creates a new package within the package (which appears on no diagram), navigating immediately to the properties tab for that package.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/datatype.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>New Datatype</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Add Datatype</primary>
							</indexterm>
							<indexterm>
								<primary>New Datatype</primary>
							</indexterm>
							<indexterm>
								<primary>Create New</primary>
								<secondary>Datatype</secondary>
							</indexterm>
							<para>This creates a new Datatype (see <xref
									xlink:href="s1.ref.datatype"
								 />) for the selected package, navigating immediately to the properties tab for that datatype.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/enumeration.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>New Enumeration</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Add Enumeration</primary>
							</indexterm>
							<indexterm>
								<primary>New Enumeration</primary>
							</indexterm>
							<indexterm>
								<primary>Create New</primary>
								<secondary>Enumeration</secondary>
							</indexterm>
							<para>This creates a new Enumeration (see <xref
									xlink:href="s1.ref.enumeration"
								 />) for the selected package, navigating immediately to the properties tab for that enumeration.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/stereotype.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>New Stereotype</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Add Stereotype</primary>
							</indexterm>
							<indexterm>
								<primary>New Stereotype</primary>
							</indexterm>
							<indexterm>
								<primary>Create New</primary>
								<secondary>Stereotype</secondary>
							</indexterm>
							<para>This creates a new Stereotype (see <xref
									xlink:href="s1.ref.stereotype"
								 />) for the selected package, navigating immediately to the properties tab for that stereotype.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/tag_definition.gif" format="GIF"
										 />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>New Tag Definition</literal>
						</term>
						<listitem>
							<para>This creates a new tag definition (see <xref
									xlink:href="s1.ref.tagdefinition"
								 />) within the package (which appears on no diagram), navigating immediately to the properties tab for that tagdefinition.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/property_delete.gif" format="GIF"
										 />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Delete Package</literal>
						</term>
						<listitem>
							<para>Deletes the package from the model.</para>
							<warning>
								<para>This is a deletion from the model <emphasis>not</emphasis> just the diagram. To delete a package from the diagram, but keep it within the model, use the main menu <literal>Remove From Diagram</literal> (or press the Delete key).</para>
							</warning>
						</listitem>
					</varlistentry>
				</variablelist>
			</section>
			
			<section xml:id="s2.ref.package_property_fields">
				<title>Property Fields For Package</title>
				
				<variablelist>
					<varlistentry>
						<term>
							<literal>Name</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Package Name</primary>
							</indexterm>
							<indexterm>
								<primary>Name</primary>
								<secondary>of Package</secondary>
							</indexterm>
							<para>Text box. The name of the package. The name of a package, like all packages, is by convention all lower case, not containing any punctuation marks.</para>
							<note>
								<para>By default a new package has no name defined. The package will appear with the name <literal>(Unnamed Package)</literal> in the explorer.</para>
							</note>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Namespace</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Package Namespace</primary>
							</indexterm>
							<indexterm>
								<primary>Namespace</primary>
								<secondary>of Package</secondary>
							</indexterm>
							<para>Drop down selector. Records the namespace for the package. This is the package hierarchy.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Visibility</literal>
						</term>
						<listitem>
							<para>Radio box, with four entries <literal> public</literal>, <literal>private</literal>, <literal>protected</literal>, and <literal>package</literal>. Indicates whether the package is visible outside the package.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Modifiers</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Package Modifiers</primary>
							</indexterm>
							<indexterm>
								<primary>Modifiers</primary>
								<secondary>of Package</secondary>
							</indexterm>
							<para>Check box, with entries <literal> abstract</literal>, <literal>leaf</literal> and <literal>root</literal>.</para>
							<itemizedlist>
								<listitem>
									<para><literal>Abstract</literal> is used to declare that this package cannot be instantiated, but must always be specialized.</para>
									<tip>
										<para>The meaning of <literal>abstract</literal> applied to a package if not that clear. It might mean that the package contains interfaces or abstract classes without realizations. This is probably better handled through stereotyping of the package (for example <literal> &laquo;facade&raquo;</literal>).</para>
									</tip>
								</listitem>
								<listitem>
									<para><literal>Leaf</literal> indicates that this package can have no further subpackages.</para>
								</listitem>
								<listitem>
									<para><literal>Root</literal> indicates that it is the top level package.</para>
									<tip>
										<para>Within ArgoUML <literal>Root</literal> only meaningfully applies to the Model, since all packages sit within the model. This could be used to emphasize that the Model is at the top level.</para>
									</tip>
								</listitem>
							</itemizedlist>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Generalizations</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Package Generalizations</primary>
							</indexterm>
							<indexterm>
								<primary>Generalizations</primary>
								<secondary>of Package</secondary>
							</indexterm>
							<para>Text area. Lists any package that <emphasis>generalizes</emphasis> this package.</para>
							<para>Button&nbsp;1 double click navigates to the generalization and opens its property tab.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Specializations</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Package Specializations</primary>
							</indexterm>
							<indexterm>
								<primary>Specializations</primary>
								<secondary>of Package</secondary>
							</indexterm>
							<para>Text box. Lists any specialized package (i.e. for which this package is a generalization.</para>
							<para>button&nbsp;1 double click navigates to the generalization and opens its property tab.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Owned Elements</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Package Owned Elements</primary>
							</indexterm>
							<indexterm>
								<primary>Owned Elements</primary>
								<secondary>of Package</secondary>
							</indexterm>
							<para>Text area. A listing of all the packages, classes, interfaces, datatypes, actors, use cases, associations, generalizations, stereotypes, etc. within the package.</para>
							<para>Button&nbsp;1 double click on any item listed here navigates to that model element.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Imported Elements</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Package Imported Elements</primary>
							</indexterm>
							<indexterm>
								<primary>Imported Elements</primary>
								<secondary>of Package</secondary>
							</indexterm>
							<para>Text Area. A listing of all imported elements, i.e. elements that are owned by a different package, but are explicitely made visible in this package.</para>
							<para>Button&nbsp;1 double click on any item listed here navigates to that model element. Button&nbsp;2 gives a pop up menu with the following entries.</para>
							<itemizedlist>
								<listitem>
									<para><literal>Add</literal>. The <quote>Add/Remove Imported Elements</quote> window opens. In this window it is possible to build a list of imported elements.</para>
								</listitem>
								<listitem>
									<para><literal>Remove</literal>. Removes the import.</para>
								</listitem>
							</itemizedlist>
						</listitem>
					</varlistentry>
				</variablelist>
			</section>
		</section>
		
		<section xml:id="s1.ref.datatype_class">
			<title>Datatype</title>
			<para>Datatypes are not specific to packages or class diagrams, and are discussed within the chapter on top level model elements (see <xref
					xlink:href="s1.ref.datatype" />).</para>
		</section>
	
		<section xml:id="s1.ref.enumeration_class">
			<title>Enumeration</title>
			
			<para>Enumeration are not specific to packages or class diagrams, and are discussed within the chapter on top level model elements (see <xref xlink:href="s1.ref.enumeration" />).</para>
		</section>
		
		<section xml:id="s1.ref.stereotype_class">
			<title>Stereotype</title>
			
			<para>Stereotypes are not specific to packages or class diagrams, and are discussed within the chapter on top level model elements (see <xref xlink:href="s1.ref.stereotype" />).</para>
		</section>
		
		<section xml:id="s1.ref.class_class">
			<title>Class</title>
			
			<indexterm>
				<primary>Class</primary>
			</indexterm>
			
			<para>The class is the dominant model element on a class diagram. In the UML metamodel it is a sub-class of <literal> Classifier</literal> and <literal> GeneralizableElement</literal>.</para>
			<para>A class is represented on a class diagram as a rectangle with three compartments. The top compartment displays the class name (and stereotypes), the second compartment any attributes and the third any operations. These last two compartments may optionally be hidden.</para>
			
			<section>
				<title>Class Details Tabs</title>
				
				<indexterm>
					<primary>Class Details Tabs</primary>
				</indexterm>
				<indexterm>
					<primary>Details Tabs</primary>
					<secondary>for Class</secondary>
				</indexterm>
				
				<para>The details tabs that are active for classes are as follows.</para>
				
				<variablelist>
					<varlistentry>
						<term>
							<literal>ToDoItem</literal>
						</term>
						<listitem>
							<para>Standard tab.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Properties</literal>
						</term>
						<listitem>
							<para>See <xref xlink:href="s2.ref.class_property_toolbar" /> and <xref
									xlink:href="s2.ref.class_property_fields" /> below.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Documentation</literal>
						</term>
						<listitem>
							<para>Standard tab. See <xref xlink:href="s2.ref.documentation_tab"
							 />.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Presentation</literal>
						</term>
						<listitem>
							<para>Standard tab. The tick boxes, <literal> Attributes</literal> and <literal>Operations</literal> allow the attributes and operations compartments to be shown (the default) or hidden. This is a setting valid for only the current diagram that shows the class. The editable <literal>Bounds</literal> field defines the bounding box for the package on the diagram.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Source</literal>
						</term>
						<listitem>
							<para>Standard tab. This contains a template for the class declaration and declarations of associated classes.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Constraints</literal>
						</term>
						<listitem>
							<para>Standard tab. There are no standard constraints defined for <literal>Class</literal> within the UML metamodel.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Stereotypes</literal>
						</term>
						<listitem>
							<para>Standard tab. </para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Tagged Values</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Class Tagged Values</primary>
							</indexterm>
							<indexterm>
								<primary>Tagged Values</primary>
								<secondary>of Class</secondary>
							</indexterm>
							<para>Standard tab. In the UML metamodel, <literal> Class</literal> has the following standard tagged values defined.</para>
							<itemizedlist>
								<listitem>
									<para><literal>persistence</literal> (from the superclass, <literal>Classifier</literal>). Values <literal>transitory</literal>, indicating state is destroyed when an instance is destroyed or <literal> persistent</literal>, marking state is preserved when an instance is destroyed.</para>
								</listitem>
								<listitem>
									<para><literal>semantics</literal> (from the superclass, <literal>Classifier</literal>). The value is a specification of the semantics of the class.</para>
								</listitem>
								<listitem>
									<para><literal>derived</literal> (from the superclass, <literal>ModelElement</literal>). Values <literal>true</literal>, meaning the class is redundant&#8212;it can be formally derived from other elements, or <literal>false</literal> meaning it cannot.</para>
									<note>
										<para>Derived classes still have their value in analysis to introduce useful names or concepts, and in design to avoid re-computation.</para>
									</note>
								</listitem>
							</itemizedlist>
							<note>
								<para>The UML <literal>Element</literal> metaclass from which all other model elements are derived includes the tagged element <literal>documentation</literal> which is handled by the <emphasis>documentation tab</emphasis> under ArgoUML</para>
							</note>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Checklist</literal>
						</term>
						<listitem>
							<para>Standard tab for a Classifier.</para>
						</listitem>
					</varlistentry>
				</variablelist>
			</section>
			
			<section xml:id="s2.ref.class_property_toolbar">
				<title>Class Property Toolbar</title>
				
				<indexterm>
					<primary>Class Property Toolbar</primary>
				</indexterm>
				<indexterm>
					<primary>Property Toolbar</primary>
					<secondary>for Class</secondary>
				</indexterm>
				
				<variablelist>
					<varlistentry>
						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/navigate_up.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Go up</literal>
						</term>
						<listitem>
							<para>Navigate up through the package structure.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/attribute.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>New attribute</literal>
						</term>
						<listitem>
							<para>This creates a new attribute (see <xref
									xlink:href="s1.ref.attribute"
								 />) within the class, navigating immediately to the properties tab for that attribute.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/operation.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>New operation</literal>
						</term>
						<listitem>
							<para>This creates a new operation (see <xref
									xlink:href="s1.ref.operation"
								 />) within the class, navigating immediately to the properties tab for that operation.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/reception.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>New reception</literal>
						</term>
						<listitem>
							<para>This creates a new reception, navigating immediately to the properties tab for that reception.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/inner_class.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>New inner class</literal>
						</term>
						<listitem>
							<para>This creates a new inner class (which appears on no diagram) within the class. This belongs to the class and is restricted to the namespace of the class. It exactly models the Java concept of inner class. As an inner class it needs no attributes or operations, since it shares those of its owner.</para>
							<note>
								<para>Inner class is not a separate concept in UML. This is a convenient shorthand for creating a class that is restricted to the namespace of its owning class.</para>
							</note>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center" fileref="images/icons/class.gif"
											format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>New class</literal>
						</term>
						<listitem>
							<para>This creates a new class (which appears on no diagram) within the same namespace as the current class.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/stereotype.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>New Stereotype</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Add Stereotype</primary>
							</indexterm>
							<indexterm>
								<primary>New Stereotype</primary>
							</indexterm>
							<indexterm>
								<primary>Create New</primary>
								<secondary>Stereotype</secondary>
							</indexterm>
							<para>This creates a new Stereotype (see <xref
									xlink:href="s1.ref.stereotype"
								 />) for the selected class, navigating immediately to the properties tab for that stereotype.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/property_delete.gif" format="GIF"
										 />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Delete</literal>
						</term>
						<listitem>
							<para>This deletes the class from the model</para>
							<warning>
								<para>This is a deletion from the model <emphasis>not</emphasis> just the diagram. To delete a class from the diagram, but keep it within the model, use the main menu <literal>Remove From Diagram</literal> (or press the Delete key).</para>
							</warning>
						</listitem>
					</varlistentry>
				</variablelist>
			</section>
			
			<section xml:id="s2.ref.class_property_fields">
				<title>Property Fields For Class</title>
				
				<indexterm>
					<primary>Class Property Fields</primary>
				</indexterm>
				<indexterm>
					<primary>Property Fields</primary>
					<secondary>for Class</secondary>
				</indexterm>
				
				<variablelist>
					<varlistentry>
						<term>
							<literal>Name</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Class Name</primary>
							</indexterm>
							<indexterm>
								<primary>Name</primary>
								<secondary>of Class</secondary>
							</indexterm>
							<para>Text box. The name of the class. The name of a class has a leading capital letter, with words separated by <quote>bumpy caps</quote>.</para>
							<note>
								<para>The ArgoUML critics will complain about class names that do not have an initial capital.</para>
							</note>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Namespace</literal>
						</term>
						<listitem>
							<para>Drop down selector with navigation button. Records and allows setting of the namespace for the class. This is the package hierarchy.</para>
							<para>Button&nbsp;1 click on the entry will move the class to the selected namespace.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Modifiers</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Class Modifiers</primary>
							</indexterm>
							<indexterm>
								<primary>Modifiers</primary>
								<secondary>of Class</secondary>
							</indexterm>
							<para>Check box, with entries <literal> Abstract</literal>, <literal>Leaf</literal>, <literal> Root</literal>, and <literal>Active</literal>.</para>
							<itemizedlist>
								<listitem>
									<para><literal>Abstract</literal> is used to declare that this class cannot be instantiated, but must always be subclassed. The name of an abstract class is displayed in italics on the diagram.</para>
									<caution>
										<para>If a class has any abstract operations, then it should be declared abstract. ArgoUML will not enforce this.</para>
									</caution>
								</listitem>
								<listitem>
									<para><literal>Leaf</literal> indicates that this class cannot be further subclassed, while <literal> Root</literal> indicates it can have no superclass. It is possible for a class to be both Abstract and Leaf, since its static operations may still be referenced.</para>
								</listitem>
								<listitem>
									<para><literal>Active</literal> indicates that this class exhibits dynamic behavior (and is thus associated with a state or activity diagram).</para>
								</listitem>
							</itemizedlist>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Visibility</literal>
						</term>
						<listitem>
							<para>Radio box, with four entries <literal> public</literal>, <literal>private</literal>, <literal>protected</literal>, and <literal>package</literal>. Indicates whether the class is visible outside the namespace.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Client Dependencies</literal>
						</term>
						<listitem>
							<para>Text area. Lists the <quote>depending</quote> ends of the relationship, i.e. the end that makes use of the other end.</para>
							<para>Button&nbsp;1 double click navigates to the dependency and opens its property tab.</para>
							<para>Button&nbsp;2 click shows a pop-up menu with one entry <literal>Add…</literal> that opens a dialog box where you can add and remove depending modelelements.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Supplier Dependencies</literal>
						</term>
						<listitem>
							<para>Text area. Lists the <quote>supplying</quote> ends of the relationship, i.e. the end supplying what is needed by the other end.</para>
							<para>Button&nbsp;1 double click navigates to the dependency and opens its property tab.</para>
							<para>Button&nbsp;2 click shows a pop-up menu with one entry <literal>Add…</literal> that opens a dialog box where you can add and remove dependent modelelements.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Generalizations</literal>
						</term>
						<listitem>
							<para>Text area. Lists any class that <emphasis>generalizes</emphasis> this class.</para>
							<para>Button&nbsp;1 double click navigates to the generalization and opens its property tab.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Specializations</literal>
						</term>
						<listitem>
							<para>Text box. Lists any specialized class (i.e. for which this class is a generalization).</para>
							<para>Button&nbsp;1 double click navigates to the generalization and opens its property tab.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Attributes</literal>
						</term>
						<listitem>
							<para>Text area. Lists all the attributes (see <xref
									xlink:href="s1.ref.attribute"
								 />) defined for this class. Button&nbsp;1 double click navigates to the selected attribute. Button&nbsp;2 gives a pop up menu with two entries, which allow reordering the attributes.</para>
							<itemizedlist>
								<listitem>
									<para><literal>Move Up</literal>. Only available where there are two or more attributes listed, and the attribute selected is not at the top. It moves the attribute up one position.</para>
								</listitem>
								<listitem>
									<para><literal>Move Down</literal>. Only available where there are two or more attributes listed, and the attribute selected is not at the bottom. It moves the attribute down one position.</para>
								</listitem>
							</itemizedlist>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Association Ends</literal>
						</term>
						<listitem>
							<para>Text box. Lists any association ends (see <xref
									xlink:href="s1.ref.association_class"
								 />) of associations connected to this class.</para>
							<para>Button&nbsp;1 double click navigates to the selected entry.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Operations</literal>
						</term>
						<listitem>
							<para>Text area. Lists all the operations (see <xref
									xlink:href="s1.ref.operation"
								 />) defined on this class. Button&nbsp;1 click navigates to the selected operation. Button&nbsp;2 gives a pop up menu with two entries, which allow reordering the operations.</para>
							<itemizedlist>
								<listitem>
									<para><literal>Move Up</literal>. Only available where there are two or more operations listed, and the operation selected is not at the top. It moves the operation up one position.</para>
								</listitem>
								<listitem>
									<para><literal>Move Down</literal>. Only available where there are two or more operations listed, and the operation selected is not at the bottom. It moves the operation down one position.</para>
								</listitem>
							</itemizedlist>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Owned Elements</literal>
						</term>
						<listitem>
							<para>Text area. A listing of model elements contained within the classes&#039; namespace. This is where any inner class (see <xref
									xlink:href="s2.ref.class_property_toolbar" />) will appear</para>
							<para>Button&nbsp;1 double click on any of the model elements navigates to that model element.</para>
							<tip>
								<para>Most namespace hierarchies should be managed through the package mechanism. Namespace hierarchies through classes are best restricted to inner classes. Conceivable datatypes, signals and interfaces could also appear here, but actors and use cases would seem of no value.</para>
							</tip>
						</listitem>
					</varlistentry>
				</variablelist>
			</section>
		</section>
		
		<section xml:id="s1.ref.attribute">
			<title>Attribute</title>
			
			<indexterm>
				<primary>Attribute</primary>
			</indexterm>
			
			<para>Attribute is a named slot within a class (or other <literal>Classifier</literal>) describing a range of values that may be held by instances of the class. In the UML metamodel it is a sub-class of <literal> StructuralFeature</literal> which is itself a sub-class of <literal>Feature</literal>.</para>
			<para>An attribute is represented in the diagram on a single line within the attribute compartment of the class. Its syntax is as follows:</para>
			
			<blockquote>
				<para>
					<emphasis>visibility</emphasis>
					<emphasis>attributeName</emphasis>
					<literal>:</literal>
					<emphasis>type</emphasis> [<literal>=</literal>
					<emphasis>initialValue</emphasis>]</para>
			</blockquote>
			
			<para><emphasis>visibility</emphasis> is <literal>+</literal>, <literal>#</literal>, <literal>-</literal> or <literal>~</literal> corresponding to <literal>public</literal>, <literal>protected</literal>, <literal>private</literal>, or <literal>package</literal> visibility respectively.</para>
			<para><emphasis>attributeName</emphasis> is the actual name of the attribute being declared.</para>
			<para><emphasis>type</emphasis> is the type (UML datatype, class or interface) declared for the attribute.</para>
			<para><emphasis>initialValue</emphasis> is any initial value to be given to the attribute when an instance of the class is created. This may be overridden by any constructor operation.</para>
			<para>In addition any attribute declared static will have its whole entry underlined on the diagram.</para>
			
			<section xml:id="s2.ref.attribute_details_tabs">
				<title>Attribute Details Tabs</title>
				
				<indexterm>
					<primary>Attribute Details Tabs</primary>
				</indexterm>
				<indexterm>
					<primary>Details Tabs</primary>
					<secondary>for Attribute</secondary>
				</indexterm>
				
				<para>The details tabs that are active for attributes are as follows.</para>
				
				<variablelist>
					<varlistentry>
						<term>
							<literal>ToDoItem</literal>
						</term>
						<listitem>
							<para>Standard tab.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Properties</literal>
						</term>
						<listitem>
							<para>See <xref xlink:href="s2.ref.attribute_property_toolbar"
									 /> and <xref xlink:href="s2.ref.attribute_property_fields"
								 /> below.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Documentation</literal>
						</term>
						<listitem>
							<para>Standard tab. See <xref xlink:href="s2.ref.documentation_tab"
							 />.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Constraints</literal>
						</term>
						<listitem>
							<para>Standard tab. There are no standard constraints defined for <literal>Attribute</literal> within the UML metamodel.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Stereotype</literal>
						</term>
						<listitem>
							<para>Standard tab. </para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Tagged Values</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Attribute Tagged Values</primary>
							</indexterm>
							<indexterm>
								<primary>Tagged Values</primary>
								<secondary>of Attribute</secondary>
							</indexterm>
							<para>Standard tab. In the UML metamodel, <literal> Attribute</literal> has the following standard tagged values defined.</para>
							<itemizedlist>
								<listitem>
									<para><literal>transient</literal>.</para>
								</listitem>
								<listitem>
									<para><literal>volatile</literal>. This is an ArgoUML extension to the UML 1.4 standard to indicate that this attribute is realized in some volatile form (for example it will be a memory mapped control register).</para>
								</listitem>
							</itemizedlist>
							<note>
								<para>The UML <literal>Element</literal> metaclass from which all other model elements are derived includes the tagged element <literal>documentation</literal> which is handled by the <emphasis>documentation tab</emphasis> under ArgoUML</para>
							</note>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Checklist</literal>
						</term>
						<listitem>
							<para>Standard tab for a Attribute.</para>
						</listitem>
					</varlistentry>
				</variablelist>
			</section>
			
			<section xml:id="s2.ref.attribute_property_toolbar">
				<title>Attribute Property Toolbar</title>
				
				<indexterm>
					<primary>Attribute Property Toolbar</primary>
				</indexterm>
				<indexterm>
					<primary>Property Toolbar</primary>
					<secondary>for Attribute</secondary>
				</indexterm>
				
				<variablelist>
					<varlistentry>
						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/navigate_up.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Go up</literal>
						</term>
						<listitem>
							<para>Navigate up through the package structure.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/navigate_up_previous.gif"
											format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Go to Previous</literal>
						</term>
						<listitem>
							<para>Navigate to the previous attribute of the class that owns them. This button is downlighted if the current attribute is the first one.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/navigate_up_next.gif" format="GIF"
										 />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Go to Next</literal>
						</term>
						<listitem>
							<para>Navigate to the next attribute of the class that owns them. This button is downlighted if the current attribute is the last one.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/attribute.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>New attribute</literal>
						</term>
						<listitem>
							<para>This creates a new attribute within the owning class of the current attribute, navigating immediately to the properties tab for that attribute.</para>
							<tip>
								<para>This is a very convenient way to add a number of attributes, one after the other, to a class.</para>
							</tip>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/datatype.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>New Datatype</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Add Datatype</primary>
							</indexterm>
							<indexterm>
								<primary>New Datatype</primary>
							</indexterm>
							<indexterm>
								<primary>Create New</primary>
								<secondary>Datatype</secondary>
							</indexterm>
							<para>This creates a new Datatype (see <xref
									xlink:href="s1.ref.datatype"
								 />) for the selected attribute, navigating immediately to the properties tab for that datatype.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/enumeration.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>New Enumeration</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Add Enumeration</primary>
							</indexterm>
							<indexterm>
								<primary>New Enumeration</primary>
							</indexterm>
							<indexterm>
								<primary>Create New</primary>
								<secondary>Enumeration</secondary>
							</indexterm>
							<para>This creates a new Enumeration (see <xref
									xlink:href="s1.ref.enumeration"
								 />) for the package that owns the class, navigating immediately to the properties tab for that enumeration.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/stereotype.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>New Stereotype</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Add Stereotype</primary>
							</indexterm>
							<indexterm>
								<primary>New Stereotype</primary>
							</indexterm>
							<indexterm>
								<primary>Create New</primary>
								<secondary>Stereotype</secondary>
							</indexterm>
							<para>This creates a new Stereotype (see <xref
									xlink:href="s1.ref.stereotype"
								 />) for the selected attribute, navigating immediately to the properties tab for that stereotype.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/property_delete.gif" format="GIF"
										 />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Delete</literal>
						</term>
						<listitem>
							<para>This deletes the attribute from the model</para>
							<warning>
								<para>This is a deletion from the model <emphasis>not</emphasis> just the diagram. If desired the whole attribute compartment can be hidden on the diagram using the <emphasis>style</emphasis> tab (see <xref
										xlink:href="s2.ref.attribute_property_toolbar"
									 />) or the button&nbsp;2 pop up menu for the class on the diagram.</para>
							</warning>
						</listitem>
					</varlistentry>
				</variablelist>
			</section>
		
			<section xml:id="s2.ref.attribute_property_fields">
				<title>Property Fields For Attribute</title>
				
				<indexterm>
					<primary>Attribute Property Fields</primary>
				</indexterm>
				<indexterm>
					<primary>Property Fields</primary>
					<secondary>for Attribute</secondary>
				</indexterm>
				
				<variablelist>
					<varlistentry>
						<term>
							<literal>Name</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Attribute Name</primary>
							</indexterm>
							<indexterm>
								<primary>Name</primary>
								<secondary>of Attribute</secondary>
							</indexterm>
							<para>Text box. The name of the attribute. The name of a attribute has a leading lower case letter, with words separated by <quote>bumpy caps</quote>.</para>
							<note>
								<para>The ArgoUML critics will complain about attribute names that do not have an initial lower case letter.</para>
							</note>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Owner</literal>
						</term>
						<listitem>
							<para>Text box. Records the class which contains this attribute.</para>
							<para>Button&nbsp;1 double click on the entry will navigate to the class.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Multiplicity</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Attribute Multiplicity</primary>
							</indexterm>
							<indexterm>
								<primary>Multiplicity</primary>
								<secondary>of Attribute</secondary>
							</indexterm>
							<para>Editable drop down selector with checkmark. The default value (1) is that there is one instance of this attribute for each instance of the class, i.e. it is a scalar. The drop down provides a number of commonly used specifications for non-scalar attributes.</para>
							<para>When the checkmark is unchecked, then the multiplicity remains undefind in the model (and the drop down selector is downlighted).</para>
							<note>
								<para>ArgoUML presents a number of predefined ranges for multiplicity for easy access. The user may also enter any user defined range that follows the UML syntax, such as <quote>1..3,7,10</quote>.</para>
								<para>The value <literal>1..1</literal> is equivalent to the default (exactly one scalar instance). The selection <literal>0..1</literal> indicates an optional scalar attribute.</para>
							</note>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Visibility</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Attribute Visibility</primary>
							</indexterm>
							<indexterm>
								<primary>Visibility</primary>
								<secondary>of Attribute</secondary>
							</indexterm>
							<para>Radio box, with entries <literal> public</literal>, <literal>private</literal>, <literal>protected</literal> and <literal>package</literal>.</para>
							<itemizedlist>
								<listitem>
									<para><literal>public</literal>. The attribute is available to any model element that can see the owning class.</para>
								</listitem>
								<listitem>
									<para><literal>private</literal>. The attribute is available only to the owning class (and any inner classes).</para>
								</listitem>
								<listitem>
									<para><literal>protected</literal>. The attribute is available only to the owning class, or model elements that are subclasses of the owning class.</para>
								</listitem>
								<listitem>
									<para><literal>package</literal>. The attribute is available only to model elements contained in the same package.</para>
								</listitem>
							</itemizedlist>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Changeability</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Attribute Changeability</primary>
							</indexterm>
							<indexterm>
								<primary>Changeability</primary>
								<secondary>of Attribute</secondary>
							</indexterm>
							<para>Radio box, with entries <literal> addOnly</literal>, <literal>changeable</literal>, and <literal>frozen</literal>.</para>
							<itemizedlist>
								<listitem>
									<para><literal>addOnly</literal>. Meaningful only if the multiplicity is not fixed to a single value. Additional values may be added to the set of values, but once created a value may not be removed or altered.</para>
								</listitem>
								<listitem>
									<para><literal>changeable</literal>. There are no restrictions of modification.</para>
								</listitem>
								<listitem>
									<para><literal>frozen</literal>. Also named <quote>immutable</quote>. The value of the attribute may not change during the lifetime of the owner class. The value must be set at object creation, and may never change after that. This implies that there is usually an argument for this value in a constructor and that there is no operation that updates this value.</para>
								</listitem>
							</itemizedlist>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Modifiers</literal>
						</term>
						<listitem>
							<para>Check box for <literal>static</literal>. If unchecked (the defaults) then the attribute has <quote>instance scope</quote>. If checked, then the attribute is static, i.e. it has <quote>class scope</quote>. Static attributes are indicated on the diagram by underlining.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Type</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Attribute Type</primary>
							</indexterm>
							<indexterm>
								<primary>Type</primary>
								<secondary>of Attribute</secondary>
							</indexterm>
							<para>Drop down selector with navigation button. The type of this attribute. This can be any UML <literal>Classifier</literal>, although in practice only <literal>Class</literal>, <literal>DataType</literal>, or <literal> Interface</literal> make any sense.</para>
							<para>Pressing the navigation button will navigate to the property panel for the currently selected type. (see <xref
									xlink:href="s1.ref.class_class" />, <xref
									xlink:href="s1.ref.datatype_class" /> and <xref
									xlink:href="s1.ref.interface_class" />).</para>
							<note>
								<para>A type must be declared (it can be <literal> void</literal>). By default ArgoUML supplies <literal> int</literal> as the type.</para>
							</note>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Initial Value</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Attribute Initial Value</primary>
							</indexterm>
							<indexterm>
								<primary>Initial Value</primary>
								<secondary>of Attribute</secondary>
							</indexterm>
							<para>Text box with 2 compartments. This allows you to set an initial value for the attribute if desired (this is optional). The drop down menu provides access to the common values <literal>0</literal>, <literal> 1</literal>, <literal>2</literal>, and <literal> null</literal>.</para>
							<para>The left hand side of this field contains the body of the expression that forms the initial value. The right hand side defines the language in which the expression is written.</para>
							<para>Hovering the mouse pointer over these fields, reveals a tooltip <literal>Body</literal> or <literal>Language</literal>, to help remember which is which.</para>
							<caution>
								<para>Any constructor operation may ignore this initial value.</para>
							</caution>
						</listitem>
					</varlistentry>
				</variablelist>
			</section>
		</section>
		
		<section xml:id="s1.ref.operation">
			<title>Operation</title>
			
			<indexterm>
				<primary>Operation</primary>
			</indexterm>
			
			<para>An operation is a service that can be requested from an object to effect behavior. In the UML metamodel it is a sub-class of <literal>BehavioralFeature</literal> which is itself a sub-class of <literal>Feature</literal>.</para>
			<para>In the diagram, an operation is represented on a single line within the operation compartment of the class. Its syntax is as follows:</para>
			
			<blockquote>
				<para>visibility name (parameter list) : return-type-expression {property-string}</para>
			</blockquote>
			
			<para>You can edit this line directly in the diagram, by double-clicking on it. All elements are optional and, if left unspecified, the old values will be preserved.</para>
			<para>A <emphasis>stereotype</emphasis> can be given between any two elements in the line in the format: <literal> &lt;&lt;stereotype&gt;&gt;</literal>.</para>
			<para>The following properties are recognized to have special meaning: abstract, concurrency, concurrent, guarded, leaf, query, root and sequential.</para>
			<para>The <emphasis>visibility</emphasis> is <literal> +</literal>, <literal>#</literal>, <literal>-</literal> or <literal>~</literal> corresponding to <literal>public</literal>, <literal> protected</literal>, <literal>private</literal> visibility, or <literal>package</literal> visibility respectively.</para>
			<para><literal>static</literal> and <literal>final</literal> optionally appear if the operation has those modifiers. Any operation declared static will have its whole entry underlined on the diagram.</para>
			<para>There may be zero or more entries in the <emphasis>parameter list</emphasis> separated by commas. Every entry is a pair of the form:</para>
			
			<blockquote>
				<para>
					<emphasis>name</emphasis>
					<literal>:</literal>
					<emphasis>type</emphasis>
				</para>
			</blockquote>
			
			<para>The <emphasis>return-type-expression</emphasis> is the type (UML datatype, class or interface) of the result returned.</para>
			<para>Finally the whole entry is shown in italics if the operation is declared abstract.</para>
			
			<section>
				<title>Operation Details Tabs</title>
				
				<indexterm>
					<primary>Operation Details Tabs</primary>
				</indexterm>
				<indexterm>
					<primary>Details Tabs</primary>
					<secondary>for Operation</secondary>
				</indexterm>
				
				<para>The details tabs that are active for operations are as follows.</para>
				
				<variablelist>
					<varlistentry>
						<term>
							<literal>ToDoItem</literal>
						</term>
						<listitem>
							<para>Standard tab.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Properties</literal>
						</term>
						<listitem>
							<para>See <xref xlink:href="s2.ref.operation_property_toolbar"
									 /> and <xref xlink:href="s2.ref.operation_property_fields"
								 /> below.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Documentation</literal>
						</term>
						<listitem>
							<para>Standard tab. See <xref xlink:href="s2.ref.documentation_tab"
							 />.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Presentation</literal>
						</term>
						<listitem>
							<para>Standard tab. The <literal>Bounds:</literal> field does allow editing, but the changes have no effect.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Source</literal>
						</term>
						<listitem>
							<para>Standard tab. This contains a declaration for the operation.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Constraints</literal>
						</term>
						<listitem>
							<para>Standard tab. There are no standard constraints defined for <literal>Operation</literal> within the UML metamodel.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Tagged Values</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Operation Tagged Values</primary>
							</indexterm>
							<indexterm>
								<primary>Tagged Values</primary>
								<secondary>of Operation</secondary>
							</indexterm>
							<para>Standard tab. In the UML metamodel, <literal> Operation</literal> has the following standard tagged values defined.</para>
							<itemizedlist>
								<listitem>
									<para><literal>semantics</literal>. The value is a specification of the semantics of the operation.</para>
								</listitem>
								<listitem>
									<para><literal>derived</literal> (from the superclass, <literal>ModelElement</literal>). Values <literal>true</literal>, meaning the operation is redundant&#8212;it can be formally derived from other elements, or <literal>false</literal> meaning it cannot.</para>
									<note>
										<para>Derived operations still have their value in analysis to introduce useful names or concepts, and in design to avoid re-computation.</para>
									</note>
								</listitem>
							</itemizedlist>
							<note>
								<para>The UML <literal>Element</literal> metaclass from which all other model elements are derived includes the tagged element <literal>documentation</literal> which is handled by the <emphasis>documentation tab</emphasis> under ArgoUML</para>
							</note>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Checklist</literal>
						</term>
						<listitem>
							<para>Standard tab for an Operation.</para>
						</listitem>
					</varlistentry>
				</variablelist>
			</section>
			
			<section xml:id="s2.ref.operation_property_toolbar">
				<title>Operation Property Toolbar</title>
				
				<indexterm>
					<primary>Operation Property Toolbar</primary>
				</indexterm>
				<indexterm>
					<primary>Property Toolbar</primary>
					<secondary>for Operation</secondary>
				</indexterm>
				
				<variablelist>
					<varlistentry>
						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/navigate_up.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Go up</literal>
						</term>
						<listitem>
							<para>Navigate up through the package structure.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/operation.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>New operation</literal>
						</term>
						<listitem>
							<para>This creates a new operation within the owning class of the current operation, navigating immediately to the properties tab for that operation.</para>
							<tip>
								<para>This is a very convenient way to add a number of operations, one after the other, to a class.</para>
							</tip>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/parameter.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>New parameter</literal>
						</term>
						<listitem>
							<para>This creates a new parameter for the operation, navigating immediately to the properties tab for that parameter.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center" fileref="images/icons/signal.gif"
											format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>New raised signal</literal>
						</term>
						<listitem>
							<para>This creates a new raised signal for the operation, navigating immediately to the properties tab for that raised signal.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/datatype.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>New Datatype</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Add Datatype</primary>
							</indexterm>
							<indexterm>
								<primary>New Datatype</primary>
							</indexterm>
							<indexterm>
								<primary>Create New</primary>
								<secondary>Datatype</secondary>
							</indexterm>
							<para>This creates a new Datatype (see <xref
									xlink:href="s1.ref.datatype"
								 />) in the namespace of the owner of the operation, navigating immediately to the properties tab for that datatype.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/stereotype.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>New Stereotype</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Add Stereotype</primary>
							</indexterm>
							<indexterm>
								<primary>New Stereotype</primary>
							</indexterm>
							<indexterm>
								<primary>Create New</primary>
								<secondary>Stereotype</secondary>
							</indexterm>
							<para>This creates a new Stereotype (see <xref
									xlink:href="s1.ref.stereotype"
								 />) for the selected operation, navigating immediately to the properties tab for that stereotype.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/property_delete.gif" format="GIF"
										 />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Delete</literal>
						</term>
						<listitem>
							<para>This deletes the operation from the model</para>
							<warning>
								<para>This is a deletion from the model <emphasis>not</emphasis> just the diagram. If desired the whole operation compartment can be hidden on the diagram using the <emphasis>presentation</emphasis> tab (see <xref
										xlink:href="s2.ref.operation_property_toolbar"
									 />) or the button&nbsp;2 pop up menu for the class on the diagram.</para>
							</warning>
						</listitem>
					</varlistentry>
				</variablelist>
			</section>
			
			<section xml:id="s2.ref.operation_property_fields">
				<title>Property Fields For Operation</title>
				
				<indexterm>
					<primary>Operation Property Fields</primary>
				</indexterm>
				<indexterm>
					<primary>Property Fields</primary>
					<secondary>for Operation</secondary>
				</indexterm>
				
				<variablelist>
					<varlistentry>
						<term>
							<literal>Name</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Operation Name</primary>
							</indexterm>
							<indexterm>
								<primary>Name</primary>
								<secondary>of Operation</secondary>
							</indexterm>
							<para>Text box. The name of the operation. The name of an operation has a leading lower case letter, with words separated by <quote>bumpy caps</quote>.</para>
							<note>
								<para>The ArgoUML critics will complain about operation names that do not have an initial lower case letter.</para>
							</note>
							<tip>
								<para>If you wish to follow the Java convention of constructors having the same name as the class, you will violate this rule. Silence the critic by setting the stereotype <literal>create</literal> for the constructor operation.</para>
							</tip>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Stereotype</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Operation Stereotype</primary>
							</indexterm>
							<indexterm>
								<primary>Stereotype</primary>
								<secondary>of Operation</secondary>
							</indexterm>
							<para>Drop down selector. There are two UML standard stereotypes for <literal>Operation</literal> (from the parent metaclass, <literal> BehavioralFeature</literal>), <literal>create</literal> and <literal>destroy</literal>.</para>
							<tip>
								<para>You should use <literal>create</literal> as the stereotype for constructors, and <literal> destroy</literal> for destructors (which are called <quote>finalize</quote> methods under Java).</para>
							</tip>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Navigate Stereotype</literal>
						</term>
						<listitem>
							<para><guiicon>
									<inlinemediaobject>
										<imageobject>
											<imagedata align="center"
												fileref="images/icons/navigate_stereotype.gif"
												format="GIF" />
										</imageobject>
									</inlinemediaobject>
								</guiicon> icon. If a stereotype has been selected, clicking button&nbsp;1 will navigate to the stereotype property panel (see <xref
									xlink:href="s1.ref.stereotype_class" />).</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Owner</literal>
						</term>
						<listitem>
							<para>Text box. Records the class which contains this operation.</para>
							<para>Button&nbsp;1 double click on the entry will navigate to the class.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Visibility</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Operation Visibility</primary>
							</indexterm>
							<indexterm>
								<primary>Visibility</primary>
								<secondary>of Operation</secondary>
							</indexterm>
							<para>Radio box, with entries <literal> public</literal>, <literal>private</literal>, <literal>protected</literal> and <literal>package</literal>.</para>
							<itemizedlist>
								<listitem>
									<para><literal>public</literal>. The operation is available to any model element that can see the owning class.</para>
								</listitem>
								<listitem>
									<para><literal>private</literal>. The operation is available only to the owning class (and any inner classes).</para>
								</listitem>
								<listitem>
									<para><literal>protected</literal>. The operation is available only to the owning class, or model elements that are subclasses of the owning class.</para>
								</listitem>
								<listitem>
									<para><literal>package</literal>. The operation is available only model elements contained in the same package.</para>
								</listitem>
							</itemizedlist>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Modifiers</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Operation Modifiers</primary>
							</indexterm>
							<indexterm>
								<primary>Modifiers</primary>
								<secondary>of Operation</secondary>
							</indexterm>
							<para>Check box, with entries <literal> abstract</literal>, <literal>leaf</literal>, <literal> root</literal>, <literal>query</literal>, and <literal> static</literal>.</para>
							<itemizedlist>
								<listitem>
									<para><literal>abstract</literal>. This operation has no implementation with this class. The implementation must be provided by a subclass.</para>
									<important>
										<para>Any class with an abstract operation must itself be declared abstract.</para>
									</important>
								</listitem>
								<listitem>
									<para><literal>leaf</literal>. The implementation of this operation must not be overridden by any subclass.</para>
								</listitem>
								<listitem>
									<para><literal>root</literal>. The declaration of this operation must not override a declaration of the operation from a superclass.</para>
								</listitem>
								<listitem>
									<para><literal>query</literal>. This indicates that the operation must have no side effects (i.e. it must not change the state of the system). It can only return a value.</para>
									<caution>
										<para>Operations for user defined datatypes must always check this modifier.</para>
									</caution>
								</listitem>
								<listitem>
									<para><literal>static</literal>. There is only one instance of this operation associated with the class (as opposed to one for each instance of the class). This is the <literal>OwnerScope</literal> attribute of a <literal>Feature</literal> metaclass within UML. Any operation declared static is shown underlined on the class diagram.</para>
								</listitem>
							</itemizedlist>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Concurrency</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Operation Concurrency</primary>
							</indexterm>
							<indexterm>
								<primary>Concurrency</primary>
								<secondary>of Operation</secondary>
							</indexterm>
							<para>Radio box, with entries <literal> guarded</literal>, <literal>sequential</literal>, and <literal>concurrent</literal>.</para>
							<itemizedlist>
								<listitem>
									<para><literal>guarded</literal>. Multiple calls from concurrent threads may occur simultaneously to one instance (on any guarded operation), but only one is allowed to commence. The others are blocked until the performance of the first operation is complete.</para>
									<caution>
										<para>It is up to the system designer to ensure that deadlock cannot occur. It is the responsibility of the operation to implement the blocking behavior (as opposed to the system).</para>
									</caution>
								</listitem>
								<listitem>
									<para><literal>sequential</literal>. Only one call to an instance (of the class with the operation) may be outstanding at any one time. There is no protection, and no guarantee of behavior if the system violates this rule.</para>
								</listitem>
								<listitem>
									<para><literal>concurrent</literal>. Multiple calls to one instance may execute at the same time. The operation is responsible for ensuring correct behavior. This must be managed even if there are other sequential or synchronized (guarded) operations executing at the time.</para>
								</listitem>
							</itemizedlist>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Parameter</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Operation Parameter</primary>
							</indexterm>
							<indexterm>
								<primary>Parameter</primary>
								<secondary>of Operation</secondary>
							</indexterm>
							<para>Text area, with entries for all the parameters of the operation (see <xref
									xlink:href="s1.ref.parameter"
									 />). A new operation is always created with one new parameter, <literal>return</literal> to define the return type of the operation.</para>
							<para>Button&nbsp;1 double click on any of the parameters navigates to that parameter. Button&nbsp;2 click brings up a pop up menu with two entries.</para>
							<itemizedlist>
								<listitem>
									<para><literal>Move Up</literal>. Only available where there are two or more parameters, and the parameter selected is not at the top. It is moved up one position.</para>
								</listitem>
								<listitem>
									<para><literal>Move Down</literal>. Only available where there are two or more parameters listed, and the parameter selected is not at the bottom. It is moved down one position.</para>
								</listitem>
							</itemizedlist>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Raised Signals</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Operation Raised Signals</primary>
							</indexterm>
							<indexterm>
								<primary>Raised Signals</primary>
								<secondary>of Operation</secondary>
							</indexterm>
							<para>Text area, with entries for all the signals (see <xref
									xlink:href="s1.ref.signal"
								 />) that can be raised by the operation.</para>
							<caution>
								<para>ArgoUML at present (V0.18) has limited support for signals. In particular they are not linked to signal events that could drive state machines.</para>
							</caution>
							<para>Button&nbsp;1 double click on any of the signals navigates to that parameter.</para>
						</listitem>
					</varlistentry>
				</variablelist>
			</section>
		</section>
		
		<section xml:id="s1.ref.parameter">
			<title>Parameter</title>
			
			<indexterm>
				<primary>Parameter</primary>
			</indexterm>
			
			<para>A parameter is a variable that can be passed. In the UML metamodel it is a sub-class of <literal> ModelElement</literal>.</para>
			<para>A parameter is represented within the operation declaration in the operation compartment of a class as follows.</para>
			
			<blockquote>
				<para>
					<emphasis>name</emphasis>
					<literal>:</literal>
					<emphasis>type</emphasis>
				</para>
			</blockquote>
			
			<para><emphasis>name</emphasis> is the name of the parameter.</para>
			<para><emphasis>type</emphasis> is the type (UML datatype, class or interface) of the parameter.</para>
			<para>The exception is any parameter representing a return value, whose type only is shown at the end of the operation declaration.</para>
			
			<section>
				<title>Parameter Details Tabs</title>
				
				<indexterm>
					<primary>Parameter Details Tabs</primary>
				</indexterm>
				<indexterm>
					<primary>Details Tabs</primary>
					<secondary>for Parameter</secondary>
				</indexterm>
				<para>The details tabs that are active for parameters are as follows.</para>
				<variablelist>
					<varlistentry>
						<term>
							<literal>ToDoItem</literal>
						</term>
						<listitem>
							<para>Standard tab.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Properties</literal>
						</term>
						<listitem>
							<para>See <xref xlink:href="s2.ref.parameter_property_toolbar"
									 /> and <xref xlink:href="s2.ref.parameter_property_fields"
								 /> below.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Documentation</literal>
						</term>
						<listitem>
							<para>Standard tab. See <xref xlink:href="s2.ref.documentation_tab"
							 />.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Source</literal>
						</term>
						<listitem>
							<para>Standard tab. This contains a declaration for the parameter.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Tagged Values</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Parameter Tagged Values</primary>
							</indexterm>
							<indexterm>
								<primary>Tagged Values</primary>
								<secondary>of Parameter</secondary>
							</indexterm>
							<para>Standard tab. In the UML metamodel, <literal> Parameter</literal> has the following standard tagged values defined.</para>
							<itemizedlist>
								<listitem>
									<para><literal>derived</literal> (from the superclass, <literal>ModelElement</literal>). Values <literal>true</literal>, meaning the parameter is redundant&#8212;it can be formally derived from other elements, or <literal>false</literal> meaning it cannot.</para>
									<caution>
										<para>A derived parameter is a meaningless concept.</para>
									</caution>
								</listitem>
							</itemizedlist>
							<note>
								<para>The UML <literal>Element</literal> metaclass from which all other model elements are derived includes the tagged element <literal>documentation</literal> which is handled by the <emphasis>documentation tab</emphasis> under ArgoUML</para>
							</note>
						</listitem>
					</varlistentry>
				</variablelist>
			</section>
			
			<section xml:id="s2.ref.parameter_property_toolbar">
				<title>Parameter Property Toolbar</title>
				
				<indexterm>
					<primary>Parameter Property Toolbar</primary>
				</indexterm>
				<indexterm>
					<primary>Property Toolbar</primary>
					<secondary>for Parameter</secondary>
				</indexterm>
				<variablelist>
					<varlistentry>
						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/navigate_up.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Go up</literal>
						</term>
						<listitem>
							<para>Navigate up through the package structure.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/parameter.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>New parameter</literal>
						</term>
						<listitem>
							<para>This creates a new parameter for the for the same operation as the current parameter, navigating immediately to the properties tab for that parameter.</para>
							<tip>
								<para>This is a convenient way to add a series of parameters for the same operation.</para>
							</tip>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/datatype.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>New Datatype</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Add Datatype</primary>
							</indexterm>
							<indexterm>
								<primary>New Datatype</primary>
							</indexterm>
							<indexterm>
								<primary>Create New</primary>
								<secondary>Datatype</secondary>
							</indexterm>
							<para>This creates a new Datatype (see <xref
									xlink:href="s1.ref.datatype"
								 />) in the namespace of the owner of the operation of the parameter, navigating immediately to the properties tab for that datatype.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/stereotype.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>New Stereotype</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Add Stereotype</primary>
							</indexterm>
							<indexterm>
								<primary>New Stereotype</primary>
							</indexterm>
							<indexterm>
								<primary>Create New</primary>
								<secondary>Stereotype</secondary>
							</indexterm>
							<para>This creates a new Stereotype (see <xref
									xlink:href="s1.ref.stereotype"
								 />) for the selected parameter, navigating immediately to the properties tab for that stereotype.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/property_delete.gif" format="GIF"
										 />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Delete</literal>
						</term>
						<listitem>
							<para>This deletes the parameter from the model</para>
							<warning>
								<para>This is a deletion from the model <emphasis>not</emphasis> just the diagram. If desired the whole operation compartment can be hidden on the diagram using the <emphasis>presentation</emphasis> tab or the button&nbsp;2 pop up menu for the class on the diagram.</para>
							</warning>
						</listitem>
					</varlistentry>
				</variablelist>
			</section>
			
			<section xml:id="s2.ref.parameter_property_fields">
				<title>Property Fields For Parameter</title>
				
				<indexterm>
					<primary>Parameter Property Fields</primary>
				</indexterm>
				<indexterm>
					<primary>Property Fields</primary>
					<secondary>for Parameter</secondary>
				</indexterm>
				
				<variablelist>
					<varlistentry>
						<term>
							<literal>Name</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Parameter Name</primary>
							</indexterm>
							<indexterm>
								<primary>Name</primary>
								<secondary>of Parameter</secondary>
							</indexterm>
							<para>Text box. The name of the parameter. By convention, the name of a parameter has a leading lower case letter, with words separated by <quote>bumpy caps</quote>.</para>
							<note>
								<para>The ArgoUML critics do not complain about parameter names that do not have an initial lower case letter.</para>
							</note>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Stereotype</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Parameter Stereotype</primary>
							</indexterm>
							<indexterm>
								<primary>Stereotype</primary>
								<secondary>of Parameter</secondary>
							</indexterm>
							<para>Drop down selector. There are no UML standard stereotypes for <literal>Parameter</literal>.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Navigate Stereotype</literal>
						</term>
						<listitem>
							<para><guiicon>
									<inlinemediaobject>
										<imageobject>
											<imagedata align="center"
												fileref="images/icons/navigate_stereotype.gif"
												format="GIF" />
										</imageobject>
									</inlinemediaobject>
								</guiicon> icon. If a stereotype has been selected, this will navigate to the stereotype property panel (see <xref
									xlink:href="s1.ref.stereotype" />).</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Owner</literal>
						</term>
						<listitem>
							<para>Text box. Records the operation which contains this parameter.</para>
							<para>Button&nbsp;1 double click on the entry will navigate to the operation.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Type</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Parameter Type</primary>
							</indexterm>
							<indexterm>
								<primary>Type</primary>
								<secondary>of Parameter</secondary>
							</indexterm>
							<para>Drop down selector. The type of this parameter. This can be any UML <literal>Classifier</literal>, although in practice only <literal>Class</literal>, <literal>DataType</literal>, or <literal> Interface</literal> make any sense.</para>
							<note>
								<para>A type must be declared (it can be <literal> void</literal>, but this only makes sense for a return parameter). By default ArgoUML supplies <literal>int</literal> as the type the first time a parameter is created, and thereafter the type of the most recently created parameter.</para>
							</note>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Default Value</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Parameter Initial Value</primary>
							</indexterm>
							<indexterm>
								<primary>Initial Value</primary>
								<secondary>of Parameter</secondary>
							</indexterm>
							<indexterm>
								<primary>Parameter Default Value</primary>
							</indexterm>
							<indexterm>
								<primary>Default Value</primary>
								<secondary>of Parameter</secondary>
							</indexterm>
							<para>Text box with drop down. This allows you to set an initial value for the parameter if desired (this is optional). The drop down menu provides access to the common values <literal>0</literal>, <literal> 1</literal>, <literal>2</literal>, and <literal> null</literal>.</para>
							<caution>
								<para>This only makes sense for <literal> out</literal> or <literal>return</literal> parameters.</para>
							</caution>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Kind</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Parameter Kind</primary>
							</indexterm>
							<indexterm>
								<primary>Kind</primary>
								<secondary>of Parameter</secondary>
							</indexterm>
							<para>Radio box, with entries <literal>out</literal>, <literal>in/out</literal>, <literal>return</literal>, and <literal>in</literal>.</para>
							<itemizedlist>
								<listitem>
									<para><literal>out</literal>. The parameter is used only to pass values back from the operation.</para>
								</listitem>
								<listitem>
									<para><literal>in/out</literal>. The parameter is used both to pass values in and to pass results back out of the operation.</para>
									<note>
										<para>This is the default for any new parameter.</para>
									</note>
								</listitem>
								<listitem>
									<para><literal>return</literal>. The parameter is a return result from the call.</para>
									<note>
										<para>There is nothing to stop you declaring more than one return parameter (some programming languages support this concept).</para>
									</note>
									<tip>
										<para>The name of the return parameter does not appear on the diagram, but it is convenient to give it an appropriate name (such as the default <literal>return</literal> to identify it in the list of parameters on the operation property tab.</para>
									</tip>
								</listitem>
								<listitem>
									<para><literal>in</literal>. The parameter is used only to pass values in to the operation.</para>
								</listitem>
							</itemizedlist>
						</listitem>
					</varlistentry>
				</variablelist>
			</section>
		</section>
		
		<section xml:id="s1.ref.signal">
			<title>Signal</title>
			
			<indexterm>
				<primary>Signal</primary>
			</indexterm>
			
			<para>A signal is a specification of an asynchronous stimulus communicated between instances. In the UML metamodel it is a sub-class of <literal>Classifier</literal>.</para>
			<para>Within ArgoUML signals are not fully handled. Their value is when they are received as <emphasis>signal events</emphasis> driving the asynchronous behavior of state machines and when associated with <emphasis>send actions</emphasis> in state machines and messages for collaboration diagrams.</para>
			
			<tip>
				<para>In general there is limited value at present in defining signals within ArgoUML. It may prove more useful to define signals as classes, with a (user defined) stereotype of <literal>&laquo;signal&raquo;</literal> as suggested in the UML 1.4 standard. This allows any dependency relationships between signals to be shown.</para>
			</tip>
			
			<section>
				<title>Signal Details Tabs</title>
				
				<indexterm>
					<primary>Signal Details Tabs</primary>
				</indexterm>
				<indexterm>
					<primary>Details Tabs</primary>
					<secondary>for Signal</secondary>
				</indexterm>
				
				<para>The details tabs that are active for signals are as follows.</para>
				
				<variablelist>
					<varlistentry>
						<term>
							<literal>ToDoItem</literal>
						</term>
						<listitem>
							<para>Standard tab.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Properties</literal>
						</term>
						<listitem>
							<para>See <xref xlink:href="s2.ref.signal_property_toolbar" /> and <xref
									xlink:href="s2.ref.signal_property_fields" /> below.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Documentation</literal>
						</term>
						<listitem>
							<para>Standard tab. See <xref xlink:href="s2.ref.documentation_tab"
							 />.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Source</literal>
						</term>
						<listitem>
							<para>Standard tab. There is nothing generated for a signal.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Tagged Values</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Signal Tagged Values</primary>
							</indexterm>
							<indexterm>
								<primary>Tagged Values</primary>
								<secondary>of Signal</secondary>
							</indexterm>
							<para>Standard tab. In the UML metamodel, <literal> Signal</literal> has the following standard tagged values defined.</para>
							<itemizedlist>
								<listitem>
									<para><literal>persistence</literal> (from the superclass, <literal>Classifier</literal>). Values <literal>transitory</literal>, indicating state is destroyed when an instance is destroyed or <literal> persistent</literal>, marking state is preserved when an instance is destroyed.</para>
								</listitem>
								<listitem>
									<para><literal>semantics</literal> (from the superclass, <literal>Classifier</literal>). The value is a specification of the semantics of the signal.</para>
								</listitem>
								<listitem>
									<para><literal>derived</literal> (from the superclass, <literal>ModelElement</literal>). Values <literal>true</literal>, meaning the signal is redundant&#8212;it can be formally derived from other elements, or <literal>false</literal> meaning it cannot.</para>
									<note>
										<para>Derived signals still have their value in analysis to introduce useful names or concepts, and in design to avoid re-computation.</para>
									</note>
								</listitem>
							</itemizedlist>
							<note>
								<para>The UML <literal>Element</literal> metaclass from which all other model elements are derived includes the tagged element <literal>documentation</literal> which is handled by the <emphasis>documentation tab</emphasis> under ArgoUML</para>
							</note>
						</listitem>
					</varlistentry>
				</variablelist>
			</section>
			
			<section xml:id="s2.ref.signal_property_toolbar">
				<title>Signal Property Toolbar</title>
				
				<indexterm>
					<primary>Signal Property Toolbar</primary>
				</indexterm>
				<indexterm>
					<primary>Property Toolbar</primary>
					<secondary>for Signal</secondary>
				</indexterm>
				
				<variablelist>
					<varlistentry>
						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/navigate_up.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Go up</literal>
						</term>
						<listitem>
							<para>Navigate up through the package structure.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center" fileref="images/icons/signal.gif"
											format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>New signal</literal>
						</term>
						<listitem>
							<para>This creates a new signal, navigating immediately to the properties tab for that signal.</para>
							<caution>
								<para>The signal is not associated with the same operation as the original signal, so this will have to be done afterwards.</para>
							</caution>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/stereotype.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>New Stereotype</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Add Stereotype</primary>
							</indexterm>
							<indexterm>
								<primary>New Stereotype</primary>
							</indexterm>
							<indexterm>
								<primary>Create New</primary>
								<secondary>Stereotype</secondary>
							</indexterm>
							<para>This creates a new Stereotype (see <xref
									xlink:href="s1.ref.stereotype"
								 />) for the selected signal, navigating immediately to the properties tab for that stereotype.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/property_delete.gif" format="GIF"
										 />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Delete</literal>
						</term>
						<listitem>
							<para>This deletes the signal from the model</para>
							<warning>
								<para>This is a deletion from the model.</para>
							</warning>
						</listitem>
					</varlistentry>
				</variablelist>
			</section>
			
			<section xml:id="s2.ref.signal_property_fields">
				<title>Property Fields For Signal</title>
				
				<indexterm>
					<primary>Signal Property Fields</primary>
				</indexterm>
				<indexterm>
					<primary>Property Fields</primary>
					<secondary>for Signal</secondary>
				</indexterm>
				
				<variablelist>
					<varlistentry>
						<term>
							<literal>Name</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Signal Name</primary>
							</indexterm>
							<indexterm>
								<primary>Name</primary>
								<secondary>of Signal</secondary>
							</indexterm>
							<para>Text box. The name of the signal. From their similarity to classes, by convention, the name of a signal has a leading upper case letter, with words separated by <quote>bumpy caps</quote>.</para>
							<note>
								<para>The ArgoUML critics do not complain about signal names that do not have an initial upper case letter.</para>
							</note>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Stereotype</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Signal Stereotype</primary>
							</indexterm>
							<indexterm>
								<primary>Stereotype</primary>
								<secondary>of Signal</secondary>
							</indexterm>
							<para>Drop down selector. Signal is provided by default with the UML standard stereotypes for its parent in the UML meta-model, <literal>Classifier</literal> ( <literal>metaclass</literal>, <literal> powerType</literal>, <literal>process</literal>, <literal>thread</literal>, and <literal> utility</literal>).</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Navigate Stereotype</literal>
						</term>
						<listitem>
							<para><guiicon>
									<inlinemediaobject>
										<imageobject>
											<imagedata align="center"
												fileref="images/icons/navigate_stereotype.gif"
												format="GIF" />
										</imageobject>
									</inlinemediaobject>
								</guiicon> icon. If a stereotype has been selected, this will navigate to the stereotype property panel (see <xref
									xlink:href="s1.ref.stereotype" />).</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Namespace</literal>
						</term>
						<listitem>
							<para>Drop down selector. Records and allows changing the namespace for the signal. This is the package hierarchy of the signal.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Contexts</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Signal Contexts</primary>
							</indexterm>
							<indexterm>
								<primary>Contexts</primary>
								<secondary>of Signal</secondary>
							</indexterm>
							<para>Text area. Lists all the contexts defined for this signal. Button&nbsp;1 double click navigates to the selected context, button&nbsp;2 click brings up a pop up menu with one entry.</para>
							<itemizedlist>
								<listitem>
									<para><literal>Add</literal>. Add a new context. This opens the <emphasis>Add/Remove Contexts</emphasis> dialog box (see figure below), which allows choosing between all possible operations, and adding them to the selected list.</para>
									<figure float="1" xml:id="fig.ref.signal_add_context">
										<title>The <quote>add/remove context</quote> dialog box</title>
										<screenshot><mediaobject><imageobject> <imagedata align="center" fileref="images/reference/signal_add_context.png" format="PNG" /></imageobject></mediaobject></screenshot>
									</figure>
								</listitem>
							</itemizedlist>
						</listitem>
					</varlistentry>
				</variablelist>
			</section>
		</section>
		
		<section xml:id="s1.ref.reception">
			<title>Reception (to be written)</title>
			
			<para>A reception is …</para>
		</section>
		
		<section xml:id="s1.ref.association_class">
			<title>Association</title>
			
			<indexterm>
				<primary>Association</primary>
			</indexterm>
			
			<para>An association on a class diagram represents a relationship between classes, or between a class and an interface. On a usecase diagram, an association binds an actor to a usecase.</para>
			<para>Within the UML metamodel, <literal>Association</literal> is a sub-class of both <literal>Relationship</literal> and <literal>GeneralizableElement</literal>.</para>
			<para>The association is represented as a solid line connecting actor and usecase or class or interface (see <xref xlink:href="fig.ref.class_diagram" />). The name of the association and any stereotype appear above the line.</para>
			<para>ArgoUML is not restricted to binary associations. See <xref xlink:href="s2.ref.association_multiway" /> for more on this.</para>
			<para>Associations are permitted between interfaces and classes, but UML&nbsp;1.3 specifies they must only be navigable toward the interface&#8212;in other words the interface cannot see the class. ArgoUML will draw such associations with the appropriate navigation.</para>
			<para>Associations are often not named, when their meaning is obvious from the context.</para>
			
			<note>
				<para>ArgoUML provides no specific way of showing the direction of the association as described in the UML 1.4 standard. The naming should attempt to make this clear.</para>
			</note>
			
			<para>The association contains at least two ends, which may be navigated to via the association property sheet. See <xref xlink:href="s1.ref.association_end_class" /> for more information.</para>
			
			<section xml:id="s2.ref.association_multiway">
				<title>Three-way and Greater Associations and Association Classes</title>
				
				<para>UML&nbsp;1.3 provides for N-ary associations and associations that are governed by a third <emphasis>associative class</emphasis>. Both are supported by ArgoUML.</para>
				<para><emphasis>N-ary associations</emphasis> are created by drawing with the association tool from an existing association to a third class. The current implementation of ArgoUML does not allow the inverse: drawing from a 3rd class towards an existing association is not possible.</para>
				<para>Association Classes are drawn exactly like a normal association, i.e. between two classes, but with a different dedicated tool from the diagram toolbar.</para>
			</section>
			
			<section>
				<title>Association Details Tabs</title>
				
				<para>The details tabs that are active for associations are as follows.</para>
				
				<indexterm>
					<primary>Association Details Tabs</primary>
				</indexterm>
				<indexterm>
					<primary>Details Tabs</primary>
					<secondary>for Association</secondary>
				</indexterm>
				
				<variablelist>
					<varlistentry>
						<term>
							<literal>ToDoItem</literal>
						</term>
						<listitem>
							<para>Standard tab.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Properties</literal>
						</term>
						<listitem>
							<para>See <xref xlink:href="s2.ref.association_property_toolbar"
									 /> and <xref xlink:href="s2.ref.association_property_fields"
								 /> below.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Documentation</literal>
						</term>
						<listitem>
							<para>Standard tab. See <xref xlink:href="s2.ref.documentation_tab"
							 />.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Presentation</literal>
						</term>
						<listitem>
							<para>Standard tab.</para>
							<note>
								<para>The values for the bounds of the Association have no meaning, since they are determined by the location of the connected items. Changing them has no effect on the diagram.</para>
							</note>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Source</literal>
						</term>
						<listitem>
							<para>Standard tab. You would not expect to generate any code for an association, and any code entered here is ignored (it will have disappeared when you come back to the association.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Tagged Values</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Association Tagged Values</primary>
							</indexterm>
							<indexterm>
								<primary>Tagged Values</primary>
								<secondary>of Association</secondary>
							</indexterm>
							<para>Standard tab. In the UML metamodel, <literal> Association</literal> has the following standard tagged values defined.</para>
							<itemizedlist>
								<listitem>
									<para><literal>persistence</literal>. Values <literal>transitory</literal>, indicating state is destroyed when an instance is destroyed or <literal> persistent</literal>, marking state is preserved when an instance is destroyed.</para>
								</listitem>
								<listitem>
									<para><literal>derived</literal> (from the superclass, <literal>ModelElement</literal>). Values <literal>true</literal>, meaning the association is redundant&#8212;it can be formally derived from other elements, or <literal>false</literal> meaning it cannot.</para>
									<note>
										<para>Derived associations still have their value in analysis to introduce useful names or concepts, and in design to avoid re-computation.</para>
									</note>
								</listitem>
							</itemizedlist>
							<note>
								<para>The UML <literal>Element</literal> metaclass from which all other model elements are derived includes the tagged element <literal>documentation</literal> which is handled by the <emphasis>documentation tab</emphasis> under ArgoUML</para>
							</note>
						</listitem>
					</varlistentry>
				</variablelist>
			</section>
			
			<section xml:id="s2.ref.association_property_toolbar">
				<title>Association Property Toolbar</title>
				
				<indexterm>
					<primary>Association Property Toolbar</primary>
				</indexterm>
				<indexterm>
					<primary>Property Toolbar</primary>
					<secondary>for Association</secondary>
				</indexterm>
				
				<variablelist>
					<varlistentry>
						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/navigate_up.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Go up</literal>
						</term>
						<listitem>
							<para>Navigate up through the package structure of the model. For an association this will be the package containing the association.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/stereotype.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>New Stereotype</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Add Stereotype</primary>
							</indexterm>
							<indexterm>
								<primary>New Stereotype</primary>
							</indexterm>
							<indexterm>
								<primary>Create New</primary>
								<secondary>Stereotype</secondary>
							</indexterm>
							<para>This creates a new Stereotype (see <xref
									xlink:href="s1.ref.stereotype"
								 />) for the selected association, navigating immediately to the properties tab for that stereotype.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/property_delete.gif" format="GIF"
										 />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Delete</literal>
						</term>
						<listitem>
							<para>This deletes the selected association from the model.</para>
							<warning>
								<para>This is a deletion from the model <emphasis>not</emphasis> just the diagram. To delete an association from the diagram, but keep it within the model, use the main menu <literal>Remove From Diagram</literal> (or press the Delete key).</para>
							</warning>
						</listitem>
					</varlistentry>
				</variablelist>
			</section>
			
			<section xml:id="s2.ref.association_property_fields">
				<title>Property Fields For Association</title>
				
				<indexterm>
					<primary>Association Property Fields</primary>
				</indexterm>
				<indexterm>
					<primary>Property Fields</primary>
					<secondary>for Association</secondary>
				</indexterm>
				
				<variablelist>
					<varlistentry>
						<term>
							<literal>Name</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Association Name</primary>
							</indexterm>
							<indexterm>
								<primary>Name</primary>
								<secondary>of Association</secondary>
							</indexterm>
							<para>Text box. The name of the association. By convention association names start with a lower case letter, with <quote>bumpy caps</quote> used to indicate words within the name, thus: <literal> salesHandling</literal>.</para>
							<note>
								<para>ArgoUML does not enforce any naming convention for associations.</para>
							</note>
							<tip>
								<para>Although the design critics will advise otherwise, it is perfectly normal not to name associations on a class diagram, since the relationship is often obvious from the classes (or class and interface) name.</para>
							</tip>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Stereotype</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Association Stereotype</primary>
							</indexterm>
							<indexterm>
								<primary>Stereotype</primary>
								<secondary>of Association</secondary>
							</indexterm>
							<para>Drop down selector. Association is provided by default with the UML standard stereotype for Association (<literal>implicit</literal>) .</para>
							<para>Stereotyping can be useful when creating associations in the problem domain (requirements capture) and solution domain (analysis), as well as for processes based on patterns.</para>
							<para>The stereotype is shown between &laquo; and &raquo; below the name of the association on the diagram.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Navigate Stereotype</literal>
						</term>
						<listitem>
							<para><guiicon>
									<inlinemediaobject>
										<imageobject>
											<imagedata align="center"
												fileref="images/icons/navigate_stereotype.gif"
												format="GIF" />
										</imageobject>
									</inlinemediaobject>
								</guiicon> icon. If a stereotype has been selected, this will navigate to the stereotype property panel (see <xref
									xlink:href="s1.ref.stereotype" />).</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Namespace</literal>
						</term>
						<listitem>
							<para>Drop down selector. Records and allows changing the namespace for the association. This is the package hierarchy.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Connections</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Association Ends</primary>
								<secondary>of Association</secondary>
							</indexterm>
							<indexterm>
								<primary>Connections</primary>
								<secondary>of Association</secondary>
							</indexterm>
							<para>Text area. Lists the ends of this association. An association can have two or more ends. For more on association ends see <xref
									xlink:href="s1.ref.association_end_class" />.</para>
							<para>The names of the association ends are listed, unless the association end has no name (the case when it is first created), in which case <literal>(Unnamed AssociationEnd)</literal> is shown.</para>
							<note>
								<para>The only representation of association ends on a diagram is that their name appears at the relevant end of the corresponding association.</para>
							</note>
							<para>Button&nbsp;1 double click on an association end will navigate to that end.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Association Roles</literal>
						</term>
						<listitem>
							<para>Text area. (To be written)</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Links</literal>
						</term>
						<listitem>
							<para>Text area. (To be written)</para>
						</listitem>
					</varlistentry>
				</variablelist>
			</section>
		</section>
		
		<section xml:id="s1.ref.association_end_class">
			<title>Association End</title>
			
			<indexterm>
				<primary>Association End</primary>
			</indexterm>
			<para>Two or more association ends are associated with each association (see <xref xlink:href="s1.ref.association_use_case" /> ).</para>
			<para>Within the UML metamodel, <literal> AssociationEnd</literal> is a sub-class of <literal> ModelElement</literal>.</para>
			<para>The association end has no direct access on any diagram for binary associations. The ends of an N-ary association may be selected by clicking on the line in the diagram. The stereotype, name and multiplicity are shown at the relevant end of the parent association (see <xref xlink:href="fig.ref.use_case_diagram" />). Where shared or composite aggregation is selected for one association end, the opposite end is shown as a solid diamond (composite aggregation) or hollow diamond (shared aggregation).</para>
			
			<tip>
				<para>Although you can change attributes of association ends when creating a use case model, this is often not necessary. Many of the properties of an association end relate to its use in class diagrams, and are of limited relevance to use cases. The most useful attributes to consider altering are the name (used as the role name) and the multiplicity.</para>
			</tip>
			
			<note>
				<para>ArgoUML does not currently support showing qualifiers on the diagram, as described in the UML&nbsp;1.3 standard.</para>
			</note>
			
			<section>
				<title>Association End Details Tabs</title>
				
				<para>The details tabs that are active for associations are as follows.</para>
				
				<indexterm>
					<primary>Association End Details Tabs</primary>
				</indexterm>
				<indexterm>
					<primary>Details Tabs</primary>
					<secondary>for Association End</secondary>
				</indexterm>
				
				<variablelist>
					<varlistentry>
						<term>
							<literal>ToDoItem</literal>
						</term>
						<listitem>
							<para>Standard tab.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Properties</literal>
						</term>
						<listitem>
							<para>See <xref xlink:href="s2.ref.association_end_property_toolbar"
									 /> and <xref
									xlink:href="s2.ref.association_end_property_fields"
							 /> below.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Documentation</literal>
						</term>
						<listitem>
							<para>Standard tab. See <xref xlink:href="s2.ref.documentation_tab"
							 />.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Presentation</literal>
						</term>
						<listitem>
							<para>Standard tab.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Source</literal>
						</term>
						<listitem>
							<para>Standard tab. This tab contains a declaration for the association end as an instance of the model element to which it is connected.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Tagged Values</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Association End Tagged Values</primary>
							</indexterm>
							<indexterm>
								<primary>Tagged Values</primary>
								<secondary>of Association End</secondary>
							</indexterm>
							<para>Standard tab. In the UML metamodel, <literal> AssociationEnd</literal> has the following standard tagged values defined.</para>
							<itemizedlist>
								<listitem>
									<para><literal>derived</literal> (from the superclass, <literal>ModelElement</literal>). Values <literal>true</literal>, meaning the association end is redundant&#8212;it can be formally derived from other elements, or <literal> false</literal> meaning it cannot.</para>
									<tip>
										<para>Derived association ends still have their value in analysis to introduce useful names or concepts, and in design to avoid re-computation. However the tag only makes sense for an association end if it is also applied to the parent association.</para>
									</tip>
								</listitem>
							</itemizedlist>
							<note>
								<para>The UML <literal>Element</literal> metaclass from which all other model elements are derived includes the tagged element <literal>documentation</literal> which is handled by the <emphasis>documentation tab</emphasis> under ArgoUML</para>
							</note>
						</listitem>
					</varlistentry>
				</variablelist>
			</section>
			
			<section xml:id="s2.ref.association_end_property_toolbar">
				<title>Association End Property Toolbar</title>
				
				<indexterm>
					<primary>Association End Property Toolbar</primary>
				</indexterm>
				<indexterm>
					<primary>Property Toolbar</primary>
					<secondary>for Association End</secondary>
				</indexterm>
				
				<variablelist>
					<varlistentry>
						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/navigate_up.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Go up</literal>
						</term>
						<listitem>
							<para>Navigate up to the association to which this end belongs.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/association_end.gif" format="GIF"
										 />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Go Opposite</literal>
						</term>
						<listitem>
							<para>This navigates to the other end of the association.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/attribute.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>New Qualifier</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Add Qualifier</primary>
							</indexterm>
							<indexterm>
								<primary>New Qualifier</primary>
							</indexterm>
							<indexterm>
								<primary>Create New</primary>
								<secondary>Qualifier</secondary>
							</indexterm>
							<para>This creates a new Qualifier for the selected association-end, navigating immediately to the properties tab for that qualifier.</para>
							<warning>
								<para>Qualifiers are only partly supported in ArgoUML V0.18. Hence, activating this button creates a qualifier in the model, which is not shown on the diagram. Also, the properties panel for a qualifier equals that of a regular attribute.</para>
							</warning>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/stereotype.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>New Stereotype</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Add Stereotype</primary>
							</indexterm>
							<indexterm>
								<primary>New Stereotype</primary>
							</indexterm>
							<indexterm>
								<primary>Create New</primary>
								<secondary>Stereotype</secondary>
							</indexterm>
							<para>This creates a new Stereotype (see <xref
									xlink:href="s1.ref.stereotype"
								 />) for the selected association-end, navigating immediately to the properties tab for that stereotype.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/property_delete.gif" format="GIF"
										 />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Delete</literal>
						</term>
						<listitem>
							<para>This deletes the selected association-end from the model.</para>
							<note>
								<para>This button is downlighted for binary associations, since an association needs at least <emphasis>two</emphasis> ends. Only for N-ary associations, this button is accessable, and deletes just one end from the association.</para>
							</note>
						</listitem>
					</varlistentry>
				</variablelist>
			</section>
			
			<section xml:id="s2.ref.association_end_property_fields">
				<title>Property Fields For Association End</title>
				
				<indexterm>
					<primary>Association End Property Fields</primary>
				</indexterm>
				<indexterm>
					<primary>Property Fields</primary>
					<secondary>for Association End</secondary>
				</indexterm>
				
				<variablelist>
					<varlistentry>
						<term>
							<literal>Name</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Association End Name</primary>
							</indexterm>
							<indexterm>
								<primary>Name</primary>
								<secondary>of Association End</secondary>
							</indexterm>
							<para>Text box. The name of the association end, which provides a <emphasis>role name</emphasis> for this end of the association. This role name can be used for navigation, and in an implementation context, provides a name by which the source end of an association can reference the target end.</para>
							<note>
								<para>ArgoUML does not enforce any naming convention for association ends.</para>
							</note>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Stereotype</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Association End Stereotype</primary>
							</indexterm>
							<indexterm>
								<primary>Stereotype</primary>
								<secondary>of Association End</secondary>
							</indexterm>
							<para>Drop down selector. Association end is provided by default with the UML standard stereotypes for AssociationEnd (<literal>association</literal>, <literal>global</literal>, <literal>local</literal>, <literal>parameter</literal>, <literal> self</literal>).</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Navigate Stereotype</literal>
						</term>
						<listitem>
							<para><guiicon>
									<inlinemediaobject>
										<imageobject>
											<imagedata align="center"
												fileref="images/icons/navigate_stereotype.gif"
												format="GIF" />
										</imageobject>
									</inlinemediaobject>
								</guiicon> icon. If a stereotype has been selected, this will navigate to the stereotype property panel (see <xref
									xlink:href="s1.ref.stereotype" />).</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Association</literal>
						</term>
						<listitem>
							<para>Text box. Records the parent association for this association end. Button&nbsp;1 double click on this entry will navigate to that association.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Type</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Association End Type</primary>
							</indexterm>
							<indexterm>
								<primary>Type</primary>
								<secondary>of Association End</secondary>
							</indexterm>
							<para>Drop down selector providing access to all standard UML types provided by ArgoUML and all new classes created within the current model.</para>
							<para>This is the type of the entity attached to this end of the association.</para>
							<tip>
								<para>By default ArgoUML will select the class of the model element to which the linkend is connected. However, an association can be moved to another class by selecting another entry here.</para>
							</tip>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Multiplicity</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Association End Multiplicity</primary>
							</indexterm>
							<indexterm>
								<primary>Multiplicity</primary>
								<secondary>of Association End</secondary>
							</indexterm>
							<para>Drop down menu with edit box. The value can be chosen from the drop down box, or a new one can be edited in the text box. Records the multiplicity of this association end (with respect to the other end), i.e. how many instances of this end may be associated with an instance of the other end. The multiplicity is shown on the diagram at that end of the association.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Modifiers</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Association End Modifiers</primary>
							</indexterm>
							<indexterm>
								<primary>Modifiers</primary>
								<secondary>of Association End</secondary>
							</indexterm>
							<para>There are 3 modifiers: <literal> navigable</literal>, <literal>ordered</literal> and <literal>static</literal>. All 3 are checkboxes.</para>
							<itemizedlist>
								<listitem>
									<para><literal>navigable</literal>. Indicates that this end can be navigated to from the other end.</para>
									<note>
										<para>The UML 1.4 standard provides a number of options for how navigation is displayed on an association end. ArgoUML uses option 3, which means that arrow heads are shown at the end of an association, when navigation is enabled at only one end, to indicate the direction in which navigation is possible. This means that the default, with both ends navigable has no arrows.</para>
									</note>
								</listitem>
								<listitem>
									<para><literal>ordered</literal> When placed on one end, specifies whether the set of links from the other instance to this instance is ordered. The ordering must be determined and maintained by Operations that add links. It represents additional information not inherent in the objects or links themselves. Possibilities for the checkbox are: Unchecked - The links form a set with no inherent ordering. Checked - A set of ordered links can be scanned in order.</para>
								</listitem>
								<listitem>
									<para><literal>Static</literal> (To be written)</para>
								</listitem>
							</itemizedlist>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Specification</literal>
						</term>
						<listitem>
							<para>List. Designates zero or more Classifiers that specify the Operations that may be applied to an Instance accessed by the AssociationEnd across the Association. These determine the minimum interface that must be realized by the actual Classifier attached to the end to support the intent of the Association. May be an Interface or another Classifier. The type of classifier is indicated by an icon.</para>
							<para>Button&nbsp;1 double click navigates to the selected classifier, button&nbsp;2 click brings a pop up menu with one entry.</para>
							<itemizedlist>
								<listitem>
									<para><literal>Add</literal>. Add a new specification classifier. This opens the <emphasis>Add/Remove Specifications</emphasis> dialog box (see figure below), which allows choosing between all possible classifiers, and adding or removing them to the selected list.</para>
									<figure float="1" xml:id="fig.ref.signal_add_specification">
										<title>The <quote>Add/Remove Specifications</quote> dialog box</title>
										<screenshot><mediaobject><imageobject> <imagedata align="center" fileref="images/reference/signal_add_specification.png" format="PNG" /></imageobject></mediaobject></screenshot>
									</figure>
								</listitem>
							</itemizedlist>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Qualifiers</literal>
						</term>
						<listitem>
							<para>Text box. Records the qualifiers for this association end. Button&nbsp;1 double click on this entry will navigate to that qualifier. Button&nbsp;2 click will show a popup menu containing two items: <literal>Move Up</literal> and <literal>Move Down</literal>, which allow reordering the qualifiers.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Aggregation</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Association End Aggregation</primary>
							</indexterm>
							<indexterm>
								<primary>Aggregation</primary>
								<secondary>of Association End</secondary>
							</indexterm>
							<para>Radio box, with three entries <literal> composite</literal>, <literal>none</literal> and <literal>aggregate</literal>. Indicates whether the relationship with the far end represents some type of loose whole-part relationship ( <literal>aggregation</literal>) or tight whole-part relationship (<literal>composite</literal>).</para>
							<para>Shared aggregation is shown by a hollow diamond at the <quote>whole</quote> end of the association. Composite aggregation is shown by a solid diamond.</para>
							<note>
								<para>You may not have aggregation at both ends of an association. ArgoUML does not enforce this constraint.</para>
								<para>The <quote>whole</quote> end of a composite aggregation should have a multiplicity of one. ArgoUML does not enforce this constraint.</para>
							</note>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Changeability</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Association End Changeability</primary>
							</indexterm>
							<indexterm>
								<primary>Changeability</primary>
								<secondary>of Association End</secondary>
							</indexterm>
							<para>Radio box, with three entries <literal>add only</literal>, <literal>changeable</literal> and <literal>frozen</literal>. Indicates whether instances of this end of the association-end may be: i) created but not deleted after the target instance is created; ii) created and deleted by the source after the target instance is created; or iii) not created or deleted by the source after the target instance is created.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Visibility</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Association End Visibility</primary>
							</indexterm>
							<indexterm>
								<primary>Visibility</primary>
								<secondary>of Association End</secondary>
							</indexterm>
							<para>Radio box, with four entries <literal> public</literal>, <literal>private</literal>, <literal>protected</literal>, and <literal>package</literal>. Indicates whether navigation to this end may be by: i) any classifier; ii) only by the source classifier; or iii) only the source classifier and its children.</para>
						</listitem>
					</varlistentry>
				</variablelist>
			</section>
		</section>
		
		<section xml:id="s1.ref.dependency_class">
			<title>Dependency</title>
			
			<indexterm>
				<primary>Dependency</primary>
			</indexterm>
			
			<para>Dependency is a relationship between two model elements showing that one depends on the other.</para>
			<para>Within the UML metamodel, <literal>Dependency</literal> is a sub-class of <literal>Relationship</literal>.</para>
			<para>Dependency is represented as a dashed line with an open arrow head from the depending model element to that which it is dependent upon.</para>
			
			<section>
				<title>Dependency Details Tabs</title>
				
				<indexterm>
					<primary>Dependency Details Tabs</primary>
				</indexterm>
				<indexterm>
					<primary>Details Tabs</primary>
					<secondary>for Dependency</secondary>
				</indexterm>
				
				<para>The details tabs that are active for dependencies are as follows.</para>
				
				<variablelist>
					<varlistentry>
						<term>
							<literal>ToDoItem</literal>
						</term>
						<listitem>
							<para>Standard tab.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Properties</literal>
						</term>
						<listitem>
							<para>See <xref xlink:href="s2.ref.dependency_property_toolbar"
									 /> and <xref xlink:href="s2.ref.dependency_property_fields"
								 /> below.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Documentation</literal>
						</term>
						<listitem>
							<para>Standard tab. See <xref xlink:href="s2.ref.documentation_tab"
							 />.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Presentation</literal>
						</term>
						<listitem>
							<para>Standard tab</para>
							<note>
								<para>The values in the "bounds" field of the dependency are not editable, since they are determined by the properties of the endpoints of the line. </para>
							</note>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Tagged Values</literal>
						</term>
						<listitem>
							<para>Standard tab. In the UML metamodel, <literal> Dependency</literal> has no tagged values of its own, but through superclasses has the following standard tagged values defined.</para>
							<itemizedlist>
								<listitem>
									<para><literal>derived</literal> (from the superclass, <literal>ModelElement</literal>). Values <literal>true</literal>, meaning the dependency relationship is redundant&#8212;it can be formally derived from other elements, or <literal> false</literal> meaning it cannot.</para>
									<note>
										<para>Derived dependencies still have their value in analysis to introduce useful names or concepts.</para>
									</note>
								</listitem>
							</itemizedlist>
						</listitem>
					</varlistentry>
				</variablelist>
			</section>
			
			<section xml:id="s2.ref.dependency_property_toolbar">
				<title>Dependency Property Toolbar</title>
				
				<variablelist>
					<varlistentry>
						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/navigate_up.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Go up</literal>
						</term>
						<listitem>
							<para>Navigate up through the package structure of the model. For a dependency this will be the package containing the dependency.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/stereotype.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>New Stereotype</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Add Stereotype</primary>
							</indexterm>
							<indexterm>
								<primary>New Stereotype</primary>
							</indexterm>
							<indexterm>
								<primary>Create New</primary>
								<secondary>Stereotype</secondary>
							</indexterm>
							<para>This creates a new Stereotype (see <xref
									xlink:href="s1.ref.stereotype"
								 />) for the selected dependency, navigating immediately to the properties tab for that stereotype.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/property_delete.gif" format="GIF"
										 />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Delete</literal>
						</term>
						<listitem>
							<para>This deletes the selected dependency from the model.</para>
							<warning>
								<para>This is a deletion from the model <emphasis>not</emphasis> just the diagram. To delete a dependency from the diagram, but keep it within the model, use the main menu <literal>Remove From Diagram</literal> (or press the Delete key).</para>
							</warning>
						</listitem>
					</varlistentry>
				</variablelist>
			</section>
			
			<section xml:id="s2.ref.dependency_property_fields">
				<title>Property Fields For Dependency</title>
				
				<variablelist>
					<varlistentry>
						<term>
							<literal>Name</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Dependency Name</primary>
							</indexterm>
							<indexterm>
								<primary>Name</primary>
								<secondary>of Dependency</secondary>
							</indexterm>
							<para>Text box. The name of the dependency.</para>
							<tip>
								<para>It is quite common to leave dependencies unnamed.</para>
							</tip>
							<note>
								<para>ArgoUML does not enforce any naming convention for associations.</para>
							</note>
							<note>
								<para>There is no representation of the name of a dependency on the diagram.</para>
							</note>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Stereotype</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Dependency Stereotype</primary>
							</indexterm>
							<indexterm>
								<primary>Stereotype</primary>
								<secondary>of Dependency</secondary>
							</indexterm>
							<para>Drop down selector. Dependency has no standard stereotypes of its own under UML&nbsp;1.3. and so ArgoUML does not provide any. The stereotype is shown between &laquo; and &raquo; above or across the generalization.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Navigate Stereotype</literal>
						</term>
						<listitem>
							<para><guiicon>
									<inlinemediaobject>
										<imageobject>
											<imagedata align="center"
												fileref="images/icons/navigate_stereotype.gif"
												format="GIF" />
										</imageobject>
									</inlinemediaobject>
								</guiicon> icon. If a stereotype has been selected, this will navigate to the stereotype property panel (see <xref
									xlink:href="s1.ref.stereotype" />).</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Namespace</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Dependency Namespace</primary>
							</indexterm>
							<indexterm>
								<primary>Namespace</primary>
								<secondary>of Dependency</secondary>
							</indexterm>
							<para>Text box. Records the namespace for the dependency. This is the package hierarchy.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Suppliers</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Dependency Suppliers</primary>
							</indexterm>
							<indexterm>
								<primary>Suppliers</primary>
								<secondary>of Dependency</secondary>
							</indexterm>
							<para>Text area. Lists the end of the relationship that is supplying what is needed by the other end.</para>
							<para>Button&nbsp;1 double click on a supplier will navigate to that element.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Clients</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Dependency Clients</primary>
							</indexterm>
							<indexterm>
								<primary>Clients</primary>
								<secondary>of Dependency</secondary>
							</indexterm>
							<para>Text area. Lists the <quote>depending</quote> ends of the relationship, i.e. the end that makes use of the other end.</para>
							<para>Button&nbsp;1 double click on a client will navigate to that element.</para>
						</listitem>
					</varlistentry>
				</variablelist>
			</section>
		</section>
		
		<section xml:id="s1.ref.generalization_class">
			<title>Generalization</title>
			
			<para>Generalization is described under use case diagrams (see <xref xlink:href="s1.ref.generalization_use_case" />).</para>
			
			<note>
				<para>Within the context of classes, generalization and specialization are the UML terms describing class inheritance.</para>
			</note>
		</section>
		
		<section xml:id="s1.ref.interface_class">
			<title>Interface</title>
			
			<para>An interface is a set of operations characterizing the behavior of an element. It can be usefully thought of as an abstract class with no attributes and no non-abstract operations. In the UML metamodel it is a sub-class of <literal> Classifier</literal> and through that <literal> GeneralizableElement</literal>.</para>
			<para>An interface is represented on a class diagram as a rectangle with two horizontal compartments. The top compartment displays the interface name (and above it <literal> &laquo;interface&raquo;</literal>) and the second any operations. Just like a class, the operations compartment can be hidden.</para>
			
			<section>
				<title>Interface Details Tabs</title>
				
				<para>The details tabs that are active for interfaces are as follows.</para>
				
				<variablelist>
					<varlistentry>
						<term>
							<literal>ToDoItem</literal>
						</term>
						<listitem>
							<para>Standard tab.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Properties</literal>
						</term>
						<listitem>
							<para>See <xref xlink:href="s2.ref.interface_property_toolbar"
									 /> and <xref xlink:href="s2.ref.interface_property_fields"
								 /> below.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Documentation</literal>
						</term>
						<listitem>
							<para>Standard tab. See <xref xlink:href="s2.ref.documentation_tab"
							 />.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Presentation</literal>
						</term>
						<listitem>
							<para>Standard tab. The tick box <literal>Display Operations</literal> allows the operation compartment to be shown (the default) or hidden. This is a setting valid for only the current diagram. The <literal> Bounds:</literal> field defines the bounding box for the package on the diagram.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Source</literal>
						</term>
						<listitem>
							<para>Standard tab. This contains a template for the interface declaration and declarations of associated interfaces.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Tagged Values</literal>
						</term>
						<listitem>
							<para>Standard tab. In the UML metamodel, <literal> Interface</literal> has the following standard tagged values defined.</para>
							<itemizedlist>
								<listitem>
									<para><literal>persistence</literal> (from the superclass, <literal>Classifier</literal>). Values <literal>transitory</literal>, indicating state is destroyed when an instance is destroyed or <literal> persistent</literal>, marking state is preserved when an instance is destroyed.</para>
									<warning>
										<para>Since interfaces are by definition abstract, they can have no instance, and so this tagged value must refer to the properties of the realizing class.</para>
									</warning>
								</listitem>
								<listitem>
									<para><literal>semantics</literal> (from the superclass, <literal>Classifier</literal>). The value is a specification of the semantics of the interface.</para>
								</listitem>
								<listitem>
									<para><literal>derived</literal> (from the superclass, <literal>ModelElement</literal>). Values <literal>true</literal>, meaning the interface is redundant&#8212;it can be formally derived from other elements, or <literal>false</literal> meaning it cannot.</para>
									<note>
										<para>Derived interfaces still have their value in analysis to introduce useful names or concepts, and in design to avoid re-computation.</para>
									</note>
								</listitem>
							</itemizedlist>
							<note>
								<para>The UML <literal>Element</literal> metaclass from which all other model elements are derived includes the tagged element <literal>documentation</literal> which is handled by the <emphasis>documentation tab</emphasis> under ArgoUML</para>
							</note>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Checklist</literal>
						</term>
						<listitem>
							<para>Standard tab for an Interface.</para>
						</listitem>
					</varlistentry>
				</variablelist>
			</section>
			
			<section xml:id="s2.ref.interface_property_toolbar">
				<title>Interface Property Toolbar</title>
				
				<variablelist>
					<varlistentry>
						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/navigate_up.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Go up</literal>
						</term>
						<listitem>
							<para>Navigate up through the package structure.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/operation.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>New operation</literal>
						</term>
						<listitem>
							<para>This creates a new operation (see <xref
									xlink:href="s1.ref.operation"
								 />) within the interface, navigating immediately to the properties tab for that operation.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/reception.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>New reception</literal>
						</term>
						<listitem>
							<para>This creates a new reception, navigating immediately to the properties tab for that reception.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/interface.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>New interface</literal>
						</term>
						<listitem>
							<para>This creates a new interface in the same namespace as the selected interface, navigating immediately to the properties tab for the new interface.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/stereotype.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>New Stereotype</literal>
						</term>
						<listitem>
							<indexterm>
								<primary>Add Stereotype</primary>
							</indexterm>
							<indexterm>
								<primary>New Stereotype</primary>
							</indexterm>
							<indexterm>
								<primary>Create New</primary>
								<secondary>Stereotype</secondary>
							</indexterm>
							<para>This creates a new Stereotype (see <xref
									xlink:href="s1.ref.stereotype"
								 />) for the selected interface, navigating immediately to the properties tab for that stereotype.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/property_delete.gif" format="GIF"
										 />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Delete</literal>
						</term>
						<listitem>
							<para>This deletes the interface from the model</para>
							<warning>
								<para>This is a deletion from the model <emphasis>not</emphasis> just the diagram. To delete an interface from the diagram, but keep it within the model, use the main menu <literal>Remove From Diagram</literal> (or press the Delete key).</para>
							</warning>
						</listitem>
					</varlistentry>
				</variablelist>
			</section>
			
			<section xml:id="s2.ref.interface_property_fields">
				<title>Property Fields For Interface</title>
				
				<variablelist>
					<varlistentry>
						<term>
							<literal>Name</literal>
						</term>
						<listitem>
							<para>Text box. The name of the interface. The name of an interface has a leading capital letter, with words separated by <quote>bumpy caps</quote>.</para>
							<note>
								<para>Unlike classes, the ArgoUML critics will not complain about interface names that do not have an initial capital.</para>
							</note>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Stereotype</literal>
						</term>
						<listitem>
							<para>Drop down selector. Interface is provided by default with the UML standard stereotypes for the parent meta-class, <literal>Classifier</literal> ( <literal>metaclass</literal>, <literal> powertype</literal>, <literal>process</literal>, <literal>thread</literal> and <literal> utility</literal>).</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Navigate Stereotype</literal>
						</term>
						<listitem>
							<para><guiicon>
									<inlinemediaobject>
										<imageobject>
											<imagedata align="center"
												fileref="images/icons/navigate_stereotype.gif"
												format="GIF" />
										</imageobject>
									</inlinemediaobject>
								</guiicon> icon. If a stereotype has been selected, this will navigate to the stereotype property panel (see <xref
									xlink:href="s1.ref.stereotype" />).</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Namespace</literal>
						</term>
						<listitem>
							<para>Drop down selector. Records and allows changing the namespace for the interface. This is the package hierarchy.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Modifiers</literal>
						</term>
						<listitem>
							<para>Check box, with entries <literal> Abstract</literal>, <literal>Leaf</literal> and <literal>Root</literal>.</para>
							<itemizedlist>
								<listitem>
									<para><literal>Abstract</literal> is used to declare that this interface cannot be instantiated, but must always be specialized. The name of an abstract interface is displayed in italics on the diagram.</para>
									<caution>
										<para>This is meaningless, since by definition an interface is an abstract entity. The UML&nbsp;1.3 standard offers no clarification.</para>
									</caution>
								</listitem>
								<listitem>
									<para><literal>Leaf</literal> indicates that this interface cannot be further specialized, while <literal>Root</literal> indicates it can have no generalizations.</para>
								</listitem>
							</itemizedlist>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Visibility</literal>
						</term>
						<listitem>
							<para>Radio box, with three entries <literal> public</literal>, <literal>protected</literal>, <literal>private</literal> and <literal>package</literal>. Indicates whether navigation to this end may be by: i) any classifier; ii) only the source classifier and its children; or iii) only by the source classifier.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Generalizations</literal>
						</term>
						<listitem>
							<para>Text area. Lists any interface that <emphasis>generalizes</emphasis> this interface.</para>
							<para>Button&nbsp;1 double click navigates to the generalization and opens its property tab.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Specializations</literal>
						</term>
						<listitem>
							<para>Text box. Lists any specialized interface (i.e. for which this interface is a generalization.</para>
							<para>Button&nbsp;1 double click navigates to the generalization and opens its property tab.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>AssociationEnds</literal>
						</term>
						<listitem>
							<para>Text box. Lists any AssociationEnds (see <xref
									xlink:href="s1.ref.association_end_class"
								 />) connected to this interface.</para>
							<note>
								<para>Associations between classes and interfaces <emphasis>must</emphasis> be navigable <emphasis>only</emphasis> from the class to the interface. ArgoUML will create associations between classes and interfaces with the correct navigability, but does not prevent the user from altering this.</para>
							</note>
							<para>Button&nbsp;1 double click navigates to the selected entry.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Operations</literal>
						</term>
						<listitem>
							<para>Text area. Lists all the operations (see <xref
									xlink:href="s1.ref.operation"
									 />) defined on this interface. Button&nbsp;1 double click navigates to the selected operation. Button&nbsp;2 click will show a popup menu with two items: <literal>Move Up</literal> and <literal>Move Down</literal>, which allow reordering the operations.</para>
							<caution>
								<para>All operations on an interface <emphasis>must</emphasis> be public. The ArgoUML critics will complain if this is not the case.</para>
							</caution>
						</listitem>
					</varlistentry>
				</variablelist>
			</section>
		</section>
		
		<section xml:id="s1.ref.abstraction">
			<title>Abstraction</title>
			
			<para>An abstraction is a dependency relationship joining two model elements within the model at different levels of abstraction. Within ArgoUML it is principally used through its specific stereotype <literal>realize</literal> to define realization dependencies, which link model elements that <emphasis>specify</emphasis> behavior to the corresponding model elements that <emphasis>implement</emphasis> the behavior.</para>
			<para>In the UML metamodel <literal>Abstraction</literal> is a sub-class of <literal>Dependency</literal> and through that <literal>Relationship</literal>.</para>
			<para>An abstraction with stereotype <literal>realize</literal> is represented on a class diagram as a dotted line with a solid white head at the specifying end.</para>
			
			<caution>
				<para>All other stereotypes of abstraction should be represented using an open arrow head, but this is not supported by ArgoUML.</para>
			</caution>
			
			<section>
				<title>Abstraction Details Tabs</title>
				
				<para>The details tabs that are active for abstractions are as follows.</para>
				<variablelist>
					<varlistentry>
						<term>
							<literal>ToDoItem</literal>
						</term>
						<listitem>
							<para>Standard tab.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Properties</literal>
						</term>
						<listitem>
							<para>See <xref xlink:href="s2.ref.abstraction_property_toolbar"
									 /> and <xref xlink:href="s2.ref.abstraction_property_fields"
								 /> below.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Documentation</literal>
						</term>
						<listitem>
							<para>Standard tab. See <xref xlink:href="s2.ref.documentation_tab"
							 />.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Presentation</literal>
						</term>
						<listitem>
							<para>Standard tab.</para>
							<note>
								<para>The values in the "bounds" field of the abstraction are not editable, since they are determined by the properties of the endpoints of the line. </para>
							</note>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Source</literal>
						</term>
						<listitem>
							<para>Standard tab. This contains the single downlighted text <literal>N/A</literal>.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Tagged Values</literal>
						</term>
						<listitem>
							<para>Standard tab. In the UML metamodel, <literal> Abstraction</literal> has the following standard tagged values defined.</para>
							<itemizedlist>
								<listitem>
									<para><literal>derived</literal> (from the superclass, <literal>ModelElement</literal>). Values <literal>true</literal>, meaning the abstraction is redundant&#8212;it can be formally derived from other elements, or <literal>false</literal> meaning it cannot.</para>
									<note>
										<para>Derived abstractions still have their value in analysis to introduce useful names or concepts, and in design to avoid re-computation.</para>
									</note>
								</listitem>
							</itemizedlist>
							<note>
								<para>The UML <literal>Element</literal> metaclass from which all other model elements are derived includes the tagged element <literal>documentation</literal> which is handled by the <emphasis>documentation tab</emphasis> under ArgoUML</para>
							</note>
						</listitem>
					</varlistentry>
				</variablelist>
			</section>
			<section xml:id="s2.ref.abstraction_property_toolbar">
				<title>Abstraction Property Toolbar</title>
				<variablelist>
					<varlistentry>
						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/navigate_up.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Go up</literal>
						</term>
						<listitem>
							<para>Navigate up through the package structure.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/property_delete.gif" format="GIF"
										 />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Delete</literal>
						</term>
						<listitem>
							<para>This deletes the abstraction from the model</para>
							<warning>
								<para>This is a deletion from the model <emphasis>not</emphasis> just the diagram. To delete an abstraction from the diagram, but keep it within the model, use the main menu <literal>Remove From Diagram</literal> (or press the Delete key).</para>
							</warning>
						</listitem>
					</varlistentry>
				</variablelist>
			</section>
			<section xml:id="s2.ref.abstraction_property_fields">
				<title>Property Fields For Abstraction</title>
				<variablelist>
					<varlistentry>
						<term>
							<literal>Name</literal>
						</term>
						<listitem>
							<para>Text box. The name of the abstraction. There are no constraints on the name of an abstraction, which is not shown on any diagram.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Stereotype</literal>
						</term>
						<listitem>
							<para>Drop down selector. Abstraction is provided by default with the UML standard stereotypes <literal> derive</literal>, <literal>realize</literal>, <literal> refine</literal> and <literal>trace</literal>.</para>
							<caution>
								<para>ArgoUML automatically selects the stereotype realize when an abstraction is created. The user is free to change the stereotype to use the abstraction to indicate for example a <literal>trace</literal> relationship. However ArgoUML will not alter the representation on the diagram accordingly.</para>
							</caution>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Navigate Stereotype</literal>
						</term>
						<listitem>
							<para><guiicon>
									<inlinemediaobject>
										<imageobject>
											<imagedata align="center"
												fileref="images/icons/navigate_stereotype.gif"
												format="GIF" />
										</imageobject>
									</inlinemediaobject>
								</guiicon> icon. If a stereotype has been selected, this will navigate to the stereotype property panel (see <xref
									xlink:href="s1.ref.stereotype" />).</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Namespace</literal>
						</term>
						<listitem>
							<para>Drop down selector. Records and allows changing the namespace for the abstraction. This is the package hierarchy.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Suppliers</literal>
						</term>
						<listitem>
							<para>Text area. Lists the model element that is the supplier end of this abstraction (for a realization this is the end providing the implementation).</para>
							<note>
								<para>Although this is a text area there is no mechanism for adding more than one supplier.</para>
							</note>
							<para>Button&nbsp;1 double click navigates to the selected entry.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>
							<literal>Clients</literal>
						</term>
						<listitem>
							<para>Text area. Lists the model element that is the client end of this abstraction (for a realization this is the end providing the specification).</para>
							<note>
								<para>Although this is a text area there is no mechanism for adding more than one client.</para>
							</note>
							<para>Button&nbsp;1 double click navigates to the selected entry.</para>
						</listitem>
					</varlistentry>
				</variablelist>
			</section>
		</section>
	</chapter>

	<chapter xml:id="ch.ref.entseq">

		<title>Sequence Diagram Model Element Reference</title>

		<section>

			<title>Introduction</title>

			<para>This chapter describes each model element that can be created 
        within a sequence diagram. Note that some sub-model elements of 
        model elements on the diagram may not actually themselves appear on 
        the diagram.</para>

			<para>There is a close relationship between this material and 
        the <literal>Properties</literal> tab of the details pane (see 
        <xref
					xlink:href="s1.ref.proptab"
				 />). That section covers 
        properties in general, in this chapter they are linked to 
        specific model elements.</para>

			<caution>

				<para>Sequence diagrams are not fully developed yet in 
          ArgoUML. Many aspects are not fully implemented, or may not 
          behave as expected.</para>

			</caution>

			<para><xref xlink:href="fig.ref.sequence_diagram"
				 /> shows a 
        sequence diagram with all possible model elements displayed.</para>

			<figure float="1" xml:id="fig.ref.sequence_diagram">

				<title>Possible model elements on a sequence diagram.</title>

				<screenshot><mediaobject><imageobject>
          <imagedata align="center" fileref="images/reference/sequence_diagram.gif" format="GIF" /></imageobject></mediaobject></screenshot>
			</figure>

			<section>

				<title>Limitations Concerning Sequence Diagrams in 
          ArgoUML</title>

				<para>The sequence diagram is still rather under-developed in 
          ArgoUML.</para>

				<para>The biggest difficulties are with the actions behind 
          the stimuli. These are purely textual in implementation, and 
          there is no way to link them back to their associated 
          operations or signals.</para>

			</section>

		</section>

		<section xml:id="s1.ref.object_sequence">

			<title>Object</title>

			<para>An object is an instance of a class. In the UML metamodel 
        <literal>Object</literal> is a sub-class of <literal>
        Instance</literal>. Within a sequence diagram objects may be 
        used to represent a specific instance of a class. Unlike 
        collaboration diagrams (see <xref
					xlink:href="ch.ref.entcollab"
				 />
        ), sequence diagrams cannot show generic behavior between 
        classifier roles.</para>

			<para>An object is represented on a sequence diagram in ArgoUML 
        as a plain box labeled with the object name (if any) and class 
        name, separated by a colon (:). As links with stimuli to and 
        from other objects are added, a time line grows down from the 
        object. This is thin where the object does not have control and 
        thick where it does.</para>

			<caution>

				<para>The current release of ArgoUML shows interactions 
          between objects, although the UML standard for sequence 
          diagrams is for interaction between instances of any 
          classifier).</para>

				<para>However the actual implementation in ArgoUML permits 
          any classifier to be used with the object, and so the diagram 
          can successfully represent instances of actors for example as 
          well as classes.</para>

			</caution>

			<section>

				<title>Object Details Tabs</title>

				<para>The details tabs that are active for objects are as 
          follows.</para>

				<variablelist>

					<varlistentry>

						<term>
							<literal>ToDoItem</literal>
						</term>

						<listitem>

							<para>Standard tab.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Properties</literal>
						</term>

						<listitem>

							<para>See 
                <xref
									xlink:href="s2.ref.object_property_toolbar"
									 /> and 
                <xref
									xlink:href="s2.ref.object_property_fields"
								 /> 
                below.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Documentation</literal>
						</term>

						<listitem>

							<para>Standard tab.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Presentation</literal>
						</term>

						<listitem>

							<para>Standard tab. The values for the bounds of the 
                object notionally define the bounding box of the object 
                and its time line. However if you change them it will 
                have no effect, and the original values will be reset 
                when you next revisit the tab.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Source</literal>
						</term>

						<listitem>

							<para>Standard tab, but with no contents.</para>

							<caution>

								<para>An object should not generate any code, so 
                  having this tab active is probably a mistake.</para>

							</caution>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Tagged Values</literal>
						</term>

						<listitem>

							<para>Standard tab. In the UML metamodel, <literal>
                Object</literal> has the following standard tagged 
                values defined.</para>

							<itemizedlist>

								<listitem>

									<para><literal>persistence</literal> (from the 
                    superclass, <literal>Instance</literal>. Showing 
                    the permanence of the state information associated 
                    with the object. Values <literal>
                    transitory</literal> (state is destroyed when the 
                    object is destroyed) and <literal>
                    persistent</literal> (state is preserved when the 
                    object is destroyed).</para>

								</listitem>

								<listitem>

									<para><literal>derived</literal> (from the 
                    superclass, <literal>ModelElement</literal>). 
                    Values <literal>true</literal>, meaning the object 
                    is redundant&#8212;it can be formally derived from other 
                    elements, or <literal>false</literal> meaning it 
                    cannot.</para>

									<note>

										<para>Derived objects still have their value in 
                      analysis and design to introduce useful names or 
                      concepts, and in design to avoid 
                      re-computation.</para>

									</note>

								</listitem>

							</itemizedlist>

							<note>

								<para>The UML <literal>Element</literal> metaclass 
                  from which all other model elements are derived includes 
                  the tagged element <literal>documentation</literal> 
                  which is handled by the <emphasis>documentation 
                  tab</emphasis> under ArgoUML</para>

							</note>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Checklist</literal>
						</term>

						<listitem>

							<para>Standard tab for a Classifier.</para>

						</listitem>

					</varlistentry>

				</variablelist>

			</section>

			<section xml:id="s2.ref.object_property_toolbar">

				<title>Object Property Toolbar</title>

				<variablelist>

					<varlistentry>

						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/navigate_up.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Go up</literal>
						</term>

						<listitem>

							<para>Navigate up through the package structure.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/stereotype.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>New Stereotype</literal>
						</term>

						<listitem>

							<indexterm>
								<primary>Add Stereotype</primary>
							</indexterm>
							<indexterm>
								<primary>New Stereotype</primary>
							</indexterm>
							<indexterm>
								<primary>Create 
                New</primary>
								<secondary>Stereotype</secondary>
							</indexterm>
							<para>This creates a new Stereotype (see 
                <xref
									xlink:href="s1.ref.stereotype"
								 />) for the selected 
                object, navigating immediately to the properties tab 
                for that stereotype.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/property_delete.gif" format="GIF"
										 />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Delete</literal>
						</term>

						<listitem>

							<para>This deletes the object from the model</para>

							<warning>

								<para>This is a deletion from the model 
                  <emphasis>not</emphasis> just the diagram. To delete 
                  an object from the diagram, but keep it within the 
                  model, use the main menu <literal>Remove From 
                  Diagram</literal> (or press the Delete key).</para>

							</warning>

						</listitem>

					</varlistentry>

				</variablelist>

			</section>

			<section xml:id="s2.ref.object_property_fields">

				<title>Property Fields For Object</title>

				<variablelist>

					<varlistentry>

						<term>
							<literal>Name</literal>
						</term>

						<listitem>

							<para>Text box. The name of the object. By convention 
                object names start with a lower case letter and use 
                bumpy caps to divide words within the name.</para>

							<note>

								<para>ArgoUML does not enforce this naming 
                  convention.</para>

							</note>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Stereotype</literal>
						</term>

						<listitem>

							<para>Drop down selector. Object has no stereotypes by 
                default in the UML standard.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Navigate Stereotype</literal>
						</term>

						<listitem>

							<para><guiicon>
									<inlinemediaobject>
										<imageobject>
											<imagedata align="center"
												fileref="images/icons/navigate_stereotype.gif"
												format="GIF" />
										</imageobject>
									</inlinemediaobject>
								</guiicon> 
                icon. If a stereotype has been selected, this will 
                navigate to the stereotype property panel (see 
                <xref
									xlink:href="s1.ref.stereotype_class" />).</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Namespace</literal>
						</term>

						<listitem>

							<para>Text box. Records the namespace for the object. 
                This is the package hierarchy.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Stimuli Sent</literal>
						</term>

						<listitem>

							<para>Text area. Lists the stimuli sent to this 
                object.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Stimuli Received</literal>
						</term>

						<listitem>

							<para>Text area. Lists the stimuli received by this 
                object.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Classifier</literal>
						</term>

						<listitem>

							<para>Drop down selector. The name of the classifier of 
                which this is an object.</para>

							<caution>

								<para>In the current release of ArgoUML the drop down 
                  selector will include <emphasis>all</emphasis> 
                  classifiers (i.e. interfaces, actors, use cases and 
                  datatypes as well), which is what is wanted on the 
                  diagram, although it should properly be called an 
                  instance, rather than an object. In practice only 
                  instances of classes and actors make much 
                  sense.</para>

							</caution>

							<note>

								<para>In the current release of ArgoUML the same 
                  graphical presentation is used, even if the object is 
                  actually representing an instance of an actor (when a 
                  stick-man would be more usual).</para>

							</note>

						</listitem>

					</varlistentry>

				</variablelist>

			</section>

		</section>

		<section xml:id="s1.ref.stimulus">

			<title>Stimulus</title>

			<para>A stimulus is a communication between two instances and 
        is generated by an action. On a sequence diagram a stimulus is 
        associated with a link&#8212;an instance of an association linking 
        two object instances. In the UML metamodel <literal>
        Stimulus</literal> is a sub-class of <literal>
        ModelElement</literal>.</para>

			<para>The link (see <xref xlink:href="s1.ref.link_sequence"
				 />) 
        associated with a stimulus is represented on a sequence diagram 
        in ArgoUML as an arrow between the time lines of the object 
        instances (or the object head in the case of stimulus create, 
        described below) labeled with the name of the action (if any), 
        and the action, separated by a colon (:). The type of line and 
        arrowhead depends on the type of action that generated the 
        stimulus:</para>

			<itemizedlist>

				<listitem>

					<para><literal>Stimulus Call</literal>. Generated by a call 
            action, itself the result of an operation of a class. Shown 
            as a solid line with a solid arrowhead to the time line of 
            the object instance receiving the stimulus.</para>

				</listitem>

				<listitem>

					<para><literal>Stimulus Create</literal>. Generated by a 
            create action for the class for which an instance is to be 
            created Shown as a solid line with a solid arrowhead to the 
            object head of the object instance being created.</para>

				</listitem>

				<listitem>

					<para><literal>Stimulus Destroy</literal>. Generated by a 
            destroy action of the originating object. Shown as a solid 
            line with an open arrowhead terminating in a diagonal cross 
            at the end of the time line of the receiving (destroyed) 
            object instance.</para>

				</listitem>

				<listitem>

					<para><literal>Stimulus Send</literal>. Generated by a send 
            action, the result of a signal raised by an operation of 
            the sending object instance and handled by the receiving 
            object instance. Shown as a solid line with half an open 
            arrowhead.</para>

				</listitem>

				<listitem>

					<para><literal>Stimulus Return</literal>. Generated by an 
            object instance that has received an earlier call stimulus 
            and is returning a result to the calling object instance. 
            Shown as a dotted line with an open arrowhead.</para>

				</listitem>

			</itemizedlist>

			<note>

				<para>ArgoUML does not allow you to create stimuli directly, 
          but instead provides tools to create stimuli of each of the 
          five types above.</para>

			</note>

			<caution>

				<para>In the current release of ArgoUML there is no way to 
          show a terminate action where an object instance destroys 
          itself. One way is to draw a destroy action that loops back 
          to the object itself, give it an action with no name and use 
          the style tab to set an invisible line, but this still leaves 
          the arrow head showing, which is unsightly. It is also 
          semantically incorrect anyway to use a destroy action to 
          represent a terminate action.</para>

			</caution>

			<section>

				<title>Stimulus Details Tabs</title>

				<para>The details tabs that are active for stimuli are as 
          follows.</para>

				<variablelist>

					<varlistentry>

						<term>
							<literal>ToDoItem</literal>
						</term>

						<listitem>

							<para>Standard tab.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Properties</literal>
						</term>

						<listitem>

							<para>See 
                <xref
									xlink:href="s2.ref.stimulus_property_toolbar"
									 /> and 
                <xref
									xlink:href="s2.ref.stimulus_property_fields"
								 /> 
                below.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Documentation</literal>
						</term>

						<listitem>

							<para>Standard tab.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Style</literal>
						</term>

						<listitem>

							<para>Standard tab. The values for the bounds of the 
                stimulus notionally define the bounding box of the 
                stimulus and its time line. However if you change them 
                it will have no effect, and the original values will be 
                reset when you next revisit the tab.</para>

							<para>Altering the <literal>Fill</literal> and <literal>
                Shadow</literal> entries has no effect. Rather 
                bizarrely you can set the <literal>Line</literal> entry 
                and it will draw a line around the signal, which is not 
                a standard UML representation.</para>

							<tip>

								<para>To change the color of the line, you should 
                  select the associated link (click on it a little way 
                  from the stimulus) and use its style tab (see 
                  <xref
										xlink:href="s1.ref.link_sequence" />).</para>

							</tip>

							<caution>

								<para>In the current release of ArgoUML changing the 
                  values of the <literal>Bounds</literal> field is 
                  possible, but will make only a temporary change to 
                  the position of the stimulus. Selecting any model element 
                  on the screen causes the stimulus to return to its 
                  original position and the original values to be 
                  restored.</para>

							</caution>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Source</literal>
						</term>

						<listitem>

							<para>Standard tab, but with no contents.</para>

							<caution>

								<para>A stimulus should not generate any code, so 
                  having this tab active is probably a mistake.</para>

							</caution>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Constraints</literal>
						</term>

						<listitem>

							<para>Standard tab. ArgoUML only supports constraints 
                on Classes and Features (Attributes, Operations, 
                Receptions, and Methods), so this tab is grayed 
                out.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Tagged Values</literal>
						</term>

						<listitem>

							<para>Standard tab. In the UML metamodel, <literal>
                Stimulus</literal> has the following standard tagged 
                values defined.</para>

							<itemizedlist>

								<listitem>

									<para><literal>derived</literal> (from the 
                    superclass, <literal>ModelElement</literal>). 
                    Values <literal>true</literal>, meaning the 
                    stimulus is redundant&#8212;it can be formally derived 
                    from other elements, or <literal>false</literal> 
                    meaning it cannot.</para>

									<note>

										<para>Derived stimuli still have their value in 
                      analysis and design to introduce useful names or 
                      concepts, and in design to avoid 
                      re-computation.</para>

									</note>

								</listitem>

							</itemizedlist>

							<note>

								<para>The UML <literal>Element</literal> metaclass 
                  from which all other model elements are derived includes 
                  the tagged element <literal>documentation</literal> 
                  which is handled by the <emphasis>documentation 
                  tab</emphasis> under ArgoUML</para>

							</note>

						</listitem>

					</varlistentry>

				</variablelist>

			</section>

			<section xml:id="s2.ref.stimulus_property_toolbar">

				<title>Stimulus Property Toolbar</title>

				<variablelist>

					<varlistentry>

						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/navigate_up.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Go up</literal>
						</term>

						<listitem>

							<para>Navigate up through the package structure.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/property_delete.gif" format="GIF"
										 />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Delete</literal>
						</term>

						<listitem>

							<para>This deletes the stimulus from the model</para>

							<warning>

								<para>This is a deletion from the model 
                  <emphasis>not</emphasis> just the diagram. To delete 
                  an stimulus from the diagram, but keep it within the 
                  model, use the main menu <literal>Remove From 
                  Diagram</literal> (or press the Delete key).</para>

							</warning>

						</listitem>

					</varlistentry>

				</variablelist>

			</section>

			<section xml:id="s2.ref.stimulus_property_fields">

				<title>Property Fields For Stimulus</title>

				<variablelist>

					<varlistentry>

						<term>
							<literal>Name</literal>
						</term>

						<listitem>

							<para>Text box. There is no convention for naming 
                stimuli, and it is quite normal to leave them unnamed. 
                The action is sufficient identification.</para>

							<tip>

								<para>It is sometimes useful to give simple names to 
                  stimuli, so they can be referred to in attached notes 
                  giving timing constraints.</para>

							</tip>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Action</literal>
						</term>

						<listitem>

							<para>Text box. This is used to identify the action 
                that generated the stimulus.</para>

							<caution>

								<para>The current release of ArgoUML only implements 
                  actions as textual descriptions.</para>

								<para>As a practical convention it is suggested that 
                  call actions are shown as the name of the operation 
                  generating the action with any arguments in 
                  parentheses and that send actions are shown as the 
                  name of the signal generating the action with any 
                  arguments in parentheses. Return actions should be 
                  shown as the expression for the value they return, or 
                  empty otherwise. Create and destroy actions should be 
                  left empty, since they are implied by their 
                  representation.</para>

							</caution>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Stereotype</literal>
						</term>

						<listitem>

							<para>Drop down selector. Stimulus has no stereotypes 
                by default in the UML standard, but ArgoUML provides 
                the stereotypes, <literal>machine</literal>, <literal>
                organization</literal> and <literal>
                person</literal>.</para>

							<caution>

								<para>ArgoUML also provides the stereotype <literal>
                  realize</literal> for stimuli. This appears to be an 
                  error, since this stereotype properly belongs to the 
                  <literal>Abstraction</literal> metaclass.</para>

							</caution>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Navigate Stereotype</literal>
						</term>

						<listitem>

							<para><guiicon>
									<inlinemediaobject>
										<imageobject>
											<imagedata align="center"
												fileref="images/icons/navigate_stereotype.gif"
												format="GIF" />
										</imageobject>
									</inlinemediaobject>
								</guiicon> 
                icon. If a stereotype has been selected, this will 
                navigate to the stereotype property panel (see 
                <xref
									xlink:href="s1.ref.stereotype_class" />).</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Sender</literal>
						</term>

						<listitem>

							<para>Text box. Identifies the instance which sent this 
                stimulus.</para>

							<para>Button&nbsp;1 click navigates to the sender instance, 
                button&nbsp;2 gives a pop up menu with one entry.</para>

							<itemizedlist>

								<listitem>

									<para><literal>Open</literal>. Navigate to the 
                    selected sender instance.</para>

								</listitem>

							</itemizedlist>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Receiver</literal>
						</term>

						<listitem>

							<para>Text box. Identifies the instance which receives 
                this stimulus.</para>

							<para>Button&nbsp;1 click navigates to the receiver 
                instance, button&nbsp;2 gives a pop up menu with one 
                entry.</para>

							<itemizedlist>

								<listitem>

									<para><literal>Open</literal>. Navigate to the 
                    selected receiver instance.</para>

								</listitem>

							</itemizedlist>

							<warning>

								<para>In the current release of ArgoUML this field is 
                  broken. It always shows the entry <literal>
                  none</literal> and the pop-up menu is grayed 
                  out.</para>

							</warning>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Namespace</literal>
						</term>

						<listitem>

							<para>Text box. Records the namespace for the stimulus. 
                This is the package hierarchy.</para>

							<para>Button&nbsp;1 click on the entry will navigate to the 
                package defining this namespace (or the model for the 
                top level namespace).</para>

						</listitem>

					</varlistentry>

				</variablelist>

			</section>

		</section>

		<section>

			<title>Stimulus Call</title>

			<para>This tool creates a stimulus associated with a call 
        action on the diagram, creating at the same time the associated 
        link between sender and receiving instances.</para>

			<para>All details tabs and properties are identical to to that 
        of stimulus in general (see <xref
					xlink:href="s1.ref.stimulus"
				 />). 
        Its graphical representation on the diagram is that of a 
        stimulus associated with a call action, i.e. a solid line with 
        a solid arrow head.</para>

			<note>

				<para>Because the current release of ArgoUML does not fully 
          implement actions, there is no enforcement of the 
          relationship to a call action.</para>

			</note>

		</section>

		<section>

			<title>Stimulus Create</title>

			<para>This tool creates a stimulus associated with a create 
        action on the diagram, creating at the same time the associated 
        link between sender and receiving instances.</para>

			<para>All details tabs and properties are identical to to that 
        of stimulus in general (see <xref
					xlink:href="s1.ref.stimulus"
				 />). 
        Its graphical representation on the diagram is that of a 
        stimulus associated with a create action, i.e. a solid line 
        with a solid arrow head terminating at the head of the created 
        instance.</para>

			<note>

				<para>Because the current release of ArgoUML does not fully 
          implement actions, there is no enforcement of the 
          relationship to a create action.</para>

			</note>

		</section>

		<section>

			<title>Stimulus Destroy</title>

			<para>This tool creates a stimulus associated with a destroy 
        action on the diagram, creating at the same time the associated 
        link between sender and receiving instances.</para>

			<para>All details tabs and properties are identical to to that 
        of stimulus in general (see <xref
					xlink:href="s1.ref.stimulus"
				 />). 
        Its graphical representation on the diagram is that of a 
        stimulus associated with a destroy action, i.e. a solid line 
        with an open arrow head terminating at a cross at the bottom of 
        the destroyed instance&#039;s time line.</para>

			<note>

				<para>Because the current release of ArgoUML does not fully 
          implement actions, there is no enforcement of the 
          relationship to a destroy action.</para>

			</note>

		</section>

		<section>

			<title>Stimulus Send</title>

			<para>This tool creates a stimulus associated with a send 
        action on the diagram, creating at the same time the associated 
        link between sender and receiving instances.</para>

			<para>All details tabs and properties are identical to to that 
        of stimulus in general (see <xref
					xlink:href="s1.ref.stimulus"
				 />). 
        Its graphical representation on the diagram is that of a 
        stimulus associated with a send action, i.e. a solid line with 
        half an open arrow head.</para>

			<note>

				<para>Because the current release of ArgoUML does not fully 
          implement actions, there is no enforcement of the 
          relationship to a send action.</para>

			</note>

		</section>

		<section>

			<title>Stimulus Return</title>

			<para>This tool creates a stimulus associated with a return 
        action on the diagram, creating at the same time the associated 
        link between sender and receiving instances.</para>

			<para>All details tabs and properties are identical to to that 
        of stimulus in general (see <xref
					xlink:href="s1.ref.stimulus"
				 />). 
        Its graphical representation on the diagram is that of a 
        stimulus associated with a return action, i.e. a dotted line 
        with an open arrow head.</para>

			<note>

				<para>Because the current release of ArgoUML does not fully 
          implement actions, there is no enforcement of the 
          relationship to a return action.</para>

			</note>

		</section>

		<section xml:id="s1.ref.link_sequence">

			<title>Link</title>

			<para>A link is an instance of an association. In the UML 
        metamodel <literal>Link</literal> is a sub-class of <literal>
        Instance</literal>. Within a sequence diagram links are created 
        indirectly when an associated stimulus is created.</para>

			<para>An link is represented on a sequence diagram in ArgoUML 
        as a line connecting the instances concerned. However on a 
        sequence diagram the representation is modified to reflect the 
        type of action associated with the stimulus carried on the link 
        (see <xref
					xlink:href="s1.ref.stimulus" />).</para>

			<section>

				<title>Link Details Tabs</title>

				<para>The details tabs that are active for links are as 
          follows.</para>

				<variablelist>

					<varlistentry>

						<term>
							<literal>ToDoItem</literal>
						</term>

						<listitem>

							<para>Standard tab.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Properties</literal>
						</term>

						<listitem>

							<para>See <xref xlink:href="s2.ref.link_property_toolbar"
									 />
                 and <xref
									xlink:href="s2.ref.link_property_fields"
								 /> 
                below.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Documentation</literal>
						</term>

						<listitem>

							<para>Standard tab.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Presentation</literal>
						</term>

						<listitem>

							<para>Standard tab.</para>
							<note>
								<para>
                    The values in the "bounds" field of the 
                    link
                    are not editable, since they are determined 
                    by the properties of the endpoints of the line.
                  </para>
							</note>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Source</literal>
						</term>

						<listitem>

							<para>Standard tab, but with no contents.</para>

							<caution>

								<para>A link should not generate any code, so having 
                  this tab active is probably a mistake.</para>

							</caution>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Tagged Values</literal>
						</term>

						<listitem>

							<para>Standard tab. In the UML metamodel, <literal>
                Link</literal> has the following standard tagged values 
                defined.</para>

							<itemizedlist>

								<listitem>

									<para><literal>persistence</literal> (from the 
                    superclass, <literal>Instance</literal>. Showing 
                    the permanence of the state information associated 
                    with the link. Values <literal>transitory</literal> 
                    (state is destroyed when the link is destroyed) and 
                    <literal>persistent</literal> (state is preserved 
                    when the link is destroyed).</para>

								</listitem>

								<listitem>

									<para><literal>derived</literal> (from the 
                    superclass, <literal>ModelElement</literal>). 
                    Values <literal>true</literal>, meaning the link is 
                    redundant&#8212;it can be formally derived from other 
                    elements, or <literal>false</literal> meaning it 
                    cannot.</para>

									<note>

										<para>Derived links still have their value in 
                      analysis and design to introduce useful names or 
                      concepts, and in design to avoid 
                      re-computation.</para>

									</note>

								</listitem>

							</itemizedlist>

							<note>

								<para>The UML <literal>Element</literal> metaclass 
                  from which all other model elements are derived includes 
                  the tagged element <literal>documentation</literal> 
                  which is handled by the <emphasis>documentation 
                  tab</emphasis> under ArgoUML</para>

							</note>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Checklist</literal>
						</term>

						<listitem>

							<para>Standard tab for a Classifier.</para>

						</listitem>

					</varlistentry>

				</variablelist>

			</section>

			<section xml:id="s2.ref.link_property_toolbar">

				<title>Link Property Toolbar</title>

				<variablelist>

					<varlistentry>

						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/navigate_up.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Go up</literal>
						</term>

						<listitem>

							<para>Navigate up through the package structure.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/stereotype.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>New Stereotype</literal>
						</term>

						<listitem>

							<indexterm>
								<primary>Add Stereotype</primary>
							</indexterm>
							<indexterm>
								<primary>New Stereotype</primary>
							</indexterm>
							<indexterm>
								<primary>Create 
                New</primary>
								<secondary>Stereotype</secondary>
							</indexterm>
							<para>This creates a new Stereotype (see 
                <xref
									xlink:href="s1.ref.stereotype"
								 />) for the selected 
                link, navigating immediately to the properties tab for 
                that stereotype.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/property_delete.gif" format="GIF"
										 />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Delete</literal>
						</term>

						<listitem>

							<para>This deletes the link from the model</para>

							<warning>

								<para>This is a deletion from the model 
                  <emphasis>not</emphasis> just the diagram. To delete 
                  an link from the diagram, but keep it within the 
                  model, use the main menu <literal>Remove From 
                  Diagram</literal> (or press the Delete key).</para>

							</warning>

						</listitem>

					</varlistentry>

				</variablelist>

			</section>

			<section xml:id="s2.ref.link_property_fields">

				<title>Property Fields For Link</title>

				<variablelist>

					<varlistentry>

						<term>
							<literal>Name</literal>
						</term>

						<listitem>

							<para>Text box. The name of the link. By convention 
                link names start with a lower case letter and use bumpy 
                caps to divide words within the name.</para>

							<note>

								<para>ArgoUML does not enforce this naming 
                  convention.</para>

							</note>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Stereotype</literal>
						</term>

						<listitem>

							<para>Drop down selector. Link has no stereotypes by 
                default in the UML standard.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Navigate Stereotype</literal>
						</term>

						<listitem>

							<para><guiicon>
									<inlinemediaobject>
										<imageobject>
											<imagedata align="center"
												fileref="images/icons/navigate_stereotype.gif"
												format="GIF" />
										</imageobject>
									</inlinemediaobject>
								</guiicon> 
                icon. If a stereotype has been selected, this will 
                navigate to the stereotype property panel (see 
                <xref
									xlink:href="s1.ref.stereotype_class" />).</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Namespace</literal>
						</term>

						<listitem>

							<para>Text box. Records the namespace for the link. 
                This is the package hierarchy.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Connections</literal>
						</term>

						<listitem>

							<para>List box. Lists the connections of the link, i.e. 
                the link-ends.</para>

							<para>Button&nbsp;1 double click on the entry will navigate 
                to the link-end.</para>

						</listitem>

					</varlistentry>

				</variablelist>

			</section>

		</section>

	</chapter>

	<chapter xml:id="ch.ref.entstate">

		<title>Statechart Diagram Model Element Reference</title>

		<section>

			<title>Introduction</title>

			<para>This chapter describes each model element that can be created 
        within a statechart diagram. Note that some sub-model elements of 
        model elements on the diagram may not actually themselves appear on 
        the diagram.</para>

			<para>There is a close relationship between this material and 
        the Properties Tab of the Details Pane (see 
        <xref
					xlink:href="s1.ref.proptab"
				 />). That section covers 
        Properties in general, in this chapter they are linked to 
        specific model elements.</para>

			<para><xref xlink:href="fig.ref.state_diagram" /> and 
        <xref
					xlink:href="fig.ref.state_diagram2"
				 /> show statechart 
        diagrams with most possible model elements displayed.</para>

			<figure float="1" xml:id="fig.ref.state_diagram">

				<title>Statechart diagram model elements 1.</title>

				<screenshot><mediaobject><imageobject>
          <imagedata align="center" fileref="images/reference/state_diagram_artifacts1.png" format="PNG" /></imageobject></mediaobject></screenshot>
			</figure>

			<figure float="1" xml:id="fig.ref.state_diagram2">

				<title>Statechart diagram model elements 2.</title>

				<screenshot><mediaobject><imageobject>
          <imagedata align="center" fileref="images/reference/build_house.png" format="PNG" /></imageobject></mediaobject></screenshot>
			</figure>

			<section xml:id="s2.ref.state_limitations">

				<title>Limitations Concerning Statechart Diagrams in 
          ArgoUML</title>

				<para>The statechart diagrams support the 7 action types 
          defined (CallAtion, CreateAction, DestroyAction,
          ReturnAction, SendAction, 
          TerminateAction and UninterpretedAction), 
          but there is no way to use the same action 
          more than once.
          Also, in a few cases, it is not possible to 
          set or select the related elements; 
          e.g.there is no way to select a signal for a SendAction. 
          </para>

				<para>Code generation from statechart diagrams is not 
          developed yet.</para>

			</section>

		</section>

		<section xml:id="s1.ref.state">

			<title>State</title>

			<para>A state models a situation during which some (usually 
        implicit) invariant condition holds for the parent class. This 
        invariant may be a static situation such as an object waiting 
        for some external event to occur, or some dynamic activity 
        <quote>in progress</quote>.</para>

			<para>A state is represented on a statechart diagram in ArgoUML 
        as a rectangle with rounded corners, with a horizontal line 
        separating the name at the top from the description of the 
        behavior below. The description of the behavior includes the 
        entry and exit actions and any internal transitions.</para>

			<section>

				<title>State Details Tabs</title>

				<para>The details tabs that are active for states are as 
          follows.</para>

				<variablelist>

					<varlistentry>

						<term>
							<literal>ToDoItem</literal>
						</term>

						<listitem>

							<para>Standard tab.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Properties</literal>
						</term>

						<listitem>

							<para>See 
                <xref
									xlink:href="s2.ref.state_property_toolbar"
									 /> and 
                <xref
									xlink:href="s2.ref.state_property_fields"
								 /> 
                below.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Documentation</literal>
						</term>

						<listitem>

							<para>Standard tab.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Presentation</literal>
						</term>

						<listitem>

							<para>Standard tab. The values for the bounds of the 
                state define the bounding box of the state.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Stereotype</literal>
						</term>

						<listitem>

							<para>Standard tab.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Tagged Values</literal>
						</term>

						<listitem>

							<para>Standard tab.</para>

						</listitem>

					</varlistentry>

				</variablelist>

			</section>

			<section xml:id="s2.ref.state_property_toolbar">

				<title>State Property Toolbar</title>

				<variablelist>

					<varlistentry>

						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/navigate_up.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Go up</literal>
						</term>

						<listitem>

							<para>Navigate up through the package structure.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/stereotype.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>New Stereotype</literal>
						</term>

						<listitem>

							<indexterm>
								<primary>Add Stereotype</primary>
							</indexterm>
							<indexterm>
								<primary>New Stereotype</primary>
							</indexterm>
							<indexterm>
								<primary>Create 
                New</primary>
								<secondary>Stereotype</secondary>
							</indexterm>
							<para>This creates a new Stereotype (see 
                <xref
									xlink:href="s1.ref.stereotype"
								 />) for the selected 
                state, navigating immediately to the properties tab for 
                that stereotype.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/property_delete.gif" format="GIF"
										 />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Delete</literal>
						</term>

						<listitem>

							<para>This deletes the state from the model</para>

							<note>

								<para>This is a deletion from the model, 
                  <emphasis>not</emphasis> just the diagram. 
                  You can not just remove 
                  a state from the diagram, and keep it within the 
                  model, as is possible in other diagrams.
                  </para>

							</note>

						</listitem>

					</varlistentry>

				</variablelist>

			</section>

			<section xml:id="s2.ref.state_property_fields">

				<title>Property Fields For State</title>

				<variablelist>

					<varlistentry>

						<term>
							<literal>Name</literal>
						</term>

						<listitem>

							<para>Text box. The name of the state. By convention 
                state names start with a lower case letter and use 
                bumpy caps to divide words within the name.</para>

							<note>

								<para>ArgoUML does not enforce this naming 
                  convention.</para>

							</note>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Container</literal>
						</term>

						<listitem>

							<para>Text box. Shows the container of the state. This 
                is the state hierarchy.</para>

							<para>Button&nbsp;1 double click on the entry will navigate 
                to the composite state that contains this state. All 
                states are at least contained by the otherwise hidden 
                top-level state (named <quote>top</quote>) that is the 
                root of the state containment hierarchy.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Entry-Action</literal>
						</term>

						<listitem>

							<para>Text box. Shows the name of the action (if any) 
                to be executed on entry to this state.</para>

							<note>

								<para>This field shows the name of the action, while 
                  on the diagram the expression of the action is 
                  shown.</para>

							</note>

							<para>Button&nbsp;1 double-click navigates to the selected 
                entry, button&nbsp;2 gives a pop up menu with two 
                entries:</para>

							<itemizedlist>

								<listitem>

									<para><literal>New</literal>. Add a new Entry 
                    action of a certain kind. This menu has the 
                    following submenus to select the kind of action: 
                    Call Action, Create Action, Destroy Action, Return 
                    Action, Send Action, Terminate Action, 
                    Uninterpreted Action.</para>

								</listitem>

								<listitem>

									<para><literal>Delete From Model</literal>. Delete 
                    the Entry-Action.</para>

								</listitem>

							</itemizedlist>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Exit-Action</literal>
						</term>

						<listitem>

							<para>Text box. Shows the action (if any) to be 
                executed on exit from this state.</para>

							<para>Button&nbsp;1 click navigates to the selected action, 
                button&nbsp;2 gives a pop up menu with two entries.</para>

							<itemizedlist>

								<listitem>

									<para><literal>New</literal>. Add a new Exit action 
                    of a certain kind. This menu has the following 
                    submenus to select the kind of action: Call Action, 
                    Create Action, Destroy Action, Return Action, Send 
                    Action, Terminate Action, Uninterpreted 
                    Action.</para>

								</listitem>

								<listitem>

									<para><literal>Delete From Model</literal>. Delete 
                    the Exit-Action.</para>

								</listitem>

							</itemizedlist>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Do-Activity</literal>
						</term>

						<listitem>

							<para>Text box. Shows the action (if any) to be 
                executed while being in this state.</para>

							<para>Button&nbsp;1 click navigates to the selected action, 
                button&nbsp;2 gives a pop up menu with two entries.</para>

							<itemizedlist>

								<listitem>

									<para><literal>New</literal>. Add a new Do-Activity 
                    (action) of a certain kind. This menu has the 
                    following submenus to select the kind of action: 
                    Call Action, Create Action, Destroy Action, Return 
                    Action, Send Action, Terminate Action, 
                    Uninterpreted Action.</para>

								</listitem>

								<listitem>

									<para><literal>Delete From Model</literal>. Delete 
                    the Do-Activity.</para>

								</listitem>

							</itemizedlist>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Deferrable Events</literal>
						</term>

						<listitem>

							<para>Text box. Shows a list of events 
                that are candidates to be retained 
                by the state machine 
                if they trigger no transitions out of the
                state (not consumed).
                </para>

							<para>Button&nbsp;1 click navigates to the selected event, 
                button&nbsp;2 on an event 
                gives a pop up menu with the following entries.
                </para>

							<itemizedlist>

								<listitem>

									<para><literal>Select</literal>. Allows 
                    to add already existing events 
                    to the list of deferred ones.
                    </para>

								</listitem>

								<listitem>

									<para><literal>New</literal>. Add a new event 
                    of a certain kind. This menu has the 
                    following submenus to select the kind of event: 
                    Call Event, Change Event, Signal Event, Time Event.
                    </para>

								</listitem>

								<listitem>

									<para><literal>Delete From Model</literal>. Delete 
                    the event.</para>

								</listitem>

							</itemizedlist>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Incoming</literal>
						</term>

						<listitem>

							<para>Text area. Lists all the transitions that enter 
                this state.</para>

							<para>Button&nbsp;1 double click navigates to the selected 
                entry.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Outgoing</literal>
						</term>

						<listitem>

							<para>Text area. Lists all the transitions that leave 
                this state.</para>

							<para>Button&nbsp;1 double click navigates to the selected 
                action.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Internal Transitions</literal>
						</term>

						<listitem>

							<para>Text area. Lists all the internal transitions of 
                the state. Such transitions neither exit nor enter the 
                state, so they do not cause a state change. Which means 
                that the Entry and Exit actions are not invoked.</para>

							<note>

								<para>This field shows the name of the transition, 
                  while on the diagram the name of the trigger is 
                  shown, separated with a <literal>/</literal> from
                  the effect script.</para>

							</note>

							<para>Button&nbsp;1 double-click navigates to the selected 
                transition, button&nbsp;2 gives a pop up menu with one 
                entry.</para>

							<itemizedlist>

								<listitem>

									<para><literal>New</literal>. Add a new internal 
                    transition.</para>

								</listitem>

							</itemizedlist>

						</listitem>

					</varlistentry>

				</variablelist>

			</section>

		</section>

		<section xml:id="s1.ref.action_state">

			<title>Action</title>

			<para>An action specifies an executable statement and is an 
        abstraction of a computational procedure that can change the 
        state of the model. In the UML metamodel it is a child of 
        <literal>ModelElement</literal>. Since in the metamodel an 
        ActionSequence is itself an Action that is an aggregation of 
        other actions (i.e. the &quot;composite&quot; pattern), an 
        ActionSequence may be used anywhere an action may be.</para>

			<para>There are a number of different types of action that are 
        children of Action within the UML metamodel.</para>

			<itemizedlist>

				<listitem>

					<para><literal>CreateAction</literal>. Associated with a 
            classifier, this action creates an instance of that 
            classifier.</para>

				</listitem>

				<listitem>

					<para><literal>CallAction</literal>. Associated with an 
            operation, this action calls the given 
            operation.</para>

				</listitem>

				<listitem>

					<para><literal>ReturnAction</literal>. An action used to 
            return a result to an earlier caller.</para>

				</listitem>

				<listitem>

					<para><literal>SendAction</literal>. Associated with a 
            signal, this action causes the signal to be raised.</para>

				</listitem>

				<listitem>

					<para><literal>TerminateAction</literal>. Causes the 
            invoking object to self-destruct.</para>

				</listitem>

				<listitem>

					<para><literal>UninterpretedAction</literal>. An action 
            used to specify language-specific actions that do not 
            classify under the other types of actions.</para>

				</listitem>

				<listitem>

					<para><literal>DestroyAction</literal>. Destroys the 
            specified target object.</para>

				</listitem>

			</itemizedlist>

			<para>An action is represented on the diagram by the text of 
        its expression.</para>

			<caution>
				<para>The V0.20 release of ArgoUML only partially 
                  implements actions. As a practical convention it is 
                  suggested that call actions are shown as the name of 
                  the operation generating the action with any 
                  arguments in parentheses and that send actions are 
                  shown as the name of the signal generating the action 
                  with any arguments in parentheses. Return actions 
                  should be shown as the expression for the value they 
                  return, or empty otherwise. Create and destroy 
                  actions should shown as <literal>
                  create(&lt;target&gt;)</literal> and <literal>
                  destroy(&lt;target&gt;)</literal>. Terminate action 
                  should be shown as <literal>
                  terminate</literal>.
          </para>
			</caution>
			<section>

				<title>Action Details Tabs</title>

				<para>The details tabs that are active for actions are as 
          follows.</para>

				<variablelist>

					<varlistentry>

						<term>
							<literal>ToDoItem</literal>
						</term>

						<listitem>

							<para>Standard tab.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Properties</literal>
						</term>

						<listitem>

							<para>See 
                <xref
									xlink:href="s2.ref.action_property_toolbar"
									 /> and 
                <xref
									xlink:href="s2.ref.action_property_fields"
								 /> 
                below.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Documentation</literal>
						</term>

						<listitem>

							<para>Standard tab.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Stereotype</literal>
						</term>

						<listitem>

							<para>Standard tab. 
                In the UML metamodel, <literal>
                Action</literal> has no standard 
                stereotypes defined.
                </para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Tagged Values</literal>
						</term>

						<listitem>

							<para>Standard tab. In the UML metamodel, <literal>
                Action</literal> has no standard tagged 
                value defined.</para>

						</listitem>

					</varlistentry>

				</variablelist>

			</section>

			<section xml:id="s2.ref.action_property_toolbar">

				<title>Action Property Toolbar</title>

				<variablelist>

					<varlistentry>

						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/navigate_up.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Go up</literal>
						</term>

						<listitem>

							<para>Navigate up through the hierarchical 
                structure.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/stereotype.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>New Stereotype</literal>
						</term>

						<listitem>

							<indexterm>
								<primary>Add Stereotype</primary>
							</indexterm>
							<indexterm>
								<primary>New Stereotype</primary>
							</indexterm>
							<indexterm>
								<primary>Create 
                New</primary>
								<secondary>Stereotype</secondary>
							</indexterm>
							<para>This creates a new Stereotype (see 
                <xref
									xlink:href="s1.ref.stereotype"
								 />) for the selected 
                action, navigating immediately to the properties tab 
                for that stereotype.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/property_delete.gif" format="GIF"
										 />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Delete</literal>
						</term>

						<listitem>

							<para>This deletes the Action from the model</para>

						</listitem>

					</varlistentry>

				</variablelist>

			</section>

			<section xml:id="s2.ref.action_property_fields">

				<title>Property Fields For Action</title>

				<variablelist>

					<varlistentry>

						<term>
							<literal>Name</literal>
						</term>

						<listitem>

							<para>Text box. The name of the action. By convention 
                action names start with a lower case letter and use 
                bumpy caps to divide words within the name.</para>

							<note>

								<para>ArgoUML does not enforce this naming 
                  convention.</para>

							</note>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Asynchronous</literal>
						</term>

						<listitem>
							<para>Check box. 
                Indicates if a dispatched Stimulus is asynchronous or not.
                </para>
						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Script</literal>
						</term>

						<listitem>
							<para>Double text box with the expression that defines the 
                action.
                This field consists of two parts, 
                the first one contains the body (script) of the expression, 
                and the second one contains the particular programming language 
                used to write the expression.
                </para>
						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Recurrence</literal>
						</term>

						<listitem>

							<para>Double Text box. 
                An expression stating how many times the Action should be performed.
                The field consists of two parts: the first one for the expression, 
                the second one for the language it is written in.
                </para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Arguments</literal>
						</term>

						<listitem>

							<para>Text box. 
                This is an ordered list with the arguments of the action.
                </para>

							<para>Button&nbsp;1 double-click on any of the arguments 
                navigates to that argument, button&nbsp;2 click brings up a 
                pop up menu with two entries.</para>

							<itemizedlist>

								<listitem>
									<para><literal>New</literal>. Create a 
                    new argument and navigate to it.</para>
								</listitem>

								<listitem>
									<para><literal>Remove</literal>. Deletes the 
                    argument from the model.</para>
								</listitem>

							</itemizedlist>
						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Instantiation (only for CreateAction)</literal>
						</term>

						<listitem>

							<para>Text box. 
                This shows the classifier that gets instantiated by the create-action.
                </para>

							<para>Button&nbsp;1 double-click on the classifier 
                navigates to that argument, button&nbsp;2 click brings up a 
                pop up menu with one entry.</para>

							<itemizedlist>

								<listitem>
									<para><literal>Add…</literal>. 
                    This brings up a dialog box that allows 
                    selecting the one classifier that gets created.</para>
								</listitem>

							</itemizedlist>
						</listitem>

					</varlistentry>

				</variablelist>



			</section>

		</section>

		<section xml:id="s1.ref.composite_state">

			<title>Composite State</title>

			<para>A composite state is a state that contains other states 
        (known as sub-states), allowing hierarchical state machines to 
        be constructed.</para>

			<para>A composite state is represented on a statechart diagram 
        in ArgoUML as a large rectangle with rounded corners, with a 
        horizontal line separating the name at the top from the 
        description of the behavior and the model of the sub-state 
        machine below. The description of the behavior includes the 
        entry, exit and do actions and any internal transitions.</para>

			<para>Sub-states are placed within a composite machine by 
        placing them entirely within the composite state. This can be 
        done at creation time, i.e. when creating the state for the 
        first time in the editing pane. Alternatively, an existing 
        state can be dragged onto a composite state.</para>

			<para>The description of a composite state is almost identical 
        to that of a state (see <xref
					xlink:href="s1.ref.state"
				 /> and so 
        is not duplicated here. The only differences is one additional 
        tool, one missing field, 
        and one additional field, which are described as 
        follows.</para>

			<variablelist>

				<varlistentry>

					<term>
						<guiicon>
							<inlinemediaobject>
								<imageobject>
									<imagedata align="center"
										fileref="images/icons/concurrent_region.gif" format="GIF" />
								</imageobject>
							</inlinemediaobject>
						</guiicon>
						<literal>New Concurrent Region</literal>
					</term>

					<listitem>

						<para>Adds a new concurrent region to the selected 
              composite state.</para>

					</listitem>

				</varlistentry>

				<varlistentry>

					<term>
						<literal>Deferrable Events</literal>
					</term>

					<listitem>

						<para>This field is missing from V0.20 of ArgoUML.</para>

					</listitem>

				</varlistentry>

				<varlistentry>

					<term>
						<literal>Subvertices</literal>
					</term>

					<listitem>

						<para>Text area. Lists all the sub-states contained 
              within this composite state.</para>

						<para>Button&nbsp;1 double-click navigates to the selected 
              entry, button&nbsp;2 gives a pop up menu with two 
              entries.</para>

						<itemizedlist>

							<listitem>

								<para><literal>New</literal>. A submenu pops up, with 
                  a selection of 7 kinds of states, which can be added 
                  to the model. The 7 kinds of states supported are: 
                  Pseudo State, Synch State, Stub State, Composite 
                  State, Simple State, Final State, Submachine 
                  State.</para>

								<warning>

									<para>Using this way of adding states to the model 
                    is not a good idea, since you will have to add the 
                    state to the diagram later. This can be done by 
                    selecting it in the explorer, and activating the 
                    pop-up menu, and selecting <quote>Add to 
                    Diagram</quote>. It is advisable to use the toolbar 
                    of the diagram instead.</para>

								</warning>

							</listitem>

							<listitem>

								<para><literal>Delete From Model</literal> Delete the 
                  selected state from the model.</para>

							</listitem>

						</itemizedlist>

					</listitem>

				</varlistentry>

			</variablelist>

		</section>

		<section xml:id="s1.ref.concurrent_region">

			<title>Concurrent Region</title>

			<para>A Concurrent Region is an <quote>orthogonal 
        conjunctive</quote> component of a composite state, allowing 
        concurrency to be constructed.</para>

			<para>A concurrent region is represented on the diagram by a 
        tile of a composite state, separated from other regions by a 
        dashed line.</para>

			<para>ArgoUML currently only supports a horizontal division of 
        a concurrent composite state in regions.</para>

			<para>The description of the details panels of a concurrent 
        region is identical to that of a composite state (see 
        <xref
					xlink:href="s1.ref.composite_state" /> and so is not 
        duplicated here.</para>

		</section>

		<section xml:id="s1.ref.submachine_state">

			<title>Submachine State</title>

			<para>A submachine state is a syntactical convenience that 
        facilitates reuse and modularity. It is a shorthand that 
        implies a macro-like expansion by another state machine and is 
        semantically equivalent to a composite state. The state machine 
        that is inserted is called the referenced state machine while 
        the state machine that contains the submachine state is called 
        the containing state machine. The same state machine may be 
        referenced more than once in the context of a single containing 
        state machine. In effect, a submachine state represents a 
        <emphasis>call</emphasis> to a state machine 
        <emphasis>subroutine</emphasis> with one or more entry 
        and exit points. The entry and exit points are specified by 
        stub states. SubmachineState is a child of State.</para>

			<para>The submachine state is depicted as a normal state with 
        the additional <emphasis>include</emphasis>
         declaration above (and separated by a 
        line from) its internal transitions compartment. The expression 
        following the <literal>include</literal> reserved word is the 
        name of the invoked submachine.</para>

			<para>ArgoUML currently only supports a horizontal division of 
        a concurrent composite state in regions.</para>

			<para>The description of the details panels of a concurrent 
        region is almost identical to that of a composite state (see 
        <xref
					xlink:href="s1.ref.composite_state"
				 /> and so is not 
        duplicated here. The only difference is one additional 
        field:</para>

			<variablelist>

				<varlistentry>

					<term>
						<literal>Submachine</literal>
					</term>

					<listitem>

						<para>Drop-down selector. Allows selecting the submachine 
              included within this composite state.</para>

					</listitem>

				</varlistentry>

			</variablelist>

		</section>

		<section xml:id="s1.ref.stub_state">

			<title>Stub State</title>

			<para>A stub state only appears on a submachine state.</para>

			<para>A submachine state represents the invocation of a state 
        machine defined elsewhere. In the general case, an invoked 
        state machine can be entered at any of its substates or through 
        its default (initial) pseudostate. Similarly, it can be exited 
        from any substate or as a result of the invoked state machine 
        reaching its final state. The non-default entry and exits are 
        specified through <emphasis>stub states</emphasis>. In the UML 
        metamodel, StubState is a child of State.</para>

			<para>Every Stub State has a label on the diagram, which 
        corresponds to the pathname represented by the <quote>Reference 
        State</quote> attribute of the stub state.</para>

			<para>The description of the details panels of a stub state is 
        almost identical to that of a pseudo state (see 
        <xref
					xlink:href="s1.ref.pseudostate"
				 /> and so is not duplicated 
        here. The only difference is one additional field:</para>

			<variablelist>

				<varlistentry>

					<term>
						<literal>Reference State</literal>
					</term>

					<listitem>

						<para>Drop-down selector. Allows entering the path name 
              of the reference state.</para>

					</listitem>

				</varlistentry>

			</variablelist>

		</section>

		<section xml:id="s1.ref.transition_state">

			<title>Transition</title>

			<para>A transition is a directed relation between a source 
        state (any kind, e.g. composite state) and a destination state 
        (any kind, e.g. composite state). Within the UML metamodel, 
        <literal>Transition</literal> is a sub-class of <literal>
        ModelElement</literal>.</para>

			<para>A transition is represented on a statechart diagram in 
        ArgoUML as a line with arrow connecting the source to the 
        destination state. Next to this line is a string containing the 
        following three parts: The trigger event (e.g. a Call Event), 
        which may have parameters between brackets <literal>
        ()</literal>. Next follows (if any) the guard in square 
        brackets (<literal>[]</literal>). Finally, if there is an 
        effect (e.g. Call Action) defined, a slash (
        <literal>/</literal>) followed by the expression of the 
        action.</para>

			<section>

				<title>Transition Details Tabs</title>

				<para>The details tabs that are active for transitions are as 
          follows.</para>

				<variablelist>

					<varlistentry>

						<term>
							<literal>ToDoItem</literal>
						</term>

						<listitem>

							<para>Standard tab.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Properties</literal>
						</term>

						<listitem>

							<para>See 
                <xref
									xlink:href="s2.ref.transition_property_toolbar"
									 /> 
                and <xref
									xlink:href="s2.ref.transition_property_fields"
								 /> 
                below.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Documentation</literal>
						</term>

						<listitem>

							<para>Standard tab.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Presentation</literal>
						</term>

						<listitem>

							<para>Standard tab. </para>
							<note>
								<para>
                    The values in the "bounds" field of the 
                    transition
                    are not editable, since they are determined 
                    by the properties of the endpoints of the line.
                  </para>
							</note>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Stereotype</literal>
						</term>

						<listitem>

							<para>Standard tab.  In the UML metamodel, <literal>
                Transition</literal> has no stereotypes defined by default.
                </para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Tagged Values</literal>
						</term>

						<listitem>

							<para>Standard tab. In the UML metamodel, <literal>
                Transition</literal> has no standard tagged 
                values defined.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Checklist</literal>
						</term>

						<listitem>

							<para>Standard tab for a transition.</para>

						</listitem>

					</varlistentry>

				</variablelist>

			</section>

			<section xml:id="s2.ref.transition_property_toolbar">

				<title>Transition Property Toolbar</title>

				<variablelist>

					<varlistentry>

						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/navigate_up.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Go up</literal>
						</term>

						<listitem>

							<para>Navigate up in the hierarchy to the parent state 
                machine.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/stereotype.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>New Stereotype</literal>
						</term>

						<listitem>

							<indexterm>
								<primary>Add Stereotype</primary>
							</indexterm>
							<indexterm>
								<primary>New Stereotype</primary>
							</indexterm>
							<indexterm>
								<primary>Create 
                New</primary>
								<secondary>Stereotype</secondary>
							</indexterm>
							<para>This creates a new Stereotype (see 
                <xref
									xlink:href="s1.ref.stereotype"
								 />) for the selected 
                transition, navigating immediately to the properties 
                tab for that stereotype.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/property_delete.gif" format="GIF"
										 />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Delete</literal>
						</term>

						<listitem>

							<para>This deletes the transition from the model.</para>

							<warning>

								<para>This is a deletion from the model 
                  <emphasis>not</emphasis> just the diagram. To delete 
                  a transition from the diagram, but keep it within the 
                  model, use the main menu <literal>Remove From 
                  Diagram</literal> (or press the Delete key).</para>

							</warning>

						</listitem>

					</varlistentry>

				</variablelist>

			</section>

			<section xml:id="s2.ref.transition_property_fields">

				<title>Property Fields For Transition</title>

				<variablelist>

					<varlistentry>

						<term>
							<literal>Name</literal>
						</term>

						<listitem>

							<para>Text box. The name of the transition. By 
                convention transition names start with a lower case 
                letter and use bumpy caps to divide words within the 
                name.</para>

							<note>

								<para>ArgoUML does not enforce this naming 
                  convention.</para>

							</note>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>StateMachine</literal>
						</term>

						<listitem>

							<para>Text box. Shows the name of the parent 
                StateMachine for the transition.</para>

							<para>Button&nbsp;1 double-click navigates to the 
                StateMachine shown.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>State</literal>
						</term>

						<listitem>

							<para>Text box. Shows the name of the parent State in 
                case of an internal transition.</para>

							<para>Button&nbsp;1 double-click navigates to the State 
                shown.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Source</literal>
						</term>

						<listitem>

							<para>Text box. Shows the source state for the 
                transition.</para>

							<para>Button&nbsp;1 double-click navigates to the selected 
                entry.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Target</literal>
						</term>

						<listitem>

							<para>Text box. Shows the target state for the 
                transition.</para>

							<para>Button&nbsp;1 double-click navigates to the selected 
                entry.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Trigger</literal>
						</term>

						<listitem>

							<para>Text box. Shows the trigger event (if any) which 
                invokes this transition.</para>

							<note>

								<para>UML does not require there to be a trigger, 
                  e.g. when a guard is defined. In this case, 
                  the transition is taken 
                  immediately if the guard is true.</para>

							</note>

							<para>Button&nbsp;1 double-click navigates to the selected 
                entry, button&nbsp;2 gives a pop up menu with three 
                entries.</para>

							<itemizedlist>

								<listitem>

									<para><literal>Select - Add…</literal>. 
                    This Add an existing trigger 
                    event. A sub-menu opens with 4 choices: Call Event, 
                    Change Event, Signal Event, Time Event.</para>

								</listitem>

								<listitem>

									<para><literal>New</literal>. Add a new trigger 
                    event. A sub-menu opens with 4 choices: Call Event, 
                    Change Event, Signal Event, Time Event.</para>

								</listitem>

								<listitem>

									<para><literal>Delete From Model</literal>. Delete 
                    the trigger event from the model. This feature is 
                    always downlighted in the current version of 
                    ArgoUML.</para>

								</listitem>

							</itemizedlist>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Guard</literal>
						</term>

						<listitem>

							<para>Text box. Shows the name of a guard (if any). The 
                expression of a guard must be true before this 
                transition can be taken.</para>

							<para>Button&nbsp;1 double-click navigates to the selected 
                entry, button&nbsp;2 gives a pop up menu with one 
                entry.</para>

							<itemizedlist>

								<listitem>

									<para><literal>New</literal>. Add a new 
                    guard.</para>

								</listitem>

							</itemizedlist>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Effect</literal>
						</term>

						<listitem>

							<para>Text box. Shows the action (if any) to be invoked 
                as this transition is taken.</para>

							<para>Button&nbsp;1 double-click navigates to the selected 
                action, button&nbsp;2 gives a pop up menu with two 
                entries.</para>

							<itemizedlist>

								<listitem>

									<para><literal>New</literal>. Add a new Effect 
                    (action) of a certain kind. This menu has the 
                    following submenus to select the kind of action: 
                    Call Action, Create Action, Destroy Action, Return 
                    Action, Send Action, Terminate Action, 
                    Uninterpreted Action.</para>

								</listitem>

								<listitem>

									<para><literal>Delete From Model</literal>. Delete 
                    the selected action from the model. 
                    </para>

								</listitem>

							</itemizedlist>

						</listitem>

					</varlistentry>

				</variablelist>

			</section>

		</section>

		<section xml:id="s1.ref.call_event_state">

			<title>Event</title>

			<para>An event is an observable occurrence. In the UML 
        metamodel it is a child of <literal>
        ModelElement</literal>.</para>

			<para>There are a number of different types of events that are 
        children of event within the UML metamodel.</para>

			<itemizedlist>

				<listitem>

					<para><literal>CallEvent</literal>. Associated with an 
            operation of a class, this event is caused by a call to the 
            given operation. The expected effect is that the steps of 
            the operation will be executed.</para>

				</listitem>

				<listitem>

					<para><literal>SignalEvent</literal>. Associated with a 
            signal, this event is caused by the signal being 
            raised.</para>

				</listitem>

				<listitem>

					<para><literal>TimeEvent</literal>. An event cause by 
            expiration of a timing deadline.</para>

				</listitem>

				<listitem>

					<para><literal>ChangeEvent</literal>. An event caused by a 
            particular expression (of attributes and associations) 
            becoming true.</para>

				</listitem>

			</itemizedlist>

			<para>An event is represented by its name.</para>

			<section>

				<title>Event Details Tabs</title>

				<para>The details tabs that are active for events are as 
          follows.</para>

				<variablelist>

					<varlistentry>

						<term>
							<literal>ToDoItem</literal>
						</term>

						<listitem>

							<para>Standard tab.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Properties</literal>
						</term>

						<listitem>

							<para>See 
                <xref
									xlink:href="s2.ref.call_event_property_toolbar"
									 /> 
                and <xref
									xlink:href="s2.ref.call_event_property_fields"
								 /> 
                below.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Documentation</literal>
						</term>

						<listitem>

							<para>Standard tab.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Stereotype</literal>
						</term>

						<listitem>

							<para>Standard tab.
                In the UML metamodel, an <literal>
                Event</literal> has the following standard 
                stereotypes defined.
                </para>
							<itemizedlist>

								<listitem>
									<para><literal>create</literal> (for a 
                    <literal>CallEvent</literal> only). 
                    Create is a stereotyped call event denoting 
                    that the instance receiving that event 
                    has just been created. 
                    For state machines, 
                    it triggers the initial transition 
                    at the topmost level of the state machine 
                    (and is the only kind of trigger 
                    that may be applied to an initial transition).
                    </para>
								</listitem>

								<listitem>
									<para><literal>destroy</literal> (for a 
                    <literal>CallEvent</literal> only). 
                    Destroy is a stereotyped call event denoting 
                    that the instance receiving the event 
                    is being destroyed.
                    </para>
								</listitem>

							</itemizedlist>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Tagged Values</literal>
						</term>

						<listitem>

							<para>Standard tab. In the UML metamodel, an <literal>
                Event</literal> has no standard tagged 
                values defined.</para>

						</listitem>

					</varlistentry>

				</variablelist>

			</section>

			<section xml:id="s2.ref.call_event_property_toolbar">

				<title>Event Property Toolbar</title>

				<variablelist>

					<varlistentry>

						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/navigate_up.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Go up</literal>
						</term>

						<listitem>

							<para>Navigate up through the composition structure.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/stereotype.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>New Stereotype</literal>
						</term>

						<listitem>

							<indexterm>
								<primary>Add Stereotype</primary>
							</indexterm>
							<indexterm>
								<primary>New Stereotype</primary>
							</indexterm>
							<indexterm>
								<primary>Create 
                New</primary>
								<secondary>Stereotype</secondary>
							</indexterm>
							<para>This creates a new Stereotype (see 
                <xref
									xlink:href="s1.ref.stereotype"
								 />) for the selected 
                event, navigating immediately to the properties tab for 
                that stereotype.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/parameter.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>New parameter</literal>
						</term>

						<listitem>

							<para>This creates a new parameter for the event 
                operation as the current parameter, navigating 
                immediately to the properties tab for that parameter 
                (see <xref
									xlink:href="s1.ref.parameter" />).</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/property_delete.gif" format="GIF"
										 />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Delete</literal>
						</term>

						<listitem>

							<para>This deletes the event from the model.</para>

						</listitem>

					</varlistentry>

				</variablelist>

			</section>

			<section xml:id="s2.ref.call_event_property_fields">

				<title>Property Fields For Event</title>

				<variablelist>

					<varlistentry>

						<term>
							<literal>Name</literal>
						</term>

						<listitem>

							<para>Text box. The name of the event. By convention 
                event names start with a lower case letter and use 
                bumpy caps to divide words within the name in the same 
                way as operations.</para>

							<note>

								<para>ArgoUML does not enforce this naming 
                  convention.</para>

							</note>

							<tip>

								<para>For call events it makes sense to use the name 
                  of the associated operation. For signal events it 
                  make sense to use the name of the signal, prefixed by 
                  <literal>[sig]</literal>. For time events use the 
                  time expression, prefixed by <literal>
                  [time]</literal> and for change events the change 
                  expression, prefixed by <literal>
                  [change]</literal>.</para>

							</tip>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Namespace</literal>
						</term>

						<listitem>

							<para>Text field. Shows the namespace for the event. 
                This is the composition hierarchy.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Parameters</literal>
						</term>

						<listitem>

							<para>Text area, with entries for all the actual 
                parameter values of the event (see 
                <xref
									xlink:href="s1.ref.parameter" />).</para>

							<para>Button&nbsp;1 double-click on any of the parameters 
                navigates to that parameter, button&nbsp;2 click brings up a 
                pop up menu with one entry.</para>

							<itemizedlist>

								<listitem>

									<para><literal>New Parameter</literal>. Create a 
                    new parameter and navigate to it.</para>

								</listitem>

							</itemizedlist>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Transition</literal>
						</term>

						<listitem>

							<para>This shows the transition caused by the 
                event.</para>

							<para>button&nbsp;1 double-click on the transition navigates 
                to that transition.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Operations</literal>
						</term>

						<listitem>

							<para>Drop-down selector. Only present for a Call 
                Event. This allows specifying the operation that causes 
                the event when called.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Signal</literal>
						</term>

						<listitem>

							<para>Text field. Only present for a Signal 
                Event. This allows specifying the signal that causes 
                the event when called.</para>

							<para>Button&nbsp;1 double-click navigates to the selected 
                signal, button&nbsp;2 gives a pop up menu with two 
                entries.</para>

							<itemizedlist>

								<listitem>

									<para><literal>Add…</literal>. This 
                    opens a dialog box that allows selecting 
                    an already existing signal.</para>

								</listitem>

								<listitem>

									<para><literal>New Signal</literal>. Creates 
                    a new Signal, and navigates to it. 
                    </para>

								</listitem>

							</itemizedlist>


						</listitem>

					</varlistentry>
					<varlistentry>

						<term>
							<literal>When</literal>
						</term>

						<listitem>

							<para>Double text field. Only present for a Time 
                Event. This allows expressing the time that 
                the event is called.</para>

							<para>The first of the two fields is for the body of the expression, 
                and the second one for the language in which it is written.</para>

						</listitem>

					</varlistentry>

				</variablelist>

				<warning>
					<para>In ArgoUML V0.20, 
            the properties panel of a change event lacks a field to enter the 
            change expression.</para>
				</warning>

			</section>

		</section>

		<section xml:id="s1.ref.guard_state">

			<title>Guard</title>

			<para>A guard is associated with a transition. At the time an 
        event is dispatched, the guard is evaluated, and if false, its 
        transition is disabled. In the UML metamodel, <literal>
        Guard</literal> is a child of <literal>
        ModelElement</literal>.</para>

			<para>A guard is shown on the diagram by the text of its 
        expression in square brackets (<literal>[]</literal>).</para>

			<section>

				<title>Guard Details Tabs</title>

				<para>The details tabs that are active for guards are as 
          follows.</para>

				<variablelist>

					<varlistentry>

						<term>
							<literal>ToDoItem</literal>
						</term>

						<listitem>

							<para>Standard tab.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Properties</literal>
						</term>

						<listitem>

							<para>See 
                <xref
									xlink:href="s2.ref.guard_property_toolbar"
									 /> and 
                <xref
									xlink:href="s2.ref.guard_property_fields"
								 /> 
                below.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Documentation</literal>
						</term>

						<listitem>

							<para>Standard tab.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Stereotype</literal>
						</term>

						<listitem>

							<para>Standard tab, containing the stereotypes for the 
                guard. In the UML metamodel, <literal>
                Guard</literal> has no standard stereotypes
                defined.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Tagged Values</literal>
						</term>

						<listitem>

							<para>Standard tab. In the UML metamodel, <literal>
                Guard</literal> has no standard tagged 
                values defined.</para>

						</listitem>

					</varlistentry>

				</variablelist>

			</section>

			<section xml:id="s2.ref.guard_property_toolbar">

				<title>Guard Property Toolbar</title>

				<variablelist>

					<varlistentry>

						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/navigate_up.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Go up</literal>
						</term>

						<listitem>

							<para>Navigate up through the package structure.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/stereotype.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>New Stereotype</literal>
						</term>

						<listitem>

							<indexterm>
								<primary>Add Stereotype</primary>
							</indexterm>
							<indexterm>
								<primary>New Stereotype</primary>
							</indexterm>
							<indexterm>
								<primary>Create 
                New</primary>
								<secondary>Stereotype</secondary>
							</indexterm>
							<para>This creates a new Stereotype (see 
                <xref
									xlink:href="s1.ref.stereotype"
								 />) for the selected 
                guard, navigating immediately to the properties tab for 
                that stereotype.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/property_delete.gif" format="GIF"
										 />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Delete from Model</literal>
						</term>

						<listitem>

							<para>This deletes the guard from the model</para>

							<warning>

								<para>This is a deletion from the model, 
                  <emphasis>not</emphasis> just the diagram.</para>

							</warning>

						</listitem>

					</varlistentry>

				</variablelist>

			</section>

			<section xml:id="s2.ref.guard_property_fields">

				<title>Property Fields For Guard</title>

				<variablelist>

					<varlistentry>

						<term>
							<literal>Name</literal>
						</term>

						<listitem>

							<para>Text box. The name of the guard. By convention 
                guard names start with a lower case letter and use 
                bumpy caps to divide words within the name.</para>

							<note>

								<para>ArgoUML does not enforce this naming 
                  convention.</para>

							</note>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Transition</literal>
						</term>

						<listitem>

							<para>Text box, showing the transition that owns this 
                guard.</para>

							<para>Button&nbsp;1 double-click on the transition navigates 
                to that transition.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Expression</literal>
						</term>

						<listitem>

							<para>Text box. The expression that defines the 
                guard.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Language</literal>
						</term>

						<listitem>

							<para>Text box. This indicates that the expression is 
                written in a particular interpretation language with 
                which to evaluate the text.</para>

						</listitem>

					</varlistentry>

				</variablelist>

			</section>

		</section>

		<section xml:id="s1.ref.pseudostate">

			<title>Pseudostate</title>

			<para>A pseudostate encompasses a number of different transient 
        vertices on a state machine diagram. They are used, typically, 
        to connect multiple transitions into more complex state 
        transitions paths. For example, by combining a transition 
        entering a fork pseudostate with a set of transitions exiting 
        the fork pseudostate, we get a compound transition that leads 
        to a set of concurrent target states. Pseudostates do not have 
        the properties of a full state and serve only as a connection 
        point for transactions (but with some semantic value). Within 
        the UML metamodel, <literal>Pseudostate</literal> is a 
        sub-class of <literal>StateVertex</literal>.</para>

			<para>The representation of a pseudostate on a statechart 
        diagram in ArgoUML depends on the particular kind of 
        pseudostate: initial, deepHistory, shallowHistory, join, fork, 
        junction and choice. ArgoUML lets you place any pseudostate 
        directly by tools for the specific types of pseudostate. These 
        are described in separate sections below (see 
        <xref
					xlink:href="s1.ref.initial_state" />, 
        <xref
					xlink:href="s1.ref.junction_state" />, 
        <xref
					xlink:href="s1.ref.branch_state" />, 
        <xref
					xlink:href="s1.ref.fork_state" />, 
        <xref xlink:href="s1.ref.join_state"
					 />, 
        <xref xlink:href="s1.ref.shallow_history" /> and 
        <xref
					xlink:href="s1.ref.deep_history" />).</para>

			<section>

				<title>Pseudostate Details Tabs</title>

				<para>The details tabs that are active for pseudostates are 
          as follows.</para>

				<variablelist>

					<varlistentry>

						<term>
							<literal>ToDoItem</literal>
						</term>

						<listitem>

							<para>Standard tab.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Properties</literal>
						</term>

						<listitem>

							<para>See 
                <xref
									xlink:href="s2.ref.pseudostate_property_toolbar"
									 /> 
                and <xref
									xlink:href="s2.ref.pseudostate_property_fields"
								 />
                 below.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Documentation</literal>
						</term>

						<listitem>

							<para>Standard tab.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Presentation</literal>
						</term>

						<listitem>

							<para>Standard tab.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Stereotype</literal>
						</term>

						<listitem>

							<para>Standard tab, containing the stereotypes of the 
                pseudostate. In the UML metamodel, 
                <literal>PseudoState</literal> has the no standard 
                stereotypes defined.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Tagged Values</literal>
						</term>

						<listitem>

							<para>Standard tab. In the UML metamodel, <literal>
                Pseudostate</literal> has no standard tagged 
                values defined.</para>

						</listitem>

					</varlistentry>

				</variablelist>

			</section>

			<section xml:id="s2.ref.pseudostate_property_toolbar">

				<title>Pseudostate Property Toolbar</title>

				<variablelist>

					<varlistentry>

						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/navigate_up.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Go up</literal>
						</term>

						<listitem>

							<para>Navigate up through the package structure.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/stereotype.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>New Stereotype</literal>
						</term>

						<listitem>

							<indexterm>
								<primary>Add Stereotype</primary>
							</indexterm>
							<indexterm>
								<primary>New Stereotype</primary>
							</indexterm>
							<indexterm>
								<primary>Create 
                New</primary>
								<secondary>Stereotype</secondary>
							</indexterm>
							<para>This creates a new Stereotype (see 
                <xref
									xlink:href="s1.ref.stereotype"
								 />) for the selected 
                pseudostate, navigating immediately to the properties 
                tab for that stereotype.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/property_delete.gif" format="GIF"
										 />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Delete from Model</literal>
						</term>

						<listitem>

							<para>This deletes the pseudostate from the model</para>

							<warning>

								<para>This is a deletion from the model 
                  <emphasis>not</emphasis> just the diagram.</para>

							</warning>

						</listitem>

					</varlistentry>

				</variablelist>

			</section>

			<section xml:id="s2.ref.pseudostate_property_fields">

				<title>Property Fields For Pseudostate</title>

				<variablelist>

					<varlistentry>

						<term>
							<literal>Name</literal>
						</term>

						<listitem>

							<para>Text box. The name of the pseudostate. By 
                convention pseudostate names start with a lower case 
                letter and use bumpy caps to divide words within the 
                name.</para>

							<note>

								<para>ArgoUML does not enforce this naming 
                  convention.</para>

							</note>

							<tip>

								<para>Pseudostate names are not shown on the diagram 
                  and it is not usually necessary to give them a 
                  name.</para>

							</tip>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Container</literal>
						</term>

						<listitem>

							<para>Text box. Shows the container of the pseudostate. 
                This is the state hierarchy.</para>

							<para>Button&nbsp;1 double click on the entry will navigate 
                to the composite state that contains this state (or the 
                top-level state that is the root of the state 
                containment hierarchy).</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Incoming</literal>
						</term>

						<listitem>

							<para>Text area. Lists any incoming transitions for the 
                pseudostate.</para>

							<para>Button&nbsp;1 double-click navigates to the selected 
                transition.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Outgoing</literal>
						</term>

						<listitem>

							<para>Text area. Lists any outgoing transitions for the 
                pseudostate.</para>

							<para>Button&nbsp;1 double-click navigates to the selected 
                transition.</para>

						</listitem>

					</varlistentry>

				</variablelist>

			</section>

		</section>

		<section xml:id="s1.ref.initial_state">

			<title>Initial State</title>

			<para>The initial state is a pseudostate (see 
        <xref
					xlink:href="s1.ref.pseudostate"
					 />) representing a source for 
        a single transition to the <emphasis>default</emphasis> state 
        of a composite state. It is the state from which any initial 
        transition is made.</para>

			<para>As a consequence it is not permissible to have incoming 
        transitions. ArgoUML will not let you create such transitions, 
        and if you import a model that has such transitions, a critic 
        will complain.</para>

			<para>There can be at most one initial pseudostate in a 
        composite state, which must have (at most) one outgoing 
        transition.</para>

			<para>An initial state is represented on the diagram as a solid 
        disc.</para>

		</section>

		<section xml:id="s1.ref.final_state">

			<title>Final State</title>

			<para>If a transition reaches a final state, it implies 
        completion of the activity associated with that composite 
        state, or at the top level, of the complete state machine. In 
        the UML metamodel <literal>FinalState</literal> is a child of 
        <literal>State</literal>.</para>

			<note>

				<para>A final state is a true state (with all its 
          attributes), <emphasis>not</emphasis> a pseudostate.</para>

			</note>

			<para>Completion at the top level implies termination (i.e. 
        destruction) of the owning object instance.</para>

			<para>The representation of a final state on the diagram is a 
        circle with a small disc at its center.</para>

			<section>

				<title>Final State Details Tabs</title>

				<para>The details tabs that are active for final states are 
          as follows.</para>

				<variablelist>

					<varlistentry>

						<term>
							<literal>ToDoItem</literal>
						</term>

						<listitem>

							<para>Standard tab.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Properties</literal>
						</term>

						<listitem>

							<para>See 
                <xref
									xlink:href="s2.ref.final_state_property_toolbar"
									 /> 
                and <xref
									xlink:href="s2.ref.final_state_property_fields"
								 />
                 below.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Documentation</literal>
						</term>

						<listitem>

							<para>Standard tab.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Presentation</literal>
						</term>

						<listitem>

							<para>Standard tab.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Stereotype</literal>
						</term>

						<listitem>

							<para>Standard tab, containing the stereotypes of the 
                final state. In the UML metamodel, a <literal>
                Final State</literal> has the no standard tagged 
                values defined.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Tagged Values</literal>
						</term>

						<listitem>

							<para>Standard tab. In the UML metamodel, <literal>
                Final State</literal> has no standard tagged 
                values defined.</para>

						</listitem>

					</varlistentry>

				</variablelist>

			</section>

			<section xml:id="s2.ref.final_state_property_toolbar">

				<title>Final State Property Toolbar</title>

				<variablelist>

					<varlistentry>

						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/navigate_up.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Go up</literal>
						</term>

						<listitem>

							<para>Navigate up through the package structure.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/stereotype.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>New Stereotype</literal>
						</term>

						<listitem>

							<indexterm>
								<primary>Add Stereotype</primary>
							</indexterm>
							<indexterm>
								<primary>New Stereotype</primary>
							</indexterm>
							<indexterm>
								<primary>Create 
                New</primary>
								<secondary>Stereotype</secondary>
							</indexterm>
							<para>This creates a new Stereotype (see 
                <xref
									xlink:href="s1.ref.stereotype"
								 />) for the selected 
                state, navigating immediately to the properties tab for 
                that stereotype.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/property_delete.gif" format="GIF"
										 />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Delete from Model</literal>
						</term>

						<listitem>

							<para>This deletes the final state from the model</para>

							<warning>

								<para>This is a deletion from the model 
                  <emphasis>not</emphasis> just the diagram.</para>

							</warning>

						</listitem>

					</varlistentry>

				</variablelist>

			</section>

			<section xml:id="s2.ref.final_state_property_fields">

				<title>Property Fields For Final State</title>

				<variablelist>

					<varlistentry>

						<term>
							<literal>Name</literal>
						</term>

						<listitem>

							<para>Text box. The name of the final state. By 
                convention final state names start with a lower case 
                letter and use bumpy caps to divide words within the 
                name.</para>

							<note>

								<para>ArgoUML does not enforce this naming 
                  convention.</para>

							</note>

							<tip>

								<para>Final state names are shown on the diagram but 
                  it is not usually necessary to give them a 
                  name.</para>

							</tip>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Container</literal>
						</term>

						<listitem>

							<para>Text box. Shows the container of the final state. 
                This is the state hierarchy.</para>

							<para>Button&nbsp;1 double click on the entry will navigate 
                to the composite state that contains this state (or the 
                top-level state that is the root of the state 
                containment hierarchy).</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Entry-Action</literal>
						</term>

						<listitem>

							<para>Text box. Shows the name of the action (if any) 
                to be executed on entry to this final state.</para>

							<para>Button&nbsp;1 double-click navigates to the selected 
                entry, button&nbsp;2 gives a pop up menu with two 
                entries:</para>

							<itemizedlist>

								<listitem>

									<para><literal>New</literal>. Add a new Entry 
                    action of a certain kind. This menu has the 
                    following 7 submenus to select the kind of action: 
                    Call Action, Create Action, Destroy Action, Return 
                    Action, Send Action, Terminate Action, 
                    Uninterpreted Action.</para>

								</listitem>

								<listitem>

									<para><literal>Delete From Model</literal>. Delete 
                    the Entry-Action.</para>

								</listitem>

							</itemizedlist>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Incoming</literal>
						</term>

						<listitem>

							<para>Text area. Lists any incoming transitions for the 
                final state.</para>

							<para>Button&nbsp;1 double-click navigates to the selected 
                transition.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Internal Transitions</literal>
						</term>

						<listitem>

							<para>Text area. Lists all the internal transitions of 
                the state. Such transitions neither exit nor enter the 
                state, so they do not cause a state change. Which means 
                that the Entry and Exit actions are not invoked.</para>

							<para>Button&nbsp;1 double-click navigates to the selected 
                transition</para>

						</listitem>

					</varlistentry>

				</variablelist>

			</section>

		</section>

		<section xml:id="s1.ref.junction_state">

			<title>Junction</title>

			<para>Junction is a pseudostate (see 
        <xref xlink:href="s1.ref.pseudostate"
				 />) which is used to split an 
        incoming transition into multiple outgoing transition segments 
        with different guard conditions. A Junction is also called a 
        Merge or Static conditional branch. The chosen transition is 
        that whose guard is true at the time of the transition.</para>

			<para>A predefined guard denoted <literal>else</literal> may be 
        defined for at most one outgoing transition. This transition is 
        enabled if all the guards labeling the other transitions are 
        false.</para>

			<para>According the UML standard, its symbol is a small black 
        circle. Alternatively, it may be represented by a diamond shape 
        (in case of &quot;Decision&quot; for Activity diagrams). 
        ArgoUML only represents a junction on the diagram as a solid 
        (white by default) diamond, and does not support the black 
        circle symbol for a junction.</para>

		</section>

		<section xml:id="s1.ref.branch_state">

			<title>Choice</title>

			<para>Choice is a pseudostate (see 
        <xref xlink:href="s1.ref.pseudostate"
				 />) which is used to split an 
        incoming transition into multiple outgoing transition segments 
        with different guard conditions. Hence, a Choice allows a 
        dynamic choice of outgoing transitions. The chosen transition 
        is that whose guard is true at the time of the transition (if 
        more than one is true, one is selected at random).</para>

			<para>A predefined guard denoted <literal>else</literal> may be 
        defined for at most one outgoing transition. This transition is 
        enabled if all the guards labeling the other transitions are 
        false.</para>

			<note>

				<para>This sort of pseudostate was formerly called a <literal>
          Branch</literal> by ArgoUML.</para>

			</note>

			<para>A choice is represented on the diagram as a small solid 
        (white by default) circle (reminiscent of a small state 
        icon).</para>

		</section>

		<section xml:id="s1.ref.fork_state">

			<title>Fork</title>

			<para>Fork is a pseudostate (see 
        <xref xlink:href="s1.ref.pseudostate"
				 />) which splits a transition 
        into two or more concurrent transitions.</para>

			<caution>

				<para>The outgoing transitions should not have guards. 
          However ArgoUML will not enforce this.</para>

			</caution>

			<para>A fork is represented on the diagram as a solid (black by 
        default) horizontal bar.</para>

			<tip>

				<para>This bar can be made vertical by selecting the fork, 
          and dragging with button&nbsp;1 one of its corners.</para>

			</tip>

		</section>

		<section xml:id="s1.ref.join_state">

			<title>Join</title>

			<para>Join is a pseudostate (see 
        <xref xlink:href="s1.ref.pseudostate"
				 />) which joins two or more 
        concurrent transitions into a single transition.</para>

			<caution>

				<para>The incoming transitions should not have guards. 
          However ArgoUML will not enforce this.</para>

			</caution>

			<para>A join is represented on the diagram as a solid (black by 
        default) horizontal bar.</para>

			<tip>

				<para>This bar can be made vertical by selecting the join, 
          and dragging with button&nbsp;1 one of its corners.</para>

			</tip>

		</section>

		<section xml:id="s1.ref.shallow_history">

			<title>Shallow History</title>

			<para>Shallow History is a pseudostate (see 
        <xref
					xlink:href="s1.ref.pseudostate"
				 />) that can remember the 
        last state of its container that was active. The history 
        pseudostate points to its default state with a transition arrow 
        just like the initial pseudostate does. This transition points 
        to the substate that will become active when there is no 
        history. When the container composite state has been active 
        before (i.e., when there is history), the substate that was 
        active when the container state was exited, becomes active 
        again.</para>

			<para>When placed within a multi-level hierarchy of composite 
        states, the shallow history only remembers the history for 
        states that have the same container as the history pseudostate. 
        It does not restore substates deeper in the hierarchy then the 
        history pseudostate itself.</para>

			<para>A shallow history is represented on the diagram as a 
        circle containing the letter <literal>H</literal>.</para>

		</section>

		<section xml:id="s1.ref.deep_history">

			<title>Deep History</title>

			<para>Deep History is a pseudostate (see 
        <xref xlink:href="s1.ref.pseudostate"
				 />) that can remember the 
        last state of its container that was active. The history 
        pseudostate points to its default state with a transition arrow 
        just like the initial pseudostate does. This transition points 
        to the substate that will become active when there is no 
        history. When the container composite state has been active 
        before (i.e., when there is history), the substate that was 
        active when the container state was exited, becomes active 
        again.</para>

			<para>When placed within a multi-level hierarchy of composite 
        states, the deep history remembers the history for all states 
        recursively which are contained in the history pseudostate 
        container. It does restore any substates no matter how deep in 
        the hierarchy.</para>

			<para>A deep history is represented on the diagram as a circle 
        containing the symbols <literal>H*</literal>.</para>

		</section>

		<section xml:id="s1.ref.synch_state">

			<title>Synch State</title>

			<para>A synch state is for synchronizing concurrent regions of 
        a state machine. It is used in conjunction with forks and joins 
        to insure that one region leaves a particular state or states 
        before another region can enter a particular state or states. 
        The firing of outgoing transitions from a synch state can be 
        limited by specifying a bound on the difference between the 
        number of times outgoing and incoming transitions have fired. 
        In the UML metamodel <literal>Synch</literal> is a child of 
        <literal>StateVertex</literal>.</para>

			<para>A synch state is shown as a small circle with the upper 
        bound inside it. The bound is either a positive integer or a 
        star (&#039;*&#039;) for unlimited. Synch states are drawn on 
        the boundary between two regions when possible.</para>

			<section>

				<title>Synch State Details Tabs</title>

				<para>The details tabs that are active for Synch states are 
          as follows.</para>

				<variablelist>

					<varlistentry>

						<term>
							<literal>ToDoItem</literal>
						</term>

						<listitem>

							<para>Standard tab.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Properties</literal>
						</term>

						<listitem>

							<para>See 
                <xref
									xlink:href="s2.ref.synch_state_property_toolbar"
									 /> 
                and <xref
									xlink:href="s2.ref.synch_state_property_fields"
								 />
                 below.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Documentation</literal>
						</term>

						<listitem>

							<para>Standard tab.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Presentation</literal>
						</term>

						<listitem>

							<para>Standard tab.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Stereotype</literal>
						</term>

						<listitem>

							<para>Standard tab, containing the stereotypes of the 
                Synch state. In the UML metamodel, <literal>
                Synch State</literal> has no standard  
                stereotypes defined.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Tagged Values</literal>
						</term>

						<listitem>

							<para>Standard tab. In the UML metamodel, <literal>
                Synch State</literal> has no standard tagged 
                values defined.</para>

						</listitem>

					</varlistentry>

				</variablelist>

			</section>

			<section xml:id="s2.ref.synch_state_property_toolbar">

				<title>Synch State Property Toolbar</title>

				<variablelist>

					<varlistentry>

						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/navigate_up.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Go up</literal>
						</term>

						<listitem>

							<para>Navigate up through the package structure.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/stereotype.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>New Stereotype</literal>
						</term>

						<listitem>

							<indexterm>
								<primary>Add Stereotype</primary>
							</indexterm>
							<indexterm>
								<primary>New Stereotype</primary>
							</indexterm>
							<indexterm>
								<primary>Create 
                New</primary>
								<secondary>Stereotype</secondary>
							</indexterm>
							<para>This creates a new Stereotype (see 
                <xref
									xlink:href="s1.ref.stereotype"
								 />) for the selected 
                synch state, navigating immediately to the properties 
                tab for that stereotype.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/property_delete.gif" format="GIF"
										 />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Delete from Model</literal>
						</term>

						<listitem>

							<para>This deletes the synch state from the model</para>

							<warning>

								<para>This is a deletion from the model 
                  <emphasis>not</emphasis> just the diagram.</para>

							</warning>

						</listitem>

					</varlistentry>

				</variablelist>

			</section>

			<section xml:id="s2.ref.synch_state_property_fields">

				<title>Property Fields For Synch State</title>

				<variablelist>

					<varlistentry>

						<term>
							<literal>Name</literal>
						</term>

						<listitem>

							<para>Text box. The name of the Synch state. By 
                convention Synch state names start with a lower case 
                letter and use bumpy caps to divide words within the 
                name.</para>

							<note>

								<para>ArgoUML does not enforce this naming 
                  convention.</para>

							</note>

							<tip>

								<para>Synch state names are not shown on the diagram 
                  and it is not usually necessary to give them a 
                  name.</para>

							</tip>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Container</literal>
						</term>

						<listitem>

							<para>Text box. Shows the container of the Synch state. 
                This is the state hierarchy.</para>

							<para>Button&nbsp;1 double click on the entry will navigate 
                to the composite state that contains this state (or the 
                top-level state that is the root of the state 
                containment hierarchy).</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Bound</literal>
						</term>

						<listitem>

							<para>Editable text box. Shows the Bound of the Synch 
                state. Which is a positive integer or the value 
                <emphasis>unlimited</emphasis>
                (represented by a &quot;*&quot;) specifying 
                the maximal count of the SynchState. The count is the 
                difference between the number of times the incoming and 
                outgoing transitions of the synch state are 
                fired.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Incoming</literal>
						</term>

						<listitem>

							<para>Text area. Lists any incoming transitions for the 
                final state.</para>

							<para>Button&nbsp;1 double-click navigates to the selected 
                transition.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Outgoing Transitions</literal>
						</term>

						<listitem>

							<para>Text area. Lists any outgoing transitions for the 
                final state.</para>

							<para>Button&nbsp;1 double-click navigates to the selected 
                transition.</para>

						</listitem>

					</varlistentry>

				</variablelist>

			</section>

		</section>

	</chapter>

	<chapter xml:id="ch.ref.entcollab">

		<title>Collaboration Diagram Model Element Reference</title>

		<section>

			<title>Introduction</title>

			<para>This chapter describes each model element that can be created 
        within a collaboration diagram. Note that some sub-model elements of 
        model elements on the diagram may not actually themselves appear on 
        the diagram.</para>

			<para>There is a close relationship between this material and 
        the properties tab of the details pane (see 
        <xref
					xlink:href="s1.ref.proptab"
				 />). That section covers 
        Properties in general, in this chapter they are linked to 
        specific model elements.</para>

			<caution>

				<para>Collaboration diagrams are not fully developed yet in 
          ArgoUML. Many aspects are not fully implemented, or may not 
          behave as expected. In particular there are some serious 
          problems with layout of the collaboration roles and 
          messages.</para>

			</caution>

			<para><xref xlink:href="fig.ref.collaboration_diagram"
				 /> shows a 
        collaboration diagram with all possible model elements 
        displayed.</para>

			<figure float="1" xml:id="fig.ref.collaboration_diagram">

				<title>Possible model elements on a collaboration diagram.</title>

				<screenshot><mediaobject><imageobject>
          <imagedata align="center" fileref="images/reference/collaboration_diagram.gif" format="GIF" /></imageobject></mediaobject></screenshot>
			</figure>

			<section>

				<title>Limitations Concerning Collaboration Diagrams in 
          ArgoUML</title>

				<para>The collaboration diagram is still rather 
          under-developed in ArgoUML. In particular there is no way to 
          show instance collaborations (based on objects and links) 
          rather than specification collaborations.</para>

				<para>The biggest difficulties are with the messages. There 
          are problems with the sequencing of the messages and their 
          display on the diagram. The actions behind them are purely 
          textual in implementation and there is no way to link them 
          back to their associated operations or signals.</para>

			</section>

		</section>

		<section>

			<title>Classifier Role</title>

			<para>A classifier role is a specialization of a classifier, 
        used to show its behavior in a particular context. In the UML 
        metamodel <literal>Classifier Role</literal> is a sub-class of 
        <literal>Classifier</literal>. Within a collaboration diagram 
        classifier roles may be used in one of two ways:</para>

			<itemizedlist>

				<listitem>

					<para>To represent the classifier in a particular 
            behavioral context (the <emphasis>specification 
            level</emphasis>); or</para>

				</listitem>

				<listitem>

					<para>to specify a particular instance of the classifier 
            (the <emphasis>instance level</emphasis>).</para>

				</listitem>

			</itemizedlist>

			<para>In this latter form, classifier roles are identical to 
        the instances used in sequence diagrams (see 
        <xref
					xlink:href="ch.ref.entseq"
				 />) and a collaboration diagram 
        shows the same information as the sequence diagram, but in a 
        different presentation.</para>

			<caution>

				<para>A collaboration diagram should not mix classifier roles 
          used as the specifier level and the instance level.</para>

			</caution>

			<para>A classifier role is represented on a sequence diagram in 
        ArgoUML as a plain box labeled with the classifier role name 
        (if any) and classifier, separated by a colon (:).</para>

			<caution>

				<para>A classifier role should properly also show object name 
          (if any) preceding the classifier role name and separated 
          from it by a slash (<literal>/</literal>). This allows 
          classifier roles in a specification level diagram to be 
          distinguished from instances in an instance level 
          diagram.</para>

				<para>ArgoUML does show the slash, but there is no way to 
          define the instances.</para>

			</caution>

			<section>

				<title>Classifier Role Details Tabs</title>

				<para>The details tabs that are active for classifier roles 
          are as follows.</para>

				<variablelist>

					<varlistentry>

						<term>
							<literal>ToDoItem</literal>
						</term>

						<listitem>

							<para>Standard tab.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Properties</literal>
						</term>

						<listitem>

							<para>See 
                <xref
									xlink:href="s2.ref.classifier_role_property_toolbar"
									 />
                 and 
                <xref
									xlink:href="s2.ref.classifier_role_property_fields"
								 />
                 below.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Documentation</literal>
						</term>

						<listitem>

							<para>Standard tab.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Presentation</literal>
						</term>

						<listitem>

							<para>Standard tab.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Source</literal>
						</term>

						<listitem>

							<para>Standard tab, but with no contents.</para>

							<caution>

								<para>A classifier role should not generate any code, 
                  so having this tab active is probably a 
                  mistake.</para>

							</caution>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Tagged Values</literal>
						</term>

						<listitem>

							<para>Standard tab. In the UML metamodel, <literal>
                Classifier Role</literal> has the following standard 
                tagged values defined.</para>

							<itemizedlist>

								<listitem>

									<para><literal>persistence</literal> (from the 
                    superclass, <literal>Classifier</literal>. Showing 
                    the permanence of the state information associated 
                    with the classifier role. Values <literal>
                    transitory</literal> (state is destroyed when the 
                    classifier role is destroyed) and <literal>
                    persistent</literal> (state is preserved when the 
                    classifier role is destroyed).</para>

								</listitem>

								<listitem>

									<para><literal>semantics</literal> (from the 
                    superclass, <literal>Classifier</literal>). The 
                    value is a specification of the semantics of the 
                    classifier role.</para>

								</listitem>

								<listitem>

									<para><literal>derived</literal> (from the 
                    superclass, <literal>ModelElement</literal>). 
                    Values <literal>true</literal>, meaning the 
                    classifier role is redundant&#8212;it can be formally 
                    derived from other elements, or <literal>
                    false</literal> meaning it cannot.</para>

									<note>

										<para>Derived classifier roles still have their 
                      value in analysis and design to introduce useful 
                      names or concepts, and in design to avoid 
                      re-computation.</para>

									</note>

								</listitem>

							</itemizedlist>

							<note>

								<para>The UML <literal>Element</literal> metaclass 
                  from which all other model elements are derived includes 
                  the tagged element <literal>documentation</literal> 
                  which is handled by the <emphasis>documentation 
                  tab</emphasis> under ArgoUML</para>

							</note>

						</listitem>

					</varlistentry>

				</variablelist>

			</section>

			<section xml:id="s2.ref.classifier_role_property_toolbar">

				<title>Classifier Role Property Toolbar</title>

				<variablelist>

					<varlistentry>

						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/navigate_up.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Go up</literal>
						</term>

						<listitem>

							<para>Navigate up through the package structure.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/reception.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>New reception</literal>
						</term>

						<listitem>

							<para>This creates a new reception, navigating 
                immediately to the properties tab for that 
                reception.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/stereotype.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>New Stereotype</literal>
						</term>

						<listitem>

							<indexterm>
								<primary>Add Stereotype</primary>
							</indexterm>
							<indexterm>
								<primary>New Stereotype</primary>
							</indexterm>
							<indexterm>
								<primary>Create 
                New</primary>
								<secondary>Stereotype</secondary>
							</indexterm>
							<para>This creates a new Stereotype (see 
                <xref
									xlink:href="s1.ref.stereotype"
								 />) for the selected 
                classifier role, navigating immediately to the 
                properties tab for that stereotype.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/property_delete.gif" format="GIF"
										 />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Delete</literal>
						</term>

						<listitem>

							<para>This deletes the classifier role from the 
                model</para>

							<warning>

								<para>This is a deletion from the model 
                  <emphasis>not</emphasis> just the diagram. To delete 
                  an classifier role from the diagram, but keep it 
                  within the model, use the main menu <literal>Remove 
                  From Diagram</literal> (or press the Delete 
                  key).</para>

							</warning>

						</listitem>

					</varlistentry>

				</variablelist>

			</section>

			<section xml:id="s2.ref.classifier_role_property_fields">

				<title>Property Fields For Classifier Role</title>

				<variablelist>

					<varlistentry>

						<term>
							<literal>Name</literal>
						</term>

						<listitem>

							<para>Text box. The name of the classifier role. By 
                convention classifier role names start with a lower 
                case letter and use bumpy caps to divide words within 
                the name.</para>

							<note>

								<para>ArgoUML does not enforce this naming 
                  convention.</para>

							</note>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Stereotype</literal>
						</term>

						<listitem>

							<para>Drop down selector. Classifier Role is provided 
                by default with the UML standard stereotypes for a 
                classifier (<literal>metaclass</literal>, <literal>
                powertype</literal>, <literal>process</literal>, 
                <literal>thread</literal> and <literal>
                utility</literal>).</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Navigate Stereotype</literal>
						</term>

						<listitem>

							<para><guiicon>
									<inlinemediaobject>
										<imageobject>
											<imagedata align="center"
												fileref="images/icons/navigate_stereotype.gif"
												format="GIF" />
										</imageobject>
									</inlinemediaobject>
								</guiicon> 
                icon. If a stereotype has been selected, this will 
                navigate to the stereotype property panel (see 
                <xref
									xlink:href="s1.ref.stereotype" />).</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Namespace</literal>
						</term>

						<listitem>

							<para>Text box. Records the namespace for the 
                classifier role, which is always the containing 
                Collaboration.</para>

							<para>Button&nbsp;1 double click on the entry will navigate 
                to the collaboration.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Multiplicity</literal>
						</term>

						<listitem>

							<para>Editable drop down selector. The default value is 
                <literal>*</literal>, which means that there are any 
                number of instances of this classifierrole that play a 
                role in the collaboration. The drop down provides some 
                different multiplicities. E.g. <literal>1..1</literal> 
                would mean that only one instance plays a role in this 
                collaboration.</para>

							<para>ArgoUML does not restrict you to the predefined 
                ranges for multiplicity. You can edit this field 
                freely.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Base</literal>
						</term>

						<listitem>

							<para>List. The names of the classifiers of which this 
                is a classifierrole. Button&nbsp;1 double click navigates to 
                the classifier. Button&nbsp;2 click gives a pop up menu with 
                the following entries.</para>

							<itemizedlist>

								<listitem>

									<para><literal>Add</literal>. Allows adding or 
                    removeing classifiers to the list. To this end, a 
                    dialog box pops up, as shown in the figure 
                    below.</para>

									<figure float="1"
										xml:id="fig.ref.signal_add_classifierrole_base">

										<title>The <quote>add context</quote> dialog 
                      box</title>

										<screenshot><mediaobject><imageobject>
                      <imagedata align="center" fileref="images/reference/signal_add_classifierrole_base.png" format="PNG" /></imageobject></mediaobject></screenshot>
									</figure>

								</listitem>

								<listitem>

									<para><literal>Remove</literal>. Allows removeing 
                    classifiers to the list, without making use of the 
                    dialog box.</para>

								</listitem>

							</itemizedlist>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Generalizations</literal>
						</term>

						<listitem>

							<para>Text area. Lists any classifierrole that 
                <emphasis>generalizes</emphasis> this 
                classifierrole.</para>

							<para>Button&nbsp;1 double click navigates to the 
                generalization and opens its property tab.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Specializations</literal>
						</term>

						<listitem>

							<para>Text box. Lists any specialized classifierrole 
                (i.e. for which this classifierrole is a 
                generalization).</para>

							<para>button&nbsp;1 double click navigates to the 
                generalization and opens its property tab.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Association End Role</literal>
						</term>

						<listitem>

							<para>Text area. Lists the association-end roles that 
                are linked to this classifier role.</para>

							<para>Button&nbsp;1 double click navigates to the selected 
                entry.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Available Contents</literal>
						</term>

						<listitem>

							<para>Text area. Lists the subset of modelelements 
                contained in the base classifier which is used in the 
                collaboration.</para>

							<para>Button&nbsp;1 double click navigates to the 
                modelelement and opens its property tab.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Available Features</literal>
						</term>

						<listitem>

							<para>Text box. Lists the subset of features of the 
                base classifier which is used in the 
                collaboration.</para>

							<para>button&nbsp;1 double click navigates to the feature 
                and opens its property tab.</para>

						</listitem>

					</varlistentry>

				</variablelist>

			</section>

		</section>

		<section xml:id="s1.ref.association_role">

			<title>Association Role</title>

			<para>An association role is a specialization of an 
        association, used to describe an associations behavior in a 
        particular context. In the UML metamodel <literal>Association 
        Role</literal> is a sub-class of <literal>
        Association</literal>.</para>

			<para>An association role is represented on a collaboration 
        diagram in ArgoUML as a line connecting the instances 
        concerned. However on a sequence diagram the representation is 
        modified to reflect the type of action associated with the 
        stimulus carried on the link (see 
        <xref
					xlink:href="s1.ref.stimulus" />).</para>

			<para>The association role is labeled with the association role 
        name (if any).</para>

			<para>

          An association role shows its name and the association name 
          according the following syntax:
          <blockquote>

					<para>/ AssociationRoleName : AssociationName</para>

				</blockquote>

          in the same manner as a classifier role. The more generic 
          syntax is:
          <blockquote>

					<para>I / R : C</para>

				</blockquote>

          which stands for an Instance named I originating from the 
          Classifier C playing the role R.
        </para>

			<section>

				<title>Association Role Details Tabs</title>

				<para>The details tabs that are active for association roles 
          are as follows.</para>

				<variablelist>

					<varlistentry>

						<term>
							<literal>ToDoItem</literal>
						</term>

						<listitem>

							<para>Standard tab.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Properties</literal>
						</term>

						<listitem>

							<para>See 
                <xref
									xlink:href="s2.ref.association_role_property_toolbar"
									 />
                 and 
                <xref
									xlink:href="s2.ref.association_role_property_fields"
								 />
                 below.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Documentation</literal>
						</term>

						<listitem>

							<para>Standard tab.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Presentation</literal>
						</term>

						<listitem>

							<para>Standard tab. </para>
							<note>
								<para>
                    The values in the "bounds" field of the 
                    association role
                    are not editable, since they are determined 
                    by the properties of the endpoints of the line.
                  </para>
							</note>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Source</literal>
						</term>

						<listitem>

							<para>Standard tab, but with no contents.</para>

							<caution>

								<para>An association role should not generate any 
                  code, so having this tab active is probably a 
                  mistake.</para>

							</caution>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Tagged Values</literal>
						</term>

						<listitem>

							<para>Standard tab. In the UML metamodel, <literal>
                AssociationRole</literal> has the following standard 
                tagged values defined.</para>

							<itemizedlist>

								<listitem>

									<para><literal>persistence</literal> (from the 
                    superclass, <literal>Association</literal>). Values 
                    <literal>transitory</literal>, indicating state is 
                    destroyed when an instance is destroyed or <literal>
                    persistent</literal>, marking state is preserved 
                    when an instance is destroyed.</para>

								</listitem>

								<listitem>

									<para><literal>derived</literal> (from the 
                    superclass, <literal>ModelElement</literal>). 
                    Values <literal>true</literal>, meaning the 
                    association is redundant&#8212;it can be formally derived 
                    from other elements, or <literal>false</literal> 
                    meaning it cannot.</para>

									<note>

										<para>Derived association roles still have their 
                      value in analysis to introduce useful names or 
                      concepts, and in design to avoid 
                      re-computation.</para>

									</note>

								</listitem>

							</itemizedlist>

							<note>

								<para>The UML <literal>Element</literal> metaclass 
                  from which all other model elements are derived includes 
                  the tagged element <literal>documentation</literal> 
                  which is handled by the <emphasis>documentation 
                  tab</emphasis> under ArgoUML</para>

							</note>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Checklist</literal>
						</term>

						<listitem>

							<para>Standard tab for an Association Role.</para>

						</listitem>

					</varlistentry>

				</variablelist>

			</section>

			<section xml:id="s2.ref.association_role_property_toolbar">

				<title>Association Role Property Toolbar</title>

				<variablelist>

					<varlistentry>

						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/navigate_up.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Go up</literal>
						</term>

						<listitem>

							<para>Navigate up through the package structure.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/property_delete.gif" format="GIF"
										 />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Delete</literal>
						</term>

						<listitem>

							<para>This deletes the association role from the 
                model</para>

							<warning>

								<para>This is a deletion from the model 
                  <emphasis>not</emphasis> just the diagram. To delete 
                  an association role from the diagram, but keep it 
                  within the model, use the main menu <literal>Remove 
                  From Diagram</literal> (or press the Delete 
                  key).</para>

							</warning>

						</listitem>

					</varlistentry>

				</variablelist>

			</section>

			<section xml:id="s2.ref.association_role_property_fields">

				<title>Property Fields For Association Role</title>

				<variablelist>

					<varlistentry>

						<term>
							<literal>Name</literal>
						</term>

						<listitem>

							<para>Text box. The name of the association role, which 
                is shown on the diagram. By convention association role 
                names start with a lower case letter and use bumpy caps 
                to divide words within the name.</para>

							<note>

								<para>ArgoUML does not enforce this naming 
                  convention.</para>

							</note>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Stereotype</literal>
						</term>

						<listitem>

							<para>Drop down selector. Association role is provided 
                by default with the UML standard stereotype from the 
                superclass Association: <literal>
                implicit</literal>.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Navigate Stereotype</literal>
						</term>

						<listitem>

							<para><guiicon>
									<inlinemediaobject>
										<imageobject>
											<imagedata align="center"
												fileref="images/icons/navigate_stereotype.gif"
												format="GIF" />
										</imageobject>
									</inlinemediaobject>
								</guiicon> 
                icon. If a stereotype has been selected, this will 
                navigate to the stereotype property panel (see 
                <xref
									xlink:href="s1.ref.stereotype_class" />).</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Namespace</literal>
						</term>

						<listitem>

							<para>Text box. Records the namespace for the 
                association role. This is the package hierarchy.</para>

							<para>Button&nbsp;1 double click on the entry will navigate 
                to the item showm.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Base</literal>
						</term>

						<listitem>

							<para>Drop down selector. Records the association that 
                is the base for the association role.</para>

							<para>The drop down selector shows all associations 
                that exist between the classifiers that correspond with 
                the connected classifier roles.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Association End Roles</literal>
						</term>

						<listitem>

							<para>Text area. Lists the ends of this association 
                role. An association role can have any number of ends, 
                but two is generally the only useful number (link 
                objects can led to a third end on instance level 
                diagrams, but this is not supported by ArgoUML). For 
                more on association end roles see 
                <xref
									xlink:href="s1.ref.association_end_role" />.</para>

							<para>The names are listed, unless the association end 
                role has no name, then it is shown as <literal>(Unnamed 
                AssociationEndRole)</literal>.</para>

							<para>Button&nbsp;1 double click on an association end role 
                will navigate to that end.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Messages</literal>
						</term>

						<listitem>

							<para>Text area. Lists the messages that are associated 
                with this association role.</para>

							<para>Button&nbsp;1 double click navigates to the selected 
                entry</para>

						</listitem>

					</varlistentry>

				</variablelist>

			</section>

		</section>

		<section xml:id="s1.ref.association_end_role">

			<title>Association End Role</title>

			<para>An association end role is a specialization of an 
        association end, used to describe an association end&#039;s 
        behavior in a particular context. In the UML metamodel <literal>
        AssociationEndRole</literal> is a sub-class of <literal>
        AssociationEnd</literal>.</para>

			<para>Two or more association end roles are associated with 
        each association role (see 
        <xref
					xlink:href="s1.ref.association_role"
				 />), although for 
        ArgoUML, the number of ends can only be two.</para>

			<para>The association end role has no direct access on any 
        diagram, although its stereotype, name and multiplicity is 
        shown at the relevant end of the parent association role (see 
        <xref
					xlink:href="fig.ref.collaboration_diagram"
				 />), and some of 
        its properties can be directly adjusted with button&nbsp;2 click. 
        Where shared or composite aggregation is selected for one 
        association end role, the opposite end is shown as a solid 
        diamond (composite aggregation) or hollow diamond (shared 
        aggregation).</para>

			<note>

				<para>ArgoUML does not currently (V0.18) support showing 
          qualifiers on the diagram, as described in the UML&nbsp;1.4 
          standard.</para>

			</note>

			<caution>

				<para>An association end role should have the same, or 
          <quote>stricter</quote> attribute values than its base 
          association end. In particular its navigability should be no 
          more general. There is as yet no critic in ArgoUML to offer 
          advice on this rule.</para>

			</caution>

			<section>

				<title>Association End Role Details Tabs</title>

				<para>The details tabs that are active for association end 
          roles are as follows.</para>

				<variablelist>

					<varlistentry>

						<term>
							<literal>ToDoItem</literal>
						</term>

						<listitem>

							<para>Standard tab.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Properties</literal>
						</term>

						<listitem>

							<para>See 
                <xref
									xlink:href="s2.ref.association_end_role_property_toolbar"
									 />
                 and 
                <xref
									xlink:href="s2.ref.association_end_role_property_fields"
								 />
                 below.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Documentation</literal>
						</term>

						<listitem>

							<para>Standard tab.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Source</literal>
						</term>

						<listitem>

							<para>Standard tab. There is no code generated for an 
                association end role.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Tagged Values</literal>
						</term>

						<listitem>

							<para>Standard tab. In the UML metamodel, <literal>
                AssociationEndRole</literal> has the following standard 
                tagged values defined.</para>

							<itemizedlist>

								<listitem>

									<para><literal>derived</literal> (from the 
                    superclass, <literal>ModelElement</literal>). 
                    Values <literal>true</literal>, meaning the 
                    association end role is redundant&#8212;it can be 
                    formally derived from other elements, or <literal>
                    false</literal> meaning it cannot.</para>

									<tip>

										<para>Derived association end roles still have 
                      their value in analysis to introduce useful names 
                      or concepts, and in design to avoid 
                      re-computation. However the tag only makes sense 
                      for an association end role if it is also applied 
                      to the parent association role.</para>

									</tip>

								</listitem>

							</itemizedlist>

							<note>

								<para>The UML <literal>Element</literal> metaclass 
                  from which all other model elements are derived includes 
                  the tagged element <literal>documentation</literal> 
                  which is handled by the <emphasis>documentation 
                  tab</emphasis> under ArgoUML</para>

							</note>

						</listitem>

					</varlistentry>

				</variablelist>

			</section>

			<section xml:id="s2.ref.association_end_role_property_toolbar">

				<title>Association End Role Property Toolbar</title>

				<variablelist>

					<varlistentry>

						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/navigate_up.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Go up</literal>
						</term>

						<listitem>

							<para>Navigate up to the association role to which this 
                end role belongs.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/association_end_role.gif"
											format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Go Opposite</literal>
						</term>

						<listitem>

							<para>This navigates to the other end of the 
                association role.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/attribute.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>New Qualifier</literal>
						</term>

						<listitem>

							<indexterm>
								<primary>Add Qualifier</primary>
							</indexterm>
							<indexterm>
								<primary>New Qualifier</primary>
							</indexterm>
							<indexterm>
								<primary>Create 
                New</primary>
								<secondary>Qualifier</secondary>
							</indexterm>
							<para>This creates a new Qualifier for the selected 
                association-end role, navigating immediately to the 
                properties tab for that qualifier.</para>

							<warning>

								<para>Qualifiers are only partly supported in ArgoUML 
                  V0.18. Hence, activating this button creates a 
                  qualifier in the model, which is not shown on the 
                  diagram. Also, the properties panel for a qualifier 
                  equals that of a regular attribute.</para>

							</warning>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/stereotype.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>New Stereotype</literal>
						</term>

						<listitem>

							<indexterm>
								<primary>Add Stereotype</primary>
							</indexterm>
							<indexterm>
								<primary>New Stereotype</primary>
							</indexterm>
							<indexterm>
								<primary>Create 
                New</primary>
								<secondary>Stereotype</secondary>
							</indexterm>
							<para>This creates a new Stereotype (see 
                <xref
									xlink:href="s1.ref.stereotype"
								 />) for the selected 
                association-end role, navigating immediately to the 
                properties tab for that stereotype.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/property_delete.gif" format="GIF"
										 />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Delete</literal>
						</term>

						<listitem>

							<para>This deletes the selected association-end from 
                the model.</para>

							<note>

								<para>This button is downlighted for binary 
                  association roles, since an association needs at 
                  least <emphasis>two</emphasis> ends. Only for N-ary 
                  associations, this button is accessable, and deletes 
                  just one end from the association.</para>

							</note>

						</listitem>

					</varlistentry>

				</variablelist>

			</section>

			<section xml:id="s2.ref.association_end_role_property_fields">

				<title>Property Fields For Association End Role</title>

				<variablelist>

					<varlistentry>

						<term>
							<literal>Name</literal>
						</term>

						<listitem>

							<para>Text box. The name of the association end role, 
                which provides a <emphasis>role name</emphasis> for 
                this end of the association role. This role name can be 
                used for navigation, and in an implementation context, 
                provides a name by which the source end of an 
                association role can reference the target end.</para>

							<note>

								<para>ArgoUML does not enforce any naming convention 
                  for association end roles.</para>

							</note>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Stereotype</literal>
						</term>

						<listitem>

							<para>Drop down selector. Association end role is 
                provided by default with the UML standard stereotypes 
                for AssociationEndRole (<literal>association</literal>, 
                <literal>global</literal>, <literal>local</literal>, 
                <literal>parameter</literal>, <literal>
                self</literal>).</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Navigate Stereotype</literal>
						</term>

						<listitem>

							<para><guiicon>
									<inlinemediaobject>
										<imageobject>
											<imagedata align="center"
												fileref="images/icons/navigate_stereotype.gif"
												format="GIF" />
										</imageobject>
									</inlinemediaobject>
								</guiicon> 
                icon. If a stereotype has been selected, this will 
                navigate to the stereotype property panel (see 
                <xref
									xlink:href="s1.ref.stereotype" />).</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Base</literal>
						</term>

						<listitem>

							<para>Text field that shows the name of the 
                corresponding association end. Button&nbsp;1 double click 
                navigates to the association end.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>AssociationRole</literal>
						</term>

						<listitem>

							<para>Text box. Records the parent association role for 
                this association end role. Button&nbsp;1 double click 
                navigates to the association role.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Type</literal>
						</term>

						<listitem>

							<para>Drop down selector providing access to all 
                standard UML types provided by ArgoUML and all new 
                classes created within the current model.</para>

							<para>This is the type of the entity attached to this 
                end of the association role.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Multiplicity</literal>
						</term>

						<listitem>

							<para>Editable drop down text entry. Allows to alter 
                the multiplicity of this association end role (with 
                respect to the other end), i.e. how many instances of 
                this end may be associated with an instance of the 
                other end. The multiplicity is shown on the diagram at 
                that end of the association role.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>All remaining properties</literal>
						</term>

						<listitem>

							<para>See 
                <xref
									xlink:href="s2.ref.association_end_property_fields"
								 />
                . Since these are completely equal to the fields of an 
                association end, they are not repeated here.</para>

						</listitem>

					</varlistentry>

				</variablelist>

			</section>

		</section>

		<section>

			<title>Message</title>

			<para>A message is a communication between two instances of an 
        association role on a specification level collaboration 
        diagram. It describes an action which will generate the 
        stimulus associated with the message. On a collaboration 
        diagram a message is associated with an association role. In 
        the UML metamodel <literal>Message</literal> is a sub-class of 
        <literal>ModelElement</literal>.</para>

			<para>The message is represented on a collaboration diagram in 
        ArgoUML by its sequence number separated by a colon from the 
        expression defining the associated action. It is accompagnied 
        by an arrow pointing in the direction of the communication, 
        i.e. the direction of the AssociationRole. By convention the 
        name of a message is not shown on the diagram. Instead the 
        diagram displays the message sequence number, either as an 
        integer or as a decimal number to show hierarchy.</para>

			<warning>

				<para>The current release of ArgoUML does not retaining 
          message positioning after reloading the project, i.e. as if 
          the positions were not stored in the project file.</para>

			</warning>

			<section>

				<title>Message Details Tabs</title>

				<para>The details tabs that are active for messages are as 
          follows.</para>

				<variablelist>

					<varlistentry>

						<term>
							<literal>ToDoItem</literal>
						</term>

						<listitem>

							<para>Standard tab.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Properties</literal>
						</term>

						<listitem>

							<para>See 
                <xref
									xlink:href="s2.ref.message_property_toolbar"
									 /> and 
                <xref
									xlink:href="s2.ref.message_property_fields"
								 /> 
                below.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Documentation</literal>
						</term>

						<listitem>

							<para>Standard tab.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Presentation</literal>
						</term>

						<listitem>

							<para>Standard tab. The values for the bounds of the 
                message define the bounding box of the message. The 
                <literal>Line</literal> field defines the arrow color. 
                Increasing the <literal>Shadow</literal> size has an 
                esthetically questionable effect.</para>

							<caution>

								<para>In the V0.18 release of ArgoUML changing the 
                  position of the message by editing the values of the 
                  <literal>Bounds</literal> field is possible, but will 
                  make only a temporary change to the position of the 
                  message, as described above.</para>

							</caution>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Source</literal>
						</term>

						<listitem>

							<para>Standard tab, showing the message number and 
                action expression separated by a colon (when UML 1.4 is 
                selected in the drop-down).</para>

							<caution>

								<para>A message probably should not generated any 
                  code of itself. That should be left to the action and 
                  possibly stimulus associated with it. In any case 
                  changes to this tab are ignored.</para>

							</caution>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Tagged Values</literal>
						</term>

						<listitem>

							<para>Standard tab. In the UML metamodel, <literal>
                Message</literal> has the following standard tagged 
                values defined.</para>

							<itemizedlist>

								<listitem>

									<para><literal>derived</literal> (from the 
                    superclass, <literal>ModelElement</literal>). 
                    Values <literal>true</literal>, meaning the message 
                    is redundant&#8212;it can be formally derived from other 
                    elements, or <literal>false</literal> meaning it 
                    cannot.</para>

									<note>

										<para>Derived messages still have their value in 
                      analysis and design to introduce useful names or 
                      concepts, and in design to avoid 
                      re-computation.</para>

									</note>

								</listitem>

							</itemizedlist>

							<note>

								<para>The UML <literal>Element</literal> metaclass 
                  from which all other model elements are derived includes 
                  the tagged element <literal>documentation</literal> 
                  which is handled by the <emphasis>documentation 
                  tab</emphasis> under ArgoUML</para>

							</note>

						</listitem>

					</varlistentry>

				</variablelist>

			</section>

			<section xml:id="s2.ref.message_property_toolbar">

				<title>Message Property Toolbar</title>

				<variablelist>

					<varlistentry>

						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/navigate_up.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Go up</literal>
						</term>

						<listitem>

							<para>Navigate up through the package structure.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/call_action.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>New Action</literal>
						</term>

						<listitem>

							<indexterm>
								<primary>Add Action</primary>
							</indexterm>
							<indexterm>
								<primary>New Action</primary>
							</indexterm>
							<indexterm>
								<primary>Create 
                New</primary>
								<secondary>Action</secondary>
							</indexterm>
							<para>This creates a new Action (see 
                <xref
									xlink:href="s1.ref.action_state"
								 />) for the selected 
                object, navigating immediately to the properties tab 
                for that action.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/stereotype.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>New Stereotype</literal>
						</term>

						<listitem>

							<indexterm>
								<primary>Add Stereotype</primary>
							</indexterm>
							<indexterm>
								<primary>New Stereotype</primary>
							</indexterm>
							<indexterm>
								<primary>Create 
                New</primary>
								<secondary>Stereotype</secondary>
							</indexterm>
							<para>This creates a new Stereotype (see 
                <xref
									xlink:href="s1.ref.stereotype"
								 />) for the selected 
                message, navigating immediately to the properties tab 
                for that stereotype.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/property_delete.gif" format="GIF"
										 />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Delete</literal>
						</term>

						<listitem>

							<para>This deletes the message from the model</para>

							<warning>

								<para>This is a deletion from the model 
                  <emphasis>not</emphasis> just the diagram. To delete 
                  an message from the diagram, but keep it within the 
                  model, use the main menu <literal>Remove From 
                  Diagram</literal> (or press the Delete key).</para>

							</warning>

						</listitem>

					</varlistentry>

				</variablelist>

			</section>

			<section xml:id="s2.ref.message_property_fields">

				<title>Property Fields For Message</title>

				<variablelist>

					<varlistentry>

						<term>
							<literal>Name</literal>
						</term>

						<listitem>

							<para>Text box. The name of a message is usually its 
                sequence number, either an integer, or a decimal 
                (allowing alternative message hierarchies to be clearly 
                described). ArgoUML will supply an integer sequence 
                number by default.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Stereotype</literal>
						</term>

						<listitem>

							<para>Drop down selector. Message has no stereotypes by 
                default in the UML standard.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Navigate Stereotype</literal>
						</term>

						<listitem>

							<para><guiicon>
									<inlinemediaobject>
										<imageobject>
											<imagedata align="center"
												fileref="images/icons/navigate_stereotype.gif"
												format="GIF" />
										</imageobject>
									</inlinemediaobject>
								</guiicon> 
                icon. If a stereotype has been selected, this will 
                navigate to the stereotype property panel (see 
                <xref
									xlink:href="s1.ref.stereotype" />).</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Interaction</literal>
						</term>

						<listitem>

							<para>Text box. Records the Interaction of which the 
                message is a part.</para>

							<para>Button&nbsp;1 double click on the entry will navigate 
                to the interaction.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Sender</literal>
						</term>

						<listitem>

							<para>Text box. Identifies the classifier role which 
                sent this message.</para>

							<para>Button&nbsp;1 double click navigates to the sender 
                classifier role.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Receiver</literal>
						</term>

						<listitem>

							<para>Text box. Identifies the classifier role which 
                receives this message.</para>

							<para>Button&nbsp;1 double click navigates to the receiver 
                classifier role.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Activator</literal>
						</term>

						<listitem>

							<para>Drop down selector. Identifies the message which 
                invokes the behavior that causes the sending of this 
                message.</para>

							<para>Button&nbsp;1 click allows selecting the 
                message.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Action</literal>
						</term>

						<listitem>

							<para>Text box. Lists the action (see 
                <xref
									xlink:href="s1.ref.action_state"
								 />) this message 
                invokes to raise a stimulus.</para>

							<para>Button&nbsp;1 double click navigates to the selected 
                action, button&nbsp;2 gives a pop up menu with the following 
                entry.</para>

							<itemizedlist>

								<listitem>

									<para><literal>New</literal>. Add a new 
                    action.</para>

									<para>This item is downlighted if an action already 
                    exists.</para>

								</listitem>

							</itemizedlist>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Predecessors</literal>
						</term>

						<listitem>

							<para>Text area. Identifies the messages, the 
                completion of whose execution enables this 
                message.</para>

							<para>Button&nbsp;1 double click navigates to the selected 
                message, button&nbsp;2 gives a pop up menu with one 
                entry.</para>

							<itemizedlist>

								<listitem>

									<para><literal>Add</literal>. Opens a dialog box 
                    that allows to select any number of messages. See 
                    figure below.</para>

									<para>This entry is grayed out when no messages 
                    exist.</para>

									<figure float="1" xml:id="fig.ref.message_add_predecessors">

										<title>The <quote>add predecessors</quote> dialog 
                      box</title>

										<screenshot><mediaobject><imageobject>
                      <imagedata align="center" fileref="images/reference/message_add_predecessors.png" format="PNG" /></imageobject></mediaobject></screenshot>
									</figure>

								</listitem>

							</itemizedlist>

						</listitem>

					</varlistentry>

				</variablelist>

			</section>

		</section>

	</chapter>

	<chapter xml:id="ch.ref.entactiv">

		<title>Activity Diagram Model Element Reference</title>

		<section>

			<title>Introduction</title>

			<para>This chapter describes each model element that can be created 
        within an Activity diagram. Note that some sub-model elements of 
        model elements may not actually themselves appear on the 
        diagram.</para>

			<para>There is a close relationship between this material and 
        the Properties Tab of the Details Pane (see 
        <xref
					xlink:href="s1.ref.proptab"
				 />). That section covers 
        Properties in general, in this chapter they are linked to 
        specific model elements.</para>

			<para><xref xlink:href="fig.ref.activity_diagram"
				 /> shows an 
        Activity Diagram with all possible model elements displayed.</para>

			<figure float="1" xml:id="fig.ref.activity_diagram">

				<title>Possible model elements on an activity diagram.</title>

				<screenshot><mediaobject><imageobject>
          <imagedata align="center" fileref="images/reference/activity_diagram.gif" format="GIF" /></imageobject></mediaobject></screenshot>
			</figure>

			<section>

				<title>Limitations Concerning Activity Diagrams in 
          ArgoUML</title>

				<para>Activity diagrams are not fully developed yet in 
          ArgoUML. Some aspects are not fully implemented, or may not 
          behave as expected. In particular lacking are call states, 
          swim lanes, control icons (signals), sub-activities, synch 
          states. Interactions with other classifiers are provided by 
          an object-flow-state which is only partly implemented.</para>

			</section>

		</section>

		<section>

			<title>Action State</title>

			<para>An action state represents execution of an atomic action, 
        usually the invocation of an action. Within the UML metamodel, 
        <literal>ActionState</literal> is a sub-class of <literal>
        SimpleState</literal>. It is a specialized simple state that 
        only has an entry action, and with an implicit trigger as soon 
        as that action is completed.</para>

			<caution>

				<para>As a consequence any outgoing transitions from an 
          action state should not have explicit triggers defined 
          (ArgoUML will not currently check for this). They may have 
          guards to provide a choice where there is more than one 
          transition.</para>

			</caution>

			<note>

				<para>Unlike an ordinary state, an internal transition, an 
          exit action and a Do activity are not permitted for action 
          states.</para>

			</note>

			<para>An action state is represented on an activity diagram in 
        ArgoUML as a rectangle with rounded corners containing the name 
        of the action state.</para>

			<caution>

				<para>The UML standard specifies that the text shown in the 
          action state on the activity diagram should contain the 
          expression associated with the entry action - which is 
          implemented as such since ArgoUML V0.18. In past versions of 
          ArgoUML (0.16.1 and before), the diagram used to show the 
          action state name. Loading a project created by one of the 
          older versions, causes the project file to be converted to 
          the correct format to conform to the UML standard. This process is 
          designed to be transparent for the user, and the only 
          drawback is, that the activity diagram in the project will 
          not show correctly when reloaded in an old version of ArgoUML 
          again.</para>

			</caution>

			<section>

				<title>Action State Details Tabs</title>

				<para>The details tabs that are active for action states are 
          as follows.</para>

				<variablelist>

					<varlistentry>

						<term>
							<literal>ToDoItem</literal>
						</term>

						<listitem>

							<para>Standard tab.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Properties</literal>
						</term>

						<listitem>

							<para>See 
                <xref
									xlink:href="s2.ref.action_state_property_toolbar"
									 /> 
                and 
                <xref
									xlink:href="s2.ref.action_state_property_fields"
								 /> 
                below.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Documentation</literal>
						</term>

						<listitem>

							<para>Standard tab.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Presentation</literal>
						</term>

						<listitem>

							<para>Standard tab. The values for the bounds of the 
                action state define the bounding box of the action 
                state.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Stereotype</literal>
						</term>

						<listitem>

							<para>Standard tab that shows the stereotypes of the action 
                state. 
                In the UML metamodel, 
                there are no stereotypes defined 
                by default for a action state.
                </para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Tagged Values</literal>
						</term>

						<listitem>

							<para>Standard tab. In the UML metamodel, <literal>
                ActionState</literal> has no standard tagged 
                values defined.</para>

						</listitem>

					</varlistentry>

				</variablelist>

			</section>

			<section xml:id="s2.ref.action_state_property_toolbar">

				<title>Action State Property ToolBar</title>

				<variablelist>

					<varlistentry>

						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/navigate_up.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Go up</literal>
						</term>

						<listitem>

							<para>Navigate up through the containment structure.
                Action states are contained by the 
                (otherwise invisible) top state.
                </para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/stereotype.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>New Stereotype</literal>
						</term>

						<listitem>

							<indexterm>
								<primary>Add Stereotype</primary>
							</indexterm>
							<indexterm>
								<primary>New Stereotype</primary>
							</indexterm>
							<indexterm>
								<primary>Create 
                New</primary>
								<secondary>Stereotype</secondary>
							</indexterm>
							<para>This creates a new Stereotype (see 
                <xref
									xlink:href="s1.ref.stereotype"
								 />) for the selected 
                action state, navigating immediately to the properties 
                tab for that stereotype.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/property_delete.gif" format="GIF"
										 />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Delete from Model</literal>
						</term>

						<listitem>

							<para>This deletes the action state from the 
                model</para>

							<warning>

								<para>This is a deletion from the model 
                  <emphasis>not</emphasis> just the diagram. It is not 
                  possible to delete an action state from the diagram, 
                  since that concept does not fit the UML 
                  standard.</para>

								<para>Hence ArgoUML does also not show the <literal>
                  Add to Diagram</literal> pop-up menu for action 
                  states.</para>

							</warning>

						</listitem>

					</varlistentry>

				</variablelist>

			</section>

			<section xml:id="s2.ref.action_state_property_fields">

				<title>Property fields for action state</title>

				<variablelist>

					<varlistentry>

						<term>
							<literal>Name</literal>
						</term>

						<listitem>

							<para>Text box. The name of the action state. By 
                convention action state names start with a lower case 
                letter and use bumpy caps to divide words within the 
                name.</para>

							<note>

								<para>ArgoUML does not enforce this naming 
                  convention.</para>

							</note>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Container</literal>
						</term>

						<listitem>

							<para>Text box. The container of the action state.
                This shows the otherwise invisible composite state
                at the top of the containment hierarchy.
                </para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Entry-Action</literal>
						</term>

						<listitem>

							<para>Text box. Shows the name of the action to be 
                invoked on entry to this action state. According the 
                UML standard, an Action State is obliged to have an 
                Entry-Action.</para>

							<para>Button&nbsp;1 double-click navigates to the shown 
                entry, button&nbsp;2 gives a pop up menu with two 
                entries.</para>

							<itemizedlist>

								<listitem>

									<para><literal>New</literal>. Add a new Entry 
                    action of a certain kind. This menu has the 
                    following 7 submenus to select the kind of action: 
                    Call Action, Create Action, Destroy Action, Return 
                    Action, Send Action, Terminate Action, 
                    Uninterpreted Action.</para>

								</listitem>

								<listitem>

									<para><literal>Delete From Model</literal>. Delete 
                    the Entry-Action.</para>

								</listitem>

							</itemizedlist>

						</listitem>

					</varlistentry>
					<varlistentry>

						<term>
							<literal>Deferrable events</literal>
						</term>

						<listitem>

							<para>Text box. The deferrable events of the action state. 
                <!-- This seems to be a bug. Should this be here? -->
							</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Incoming</literal>
						</term>

						<listitem>

							<para>Text area. Lists the transitions that enter this 
                action state.</para>

							<para>Button&nbsp;1 double-click navigates to the selected 
                entry.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Outgoing</literal>
						</term>

						<listitem>

							<para>Text area. Lists the transitions that leave this 
                action state.</para>

							<para>Button&nbsp;1 double-click navigates to the selected 
                entry.</para>

						</listitem>

					</varlistentry>

				</variablelist>

			</section>

		</section>

		<section>

			<title>Action</title>

			<para>This model element is described in the context of statechart 
        diagrams (see <xref
					xlink:href="s1.ref.action_state" />).</para>

		</section>

		<section>

			<title>Transition</title>

			<para>This model element is described in the context of statechart 
        diagrams (see <xref
					xlink:href="s1.ref.transition_state" />).</para>

			<caution>

				<para>Remember that action states do not have explicit 
          triggers. The transition is implicitly triggered as soon as 
          the entry event of the action state is complete. An explicit 
          trigger should not therefore be set.</para>

				<para>The current release of ArgoUML will not check that this 
          constraint is met.</para>

			</caution>

			<note>

				<para>Transitions to and from an ObjectFlowState are dashed, 
          to distinguish <emphasis>object flow</emphasis> from 
          <emphasis>control flow</emphasis>.</para>

			</note>

		</section>

		<section>

			<title>Guard</title>

			<para>This model element is described in the context of statechart 
        diagrams (see <xref
					xlink:href="s1.ref.guard_state" />).</para>

		</section>

		<section>

			<title>Initial State</title>

			<para>This model element is described in the context of statechart 
        diagrams (see <xref
					xlink:href="s1.ref.initial_state" />).</para>

		</section>

		<section>

			<title>Final State</title>

			<para>This model element is described in the context of statechart 
        diagrams (see <xref
					xlink:href="s1.ref.final_state" />).</para>

		</section>

		<section>

			<title>Junction (Decision)</title>

			<para>This model element is described in the context of statechart 
        diagrams (see <xref
					xlink:href="s1.ref.junction_state" />).</para>

		</section>

		<section>

			<title>Fork</title>

			<para>This model element is described in the context of statechart 
        diagrams (see <xref
					xlink:href="s1.ref.fork_state" />).</para>

		</section>

		<section>

			<title>Join</title>

			<para>This model element is described in the context of statechart 
        diagrams (see <xref
					xlink:href="s1.ref.join_state" />).</para>

		</section>

		<section>

			<title>ObjectFlowState</title>

			<para>(To Be Written)</para>

		</section>

	</chapter>

	<chapter xml:id="ch.ref.entdeploy">

		<title>Deployment Diagram Model Element Reference</title>

		<section>

			<title>Introduction</title>

			<para>This chapter describes each model element that can be created 
        within a Deployment Diagram. Note that some sub-model elements of 
        model elements on the diagram may not actually themselves appear on 
        the diagram.</para>

			<para>There is a close relationship between this material and 
        the Properties Tab of the Details Pane (see 
        <xref
					xlink:href="s1.ref.proptab"
				 />). That section covers 
        Properties in general, in this chapter they are linked to 
        specific model elements.</para>

			<para>Within ArgoUML, the deployment diagram is used for both 
        component diagrams (i.e. without instances, showing static 
        dependencies of components) and deployment diagrams (showing 
        how instances of components are handled by instances of nodes 
        at run-time).</para>

			<caution>

				<para>Deployment diagrams are not fully developed yet in 
          ArgoUML. Some aspects are not fully implemented or may not 
          behave as expected. Notable omissions are the possibility to 
          draw new interfaces and proper stereotyping of the various 
          dependency relationships.</para>

			</caution>

			<para><xref xlink:href="fig.ref.component_diagram"
				 /> shows a 
        component diagram with all possible model elements displayed.</para>

			<figure float="1" xml:id="fig.ref.component_diagram">

				<title>Possible model elements on a component diagram.</title>

				<screenshot><mediaobject><imageobject>
          <imagedata align="center" fileref="images/reference/component_diagram.gif" format="GIF" /></imageobject></mediaobject></screenshot>
			</figure>

			<para><xref xlink:href="fig.ref.deployment_diagram"
				 /> shows a 
        deployment diagram with all possible model elements displayed.</para>

			<figure float="1" xml:id="fig.ref.deployment_diagram">

				<title>Possible model elements on a deployment diagram.</title>

				<screenshot><mediaobject><imageobject>
          <imagedata align="center" fileref="images/reference/deployment_diagram.gif" format="GIF" /></imageobject></mediaobject></screenshot>
			</figure>

			<section>

				<title>Limitations Concerning Deployment Diagrams in 
          ArgoUML</title>

				<para>The deployment diagram is generally well drawn, but 
          there are only a subset of the relationships that should be 
          shown available, which restricts the ability to show dynamic 
          behavior of deployed code.</para>

				<para>It is not possible to create new interfaces directly on 
          this diagram; they can only be added if they are first 
          created in the model (by drawing them on a class 
          diagram).</para>

				<para>It is an inconvenience that the alternative 
          representation of an interface (as a small circle) is not 
          supported.</para>

			</section>

		</section>

		<section>

			<title>Node</title>

			<para>A node is a run-time physical object on which components 
        may be deployed. In the UML metamodel it is a sub-class of 
        <literal>Classifier</literal>.</para>

			<para>A node is represented on a class diagram as a three 
        dimensional box, labeled with its name.</para>

			<section>

				<title>Node Details Tabs</title>

				<para>The details tabs that are active for nodes are as 
          follows.</para>

				<variablelist>

					<varlistentry>

						<term>
							<literal>ToDoItem</literal>
						</term>

						<listitem>

							<para>Standard tab.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Properties</literal>
						</term>

						<listitem>

							<para>See <xref xlink:href="s2.ref.node_property_toolbar"
									 />
                 and <xref
									xlink:href="s2.ref.node_property_fields"
								 /> 
                below.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Documentation</literal>
						</term>

						<listitem>

							<para>Standard tab.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Presentation</literal>
						</term>

						<listitem>

							<para>Standard tab. The <literal>Bounds:</literal> 
                field defines the bounding box for the node on the 
                diagram.</para>

							<warning>

								<para>Beware that in the 0.18 release of ArgoUML, the 
                  bounding box just refers to the front face of the 
                  cube. This means that the three dimensional top and 
                  side may be ignored, for example when determining the 
                  limits of a diagram for saving graphics.</para>

							</warning>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Source</literal>
						</term>

						<listitem>

							<para>Standard tab, but with no contents.</para>

							<caution>

								<para>A node should not generate any code, so having 
                  this tab active is probably a mistake.</para>

							</caution>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Tagged Values</literal>
						</term>

						<listitem>

							<para>Standard tab. In the UML metamodel, <literal>
                Node</literal> has the following standard tagged values 
                defined.</para>

							<itemizedlist>

								<listitem>

									<para><literal>persistence</literal> (from the 
                    superclass, <literal>Classifier</literal>). Values 
                    <literal>transitory</literal>, indicating state is 
                    destroyed when an instance is destroyed or <literal>
                    persistent</literal>, marking state is preserved 
                    when an instance is destroyed.</para>

								</listitem>

								<listitem>

									<para><literal>semantics</literal> (from the 
                    superclass, <literal>Classifier</literal>). The 
                    value is a specification of the semantics of the 
                    node.</para>

								</listitem>

								<listitem>

									<para><literal>derived</literal> (from the 
                    superclass, <literal>ModelElement</literal>). 
                    Values <literal>true</literal>, meaning the node is 
                    redundant&#8212;it can be formally derived from other 
                    elements, or <literal>false</literal> meaning it 
                    cannot.</para>

									<note>

										<para>Derived nodes still have their value in 
                      analysis to introduce useful names or concepts, 
                      and in design to avoid re-computation.</para>

									</note>

								</listitem>

							</itemizedlist>

							<note>

								<para>The UML <literal>Element</literal> metaclass 
                  from which all other model elements are derived includes 
                  the tagged element <literal>documentation</literal> 
                  which is handled by the <emphasis>documentation 
                  tab</emphasis> under ArgoUML</para>

							</note>

						</listitem>

					</varlistentry>

				</variablelist>

			</section>

			<section xml:id="s2.ref.node_property_toolbar">

				<title>Node Property Toolbar</title>

				<variablelist>

					<varlistentry>

						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/navigate_up.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Go up</literal>
						</term>

						<listitem>

							<para>Navigate up through the package structure.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/reception.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>New reception</literal>
						</term>

						<listitem>

							<para>This creates a new reception, navigating 
                immediately to the properties tab for that 
                reception.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/stereotype.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>New Stereotype</literal>
						</term>

						<listitem>

							<indexterm>
								<primary>Add Stereotype</primary>
							</indexterm>
							<indexterm>
								<primary>New Stereotype</primary>
							</indexterm>
							<indexterm>
								<primary>Create 
                New</primary>
								<secondary>Stereotype</secondary>
							</indexterm>
							<para>This creates a new Stereotype (see 
                <xref
									xlink:href="s1.ref.stereotype"
								 />) for the selected 
                node, navigating immediately to the properties tab for 
                that stereotype.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/property_delete.gif" format="GIF"
										 />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Delete</literal>
						</term>

						<listitem>

							<para>This deletes the node from the model</para>

							<warning>

								<para>This is a deletion from the model 
                  <emphasis>not</emphasis> just the diagram. To delete 
                  a node from the diagram, but keep it within the 
                  model, use the main menu <literal>Remove From 
                  Diagram</literal> (or press the Delete key).</para>

							</warning>

						</listitem>

					</varlistentry>

				</variablelist>

			</section>

			<section xml:id="s2.ref.node_property_fields">

				<title>Property Fields For Node</title>

				<variablelist>

					<varlistentry>

						<term>
							<literal>Name</literal>
						</term>

						<listitem>

							<para>Text box. The name of the node. The name of a 
                node has a leading capital letter, with words separated 
                by <quote>bumpy caps</quote>.</para>

							<note>

								<para>ArgoUML does not enforce this naming 
                  convention.</para>

							</note>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Stereotype</literal>
						</term>

						<listitem>

							<para>Drop down selector. Node is a type of classifier, 
                and so it has the default stereotypes of a classifier 
                as defined in the UML standard. ArgoUML provides the 
                standard stereotypes for a classifier: <literal>
                metaclass</literal>, <literal>powertype</literal>, 
                <literal>process</literal>, <literal>thread</literal> 
                and <literal>utility</literal>.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Navigate Stereotype</literal>
						</term>

						<listitem>

							<para><guiicon>
									<inlinemediaobject>
										<imageobject>
											<imagedata align="center"
												fileref="images/icons/navigate_stereotype.gif"
												format="GIF" />
										</imageobject>
									</inlinemediaobject>
								</guiicon> 
                icon. If a stereotype has been selected, this will 
                navigate to the stereotype property panel (see 
                <xref
									xlink:href="s1.ref.stereotype" />).</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Namespace</literal>
						</term>

						<listitem>

							<para>Drop down selector. Allows altering the namespace 
                for the node. This is the package hierarchy.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Modifiers</literal>
						</term>

						<listitem>

							<para>Check box, with entries <literal>
                abstract</literal>, <literal>leaf</literal> and 
                <literal>root</literal>.</para>

							<itemizedlist>

								<listitem>

									<para><literal>abstract</literal> is used to 
                    declare that this node cannot be instantiated, but 
                    must always be specialized. The name of an abstract 
                    node is displayed in italics on the diagram.</para>

								</listitem>

								<listitem>

									<para><literal>leaf</literal> indicates that this 
                    node cannot be further specialized.</para>

								</listitem>

								<listitem>

									<para><literal>root</literal> indicates the node 
                    can have no generalization.</para>

								</listitem>

							</itemizedlist>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Generalizations</literal>
						</term>

						<listitem>

							<para>Text area. Lists any node that 
                <emphasis>generalizes</emphasis> this node.</para>

							<para>Button&nbsp;1 double click navigates to the 
                generalization and opens its property tab.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Specializations</literal>
						</term>

						<listitem>

							<para>Text box. Lists any specialized node (i.e. for 
                which this node is a generalization.</para>

							<para>Button&nbsp;1 double click navigates to the 
                specialization and opens its property tab.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Residents</literal>
						</term>

						<listitem>

							<para>Text box. Lists any residents (see 
                <xref
									xlink:href="s1.ref.component"
								 />) designed to be 
                deployed on this type of node.</para>

							<para>Button&nbsp;1 double click navigates to the selected 
                entry.</para>

						</listitem>

					</varlistentry>

				</variablelist>

			</section>

		</section>

		<section xml:id="s1.ref.node_instance">

			<title>Node Instance</title>

			<para>A node instance is an instance of a node where component 
        instances (see <xref
					xlink:href="s1.ref.component_instance"
					 />) may 
        reside. In the UML metamodel <literal>NodeInstance</literal> is 
        a sub-class of <literal>Instance</literal> and is specifically 
        an instance that is derived from a node.</para>

			<para>A node instance is represented on a deployment diagram in 
        ArgoUML as a three dimensional box labeled with the node 
        instance name (if any) and node type, separated by a colon (
        <literal>:</literal>).</para>

			<tip>

				<para>It is the presence of the colon (<literal>:</literal>) 
          and the underlining of the name and type that distinguishes a 
          node instance from a node.</para>

			</tip>

			<section>

				<title>Node Instance Details Tabs</title>

				<para>The details tabs that are active for node instances are 
          as follows.</para>

				<variablelist>

					<varlistentry>

						<term>
							<literal>ToDoItem</literal>
						</term>

						<listitem>

							<para>Standard tab.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Properties</literal>
						</term>

						<listitem>

							<para>See 
                <xref
									xlink:href="s2.ref.node_instance_property_toolbar"
									 /> 
                and 
                <xref
									xlink:href="s2.ref.node_instance_property_fields"
								 /> 
                below.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Documentation</literal>
						</term>

						<listitem>

							<para>Standard tab.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Presentation</literal>
						</term>

						<listitem>

							<para>Standard tab. The <literal>Bounds:</literal> 
                field defines the bounding box for the node instance on 
                the diagram.</para>

							<warning>

								<para>Beware that in the current release of ArgoUML, 
                  the bounding box just refers to the front face of the 
                  cube. This means that the three dimensional top and 
                  side may be ignored, for example when determining the 
                  limits of a diagram for saving graphics.</para>

							</warning>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Source</literal>
						</term>

						<listitem>

							<para>Standard tab, containing just the name of the 
                node instance.</para>

							<caution>

								<para>A node instance should not generate any code, 
                  so having this tab active is probably a 
                  mistake.</para>

							</caution>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Tagged Values</literal>
						</term>

						<listitem>

							<para>Standard tab.</para>

							<note>

								<para>The UML <literal>Element</literal> metaclass 
                  from which all other model elements are derived includes 
                  the tagged element <literal>documentation</literal> 
                  which is handled by the <emphasis>documentation 
                  tab</emphasis> under ArgoUML</para>

							</note>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Checklist</literal>
						</term>

						<listitem>

							<para>Standard tab for an Instance.</para>

						</listitem>

					</varlistentry>

				</variablelist>

			</section>

			<section xml:id="s2.ref.node_instance_property_toolbar">

				<title>Node Instance Property Toolbar</title>

				<variablelist>

					<varlistentry>

						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/navigate_up.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Go up</literal>
						</term>

						<listitem>

							<para>Navigate up through the package structure.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/stereotype.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>New Stereotype</literal>
						</term>

						<listitem>

							<indexterm>
								<primary>Add Stereotype</primary>
							</indexterm>
							<indexterm>
								<primary>New Stereotype</primary>
							</indexterm>
							<indexterm>
								<primary>Create 
                New</primary>
								<secondary>Stereotype</secondary>
							</indexterm>
							<para>This creates a new Stereotype (see 
                <xref
									xlink:href="s1.ref.stereotype"
								 />) for the selected 
                node instance, navigating immediately to the properties 
                tab for that stereotype.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/property_delete.gif" format="GIF"
										 />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Delete</literal>
						</term>

						<listitem>

							<para>This deletes the node instance from the 
                model</para>

							<warning>

								<para>This is a deletion from the model 
                  <emphasis>not</emphasis> just the diagram. To delete 
                  an node instance from the diagram, but keep it within 
                  the model, use the main menu <literal>Remove From 
                  Diagram</literal> (or press the Delete key).</para>

							</warning>

						</listitem>

					</varlistentry>

				</variablelist>

			</section>

			<section xml:id="s2.ref.node_instance_property_fields">

				<title>Property Fields For Node Instance</title>

				<variablelist>

					<varlistentry>

						<term>
							<literal>Name</literal>
						</term>

						<listitem>

							<para>Text box. The name of the node instance. By 
                convention node instance names start with a lower case 
                letter and use bumpy caps to divide words within the 
                name.</para>

							<note>

								<para>ArgoUML does not enforce this naming 
                  convention.</para>

							</note>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Stereotype</literal>
						</term>

						<listitem>

							<para>Drop down selector. Node instance has no 
                stereotypes by default in the UML standard.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Navigate Stereotype</literal>
						</term>

						<listitem>

							<para><guiicon>
									<inlinemediaobject>
										<imageobject>
											<imagedata align="center"
												fileref="images/icons/navigate_stereotype.gif"
												format="GIF" />
										</imageobject>
									</inlinemediaobject>
								</guiicon> 
                icon. If a stereotype has been selected, this will 
                navigate to the stereotype property panel (see 
                <xref
									xlink:href="s1.ref.stereotype" />).</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Namespace</literal>
						</term>

						<listitem>

							<para>Drop down selector. Records the namespace for the 
                node instance. This is the package hierarchy.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Stimuli sent</literal>
						</term>

						<listitem>

							<para>(To Be Written).</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Stimuli Received</literal>
						</term>

						<listitem>

							<para>(To Be Written).</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Residents</literal>
						</term>

						<listitem>

							<para>Text box. Lists any residents (see 
                <xref
									xlink:href="s1.ref.component"
								 />) designed to be 
                deployed on this type of node.</para>

							<para>Button&nbsp;1 double click navigates to the selected 
                entry.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Classifiers</literal>
						</term>

						<listitem>

							<para>Text field. A Node instance type can be selected 
                here.</para>

							<caution>

								<para>ArgoUML V0.18 lists many more items in the 
                  dropdown list then solely Nodes. Beware to select 
                  Nodes only.</para>

							</caution>

						</listitem>

					</varlistentry>

				</variablelist>

			</section>

		</section>

		<section xml:id="s1.ref.component">

			<title>Component</title>

			<para>A component type represents a distributable piece of 
        implementation of a system, including software code (source, 
        binary, or executable) but also including business documents, 
        etc., in a human system. Components may be used to show 
        dependencies, such as compiler and run-time dependencies or 
        information dependencies in a human organization. In the UML 
        metamodel it is a sub-class of <literal>
        Classifier</literal>.</para>

			<para>A component is represented on a class diagram as a box 
        with two small rectangles protruding from its left side, 
        labeled with its name.</para>

			<section>

				<title>Component Details Tabs</title>

				<para>The details tabs that are active for components are as 
          follows.</para>

				<variablelist>

					<varlistentry>

						<term>
							<literal>ToDoItem</literal>
						</term>

						<listitem>

							<para>Standard tab.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Properties</literal>
						</term>

						<listitem>

							<para>See 
                <xref
									xlink:href="s2.ref.component_property_toolbar"
									 /> and 
                <xref
									xlink:href="s2.ref.component_property_fields"
								 /> 
                below.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Documentation</literal>
						</term>

						<listitem>

							<para>Standard tab.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Presentation</literal>
						</term>

						<listitem>

							<para>Standard tab. The <literal>Bounds:</literal> 
                field defines the bounding box for the component on the 
                diagram.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Source</literal>
						</term>

						<listitem>

							<para>Standard tab, but with no contents.</para>

							<caution>

								<para>A component should not generate any code, so 
                  having this tab active is probably a mistake.</para>

							</caution>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Tagged Values</literal>
						</term>

						<listitem>

							<para>Standard tab.</para>

							<note>

								<para>The UML <literal>Element</literal> metaclass 
                  from which all other model elements are derived includes 
                  the tagged element <literal>documentation</literal> 
                  which is handled by the <emphasis>documentation 
                  tab</emphasis> under ArgoUML</para>

							</note>

						</listitem>

					</varlistentry>

				</variablelist>

			</section>

			<section xml:id="s2.ref.component_property_toolbar">

				<title>Component Property Toolbar</title>

				<variablelist>

					<varlistentry>

						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/navigate_up.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Go up</literal>
						</term>

						<listitem>

							<para>Navigate up through the package structure.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/reception.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>New reception</literal>
						</term>

						<listitem>

							<para>This creates a new reception, navigating 
                immediately to the properties tab for that 
                reception.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/stereotype.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>New Stereotype</literal>
						</term>

						<listitem>

							<indexterm>
								<primary>Add Stereotype</primary>
							</indexterm>
							<indexterm>
								<primary>New Stereotype</primary>
							</indexterm>
							<indexterm>
								<primary>Create 
                New</primary>
								<secondary>Stereotype</secondary>
							</indexterm>
							<para>This creates a new Stereotype (see 
                <xref
									xlink:href="s1.ref.stereotype"
								 />) for the selected 
                component, navigating immediately to the properties tab 
                for that stereotype.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/property_delete.gif" format="GIF"
										 />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Delete</literal>
						</term>

						<listitem>

							<para>This deletes the component from the model</para>

							<warning>

								<para>This is a deletion from the model 
                  <emphasis>not</emphasis> just the diagram. To delete 
                  a component from the diagram, but keep it within the 
                  model, use the main menu <literal>Remove From 
                  Diagram</literal> (or press the Delete key).</para>

							</warning>

						</listitem>

					</varlistentry>

				</variablelist>

			</section>

			<section xml:id="s2.ref.component_property_fields">

				<title>Property Fields For Component</title>

				<variablelist>

					<varlistentry>

						<term>
							<literal>Name</literal>
						</term>

						<listitem>

							<para>Text box. The name of the component. The name of 
                a component has a leading capital letter, with words 
                separated by <quote>bumpy caps</quote>.</para>

							<note>

								<para>ArgoUML does not enforce this naming 
                  convention.</para>

							</note>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Stereotype</literal>
						</term>

						<listitem>

							<para>Drop down selector. Component is provided by 
                default with the UML standard stereotypes <literal>
                document</literal>, <literal>executable</literal>, 
                <literal>file</literal>, <literal>library</literal> and 
                <literal>table</literal>. ArgoUML also provides the 
                standard Classifier stereotypes, <literal>
                metaclass</literal>, <literal>powertype</literal>, 
                <literal>process</literal>, <literal>thread</literal> 
                and <literal>utility</literal>.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Navigate Stereotype</literal>
						</term>

						<listitem>

							<para><guiicon>
									<inlinemediaobject>
										<imageobject>
											<imagedata align="center"
												fileref="images/icons/navigate_stereotype.gif"
												format="GIF" />
										</imageobject>
									</inlinemediaobject>
								</guiicon> 
                icon. If a stereotype has been selected, this will 
                navigate to the stereotype property panel (see 
                <xref
									xlink:href="s1.ref.stereotype" />).</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Namespace</literal>
						</term>

						<listitem>

							<para>Drop down selector. Records and allows altering 
                the namespace for the component. This is the package 
                hierarchy.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Modifiers</literal>
						</term>

						<listitem>

							<para>Check box, with entries <literal>
                abstract</literal>, <literal>leaf</literal> and 
                <literal>root</literal>.</para>

							<itemizedlist>

								<listitem>

									<para><literal>Abstract</literal> is used to 
                    declare that this component cannot be instantiated, 
                    but must always be specialized.</para>

								</listitem>

								<listitem>

									<para><literal>Leaf</literal> indicates that this 
                    component cannot be further specialized.</para>

								</listitem>

								<listitem>

									<para><literal>Root</literal> indicates the node 
                    can have no generalization.</para>

								</listitem>

							</itemizedlist>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Generalizations</literal>
						</term>

						<listitem>

							<para>Text box. Lists any component that generalizes 
                this component.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Specializations</literal>
						</term>

						<listitem>

							<para>Text area. Lists any derived components, i.e 
                those for which this component is a 
                generalization.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Client Dependencies</literal>
						</term>

						<listitem>

							<para>Text area. Lists outgoing dependencies. Button&nbsp;1 
                double click navigates to the dependency.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Supplier Dependencies</literal>
						</term>

						<listitem>

							<para>Text area. Lists incoming dependencies. Button&nbsp;1 
                double click navigates to the dependency.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Residents</literal>
						</term>

						<listitem>

							<para>Text box. Lists any residents (see 
                <xref
									xlink:href="s1.ref.component"
								 />) designed to be 
                deployed on this type of node.</para>

							<para>Button&nbsp;1 double click navigates to the selected 
                entry.</para>

						</listitem>

					</varlistentry>

				</variablelist>

			</section>

		</section>

		<section xml:id="s1.ref.component_instance">

			<title>Component Instance</title>

			<para>A component instance is an instance of a component (see 
        <xref
					xlink:href="s1.ref.component"
					 />) which may reside on a node 
        instance (see <xref
					xlink:href="s1.ref.node_instance"
					 />). In the 
        UML metamodel <literal>ComponentInstance</literal> is a 
        sub-class of <literal>Instance</literal> and is specifically an 
        instance that is derived from a component.</para>

			<para>A component is represented on a class diagram as a box 
        with two small rectangles protruding from its left side, 
        labeled with its name.</para>

			<para>A component instance is represented on a sequence diagram 
        in ArgoUML as a box with two small rectangles protruding from 
        its left side labeled with the component instance name (if any) 
        and component type, separated by a colon (
        <literal>:</literal>).</para>

			<tip>

				<para>It is the presence of the colon (<literal>:</literal>) 
          and the underlining of the name and type that distinguishes a 
          component instance from a component.</para>

			</tip>

			<section>

				<title>Component Instance Details Tabs</title>

				<para>The details tabs that are active for component 
          instances are as follows.</para>

				<variablelist>

					<varlistentry>

						<term>
							<literal>ToDoItem</literal>
						</term>

						<listitem>

							<para>Standard tab.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Properties</literal>
						</term>

						<listitem>

							<para>See 
                <xref
									xlink:href="s2.ref.component_instance_property_toolbar"
									 />
                 and 
                <xref
									xlink:href="s2.ref.component_instance_property_fields"
								 />
                 below.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Documentation</literal>
						</term>

						<listitem>

							<para>Standard tab.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Presentation</literal>
						</term>

						<listitem>

							<para>Standard tab. The <literal>Bounds:</literal> 
                field defines the bounding box for the component on the 
                diagram.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Source</literal>
						</term>

						<listitem>

							<para>Standard tab, containing just the name of the 
                component instance.</para>

							<caution>

								<para>A component instance should not generate any 
                  code, so having this tab active is probably a 
                  mistake.</para>

							</caution>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Tagged Values</literal>
						</term>

						<listitem>

							<para>Standard tab.</para>

							<note>

								<para>The UML <literal>Element</literal> metaclass 
                  from which all other model elements are derived includes 
                  the tagged element <literal>documentation</literal> 
                  which is handled by the <emphasis>documentation 
                  tab</emphasis> under ArgoUML</para>

							</note>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Checklist</literal>
						</term>

						<listitem>

							<para>Standard tab for an Instance.</para>

						</listitem>

					</varlistentry>

				</variablelist>

			</section>

			<section xml:id="s2.ref.component_instance_property_toolbar">

				<title>Component Instance Property Toolbar</title>

				<variablelist>

					<varlistentry>

						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/navigate_up.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Go up</literal>
						</term>

						<listitem>

							<para>Navigate up through the package structure.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/stereotype.gif" format="GIF" />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>New Stereotype</literal>
						</term>

						<listitem>

							<indexterm>
								<primary>Add Stereotype</primary>
							</indexterm>
							<indexterm>
								<primary>New Stereotype</primary>
							</indexterm>
							<indexterm>
								<primary>Create 
                New</primary>
								<secondary>Stereotype</secondary>
							</indexterm>
							<para>This creates a new Stereotype (see 
                <xref
									xlink:href="s1.ref.stereotype"
								 />) for the selected 
                component instance, navigating immediately to the 
                properties tab for that stereotype.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<guiicon>
								<inlinemediaobject>
									<imageobject>
										<imagedata align="center"
											fileref="images/icons/property_delete.gif" format="GIF"
										 />
									</imageobject>
								</inlinemediaobject>
							</guiicon>
							<literal>Delete</literal>
						</term>

						<listitem>

							<para>This deletes the component instance from the 
                model</para>

							<warning>

								<para>This is a deletion from the model 
                  <emphasis>not</emphasis> just the diagram. To delete 
                  a component instance from the diagram, but keep it 
                  within the model, use the main menu <literal>Remove 
                  From Diagram</literal> (or press the Delete 
                  key).</para>

							</warning>

						</listitem>

					</varlistentry>

				</variablelist>

			</section>

			<section xml:id="s2.ref.component_instance_property_fields">

				<title>Property Fields For Component Instance</title>

				<variablelist>

					<varlistentry>

						<term>
							<literal>Name</literal>
						</term>

						<listitem>

							<para>Text box. The name of the component instance. By 
                convention component instance names start with a lower 
                case letter and use bumpy caps to divide words within 
                the name.</para>

							<note>

								<para>ArgoUML does not enforce this naming 
                  convention.</para>

							</note>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Stereotype</literal>
						</term>

						<listitem>

							<para>Drop down selector. Component instance has no 
                stereotypes by default in the UML standard.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Navigate Stereotype</literal>
						</term>

						<listitem>

							<para><guiicon>
									<inlinemediaobject>
										<imageobject>
											<imagedata align="center"
												fileref="images/icons/navigate_stereotype.gif"
												format="GIF" />
										</imageobject>
									</inlinemediaobject>
								</guiicon> 
                icon. If a stereotype has been selected, this will 
                navigate to the stereotype property panel (see 
                <xref
									xlink:href="s1.ref.stereotype" />).</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Namespace</literal>
						</term>

						<listitem>

							<para>Drop down selector. Records and allows to change 
                the namespace for the component instance. This is the 
                package hierarchy.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Stimuli sent</literal>
						</term>

						<listitem>

							<para>(To Be Written).</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Stimuli Received</literal>
						</term>

						<listitem>

							<para>(To Be Written).</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Residents</literal>
						</term>

						<listitem>

							<para>Text box. Lists any residents (see 
                <xref
									xlink:href="s1.ref.component"
								 />) designed to be 
                deployed on this component.</para>

							<para>Button&nbsp;1 double click navigates to the selected 
                entry.</para>

						</listitem>

					</varlistentry>

					<varlistentry>

						<term>
							<literal>Classifiers</literal>
						</term>

						<listitem>

							<para>Drop down selector. A Component instance type can 
                be selected here.</para>

							<caution>

								<para>ArgoUML V0.18 lists many more items in the 
                  dropdown list then solely Components. Beware to 
                  select Components only.</para>

							</caution>

						</listitem>

					</varlistentry>

				</variablelist>

			</section>

		</section>

		<section>

			<title>Dependency</title>

			<para>A key part of any component or deployment diagram is to 
        show dependencies. For details see 
        <xref
					xlink:href="s1.ref.dependency_class" />.</para>

			<caution>

				<para>UML relies on stereotyping of dependencies on component 
          and deployment diagrams to characterize the types of 
          relationship. In the current release of ArgoUML there are 
          limitations in the implementation of dependencies which limit 
          this functionality.</para>

			</caution>

		</section>

		<section>

			<title>Class</title>

			<para>A component diagram may show the key internal structure 
        of components, including classes within the component. For 
        details see <xref
					xlink:href="s1.ref.class_class" />.</para>

			<caution>

				<para>Classes can only be added to a component diagram if 
          they already exist in the model (by selecting them in the 
          explorer and executing the &quot;Add to diagram&quot; 
          button&nbsp;2 command). There is no way to create a new class on a 
          component diagram.</para>

			</caution>

		</section>

		<section>

			<title>Interface</title>

			<para>A component or deployment diagram may show components or 
        component instances which implement interfaces. For details see 
        <xref
					xlink:href="s1.ref.interface_class" />.</para>

			<caution>

				<para>The V0.18 release of ArgoUML uses the same 
          representation of an interface as a class diagram. The UML 
          standard suggests that an interface on a component or 
          deployment diagram should just be shown as a small open 
          circle, connected to the component which realizes that 
          interface.</para>

			</caution>

			<warning>

				<para>There is no way to show the linking of an interface to 
          a component or component instance in the V0.18 release of 
          ArgoUML.</para>

			</warning>

		</section>

		<section>

			<title>Association</title>

			<para>Components may be associated to each other. For details 
        about associations, see 
        <xref
					xlink:href="s1.ref.association_class" />.</para>

			<para>Where classes or interfaces are shown within components 
        on component diagrams, they may be shown linked by 
        associations.</para>

		</section>

		<section>

			<title>Object</title>

			<para>Just as components may show the classifiers that make up 
        their internal structure, component instances on deployment 
        diagrams may show the classifier instances that make up their 
        internal structure. In practice the only instance that is of 
        use is an object (an instance of a class). For details see 
        <xref
					xlink:href="s1.ref.object_sequence" />.</para>

		</section>

		<section>

			<title>Link</title>

			<para>Where objects (Node Instances or Class Instances) are 
        shown within component instances on deployment diagrams, their 
        inter-relationships may be shown as links (instances of an 
        association). See <xref
					xlink:href="s1.ref.link_sequence" /> for 
        details.</para>

		</section>

	</chapter>

	<chapter xml:id="ch.ref.entbuiltin">

		<title>Built In DataTypes, Classes, Interfaces and 
      Stereotypes</title>

		<section>

			<title>Introduction</title>

			<para>This chapter describes the datatypes, classes, interfaces 
        and stereotypes, which by default, are built in to 
        ArgoUML.</para>

			<para>Datatypes, classes and interfaces are generally available 
        for use anywhere a class may be selected in the properties tab. 
        The most common use is for return type and parameter types in 
        method signatures.</para>

			<section>

				<title>Package Structure</title>

				<para>ArgoUML datatypes, classes and interfaces are 
          effectively organized as a hierarchy beneath the overall 
          model itself. They are grouped in four packages, <literal>
          lang</literal>, <literal>math</literal>, <literal>
          net</literal> and <literal>util</literal>, themselves 
          subpackages of <literal>java</literal>, which is a subpackage 
          of the model itself. <xref
						xlink:href="fig.ref.entclasshier" /> 
          shows this structure.</para>

				<figure float="1" xml:id="fig.ref.entclasshier">

					<title>Hierarchy of datatypes, classes and interfaces 
            within ArgoUML</title>

					<screenshot><mediaobject><imageobject>
            <imagedata align="center" fileref="images/reference/entclasshier.gif" format="GIF" /></imageobject></mediaobject></screenshot>
				</figure>

			</section>

			<section>

				<title>Exposure in the model</title>

				<para>You will not find build-in DataTypes, Classes, and 
          Interfaces exposed within the model by default (i.e. they are 
          not present in the explorer). However, once you select one of 
          the built-in DataTypes, Classes, or Interfaces (in the 
          &quot;Type&quot; combo-box on the property sheet of a 
          parameter of an operation of a class), then it becomes 
          visible: you will find that the DataType, Class, or Interface 
          has appeared in the model, in its correct package stucture 
          for the latter 2.</para>

			</section>

		</section>

		<section>

			<title>Built In Datatypes</title>

			<para>These are the built in atomic types. You can change them 
        if you wish. However this is not good practice.</para>

			<para>All these can be found in the <literal>
        java.lang</literal> subpackage of the main model.</para>

			<caution>

				<para>You should be aware that these are Java datatypes. They 
          are not mandated by the UML standard.</para>

			</caution>

			<para>These are the standard datatypes. For their definition 
        refer to the Java standard.</para>

			<itemizedlist>

				<listitem>

					<para>
						<literal>boolean</literal>
					</para>

				</listitem>

				<listitem>

					<para>
						<literal>byte</literal>
					</para>

				</listitem>

				<listitem>

					<para>
						<literal>char</literal>
					</para>

				</listitem>

				<listitem>

					<para>
						<literal>double</literal>
					</para>

				</listitem>

				<listitem>

					<para>
						<literal>float</literal>
					</para>

				</listitem>

				<listitem>

					<para>
						<literal>int</literal>
					</para>

				</listitem>

				<listitem>

					<para>
						<literal>long</literal>
					</para>

				</listitem>

				<listitem>

					<para>
						<literal>short</literal>
					</para>

				</listitem>

				<listitem>

					<para>
						<literal>void</literal>
					</para>

				</listitem>

			</itemizedlist>

			<note>

				<para><literal>void</literal> is not strictly speaking a 
          type, but the absence of type. ArgoUML knows about void and 
          allows it as an option where a datatype may be 
          selected.</para>

			</note>

		</section>

		<section>

			<title>Built In Classes</title>

			<para>These are the common classes, corresponding to classes 
        defined within the standard Java environment. It is up to you 
        if you wish to change them.</para>

			<para>These are found in all four subpackages of the <literal>
        java</literal> subpackage.</para>

			<para>For a definition of these classes see the Java language 
        and library definitions.</para>

			<section>

				<title>Built In Classes From <literal>
          java.lang</literal></title>

				<para>These are the classes within the <literal>
          java.lang</literal> package.</para>

				<itemizedlist>

					<listitem>

						<para>
							<literal>Boolean</literal>
						</para>

					</listitem>

					<listitem>

						<para>
							<literal>Byte</literal>
						</para>

					</listitem>

					<listitem>

						<para>
							<literal>Char</literal>
						</para>

					</listitem>

					<listitem>

						<para>
							<literal>Double</literal>
						</para>

					</listitem>

					<listitem>

						<para>
							<literal>Float</literal>
						</para>

					</listitem>

					<listitem>

						<para>
							<literal>Integer</literal>
						</para>

					</listitem>

					<listitem>

						<para>
							<literal>Long</literal>
						</para>

					</listitem>

					<listitem>

						<para>
							<literal>Object</literal>
						</para>

					</listitem>

					<listitem>

						<para>
							<literal>Short</literal>
						</para>

					</listitem>

					<listitem>

						<para>
							<literal>String</literal>
						</para>

					</listitem>

				</itemizedlist>

			</section>

			<section>

				<title>Built In Classes From <literal>
          java.math</literal></title>

				<para>These are the classes within the <literal>
          java.math</literal> package.</para>

				<itemizedlist>

					<listitem>

						<para>
							<literal>Big Decimal</literal>
						</para>

					</listitem>

					<listitem>

						<para>
							<literal>Big Integer</literal>
						</para>

					</listitem>

				</itemizedlist>

			</section>

			<section>

				<title>Built In Classes From <literal>
          java.net</literal></title>

				<para>These are the classes within the <literal>
          java.net</literal> package.</para>

				<itemizedlist>

					<listitem>

						<para>
							<literal>URL</literal>
						</para>

					</listitem>

				</itemizedlist>

			</section>

			<section>

				<title>Built In Classes From <literal>
          java.util</literal></title>

				<para>These are the classes within the <literal>
          java.util</literal> package.</para>

				<itemizedlist>

					<listitem>

						<para>
							<literal>Vector</literal>
						</para>

					</listitem>

					<listitem>

						<para>
							<literal>Date</literal>
						</para>

					</listitem>

					<listitem>

						<para>
							<literal>Time</literal>
						</para>

					</listitem>

				</itemizedlist>

			</section>

		</section>

		<section>

			<title>Built In Interfaces</title>

			<para>These are some useful interfaces, corresponding to 
        classes defined within the standard Java environment. 
        Interfaces have many of the properties of classes (like all 
        types) and you can change them if you wish.</para>

			<para>All these can be found in the <literal>
        java.util</literal> subpackage of the main model.</para>

			<para>These are the interfaces defined within the <literal>
        java.util</literal> package. For their definition consult the 
        Java language and library references.</para>

			<itemizedlist>

				<listitem>

					<para>
						<literal>Collection</literal>
					</para>

				</listitem>

				<listitem>

					<para>
						<literal>Iterator</literal>
					</para>

				</listitem>

				<listitem>

					<para>
						<literal>List</literal>
					</para>

				</listitem>

				<listitem>

					<para>
						<literal>Set</literal>
					</para>

				</listitem>

				<listitem>

					<para>
						<literal>Sorted Set</literal>
					</para>

				</listitem>

			</itemizedlist>

		</section>

		<section>

			<title>Built In Stereotypes</title>

			<para>UML 1.4 defines a large number of stereotypes 
        of which most are 
        supported by ArgoUML.</para>

			<caution>

				<para>Not all stereotypes defined by UML&nbsp;1.4 appear in 
          ArgoUML V0.20 due to 
          the fact that they were not yet updated 
          from previous versions of ArgoUML 
          that only supported UML 1.3.
          Also, there are
          limitations in the current implementation of 
          some base elements. The table below lists all stereotypes defined 
          in UML 1.4 and if they are supported in 
          ArgoUML or not.</para>

			</caution>

			<caution>

				<para>The UML&nbsp;1.4 standard also specifies many stereotypes in 
          the chapters <quote>Example Profiles</quote>: one for 
          <quote>Software Development</quote> and one for 
          <quote>Business Modeling</quote>. Due to the specialized 
          nature of these profiles, implementation in ArgoUML is 
          postponed until a yet undetermined moment.</para>

			</caution>

			<table frame="all">

				<title>Stereotypes defined in UML 1.4 and ArgoUML</title>

				<tgroup cols="3">

					<thead>

						<row>
							<entry>
								<para>
									<emphasis>StereoType</emphasis>
								</para>
							</entry>
							<entry>
								<para>
									<emphasis>Base 
              Element</emphasis>
								</para>
							</entry>
							<entry>
								<para>
									<emphasis>ArgoUML 
              support</emphasis>
								</para>
							</entry>
						</row>

					</thead>

					<tbody>

						<row>
							<entry>
								<para>access</para>
							</entry>
							<entry>
								<para>Permission</para>
							</entry>
							<entry>
								<para>yes</para>
							</entry>
						</row>
						<row>
							<entry>
								<para>appliedProfile</para>
							</entry>
							<entry>
								<para>Package</para>
							</entry>
							<entry>
								<para>no</para>
							</entry>
						</row>
						<row>
							<entry>
								<para>association</para>
							</entry>
							<entry>
								<para>AssociationEnd</para>
							</entry>
							<entry>
								<para>yes</para>
							</entry>
						</row>
						<row>
							<entry>
								<para>auxiliary</para>
							</entry>
							<entry>
								<para>Class</para>
							</entry>
							<entry>
								<para>no</para>
							</entry>
						</row>
						<row>
							<entry>
								<para>become</para>
							</entry>
							<entry>
								<para>Flow</para>
							</entry>
							<entry>
								<para>no</para>
							</entry>
						</row>

						<row>
							<entry>
								<para>call</para>
							</entry>
							<entry>
								<para>Usage</para>
							</entry>
							<entry>
								<para>yes</para>
							</entry>
						</row>

						<row>
							<entry>
								<para>copy</para>
							</entry>
							<entry>
								<para>Flow</para>
							</entry>
							<entry>
								<para>no</para>
							</entry>
						</row>

						<row>
							<entry>
								<para>create</para>
							</entry>
							<entry>
								<para>BehavioralFeature</para>
							</entry>
							<entry>
								<para>yes</para>
							</entry>
						</row>

						<row>
							<entry>
								<para>create</para>
							</entry>
							<entry>
								<para>CallEvent</para>
							</entry>
							<entry>
								<para>yes</para>
							</entry>
						</row>

						<row>
							<entry>
								<para>create</para>
							</entry>
							<entry>
								<para>Usage</para>
							</entry>
							<entry>
								<para>yes</para>
							</entry>
						</row>

						<row>
							<entry>
								<para>derive</para>
							</entry>
							<entry>
								<para>Abstraction</para>
							</entry>
							<entry>
								<para>yes</para>
							</entry>
						</row>

						<row>
							<entry>
								<para>destroy</para>
							</entry>
							<entry>
								<para>BehavioralFeature</para>
							</entry>
							<entry>
								<para>yes</para>
							</entry>
						</row>

						<row>
							<entry>
								<para>destroy</para>
							</entry>
							<entry>
								<para>CallEvent</para>
							</entry>
							<entry>
								<para>yes</para>
							</entry>
						</row>

						<row>
							<entry>
								<para>document</para>
							</entry>
							<entry>
								<para>Abstraction</para>
							</entry>
							<entry>
								<para>no</para>
							</entry>
						</row>

						<row>
							<entry>
								<para>executable</para>
							</entry>
							<entry>
								<para>Abstraction</para>
							</entry>
							<entry>
								<para>no</para>
							</entry>
						</row>

						<row>
							<entry>
								<para>facade</para>
							</entry>
							<entry>
								<para>Package</para>
							</entry>
							<entry>
								<para>yes</para>
							</entry>
						</row>

						<row>
							<entry>
								<para>file</para>
							</entry>
							<entry>
								<para>Abstraction</para>
							</entry>
							<entry>
								<para>no</para>
							</entry>
						</row>
						<row>
							<entry>
								<para>focus</para>
							</entry>
							<entry>
								<para>Class</para>
							</entry>
							<entry>
								<para>no</para>
							</entry>
						</row>
						<row>
							<entry>
								<para>framework</para>
							</entry>
							<entry>
								<para>Package</para>
							</entry>
							<entry>
								<para>yes</para>
							</entry>
						</row>

						<row>
							<entry>
								<para>friend</para>
							</entry>
							<entry>
								<para>Permission</para>
							</entry>
							<entry>
								<para>yes</para>
							</entry>
						</row>

						<row>
							<entry>
								<para>global</para>
							</entry>
							<entry>
								<para>AssociationEnd</para>
							</entry>
							<entry>
								<para>yes</para>
							</entry>
						</row>
						<row>
							<entry>
								<para>implementation</para>
							</entry>
							<entry>
								<para>Class</para>
							</entry>
							<entry>
								<para>no</para>
							</entry>
						</row>
						<row>
							<entry>
								<para>implementation</para>
							</entry>
							<entry>
								<para>Generalization</para>
							</entry>
							<entry>
								<para>yes</para>
							</entry>
						</row>


						<row>
							<entry>
								<para>implicit</para>
							</entry>
							<entry>
								<para>Association</para>
							</entry>
							<entry>
								<para>yes</para>
							</entry>
						</row>

						<row>
							<entry>
								<para>import</para>
							</entry>
							<entry>
								<para>Permission</para>
							</entry>
							<entry>
								<para>yes</para>
							</entry>
						</row>

						<row>
							<entry>
								<para>instantiate</para>
							</entry>
							<entry>
								<para>Usage</para>
							</entry>
							<entry>
								<para>yes</para>
							</entry>
						</row>

						<row>
							<entry>
								<para>invariant</para>
							</entry>
							<entry>
								<para>Constraint</para>
							</entry>
							<entry>
								<para>no</para>
							</entry>
						</row>

						<row>
							<entry>
								<para>library</para>
							</entry>
							<entry>
								<para>Abstraction</para>
							</entry>
							<entry>
								<para>no</para>
							</entry>
						</row>

						<row>
							<entry>
								<para>local</para>
							</entry>
							<entry>
								<para>AssociationEnd</para>
							</entry>
							<entry>
								<para>yes</para>
							</entry>
						</row>

						<row>
							<entry>
								<para>metaclass</para>
							</entry>
							<entry>
								<para>Class</para>
							</entry>
							<entry>
								<para>no</para>
							</entry>
						</row>

						<row>
							<entry>
								<para>metamodel</para>
							</entry>
							<entry>
								<para>Package</para>
							</entry>
							<entry>
								<para>yes</para>
							</entry>
						</row>
						<row>
							<entry>
								<para>modelLibrary</para>
							</entry>
							<entry>
								<para>Package</para>
							</entry>
							<entry>
								<para>no</para>
							</entry>
						</row>

						<row>
							<entry>
								<para>parameter</para>
							</entry>
							<entry>
								<para>AssociationEnd</para>
							</entry>
							<entry>
								<para>yes</para>
							</entry>
						</row>

						<row>
							<entry>
								<para>postcondition</para>
							</entry>
							<entry>
								<para>Constraint</para>
							</entry>
							<entry>
								<para>no</para>
							</entry>
						</row>

						<row>
							<entry>
								<para>powertype</para>
							</entry>
							<entry>
								<para>Class</para>
							</entry>
							<entry>
								<para>no</para>
							</entry>
						</row>

						<row>
							<entry>
								<para>precondition</para>
							</entry>
							<entry>
								<para>Constraint</para>
							</entry>
							<entry>
								<para>no</para>
							</entry>
						</row>

						<row>
							<entry>
								<para>process</para>
							</entry>
							<entry>
								<para>Classifier</para>
							</entry>
							<entry>
								<para>yes</para>
							</entry>
						</row>
						<row>
							<entry>
								<para>profile</para>
							</entry>
							<entry>
								<para>Package</para>
							</entry>
							<entry>
								<para>no</para>
							</entry>
						</row>

						<row>
							<entry>
								<para>realize</para>
							</entry>
							<entry>
								<para>Abstraction</para>
							</entry>
							<entry>
								<para>yes</para>
							</entry>
						</row>

						<row>
							<entry>
								<para>refine</para>
							</entry>
							<entry>
								<para>Abstraction</para>
							</entry>
							<entry>
								<para>yes</para>
							</entry>
						</row>

						<row>
							<entry>
								<para>requirement</para>
							</entry>
							<entry>
								<para>Comment</para>
							</entry>
							<entry>
								<para>yes</para>
							</entry>
						</row>

						<row>
							<entry>
								<para>responsibility</para>
							</entry>
							<entry>
								<para>Comment</para>
							</entry>
							<entry>
								<para>yes</para>
							</entry>
						</row>

						<row>
							<entry>
								<para>self</para>
							</entry>
							<entry>
								<para>AssociationEnd</para>
							</entry>
							<entry>
								<para>yes</para>
							</entry>
						</row>

						<row>
							<entry>
								<para>send</para>
							</entry>
							<entry>
								<para>Usage</para>
							</entry>
							<entry>
								<para>yes</para>
							</entry>
						</row>

						<row>
							<entry>
								<para>signalflow</para>
							</entry>
							<entry>
								<para>ObjectFlowState</para>
							</entry>
							<entry>
								<para>yes</para>
							</entry>
						</row>
						<row>
							<entry>
								<para>source</para>
							</entry>
							<entry>
								<para>Abstraction</para>
							</entry>
							<entry>
								<para>no</para>
							</entry>
						</row>
						<row>
							<entry>
								<para>stateInvariant</para>
							</entry>
							<entry>
								<para>Constraint</para>
							</entry>
							<entry>
								<para>no</para>
							</entry>
						</row>

						<row>
							<entry>
								<para>stub</para>
							</entry>
							<entry>
								<para>Package</para>
							</entry>
							<entry>
								<para>yes</para>
							</entry>
						</row>

						<row>
							<entry>
								<para>systemModel</para>
							</entry>
							<entry>
								<para>Package</para>
							</entry>
							<entry>
								<para>yes</para>
							</entry>
						</row>

						<row>
							<entry>
								<para>table</para>
							</entry>
							<entry>
								<para>Abstraction</para>
							</entry>
							<entry>
								<para>no</para>
							</entry>
						</row>

						<row>
							<entry>
								<para>thread</para>
							</entry>
							<entry>
								<para>Classifier</para>
							</entry>
							<entry>
								<para>yes</para>
							</entry>
						</row>

						<row>
							<entry>
								<para>topLevel</para>
							</entry>
							<entry>
								<para>Package</para>
							</entry>
							<entry>
								<para>yes</para>
							</entry>
						</row>

						<row>
							<entry>
								<para>trace</para>
							</entry>
							<entry>
								<para>Abstraction</para>
							</entry>
							<entry>
								<para>yes</para>
							</entry>
						</row>

						<row>
							<entry>
								<para>type</para>
							</entry>
							<entry>
								<para>Class</para>
							</entry>
							<entry>
								<para>yes</para>
							</entry>
						</row>
					</tbody>
				</tgroup>
			</table>
		</section>
	</chapter>
</part>