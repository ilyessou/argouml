<?xml version="1.0" encoding="UTF-8" ?>
<!-- $Id$ -->
<!--
// Copyright (c) 1996-2006 The Regents of the University of California. All
// Rights Reserved. Permission to use, copy, modify, and distribute this
// software and its documentation without fee, and without a written
// agreement is hereby granted, provided that the above copyright notice
// and this paragraph appear in all copies.  This software program and
// documentation are copyrighted by The Regents of the University of
// California. The software program and documentation are supplied "AS
// IS", without any accompanying services from The Regents. The Regents
// does not warrant that the operation of the program will be
// uninterrupted or error-free. The end-user understands that the program
// was developed for research purposes and is advised not to rely
// exclusively on the program for any reason.  IN NO EVENT SHALL THE
// UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR DIRECT, INDIRECT,
// SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING LOST PROFITS,
// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
// SUCH DAMAGE. THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY
// WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
// PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
// CALIFORNIA HAS NO OBLIGATIONS TO PROVIDE MAINTENANCE, SUPPORT,
// UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
-->
<!DOCTYPE chapter [<!ENTITY dbcentx SYSTEM "../docbook-setup/docbookx/dbcentx.mod">]>
<chapter 
	xmlns="http://docbook.org/ns/docbook" 
	version="5.0" 
	xml:lang="en"
	xml:id="app.docstand"
	xmlns:xi="http://www.w3.org/2001/XInclude"
	xmlns:xlink="http://www.w3.org/1999/xlink">
	
	<title>Writing Documentation in the ArgoUML Project</title>

	<section>
		<title>Introduction</title>

		<para>The documentation (currently manual, cookbook, and quickguide) is written using <uri xlink:href="http://www.oasis-open.org/docbook">DocBook XML v5.0</uri>. This section covers some conventions for use of DocBook and for the documentation in general. It also includes some information for tooling configuration, e.g. for Emacs with the psgml package. </para>
	</section>

	<!-- Conventions for the document in general -->
	<section>
		<title>Style</title>

		<itemizedlist>
			<listitem>
				<para>"We" in the documents means the persons reading the document. For the Quick-guide and User Manual this means the user using ArgoUML. For the Cookbook this means the developer working with improving ArgoUML.</para>
			</listitem>
			<listitem>
				<para>"I" in the document refers to the author and is only used to denote the authors personal opinion. Avoid using it! </para>
			</listitem>
			<listitem>
				<para>Use the active voice.</para>
			</listitem>
			<listitem>
				<para>Use plain rather than elegant language.</para>
			</listitem>
			<listitem>
				<para>Use specific and concrete terms rather than vague generalities. </para>
			</listitem>
			<listitem>
				<para>Break up your writing in short sections. Each section dealing with one topic. </para>
			</listitem>
			<listitem>
				<para>Use the present tense.</para>
			</listitem>
			<listitem>
				<para>Opt for an informal rather than a formal style.</para>
			</listitem>
		</itemizedlist>
	</section>


	<section>
		<title>Document Conventions</title>

		<itemizedlist>
			<listitem>
				<!-- 
					I question the following convention.
					
					Capitalization is better left for CSS and XSL to impose.  
					It is trivial to do so, as well.  
					
					Also, it's really easy using CSS or XSL to set text to
					UPPERCASE, lowercase, or Capitalized Case, but not so easy 
					to do something like 
					
					Capitalization of Important Words but not Unimportant Words.
					
					So personally I think it's preferable to use the above
					capitazliation scheme; e.g. of most (but not all) words
					in the DocBook source, and then let stylesheets transform
					the source automagically as needed.
					
					~ Tony / "Zearin" 
					2007-11-28
				-->
				<para>All titles of chapters, sections etc. are capitalized throughout. </para>
			</listitem>

			<listitem>
				<para>All titles of figures, tables etc. have the first word only capitalized. </para>
			</listitem>

			<listitem>
				<para>Spelling is US English. (According to The Webster's Second Unabridged.) </para>
			</listitem>

			<listitem>
				<para>Use full URLs throughout all documents! Rationale: These documents may also be published in other formats than html on the ArgoUML web site. </para>
			</listitem>

			<listitem>
				<para>Do not include lists of what changes have been done to the files. This information is kept by the version control tool. This is changed since Jeremy Bennet did the work for the 0.9/0.10 User Manual and there might still exist such lists. Remove them while changing the files! </para>
				<para>The Cookbook has a Change Log (See <xref xlink:href="changelog.xml" />) that is updated for every significant change but that is for the purpose of making it easier for the readers. </para>
			</listitem>

			<listitem>
				<para>When problems in the current implementation of ArgoUML are mentioned or perhaps even emphasized using the <tag>warning</tag> tag, include the issue number in a sgml-comment in the source so that it is easy to know if this problem has been fixed when revising the document. The issue should be mentioned in the format <quote>issue xxx</quote>, i.e. there should only be a space between the word <quote>issue</quote> and the issue number. This allows the tigris web site to generate links when viewing the manual source. </para>
			</listitem>

			<listitem>
				<para>Do not write "currently". Better write either "in version 0.14" if you mean in the stable version 0.14 of ArgoUML or "in version &amp;argoversion;" if you mean in the current version of the document as defined in <filename>default.properties</filename> when the document is deployed. There are some old references to "current" or "currently" also. If you encounter them, try to remove them! </para>
			</listitem>

			<listitem>
				<para>For documents that contain an <quote>index</quote>, Add indexterms while doing changes. Creating the index is a good idea and we eventually should have indexterms all over. Initially, the manual was written without useing indexterms at all. They have been added generously on certain parts but that makes the index strangely biased. </para>
				<para>Capitalize the part of the indexterms that are terms. </para>
				<para>Don't use the tertiary level of the index terms but use only two alternatives: Only primary, and primary/secondary. If you are unsure when to use primary or primary/secondary use the small word approach. I.e. if the indexterm contains a small word (typically to, of, for, in) and normally not capitalized, let the secondary start with that small word. </para>
				<para>When using primary/secondary, see that you get the same kind of word as used before in the index (especially when it comes to differences in singular/plural-form). Also create other indexterm by turning the phrase to as many permutations that you can think of. </para>
			</listitem>

		</itemizedlist>
	</section>

	<!-- Conventions relating to DocBook -->

	<section>
		<title>DocBook Conventions</title>

		<itemizedlist>
			<listitem>
				<para>The top level document of the document is in <filename>documentname.xml</filename>. Each chapter (or preface, glossary, appendix etc) of the cookbook and the quickguide is a separate file, defined as a system entity and included from this top level file. The manual is one big file: <filename>manual.xml</filename> </para>
			</listitem>

			<listitem>
				<para>There may be some useful entities defined for common terms in the beginning of this top level document. </para>
				<para>E.g. for the cookbook: The use of <tag>&amp;argouml;</tag> will ensure consistent naming of the product (ArgoUML) and allow us to change it later (to Argo/UML, Argouml or whatever). </para>
				<para>In the build script there is some magic that translates @tagname@ to a real value. E.g. @VERSION@ in the <filename>documentname.xml</filename> file into <replaceable>0.16</replaceable>. </para>
			</listitem>

			<listitem>
				<para>XML comments are used throughout to explain what various sections are trying to achieve. </para>
			</listitem>

			<listitem>
				<para>Cross-referencing requires use of <literal>id.</literal> attributes. Many of these used in the manual are of the following format, but the use of this format is not obligatory any more. </para>
				<para>To avoid confusion, use a prefix of <literal>ch.</literal> for <tag>chapter</tag>, <literal>app.</literal> for <tag>appendix</tag>, <literal>s.</literal> for <tag>sect1</tag> through <tag>sect5</tag>, <literal>fig.</literal> for <tag>figure</tag>, <literal>tab.</literal> for <tag>table</tag> and <literal>gl</literal> for <tag>glossentry</tag>. </para>
				<para>A second prefix of <literal>tut.</literal> or <literal>ref.</literal> is allowed to distinguish tutorial and reference material. The remainder of the tag should be descriptive, but concise with words separate by underscore. Where a graphic is involved this remainder should correspond to the file name. For example <literal>fig.ref.navigation_pane</literal> for a figure showing the explorer, with the diagram in <literal>navigation_pane.gif</literal></para>
				<para>There is one exception to this and that is the description of the critics in the manual. Each paragraph about a critic is instead marked with <literal>critics.</literal> followed by the classname implementing that critic. The reason for this is that the intention is to have the manual accessable when pressing the Help button on that critic. Generating a link to the correct place in the manual is easier if the classname need not undergo some kind of textual transformation and the implementation doesn't care if a a specific critic is described in a <tag>sect1</tag>, <tag>sect2</tag>, <tag>sect3</tag>, or <tag>sect4</tag>. Reorganizing the manual would otherwise affect also the java code. The conversion to the correct tagname or really the correct URL is currently implemented in the <literal>defaultMoreInfoURL()</literal> method in the <literal>org.argouml.cognitive.critics.Critic</literal> class. </para>
			</listitem>

			<listitem>
				<para>Only use <tag>glossterm</tag> (for the term <emphasis>or</emphasis> its abbreviation/acronym), <tag>glossdef</tag> and <tag>glossseealso</tag> within <tag>glossentry</tag>. Other entries are not implemented in the style sheets and so do not appear in the glossary! </para>
			</listitem>

			<listitem>
				<para>Use spaces rather than tabs. Tabs are generally set so large the text moves over to the right of the page, and are not set the same everywhere (emacs uses 8 spaces, some MS editors use 6 spaces), making documents unreadable between users. </para>
			</listitem>

			<!--
      	listitem>
      		<para>This does not apply to the manual any more (it now uses standard formatting as supported by most xml editors): Indent only the tags, not the text. The Docbook source is kept in subversion that is a line-oriented tool. This means that reindentation will be a major thing in subversion making it hard to see if there were other things done to the code. Especially if reindentation caused the paragraphs to be broken in a different way. Not indenting the text means that the text will be unchanged even if the heading level was changed. The contributions that Jeremy Bennet did for the 0.10 User Manual are not indented like this. Change it while changing the paragraphs. </para>
    	</listitem
      -->

			<listitem>
				<para>The indentation size is 2. </para>
			</listitem>

			<listitem>
				<para>Make a new line after each sentence or before expressions. The Docbook source is source that is handled by subversion. When structuring the text the parts are paragraphs, sentences and words. By having each sentence on a line of its own it is easier to see which sentences have been changed and which have not in the <literal>diff</literal> reports from subversion. The contributions that Jeremy Bennet did for the 0.10 User Manual are not written like this. Change it while changing the paragraphs. </para>
			</listitem>

			<listitem>
				<para>All block graphics should be encapsulated within <tag>figure</tag>, allowing reference from around the text. Set attribute <tag>float</tag> to 1 to allow the figure to float (makes life easier for printed version). </para>
			</listitem>

			<listitem>
				<para>All block graphics should be provided through <tag>mediaobject</tag> and provided with both an <tag>imageobject</tag> and comprehensive description in a <tag>textobject</tag>. This gives the potential of meaningful content where a diagram cannot be displayed for any reason. Where appropriate the <tag>mediaobject</tag> should be wrapped by <tag>screenshot</tag>. </para>
			</listitem>

			<listitem>
				<para>Inline graphics can be done through <tag>inlinegraphic</tag>, rather <tag>inlinemediaobject</tag>. A textual alternative is of little value in these circumstances. Where appropriate the <tag>mediaobject</tag> should be wrapped by <tag>guiicon</tag>
				</para>
			</listitem>

			<!--listitem><para>In general use <sgmltag>literal</sgmltag> for computer
        related text (input and output). There are a huge number of possible
        specialist tags, but I suggest restriction to the following list:
      <sgmltag>filename</sgmltag> and <sgmltag>application</sgmltag>.
    </para></listitem-->
		</itemizedlist>
	</section>

	<!-- Conventions relating to use of eclipse -->

	<section>
		<title>For Eclipse Users</title>

		<para>If you use the Eclipse, then the XML editor that comes with the Eclipse <emphasis>Tools Platform (WTP)</emphasis> project allows comfortable editing. </para>
		<para>Regretfully, the docbook-validation of this editor (as any other suitable editor that has been evaluated) currently does not support the way the cookbook and quickguide are divided in seperate XML files. The manual consists of one single XML file, so it does not have this problem. </para>
	</section>

	<!-- Conventions relating to use of emacs -->

	<section>
		<title>For Emacs Users</title>

		<para>If you use the psgml library within emacs, then editing and verifying XML gets easier. Information on using this facility is inluded with psgml. </para>

		<itemizedlist>
			<listitem>
				<para>Emacs' local variables appear in a few lines of comment at the bottom of each XML file. Please don't delete these! </para>
			</listitem>

			<listitem>
				<para>Adding <literal>(setq sgml-set-face t)</literal> to your <filename>.emacs</filename> file will cause all tags and entities to appear in boldface. </para>
			</listitem>

			<listitem>
				<para>Adding <literal>(setq sgml-auto-activate-dtd t)</literal> to your <filename>.emacs</filename> file will ensure the DocBook DTD is parsed as soon as the file is loaded. </para>
			</listitem>
		</itemizedlist>
	</section>

	<!-- 
		An overview of how the manual should be written 
	-->
	<section xml:id="user-manual-plans">
		<title>User Manual Plans</title>
		<!-- Target audiences -->

		<para>The User Manual is a very separate part of the ArgoUML project. It is independent of the rest of the project w.r.t. updates, deliveries, ambition and plans. The development of the User Manual is more or less a project of its own. Since autumn 2003 we also have an appointed sub project leader for this. This Responsibility is called Editor for the User Manual and Quick Guide and is held by Michiel van der Wulp. </para>
		<para>This section describes the ambition and plans for the User Manual. </para>

		<section>
			<title>Target Audiences for the User Manual</title>

			<para>Target audiences are the following:</para>

			<itemizedlist>
				<listitem>
					<para>Experienced users of UML in Object-Oriented Analysis and Design (perhaps with other tools) who wish to transfer to ArgoUML. </para>
				</listitem>

				<listitem>
					<para>Designers who know Object-Oriented Analysis and Design, and wish to adopt a UML based process. </para>
				</listitem>
			</itemizedlist>

			<para>In the longer term it would be desirable to also target the following. </para>

			<itemizedlist>
				<listitem>
					<para>Those who are learning design and wish to start with a UML based Object-Oriented Analysis and Design process. </para>
				</listitem>

				<listitem>
					<para>People interested in modularized code design with a GUI. </para>
				</listitem>
			</itemizedlist>
		</section>

		<!-- 
			Goals 
		-->
		<section>
			<title>Goals for the User Manual</title>

			<para>The goals are (in priority order):</para>

			<orderedlist>
				<listitem>
					<para>A tutorial style explanation of ArgoUML in the context of an Object-Oriented Analysis and Design process. </para>
				</listitem>

				<listitem>
					<para><emphasis>Descriptive</emphasis> reference material on all components of ArgoUML </para>
				</listitem>

				<listitem>
					<para>Keep boundaries clearly defined, to avoid duplication with the Cookbook, FAQ, Quick Guide, on-line help etc. </para>
				</listitem>

			</orderedlist>

			<para>I (probably Jeremy Bennet in 2002?) think the existing User Manual is a good start particularly towards the second of these goals. </para>

			<!-- Non-Goals -->

			<section>
				<title>What the User Manual is not (currently)</title>

				<para>To keep the effort feasible the user manual should avoid the following (at least initially). </para>

				<itemizedlist>
					<listitem>
						<para>Providing a quick overview&#8212;the Quick Guide already does this. </para>
					</listitem>

					<listitem>
						<para>Listing all the errors and what they mean. The help system does this&#8212;one day the manual will link to that. </para>
					</listitem>

					<listitem>
						<para>Explaining the internal workings of ArgoUML. The cookbook, combined with Jason Robbins dissertation is already a good start for this. </para>
					</listitem>
				</itemizedlist>
			</section>
		</section>

		<!-- Structure -->

		<section>
			<title>Suggested Manual Structure</title>

			<para>Here are my (Jeremy Bennet, 2002?) thoughts. I think the user manual is really a set of two books, the tutorial manual (corresponding to Part I of the current manual), and the reference manual (Part II of the current manual) </para>

			<para>I (Jeremy Bennet, 2002?) suggest that the tutorial book be based around an Object-Oriented Analysis and Design process (any preferences), and that each UML concept is introduced with each step of the process, followed by an explanation of how to do it under ArgoUML. A <emphasis>simple</emphasis>case study will be needed throughout. </para>

			<section>
				<title>Tutorial Manual Structure</title>

				<orderedlist>

					<!-- Introduction puts everything into context -->

					<listitem>
						<para>Introduction</para>
						<orderedlist>

							<listitem>
								<para>Origins and overview of ArgoUML</para>
							</listitem>

							<listitem>
								<para>Scope of the User Manual. Include cross-reference to other documentation (Cookbook, FAQ, Quick Guide, on-line help, ArgoUML website etc). </para>
							</listitem>

							<listitem>
								<para>Overview of the User Manual. Explains that ArgoUML will be explained in the context of an Object-Oriented Analysis and Design process, and with an example running through. </para>
							</listitem>

							<listitem>
								<para>Assumptions. At this stage assume the user knows Object-Oriented Analysis and Design, but not UML. </para>
							</listitem>

						</orderedlist>
					</listitem>

					<!-- 
						Need to explain how we're going to go about learning &argouml; 
					-->

					<listitem>
						<para>UML Based Object-Oriented Analysis and Design</para>

						<orderedlist>

							<listitem>
								<para>Background to UML &#8212; what it is, history etc. </para>
							</listitem>

							<listitem>
								<para>UML based processes for Object-Oriented Analysis and Design</para>
							</listitem>

							<listitem>
								<para>ArgoUML Basics &#8212; projects, drawing, exploring, details </para>
							</listitem>

							<listitem>
								<para>What ArgoUML has that other tools are missing (critics, to-do list, based in cognitive psychology theory). </para>
							</listitem>

							<listitem>
								<para>The Case Study</para>
							</listitem>

						</orderedlist>
					</listitem>

					<!-- 
						Diagrams associated with requirements capture.
						This will include a lot of &argouml; stuff, 
						since you hit this at the first diagram.
					-->

					<listitem>
						<para>Requirements Capture</para>
						
						<orderedlist>
							<listitem>
								<para>Use Case Diagrams (this section will be relatively large, because its the first time we use ArgoUML to create something). </para>
							</listitem>
						</orderedlist>
					</listitem>

					<!-- 
						Diagrams for analysis. What goes where is a bit 
						dependent on the specific process. 
					-->

					<listitem>
						<para>Analysis</para>
						
						<orderedlist>
							<listitem>
								<para>Concept Class Diagrams</para>
							</listitem>

							<listitem>
								<para>System Sequence Charts and Collaboration Diagrams</para>
							</listitem>

							<listitem>
								<para>System State-chart Diagrams</para>
							</listitem>
						</orderedlist>
					</listitem>

					<!-- 
						Design 
					-->

					<listitem>
						<para>Design</para>

						<orderedlist>
							<listitem>
								<para>Class Diagrams for Realization</para>
							</listitem>

							<listitem>
								<para>Sequence Charts and Collaboration Diagrams for Realization </para>
							</listitem>

							<listitem>
								<para>State-chart Diagrams for realization</para>
							</listitem>

							<listitem>
								<para>Package Diagrams</para>
							</listitem>
						</orderedlist>
					</listitem>

					<!-- Build -->

					<listitem>
						<para>Build</para>

						<orderedlist>
							<listitem>
								<para>Deployment Diagrams</para>
							</listitem>

							<listitem>
								<para>Code Generation in ArgoUML</para>
							</listitem>
						</orderedlist>
					</listitem>
				</orderedlist>
			</section>

			<!-- 
				What needs to be in the Reference Manual 
			-->

			<section>
				<title>Reference Manual Structure</title>

				<orderedlist>
					<listitem>
						<para>Material on each of the diagram types, each of the artifacts that can appear on the diagrams and details of the features of each artifact type. </para>
					</listitem>

					<listitem>
						<para>An Index</para>
					</listitem>
				</orderedlist>
			</section>
		</section>

		<!-- What we need to do to get to a final manual -->

		<section>
			<title>Actions, Priorities and Questions</title>

			<para>This section has two serious problems. Firstly, I (Linus Tolke, 2004) think Jeremy Bennet wrote this and then started and has completed a lot of the items so they could be checked off. Secondly, keeping this list in a docbook document is not a good idea. It is better to make issues in Issuezilla of it that can be individually closed. I (Linus Tolke 2004) will make issues of the things I think are left to be done and remove this section (unless someone beats me to it). I (Linus Tolke 2006) am still hoping that someone will beat me to it. </para>

			<section>
				<title>Actions and priorities</title>

				<para>Here's my first call for what needs to be done in priority order. From the comments made over the last few days I think the first 5 items won't take very long, meaning effort can concentrate on the main stuff. </para>

				<orderedlist>
					<listitem>
						<para>Get buy-in for the approach. (Completed)</para>
					</listitem>

					<listitem>
						<para>Agree document structure (broadly). (Completed)</para>
					</listitem>

					<listitem>
						<para>Choose a suitable example to run throughout.</para>
					</listitem>

					<listitem>
						<para>Break into several files (XML entities) to make the manual more manageable. (Completed and then joined again.) </para>
					</listitem>

					<listitem>
						<para>Identify all existing sources of material to be reused</para>
					</listitem>

					<listitem>
						<para>Get writing! I (Jeremy Bennet 2002?) suggest the priorities here are: </para>

						<orderedlist>
							<listitem>
								<para>User Manual sections relating to ArgoUML diagrams and artifacts (assume the reader knows UML already, and allows a quick advance by pulling together a lot of existing material). </para>
							</listitem>

							<listitem>
								<para>User Manual examples</para>
							</listitem>

							<listitem>
								<para>User Manual sections relating to additional ArgoUML cognitive design features. </para>
							</listitem>

							<listitem>
								<para>User Manual sections relating to UML (for readers who don't know UML). </para>
							</listitem>

							<listitem>
								<para>Completion of Reference Manual material.</para>
							</listitem>
						</orderedlist>
					</listitem>

					<listitem>
						<para>Create an index. (Completed)</para>
					</listitem>
				</orderedlist>
			</section>

			<!-- What questions still need answering -->

			<section>
				<title>Remaining Questions</title>

				<orderedlist>
					<listitem>
						<para>The current manual shows copyright held by Phillipe, and no legal notice. What is the position of this material? (Solved) </para>
					</listitem>
				</orderedlist>
			</section>
		</section>
	</section>
</chapter>
<!-- Local stuff for Emacs - please do not delete

Local Variables:
mode: xml
sgml-doctype: "cookbook.xml"
sgml-parent-document: ("cookbook.xml" "chapter" nil)
sgml-validate-command: "nsgmls -wxml -sv ../docbook-setup/xml.dcl \
  cookbook.xml"
indent-tabs-mode: nil
End:

-->