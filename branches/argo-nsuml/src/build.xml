<?xml version="1.0"?>

<!-- ===========================================================================


                           * ================== *
                           |  How to build Argo |
                           * ================== *

           Adaption from the FOP build.xml written by Stefano Mazzocchi
                by Giacomo Pati with some addition by Fotis Jannidis
	   Adapted by Andreas Rueckert


Introduction
============

ArgoUML is a free UML tool. It is written entirely in Java.
The homepage of Argo is http://argouml.tigris.org

Installing the build tools
==========================

Ant is a little but very handy tool that uses a build file written in XML
(this file) as building instructions. For more information refer to
"http://jakarta.apache.org/ant/". (Essentially this is just setting ANT_HOME
to the directory where you extracted the ant-distribution, and adding
ANT_HOME/bin to your PATH.)

Additionaly you have to make sure, that the "JAVA_HOME" environment
property should be set to match the JVM you want to use. That's it.


Building instructions
=====================

First, make sure your current working directory is where this very file is 
located. Then just type

ant 

if everything is right and all the required packages are visible, this action
will show you a usage message.

You can have a ".ant.properties" file in your home directory (for Windows users:
this is "c:\") using which you can change certain properties, most notably the
compiler you want to use. Just add the line

build.compiler=jikes
(without a blank after "jikes"!)

to this .ant.properties file and you'll use jikes.

If you want to compile ArgoUML, you need to have following:
- your compiler in your PATH
- JAVA_HOME correcty set to where Java2 is installed
- ANT_HOME correctly set to where ANT is installed
- the additional libraries (nsuml.jar, ocl-argo.jar, xml4j.jar) in argouml/lib

If something went wrong, go to the FAQ section below.

Also, you'll note that reusing a single JVM instance for each task, increases
tremendously the performance of the whole build system, compared to other
tools (i.e. make or shell scripts) where a new JVM is started for each task.



Build targets
=============

These are the meaningful targets for this build file:

 - compile -> compiles your source code to ../build/classes
 - package -> creates ../build/argouml.jar
 - usage -> shows a help screen
 - dist -> generates the ArgoUML distribution
 - clean -> restores the distribution to its original and clean state
 - run -> runs ArgoUML from your compiled code

====================================== FAQ =====================================

1) Why some of the classes present in the original jar are not built anymore?

The ArgoUML build system is very flexible: if a module requires a package that
is not present in the classpath at build time, the module is skipped but
the built process is not stopped.

2) I see a lot of warnings starting like this: "Warning: file modified in the future:"
Sometimes ant gives out this warnings, but the build is finished without any problems


============================================================================ -->

<project default="usage" basedir=".">

  <!-- =================================================================== -->
  <!-- Initialization target                                               -->
  <!-- =================================================================== -->
  <target name="init">
    <tstamp/>
    <property name="Name" value="ArgoUML"/>
    <property name="name" value="argouml"/>
    <property name="version" value="0.8.1a"/>
    <property name="year" value="1999-2000"/>

    <echo message="------------------- ${Name} ${version} [${year}] ----------------"/>

    <property name="debug" value="off"/>
    <property name="optimize" value="on"/>
    <property name="deprecation" value="off"/>

    <property name="src.dir" value="../src"/>
    <property name="docs.dir" value="../docs"/>
    <property name="lib.dir" value="../lib"/> 

    <property name="classpath" value="${lib.dir}/nsuml.jar:${lib.dir}/ocl-argo.jar:${lib.dir}/xml4j.jar"/> 
    <property name="packages" value="uci.* Acme.*"/>

    <property name="manifest" value="./uci/argouml.mf"/>

    <property name="build.dir" value="../build"/>
    <property name="build.src" value="../src"/>
    <property name="build.dest" value="../build/classes"/>

    <property file="${user.home}/.ant.properties" />
    <property name="ignore_this" value="ignore_this.java"/>

    <filter token="${replacestring}" value="${build.src}/${replacestring}"/>
  </target>

  <!-- =================================================================== -->
  <!-- Help on usage                                                       -->
  <!-- =================================================================== -->
  <target name="usage">
    <echo message=""/>
    <echo message=""/>
    <echo message="${Name} Build file"/>
    <echo message="-------------------------------------------------------------"/>
    <echo message=""/>
    <echo message=" available targets are:"/>
    <echo message=""/>
    <echo message="   package   --> generates the ${name}.jar file"/>
    <echo message="   compile   --> compiles the source code"/>
    <echo message="   dist      --> generates the ${Name} distribution as .tar.gz and .zip"/>
    <echo message="   clean --> cleans up the directory"/>
    <echo message="   run       --> runs ArgoUML from compiled source"/>
    <echo message="   usage     --> show this message (default)"/>
    <echo message=""/>
    <echo message=" See the comments inside the build.xml file for more details."/>
    <echo message="-------------------------------------------------------------"/>
    <echo message=""/>
    <echo message=""/>
  </target>

  <!-- =================================================================== -->
  <!-- Prepares the build directory                                        -->
  <!-- =================================================================== -->
  <target name="prepare" depends="init">
    <!-- create directories -->
    <echo message="Preparing the build directories"/>
    <mkdir dir="${build.dir}"/>
    <copy todir="${build.dest}/uci/Images">
      <fileset dir="${build.src}/uci/Images" includes="**/**" excludes="CVS/**" />
    </copy>
    <copy todir="${build.dest}/uci/xml/dtd">
      <fileset dir="${build.src}/uci/xml/dtd" includes="**/**" excludes="CVS/**" />
    </copy>
    <copy file="${build.src}/uci/uml/ui/argo.ini" tofile="${build.dest}/uci/uml/ui/argo.ini" />
  </target>

  <!-- =================================================================== -->
  <!-- Update from CVS                                                     -->
  <!-- =================================================================== -->
  <!-- <target name="compile" depends="prepare"> -->

  <target name="update" depends="prepare">
    <echo message="Updating from CVS "/>
    <cvs dest="${src.dir}"
	 command="update"
    />
  </target>

  <!-- =================================================================== -->
  <!-- Compiles the source directory                                       -->
  <!-- =================================================================== -->
  <!-- <target name="compile" depends="prepare"> -->

  <target name="compile" depends="prepare">
    <echo message="Compiling the sources using ${build.compiler}"/>
    <!-- create directories -->
    <mkdir dir="${build.dest}"/>

    <javac srcdir="${build.src}"
           destdir="${build.dest}"
	   classpath="${classpath}" 
           debug="${debug}"
           deprecation="${deprecation}"
           optimize="${optimize}"
           excludes="**/${ignore_this}"/>
  </target>

  <!-- =================================================================== -->
  <!-- Creates the class package                                           -->
  <!-- =================================================================== -->
  <target name="package" depends="compile">
    <echo message="Creating the jar file ${build.dir}/${name}.jar"/>
    <jar jarfile="${build.dir}/${name}.jar"
         basedir="${build.dest}"
         includes="uci/** Acme/**"
         excludes="*.txt,*.bat,*.xml,*.sh,${manifest}"
         manifest="${manifest}"/>
    <copy todir="${build.dir}">
      <fileset dir="${lib.dir}" />
    </copy>
  </target>

  <!-- =================================================================== -->
  <!-- Prepares the docs                                                   -->
  <!-- =================================================================== -->
  <target name="prepare-docs" depends="init">
    <mkdir dir="${build.docs}"/>
  </target>

  <!-- =================================================================== -->
  <!-- Creates the distribution                                            -->
  <!-- =================================================================== -->
  <target name="dist" depends="package">
    <echo message="Building the distribution files (zip,tar)"/>
    <zip zipfile="../${Name}-${version}.zip" basedir="${build.dir}" includes="gef.jar nsuml.jar xml4j.jar ocl-argo.jar argouml.jar"/>
    <tar tarfile="../${Name}-${version}.tar" basedir="${build.dir}" includes="gef.jar nsuml.jar xml4j.jar ocl-argo.jar argouml.jar"/>
    <gzip zipfile="../${Name}-${version}.tar.gz" src="../${Name}-${version}.tar" />
    <delete file="../${Name}-${version}.tar"/>
  </target>

  <!-- =================================================================== -->
  <!-- Creates the source distribution                                            -->
  <!-- =================================================================== -->
  <target name="dist-src" depends="init">
    <echo message="Building the source distribution files (zip,tar)"/>
    <zip zipfile="../${Name}-${version}-src.zip" basedir="${src.dir}/.." excludes="**/.*/** **/.* **/*% **/*~ **/*.shared* **/*.proj* **/*.ref.* **/*.bak" includes="src/**"/>
    <tar tarfile="../${Name}-${version}-src.tar" basedir="${src.dir}/.." excludes="**/.*/** **/.* **/*% **/*~ **/*.shared* **/*.proj* **/*.ref.* **/*.bak" includes="src/**"/>
    <gzip zipfile="../${Name}-${version}-src.tar.gz" src="../${Name}-${version}-src.tar" />
    <delete file="../${Name}-${version}-src.tar"/>
  </target>

  <!-- =================================================================== -->
  <!-- Creates the lib distribution                                            -->
  <!-- =================================================================== -->
  <target name="dist-lib" depends="init">
    <echo message="Building the library distribution files (zip,tar)"/>
    <zip zipfile="../${Name}-${version}-libs.zip" basedir="${lib.dir}/.." includes="lib/gef.jar lib/nsuml.jar lib/xml4j.jar lib/ocl-argo.jar" />
    <tar tarfile="../${Name}-${version}-libs.tar" basedir="${lib.dir}/.." includes="lib/gef.jar lib/nsuml.jar lib/xml4j.jar lib/ocl-argo.jar" />
    <gzip zipfile="../${Name}-${version}-libs.tar.gz" src="../${Name}-${version}-libs.tar" />
    <delete file="../${Name}-${version}-libs.tar"/>
  </target>                                                                                                            

  <!-- =================================================================== -->
  <!-- Creates the whole distribution                                            -->
  <!-- =================================================================== -->
  <target name="dist-all" depends="dist,dist-src,dist-lib"/>

  <!-- =================================================================== -->
  <!-- Clean targets                                                       -->
  <!-- =================================================================== -->
  <target name="clean" depends="init">
    <deltree dir="${build.dir}"/>
  </target>

  <target name="distclean" depends="clean">
    <deltree dir="${dist.dir}"/>
    <delete>
       <fileset dir=".." includes="${Name}-${version}*" />
    </delete>
  </target>


  <!-- =================================================================== -->
  <!-- Run ArgoUML from compiled sources                                   -->
  <!-- =================================================================== -->
  <target name="run" depends="compile">
    <echo message="--- Executing ArgoUML ---"/>
    <java classname="uci.uml.Main"
          fork="yes"
          classpath="${build.dest};${classpath}"/>
  </target>

</project>

<!-- End of file -->
