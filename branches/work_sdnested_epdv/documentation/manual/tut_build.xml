<?xml version="1.0" encoding="ISO-8859-1"?>

<!--

This is the final part of the tutorial. We show how code can be generated from
the design

Modifications
=============

 6 Dec 2001:  Jeremy Bennett. Broken out as a separate section from the
              original manual by Alejandro, Phillipe and Andreas.

-->

<chapter id="ch.tut.build">
  <title>Build (To be written)</title>

  <sect1>
    <title>Introduction</title>

    <para>We now have out design fully specified. With the right simulator we
      could actually execute the design and see if it works. &argouml; does not
      provide such functionality, but this functionality has been provided in
      alternative tools.</para>

    <para>&argouml; does allow you to generate code from the design. In the
      Build Phase take the design we have and supplement it with code for the
      detailed actions of the classes and their states.</para>

    <para>Central to this will be our System Architecture. It is this
      specification that provides the framework against which all our code will
      operate.</para>

    <para>Once again the <emphasis>recursive</emphasis>, and
      <emphasis>iterative</emphasis> nature of our process means we will come
      back to the Design phase many times in the future.</para>

    <para>This chapter is a little different to those that went before. UML
      itself is a notation for design. There is no new UML notation to
      understand here.</para>
  </sect1>

  <!-- Take the reader through the build process. This will be quite high
       level in the current version of the document. -->

  <sect1>
    <title>The Build Process (To be written)</title>

    <remark>To be written&hellip;</remark>

    <sect2>
      <title>Output of the Build Process (To be written)</title>

      <remark>To be written&hellip;</remark>

      <!-- The Code -->

      <sect3>
        <title>Code (To be written)</title>

        <remark>To be written&hellip;</remark>
      </sect3>

      <!-- What documents do we need. Use Cases as basis for Verification and
           User Documentation. -->

      <sect3>
        <title>Documents (To be written)</title>

        <remark>To be written&hellip;</remark>
      </sect3>
    </sect2>
  </sect1>

  <!-- Now show how to do in in Argo/UML. -->

  <sect1>
    <title>Adding Code to &argouml; (To be written)</title>

    <!-- Code for classes -->

    <sect2>
      <title>Classes (To be written)</title>

      <remark>To be written&hellip;</remark>
    </sect2>

    <!-- Code for Actions -->

    <sect2>
      <title>Actions (To be written)</title>

      <remark>To be written&hellip;</remark>
    </sect2>
  </sect1>

  <!-- Now illustrate these techniques with the Case Study. -->

  <sect1>
    <title>Case Study (To be written)</title>

    <sect2>
      <title>Coding for Classes (To be written)</title>

      <remark>To be written&hellip;</remark>

    </sect2>

    <sect2>
      <title>Coding Actions (To be written)</title>

      <remark>To be written&hellip;</remark>

    </sect2>
  </sect1>

  <!-- And round off with a summary -->

  <sect1>
    <title>Case Study (To be written)</title>

    <remark>To be written&hellip;</remark>

  </sect1>

</chapter>

<!-- Local stuff for Emacs - please do not delete

Local Variables:
mode: xml
sgml-doctype: "argomanual.xml"
sgml-parent-document: ("argomanual.xml" "chapter" nil)
sgml-validate-command: "nsgmls -wxml -sv ../docbook-setup/xml.dcl \
  argomanual.xml"
End:

-->
